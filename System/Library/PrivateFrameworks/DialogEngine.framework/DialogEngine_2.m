std::string *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>> const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  result = std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_1C5D08318(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableString *,std::shared_ptr<siri::dialogengine::VariableString>::__shared_ptr_default_delete<siri::dialogengine::VariableString,siri::dialogengine::VariableString>,std::allocator<siri::dialogengine::VariableString>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableString *,std::shared_ptr<siri::dialogengine::VariableString>::__shared_ptr_default_delete<siri::dialogengine::VariableString,siri::dialogengine::VariableString>,std::allocator<siri::dialogengine::VariableString>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableString *,std::shared_ptr<siri::dialogengine::VariableString>::__shared_ptr_default_delete<siri::dialogengine::VariableString,siri::dialogengine::VariableString>,std::allocator<siri::dialogengine::VariableString>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableBoolean *,std::shared_ptr<siri::dialogengine::VariableBoolean>::__shared_ptr_default_delete<siri::dialogengine::VariableBoolean,siri::dialogengine::VariableBoolean>,std::allocator<siri::dialogengine::VariableBoolean>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableBoolean *,std::shared_ptr<siri::dialogengine::VariableBoolean>::__shared_ptr_default_delete<siri::dialogengine::VariableBoolean,siri::dialogengine::VariableBoolean>,std::allocator<siri::dialogengine::VariableBoolean>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableBoolean *,std::shared_ptr<siri::dialogengine::VariableBoolean>::__shared_ptr_default_delete<siri::dialogengine::VariableBoolean,siri::dialogengine::VariableBoolean>,std::allocator<siri::dialogengine::VariableBoolean>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableObject *,std::shared_ptr<siri::dialogengine::VariableObject>::__shared_ptr_default_delete<siri::dialogengine::VariableObject,siri::dialogengine::VariableObject>,std::allocator<siri::dialogengine::VariableObject>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableObject *,std::shared_ptr<siri::dialogengine::VariableObject>::__shared_ptr_default_delete<siri::dialogengine::VariableObject,siri::dialogengine::VariableObject>,std::allocator<siri::dialogengine::VariableObject>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableObject *,std::shared_ptr<siri::dialogengine::VariableObject>::__shared_ptr_default_delete<siri::dialogengine::VariableObject,siri::dialogengine::VariableObject>,std::allocator<siri::dialogengine::VariableObject>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5D08664(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5D08704(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableBoolean,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5D087A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableBoolean *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableBoolean>,std::allocator<siri::dialogengine::VariableBoolean>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableBoolean *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableBoolean>,std::allocator<siri::dialogengine::VariableBoolean>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableBoolean *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableBoolean>,std::allocator<siri::dialogengine::VariableBoolean>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableString *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableString>,std::allocator<siri::dialogengine::VariableString>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableString *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableString>,std::allocator<siri::dialogengine::VariableString>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableString *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableString>,std::allocator<siri::dialogengine::VariableString>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableNumber *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableNumber>,std::allocator<siri::dialogengine::VariableNumber>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableNumber *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableNumber>,std::allocator<siri::dialogengine::VariableNumber>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableNumber *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableNumber>,std::allocator<siri::dialogengine::VariableNumber>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::DialogCalendarRange::dateTimeRangeLong(siri::dialogengine::Context *this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendarRange::dateTimeRangeFromTo(siri::dialogengine::Context *this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendarRange::dateRangeShort(siri::dialogengine::Context *this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendarRange::dateRangeLong(siri::dialogengine::Context *this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendarRange::dateRangeFromTo(siri::dialogengine::Context *this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendarRange::timeRangeShort(siri::dialogengine::Context *this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendarRange::timeRangeLong(siri::dialogengine::Context *this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendarRange::timeRangeFromTo(siri::dialogengine::Context *this, uint64_t a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendarRange::nonSpecificDateTimeRange(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "endSecs");
  uint64_t CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)__p);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v7, CalendarObject);
}

void sub_1C5D08DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,std::__shared_weak_count *a26,void *a27,void *a28,int a29,__int16 a30,char a31,char a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (a36 < 0) {
    operator delete(a28);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a38);
  }
  v47 = *(std::__shared_weak_count **)(v45 - 40);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5D08E98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C5D08E84);
}

void sub_1C5D08EB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C5D08E90);
}

void siri::dialogengine::DialogCalendarRange::dateRangeAbbreviated(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "endSecs");
  uint64_t CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)__p);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v6, CalendarObject);
}

void sub_1C5D09758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a87);
  }
  if (a86 < 0) {
    operator delete(a85);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  MEMORY[0x1C8796D70](v87, 0x10B3C40D3060B95);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a42);
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a77);
  }
  if (a78) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a78);
  }
  _Unwind_Resume(a1);
}

void sub_1C5D09B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  JUMPOUT(0x1C5D09AB0);
}

void sub_1C5D09B54()
{
}

void sub_1C5D09B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    JUMPOUT(0x1C5D09ABCLL);
  }
  JUMPOUT(0x1C5D09AC0);
}

void sub_1C5D09B70()
{
}

void sub_1C5D09B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    JUMPOUT(0x1C5D09ACCLL);
  }
  JUMPOUT(0x1C5D09AD0);
}

void sub_1C5D09B8C()
{
}

void sub_1C5D09B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    JUMPOUT(0x1C5D09ADCLL);
  }
  JUMPOUT(0x1C5D09AE0);
}

void sub_1C5D09BA8()
{
}

void sub_1C5D09BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    JUMPOUT(0x1C5D09AECLL);
  }
  JUMPOUT(0x1C5D09AF0);
}

void sub_1C5D09BC4()
{
}

void sub_1C5D09BD4()
{
}

void sub_1C5D09BDC()
{
}

void sub_1C5D09BE4()
{
}

void sub_1C5D09BF4()
{
}

void sub_1C5D09BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C5D09B2CLL);
}

void sub_1C5D09C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C5D09B38);
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  std::string::size_type v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    v6 = operator new(0x48uLL);
    v11[1] = a1 + 1;
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *uint64_t v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((void *)v6 + 7) = 0;
    *((void *)v6 + 8) = 0;
    char v12 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

uint64_t siri::dialogengine::DialogCalendarRange::start(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "startSecs");
  uint64_t CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return CalendarObject;
}

void sub_1C5D09D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogCalendarRange::end(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "endSecs");
  uint64_t CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return CalendarObject;
}

void sub_1C5D09DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendarRange::isRangeSameDay(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v6, "startSecs");
  uint64_t CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)&v6.__r_.__value_.__l.__data_);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v7, CalendarObject);
}

void sub_1C5D0A094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (*(char *)(v21 - 41) < 0) {
    operator delete(*(void **)(v21 - 64));
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  v23 = *(std::__shared_weak_count **)(v21 - 24);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5D0A1A8()
{
  if (*(char *)(v0 - 41) < 0) {
    operator delete(*(void **)(v0 - 64));
  }
  JUMPOUT(0x1C5D0A1A0);
}

void siri::dialogengine::DialogCalendarRange::isRangeInThisYear(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v6, "startSecs");
  uint64_t CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, &v6);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v7, CalendarObject);
}

void sub_1C5D0A530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (*(char *)(v18 - 33) < 0) {
    operator delete(*(void **)(v18 - 56));
  }
  MEMORY[0x1C8796D70](v17, 0x10B3C408E4F17DDLL);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  v20 = *(std::__shared_weak_count **)(v18 - 24);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void sub_1C5D0A640()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1C5D0A638);
}

void std::shared_ptr<siri::dialogengine::VariableNumber>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5D0A6C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableNumber *,std::shared_ptr<siri::dialogengine::VariableNumber>::__shared_ptr_default_delete<siri::dialogengine::VariableNumber,siri::dialogengine::VariableNumber>,std::allocator<siri::dialogengine::VariableNumber>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableNumber *,std::shared_ptr<siri::dialogengine::VariableNumber>::__shared_ptr_default_delete<siri::dialogengine::VariableNumber,siri::dialogengine::VariableNumber>,std::allocator<siri::dialogengine::VariableNumber>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableNumber *,std::shared_ptr<siri::dialogengine::VariableNumber>::__shared_ptr_default_delete<siri::dialogengine::VariableNumber,siri::dialogengine::VariableNumber>,std::allocator<siri::dialogengine::VariableNumber>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::DialogCalendarRange::isRangeWholeDay(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "startSecs");
  uint64_t CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, v6);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v7, CalendarObject);
}

void sub_1C5D0AB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (*(char *)(v20 - 33) < 0) {
    operator delete(*(void **)(v20 - 56));
  }
  MEMORY[0x1C8796D70](v19, 0x10B3C408E4F17DDLL);
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  v22 = *(std::__shared_weak_count **)(v20 - 24);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(a1);
}

void sub_1C5D0AC10()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1C5D0ABFCLL);
}

void sub_1C5D0AC28()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x1C5D0AC08);
}

void siri::dialogengine::DialogCalendarRange::isStartFromBeginningOfDay(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "startSecs");
  uint64_t CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)__p);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v7, CalendarObject);
}

void sub_1C5D0AE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v19, 0x10B3C408E4F17DDLL);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  v22 = *(std::__shared_weak_count **)(v20 - 24);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendarRange::isEndUntilEndOfDay(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "endSecs");
  uint64_t CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)__p);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v7, CalendarObject);
}

void sub_1C5D0B0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v19, 0x10B3C408E4F17DDLL);
  v22 = *(std::__shared_weak_count **)(v20 - 24);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Length>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v3 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Length>(a1);
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0)
    {
      std::string::size_type v5 = *(const std::string::value_type **)(v3 + 8);
      std::string::size_type v6 = *(void *)(v3 + 16);
      std::string::__init_copy_ctor_external(a2, v5, v6);
    }
    else
    {
      long long v4 = *(_OWORD *)(v3 + 8);
      a2->__r_.__value_.__r.__words[2] = *(void *)(v3 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t siri::dialogengine::FindUnitInfo<siri::dialogengine::Length>(int a1)
{
  uint64_t v2 = siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>();
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a1;
    if (v7 >= a1) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3) {
    return 0;
  }
  int v10 = *(_DWORD *)(v6 + 32);
  uint64_t v11 = v6 + 40;
  if (v10 <= a1) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>()
{
  {
    operator new();
  }
  uint64_t v0 = (std::once_flag::_State_type *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>(void)::flag, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(v0, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Length>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>(void)::$_0 &&>>);
  }
  return siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>(void)::sUnits;
}

void sub_1C5D0B340(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Length>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5D0BCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x280]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x260]);
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x2F8]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x2D8]);
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (SLOBYTE(STACK[0x2BF]) < 0) {
    operator delete((void *)STACK[0x2A8]);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x370]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x350]);
  if (SLOBYTE(STACK[0x34F]) < 0) {
    operator delete((void *)STACK[0x338]);
  }
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x3E8]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x3C8]);
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x460]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x440]);
  if (SLOBYTE(STACK[0x43F]) < 0) {
    operator delete((void *)STACK[0x428]);
  }
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x4D8]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x4B8]);
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete((void *)STACK[0x488]);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x550]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x530]);
  if (SLOBYTE(STACK[0x52F]) < 0) {
    operator delete((void *)STACK[0x518]);
  }
  if (SLOBYTE(STACK[0x517]) < 0) {
    operator delete((void *)STACK[0x500]);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x5C8]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x5A8]);
  if (SLOBYTE(STACK[0x5A7]) < 0) {
    operator delete((void *)STACK[0x590]);
  }
  if (SLOBYTE(STACK[0x58F]) < 0) {
    operator delete((void *)STACK[0x578]);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x640]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x620]);
  if (SLOBYTE(STACK[0x61F]) < 0) {
    operator delete((void *)STACK[0x608]);
  }
  if (SLOBYTE(STACK[0x607]) < 0) {
    operator delete((void *)STACK[0x5F0]);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a86 < 0) {
    operator delete(a85);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x6B8]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x698]);
  if (SLOBYTE(STACK[0x697]) < 0) {
    operator delete((void *)STACK[0x680]);
  }
  if (SLOBYTE(STACK[0x67F]) < 0) {
    operator delete((void *)STACK[0x668]);
  }
  if (a88 < 0) {
    operator delete(a87);
  }
  if (a90 < 0) {
    operator delete(a89);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x730]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x710]);
  if (SLOBYTE(STACK[0x70F]) < 0) {
    operator delete((void *)STACK[0x6F8]);
  }
  if (SLOBYTE(STACK[0x6F7]) < 0) {
    operator delete((void *)STACK[0x6E0]);
  }
  if (a92 < 0) {
    operator delete(a91);
  }
  if (SLOBYTE(STACK[0x20F]) < 0) {
    operator delete(a93);
  }
  if (&STACK[0x750] != (unint64_t *)(v94 + 1280))
  {
    v96 = (void *)(v94 + 1248);
    do
    {
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v96);
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v96 - 4);
      if (*((char *)v96 - 33) < 0) {
        operator delete((void *)*(v96 - 7));
      }
      if (*((char *)v96 - 57) < 0) {
        operator delete((void *)*(v96 - 10));
      }
      v97 = v96 - 12;
      v96 -= 16;
    }
    while (v97 != &STACK[0x750]);
  }
  MEMORY[0x1C8796D70](v93, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(uint64_t a1, const char *a2, long long *a3, long long *a4, double a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 48) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 112) = 0;
  if (a5 == 0.0)
  {
    a5 = 1.0;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid unit conversion factor; Replacing with 1.0 for safety",
      a2);
  }
  uint64_t v11 = &unk_1F2119350;
  double v12 = a5;
  uint64_t v13 = &v11;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v11, (void *)(a1 + 56));
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v11);
  uint64_t v11 = &unk_1F21193E0;
  double v12 = a5;
  uint64_t v13 = &v11;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v11, (void *)(a1 + 88));
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v11);
  return a1;
}

void sub_1C5D0C4AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a1 + 88, a2 + 88);
  return a1;
}

void sub_1C5D0C5AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,std::__map_value_compare<siri::dialogengine::Length,std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,std::less<siri::dialogengine::Length>,true>,std::allocator<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,std::__map_value_compare<siri::dialogengine::Length,std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,std::less<siri::dialogengine::Length>,true>,std::allocator<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>>>::destroy(*a1);
    std::__tree<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,std::__map_value_compare<siri::dialogengine::Length,std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,std::less<siri::dialogengine::Length>,true>,std::allocator<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<siri::dialogengine::Length const,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<siri::dialogengine::Length const,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,0>(uint64_t a1)
{
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((void *)(a1 + 96));
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((void *)(a1 + 64));
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 16);
    operator delete(v2);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<siri::dialogengine::Length const,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<double ()(double)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    long long v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1C5D0CA80(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 / *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F21193E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F21193E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::~__func()
{
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2119350;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2119350;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::~__func()
{
}

uint64_t siri::dialogengine::ParseUnitLabel<siri::dialogengine::Length>(uint64_t a1)
{
  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  uint64_t v1 = (void *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>();
  uint64_t v2 = v1 + 1;
  uint64_t v3 = (void *)*v1;
  if ((void *)*v1 != v1 + 1)
  {
    if ((v18 & 0x80u) == 0) {
      unint64_t v4 = v18;
    }
    else {
      unint64_t v4 = (unint64_t)__p[1];
    }
    if ((v18 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    while (1)
    {
      uint64_t v6 = *((unsigned __int8 *)v3 + 71);
      if ((v6 & 0x80u) == 0) {
        int v7 = (void *)*((unsigned __int8 *)v3 + 71);
      }
      else {
        int v7 = (void *)v3[7];
      }
      if (v7 == (void *)v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[6], v5, v3[7])) {
            break;
          }
        }
        else
        {
          if (!*((unsigned char *)v3 + 71)) {
            break;
          }
          uint64_t v8 = 0;
          while (*((unsigned __int8 *)v3 + v8 + 48) == *((unsigned __int8 *)v5 + v8))
          {
            if (v6 == ++v8) {
              goto LABEL_41;
            }
          }
        }
      }
      uint64_t v9 = *((unsigned __int8 *)v3 + 95);
      if (*((char *)v3 + 95) < 0)
      {
        if (v3[10])
        {
LABEL_23:
          if ((v9 & 0x80u) == 0) {
            int v10 = (void *)*((unsigned __int8 *)v3 + 95);
          }
          else {
            int v10 = (void *)v3[10];
          }
          if (v10 == (void *)v4)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp((const void *)v3[9], v5, v3[10])) {
                break;
              }
            }
            else
            {
              if (!*((unsigned char *)v3 + 95)) {
                break;
              }
              uint64_t v11 = 0;
              while (*((unsigned __int8 *)v3 + v11 + 72) == *((unsigned __int8 *)v5 + v11))
              {
                if (v9 == ++v11) {
                  goto LABEL_41;
                }
              }
            }
          }
        }
      }
      else if (*((unsigned char *)v3 + 95))
      {
        goto LABEL_23;
      }
      double v12 = (void *)v3[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          double v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v3[2];
          BOOL v14 = *v13 == (void)v3;
          uint64_t v3 = v13;
        }
        while (!v14);
      }
      uint64_t v3 = v13;
      if (v13 == v2) {
        goto LABEL_43;
      }
    }
  }
LABEL_41:
  if (v3 == v2) {
LABEL_43:
  }
    uint64_t v15 = 0xFFFFFFFFLL;
  else {
    uint64_t v15 = *((unsigned int *)v3 + 10);
  }
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  return v15;
}

void sub_1C5D0CDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Length>(uint64_t a1, const char *a2)
{
  if (a1 == -1 || a2 == -1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Either fromUnit or toUnit is invalid", a2);
  }
  else if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Length>(a1))
  {
    if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Length>((int)a2)) {
      return 1;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for toUnit: %d", v5, a2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for fromUnit: %d", v4, a1);
  }
  return 0;
}

void siri::dialogengine::ConvertUnitValue<siri::dialogengine::Length>(int a1, int a2)
{
  if (a1 != a2) {
    siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Length>();
  }
}

uint64_t std::function<double ()(double)>::operator()(uint64_t a1, double a2)
{
  double v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, double *))(*(void *)a1 + 48))(a1, &v3);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Temperature>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v3 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Temperature>(a1);
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0)
    {
      long long v5 = *(const std::string::value_type **)(v3 + 8);
      std::string::size_type v6 = *(void *)(v3 + 16);
      std::string::__init_copy_ctor_external(a2, v5, v6);
    }
    else
    {
      long long v4 = *(_OWORD *)(v3 + 8);
      a2->__r_.__value_.__r.__words[2] = *(void *)(v3 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t siri::dialogengine::FindUnitInfo<siri::dialogengine::Temperature>(int a1)
{
  uint64_t v2 = siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>();
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a1;
    if (v7 >= a1) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3) {
    return 0;
  }
  int v10 = *(_DWORD *)(v6 + 32);
  uint64_t v11 = v6 + 40;
  if (v10 <= a1) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>()
{
  {
    operator new();
  }
  uint64_t v0 = (std::once_flag::_State_type *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::flag, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(v0, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0 &&>>);
  }
  return siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::sUnits;
}

void sub_1C5D0D168(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5D0D704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a74);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a73);
  if (a72 < 0) {
    operator delete(__p);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a80);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a79);
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x268]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x248]);
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a81);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a82);
  if (a45 < 0) {
    operator delete(a40);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x320]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x300]);
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x288]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x2A8]);
  if (a57 < 0) {
    operator delete(a52);
  }
  if (&STACK[0x340] != (unint64_t *)(v83 + 384))
  {
    v85 = (void *)(v83 + 352);
    do
    {
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v85);
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v85 - 4);
      if (*((char *)v85 - 33) < 0) {
        operator delete((void *)*(v85 - 7));
      }
      if (*((char *)v85 - 57) < 0) {
        operator delete((void *)*(v85 - 10));
      }
      v86 = v85 - 12;
      v85 -= 16;
    }
    while (v86 != &STACK[0x340]);
  }
  MEMORY[0x1C8796D70](v82, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(uint64_t a1, int a2, long long *a3, uint64_t a4, uint64_t a5, long long *a6)
{
  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v10;
  }
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v11 = *a6;
    *(void *)(a1 + 48) = *((void *)a6 + 2);
    *(_OWORD *)(a1 + 32) = v11;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 112) = 0;
  std::function<double ()(double)>::operator=((void *)(a1 + 56), a4);
  std::function<double ()(double)>::operator=((void *)(a1 + 88), a5);
  return a1;
}

void sub_1C5D0DAE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a1 + 88, a2 + 88);
  return a1;
}

void sub_1C5D0DBE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(uint64_t a1, const char *a2, long long *a3, long long *a4, double a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 48) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 112) = 0;
  if (a5 == 0.0)
  {
    a5 = 1.0;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid unit conversion factor; Replacing with 1.0 for safety",
      a2);
  }
  long long v11 = &unk_1F2119660;
  double v12 = a5;
  uint64_t v13 = &v11;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v11, (void *)(a1 + 56));
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v11);
  long long v11 = &unk_1F21196E0;
  double v12 = a5;
  uint64_t v13 = &v11;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v11, (void *)(a1 + 88));
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v11);
  return a1;
}

void sub_1C5D0DD98(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 / *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F21196E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F21196E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::~__func()
{
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2119660;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2119660;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::~__func()
{
}

void *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * 1.8 + -459.67;
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4}>,double ()(double)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F21195E0;
}

void *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4}>,double ()(double)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F21195E0;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4}>,double ()(double)>::~__func()
{
}

void *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return (*a2 + 459.67) / 1.8;
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3}>,double ()(double)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2119560;
}

void *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3}>,double ()(double)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F2119560;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3}>,double ()(double)>::~__func()
{
}

void *std::function<double ()(double)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 + -273.15;
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F21194E0;
}

void *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2}>,double ()(double)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F21194E0;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2}>,double ()(double)>::~__func()
{
}

void *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 + 273.15;
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2119460;
}

void *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1}>,double ()(double)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F2119460;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1}>,double ()(double)>::~__func()
{
}

uint64_t siri::dialogengine::ParseUnitLabel<siri::dialogengine::Temperature>(uint64_t a1)
{
  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  uint64_t v1 = (void *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>();
  uint64_t v2 = v1 + 1;
  uint64_t v3 = (void *)*v1;
  if ((void *)*v1 != v1 + 1)
  {
    if ((v18 & 0x80u) == 0) {
      unint64_t v4 = v18;
    }
    else {
      unint64_t v4 = (unint64_t)__p[1];
    }
    if ((v18 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    while (1)
    {
      uint64_t v6 = *((unsigned __int8 *)v3 + 71);
      if ((v6 & 0x80u) == 0) {
        int v7 = (void *)*((unsigned __int8 *)v3 + 71);
      }
      else {
        int v7 = (void *)v3[7];
      }
      if (v7 == (void *)v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[6], v5, v3[7])) {
            break;
          }
        }
        else
        {
          if (!*((unsigned char *)v3 + 71)) {
            break;
          }
          uint64_t v8 = 0;
          while (*((unsigned __int8 *)v3 + v8 + 48) == *((unsigned __int8 *)v5 + v8))
          {
            if (v6 == ++v8) {
              goto LABEL_41;
            }
          }
        }
      }
      uint64_t v9 = *((unsigned __int8 *)v3 + 95);
      if (*((char *)v3 + 95) < 0)
      {
        if (v3[10])
        {
LABEL_23:
          if ((v9 & 0x80u) == 0) {
            long long v10 = (void *)*((unsigned __int8 *)v3 + 95);
          }
          else {
            long long v10 = (void *)v3[10];
          }
          if (v10 == (void *)v4)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp((const void *)v3[9], v5, v3[10])) {
                break;
              }
            }
            else
            {
              if (!*((unsigned char *)v3 + 95)) {
                break;
              }
              uint64_t v11 = 0;
              while (*((unsigned __int8 *)v3 + v11 + 72) == *((unsigned __int8 *)v5 + v11))
              {
                if (v9 == ++v11) {
                  goto LABEL_41;
                }
              }
            }
          }
        }
      }
      else if (*((unsigned char *)v3 + 95))
      {
        goto LABEL_23;
      }
      double v12 = (void *)v3[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          double v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v3[2];
          BOOL v14 = *v13 == (void)v3;
          uint64_t v3 = v13;
        }
        while (!v14);
      }
      uint64_t v3 = v13;
      if (v13 == v2) {
        goto LABEL_43;
      }
    }
  }
LABEL_41:
  if (v3 == v2) {
LABEL_43:
  }
    uint64_t v15 = 0xFFFFFFFFLL;
  else {
    uint64_t v15 = *((unsigned int *)v3 + 10);
  }
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  return v15;
}

void sub_1C5D0E530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Temperature>(uint64_t a1, const char *a2)
{
  if (a1 == -1 || a2 == -1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Either fromUnit or toUnit is invalid", a2);
  }
  else if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Temperature>(a1))
  {
    if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Temperature>((int)a2)) {
      return 1;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for toUnit: %d", v5, a2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for fromUnit: %d", v4, a1);
  }
  return 0;
}

void siri::dialogengine::ConvertUnitValue<siri::dialogengine::Temperature>(int a1, int a2)
{
  if (a1 != a2) {
    siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Temperature>();
  }
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Speed>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v3 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Speed>(a1);
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0)
    {
      long long v5 = *(const std::string::value_type **)(v3 + 8);
      std::string::size_type v6 = *(void *)(v3 + 16);
      std::string::__init_copy_ctor_external(a2, v5, v6);
    }
    else
    {
      long long v4 = *(_OWORD *)(v3 + 8);
      a2->__r_.__value_.__r.__words[2] = *(void *)(v3 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t siri::dialogengine::FindUnitInfo<siri::dialogengine::Speed>(int a1)
{
  uint64_t v2 = siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>();
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a1;
    if (v7 >= a1) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3) {
    return 0;
  }
  int v10 = *(_DWORD *)(v6 + 32);
  uint64_t v11 = v6 + 40;
  if (v10 <= a1) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>()
{
  {
    operator new();
  }
  uint64_t v0 = (std::once_flag::_State_type *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>(void)::flag, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(v0, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Speed>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>(void)::$_0 &&>>);
  }
  return siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>(void)::sUnits;
}

void sub_1C5D0E850(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Speed>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5D0EDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a77);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a76);
  if (a75 < 0) {
    operator delete(__p);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a83);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a82);
  if (a81 < 0) {
    operator delete(a80);
  }
  if (a79 < 0) {
    operator delete(a78);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x250]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x230]);
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x2C8]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x2A8]);
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  if (SLOBYTE(STACK[0x28F]) < 0) {
    operator delete((void *)STACK[0x278]);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x340]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x320]);
  if (SLOBYTE(STACK[0x31F]) < 0) {
    operator delete((void *)STACK[0x308]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (&STACK[0x360] != (unint64_t *)(v84 + 512))
  {
    v86 = (void *)(v84 + 480);
    do
    {
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v86);
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v86 - 4);
      if (*((char *)v86 - 33) < 0) {
        operator delete((void *)*(v86 - 7));
      }
      if (*((char *)v86 - 57) < 0) {
        operator delete((void *)*(v86 - 10));
      }
      uint64_t v87 = v86 - 12;
      v86 -= 16;
    }
    while (v87 != &STACK[0x360]);
  }
  MEMORY[0x1C8796D70](v83, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(uint64_t a1, const char *a2, long long *a3, long long *a4, double a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 48) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 112) = 0;
  if (a5 == 0.0)
  {
    a5 = 1.0;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid unit conversion factor; Replacing with 1.0 for safety",
      a2);
  }
  uint64_t v11 = &unk_1F2119760;
  double v12 = a5;
  uint64_t v13 = &v11;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v11, (void *)(a1 + 56));
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v11);
  uint64_t v11 = &unk_1F21197E0;
  double v12 = a5;
  uint64_t v13 = &v11;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v11, (void *)(a1 + 88));
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v11);
  return a1;
}

void sub_1C5D0F2C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a1 + 88, a2 + 88);
  return a1;
}

void sub_1C5D0F3C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 / *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F21197E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F21197E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::~__func()
{
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2119760;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2119760;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::~__func()
{
}

uint64_t siri::dialogengine::ParseUnitLabel<siri::dialogengine::Speed>(uint64_t a1)
{
  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  uint64_t v1 = (void *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>();
  uint64_t v2 = v1 + 1;
  uint64_t v3 = (void *)*v1;
  if ((void *)*v1 != v1 + 1)
  {
    if ((v18 & 0x80u) == 0) {
      unint64_t v4 = v18;
    }
    else {
      unint64_t v4 = (unint64_t)__p[1];
    }
    if ((v18 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    while (1)
    {
      uint64_t v6 = *((unsigned __int8 *)v3 + 71);
      if ((v6 & 0x80u) == 0) {
        int v7 = (void *)*((unsigned __int8 *)v3 + 71);
      }
      else {
        int v7 = (void *)v3[7];
      }
      if (v7 == (void *)v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[6], v5, v3[7])) {
            break;
          }
        }
        else
        {
          if (!*((unsigned char *)v3 + 71)) {
            break;
          }
          uint64_t v8 = 0;
          while (*((unsigned __int8 *)v3 + v8 + 48) == *((unsigned __int8 *)v5 + v8))
          {
            if (v6 == ++v8) {
              goto LABEL_41;
            }
          }
        }
      }
      uint64_t v9 = *((unsigned __int8 *)v3 + 95);
      if (*((char *)v3 + 95) < 0)
      {
        if (v3[10])
        {
LABEL_23:
          if ((v9 & 0x80u) == 0) {
            int v10 = (void *)*((unsigned __int8 *)v3 + 95);
          }
          else {
            int v10 = (void *)v3[10];
          }
          if (v10 == (void *)v4)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp((const void *)v3[9], v5, v3[10])) {
                break;
              }
            }
            else
            {
              if (!*((unsigned char *)v3 + 95)) {
                break;
              }
              uint64_t v11 = 0;
              while (*((unsigned __int8 *)v3 + v11 + 72) == *((unsigned __int8 *)v5 + v11))
              {
                if (v9 == ++v11) {
                  goto LABEL_41;
                }
              }
            }
          }
        }
      }
      else if (*((unsigned char *)v3 + 95))
      {
        goto LABEL_23;
      }
      double v12 = (void *)v3[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          double v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v3[2];
          BOOL v14 = *v13 == (void)v3;
          uint64_t v3 = v13;
        }
        while (!v14);
      }
      uint64_t v3 = v13;
      if (v13 == v2) {
        goto LABEL_43;
      }
    }
  }
LABEL_41:
  if (v3 == v2) {
LABEL_43:
  }
    uint64_t v15 = 0xFFFFFFFFLL;
  else {
    uint64_t v15 = *((unsigned int *)v3 + 10);
  }
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  return v15;
}

void sub_1C5D0F778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Speed>(uint64_t a1, const char *a2)
{
  if (a1 == -1 || a2 == -1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Either fromUnit or toUnit is invalid", a2);
  }
  else if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Speed>(a1))
  {
    if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Speed>((int)a2)) {
      return 1;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for toUnit: %d", v5, a2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for fromUnit: %d", v4, a1);
  }
  return 0;
}

void siri::dialogengine::ConvertUnitValue<siri::dialogengine::Speed>(int a1, int a2)
{
  if (a1 != a2) {
    siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Speed>();
  }
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Pressure>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v3 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Pressure>(a1);
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0)
    {
      long long v5 = *(const std::string::value_type **)(v3 + 8);
      std::string::size_type v6 = *(void *)(v3 + 16);
      std::string::__init_copy_ctor_external(a2, v5, v6);
    }
    else
    {
      long long v4 = *(_OWORD *)(v3 + 8);
      a2->__r_.__value_.__r.__words[2] = *(void *)(v3 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t siri::dialogengine::FindUnitInfo<siri::dialogengine::Pressure>(int a1)
{
  uint64_t v2 = siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>();
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a1;
    if (v7 >= a1) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3) {
    return 0;
  }
  int v10 = *(_DWORD *)(v6 + 32);
  uint64_t v11 = v6 + 40;
  if (v10 <= a1) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>()
{
  {
    operator new();
  }
  uint64_t v0 = (std::once_flag::_State_type *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>(void)::flag, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(v0, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Pressure>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>(void)::$_0 &&>>);
  }
  return siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>(void)::sUnits;
}

void sub_1C5D0FA98(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Pressure>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5D1002C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a77);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a76);
  if (a75 < 0) {
    operator delete(__p);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a83);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a82);
  if (a81 < 0) {
    operator delete(a80);
  }
  if (a79 < 0) {
    operator delete(a78);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x250]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x230]);
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x2C8]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x2A8]);
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  if (SLOBYTE(STACK[0x28F]) < 0) {
    operator delete((void *)STACK[0x278]);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x340]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x320]);
  if (SLOBYTE(STACK[0x31F]) < 0) {
    operator delete((void *)STACK[0x308]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (&STACK[0x360] != (unint64_t *)(v84 + 512))
  {
    v86 = (void *)(v84 + 480);
    do
    {
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v86);
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v86 - 4);
      if (*((char *)v86 - 33) < 0) {
        operator delete((void *)*(v86 - 7));
      }
      if (*((char *)v86 - 57) < 0) {
        operator delete((void *)*(v86 - 10));
      }
      uint64_t v87 = v86 - 12;
      v86 -= 16;
    }
    while (v87 != &STACK[0x360]);
  }
  MEMORY[0x1C8796D70](v83, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(uint64_t a1, const char *a2, long long *a3, long long *a4, double a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 48) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 112) = 0;
  if (a5 == 0.0)
  {
    a5 = 1.0;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid unit conversion factor; Replacing with 1.0 for safety",
      a2);
  }
  uint64_t v11 = &unk_1F2119860;
  double v12 = a5;
  uint64_t v13 = &v11;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v11, (void *)(a1 + 56));
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v11);
  uint64_t v11 = &unk_1F21198E0;
  double v12 = a5;
  uint64_t v13 = &v11;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v11, (void *)(a1 + 88));
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v11);
  return a1;
}

void sub_1C5D1050C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a1 + 88, a2 + 88);
  return a1;
}

void sub_1C5D1060C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 / *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F21198E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F21198E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::~__func()
{
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2119860;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2119860;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::~__func()
{
}

uint64_t siri::dialogengine::ParseUnitLabel<siri::dialogengine::Pressure>(uint64_t a1)
{
  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  uint64_t v1 = (void *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>();
  uint64_t v2 = v1 + 1;
  uint64_t v3 = (void *)*v1;
  if ((void *)*v1 != v1 + 1)
  {
    if ((v18 & 0x80u) == 0) {
      unint64_t v4 = v18;
    }
    else {
      unint64_t v4 = (unint64_t)__p[1];
    }
    if ((v18 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    while (1)
    {
      uint64_t v6 = *((unsigned __int8 *)v3 + 71);
      if ((v6 & 0x80u) == 0) {
        int v7 = (void *)*((unsigned __int8 *)v3 + 71);
      }
      else {
        int v7 = (void *)v3[7];
      }
      if (v7 == (void *)v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[6], v5, v3[7])) {
            break;
          }
        }
        else
        {
          if (!*((unsigned char *)v3 + 71)) {
            break;
          }
          uint64_t v8 = 0;
          while (*((unsigned __int8 *)v3 + v8 + 48) == *((unsigned __int8 *)v5 + v8))
          {
            if (v6 == ++v8) {
              goto LABEL_41;
            }
          }
        }
      }
      uint64_t v9 = *((unsigned __int8 *)v3 + 95);
      if (*((char *)v3 + 95) < 0)
      {
        if (v3[10])
        {
LABEL_23:
          if ((v9 & 0x80u) == 0) {
            int v10 = (void *)*((unsigned __int8 *)v3 + 95);
          }
          else {
            int v10 = (void *)v3[10];
          }
          if (v10 == (void *)v4)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp((const void *)v3[9], v5, v3[10])) {
                break;
              }
            }
            else
            {
              if (!*((unsigned char *)v3 + 95)) {
                break;
              }
              uint64_t v11 = 0;
              while (*((unsigned __int8 *)v3 + v11 + 72) == *((unsigned __int8 *)v5 + v11))
              {
                if (v9 == ++v11) {
                  goto LABEL_41;
                }
              }
            }
          }
        }
      }
      else if (*((unsigned char *)v3 + 95))
      {
        goto LABEL_23;
      }
      double v12 = (void *)v3[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          double v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v3[2];
          BOOL v14 = *v13 == (void)v3;
          uint64_t v3 = v13;
        }
        while (!v14);
      }
      uint64_t v3 = v13;
      if (v13 == v2) {
        goto LABEL_43;
      }
    }
  }
LABEL_41:
  if (v3 == v2) {
LABEL_43:
  }
    uint64_t v15 = 0xFFFFFFFFLL;
  else {
    uint64_t v15 = *((unsigned int *)v3 + 10);
  }
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  return v15;
}

void sub_1C5D109BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Pressure>(uint64_t a1, const char *a2)
{
  if (a1 == -1 || a2 == -1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Either fromUnit or toUnit is invalid", a2);
  }
  else if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Pressure>(a1))
  {
    if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Pressure>((int)a2)) {
      return 1;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for toUnit: %d", v5, a2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for fromUnit: %d", v4, a1);
  }
  return 0;
}

void siri::dialogengine::ConvertUnitValue<siri::dialogengine::Pressure>(int a1, int a2)
{
  if (a1 != a2) {
    siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Pressure>();
  }
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Area>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v3 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Area>(a1);
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0)
    {
      long long v5 = *(const std::string::value_type **)(v3 + 8);
      std::string::size_type v6 = *(void *)(v3 + 16);
      std::string::__init_copy_ctor_external(a2, v5, v6);
    }
    else
    {
      long long v4 = *(_OWORD *)(v3 + 8);
      a2->__r_.__value_.__r.__words[2] = *(void *)(v3 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t siri::dialogengine::FindUnitInfo<siri::dialogengine::Area>(int a1)
{
  uint64_t v2 = siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>();
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a1;
    if (v7 >= a1) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3) {
    return 0;
  }
  int v10 = *(_DWORD *)(v6 + 32);
  uint64_t v11 = v6 + 40;
  if (v10 <= a1) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>()
{
  {
    operator new();
  }
  uint64_t v0 = (std::once_flag::_State_type *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>(void)::flag, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(v0, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Area>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>(void)::$_0 &&>>);
  }
  return siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>(void)::sUnits;
}

void sub_1C5D10CDC(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Area>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5D11320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a80);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a79);
  if (a78 < 0) {
    operator delete(__p);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x210]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a85);
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x288]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x268]);
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x300]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x2E0]);
  if (SLOBYTE(STACK[0x2DF]) < 0) {
    operator delete((void *)STACK[0x2C8]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x378]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  if (SLOBYTE(STACK[0x33F]) < 0) {
    operator delete((void *)STACK[0x328]);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x3F0]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x3D0]);
  if (SLOBYTE(STACK[0x3CF]) < 0) {
    operator delete((void *)STACK[0x3B8]);
  }
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete((void *)STACK[0x3A0]);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (&STACK[0x410] != (unint64_t *)(v86 + 640))
  {
    v88 = (void *)(v86 + 608);
    do
    {
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v88);
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v88 - 4);
      if (*((char *)v88 - 33) < 0) {
        operator delete((void *)*(v88 - 7));
      }
      if (*((char *)v88 - 57) < 0) {
        operator delete((void *)*(v88 - 10));
      }
      v89 = v88 - 12;
      v88 -= 16;
    }
    while (v89 != &STACK[0x410]);
  }
  MEMORY[0x1C8796D70](v85, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(uint64_t a1, const char *a2, long long *a3, long long *a4, double a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 48) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 112) = 0;
  if (a5 == 0.0)
  {
    a5 = 1.0;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid unit conversion factor; Replacing with 1.0 for safety",
      a2);
  }
  uint64_t v11 = &unk_1F2119960;
  double v12 = a5;
  uint64_t v13 = &v11;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v11, (void *)(a1 + 56));
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v11);
  uint64_t v11 = &unk_1F21199E0;
  double v12 = a5;
  uint64_t v13 = &v11;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v11, (void *)(a1 + 88));
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v11);
  return a1;
}

void sub_1C5D1187C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a1 + 88, a2 + 88);
  return a1;
}

void sub_1C5D1197C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 / *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F21199E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F21199E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::~__func()
{
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2119960;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2119960;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::~__func()
{
}

uint64_t siri::dialogengine::ParseUnitLabel<siri::dialogengine::Area>(uint64_t a1)
{
  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  uint64_t v1 = (void *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>();
  uint64_t v2 = v1 + 1;
  uint64_t v3 = (void *)*v1;
  if ((void *)*v1 != v1 + 1)
  {
    if ((v18 & 0x80u) == 0) {
      unint64_t v4 = v18;
    }
    else {
      unint64_t v4 = (unint64_t)__p[1];
    }
    if ((v18 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    while (1)
    {
      uint64_t v6 = *((unsigned __int8 *)v3 + 71);
      if ((v6 & 0x80u) == 0) {
        int v7 = (void *)*((unsigned __int8 *)v3 + 71);
      }
      else {
        int v7 = (void *)v3[7];
      }
      if (v7 == (void *)v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[6], v5, v3[7])) {
            break;
          }
        }
        else
        {
          if (!*((unsigned char *)v3 + 71)) {
            break;
          }
          uint64_t v8 = 0;
          while (*((unsigned __int8 *)v3 + v8 + 48) == *((unsigned __int8 *)v5 + v8))
          {
            if (v6 == ++v8) {
              goto LABEL_41;
            }
          }
        }
      }
      uint64_t v9 = *((unsigned __int8 *)v3 + 95);
      if (*((char *)v3 + 95) < 0)
      {
        if (v3[10])
        {
LABEL_23:
          if ((v9 & 0x80u) == 0) {
            int v10 = (void *)*((unsigned __int8 *)v3 + 95);
          }
          else {
            int v10 = (void *)v3[10];
          }
          if (v10 == (void *)v4)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp((const void *)v3[9], v5, v3[10])) {
                break;
              }
            }
            else
            {
              if (!*((unsigned char *)v3 + 95)) {
                break;
              }
              uint64_t v11 = 0;
              while (*((unsigned __int8 *)v3 + v11 + 72) == *((unsigned __int8 *)v5 + v11))
              {
                if (v9 == ++v11) {
                  goto LABEL_41;
                }
              }
            }
          }
        }
      }
      else if (*((unsigned char *)v3 + 95))
      {
        goto LABEL_23;
      }
      double v12 = (void *)v3[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          double v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v3[2];
          BOOL v14 = *v13 == (void)v3;
          uint64_t v3 = v13;
        }
        while (!v14);
      }
      uint64_t v3 = v13;
      if (v13 == v2) {
        goto LABEL_43;
      }
    }
  }
LABEL_41:
  if (v3 == v2) {
LABEL_43:
  }
    uint64_t v15 = 0xFFFFFFFFLL;
  else {
    uint64_t v15 = *((unsigned int *)v3 + 10);
  }
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  return v15;
}

void sub_1C5D11D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Area>(uint64_t a1, const char *a2)
{
  if (a1 == -1 || a2 == -1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Either fromUnit or toUnit is invalid", a2);
  }
  else if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Area>(a1))
  {
    if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Area>((int)a2)) {
      return 1;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for toUnit: %d", v5, a2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for fromUnit: %d", v4, a1);
  }
  return 0;
}

void siri::dialogengine::ConvertUnitValue<siri::dialogengine::Area>(int a1, int a2)
{
  if (a1 != a2) {
    siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Area>();
  }
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Density>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v3 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Density>(a1);
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0)
    {
      long long v5 = *(const std::string::value_type **)(v3 + 8);
      std::string::size_type v6 = *(void *)(v3 + 16);
      std::string::__init_copy_ctor_external(a2, v5, v6);
    }
    else
    {
      long long v4 = *(_OWORD *)(v3 + 8);
      a2->__r_.__value_.__r.__words[2] = *(void *)(v3 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t siri::dialogengine::FindUnitInfo<siri::dialogengine::Density>(int a1)
{
  uint64_t v2 = siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>();
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a1;
    if (v7 >= a1) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3) {
    return 0;
  }
  int v10 = *(_DWORD *)(v6 + 32);
  uint64_t v11 = v6 + 40;
  if (v10 <= a1) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>()
{
  {
    operator new();
  }
  uint64_t v0 = (std::once_flag::_State_type *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>(void)::flag, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(v0, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Density>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>(void)::$_0 &&>>);
  }
  return siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>(void)::sUnits;
}

void sub_1C5D1204C(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Density>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5D123E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a54);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a50);
  if (a49 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  v76 = (char *)(v74 + 128);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a72);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&a71);
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (&a73 != v76)
  {
    v77 = v76 - 32;
    do
    {
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v77);
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((void *)v77 - 4);
      if (*(v77 - 33) < 0) {
        operator delete(*((void **)v77 - 7));
      }
      if (*(v77 - 57) < 0) {
        operator delete(*((void **)v77 - 10));
      }
      v78 = v77 - 96;
      v77 -= 128;
    }
    while (v78 != &a73);
  }
  MEMORY[0x1C8796D70](v73, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(uint64_t a1, const char *a2, long long *a3, long long *a4, double a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 48) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 112) = 0;
  if (a5 == 0.0)
  {
    a5 = 1.0;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid unit conversion factor; Replacing with 1.0 for safety",
      a2);
  }
  uint64_t v11 = &unk_1F2119A60;
  double v12 = a5;
  uint64_t v13 = &v11;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v11, (void *)(a1 + 56));
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v11);
  uint64_t v11 = &unk_1F2119AE0;
  double v12 = a5;
  uint64_t v13 = &v11;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v11, (void *)(a1 + 88));
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v11);
  return a1;
}

void sub_1C5D1274C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a1 + 88, a2 + 88);
  return a1;
}

void sub_1C5D1284C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 / *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2119AE0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2119AE0;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::~__func()
{
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2119A60;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2119A60;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::~__func()
{
}

uint64_t siri::dialogengine::ParseUnitLabel<siri::dialogengine::Density>(uint64_t a1)
{
  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  uint64_t v1 = (void *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>();
  uint64_t v2 = v1 + 1;
  uint64_t v3 = (void *)*v1;
  if ((void *)*v1 != v1 + 1)
  {
    if ((v18 & 0x80u) == 0) {
      unint64_t v4 = v18;
    }
    else {
      unint64_t v4 = (unint64_t)__p[1];
    }
    if ((v18 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    while (1)
    {
      uint64_t v6 = *((unsigned __int8 *)v3 + 71);
      if ((v6 & 0x80u) == 0) {
        int v7 = (void *)*((unsigned __int8 *)v3 + 71);
      }
      else {
        int v7 = (void *)v3[7];
      }
      if (v7 == (void *)v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[6], v5, v3[7])) {
            break;
          }
        }
        else
        {
          if (!*((unsigned char *)v3 + 71)) {
            break;
          }
          uint64_t v8 = 0;
          while (*((unsigned __int8 *)v3 + v8 + 48) == *((unsigned __int8 *)v5 + v8))
          {
            if (v6 == ++v8) {
              goto LABEL_41;
            }
          }
        }
      }
      uint64_t v9 = *((unsigned __int8 *)v3 + 95);
      if (*((char *)v3 + 95) < 0)
      {
        if (v3[10])
        {
LABEL_23:
          if ((v9 & 0x80u) == 0) {
            int v10 = (void *)*((unsigned __int8 *)v3 + 95);
          }
          else {
            int v10 = (void *)v3[10];
          }
          if (v10 == (void *)v4)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp((const void *)v3[9], v5, v3[10])) {
                break;
              }
            }
            else
            {
              if (!*((unsigned char *)v3 + 95)) {
                break;
              }
              uint64_t v11 = 0;
              while (*((unsigned __int8 *)v3 + v11 + 72) == *((unsigned __int8 *)v5 + v11))
              {
                if (v9 == ++v11) {
                  goto LABEL_41;
                }
              }
            }
          }
        }
      }
      else if (*((unsigned char *)v3 + 95))
      {
        goto LABEL_23;
      }
      double v12 = (void *)v3[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          double v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v3[2];
          BOOL v14 = *v13 == (void)v3;
          uint64_t v3 = v13;
        }
        while (!v14);
      }
      uint64_t v3 = v13;
      if (v13 == v2) {
        goto LABEL_43;
      }
    }
  }
LABEL_41:
  if (v3 == v2) {
LABEL_43:
  }
    uint64_t v15 = 0xFFFFFFFFLL;
  else {
    uint64_t v15 = *((unsigned int *)v3 + 10);
  }
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  return v15;
}

void sub_1C5D12BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Density>(uint64_t a1, const char *a2)
{
  if (a1 == -1 || a2 == -1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Either fromUnit or toUnit is invalid", a2);
  }
  else if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Density>(a1))
  {
    if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Density>((int)a2)) {
      return 1;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for toUnit: %d", v5, a2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for fromUnit: %d", v4, a1);
  }
  return 0;
}

void siri::dialogengine::ConvertUnitValue<siri::dialogengine::Density>(int a1, int a2)
{
  if (a1 != a2) {
    siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Density>();
  }
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Weight>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v3 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Weight>(a1);
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0)
    {
      long long v5 = *(const std::string::value_type **)(v3 + 8);
      std::string::size_type v6 = *(void *)(v3 + 16);
      std::string::__init_copy_ctor_external(a2, v5, v6);
    }
    else
    {
      long long v4 = *(_OWORD *)(v3 + 8);
      a2->__r_.__value_.__r.__words[2] = *(void *)(v3 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t siri::dialogengine::FindUnitInfo<siri::dialogengine::Weight>(int a1)
{
  uint64_t v2 = siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>();
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a1;
    if (v7 >= a1) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3) {
    return 0;
  }
  int v10 = *(_DWORD *)(v6 + 32);
  uint64_t v11 = v6 + 40;
  if (v10 <= a1) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>()
{
  {
    operator new();
  }
  uint64_t v0 = (std::once_flag::_State_type *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>(void)::flag, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(v0, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Weight>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>(void)::$_0 &&>>);
  }
  return siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>(void)::sUnits;
}

void sub_1C5D12F1C(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Weight>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5D138C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x280]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x260]);
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x2F8]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x2D8]);
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (SLOBYTE(STACK[0x2BF]) < 0) {
    operator delete((void *)STACK[0x2A8]);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x370]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x350]);
  if (SLOBYTE(STACK[0x34F]) < 0) {
    operator delete((void *)STACK[0x338]);
  }
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x3E8]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x3C8]);
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x460]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x440]);
  if (SLOBYTE(STACK[0x43F]) < 0) {
    operator delete((void *)STACK[0x428]);
  }
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x4D8]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x4B8]);
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete((void *)STACK[0x488]);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x550]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x530]);
  if (SLOBYTE(STACK[0x52F]) < 0) {
    operator delete((void *)STACK[0x518]);
  }
  if (SLOBYTE(STACK[0x517]) < 0) {
    operator delete((void *)STACK[0x500]);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x5C8]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x5A8]);
  if (SLOBYTE(STACK[0x5A7]) < 0) {
    operator delete((void *)STACK[0x590]);
  }
  if (SLOBYTE(STACK[0x58F]) < 0) {
    operator delete((void *)STACK[0x578]);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x640]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x620]);
  if (SLOBYTE(STACK[0x61F]) < 0) {
    operator delete((void *)STACK[0x608]);
  }
  if (SLOBYTE(STACK[0x607]) < 0) {
    operator delete((void *)STACK[0x5F0]);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a86 < 0) {
    operator delete(a85);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x6B8]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x698]);
  if (SLOBYTE(STACK[0x697]) < 0) {
    operator delete((void *)STACK[0x680]);
  }
  if (SLOBYTE(STACK[0x67F]) < 0) {
    operator delete((void *)STACK[0x668]);
  }
  if (a88 < 0) {
    operator delete(a87);
  }
  if (a90 < 0) {
    operator delete(a89);
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x730]);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&STACK[0x710]);
  if (SLOBYTE(STACK[0x70F]) < 0) {
    operator delete((void *)STACK[0x6F8]);
  }
  if (SLOBYTE(STACK[0x6F7]) < 0) {
    operator delete((void *)STACK[0x6E0]);
  }
  if (a92 < 0) {
    operator delete(a91);
  }
  if (SLOBYTE(STACK[0x20F]) < 0) {
    operator delete(a93);
  }
  if (&STACK[0x750] != (unint64_t *)(v94 + 1280))
  {
    v96 = (void *)(v94 + 1248);
    do
    {
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v96);
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v96 - 4);
      if (*((char *)v96 - 33) < 0) {
        operator delete((void *)*(v96 - 7));
      }
      if (*((char *)v96 - 57) < 0) {
        operator delete((void *)*(v96 - 10));
      }
      v97 = v96 - 12;
      v96 -= 16;
    }
    while (v97 != &STACK[0x750]);
  }
  MEMORY[0x1C8796D70](v93, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(uint64_t a1, const char *a2, long long *a3, long long *a4, double a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 48) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 112) = 0;
  if (a5 == 0.0)
  {
    a5 = 1.0;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid unit conversion factor; Replacing with 1.0 for safety",
      a2);
  }
  uint64_t v11 = &unk_1F2119B60;
  double v12 = a5;
  uint64_t v13 = &v11;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v11, (void *)(a1 + 56));
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v11);
  uint64_t v11 = &unk_1F2119BE0;
  double v12 = a5;
  uint64_t v13 = &v11;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v11, (void *)(a1 + 88));
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v11);
  return a1;
}

void sub_1C5D14088(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a1 + 88, a2 + 88);
  return a1;
}

void sub_1C5D14188(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 / *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2119BE0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2119BE0;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::~__func()
{
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2119B60;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2119B60;
  result[1] = v3;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::~__func()
{
}

uint64_t siri::dialogengine::ParseUnitLabel<siri::dialogengine::Weight>(uint64_t a1)
{
  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  uint64_t v1 = (void *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>();
  uint64_t v2 = v1 + 1;
  uint64_t v3 = (void *)*v1;
  if ((void *)*v1 != v1 + 1)
  {
    if ((v18 & 0x80u) == 0) {
      unint64_t v4 = v18;
    }
    else {
      unint64_t v4 = (unint64_t)__p[1];
    }
    if ((v18 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    while (1)
    {
      uint64_t v6 = *((unsigned __int8 *)v3 + 71);
      if ((v6 & 0x80u) == 0) {
        int v7 = (void *)*((unsigned __int8 *)v3 + 71);
      }
      else {
        int v7 = (void *)v3[7];
      }
      if (v7 == (void *)v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[6], v5, v3[7])) {
            break;
          }
        }
        else
        {
          if (!*((unsigned char *)v3 + 71)) {
            break;
          }
          uint64_t v8 = 0;
          while (*((unsigned __int8 *)v3 + v8 + 48) == *((unsigned __int8 *)v5 + v8))
          {
            if (v6 == ++v8) {
              goto LABEL_41;
            }
          }
        }
      }
      uint64_t v9 = *((unsigned __int8 *)v3 + 95);
      if (*((char *)v3 + 95) < 0)
      {
        if (v3[10])
        {
LABEL_23:
          if ((v9 & 0x80u) == 0) {
            int v10 = (void *)*((unsigned __int8 *)v3 + 95);
          }
          else {
            int v10 = (void *)v3[10];
          }
          if (v10 == (void *)v4)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp((const void *)v3[9], v5, v3[10])) {
                break;
              }
            }
            else
            {
              if (!*((unsigned char *)v3 + 95)) {
                break;
              }
              uint64_t v11 = 0;
              while (*((unsigned __int8 *)v3 + v11 + 72) == *((unsigned __int8 *)v5 + v11))
              {
                if (v9 == ++v11) {
                  goto LABEL_41;
                }
              }
            }
          }
        }
      }
      else if (*((unsigned char *)v3 + 95))
      {
        goto LABEL_23;
      }
      double v12 = (void *)v3[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          double v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v3[2];
          BOOL v14 = *v13 == (void)v3;
          uint64_t v3 = v13;
        }
        while (!v14);
      }
      uint64_t v3 = v13;
      if (v13 == v2) {
        goto LABEL_43;
      }
    }
  }
LABEL_41:
  if (v3 == v2) {
LABEL_43:
  }
    uint64_t v15 = 0xFFFFFFFFLL;
  else {
    uint64_t v15 = *((unsigned int *)v3 + 10);
  }
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  return v15;
}

void sub_1C5D14538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Weight>(uint64_t a1, const char *a2)
{
  if (a1 == -1 || a2 == -1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Either fromUnit or toUnit is invalid", a2);
  }
  else if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Weight>(a1))
  {
    if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Weight>((int)a2)) {
      return 1;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for toUnit: %d", v5, a2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for fromUnit: %d", v4, a1);
  }
  return 0;
}

void siri::dialogengine::ConvertUnitValue<siri::dialogengine::Weight>(int a1, int a2)
{
  if (a1 != a2) {
    siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Weight>();
  }
}

void siri::dialogengine::PhoneNumber::AddCNPhoneNumberLeftToRightMarkers(const void **a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "\u202D");
  std::string::basic_string[abi:ne180100]<0>(__p, "\u202C");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a1, (uint64_t)&v7);
  if ((v9 & 0x80u) == 0) {
    unint64_t v4 = __p;
  }
  else {
    unint64_t v4 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    std::string::size_type v5 = v9;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&v7, (const std::string::value_type *)v4, v5);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete((void *)v10[0]);
  }
}

void sub_1C5D1476C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::PhoneNumber::FormatNumber(siri::dialogengine::Context *a1, uint64_t a2, uint64_t a3)
{
  siri::dialogengine::FormatNumberForPrintable(&v7, a1, (uint64_t *)a2, a3);
  siri::dialogengine::Context::GetDeviceLocale(a1, &__p);
  siri::dialogengine::GetLocaleLanguage(&v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v10.__r_.__value_.__l.__size_ != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = &v10;
  }
  if (LOWORD(v6->__r_.__value_.__l.__data_) == 29281)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v9 = *(std::string *)a2;
    }
LABEL_10:
    siri::dialogengine::RemoveUnicodeControlChars();
  }
LABEL_9:
  siri::dialogengine::FormatNumberForPrintable(&v9, a1, (uint64_t *)a2, a3);
  goto LABEL_10;
}

void sub_1C5D14A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 49) < 0) {
    operator delete(*(void **)(v26 - 72));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::FormatNumberForPrintable(void *a1, siri::dialogengine::Context *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *((unsigned __int8 *)a3 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = a3[1];
  }
  if (v5)
  {
    siri::dialogengine::GetCountryCode(&__p, a2, a4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v8 = [NSString stringWithUTF8String:p_p];
    if (*((char *)a3 + 23) >= 0) {
      std::string v9 = a3;
    }
    else {
      std::string v9 = (uint64_t *)*a3;
    }
    std::string v10 = [NSString stringWithUTF8String:v9];
    char v11 = [MEMORY[0x1E4F1BA70] phoneNumberWithDigits:v10 countryCode:v8];
    double v12 = [v11 digits];
    uint64_t v13 = [v11 digitsRemovingDialingCode];
    if ([v12 length] == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(a1, (char *)[v12 UTF8String]);
    }
    else
    {
      if ([v12 isEqualToString:v13]) {
        [v11 valueForKey:@"formattedStringValue"];
      }
      else {
      id v14 = [v11 valueForKey:@"formattedInternationalStringValue"];
      }
      std::string::basic_string[abi:ne180100]<0>(a1, (char *)[v14 UTF8String]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
}

void sub_1C5D14CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetCountryCode(std::string *this, siri::dialogengine::Context *a2, uint64_t a3)
{
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a3 + 23))
    {
      if (*(unsigned __int8 *)(a3 + 23) < 3u)
      {
        *this = *(std::string *)a3;
        return;
      }
      goto LABEL_7;
    }
    goto LABEL_9;
  }
  unint64_t v4 = *(void *)(a3 + 8);
  if (!v4)
  {
LABEL_9:
    siri::dialogengine::Context::GetDeviceLocale(a2, &v8);
    siri::dialogengine::GetLocaleCountry(&__p);
    siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)this);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v5 = (void *)v8.__r_.__value_.__r.__words[0];
LABEL_13:
      operator delete(v5);
      return;
    }
    return;
  }
  if (v4 > 2)
  {
LABEL_7:
    siri::dialogengine::GetLocaleCountry(&__p);
    siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)this);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    uint64_t v5 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
  uint64_t v6 = *(const std::string::value_type **)a3;
  std::string::size_type v7 = *(void *)(a3 + 8);
  std::string::__init_copy_ctor_external(this, v6, v7);
}

void sub_1C5D14E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::PhoneNumber::AreaCode(siri::dialogengine::Context *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  siri::dialogengine::GetCountryCode(&v32, a1, a3);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v32;
  }
  else {
    uint64_t v6 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v7 = [NSString stringWithUTF8String:v6];
  if (*((char *)a2 + 23) >= 0) {
    std::string v8 = a2;
  }
  else {
    std::string v8 = (uint64_t *)*a2;
  }
  std::string v9 = [NSString stringWithUTF8String:v8];
  std::string v10 = [MEMORY[0x1E4F1BA70] phoneNumberWithDigits:v9 countryCode:v7];
  char v11 = [v10 valueForKey:@"formattedInternationalStringValue"];
  if ([v11 containsString:@"+1"])
  {
    std::string::basic_string[abi:ne180100]<0>(&v31, "");
    std::string::basic_string[abi:ne180100]<0>(&v30, "");
    unint64_t v12 = *((unsigned __int8 *)a2 + 23);
    BOOL v13 = *((char *)a2 + 23) < 0;
    unint64_t v14 = a2[1];
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v15 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v15 = a2[1];
    }
    if (v15)
    {
      unint64_t v16 = 0;
      uint64_t v17 = MEMORY[0x1E4F14390];
      do
      {
        if (v13) {
          unsigned __int8 v18 = (uint64_t *)*a2;
        }
        else {
          unsigned __int8 v18 = a2;
        }
        int v19 = *((char *)v18 + v16);
        if ((v19 & 0x80000000) == 0 && (*(_DWORD *)(v17 + 4 * v19 + 60) & 0x400) != 0)
        {
          std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v31.__r_.__value_.__l.__size_;
          }
          if (size || v19 != 49)
          {
            std::string::push_back(&v31, v19);
            if (*((char *)a2 + 23) >= 0) {
              uint64_t v21 = a2;
            }
            else {
              uint64_t v21 = (uint64_t *)*a2;
            }
            std::string::value_type v22 = *((unsigned char *)v21 + v16);
            std::string::basic_string[abi:ne180100]<0>(&v28, " ");
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v23.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v28;
            }
            else {
              v23.__i_ = (std::__wrap_iter<const char *>::iterator_type)v28.__r_.__value_.__r.__words[0];
            }
            std::string::insert(&v28, v23, v22);
            std::string __p = v28;
            memset(&v28, 0, sizeof(v28));
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
            }
            std::string::append(&v30, (const std::string::value_type *)p_p, v25);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v28.__r_.__value_.__l.__data_);
            }
            std::string::size_type v26 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v26 = v31.__r_.__value_.__l.__size_;
            }
            if (v26 == 3) {
              break;
            }
            unint64_t v12 = *((unsigned __int8 *)a2 + 23);
            unint64_t v14 = a2[1];
          }
        }
        ++v16;
        BOOL v13 = (v12 & 0x80u) != 0;
        if ((v12 & 0x80u) == 0) {
          unint64_t v27 = v12;
        }
        else {
          unint64_t v27 = v14;
        }
      }
      while (v16 < v27);
    }
    siri::dialogengine::StringTrim(" \t\n\r", &v30, &__p);
    siri::dialogengine::SpeakableString::SpeakableString(a4, &v31, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(void *)(a4 + 160) = 0;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }

  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D15160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }

  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ValidateArrayItemFormat(uint64_t a1, std::string *a2, const void **a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__s1, "{");
  std::string::basic_string[abi:ne180100]<0>(&__p, "[");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string v8 = std::string::append(&__s1, (const std::string::value_type *)p_p, size);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  std::string::size_type v44 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)v43 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "}");
  std::string::basic_string[abi:ne180100]<0>(&v45, "]");
  if ((v46 & 0x80u) == 0) {
    std::string v10 = (const std::string::value_type *)&v45;
  }
  else {
    std::string v10 = (const std::string::value_type *)v45;
  }
  if ((v46 & 0x80u) == 0) {
    std::string::size_type v11 = v46;
  }
  else {
    std::string::size_type v11 = *((void *)&v45 + 1);
  }
  unint64_t v12 = std::string::append(&__p, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __s1.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v46 < 0) {
    operator delete((void *)v45);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::StringSplitWithDelimiters(a2, (unsigned __int8 *)v43, (unsigned __int8 *)&__s1, (uint64_t)&v39);
  unint64_t v14 = (std::string *)v39;
  if (v40 - v39 == 24)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "{");
    BOOL v15 = siri::dialogengine::StringStartsWith(v14, (unsigned __int8 *)&__p);
    BOOL v16 = v15;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v16) {
        goto LABEL_30;
      }
    }
    else if (v15)
    {
      goto LABEL_30;
    }
    std::operator+<char>();
    uint64_t v17 = std::string::append(&__p, "}");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[0];
    *(void *)&long long v45 = v17->__r_.__value_.__l.__size_;
    *(void *)((char *)&v45 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
    char v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = v39;
    if (*(char *)(v39 + 23) < 0) {
      operator delete(*(void **)v39);
    }
    *(void *)uint64_t v20 = v18;
    *(void *)(v20 + 8) = v45;
    *(void *)(v20 + 15) = *(void *)((char *)&v45 + 7);
    *(unsigned char *)(v20 + 23) = v19;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_30:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete(v43[0]);
  }
  uint64_t v21 = v39;
  if (v40 != v39)
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v43, "{");
      v24 = (std::string *)(v21 + v22);
      BOOL v25 = siri::dialogengine::StringStartsWith(v24, (unsigned __int8 *)v43);
      BOOL v26 = v25;
      if (SHIBYTE(v44) < 0)
      {
        operator delete(v43[0]);
        if (!v26) {
          goto LABEL_73;
        }
      }
      else if (!v25)
      {
        goto LABEL_73;
      }
      if (*((char *)a3 + 23) >= 0) {
        size_t v27 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v27 = (size_t)a3[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__s1, v27 + 4);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_s1 = &__s1;
      }
      else {
        p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      if (v27)
      {
        if (*((char *)a3 + 23) >= 0) {
          v29 = a3;
        }
        else {
          v29 = *a3;
        }
        memmove(p_s1, v29, v27);
      }
      strcpy((char *)p_s1 + v27, "[0].");
      siri::dialogengine::GetPropName(&__p, v24);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v30 = &__p;
      }
      else {
        std::string v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v31 = __p.__r_.__value_.__l.__size_;
      }
      std::string v32 = std::string::append(&__s1, (const std::string::value_type *)v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      std::string::size_type v44 = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)v43 = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::ResolveType(0, a1, (uint64_t)v43, 1, (uint64_t)&__s1);
      size_t v34 = strlen(siri::dialogengine::TYPE_UNKNOWN);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v34 == __s1.__r_.__value_.__l.__size_)
        {
          if (v34 == -1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          v36 = (void *)__s1.__r_.__value_.__r.__words[0];
          BOOL v35 = memcmp(__s1.__r_.__value_.__l.__data_, siri::dialogengine::TYPE_UNKNOWN, v34) == 0;
        }
        else
        {
          BOOL v35 = 0;
          v36 = (void *)__s1.__r_.__value_.__r.__words[0];
        }
        operator delete(v36);
      }
      else
      {
        BOOL v35 = v34 == HIBYTE(__s1.__r_.__value_.__r.__words[2])
           && memcmp(&__s1, siri::dialogengine::TYPE_UNKNOWN, v34) == 0;
      }
      if (SHIBYTE(v44) < 0) {
        operator delete(v43[0]);
      }
      if (v35)
      {
        uint64_t v37 = 0;
        goto LABEL_76;
      }
LABEL_73:
      ++v23;
      uint64_t v21 = v39;
      v22 += 24;
    }
    while (v23 < 0xAAAAAAAAAAAAAAABLL * ((v40 - v39) >> 3));
  }
  uint64_t v37 = 1;
LABEL_76:
  v43[0] = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v43);
  return v37;
}

void sub_1C5D156D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::string __p = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetPropName(std::string *a1, const std::string *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "{");
  std::string::basic_string[abi:ne180100]<0>(v9, "}");
  if ((v10 & 0x80u) == 0) {
    unint64_t v4 = v9;
  }
  else {
    unint64_t v4 = (void **)v9[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v5 = v10;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v9[1];
  }
  uint64_t v6 = std::string::append(&v11, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v13 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v13 >= 0) {
    std::string v8 = (char *)__p;
  }
  else {
    std::string v8 = (char *)__p[0];
  }
  siri::dialogengine::StringTrim(v8, a2, a1);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if ((char)v10 < 0) {
    operator delete(v9[0]);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D158F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::FormatArrayItem(uint64_t **a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, const void **a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  siri::dialogengine::GetArrayElementType(a6, &v34);
  uint64_t v13 = *(void *)(a2 + 72);
  __n128 v17 = 0u;
  if (a3 < (*(void *)(a2 + 80) - v13) >> 4)
  {
    __n128 v14 = *(__n128 *)(v13 + 16 * a3);
    __n128 v17 = v14;
    if (v14.n128_u64[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v15 = *(unsigned __int8 *)(a4 + 23);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a4 + 8);
  }
  if (v15)
  {
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v20, a4);
    siri::dialogengine::FormatArrayItemPart((uint64_t)&v19, a1, a3, (uint64_t)v20, a5, (uint64_t)&v34, 1);
    siri::dialogengine::FormatArrayItemPart((uint64_t)&__p, a1, a3, (uint64_t)v20, a5, (uint64_t)&v34, 0);
    siri::dialogengine::SpeakableString::SpeakableString(a7, &v19, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (v33 < 0) {
      operator delete(v32);
    }
    if (v31 < 0) {
      operator delete(v30);
    }
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v27 < 0) {
      operator delete(v26);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    BOOL v16 = (std::__shared_weak_count *)v17.n128_u64[1];
  }
  else
  {
    (*(void (**)(unint64_t, uint64_t **, std::string *, __n128))(*(void *)v17.n128_u64[0] + 56))(v17.n128_u64[0], a1, &v34, v17);
    BOOL v16 = (std::__shared_weak_count *)v17.n128_u64[1];
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D15B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (*((void *)&a9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&a9 + 1));
  }
  if (*(char *)(v22 - 65) < 0) {
    operator delete(*(void **)(v22 - 88));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::FormatArrayItemPart(uint64_t a1, uint64_t **a2, unint64_t a3, uint64_t a4, const void **a5, uint64_t a6, int a7)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a4 + 24;
  uint64_t v9 = 24;
  if (a7 == 1)
  {
    uint64_t v9 = 0;
    uint64_t v8 = a4;
  }
  if (*(char *)(v8 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)(a4 + v9), *(void *)(v8 + 8));
  }
  else {
    std::string v59 = *(std::string *)v8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v79, "{");
  std::string::basic_string[abi:ne180100]<0>(&__str, "}");
  siri::dialogengine::StringSplitWithDelimiters(&v59, (unsigned __int8 *)&v79, (unsigned __int8 *)&__str, (uint64_t)&v74);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  std::vector<std::string>::pointer begin = v74.__begin_;
  if (v74.__end_ != v74.__begin_)
  {
    unint64_t v11 = 0;
    int v12 = 0;
    do
    {
      uint64_t v13 = &begin[v11];
      std::string::size_type size = HIBYTE(v13->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) == 0) {
        uint64_t v15 = &begin[v11];
      }
      else {
        uint64_t v15 = (std::string *)v13->__r_.__value_.__r.__words[0];
      }
      int v16 = 0;
      if ((size & 0x80u) != 0) {
        std::string::size_type size = v13->__r_.__value_.__l.__size_;
      }
      if (size)
      {
        std::string::size_type v17 = size;
        std::string::size_type v18 = v15;
        do
        {
          int v19 = v18->__r_.__value_.__s.__data_[0];
          std::string::size_type v18 = (std::string *)((char *)v18 + 1);
          if (v19 == 91) {
            ++v16;
          }
          --v17;
        }
        while (v17);
        int v20 = 0;
        do
        {
          int v21 = v15->__r_.__value_.__s.__data_[0];
          uint64_t v15 = (std::string *)((char *)v15 + 1);
          if (v21 == 93) {
            ++v20;
          }
          --size;
        }
        while (size);
      }
      else
      {
        int v20 = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(&v59, "{");
      BOOL v22 = siri::dialogengine::StringStartsWith(v13, (unsigned __int8 *)&v59);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      int v12 = v16 + v12 - v20;
      if (v22
        || (std::vector<std::string>::pointer begin = v74.__begin_,
            int64_t v23 = (char *)v74.__end_ - (char *)v74.__begin_,
            (std::vector<std::string>::pointer)((char *)v74.__end_ - (char *)v74.__begin_) == (std::vector<std::string>::pointer)24))
      {
        if (*((char *)a5 + 23) >= 0) {
          size_t v24 = *((unsigned __int8 *)a5 + 23);
        }
        else {
          size_t v24 = (size_t)a5[1];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v77, v24 + 1);
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v25 = &v77;
        }
        else {
          char v25 = (std::string *)v77.__r_.__value_.__r.__words[0];
        }
        if (v24)
        {
          if (*((char *)a5 + 23) >= 0) {
            BOOL v26 = a5;
          }
          else {
            BOOL v26 = *a5;
          }
          memmove(v25, v26, v24);
        }
        *(_WORD *)((char *)&v25->__r_.__value_.__l.__data_ + v24) = 91;
        std::to_string(&v76, a3);
        if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v27 = &v76;
        }
        else {
          char v27 = (std::string *)v76.__r_.__value_.__r.__words[0];
        }
        if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v28 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v28 = v76.__r_.__value_.__l.__size_;
        }
        char v29 = std::string::append(&v77, (const std::string::value_type *)v27, v28);
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        char v31 = std::string::append(&__str, "].");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::GetPropName(&__p, v13);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v34 = __p.__r_.__value_.__l.__size_;
        }
        BOOL v35 = std::string::append(&v59, (const std::string::value_type *)p_p, v34);
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v79.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v59, "");
        std::string::basic_string[abi:ne180100]<0>(&__str, "");
        siri::dialogengine::ResolveValue(a2, (const void **)&v79.__r_.__value_.__l.__data_, 0, (uint64_t)&v59, (uint64_t)&__str, (uint64_t *)&v77);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
        if (v77.__r_.__value_.__r.__words[0])
        {
          (*(void (**)(std::string *__return_ptr))(*(void *)v77.__r_.__value_.__l.__data_ + 56))(&v59);
          BOOL v37 = v12 > 0 || a7 == 1;
          int v38 = v37;
          if (v37) {
            uint64_t v39 = 0;
          }
          else {
            uint64_t v39 = 24;
          }
          uint64_t v40 = (std::string *)&v60;
          if (v37) {
            uint64_t v40 = &v59;
          }
          v41 = (char *)&v59.__r_.__value_.__r.__words[2] + 7;
          if (!v37) {
            v41 = &v61;
          }
          if (*v41 < 0)
          {
            BOOL v37 = v38 == 0;
            uint64_t v43 = 4;
            if (!v37) {
              uint64_t v43 = 1;
            }
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)((char *)&v59.__r_.__value_.__l.__data_ + v39), v59.__r_.__value_.__r.__words[v43]);
          }
          else
          {
            std::string __str = *v40;
          }
          if (v71 < 0) {
            operator delete(v70);
          }
          if (v69 < 0) {
            operator delete(v68);
          }
          if (v67 < 0) {
            operator delete(v66);
          }
          if (v65 < 0) {
            operator delete(v64);
          }
          if (v63 < 0) {
            operator delete(v62);
          }
          if (v61 < 0) {
            operator delete(v60);
          }
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
          std::string::operator=(&v74.__begin_[v11], &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        else if (v22)
        {
          v42 = &v74.__begin_[v11];
          if (SHIBYTE(v42->__r_.__value_.__r.__words[2]) < 0)
          {
            *v42->__r_.__value_.__l.__data_ = 0;
            v42->__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v42->__r_.__value_.__s.__data_[0] = 0;
            *((unsigned char *)&v42->__r_.__value_.__s + 23) = 0;
          }
        }
        if (v77.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v77.__r_.__value_.__l.__size_);
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        std::vector<std::string>::pointer begin = v74.__begin_;
        int64_t v23 = (char *)v74.__end_ - (char *)v74.__begin_;
      }
      ++v11;
    }
    while (v11 < 0xAAAAAAAAAAAAAAABLL * (v23 >> 3));
  }
  std::string::basic_string[abi:ne180100]<0>(&v59, "");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v73, (uint64_t)v74.__begin_, (uint64_t)v74.__end_, (uint64_t)&v59);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v79, "[");
  std::string::basic_string[abi:ne180100]<0>(&__str, "]");
  siri::dialogengine::StringSplitWithDelimiters(&v73, (unsigned __int8 *)&v79, (unsigned __int8 *)&__str, (uint64_t)&v59);
  std::vector<std::string>::__vdeallocate(&v74);
  std::vector<std::string> v74 = (std::vector<std::string>)v59;
  memset(&v59, 0, sizeof(v59));
  v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  memset(v72, 0, sizeof(v72));
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v59, (const siri::dialogengine::RequestInfo *)(a2 + 1));
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&v59.__r_.__value_.__l.__data_);
  std::vector<std::string>::pointer v44 = v74.__begin_;
  if (v74.__end_ != v74.__begin_)
  {
    unint64_t v45 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v59, "[");
      unsigned __int8 v46 = &v44[v45];
      BOOL v47 = siri::dialogengine::StringStartsWith(v46, (unsigned __int8 *)&v59);
      BOOL v48 = v47;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v59.__r_.__value_.__l.__data_);
        if (v48)
        {
LABEL_126:
          std::string::basic_string[abi:ne180100]<0>(&__str, "[");
          std::string::basic_string[abi:ne180100]<0>(&v77, "]");
          if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v49 = &v77;
          }
          else {
            v49 = (std::string *)v77.__r_.__value_.__r.__words[0];
          }
          if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v50 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v50 = v77.__r_.__value_.__l.__size_;
          }
          v51 = std::string::append(&__str, (const std::string::value_type *)v49, v50);
          long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v79.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v53 = &v79;
          }
          else {
            v53 = (std::string *)v79.__r_.__value_.__r.__words[0];
          }
          siri::dialogengine::StringTrim((char *)v53, v46, &v59);
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v79.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v77.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          siri::dialogengine::StringSplit((unsigned __int8 *)&v59, " \t\n\r", &v79);
          operator new();
        }
      }
      else if (v47)
      {
        goto LABEL_126;
      }
      ++v45;
      std::vector<std::string>::pointer v44 = v74.__begin_;
    }
    while (v45 < 0xAAAAAAAAAAAAAAABLL * (((char *)v74.__end_ - (char *)v74.__begin_) >> 3));
  }
  std::string::basic_string[abi:ne180100]<0>(&v59, "");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>(a1, (uint64_t)v74.__begin_, (uint64_t)v74.__end_, (uint64_t)&v59);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  v54 = (std::string *)a1;
  siri::dialogengine::StringTrim(" \t\n\r", (const std::string *)a1, &v59);
  if (*(char *)(a1 + 23) < 0)
  {
    operator delete(*(void **)a1);
    v54 = (std::string *)a1;
  }
  std::string *v54 = v59;
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
}

void sub_1C5D17390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer(v31 - 144);
  if (STACK[0x318]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x318]);
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  if (*(char *)(v31 - 233) < 0) {
    operator delete(*(void **)(v31 - 256));
  }
  if (*(char *)(v31 - 209) < 0) {
    operator delete(*(void **)(v31 - 232));
  }
  if (*(char *)(v31 - 185) < 0) {
    operator delete(*(void **)(v31 - 208));
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  *(void *)(v31 - 232) = &STACK[0x290];
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 232));
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (SLOBYTE(STACK[0x2BF]) < 0) {
    operator delete((void *)STACK[0x2A8]);
  }
  *(void *)(v31 - 232) = &STACK[0x2C0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 232));
  _Unwind_Resume(a1);
}

void std::shared_ptr<siri::dialogengine::ChunkText>::shared_ptr[abi:ne180100]<siri::dialogengine::ChunkText,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5D179DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::ChunkText>>,std::reverse_iterator<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::reverse_iterator<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::reverse_iterator<std::shared_ptr<siri::dialogengine::ChunkText>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    unint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void siri::dialogengine::ChunkVectorToSpeakString(std::string *a1, uint64_t *a2, uint64_t *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    while (1)
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)v4[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::dialogengine::SpeakableString::SpeakableString(&v10, (const siri::dialogengine::SpeakableString *)(v6 + 8));
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v22, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
      }
      else {
        std::string v22 = v11;
      }
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v22;
      }
      else {
        uint64_t v8 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v22.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)v8, size);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (v21 < 0) {
        operator delete(__p);
      }
      if (v19 < 0) {
        operator delete(v18);
      }
      if (v17 < 0) {
        operator delete(v16);
      }
      if (v15 < 0) {
        operator delete(v14);
      }
      if (v13 < 0) {
        operator delete(v12);
      }
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v7) {
        goto LABEL_30;
      }
LABEL_31:
      v4 += 2;
      if (v4 == a3) {
        return;
      }
    }
    operator delete(v10.__r_.__value_.__l.__data_);
    if (!v7) {
      goto LABEL_31;
    }
LABEL_30:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    goto LABEL_31;
  }
}

void sub_1C5D17C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void sub_1C5D17CA4()
{
  if (!v0) {
    JUMPOUT(0x1C5D17C8CLL);
  }
  JUMPOUT(0x1C5D17C84);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::ChunkText>>,std::reverse_iterator<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::reverse_iterator<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::reverse_iterator<std::shared_ptr<siri::dialogengine::ChunkText>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a7;
  while (a3 != a5)
  {
    long long v8 = *((_OWORD *)a3 - 1);
    a3 -= 2;
    *(_OWORD *)(result - 16) = v8;
    result -= 16;
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, char *a4)
{
  unint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = (char *)(a2 + v4 - a4);
  uint64_t v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v5;
    v6 += 16;
    *(void *)uint64_t v5 = 0;
    *((void *)v5 + 1) = 0;
    v5 += 16;
  }
  *(void *)(a1 + 8) = v6;
  if (v4 != a4)
  {
    uint64_t v7 = (std::__shared_weak_count **)(v4 - 8);
    uint64_t v8 = 16 * ((v4 - a4) >> 4);
    uint64_t v9 = a2 - 16;
    do
    {
      std::string v10 = (void *)(v9 + v8);
      long long v11 = *(_OWORD *)(v9 + v8);
      *std::string v10 = 0;
      v10[1] = 0;
      int v12 = *v7;
      *(_OWORD *)(v7 - 1) = v11;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      v7 -= 2;
      v8 -= 16;
    }
    while (v8);
  }
}

uint64_t std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 2;
  a2[1] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::ChunkText>>,std::reverse_iterator<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::reverse_iterator<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::reverse_iterator<std::shared_ptr<siri::dialogengine::ChunkText>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  uint64_t v8 = a1[1];
  uint64_t v9 = (_OWORD *)a2[2];
  int v16 = v9;
  char v17 = v9;
  v14[0] = v7;
  v14[1] = &v16;
  v14[2] = &v17;
  if ((void *)v8 != v3)
  {
    do
    {
      *v9++ = *(_OWORD *)v3;
      *uint64_t v3 = 0;
      v3[1] = 0;
      v3 += 2;
    }
    while (v3 != (void *)v8);
    char v17 = v9;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::dialogengine::ChunkText>>,std::shared_ptr<siri::dialogengine::ChunkText>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  a2[2] = v9;
  uint64_t v10 = *a1;
  *a1 = a2[1];
  a2[1] = v10;
  uint64_t v11 = a1[1];
  a1[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = a1[2];
  a1[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::dialogengine::ChunkText>>,std::shared_ptr<siri::dialogengine::ChunkText>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      v3 -= 16;
    }
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ChunkText *,std::shared_ptr<siri::dialogengine::ChunkText>::__shared_ptr_default_delete<siri::dialogengine::ChunkText,siri::dialogengine::ChunkText>,std::allocator<siri::dialogengine::ChunkText>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ChunkText *,std::shared_ptr<siri::dialogengine::ChunkText>::__shared_ptr_default_delete<siri::dialogengine::ChunkText,siri::dialogengine::ChunkText>,std::allocator<siri::dialogengine::ChunkText>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::ChunkText *,std::shared_ptr<siri::dialogengine::ChunkText>::__shared_ptr_default_delete<siri::dialogengine::ChunkText,siri::dialogengine::ChunkText>,std::allocator<siri::dialogengine::ChunkText>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ChunkTag *,std::shared_ptr<siri::dialogengine::ChunkTag>::__shared_ptr_default_delete<siri::dialogengine::ChunkTag,siri::dialogengine::ChunkTag>,std::allocator<siri::dialogengine::ChunkTag>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ChunkTag *,std::shared_ptr<siri::dialogengine::ChunkTag>::__shared_ptr_default_delete<siri::dialogengine::ChunkTag,siri::dialogengine::ChunkTag>,std::allocator<siri::dialogengine::ChunkTag>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::ChunkTag *,std::shared_ptr<siri::dialogengine::ChunkTag>::__shared_ptr_default_delete<siri::dialogengine::ChunkTag,siri::dialogengine::ChunkTag>,std::allocator<siri::dialogengine::ChunkTag>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t siri::dialogengine::ConditionEntry::Evaluate()
{
  return 0;
}

uint64_t siri::dialogengine::ConditionEntry::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) ^ 1;
}

uint64_t siri::dialogengine::ConditionEntry::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  uint64_t result = std::type_info::operator==[abi:ne180100](*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (!result) {
    return result;
  }
  uint64_t v5 = *(unsigned __int8 *)(a1 + 63);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 48);
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 63);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 48);
  }
  if (v6 != v7) {
    return 0;
  }
  uint64_t v9 = (const void **)(a1 + 40);
  if (v8 >= 0) {
    uint64_t v10 = (unsigned __int8 *)(a2 + 40);
  }
  else {
    uint64_t v10 = *(unsigned __int8 **)(a2 + 40);
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*v9, v10, *(void *)(a1 + 48))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 63))
  {
    while (*(unsigned __int8 *)v9 == *v10)
    {
      uint64_t v9 = (const void **)((char *)v9 + 1);
      ++v10;
      if (!--v5) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  unint64_t v13 = (v11 - v12) >> 4;
  if (v13 != (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4) {
    return 0;
  }
  if (v11 == v12) {
    return 1;
  }
  uint64_t v14 = 0;
  if (v13 <= 1) {
    unint64_t v13 = 1;
  }
  unint64_t v15 = v13 - 1;
  do
  {
    unint64_t v16 = v15;
    int v17 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 64) + v14) + 32))(*(void *)(*(void *)(a1 + 64) + v14), *(void *)(*(void *)(a2 + 64) + v14));
    if (v17) {
      break;
    }
    unint64_t v15 = v16 - 1;
    v14 += 16;
  }
  while (v16);
  return v17 ^ 1u;
}

uint64_t siri::dialogengine::ConditionEntry::Validate(const void ***this, siri::dialogengine::Context *a2)
{
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v19, this + 1);
  uint64_t v4 = v19;
  char v5 = 1;
  if (v19 != (long long *)v20)
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v16, v4 + 2);
      siri::dialogengine::ConditionEntry::GetTypeAsString((siri::dialogengine::ConditionEntry *)this, __p);
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)__p, (uint64_t)&v16, v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v6 = v15;
      unsigned __int8 v7 = v15;
      if ((v15 & 0x80u) != 0) {
        unint64_t v6 = (unint64_t)v14[1];
      }
      if (v6)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)v14, 0);
        char v5 = 0;
        unsigned __int8 v7 = v15;
      }
      if ((v7 & 0x80) != 0) {
        operator delete(v14[0]);
      }
      if (v18 < 0) {
        operator delete(v17);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      int v8 = (long long *)*((void *)v4 + 1);
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          int v8 = *(long long **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (long long *)*((void *)v4 + 2);
          BOOL v10 = *(void *)v9 == (void)v4;
          uint64_t v4 = v9;
        }
        while (!v10);
      }
      uint64_t v4 = v9;
    }
    while (v9 != (long long *)v20);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v20[0]);
  return v5 & 1;
}

void sub_1C5D18308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::pair<std::string const,std::string>::~pair((uint64_t)&a22);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(v22 - 64));
  _Unwind_Resume(a1);
}

void *siri::dialogengine::ConditionEntry::GetTypeAsString@<X0>(siri::dialogengine::ConditionEntry *this@<X0>, void *a2@<X8>)
{
  switch(*((_DWORD *)this + 8))
  {
    case 0:
      uint64_t v3 = "and";
      goto LABEL_12;
    case 1:
      uint64_t v3 = "or";
      goto LABEL_12;
    case 2:
      uint64_t v3 = "not";
      goto LABEL_12;
    case 3:
      uint64_t v3 = "expression";
      goto LABEL_12;
    case 4:
      uint64_t v3 = "sub-condition";
LABEL_12:
      uint64_t result = std::string::basic_string[abi:ne180100]<0>(a2, v3);
      break;
    default:
      std::to_string(&v7, *((_DWORD *)this + 8));
      uint64_t v4 = std::string::insert(&v7, 0, "Unsupported condition entry type: ");
      long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      std::string::size_type v9 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
      if (SHIBYTE(v9) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v7.__r_.__value_.__l.__data_);
      }
      uint64_t result = std::string::basic_string[abi:ne180100]<0>(a2, "");
      break;
  }
  return result;
}

void sub_1C5D1847C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ConditionEntry::~ConditionEntry(void **this)
{
  siri::dialogengine::ConditionEntry::~ConditionEntry(this);
  JUMPOUT(0x1C8796D70);
}

{
  void **v2;

  *this = &unk_1F2119CD8;
  uint64_t v2 = this + 8;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  *this = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(this[2]);
}

double siri::dialogengine::ConditionEntry::ConditionEntry(siri::dialogengine::ConditionEntry *this)
{
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F2119CD8;
  *((void *)this + 1) = (char *)this + 16;
  *((_DWORD *)this + 8) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

{
  double result;

  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F2119CD8;
  *((void *)this + 1) = (char *)this + 16;
  *((_DWORD *)this + 8) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

double siri::dialogengine::ConditionEntry::ConditionEntry(uint64_t a1, int a2)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F2119CD8;
  *(void *)(a1 + 8) = a1 + 16;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 32) = a2;
  return result;
}

{
  double result;

  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F2119CD8;
  *(void *)(a1 + 8) = a1 + 16;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 32) = a2;
  return result;
}

uint64_t siri::dialogengine::ConditionEntry::SetType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t siri::dialogengine::ConditionEntry::GetType(siri::dialogengine::ConditionEntry *this)
{
  return *((unsigned int *)this + 8);
}

void siri::dialogengine::ConditionEntry::GetNote(siri::dialogengine::ConditionEntry *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((void *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 7);
  }
}

std::string *siri::dialogengine::ConditionEntry::SetNote(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 40), a2);
}

void *siri::dialogengine::ConditionEntry::GetChildren@<X0>(siri::dialogengine::ConditionEntry *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(a2, *((void **)this + 8), *((void **)this + 9), (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 4);
}

void *std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::ConditionEntry>>,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C5D18750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::ConditionEntry>>,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  BOOL v10 = a4;
  std::string::size_type v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    BOOL v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::dialogengine::ChunkText>>,std::shared_ptr<siri::dialogengine::ChunkText>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void siri::dialogengine::ConditionEntry::SetChildren(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 64);
  if (v2 != (uint64_t *)a2) {
    std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(v2, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
}

void std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  std::string::size_type v9 = a1 + 2;
  uint64_t v8 = a1[2];
  BOOL v10 = (void *)*a1;
  if (a4 > (v8 - *a1) >> 4)
  {
    if (v10)
    {
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](a1, v12);
    char v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v9;
    unsigned __int8 v15 = a2;
    goto LABEL_13;
  }
  unint64_t v16 = (a1[1] - (uint64_t)v10) >> 4;
  if (v16 < a4)
  {
    int v17 = &a2[2 * v16];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *>(a2, v17, v10);
    char v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v9;
    unsigned __int8 v15 = v17;
LABEL_13:
    a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::ConditionEntry>>,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(v14, v15, a3, v13);
    return;
  }
  char v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *>(a2, a3, v10);
  for (i = (void *)a1[1]; i != v18; i -= 2)
  {
    int v20 = (std::__shared_weak_count *)*(i - 1);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  a1[1] = (uint64_t)v18;
}

void siri::dialogengine::ConditionEntry::AddChild(uint64_t a1, long long *a2)
{
}

siri::dialogengine::XmlError *siri::dialogengine::XmlError::XmlError(siri::dialogengine::XmlError *this, const _xmlError *a2)
{
  *(_DWORD *)this = a2->code;
  *((void *)this + 1) = 0;
  uint64_t v4 = (void **)((char *)this + 8);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = a2->level;
  *((void *)this + 5) = 0;
  uint64_t v5 = (char *)this + 40;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = a2->line;
  *(_OWORD *)((char *)this + 72) = 0u;
  unint64_t v6 = (char *)this + 72;
  std::string v7 = (char *)this + 96;
  *(_OWORD *)((char *)this + 120) = 0u;
  uint64_t v8 = (char *)this + 120;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = *(void *)&a2->int1;
  message = a2->message;
  if (message)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, message);
    siri::dialogengine::StringTrim(" \t\n\r", &__p, &v12);
    if (*((char *)this + 31) < 0) {
      operator delete(*v4);
    }
    *(std::string *)uint64_t v4 = v12;
    *((unsigned char *)&v12.__r_.__value_.__s + 23) = 0;
    v12.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (a2->file) {
    MEMORY[0x1C8796900](v5);
  }
  if (a2->str1) {
    MEMORY[0x1C8796900](v6);
  }
  if (a2->str2) {
    MEMORY[0x1C8796900](v7);
  }
  if (a2->str3) {
    MEMORY[0x1C8796900](v8);
  }
  return this;
}

void sub_1C5D18A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v14[143] < 0) {
    operator delete(*v18);
  }
  if (v14[119] < 0) {
    operator delete(*v17);
  }
  if (v14[95] < 0) {
    operator delete(*v16);
  }
  if (v14[63] < 0) {
    operator delete(*v15);
  }
  if (v14[31] < 0) {
    operator delete(*v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::XmlError::XmlError(uint64_t a1, const std::string *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (void **)(a1 + 8);
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  siri::dialogengine::StringTrim(" \t\n\r", a2, &v5);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*v3);
  }
  *(std::string *)uint64_t v3 = v5;
  return a1;
}

void sub_1C5D18BBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*(void **)(v1 + 120));
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*(void **)(v1 + 96));
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::XmlError::GetCode(siri::dialogengine::XmlError *this)
{
  return *(unsigned int *)this;
}

uint64_t siri::dialogengine::XmlError::GetMessage(siri::dialogengine::XmlError *this)
{
  return (uint64_t)this + 8;
}

void siri::dialogengine::XmlError::GetMessageWithDetails(siri::dialogengine::XmlError *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  memset(&v46, 0, sizeof(v46));
  int v4 = *((_DWORD *)this + 16);
  if (v4)
  {
    std::to_string(&v45, v4);
    std::string v5 = std::string::insert(&v45, 0, "Line: ");
    unint64_t v6 = (char *)v5->__r_.__value_.__r.__words[0];
    *(void *)&long long v48 = v5->__r_.__value_.__l.__size_;
    *(void *)((char *)&v48 + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
    char v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::vector<std::string>::pointer end = v46.__end_;
    if (v46.__end_ >= v46.__end_cap_.__value_)
    {
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_ - (char *)v46.__begin_) >> 3);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) > v11) {
        unint64_t v11 = 0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v12 = v11;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v46.__end_cap_;
      if (v12) {
        char v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v46.__end_cap_, v12);
      }
      else {
        char v13 = 0;
      }
      uint64_t v14 = v13 + v10;
      __v.__first_ = v13;
      __v.__begin_ = v14;
      __v.__end_cap_.__value_ = &v13[v12];
      v14->__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
      v14->__r_.__value_.__l.__size_ = v48;
      *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v48 + 7);
      *((unsigned char *)&v14->__r_.__value_.__s + 23) = v7;
      __v.__end_ = v14 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v46, &__v);
      std::string::size_type v9 = v46.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      v46.__end_->__r_.__value_.__l.__data_ = v6;
      end->__r_.__value_.__l.__size_ = v48;
      *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v48 + 7);
      *((unsigned char *)&end->__r_.__value_.__s + 23) = v7;
      std::string::size_type v9 = end + 1;
    }
    v46.__end_ = v9;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
  }
  if (*((char *)this + 63) < 0)
  {
    if (!*((void *)this + 6)) {
      goto LABEL_34;
    }
  }
  else if (!*((unsigned char *)this + 63))
  {
    goto LABEL_34;
  }
  std::operator+<char>();
  unsigned __int8 v15 = std::string::append(&v45, "\"");
  unint64_t v16 = (char *)v15->__r_.__value_.__r.__words[0];
  *(void *)&long long v48 = v15->__r_.__value_.__l.__size_;
  *(void *)((char *)&v48 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
  char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::pointer v18 = v46.__end_;
  if (v46.__end_ >= v46.__end_cap_.__value_)
  {
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_ - (char *)v46.__begin_) >> 3);
    unint64_t v21 = v20 + 1;
    if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) > v21) {
      unint64_t v21 = 0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v21;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v46.__end_cap_;
    if (v22) {
      int64_t v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v46.__end_cap_, v22);
    }
    else {
      int64_t v23 = 0;
    }
    size_t v24 = v23 + v20;
    __v.__first_ = v23;
    __v.__begin_ = v24;
    __v.__end_cap_.__value_ = &v23[v22];
    v24->__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    v24->__r_.__value_.__l.__size_ = v48;
    *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v48 + 7);
    *((unsigned char *)&v24->__r_.__value_.__s + 23) = v17;
    __v.__end_ = v24 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v46, &__v);
    char v19 = v46.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    v46.__end_->__r_.__value_.__l.__data_ = v16;
    v18->__r_.__value_.__l.__size_ = v48;
    *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v48 + 7);
    *((unsigned char *)&v18->__r_.__value_.__s + 23) = v17;
    char v19 = v18 + 1;
  }
  v46.__end_ = v19;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
LABEL_34:
  std::to_string(&v45, *(_DWORD *)this);
  char v25 = std::string::insert(&v45, 0, "Code: ");
  BOOL v26 = (char *)v25->__r_.__value_.__r.__words[0];
  *(void *)&long long v48 = v25->__r_.__value_.__l.__size_;
  *(void *)((char *)&v48 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
  char v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::pointer v28 = v46.__end_;
  if (v46.__end_ >= v46.__end_cap_.__value_)
  {
    unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_ - (char *)v46.__begin_) >> 3);
    unint64_t v31 = v30 + 1;
    if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) > v31) {
      unint64_t v31 = 0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v32 = v31;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v46.__end_cap_;
    if (v32) {
      char v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v46.__end_cap_, v32);
    }
    else {
      char v33 = 0;
    }
    std::string::size_type v34 = v33 + v30;
    __v.__first_ = v33;
    __v.__begin_ = v34;
    __v.__end_cap_.__value_ = &v33[v32];
    v34->__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    v34->__r_.__value_.__l.__size_ = v48;
    *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v48 + 7);
    *((unsigned char *)&v34->__r_.__value_.__s + 23) = v27;
    __v.__end_ = v34 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v46, &__v);
    char v29 = v46.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    v46.__end_->__r_.__value_.__l.__data_ = v26;
    v28->__r_.__value_.__l.__size_ = v48;
    *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v48 + 7);
    *((unsigned char *)&v28->__r_.__value_.__s + 23) = v27;
    char v29 = v28 + 1;
  }
  v46.__end_ = v29;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (*((char *)this + 31) >= 0) {
    size_t v35 = *((unsigned __int8 *)this + 31);
  }
  else {
    size_t v35 = *((void *)this + 2);
  }
  long long v36 = &v45;
  std::string::basic_string[abi:ne180100]((uint64_t)&v45, v35 + 2);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v36 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  if (v35)
  {
    if (*((char *)this + 31) >= 0) {
      BOOL v37 = (char *)this + 8;
    }
    else {
      BOOL v37 = (char *)*((void *)this + 1);
    }
    memmove(v36, v37, v35);
  }
  strcpy((char *)v36 + v35, " (");
  std::string::basic_string[abi:ne180100]<0>(__p, ", ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v48, (uint64_t)v46.__begin_, (uint64_t)v46.__end_, (uint64_t)__p);
  if ((v49 & 0x80u) == 0) {
    int v38 = (const std::string::value_type *)&v48;
  }
  else {
    int v38 = (const std::string::value_type *)v48;
  }
  if ((v49 & 0x80u) == 0) {
    std::string::size_type v39 = v49;
  }
  else {
    std::string::size_type v39 = *((void *)&v48 + 1);
  }
  uint64_t v40 = std::string::append(&v45, v38, v39);
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  __v.__end_ = (std::__split_buffer<std::string>::pointer)v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__v.__first_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append((std::string *)&__v, ")");
  *a2 = *v42;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  if ((char)v49 < 0) {
    operator delete((void *)v48);
  }
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1C5D191B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, char *__pa, std::__split_buffer<std::string> *a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a21 < 0) {
    operator delete(__pa);
  }
  __pa = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::XmlError::GetLevel(siri::dialogengine::XmlError *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t siri::dialogengine::XmlError::GetFile(siri::dialogengine::XmlError *this)
{
  return (uint64_t)this + 40;
}

uint64_t siri::dialogengine::XmlError::GetLine(siri::dialogengine::XmlError *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t siri::dialogengine::XmlError::GetStr1(siri::dialogengine::XmlError *this)
{
  return (uint64_t)this + 72;
}

uint64_t siri::dialogengine::XmlError::GetStr2(siri::dialogengine::XmlError *this)
{
  return (uint64_t)this + 96;
}

uint64_t siri::dialogengine::XmlError::GetStr3(siri::dialogengine::XmlError *this)
{
  return (uint64_t)this + 120;
}

uint64_t siri::dialogengine::XmlError::GetInt1(siri::dialogengine::XmlError *this)
{
  return *((unsigned int *)this + 36);
}

uint64_t siri::dialogengine::XmlError::GetInt2(siri::dialogengine::XmlError *this)
{
  return *((unsigned int *)this + 37);
}

void InitDefaultsscc_info_FactItem_Button_FactItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", a4);
  SnippetUI::FactItem_Button::FactItem_Button((SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_FactItem_Button_default_instance_, v4);
  qword_1EB68F7F8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68F800 = &SnippetUI::_Button_default_instance_;
  qword_1EB68F808 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1EB68F810 = &SnippetUI::_Button_default_instance_;
  qword_1EB68F818 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68F820 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68F828 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB68F830 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EB68F838 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB68F840 = &SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::FactItem_Button *SnippetUI::FactItem_Button::FactItem_Button(SnippetUI::FactItem_Button *this)
{
  *(void *)this = &unk_1F2119F58;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  if (atomic_load_explicit(scc_info_FactItem_Button_FactItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_Button_FactItem_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  return this;
}

void sub_1C5D193DC(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::FactItem_Button::GetMetadata(SnippetUI::FactItem_Button *this)
{
  return qword_1EA3D82B8;
}

void InitDefaultsscc_info_FactItem_Standard_FactItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", a4);
  SnippetUI::FactItem_Standard::FactItem_Standard((SnippetUI::FactItem_Standard *)&SnippetUI::_FactItem_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_FactItem_Standard_default_instance_, v4);
  qword_1EB690AD8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690AE0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB690AE8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690AF0 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1EB690AF8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690B00 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EB690B08 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::FactItem_Standard *SnippetUI::FactItem_Standard::FactItem_Standard(SnippetUI::FactItem_Standard *this)
{
  *(void *)this = &unk_1F2119D18;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  if (atomic_load_explicit(scc_info_FactItem_Standard_FactItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_Standard_FactItem_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  return this;
}

void sub_1C5D19534(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::FactItem_Standard::GetMetadata(SnippetUI::FactItem_Standard *this)
{
  return file_level_metadata_FactItem_2eproto;
}

uint64_t SnippetUI::FactItem_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 88) = a2;
  return this;
}

void SnippetUI::FactItem_Standard::MergeFrom(SnippetUI::FactItem_Standard *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 754);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::FactItem_Standard::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D19650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_Standard::MergeFrom(SnippetUI::FactItem_Standard *this, const SnippetUI::FactItem_Standard *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 769);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  std::string::size_type v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::FactItem_Standard *)&SnippetUI::_FactItem_Standard_default_instance_)
  {
    unint64_t v10 = (int **)*((void *)a2 + 4);
    if (v10)
    {
      unint64_t v11 = (int **)*((void *)this + 4);
      if (!v11)
      {
        unint64_t v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        unint64_t v10 = (int **)*((void *)a2 + 4);
      }
      if (v10) {
        unint64_t v12 = v10;
      }
      else {
        unint64_t v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    char v13 = (int **)*((void *)a2 + 5);
    if (v13)
    {
      uint64_t v14 = (int **)*((void *)this + 5);
      if (!v14)
      {
        uint64_t v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v14;
        char v13 = (int **)*((void *)a2 + 5);
      }
      if (v13) {
        unsigned __int8 v15 = v13;
      }
      else {
        unsigned __int8 v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    unint64_t v16 = (int **)*((void *)a2 + 6);
    if (v16)
    {
      char v17 = (int **)*((void *)this + 6);
      if (!v17)
      {
        char v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 6) = v17;
        unint64_t v16 = (int **)*((void *)a2 + 6);
      }
      if (v16) {
        std::vector<std::string>::pointer v18 = v16;
      }
      else {
        std::vector<std::string>::pointer v18 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v17, v18);
    }
    char v19 = (int **)*((void *)a2 + 7);
    if (v19)
    {
      unint64_t v20 = (int **)*((void *)this + 7);
      if (!v20)
      {
        unint64_t v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 7) = v20;
        char v19 = (int **)*((void *)a2 + 7);
      }
      if (v19) {
        unint64_t v21 = v19;
      }
      else {
        unint64_t v21 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v20, v21);
    }
    unint64_t v22 = (int **)*((void *)a2 + 8);
    if (v22)
    {
      int64_t v23 = (int **)*((void *)this + 8);
      if (!v23)
      {
        int64_t v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 8) = v23;
        unint64_t v22 = (int **)*((void *)a2 + 8);
      }
      if (v22) {
        size_t v24 = v22;
      }
      else {
        size_t v24 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v23, v24);
    }
    char v25 = (int **)*((void *)a2 + 9);
    if (v25)
    {
      BOOL v26 = (int **)*((void *)this + 9);
      if (!v26)
      {
        BOOL v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 9) = v26;
        char v25 = (int **)*((void *)a2 + 9);
      }
      if (v25) {
        char v27 = v25;
      }
      else {
        char v27 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v26, v27);
    }
    std::vector<std::string>::pointer v28 = (int **)*((void *)a2 + 10);
    if (v28)
    {
      char v29 = (int **)*((void *)this + 10);
      if (!v29)
      {
        char v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 10) = v29;
        std::vector<std::string>::pointer v28 = (int **)*((void *)a2 + 10);
      }
      if (v28) {
        unint64_t v30 = v28;
      }
      else {
        unint64_t v30 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v29, v30);
    }
  }
}

void sub_1C5D198DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_Standard::CopyFrom(SnippetUI::FactItem_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_Standard::Clear(this);
    SnippetUI::FactItem_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_Standard::Clear(SnippetUI::FactItem_Standard *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 6) = 0;
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 7) = 0;
  uint64_t v8 = *((void *)this + 8);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 8) = 0;
  uint64_t v9 = *((void *)this + 9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 9) = 0;
  uint64_t v10 = *((void *)this + 10);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  char v12 = *((unsigned char *)this + 8);
  unint64_t v11 = (SnippetUI::FactItem_Standard *)((char *)this + 8);
  *((void *)v11 + 9) = 0;
  if (v12)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v11);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::FactItem_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::FactItem_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::FactItem_Standard *)&SnippetUI::_FactItem_Standard_default_instance_) {
    goto LABEL_85;
  }
  uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
    }
    *uint64_t v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        char v12 = v5 + 2;
        do
        {
          char v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        unint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *char v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    unint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  unint64_t v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  if (!v16) {
    goto LABEL_26;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unint64_t v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  }
  *uint64_t v5 = 18;
  unsigned int v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    unsigned int v19 = v17 >> 7;
    if (v17 >> 14)
    {
      unint64_t v21 = v5 + 2;
      do
      {
        unint64_t v22 = v21;
        *v21++ = v19 | 0x80;
        unsigned int v23 = v19 >> 7;
        unsigned int v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      unint64_t v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *unint64_t v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    uint64_t v18 = 3;
  }
  else
  {
    v5[1] = v17;
    uint64_t v18 = 2;
  }
  unint64_t v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  char v25 = (SnippetUI::TextProperty *)*((void *)this + 6);
  if (!v25) {
    goto LABEL_38;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    char v25 = (SnippetUI::TextProperty *)*((void *)this + 6);
  }
  *uint64_t v5 = 26;
  unsigned int v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    unsigned int v28 = v26 >> 7;
    if (v26 >> 14)
    {
      unint64_t v30 = v5 + 2;
      do
      {
        char v31 = v30;
        *v30++ = v28 | 0x80;
        unsigned int v32 = v28 >> 7;
        unsigned int v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      char v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *unint64_t v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    uint64_t v27 = 3;
  }
  else
  {
    v5[1] = v26;
    uint64_t v27 = 2;
  }
  char v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  std::string::size_type v34 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
  if (!v34) {
    goto LABEL_50;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    std::string::size_type v34 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
  }
  *uint64_t v5 = 34;
  unsigned int v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    unsigned int v37 = v35 >> 7;
    if (v35 >> 14)
    {
      std::string::size_type v39 = v5 + 2;
      do
      {
        uint64_t v40 = v39;
        *v39++ = v37 | 0x80;
        unsigned int v41 = v37 >> 7;
        unsigned int v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      int v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      unsigned char *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    uint64_t v36 = 3;
  }
  else
  {
    v5[1] = v35;
    uint64_t v36 = 2;
  }
  int v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  uint64_t v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  uint64_t v43 = (SnippetUI::TextProperty *)*((void *)this + 8);
  if (!v43) {
    goto LABEL_62;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    uint64_t v43 = (SnippetUI::TextProperty *)*((void *)this + 8);
  }
  *uint64_t v5 = 42;
  unsigned int v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    unsigned int v46 = v44 >> 7;
    if (v44 >> 14)
    {
      long long v48 = v5 + 2;
      do
      {
        unsigned __int8 v49 = v48;
        *v48++ = v46 | 0x80;
        unsigned int v50 = v46 >> 7;
        unsigned int v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      BOOL v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *long long v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    uint64_t v45 = 3;
  }
  else
  {
    v5[1] = v44;
    uint64_t v45 = 2;
  }
  BOOL v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  long long v52 = (SnippetUI::VisualProperty *)*((void *)this + 9);
  if (!v52) {
    goto LABEL_74;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    long long v52 = (SnippetUI::VisualProperty *)*((void *)this + 9);
  }
  *uint64_t v5 = 50;
  unsigned int v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    unsigned int v55 = v53 >> 7;
    if (v53 >> 14)
    {
      v57 = v5 + 2;
      do
      {
        v58 = v57;
        *v57++ = v55 | 0x80;
        unsigned int v59 = v55 >> 7;
        unsigned int v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      unsigned char *v57 = v59;
      goto LABEL_73;
    }
    v5[2] = v55;
    uint64_t v54 = 3;
  }
  else
  {
    v5[1] = v53;
    uint64_t v54 = 2;
  }
  v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  uint64_t v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  char v61 = (SnippetUI::ActionProperty *)*((void *)this + 10);
  if (v61)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      char v61 = (SnippetUI::ActionProperty *)*((void *)this + 10);
    }
    *uint64_t v5 = 58;
    unsigned int v62 = *((_DWORD *)v61 + 12);
    if (v62 > 0x7F)
    {
      v5[1] = v62 | 0x80;
      unsigned int v64 = v62 >> 7;
      if (v62 >> 14)
      {
        char v65 = v5 + 2;
        do
        {
          v66 = v65;
          *v65++ = v64 | 0x80;
          unsigned int v67 = v64 >> 7;
          unsigned int v68 = v64 >> 14;
          v64 >>= 7;
        }
        while (v68);
        char v63 = (google::protobuf::UnknownFieldSet *)(v66 + 2);
        *char v65 = v67;
      }
      else
      {
        v5[2] = v64;
        char v63 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v62;
      char v63 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v61, v63, a3, a4);
  }
LABEL_85:
  char v69 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v69 + 23) < 0)
  {
    v70 = (const char *)*((void *)v69 + 1);
    if (!v70) {
      goto LABEL_91;
    }
    char v69 = *(google::protobuf::internal **)v69;
    goto LABEL_90;
  }
  v70 = (const char *)*((unsigned __int8 *)v69 + 23);
  if (*((unsigned char *)v69 + 23))
  {
LABEL_90:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v69, v70, 1, (google::protobuf::internal *)"SnippetUI.FactItem_Standard.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((const void ***)this + 2), v5);
  }
LABEL_91:
  char v71 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v71 + 23) < 0)
  {
    v72 = (const char *)*((void *)v71 + 1);
    if (!v72) {
      goto LABEL_97;
    }
    char v71 = *(google::protobuf::internal **)v71;
    goto LABEL_96;
  }
  v72 = (const char *)*((unsigned __int8 *)v71 + 23);
  if (*((unsigned char *)v71 + 23))
  {
LABEL_96:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v71, v72, 1, (google::protobuf::internal *)"SnippetUI.FactItem_Standard.link_identifier");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((const void ***)this + 3), v5);
  }
LABEL_97:
  uint64_t v73 = *((void *)this + 1);
  if ((v73 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v73 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::FactItem_Standard::_InternalParse(SnippetUI::FactItem_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unint64_t v22 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  uint64_t v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23))) {
      return v22;
    }
    TagFallback = (google::protobuf::internal *)((char *)v22 + 1);
    unsigned int v10 = (char *)*(unsigned __int8 *)v22;
    if ((*(char *)v22 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
      unint64_t v22 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, v10);
    unint64_t v22 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_45;
        }
        unint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 4);
        if (v11) {
          goto LABEL_27;
        }
        unint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        goto LABEL_26;
      case 2u:
        if (v10 != 18) {
          goto LABEL_45;
        }
        unint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 5);
        if (v11) {
          goto LABEL_27;
        }
        unint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v11;
        goto LABEL_26;
      case 3u:
        if (v10 != 26) {
          goto LABEL_45;
        }
        unint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 6);
        if (v11) {
          goto LABEL_27;
        }
        unint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 6) = v11;
        goto LABEL_26;
      case 4u:
        if (v10 != 34) {
          goto LABEL_45;
        }
        char v12 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
        if (!v12)
        {
          char v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
          *((void *)this + 7) = v12;
          TagFallback = v22;
        }
        char v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_50;
      case 5u:
        if (v10 != 42) {
          goto LABEL_45;
        }
        unint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 8);
        if (v11) {
          goto LABEL_27;
        }
        unint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 8) = v11;
LABEL_26:
        TagFallback = v22;
LABEL_27:
        char v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_50;
      case 6u:
        if (v10 != 50) {
          goto LABEL_45;
        }
        unsigned int v14 = (SnippetUI::VisualProperty *)*((void *)this + 9);
        if (!v14)
        {
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((void *)this + 9) = v14;
          TagFallback = v22;
        }
        char v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_50;
      case 7u:
        if (v10 != 58) {
          goto LABEL_45;
        }
        unsigned int v15 = (SnippetUI::ActionProperty *)*((void *)this + 10);
        if (!v15)
        {
          unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 10) = v15;
          TagFallback = v22;
        }
        char v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_50;
      case 8u:
        if (v10 != 66) {
          goto LABEL_45;
        }
        unint64_t v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v17 = (std::string::value_type *)TagFallback;
        uint64_t v18 = a3;
        unsigned int v19 = "SnippetUI.FactItem_Standard.component_name";
        goto LABEL_44;
      case 9u:
        if (v10 != 74) {
          goto LABEL_45;
        }
        unint64_t v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v17 = (std::string::value_type *)TagFallback;
        uint64_t v18 = a3;
        unsigned int v19 = "SnippetUI.FactItem_Standard.link_identifier";
LABEL_44:
        char v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_50;
      default:
LABEL_45:
        if (v10) {
          BOOL v20 = (v10 & 7) == 4;
        }
        else {
          BOOL v20 = 1;
        }
        if (v20)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        char v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_50:
        unint64_t v22 = (google::protobuf::internal *)v13;
        if (v13) {
          continue;
        }
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::TextProperty *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  uint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    double result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  double result = (char *)SnippetUI::TextProperty::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::MultilineTextProperty *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  uint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    double result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  double result = (char *)SnippetUI::MultilineTextProperty::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::VisualProperty *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  uint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    double result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  double result = (char *)SnippetUI::VisualProperty::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::ActionProperty *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  uint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    double result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  double result = (char *)SnippetUI::ActionProperty::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t SnippetUI::FactItem_Standard::GetCachedSize(SnippetUI::FactItem_Standard *this)
{
  return *((unsigned int *)this + 22);
}

char *SnippetUI::FactItem_Standard::ByteSizeLong(SnippetUI::FactItem_Standard *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::FactItem_Standard *)&SnippetUI::_FactItem_Standard_default_instance_)
  {
    uint64_t v9 = (SnippetUI::TextProperty *)*((void *)this + 4);
    if (v9)
    {
      int v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    int v11 = (SnippetUI::TextProperty *)*((void *)this + 5);
    if (v11)
    {
      int v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    BOOL v13 = (SnippetUI::TextProperty *)*((void *)this + 6);
    if (v13)
    {
      int v14 = SnippetUI::TextProperty::ByteSizeLong(v13);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v14[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    int v15 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
    if (v15)
    {
      unint64_t v16 = SnippetUI::MultilineTextProperty::ByteSizeLong(v15);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v16[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v17 = (SnippetUI::TextProperty *)*((void *)this + 8);
    if (v17)
    {
      uint64_t v18 = SnippetUI::TextProperty::ByteSizeLong(v17);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v18[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v19 = (SnippetUI::VisualProperty *)*((void *)this + 9);
    if (v19)
    {
      BOOL v20 = SnippetUI::VisualProperty::ByteSizeLong(v19);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v20[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unint64_t v21 = (SnippetUI::ActionProperty *)*((void *)this + 10);
    if (v21)
    {
      unint64_t v22 = SnippetUI::ActionProperty::ByteSizeLong(v21);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v22[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::FactItem_Standard *)((char *)this + 8), v5, (_DWORD *)this + 22);
  }
  else
  {
    *((_DWORD *)this + 22) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::FactItem_Standard::IsInitialized(SnippetUI::FactItem_Standard *this)
{
  return 1;
}

SnippetUI::FactItem_Standard *SnippetUI::FactItem_Standard::New(SnippetUI::FactItem_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Standard>(a2);
}

SnippetUI::FactItem_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::FactItem_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x60uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_Standard>);
  }
  SnippetUI::FactItem_Standard::FactItem_Standard(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D1AA14(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C404A70EBA6);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_Standard>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::FactItem_Standard *SnippetUI::FactItem_Standard::New(SnippetUI::FactItem_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Standard>(0);
}

void SnippetUI::FactItem_Standard::~FactItem_Standard(SnippetUI::FactItem_Standard *this)
{
  SnippetUI::FactItem_Standard::~FactItem_Standard(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(void *)this = &unk_1F2119D18;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::FactItem_Standard *)&SnippetUI::_FactItem_Standard_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 6);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = *((void *)this + 7);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    int v10 = *((void *)this + 8);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    int v11 = *((void *)this + 9);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    int v12 = *((void *)this + 10);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_FactItem_ShortNumber_FactItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", a4);
  SnippetUI::FactItem_ShortNumber::FactItem_ShortNumber((SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_FactItem_ShortNumber_default_instance_, v4);
  qword_1EB690CB8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690CC0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB690CC8 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB690CD0 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1EB690CD8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690CE0 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EB690CE8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB690CF0 = &SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::FactItem_ShortNumber *SnippetUI::FactItem_ShortNumber::FactItem_ShortNumber(SnippetUI::FactItem_ShortNumber *this)
{
  *(void *)this = &unk_1F2119DD8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 24) = 0;
  if (atomic_load_explicit(scc_info_FactItem_ShortNumber_FactItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_ShortNumber_FactItem_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return this;
}

void sub_1C5D1ADC0(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::FactItem_ShortNumber::GetMetadata(SnippetUI::FactItem_ShortNumber *this)
{
  return qword_1EA3D8298;
}

uint64_t SnippetUI::FactItem_ShortNumber::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 96) = a2;
  return this;
}

void SnippetUI::FactItem_ShortNumber::MergeFrom(SnippetUI::FactItem_ShortNumber *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 1379);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::FactItem_ShortNumber::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D1AEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_ShortNumber::MergeFrom(SnippetUI::FactItem_ShortNumber *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v35, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 1394);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v35, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v34, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v35[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_ShortNumber *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_)
  {
    int v10 = (int **)*((void *)a2 + 4);
    if (v10)
    {
      int v11 = (int **)*((void *)this + 4);
      if (!v11)
      {
        int v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        int v10 = (int **)*((void *)a2 + 4);
      }
      if (v10) {
        int v12 = v10;
      }
      else {
        int v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    BOOL v13 = (int **)*((void *)a2 + 5);
    if (v13)
    {
      int v14 = (int **)*((void *)this + 5);
      if (!v14)
      {
        int v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v14;
        BOOL v13 = (int **)*((void *)a2 + 5);
      }
      if (v13) {
        int v15 = v13;
      }
      else {
        int v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    unint64_t v16 = (int **)*((void *)a2 + 6);
    if (v16)
    {
      unsigned int v17 = (int **)*((void *)this + 6);
      if (!v17)
      {
        unsigned int v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 6) = v17;
        unint64_t v16 = (int **)*((void *)a2 + 6);
      }
      if (v16) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    unsigned int v19 = (int **)*((void *)a2 + 7);
    if (v19)
    {
      BOOL v20 = (int **)*((void *)this + 7);
      if (!v20)
      {
        BOOL v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 7) = v20;
        unsigned int v19 = (int **)*((void *)a2 + 7);
      }
      if (v19) {
        unint64_t v21 = v19;
      }
      else {
        unint64_t v21 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v20, v21);
    }
    unint64_t v22 = (int **)*((void *)a2 + 8);
    if (v22)
    {
      unsigned int v23 = (int **)*((void *)this + 8);
      if (!v23)
      {
        unsigned int v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 8) = v23;
        unint64_t v22 = (int **)*((void *)a2 + 8);
      }
      if (v22) {
        unsigned int v24 = v22;
      }
      else {
        unsigned int v24 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v23, v24);
    }
    char v25 = (int **)*((void *)a2 + 9);
    if (v25)
    {
      unsigned int v26 = (int **)*((void *)this + 9);
      if (!v26)
      {
        unsigned int v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 9) = v26;
        char v25 = (int **)*((void *)a2 + 9);
      }
      if (v25) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v26, v27);
    }
    unsigned int v28 = (int **)*((void *)a2 + 10);
    if (v28)
    {
      char v29 = (int **)*((void *)this + 10);
      if (!v29)
      {
        char v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 10) = v29;
        unsigned int v28 = (int **)*((void *)a2 + 10);
      }
      if (v28) {
        unint64_t v30 = v28;
      }
      else {
        unint64_t v30 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v29, v30);
    }
    char v31 = (int **)*((void *)a2 + 11);
    if (v31)
    {
      unsigned int v32 = (int **)*((void *)this + 11);
      if (!v32)
      {
        unsigned int v32 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 11) = v32;
        char v31 = (int **)*((void *)a2 + 11);
      }
      if (v31) {
        unsigned int v33 = v31;
      }
      else {
        unsigned int v33 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v32, v33);
    }
  }
}

void sub_1C5D1B190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_ShortNumber::CopyFrom(SnippetUI::FactItem_ShortNumber *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_ShortNumber::Clear(this);
    SnippetUI::FactItem_ShortNumber::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_ShortNumber::Clear(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 6) = 0;
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 7) = 0;
  uint64_t v8 = *((void *)this + 8);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 8) = 0;
  uint64_t v9 = *((void *)this + 9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 9) = 0;
  uint64_t v10 = *((void *)this + 10);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 10) = 0;
  uint64_t v11 = *((void *)this + 11);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  char v13 = *((unsigned char *)this + 8);
  int v12 = (SnippetUI::FactItem_ShortNumber *)((char *)this + 8);
  *((void *)v12 + 10) = 0;
  if (v13)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v12);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::FactItem_ShortNumber::InternalSerializeWithCachedSizesToArray(SnippetUI::FactItem_ShortNumber *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_) {
    goto LABEL_85;
  }
  uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
    }
    *uint64_t v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        int v12 = v5 + 2;
        do
        {
          char v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *int v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  unint64_t v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  if (!v16) {
    goto LABEL_26;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unint64_t v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  }
  *uint64_t v5 = 18;
  unsigned int v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    unsigned int v19 = v17 >> 7;
    if (v17 >> 14)
    {
      unint64_t v21 = v5 + 2;
      do
      {
        unint64_t v22 = v21;
        *v21++ = v19 | 0x80;
        unsigned int v23 = v19 >> 7;
        unsigned int v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      BOOL v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *unint64_t v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    uint64_t v18 = 3;
  }
  else
  {
    v5[1] = v17;
    uint64_t v18 = 2;
  }
  BOOL v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  char v25 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
  if (!v25) {
    goto LABEL_38;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    char v25 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
  }
  *uint64_t v5 = 26;
  unsigned int v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    unsigned int v28 = v26 >> 7;
    if (v26 >> 14)
    {
      unint64_t v30 = v5 + 2;
      do
      {
        char v31 = v30;
        *v30++ = v28 | 0x80;
        unsigned int v32 = v28 >> 7;
        unsigned int v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      char v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *unint64_t v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    uint64_t v27 = 3;
  }
  else
  {
    v5[1] = v26;
    uint64_t v27 = 2;
  }
  char v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  uint64_t v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  char v34 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
  if (!v34) {
    goto LABEL_50;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    char v34 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
  }
  *uint64_t v5 = 34;
  unsigned int v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    unsigned int v37 = v35 >> 7;
    if (v35 >> 14)
    {
      std::string::size_type v39 = v5 + 2;
      do
      {
        uint64_t v40 = v39;
        *v39++ = v37 | 0x80;
        unsigned int v41 = v37 >> 7;
        unsigned int v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      int v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      unsigned char *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    uint64_t v36 = 3;
  }
  else
  {
    v5[1] = v35;
    uint64_t v36 = 2;
  }
  int v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  uint64_t v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  uint64_t v43 = (SnippetUI::TextProperty *)*((void *)this + 8);
  if (!v43) {
    goto LABEL_62;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    uint64_t v43 = (SnippetUI::TextProperty *)*((void *)this + 8);
  }
  *uint64_t v5 = 42;
  unsigned int v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    unsigned int v46 = v44 >> 7;
    if (v44 >> 14)
    {
      long long v48 = v5 + 2;
      do
      {
        unsigned __int8 v49 = v48;
        *v48++ = v46 | 0x80;
        unsigned int v50 = v46 >> 7;
        unsigned int v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      BOOL v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *long long v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    uint64_t v45 = 3;
  }
  else
  {
    v5[1] = v44;
    uint64_t v45 = 2;
  }
  BOOL v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  long long v52 = (SnippetUI::VisualProperty *)*((void *)this + 9);
  if (!v52) {
    goto LABEL_74;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    long long v52 = (SnippetUI::VisualProperty *)*((void *)this + 9);
  }
  *uint64_t v5 = 50;
  unsigned int v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    unsigned int v55 = v53 >> 7;
    if (v53 >> 14)
    {
      v57 = v5 + 2;
      do
      {
        v58 = v57;
        *v57++ = v55 | 0x80;
        unsigned int v59 = v55 >> 7;
        unsigned int v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      unsigned char *v57 = v59;
      goto LABEL_73;
    }
    v5[2] = v55;
    uint64_t v54 = 3;
  }
  else
  {
    v5[1] = v53;
    uint64_t v54 = 2;
  }
  v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  uint64_t v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  char v61 = (SnippetUI::ActionProperty *)*((void *)this + 10);
  if (v61)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      char v61 = (SnippetUI::ActionProperty *)*((void *)this + 10);
    }
    *uint64_t v5 = 58;
    unsigned int v62 = *((_DWORD *)v61 + 12);
    if (v62 > 0x7F)
    {
      v5[1] = v62 | 0x80;
      unsigned int v64 = v62 >> 7;
      if (v62 >> 14)
      {
        char v65 = v5 + 2;
        do
        {
          v66 = v65;
          *v65++ = v64 | 0x80;
          unsigned int v67 = v64 >> 7;
          unsigned int v68 = v64 >> 14;
          v64 >>= 7;
        }
        while (v68);
        char v63 = (google::protobuf::UnknownFieldSet *)(v66 + 2);
        *char v65 = v67;
      }
      else
      {
        v5[2] = v64;
        char v63 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v62;
      char v63 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v61, v63, a3, a4);
  }
LABEL_85:
  char v69 = (uint64_t *)*((void *)this + 2);
  if ((*((char *)v69 + 23) & 0x80000000) == 0)
  {
    v70 = (const char *)*((unsigned __int8 *)v69 + 23);
    if (!*((unsigned char *)v69 + 23)) {
      goto LABEL_91;
    }
    goto LABEL_90;
  }
  v70 = (const char *)v69[1];
  if (v70)
  {
    char v69 = (uint64_t *)*v69;
LABEL_90:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v69, v70, 1, (google::protobuf::internal *)"SnippetUI.FactItem_ShortNumber.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((const void ***)this + 2), v5);
  }
LABEL_91:
  if (this != (SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_)
  {
    char v71 = (SnippetUI::TextProperty *)*((void *)this + 11);
    if (v71)
    {
      if ((unint64_t)v5 >= *(void *)a3)
      {
        uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        char v71 = (SnippetUI::TextProperty *)*((void *)this + 11);
      }
      *uint64_t v5 = 74;
      unsigned int v72 = *((_DWORD *)v71 + 15);
      if (v72 > 0x7F)
      {
        v5[1] = v72 | 0x80;
        unsigned int v74 = v72 >> 7;
        if (v72 >> 14)
        {
          v75 = v5 + 2;
          do
          {
            std::string v76 = v75;
            *v75++ = v74 | 0x80;
            unsigned int v77 = v74 >> 7;
            unsigned int v78 = v74 >> 14;
            v74 >>= 7;
          }
          while (v78);
          uint64_t v73 = (google::protobuf::UnknownFieldSet *)(v76 + 2);
          unsigned char *v75 = v77;
        }
        else
        {
          v5[2] = v74;
          uint64_t v73 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v72;
        uint64_t v73 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v71, v73, a3, a4);
    }
  }
  std::string v79 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v79 + 23) < 0)
  {
    uint64_t v80 = (const char *)*((void *)v79 + 1);
    if (!v80) {
      goto LABEL_109;
    }
    std::string v79 = *(google::protobuf::internal **)v79;
    goto LABEL_108;
  }
  uint64_t v80 = (const char *)*((unsigned __int8 *)v79 + 23);
  if (*((unsigned char *)v79 + 23))
  {
LABEL_108:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v79, v80, 1, (google::protobuf::internal *)"SnippetUI.FactItem_ShortNumber.link_identifier");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 10, *((const void ***)this + 3), v5);
  }
LABEL_109:
  uint64_t v81 = *((void *)this + 1);
  if ((v81 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v81 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::FactItem_ShortNumber::_InternalParse(SnippetUI::FactItem_ShortNumber *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unint64_t v22 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  uint64_t v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23))) {
      return v22;
    }
    TagFallback = (google::protobuf::internal *)((char *)v22 + 1);
    unsigned int v10 = (char *)*(unsigned __int8 *)v22;
    if ((*(char *)v22 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
      unint64_t v22 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, v10);
    unint64_t v22 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_49;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 4);
        if (v11) {
          goto LABEL_43;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        goto LABEL_42;
      case 2u:
        if (v10 != 18) {
          goto LABEL_49;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 5);
        if (v11) {
          goto LABEL_43;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v11;
        goto LABEL_42;
      case 3u:
        if (v10 != 26) {
          goto LABEL_49;
        }
        int v12 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
        if (v12) {
          goto LABEL_23;
        }
        int v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 6) = v12;
        goto LABEL_22;
      case 4u:
        if (v10 != 34) {
          goto LABEL_49;
        }
        int v12 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
        if (v12) {
          goto LABEL_23;
        }
        int v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 7) = v12;
LABEL_22:
        TagFallback = v22;
LABEL_23:
        char v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_54;
      case 5u:
        if (v10 != 42) {
          goto LABEL_49;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 8);
        if (v11) {
          goto LABEL_43;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 8) = v11;
        goto LABEL_42;
      case 6u:
        if (v10 != 50) {
          goto LABEL_49;
        }
        unsigned int v14 = (SnippetUI::VisualProperty *)*((void *)this + 9);
        if (!v14)
        {
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((void *)this + 9) = v14;
          TagFallback = v22;
        }
        char v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_54;
      case 7u:
        if (v10 != 58) {
          goto LABEL_49;
        }
        unsigned int v15 = (SnippetUI::ActionProperty *)*((void *)this + 10);
        if (!v15)
        {
          unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 10) = v15;
          TagFallback = v22;
        }
        char v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_54;
      case 8u:
        if (v10 != 66) {
          goto LABEL_49;
        }
        unint64_t v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v17 = (std::string::value_type *)TagFallback;
        uint64_t v18 = a3;
        unsigned int v19 = "SnippetUI.FactItem_ShortNumber.component_name";
        goto LABEL_48;
      case 9u:
        if (v10 != 74) {
          goto LABEL_49;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 11);
        if (v11) {
          goto LABEL_43;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 11) = v11;
LABEL_42:
        TagFallback = v22;
LABEL_43:
        char v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_54;
      case 0xAu:
        if (v10 != 82) {
          goto LABEL_49;
        }
        unint64_t v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v17 = (std::string::value_type *)TagFallback;
        uint64_t v18 = a3;
        unsigned int v19 = "SnippetUI.FactItem_ShortNumber.link_identifier";
LABEL_48:
        char v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_54;
      default:
LABEL_49:
        if (v10) {
          BOOL v20 = (v10 & 7) == 4;
        }
        else {
          BOOL v20 = 1;
        }
        if (v20)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        char v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_54:
        unint64_t v22 = (google::protobuf::internal *)v13;
        if (v13) {
          continue;
        }
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::FactItem_ShortNumber::GetCachedSize(SnippetUI::FactItem_ShortNumber *this)
{
  return *((unsigned int *)this + 24);
}

char *SnippetUI::FactItem_ShortNumber::ByteSizeLong(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_)
  {
    uint64_t v9 = (SnippetUI::TextProperty *)*((void *)this + 4);
    if (v9)
    {
      unsigned int v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 5);
    if (v11)
    {
      int v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    char v13 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
    if (v13)
    {
      unsigned int v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v14[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v15 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
    if (v15)
    {
      unint64_t v16 = SnippetUI::MultilineTextProperty::ByteSizeLong(v15);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v16[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v17 = (SnippetUI::TextProperty *)*((void *)this + 8);
    if (v17)
    {
      uint64_t v18 = SnippetUI::TextProperty::ByteSizeLong(v17);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v18[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v19 = (SnippetUI::VisualProperty *)*((void *)this + 9);
    if (v19)
    {
      BOOL v20 = SnippetUI::VisualProperty::ByteSizeLong(v19);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v20[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unint64_t v21 = (SnippetUI::ActionProperty *)*((void *)this + 10);
    if (v21)
    {
      unint64_t v22 = SnippetUI::ActionProperty::ByteSizeLong(v21);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v22[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v23 = (SnippetUI::TextProperty *)*((void *)this + 11);
    if (v23)
    {
      unsigned int v24 = SnippetUI::TextProperty::ByteSizeLong(v23);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v24[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::FactItem_ShortNumber *)((char *)this + 8), v5, (_DWORD *)this + 24);
  }
  else
  {
    *((_DWORD *)this + 24) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::FactItem_ShortNumber::IsInitialized(SnippetUI::FactItem_ShortNumber *this)
{
  return 1;
}

SnippetUI::FactItem_ShortNumber *SnippetUI::FactItem_ShortNumber::New(SnippetUI::FactItem_ShortNumber *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_ShortNumber>(a2);
}

SnippetUI::FactItem_ShortNumber *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_ShortNumber>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::FactItem_ShortNumber *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x68uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_ShortNumber>);
  }
  SnippetUI::FactItem_ShortNumber::FactItem_ShortNumber(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D1C0DC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C408A0BA939);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_ShortNumber>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::FactItem_ShortNumber *SnippetUI::FactItem_ShortNumber::New(SnippetUI::FactItem_ShortNumber *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_ShortNumber>(0);
}

void SnippetUI::FactItem_ShortNumber::~FactItem_ShortNumber(SnippetUI::FactItem_ShortNumber *this)
{
  SnippetUI::FactItem_ShortNumber::~FactItem_ShortNumber(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(void *)this = &unk_1F2119DD8;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 6);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = *((void *)this + 7);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    unsigned int v10 = *((void *)this + 8);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = *((void *)this + 9);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    int v12 = *((void *)this + 10);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    char v13 = *((void *)this + 11);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_FactItem_HeroNumber_FactItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", a4);
  SnippetUI::FactItem_HeroNumber::FactItem_HeroNumber((SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_FactItem_HeroNumber_default_instance_, v4);
  qword_1EB68FDC0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68FDC8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68FDD0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB68FDD8 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1EB68FDE0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB68FDE8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68FDF0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
}

SnippetUI::FactItem_HeroNumber *SnippetUI::FactItem_HeroNumber::FactItem_HeroNumber(SnippetUI::FactItem_HeroNumber *this)
{
  *(void *)this = &unk_1F2119E98;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  if (atomic_load_explicit(scc_info_FactItem_HeroNumber_FactItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_HeroNumber_FactItem_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  return this;
}

void sub_1C5D1C4B0(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::FactItem_HeroNumber::GetMetadata(SnippetUI::FactItem_HeroNumber *this)
{
  return qword_1EA3D82A8;
}

uint64_t SnippetUI::FactItem_HeroNumber::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 88) = a2;
  return this;
}

void SnippetUI::FactItem_HeroNumber::MergeFrom(SnippetUI::FactItem_HeroNumber *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 1963);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::FactItem_HeroNumber::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D1C5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_HeroNumber::MergeFrom(SnippetUI::FactItem_HeroNumber *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 1978);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_HeroNumber *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_)
  {
    unsigned int v10 = (int **)*((void *)a2 + 4);
    if (v10)
    {
      uint64_t v11 = (int **)*((void *)this + 4);
      if (!v11)
      {
        uint64_t v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        unsigned int v10 = (int **)*((void *)a2 + 4);
      }
      if (v10) {
        int v12 = v10;
      }
      else {
        int v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    char v13 = (int **)*((void *)a2 + 5);
    if (v13)
    {
      unsigned int v14 = (int **)*((void *)this + 5);
      if (!v14)
      {
        unsigned int v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v14;
        char v13 = (int **)*((void *)a2 + 5);
      }
      if (v13) {
        unsigned int v15 = v13;
      }
      else {
        unsigned int v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    unint64_t v16 = (int **)*((void *)a2 + 6);
    if (v16)
    {
      unsigned int v17 = (int **)*((void *)this + 6);
      if (!v17)
      {
        unsigned int v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 6) = v17;
        unint64_t v16 = (int **)*((void *)a2 + 6);
      }
      if (v16) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    unsigned int v19 = (int **)*((void *)a2 + 7);
    if (v19)
    {
      BOOL v20 = (int **)*((void *)this + 7);
      if (!v20)
      {
        BOOL v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 7) = v20;
        unsigned int v19 = (int **)*((void *)a2 + 7);
      }
      if (v19) {
        unint64_t v21 = v19;
      }
      else {
        unint64_t v21 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v20, v21);
    }
    unint64_t v22 = (int **)*((void *)a2 + 8);
    if (v22)
    {
      unsigned int v23 = (int **)*((void *)this + 8);
      if (!v23)
      {
        unsigned int v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 8) = v23;
        unint64_t v22 = (int **)*((void *)a2 + 8);
      }
      if (v22) {
        unsigned int v24 = v22;
      }
      else {
        unsigned int v24 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v23, v24);
    }
    char v25 = (int **)*((void *)a2 + 9);
    if (v25)
    {
      unsigned int v26 = (int **)*((void *)this + 9);
      if (!v26)
      {
        unsigned int v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 9) = v26;
        char v25 = (int **)*((void *)a2 + 9);
      }
      if (v25) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
    unsigned int v28 = (int **)*((void *)a2 + 10);
    if (v28)
    {
      char v29 = (int **)*((void *)this + 10);
      if (!v29)
      {
        char v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 10) = v29;
        unsigned int v28 = (int **)*((void *)a2 + 10);
      }
      if (v28) {
        unint64_t v30 = v28;
      }
      else {
        unint64_t v30 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v29, v30);
    }
  }
}

void sub_1C5D1C850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_HeroNumber::CopyFrom(SnippetUI::FactItem_HeroNumber *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_HeroNumber::Clear(this);
    SnippetUI::FactItem_HeroNumber::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_HeroNumber::Clear(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 6) = 0;
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 7) = 0;
  uint64_t v8 = *((void *)this + 8);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 8) = 0;
  uint64_t v9 = *((void *)this + 9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 9) = 0;
  uint64_t v10 = *((void *)this + 10);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  char v12 = *((unsigned char *)this + 8);
  uint64_t v11 = (SnippetUI::FactItem_HeroNumber *)((char *)this + 8);
  *((void *)v11 + 9) = 0;
  if (v12)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v11);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::FactItem_HeroNumber::InternalSerializeWithCachedSizesToArray(SnippetUI::FactItem_HeroNumber *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_) {
    goto LABEL_73;
  }
  uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
    }
    *uint64_t v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        char v12 = v5 + 2;
        do
        {
          char v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *char v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  unint64_t v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  if (!v16) {
    goto LABEL_26;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unint64_t v16 = (SnippetUI::TextProperty *)*((void *)this + 5);
  }
  *uint64_t v5 = 18;
  unsigned int v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    unsigned int v19 = v17 >> 7;
    if (v17 >> 14)
    {
      unint64_t v21 = v5 + 2;
      do
      {
        unint64_t v22 = v21;
        *v21++ = v19 | 0x80;
        unsigned int v23 = v19 >> 7;
        unsigned int v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      BOOL v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *unint64_t v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    uint64_t v18 = 3;
  }
  else
  {
    v5[1] = v17;
    uint64_t v18 = 2;
  }
  BOOL v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  char v25 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
  if (!v25) {
    goto LABEL_38;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    char v25 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
  }
  *uint64_t v5 = 26;
  unsigned int v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    unsigned int v28 = v26 >> 7;
    if (v26 >> 14)
    {
      unint64_t v30 = v5 + 2;
      do
      {
        char v31 = v30;
        *v30++ = v28 | 0x80;
        unsigned int v32 = v28 >> 7;
        unsigned int v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      char v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *unint64_t v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    uint64_t v27 = 3;
  }
  else
  {
    v5[1] = v26;
    uint64_t v27 = 2;
  }
  char v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  uint64_t v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  char v34 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
  if (!v34) {
    goto LABEL_50;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    char v34 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
  }
  *uint64_t v5 = 34;
  unsigned int v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    unsigned int v37 = v35 >> 7;
    if (v35 >> 14)
    {
      std::string::size_type v39 = v5 + 2;
      do
      {
        uint64_t v40 = v39;
        *v39++ = v37 | 0x80;
        unsigned int v41 = v37 >> 7;
        unsigned int v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      int v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      unsigned char *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    uint64_t v36 = 3;
  }
  else
  {
    v5[1] = v35;
    uint64_t v36 = 2;
  }
  int v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  uint64_t v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  uint64_t v43 = (SnippetUI::ActionProperty *)*((void *)this + 8);
  if (!v43) {
    goto LABEL_62;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    uint64_t v43 = (SnippetUI::ActionProperty *)*((void *)this + 8);
  }
  *uint64_t v5 = 42;
  unsigned int v44 = *((_DWORD *)v43 + 12);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    unsigned int v46 = v44 >> 7;
    if (v44 >> 14)
    {
      long long v48 = v5 + 2;
      do
      {
        unsigned __int8 v49 = v48;
        *v48++ = v46 | 0x80;
        unsigned int v50 = v46 >> 7;
        unsigned int v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      BOOL v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *long long v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    uint64_t v45 = 3;
  }
  else
  {
    v5[1] = v44;
    uint64_t v45 = 2;
  }
  BOOL v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  long long v52 = (SnippetUI::TextProperty *)*((void *)this + 9);
  if (v52)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      long long v52 = (SnippetUI::TextProperty *)*((void *)this + 9);
    }
    *uint64_t v5 = 50;
    unsigned int v53 = *((_DWORD *)v52 + 15);
    if (v53 > 0x7F)
    {
      v5[1] = v53 | 0x80;
      unsigned int v55 = v53 >> 7;
      if (v53 >> 14)
      {
        v56 = v5 + 2;
        do
        {
          v57 = v56;
          *v56++ = v55 | 0x80;
          unsigned int v58 = v55 >> 7;
          unsigned int v59 = v55 >> 14;
          v55 >>= 7;
        }
        while (v59);
        uint64_t v54 = (google::protobuf::UnknownFieldSet *)(v57 + 2);
        unsigned char *v56 = v58;
      }
      else
      {
        v5[2] = v55;
        uint64_t v54 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v53;
      uint64_t v54 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v52, v54, a3, a4);
  }
LABEL_73:
  unsigned int v60 = (uint64_t *)*((void *)this + 2);
  if ((*((char *)v60 + 23) & 0x80000000) == 0)
  {
    char v61 = (const char *)*((unsigned __int8 *)v60 + 23);
    if (!*((unsigned char *)v60 + 23)) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  char v61 = (const char *)v60[1];
  if (v61)
  {
    unsigned int v60 = (uint64_t *)*v60;
LABEL_78:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v60, v61, 1, (google::protobuf::internal *)"SnippetUI.FactItem_HeroNumber.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((const void ***)this + 2), v5);
  }
LABEL_79:
  if (this != (SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_)
  {
    unsigned int v62 = (SnippetUI::MultilineTextProperty *)*((void *)this + 10);
    if (v62)
    {
      if ((unint64_t)v5 >= *(void *)a3)
      {
        uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        unsigned int v62 = (SnippetUI::MultilineTextProperty *)*((void *)this + 10);
      }
      *uint64_t v5 = 66;
      unsigned int v63 = *((_DWORD *)v62 + 15);
      if (v63 > 0x7F)
      {
        v5[1] = v63 | 0x80;
        unsigned int v65 = v63 >> 7;
        if (v63 >> 14)
        {
          v66 = v5 + 2;
          do
          {
            unsigned int v67 = v66;
            *v66++ = v65 | 0x80;
            unsigned int v68 = v65 >> 7;
            unsigned int v69 = v65 >> 14;
            v65 >>= 7;
          }
          while (v69);
          unsigned int v64 = (google::protobuf::UnknownFieldSet *)(v67 + 2);
          unsigned char *v66 = v68;
        }
        else
        {
          v5[2] = v65;
          unsigned int v64 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v63;
        unsigned int v64 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      uint64_t v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v62, v64, a3, a4);
    }
  }
  v70 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v70 + 23) < 0)
  {
    char v71 = (const char *)*((void *)v70 + 1);
    if (!v71) {
      goto LABEL_97;
    }
    v70 = *(google::protobuf::internal **)v70;
    goto LABEL_96;
  }
  char v71 = (const char *)*((unsigned __int8 *)v70 + 23);
  if (*((unsigned char *)v70 + 23))
  {
LABEL_96:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v70, v71, 1, (google::protobuf::internal *)"SnippetUI.FactItem_HeroNumber.link_identifier");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((const void ***)this + 3), v5);
  }
LABEL_97:
  uint64_t v72 = *((void *)this + 1);
  if ((v72 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v72 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::FactItem_HeroNumber::_InternalParse(SnippetUI::FactItem_HeroNumber *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unint64_t v21 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  uint64_t v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23))) {
      return v21;
    }
    TagFallback = (google::protobuf::internal *)((char *)v21 + 1);
    unsigned int v10 = (char *)*(unsigned __int8 *)v21;
    if ((*(char *)v21 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_6:
      unint64_t v21 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, v10);
    unint64_t v21 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_45;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 4);
        if (v11) {
          goto LABEL_30;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        goto LABEL_29;
      case 2u:
        if (v10 != 18) {
          goto LABEL_45;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 5);
        if (v11) {
          goto LABEL_30;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v11;
        goto LABEL_29;
      case 3u:
        if (v10 != 26) {
          goto LABEL_45;
        }
        char v12 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
        if (v12) {
          goto LABEL_39;
        }
        char v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 6) = v12;
        goto LABEL_38;
      case 4u:
        if (v10 != 34) {
          goto LABEL_45;
        }
        char v12 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
        if (v12) {
          goto LABEL_39;
        }
        char v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 7) = v12;
        goto LABEL_38;
      case 5u:
        if (v10 != 42) {
          goto LABEL_45;
        }
        char v13 = (SnippetUI::ActionProperty *)*((void *)this + 8);
        if (!v13)
        {
          char v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 8) = v13;
          TagFallback = v21;
        }
        unsigned int v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v13, TagFallback);
        goto LABEL_50;
      case 6u:
        if (v10 != 50) {
          goto LABEL_45;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 9);
        if (v11) {
          goto LABEL_30;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 9) = v11;
LABEL_29:
        TagFallback = v21;
LABEL_30:
        unsigned int v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_50;
      case 7u:
        if (v10 != 58) {
          goto LABEL_45;
        }
        unsigned int v15 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unint64_t v16 = (std::string::value_type *)TagFallback;
        unsigned int v17 = a3;
        uint64_t v18 = "SnippetUI.FactItem_HeroNumber.component_name";
        goto LABEL_44;
      case 8u:
        if (v10 != 66) {
          goto LABEL_45;
        }
        char v12 = (SnippetUI::MultilineTextProperty *)*((void *)this + 10);
        if (v12) {
          goto LABEL_39;
        }
        char v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 10) = v12;
LABEL_38:
        TagFallback = v21;
LABEL_39:
        unsigned int v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_50;
      case 9u:
        if (v10 != 74) {
          goto LABEL_45;
        }
        unsigned int v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unint64_t v16 = (std::string::value_type *)TagFallback;
        unsigned int v17 = a3;
        uint64_t v18 = "SnippetUI.FactItem_HeroNumber.link_identifier";
LABEL_44:
        unsigned int v14 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, v16, (uint64_t)v17, (google::protobuf::internal *)v18);
        goto LABEL_50;
      default:
LABEL_45:
        if (v10) {
          BOOL v19 = (v10 & 7) == 4;
        }
        else {
          BOOL v19 = 1;
        }
        if (v19)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        unsigned int v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_50:
        unint64_t v21 = (google::protobuf::internal *)v14;
        if (v14) {
          continue;
        }
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::FactItem_HeroNumber::GetCachedSize(SnippetUI::FactItem_HeroNumber *this)
{
  return *((unsigned int *)this + 22);
}

char *SnippetUI::FactItem_HeroNumber::ByteSizeLong(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_)
  {
    uint64_t v9 = (SnippetUI::TextProperty *)*((void *)this + 4);
    if (v9)
    {
      unsigned int v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 5);
    if (v11)
    {
      char v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    char v13 = (SnippetUI::MultilineTextProperty *)*((void *)this + 6);
    if (v13)
    {
      unsigned int v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v14[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v15 = (SnippetUI::MultilineTextProperty *)*((void *)this + 7);
    if (v15)
    {
      unint64_t v16 = SnippetUI::MultilineTextProperty::ByteSizeLong(v15);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v16[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v17 = (SnippetUI::ActionProperty *)*((void *)this + 8);
    if (v17)
    {
      uint64_t v18 = SnippetUI::ActionProperty::ByteSizeLong(v17);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v18[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    BOOL v19 = (SnippetUI::TextProperty *)*((void *)this + 9);
    if (v19)
    {
      BOOL v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v20[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unint64_t v21 = (SnippetUI::MultilineTextProperty *)*((void *)this + 10);
    if (v21)
    {
      unint64_t v22 = SnippetUI::MultilineTextProperty::ByteSizeLong(v21);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v22[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::FactItem_HeroNumber *)((char *)this + 8), v5, (_DWORD *)this + 22);
  }
  else
  {
    *((_DWORD *)this + 22) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::FactItem_HeroNumber::IsInitialized(SnippetUI::FactItem_HeroNumber *this)
{
  return 1;
}

SnippetUI::FactItem_HeroNumber *SnippetUI::FactItem_HeroNumber::New(SnippetUI::FactItem_HeroNumber *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_HeroNumber>(a2);
}

SnippetUI::FactItem_HeroNumber *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_HeroNumber>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::FactItem_HeroNumber *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x60uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_HeroNumber>);
  }
  SnippetUI::FactItem_HeroNumber::FactItem_HeroNumber(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D1D660(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C404A70EBA6);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_HeroNumber>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::FactItem_HeroNumber *SnippetUI::FactItem_HeroNumber::New(SnippetUI::FactItem_HeroNumber *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_HeroNumber>(0);
}

void SnippetUI::FactItem_HeroNumber::~FactItem_HeroNumber(SnippetUI::FactItem_HeroNumber *this)
{
  SnippetUI::FactItem_HeroNumber::~FactItem_HeroNumber(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(void *)this = &unk_1F2119E98;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 6);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = *((void *)this + 7);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    unsigned int v10 = *((void *)this + 8);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = *((void *)this + 9);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    char v12 = *((void *)this + 10);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::FactItem_Button::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 112) = a2;
  return this;
}

void SnippetUI::FactItem_Button::MergeFrom(SnippetUI::FactItem_Button *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 2678);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::FactItem_Button::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D1D9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_Button::MergeFrom(SnippetUI::FactItem_Button *this, const SnippetUI::FactItem_Button *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v41, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 2693);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v41, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v40, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v41[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_Button *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_)
  {
    unsigned int v10 = (int **)*((void *)a2 + 4);
    if (v10)
    {
      uint64_t v11 = (int **)*((void *)this + 4);
      if (!v11)
      {
        uint64_t v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        unsigned int v10 = (int **)*((void *)a2 + 4);
      }
      if (v10) {
        char v12 = v10;
      }
      else {
        char v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    char v13 = (const SnippetUI::Button *)*((void *)a2 + 5);
    if (v13)
    {
      unsigned int v14 = (SnippetUI::Button *)*((void *)this + 5);
      if (!v14)
      {
        unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((void *)this + 5) = v14;
        char v13 = (const SnippetUI::Button *)*((void *)a2 + 5);
      }
      if (v13) {
        unsigned int v15 = v13;
      }
      else {
        unsigned int v15 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      }
      SnippetUI::Button::MergeFrom(v14, v15);
    }
    unint64_t v16 = (const SnippetUI::Button *)*((void *)a2 + 6);
    if (v16)
    {
      unsigned int v17 = (SnippetUI::Button *)*((void *)this + 6);
      if (!v17)
      {
        unsigned int v17 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((void *)this + 6) = v17;
        unint64_t v16 = (const SnippetUI::Button *)*((void *)a2 + 6);
      }
      if (v16) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      }
      SnippetUI::Button::MergeFrom(v17, v18);
    }
    BOOL v19 = (const SnippetUI::Button *)*((void *)a2 + 7);
    if (v19)
    {
      BOOL v20 = (SnippetUI::Button *)*((void *)this + 7);
      if (!v20)
      {
        BOOL v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((void *)this + 7) = v20;
        BOOL v19 = (const SnippetUI::Button *)*((void *)a2 + 7);
      }
      if (v19) {
        unint64_t v21 = v19;
      }
      else {
        unint64_t v21 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      }
      SnippetUI::Button::MergeFrom(v20, v21);
    }
    unint64_t v22 = (int **)*((void *)a2 + 8);
    if (v22)
    {
      unsigned int v23 = (int **)*((void *)this + 8);
      if (!v23)
      {
        unsigned int v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 8) = v23;
        unint64_t v22 = (int **)*((void *)a2 + 8);
      }
      if (v22) {
        unsigned int v24 = v22;
      }
      else {
        unsigned int v24 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v23, v24);
    }
    char v25 = (int **)*((void *)a2 + 9);
    if (v25)
    {
      unsigned int v26 = (int **)*((void *)this + 9);
      if (!v26)
      {
        unsigned int v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 9) = v26;
        char v25 = (int **)*((void *)a2 + 9);
      }
      if (v25) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
    unsigned int v28 = (int **)*((void *)a2 + 10);
    if (v28)
    {
      char v29 = (int **)*((void *)this + 10);
      if (!v29)
      {
        char v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((void *)this + 10) = v29;
        unsigned int v28 = (int **)*((void *)a2 + 10);
      }
      if (v28) {
        unint64_t v30 = v28;
      }
      else {
        unint64_t v30 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      }
      SnippetUI::MultilineTextProperty::MergeFrom(v29, v30);
    }
    char v31 = (int **)*((void *)a2 + 11);
    if (v31)
    {
      unsigned int v32 = (int **)*((void *)this + 11);
      if (!v32)
      {
        unsigned int v32 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 11) = v32;
        char v31 = (int **)*((void *)a2 + 11);
      }
      if (v31) {
        unsigned int v33 = v31;
      }
      else {
        unsigned int v33 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v32, v33);
    }
    char v34 = (int **)*((void *)a2 + 12);
    if (v34)
    {
      unsigned int v35 = (int **)*((void *)this + 12);
      if (!v35)
      {
        unsigned int v35 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((void *)this + 12) = v35;
        char v34 = (int **)*((void *)a2 + 12);
      }
      if (v34) {
        uint64_t v36 = v34;
      }
      else {
        uint64_t v36 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      }
      SnippetUI::ActionProperty::MergeFrom(v35, v36);
    }
    unsigned int v37 = (int **)*((void *)a2 + 13);
    if (v37)
    {
      int v38 = (int **)*((void *)this + 13);
      if (!v38)
      {
        int v38 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 13) = v38;
        unsigned int v37 = (int **)*((void *)a2 + 13);
      }
      if (v37) {
        std::string::size_type v39 = v37;
      }
      else {
        std::string::size_type v39 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v38, v39);
    }
  }
}

void sub_1C5D1DCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_Button::CopyFrom(SnippetUI::FactItem_Button *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_Button::Clear(this);
    SnippetUI::FactItem_Button::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_Button::Clear(SnippetUI::FactItem_Button *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 6) = 0;
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 7) = 0;
  uint64_t v8 = *((void *)this + 8);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 8) = 0;
  uint64_t v9 = *((void *)this + 9);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 9) = 0;
  uint64_t v10 = *((void *)this + 10);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 10) = 0;
  uint64_t v11 = *((void *)this + 11);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *((void *)this + 11) = 0;
  uint64_t v12 = *((void *)this + 12);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  *((void *)this + 12) = 0;
  uint64_t v13 = *((void *)this + 13);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  char v15 = *((unsigned char *)this + 8);
  unsigned int v14 = (SnippetUI::FactItem_Button *)((char *)this + 8);
  *((void *)v14 + 12) = 0;
  if (v15)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v14);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::FactItem_Button::InternalSerializeWithCachedSizesToArray(SnippetUI::FactItem_Button *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_) {
    goto LABEL_109;
  }
  uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v7 = (SnippetUI::TextProperty *)*((void *)this + 4);
    }
    *uint64_t v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v12 = v5 + 2;
        do
        {
          uint64_t v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *uint64_t v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  unint64_t v16 = (SnippetUI::Button *)*((void *)this + 5);
  if (!v16) {
    goto LABEL_26;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unint64_t v16 = (SnippetUI::Button *)*((void *)this + 5);
  }
  *uint64_t v5 = 18;
  unsigned int v17 = *((_DWORD *)v16 + 17);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    unsigned int v19 = v17 >> 7;
    if (v17 >> 14)
    {
      unint64_t v21 = v5 + 2;
      do
      {
        unint64_t v22 = v21;
        *v21++ = v19 | 0x80;
        unsigned int v23 = v19 >> 7;
        unsigned int v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      BOOL v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *unint64_t v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    uint64_t v18 = 3;
  }
  else
  {
    v5[1] = v17;
    uint64_t v18 = 2;
  }
  BOOL v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  uint64_t v5 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  char v25 = (SnippetUI::Button *)*((void *)this + 6);
  if (!v25) {
    goto LABEL_38;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    char v25 = (SnippetUI::Button *)*((void *)this + 6);
  }
  *uint64_t v5 = 26;
  unsigned int v26 = *((_DWORD *)v25 + 17);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    unsigned int v28 = v26 >> 7;
    if (v26 >> 14)
    {
      unint64_t v30 = v5 + 2;
      do
      {
        char v31 = v30;
        *v30++ = v28 | 0x80;
        unsigned int v32 = v28 >> 7;
        unsigned int v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      char v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *unint64_t v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    uint64_t v27 = 3;
  }
  else
  {
    v5[1] = v26;
    uint64_t v27 = 2;
  }
  char v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  uint64_t v5 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  char v34 = (SnippetUI::Button *)*((void *)this + 7);
  if (!v34) {
    goto LABEL_50;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    char v34 = (SnippetUI::Button *)*((void *)this + 7);
  }
  *uint64_t v5 = 34;
  unsigned int v35 = *((_DWORD *)v34 + 17);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    unsigned int v37 = v35 >> 7;
    if (v35 >> 14)
    {
      std::string::size_type v39 = v5 + 2;
      do
      {
        char v40 = v39;
        *v39++ = v37 | 0x80;
        unsigned int v41 = v37 >> 7;
        unsigned int v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      int v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      unsigned char *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    uint64_t v36 = 3;
  }
  else
  {
    v5[1] = v35;
    uint64_t v36 = 2;
  }
  int v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  uint64_t v5 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  uint64_t v43 = (SnippetUI::TextProperty *)*((void *)this + 8);
  if (!v43) {
    goto LABEL_62;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    uint64_t v43 = (SnippetUI::TextProperty *)*((void *)this + 8);
  }
  *uint64_t v5 = 42;
  unsigned int v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    unsigned int v46 = v44 >> 7;
    if (v44 >> 14)
    {
      long long v48 = v5 + 2;
      do
      {
        unsigned __int8 v49 = v48;
        *v48++ = v46 | 0x80;
        unsigned int v50 = v46 >> 7;
        unsigned int v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      BOOL v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *long long v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    uint64_t v45 = 3;
  }
  else
  {
    v5[1] = v44;
    uint64_t v45 = 2;
  }
  BOOL v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  long long v52 = (SnippetUI::TextProperty *)*((void *)this + 9);
  if (!v52) {
    goto LABEL_74;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    long long v52 = (SnippetUI::TextProperty *)*((void *)this + 9);
  }
  *uint64_t v5 = 50;
  unsigned int v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    unsigned int v55 = v53 >> 7;
    if (v53 >> 14)
    {
      v57 = v5 + 2;
      do
      {
        unsigned int v58 = v57;
        *v57++ = v55 | 0x80;
        unsigned int v59 = v55 >> 7;
        unsigned int v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      unsigned char *v57 = v59;
      goto LABEL_73;
    }
    v5[2] = v55;
    uint64_t v54 = 3;
  }
  else
  {
    v5[1] = v53;
    uint64_t v54 = 2;
  }
  v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  char v61 = (SnippetUI::MultilineTextProperty *)*((void *)this + 10);
  if (!v61) {
    goto LABEL_86;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    char v61 = (SnippetUI::MultilineTextProperty *)*((void *)this + 10);
  }
  *uint64_t v5 = 58;
  unsigned int v62 = *((_DWORD *)v61 + 15);
  if (v62 > 0x7F)
  {
    v5[1] = v62 | 0x80;
    unsigned int v64 = v62 >> 7;
    if (v62 >> 14)
    {
      v66 = v5 + 2;
      do
      {
        unsigned int v67 = v66;
        *v66++ = v64 | 0x80;
        unsigned int v68 = v64 >> 7;
        unsigned int v69 = v64 >> 14;
        v64 >>= 7;
      }
      while (v69);
      unsigned int v65 = (google::protobuf::UnknownFieldSet *)(v67 + 2);
      unsigned char *v66 = v68;
      goto LABEL_85;
    }
    v5[2] = v64;
    uint64_t v63 = 3;
  }
  else
  {
    v5[1] = v62;
    uint64_t v63 = 2;
  }
  unsigned int v65 = (google::protobuf::UnknownFieldSet *)&v5[v63];
LABEL_85:
  uint64_t v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v61, v65, a3, a4);
LABEL_86:
  v70 = (SnippetUI::VisualProperty *)*((void *)this + 11);
  if (!v70) {
    goto LABEL_98;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v70 = (SnippetUI::VisualProperty *)*((void *)this + 11);
  }
  *uint64_t v5 = 66;
  unsigned int v71 = *((_DWORD *)v70 + 15);
  if (v71 > 0x7F)
  {
    v5[1] = v71 | 0x80;
    unsigned int v73 = v71 >> 7;
    if (v71 >> 14)
    {
      v75 = v5 + 2;
      do
      {
        std::string v76 = v75;
        *v75++ = v73 | 0x80;
        unsigned int v77 = v73 >> 7;
        unsigned int v78 = v73 >> 14;
        v73 >>= 7;
      }
      while (v78);
      unsigned int v74 = (google::protobuf::UnknownFieldSet *)(v76 + 2);
      unsigned char *v75 = v77;
      goto LABEL_97;
    }
    v5[2] = v73;
    uint64_t v72 = 3;
  }
  else
  {
    v5[1] = v71;
    uint64_t v72 = 2;
  }
  unsigned int v74 = (google::protobuf::UnknownFieldSet *)&v5[v72];
LABEL_97:
  uint64_t v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v70, v74, a3, a4);
LABEL_98:
  std::string v79 = (SnippetUI::ActionProperty *)*((void *)this + 12);
  if (v79)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      std::string v79 = (SnippetUI::ActionProperty *)*((void *)this + 12);
    }
    *uint64_t v5 = 74;
    unsigned int v80 = *((_DWORD *)v79 + 12);
    if (v80 > 0x7F)
    {
      v5[1] = v80 | 0x80;
      unsigned int v82 = v80 >> 7;
      if (v80 >> 14)
      {
        uint64_t v83 = v5 + 2;
        do
        {
          uint64_t v84 = v83;
          *v83++ = v82 | 0x80;
          unsigned int v85 = v82 >> 7;
          unsigned int v86 = v82 >> 14;
          v82 >>= 7;
        }
        while (v86);
        uint64_t v81 = (google::protobuf::UnknownFieldSet *)(v84 + 2);
        *uint64_t v83 = v85;
      }
      else
      {
        v5[2] = v82;
        uint64_t v81 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v80;
      uint64_t v81 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v79, v81, a3, a4);
  }
LABEL_109:
  uint64_t v87 = (uint64_t *)*((void *)this + 2);
  if ((*((char *)v87 + 23) & 0x80000000) == 0)
  {
    v88 = (const char *)*((unsigned __int8 *)v87 + 23);
    if (!*((unsigned char *)v87 + 23)) {
      goto LABEL_115;
    }
    goto LABEL_114;
  }
  v88 = (const char *)v87[1];
  if (v88)
  {
    uint64_t v87 = (uint64_t *)*v87;
LABEL_114:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v87, v88, 1, (google::protobuf::internal *)"SnippetUI.FactItem_Button.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 10, *((const void ***)this + 2), v5);
  }
LABEL_115:
  if (this != (SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_)
  {
    v89 = (SnippetUI::TextProperty *)*((void *)this + 13);
    if (v89)
    {
      if ((unint64_t)v5 >= *(void *)a3)
      {
        uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v89 = (SnippetUI::TextProperty *)*((void *)this + 13);
      }
      *uint64_t v5 = 90;
      unsigned int v90 = *((_DWORD *)v89 + 15);
      if (v90 > 0x7F)
      {
        v5[1] = v90 | 0x80;
        unsigned int v92 = v90 >> 7;
        if (v90 >> 14)
        {
          uint64_t v93 = v5 + 2;
          do
          {
            uint64_t v94 = v93;
            *v93++ = v92 | 0x80;
            unsigned int v95 = v92 >> 7;
            unsigned int v96 = v92 >> 14;
            v92 >>= 7;
          }
          while (v96);
          v91 = (google::protobuf::UnknownFieldSet *)(v94 + 2);
          *uint64_t v93 = v95;
        }
        else
        {
          v5[2] = v92;
          v91 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v90;
        v91 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v89, v91, a3, a4);
    }
  }
  v97 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v97 + 23) < 0)
  {
    v98 = (const char *)*((void *)v97 + 1);
    if (!v98) {
      goto LABEL_133;
    }
    v97 = *(google::protobuf::internal **)v97;
    goto LABEL_132;
  }
  v98 = (const char *)*((unsigned __int8 *)v97 + 23);
  if (*((unsigned char *)v97 + 23))
  {
LABEL_132:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v97, v98, 1, (google::protobuf::internal *)"SnippetUI.FactItem_Button.link_identifier");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 12, *((const void ***)this + 3), v5);
  }
LABEL_133:
  uint64_t v99 = *((void *)this + 1);
  if ((v99 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v99 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::FactItem_Button::_InternalParse(SnippetUI::FactItem_Button *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v23 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  uint64_t v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23))) {
      return v23;
    }
    TagFallback = (google::protobuf::internal *)((char *)v23 + 1);
    unsigned int v10 = (char *)*(unsigned __int8 *)v23;
    if ((*(char *)v23 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
      unsigned int v23 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, v10);
    unsigned int v23 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_56;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 4);
        if (v11) {
          goto LABEL_50;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v11;
        goto LABEL_49;
      case 2u:
        if (v10 != 18) {
          goto LABEL_56;
        }
        uint64_t v12 = (SnippetUI::Button *)*((void *)this + 5);
        if (v12) {
          goto LABEL_23;
        }
        uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((void *)this + 5) = v12;
        goto LABEL_22;
      case 3u:
        if (v10 != 26) {
          goto LABEL_56;
        }
        uint64_t v12 = (SnippetUI::Button *)*((void *)this + 6);
        if (v12) {
          goto LABEL_23;
        }
        uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((void *)this + 6) = v12;
        goto LABEL_22;
      case 4u:
        if (v10 != 34) {
          goto LABEL_56;
        }
        uint64_t v12 = (SnippetUI::Button *)*((void *)this + 7);
        if (v12) {
          goto LABEL_23;
        }
        uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((void *)this + 7) = v12;
LABEL_22:
        TagFallback = v23;
LABEL_23:
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Button>(a3, v12, TagFallback);
        goto LABEL_61;
      case 5u:
        if (v10 != 42) {
          goto LABEL_56;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 8);
        if (v11) {
          goto LABEL_50;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 8) = v11;
        goto LABEL_49;
      case 6u:
        if (v10 != 50) {
          goto LABEL_56;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 9);
        if (v11) {
          goto LABEL_50;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 9) = v11;
        goto LABEL_49;
      case 7u:
        if (v10 != 58) {
          goto LABEL_56;
        }
        unsigned int v14 = (SnippetUI::MultilineTextProperty *)*((void *)this + 10);
        if (!v14)
        {
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
          *((void *)this + 10) = v14;
          TagFallback = v23;
        }
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v14, TagFallback);
        goto LABEL_61;
      case 8u:
        if (v10 != 66) {
          goto LABEL_56;
        }
        unsigned int v15 = (SnippetUI::VisualProperty *)*((void *)this + 11);
        if (!v15)
        {
          unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((void *)this + 11) = v15;
          TagFallback = v23;
        }
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v15, TagFallback);
        goto LABEL_61;
      case 9u:
        if (v10 != 74) {
          goto LABEL_56;
        }
        unint64_t v16 = (SnippetUI::ActionProperty *)*((void *)this + 12);
        if (!v16)
        {
          unint64_t v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((void *)this + 12) = v16;
          TagFallback = v23;
        }
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v16, TagFallback);
        goto LABEL_61;
      case 0xAu:
        if (v10 != 82) {
          goto LABEL_56;
        }
        unsigned int v17 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v18 = (std::string::value_type *)TagFallback;
        unsigned int v19 = a3;
        BOOL v20 = "SnippetUI.FactItem_Button.component_name";
        goto LABEL_55;
      case 0xBu:
        if (v10 != 90) {
          goto LABEL_56;
        }
        uint64_t v11 = (SnippetUI::TextProperty *)*((void *)this + 13);
        if (v11) {
          goto LABEL_50;
        }
        uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 13) = v11;
LABEL_49:
        TagFallback = v23;
LABEL_50:
        uint64_t v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_61;
      case 0xCu:
        if (v10 != 98) {
          goto LABEL_56;
        }
        unsigned int v17 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v18 = (std::string::value_type *)TagFallback;
        unsigned int v19 = a3;
        BOOL v20 = "SnippetUI.FactItem_Button.link_identifier";
LABEL_55:
        uint64_t v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v17, v18, (uint64_t)v19, (google::protobuf::internal *)v20);
        goto LABEL_61;
      default:
LABEL_56:
        if (v10) {
          BOOL v21 = (v10 & 7) == 4;
        }
        else {
          BOOL v21 = 1;
        }
        if (v21)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        uint64_t v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_61:
        unsigned int v23 = (google::protobuf::internal *)v13;
        if (v13) {
          continue;
        }
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Button>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::Button *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  uint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    double result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  double result = (char *)SnippetUI::Button::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t SnippetUI::FactItem_Button::GetCachedSize(SnippetUI::FactItem_Button *this)
{
  return *((unsigned int *)this + 28);
}

char *SnippetUI::FactItem_Button::ByteSizeLong(SnippetUI::FactItem_Button *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_)
  {
    uint64_t v9 = (SnippetUI::TextProperty *)*((void *)this + 4);
    if (v9)
    {
      int v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    int v11 = (SnippetUI::Button *)*((void *)this + 5);
    if (v11)
    {
      int v12 = SnippetUI::Button::ByteSizeLong(v11);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    BOOL v13 = (SnippetUI::Button *)*((void *)this + 6);
    if (v13)
    {
      int v14 = SnippetUI::Button::ByteSizeLong(v13);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v14[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    int v15 = (SnippetUI::Button *)*((void *)this + 7);
    if (v15)
    {
      unint64_t v16 = SnippetUI::Button::ByteSizeLong(v15);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v16[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v17 = (SnippetUI::TextProperty *)*((void *)this + 8);
    if (v17)
    {
      uint64_t v18 = SnippetUI::TextProperty::ByteSizeLong(v17);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v18[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v19 = (SnippetUI::TextProperty *)*((void *)this + 9);
    if (v19)
    {
      BOOL v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v20[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    BOOL v21 = (SnippetUI::MultilineTextProperty *)*((void *)this + 10);
    if (v21)
    {
      unint64_t v22 = SnippetUI::MultilineTextProperty::ByteSizeLong(v21);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v22[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v23 = (SnippetUI::VisualProperty *)*((void *)this + 11);
    if (v23)
    {
      unsigned int v24 = SnippetUI::VisualProperty::ByteSizeLong(v23);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v24[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6)];
    }
    char v25 = (SnippetUI::ActionProperty *)*((void *)this + 12);
    if (v25)
    {
      unsigned int v26 = SnippetUI::ActionProperty::ByteSizeLong(v25);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v26[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v27 = (SnippetUI::TextProperty *)*((void *)this + 13);
    if (v27)
    {
      unsigned int v28 = SnippetUI::TextProperty::ByteSizeLong(v27);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v28[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::FactItem_Button *)((char *)this + 8), v5, (_DWORD *)this + 28);
  }
  else
  {
    *((_DWORD *)this + 28) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::FactItem_Button::IsInitialized(SnippetUI::FactItem_Button *this)
{
  return 1;
}

SnippetUI::FactItem_Button *SnippetUI::FactItem_Button::New(SnippetUI::FactItem_Button *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Button>(a2);
}

SnippetUI::FactItem_Button *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Button>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::FactItem_Button *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x78uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_Button>);
  }
  SnippetUI::FactItem_Button::FactItem_Button(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D1EF60(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40E3061A4BLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_Button>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::FactItem_Button *SnippetUI::FactItem_Button::New(SnippetUI::FactItem_Button *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Button>(0);
}

void SnippetUI::FactItem_Button::~FactItem_Button(SnippetUI::FactItem_Button *this)
{
  SnippetUI::FactItem_Button::~FactItem_Button(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(void *)this = &unk_1F2119F58;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 6);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = *((void *)this + 7);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    int v10 = *((void *)this + 8);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    int v11 = *((void *)this + 9);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    int v12 = *((void *)this + 10);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    BOOL v13 = *((void *)this + 11);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    int v14 = *((void *)this + 12);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    int v15 = *((void *)this + 13);
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::FactItem_Standard::InitAsDefaultInstance(SnippetUI::FactItem_Standard *this)
{
  qword_1EB690AD8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690AE0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB690AE8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690AF0 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1EB690AF8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690B00 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EB690B08 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::FactItem_Standard::_Internal::text_1(SnippetUI::FactItem_Standard::_Internal *this, const SnippetUI::FactItem_Standard *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::FactItem_Standard::_Internal::text_2(SnippetUI::FactItem_Standard::_Internal *this, const SnippetUI::FactItem_Standard *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::FactItem_Standard::_Internal::text_3(SnippetUI::FactItem_Standard::_Internal *this, const SnippetUI::FactItem_Standard *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::FactItem_Standard::_Internal::text_4(SnippetUI::FactItem_Standard::_Internal *this, const SnippetUI::FactItem_Standard *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::FactItem_Standard::_Internal::text_5(SnippetUI::FactItem_Standard::_Internal *this, const SnippetUI::FactItem_Standard *a2)
{
  return *((void *)this + 8);
}

uint64_t SnippetUI::FactItem_Standard::_Internal::thumbnail(SnippetUI::FactItem_Standard::_Internal *this, const SnippetUI::FactItem_Standard *a2)
{
  return *((void *)this + 9);
}

uint64_t SnippetUI::FactItem_Standard::_Internal::action(SnippetUI::FactItem_Standard::_Internal *this, const SnippetUI::FactItem_Standard *a2)
{
  return *((void *)this + 10);
}

uint64_t SnippetUI::FactItem_Standard::clear_text_1(SnippetUI::FactItem_Standard *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Standard::clear_text_2(SnippetUI::FactItem_Standard *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Standard::clear_text_3(SnippetUI::FactItem_Standard *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Standard::clear_text_4(SnippetUI::FactItem_Standard *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Standard::clear_text_5(SnippetUI::FactItem_Standard *this)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Standard::clear_thumbnail(SnippetUI::FactItem_Standard *this)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Standard::clear_action(SnippetUI::FactItem_Standard *this)
{
  uint64_t result = *((void *)this + 10);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 10) = 0;
  return result;
}

SnippetUI::FactItem_Standard *SnippetUI::FactItem_Standard::FactItem_Standard(SnippetUI::FactItem_Standard *this, const SnippetUI::FactItem_Standard *a2)
{
  *(void *)this = &unk_1F2119D18;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (a2 == (const SnippetUI::FactItem_Standard *)&SnippetUI::_FactItem_Standard_default_instance_)
  {
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 2) = 0u;
  }
  else
  {
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
    *((void *)this + 6) = 0;
    if (*((void *)a2 + 7)) {
      operator new();
    }
    *((void *)this + 7) = 0;
    if (*((void *)a2 + 8)) {
      operator new();
    }
    *((void *)this + 8) = 0;
    if (*((void *)a2 + 9)) {
      operator new();
    }
    *((void *)this + 9) = 0;
    if (*((void *)a2 + 10)) {
      operator new();
    }
  }
  *((void *)this + 10) = 0;
  return this;
}

void sub_1C5D1F7A4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::FactItem_Standard::default_instance(SnippetUI::FactItem_Standard *this)
{
  if (atomic_load_explicit(scc_info_FactItem_Standard_FactItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_Standard_FactItem_2eproto);
  }
  return &SnippetUI::_FactItem_Standard_default_instance_;
}

void SnippetUI::FactItem_Standard::CopyFrom(SnippetUI::FactItem_Standard *this, const SnippetUI::FactItem_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_Standard::Clear(this);
    SnippetUI::FactItem_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_Standard::InternalSwap(SnippetUI::FactItem_Standard *this, SnippetUI::FactItem_Standard *a2)
{
  uint64_t v4 = (SnippetUI::FactItem_Standard *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v26;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  BOOL v13 = (uint64_t *)*((void *)this + 3);
  int v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    BOOL v13 = (uint64_t *)*((void *)this + 3);
  }
  int v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)BOOL v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)int v15 = v17;
  v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  uint64_t v21 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v21;
  uint64_t v22 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v22;
  uint64_t v23 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v23;
  uint64_t v24 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v24;
  uint64_t v25 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v25;
}

void SnippetUI::FactItem_ShortNumber::InitAsDefaultInstance(SnippetUI::FactItem_ShortNumber *this)
{
  qword_1EB690CB8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690CC0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB690CC8 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB690CD0 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1EB690CD8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB690CE0 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EB690CE8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB690CF0 = &SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::number(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::text_1(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::text_2(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::text_3(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::unit(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((void *)this + 8);
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::thumbnail(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((void *)this + 9);
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::action(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((void *)this + 10);
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::text_4(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((void *)this + 11);
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_number(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_text_1(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_text_2(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_text_3(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_unit(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_thumbnail(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_action(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result = *((void *)this + 10);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_text_4(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result = *((void *)this + 11);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 11) = 0;
  return result;
}

SnippetUI::FactItem_ShortNumber *SnippetUI::FactItem_ShortNumber::FactItem_ShortNumber(SnippetUI::FactItem_ShortNumber *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  *(void *)this = &unk_1F2119DD8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 24) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_ShortNumber *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (a2 == (const SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_)
  {
    *((void *)this + 10) = 0;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 2) = 0u;
  }
  else
  {
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
    *((void *)this + 6) = 0;
    if (*((void *)a2 + 7)) {
      operator new();
    }
    *((void *)this + 7) = 0;
    if (*((void *)a2 + 8)) {
      operator new();
    }
    *((void *)this + 8) = 0;
    if (*((void *)a2 + 9)) {
      operator new();
    }
    *((void *)this + 9) = 0;
    if (*((void *)a2 + 10)) {
      operator new();
    }
    *((void *)this + 10) = 0;
    if (*((void *)a2 + 11)) {
      operator new();
    }
  }
  *((void *)this + 11) = 0;
  return this;
}

void sub_1C5D2002C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::FactItem_ShortNumber::default_instance(SnippetUI::FactItem_ShortNumber *this)
{
  if (atomic_load_explicit(scc_info_FactItem_ShortNumber_FactItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_ShortNumber_FactItem_2eproto);
  }
  return &SnippetUI::_FactItem_ShortNumber_default_instance_;
}

void SnippetUI::FactItem_ShortNumber::CopyFrom(SnippetUI::FactItem_ShortNumber *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_ShortNumber::Clear(this);
    SnippetUI::FactItem_ShortNumber::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_ShortNumber::InternalSwap(SnippetUI::FactItem_ShortNumber *this, SnippetUI::FactItem_ShortNumber *a2)
{
  uint64_t v4 = (SnippetUI::FactItem_ShortNumber *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v27;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  BOOL v13 = (uint64_t *)*((void *)this + 3);
  int v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    BOOL v13 = (uint64_t *)*((void *)this + 3);
  }
  int v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)BOOL v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)int v15 = v17;
  v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  uint64_t v21 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v21;
  uint64_t v22 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v22;
  uint64_t v23 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v23;
  uint64_t v24 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v24;
  uint64_t v25 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v25;
  uint64_t v26 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v26;
}

void SnippetUI::FactItem_HeroNumber::InitAsDefaultInstance(SnippetUI::FactItem_HeroNumber *this)
{
  qword_1EB68FDC0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68FDC8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68FDD0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB68FDD8 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1EB68FDE0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB68FDE8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68FDF0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
}

uint64_t SnippetUI::FactItem_HeroNumber::_Internal::number(SnippetUI::FactItem_HeroNumber::_Internal *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::FactItem_HeroNumber::_Internal::text_1(SnippetUI::FactItem_HeroNumber::_Internal *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::FactItem_HeroNumber::_Internal::text_2(SnippetUI::FactItem_HeroNumber::_Internal *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::FactItem_HeroNumber::_Internal::text_3(SnippetUI::FactItem_HeroNumber::_Internal *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::FactItem_HeroNumber::_Internal::action(SnippetUI::FactItem_HeroNumber::_Internal *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  return *((void *)this + 8);
}

uint64_t SnippetUI::FactItem_HeroNumber::_Internal::text_4(SnippetUI::FactItem_HeroNumber::_Internal *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  return *((void *)this + 9);
}

uint64_t SnippetUI::FactItem_HeroNumber::_Internal::text_5(SnippetUI::FactItem_HeroNumber::_Internal *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  return *((void *)this + 10);
}

uint64_t SnippetUI::FactItem_HeroNumber::clear_number(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_HeroNumber::clear_text_1(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_HeroNumber::clear_text_2(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_HeroNumber::clear_text_3(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_HeroNumber::clear_action(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_HeroNumber::clear_text_4(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_HeroNumber::clear_text_5(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t result = *((void *)this + 10);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 10) = 0;
  return result;
}

SnippetUI::FactItem_HeroNumber *SnippetUI::FactItem_HeroNumber::FactItem_HeroNumber(SnippetUI::FactItem_HeroNumber *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  *(void *)this = &unk_1F2119E98;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_HeroNumber *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (a2 == (const SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_)
  {
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 2) = 0u;
  }
  else
  {
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
    *((void *)this + 6) = 0;
    if (*((void *)a2 + 7)) {
      operator new();
    }
    *((void *)this + 7) = 0;
    if (*((void *)a2 + 8)) {
      operator new();
    }
    *((void *)this + 8) = 0;
    if (*((void *)a2 + 9)) {
      operator new();
    }
    *((void *)this + 9) = 0;
    if (*((void *)a2 + 10)) {
      operator new();
    }
  }
  *((void *)this + 10) = 0;
  return this;
}

void sub_1C5D2082C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::FactItem_HeroNumber::default_instance(SnippetUI::FactItem_HeroNumber *this)
{
  if (atomic_load_explicit(scc_info_FactItem_HeroNumber_FactItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_HeroNumber_FactItem_2eproto);
  }
  return &SnippetUI::_FactItem_HeroNumber_default_instance_;
}

void SnippetUI::FactItem_HeroNumber::CopyFrom(SnippetUI::FactItem_HeroNumber *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_HeroNumber::Clear(this);
    SnippetUI::FactItem_HeroNumber::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_HeroNumber::InternalSwap(SnippetUI::FactItem_HeroNumber *this, SnippetUI::FactItem_HeroNumber *a2)
{
  uint64_t v4 = (SnippetUI::FactItem_HeroNumber *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v26;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  BOOL v13 = (uint64_t *)*((void *)this + 3);
  int v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    BOOL v13 = (uint64_t *)*((void *)this + 3);
  }
  int v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)BOOL v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)int v15 = v17;
  v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  uint64_t v21 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v21;
  uint64_t v22 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v22;
  uint64_t v23 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v23;
  uint64_t v24 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v24;
  uint64_t v25 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v25;
}

void SnippetUI::FactItem_Button::InitAsDefaultInstance(SnippetUI::FactItem_Button *this)
{
  qword_1EB68F7F8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68F800 = &SnippetUI::_Button_default_instance_;
  qword_1EB68F808 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1EB68F810 = &SnippetUI::_Button_default_instance_;
  qword_1EB68F818 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68F820 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68F828 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EB68F830 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EB68F838 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EB68F840 = &SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::FactItem_Button::_Internal::text_1(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::FactItem_Button::_Internal::button_1(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::FactItem_Button::_Internal::button_2(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::FactItem_Button::_Internal::button_3(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::FactItem_Button::_Internal::text_2(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((void *)this + 8);
}

uint64_t SnippetUI::FactItem_Button::_Internal::text_3(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((void *)this + 9);
}

uint64_t SnippetUI::FactItem_Button::_Internal::text_4(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((void *)this + 10);
}

uint64_t SnippetUI::FactItem_Button::_Internal::thumbnail(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((void *)this + 11);
}

uint64_t SnippetUI::FactItem_Button::_Internal::action(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((void *)this + 12);
}

uint64_t SnippetUI::FactItem_Button::_Internal::text_5(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((void *)this + 13);
}

uint64_t SnippetUI::FactItem_Button::clear_text_1(SnippetUI::FactItem_Button *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_button_1(SnippetUI::FactItem_Button *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_button_2(SnippetUI::FactItem_Button *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_button_3(SnippetUI::FactItem_Button *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_text_2(SnippetUI::FactItem_Button *this)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_text_3(SnippetUI::FactItem_Button *this)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_text_4(SnippetUI::FactItem_Button *this)
{
  uint64_t result = *((void *)this + 10);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_thumbnail(SnippetUI::FactItem_Button *this)
{
  uint64_t result = *((void *)this + 11);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 11) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_action(SnippetUI::FactItem_Button *this)
{
  uint64_t result = *((void *)this + 12);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 12) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_text_5(SnippetUI::FactItem_Button *this)
{
  uint64_t result = *((void *)this + 13);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 13) = 0;
  return result;
}

SnippetUI::FactItem_Button *SnippetUI::FactItem_Button::FactItem_Button(SnippetUI::FactItem_Button *this, const SnippetUI::FactItem_Button *a2)
{
  *(void *)this = &unk_1F2119F58;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_Button *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (a2 == (const SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_)
  {
    *((void *)this + 12) = 0;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
    *((void *)this + 6) = 0;
    if (*((void *)a2 + 7)) {
      operator new();
    }
    *((void *)this + 7) = 0;
    if (*((void *)a2 + 8)) {
      operator new();
    }
    *((void *)this + 8) = 0;
    if (*((void *)a2 + 9)) {
      operator new();
    }
    *((void *)this + 9) = 0;
    if (*((void *)a2 + 10)) {
      operator new();
    }
    *((void *)this + 10) = 0;
    if (*((void *)a2 + 11)) {
      operator new();
    }
    *((void *)this + 11) = 0;
    if (*((void *)a2 + 12)) {
      operator new();
    }
    *((void *)this + 12) = 0;
    if (*((void *)a2 + 13)) {
      operator new();
    }
  }
  *((void *)this + 13) = 0;
  return this;
}

void sub_1C5D211E0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::FactItem_Button::default_instance(SnippetUI::FactItem_Button *this)
{
  if (atomic_load_explicit(scc_info_FactItem_Button_FactItem_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_Button_FactItem_2eproto);
  }
  return &SnippetUI::_FactItem_Button_default_instance_;
}

void SnippetUI::FactItem_Button::CopyFrom(SnippetUI::FactItem_Button *this, const SnippetUI::FactItem_Button *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_Button::Clear(this);
    SnippetUI::FactItem_Button::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_Button::InternalSwap(SnippetUI::FactItem_Button *this, SnippetUI::FactItem_Button *a2)
{
  uint64_t v4 = (SnippetUI::FactItem_Button *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v29;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  v9[2] = v10;
LABEL_13:
  BOOL v13 = (uint64_t *)*((void *)this + 3);
  int v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    BOOL v13 = (uint64_t *)*((void *)this + 3);
  }
  int v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)BOOL v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)int v15 = v17;
  v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  uint64_t v21 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v21;
  uint64_t v22 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v22;
  uint64_t v23 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v23;
  uint64_t v24 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v24;
  uint64_t v25 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v25;
  uint64_t v26 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v26;
  uint64_t v27 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v27;
  uint64_t v28 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v28;
}

uint64_t non-virtual thunk to'siri::dialogengine::Node::Validate(siri::dialogengine::Node *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::Node::Validate((siri::dialogengine::Node *)((char *)this - 64), a2);
}

uint64_t siri::dialogengine::Node::Validate(siri::dialogengine::Node *this, siri::dialogengine::Context *a2)
{
  uint64_t v4 = (_OWORD *)((char *)this + 96);
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)this + 12), *((void *)this + 13));
  }
  else
  {
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *v4;
    v16.__r_.__value_.__r.__words[2] = *((void *)this + 14);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "#");
  int v5 = siri::dialogengine::StringContains(&v16.__r_.__value_.__l.__data_, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    if (!v5) {
      goto LABEL_19;
    }
  }
  else if (!v5)
  {
    goto LABEL_19;
  }
  if (*((char *)this + 119) < 0) {
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)this + 12), *((void *)this + 13));
  }
  else {
    std::string v14 = *(std::string *)v4;
  }
  uint64_t v6 = std::string::insert(&v14, 0, "Node ID contains the invalid character '#': '");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&__p, "'");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v16, (uint64_t)this);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
LABEL_19:
  uint64_t v10 = v5 ^ 1u;
  siri::dialogengine::Node::GetCondition(this, a2, &v14);
  if (v14.__r_.__value_.__r.__words[0])
  {
    uint64_t v10 = (*(unsigned int (**)(std::string::size_type, siri::dialogengine::Context *))(*(void *)v14.__r_.__value_.__l.__data_
                                                                                                + 16))(v14.__r_.__value_.__r.__words[0], a2) & v10;
    goto LABEL_30;
  }
  if (*((char *)this + 143) < 0)
  {
    if (!*((void *)this + 16)) {
      goto LABEL_30;
    }
  }
  else if (!*((unsigned char *)this + 143))
  {
    goto LABEL_30;
  }
  std::operator+<char>();
  long long v11 = std::string::append(&__p, "'");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v16, (uint64_t)this);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = 0;
LABEL_30:
  if (v14.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v14.__r_.__value_.__l.__size_);
  }
  return v10;
}

void sub_1C5D21750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Node::GetCondition(siri::dialogengine::Node *this@<X0>, siri::dialogengine::Context *a2@<X1>, void *a3@<X8>)
{
  if (*((char *)this + 143) < 0)
  {
    uint64_t v6 = *((void *)this + 16);
    if (!a2) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v6 = *((unsigned __int8 *)this + 143);
    if (!a2) {
      goto LABEL_22;
    }
  }
  if (!v6) {
    goto LABEL_22;
  }
  uint64_t v8 = *((void *)a2 + 63);
  long long v7 = (std::__shared_weak_count *)*((void *)a2 + 64);
  if (!v7)
  {
    if (v8)
    {
      uint64_t v9 = *((void *)a2 + 63);
      BOOL v10 = 1;
      goto LABEL_12;
    }
LABEL_22:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  if (!v8) {
    goto LABEL_22;
  }
  uint64_t v9 = *((void *)a2 + 63);
  long long v7 = (std::__shared_weak_count *)*((void *)a2 + 64);
  BOOL v10 = v7 == 0;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_12:
  long long v11 = (const void **)((char *)this + 120);
  uint64_t v12 = std::__tree<std::string>::find<std::string>(v9 + 272, v11);
  if (v9 + 280 == v12)
  {
    long long v17 = 0u;
    if (!v10) {
LABEL_16:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
    long long v13 = *(_OWORD *)(v12 + 56);
    long long v17 = v13;
    if (*((void *)&v13 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    if (!v10) {
      goto LABEL_16;
    }
  }
  if ((void)v17)
  {
    *(_OWORD *)a3 = v17;
    return;
  }
  siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)v11, 1, (uint64_t)__s1);
  std::string v14 = (void *)strlen(siri::dialogengine::TYPE_UNKNOWN);
  if ((char)v19 < 0)
  {
    if (v14 == __s1[1])
    {
      if (v14 == (void *)-1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      int v15 = __s1[0];
      int v16 = memcmp(__s1[0], siri::dialogengine::TYPE_UNKNOWN, (size_t)v14);
      operator delete(v15);
      if (!v16) {
        goto LABEL_28;
      }
    }
    else
    {
      operator delete(__s1[0]);
    }
LABEL_31:
    operator new();
  }
  if (v14 != (void *)v19 || memcmp(__s1, siri::dialogengine::TYPE_UNKNOWN, (size_t)v14)) {
    goto LABEL_31;
  }
LABEL_28:
  *a3 = 0;
  a3[1] = 0;
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
}

void sub_1C5D21B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (*((void *)&a9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&a9 + 1));
  }
  _Unwind_Resume(a1);
}

void std::shared_ptr<siri::dialogengine::Condition>::shared_ptr[abi:ne180100]<siri::dialogengine::Condition,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5D21C50(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<siri::dialogengine::ConditionEntry>::shared_ptr[abi:ne180100]<siri::dialogengine::ConditionExpression,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5D21CF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ConditionExpression *,std::shared_ptr<siri::dialogengine::ConditionEntry>::__shared_ptr_default_delete<siri::dialogengine::ConditionEntry,siri::dialogengine::ConditionExpression>,std::allocator<siri::dialogengine::ConditionExpression>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ConditionExpression *,std::shared_ptr<siri::dialogengine::ConditionEntry>::__shared_ptr_default_delete<siri::dialogengine::ConditionEntry,siri::dialogengine::ConditionExpression>,std::allocator<siri::dialogengine::ConditionExpression>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::ConditionExpression *,std::shared_ptr<siri::dialogengine::ConditionEntry>::__shared_ptr_default_delete<siri::dialogengine::ConditionEntry,siri::dialogengine::ConditionExpression>,std::allocator<siri::dialogengine::ConditionExpression>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Condition *,std::shared_ptr<siri::dialogengine::Condition>::__shared_ptr_default_delete<siri::dialogengine::Condition,siri::dialogengine::Condition>,std::allocator<siri::dialogengine::Condition>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Condition *,std::shared_ptr<siri::dialogengine::Condition>::__shared_ptr_default_delete<siri::dialogengine::Condition,siri::dialogengine::Condition>,std::allocator<siri::dialogengine::Condition>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::Condition *,std::shared_ptr<siri::dialogengine::Condition>::__shared_ptr_default_delete<siri::dialogengine::Condition,siri::dialogengine::Condition>,std::allocator<siri::dialogengine::Condition>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void non-virtual thunk to'siri::dialogengine::Node::~Node(siri::dialogengine::Node *this)
{
}

{
  void **v2;
  uint64_t vars8;

  uint64_t v2 = (void **)((char *)this - 64);
  *((void *)this - 8) = &unk_1F2126C60;
  *(void *)this = &unk_1F2126CB8;
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  *(void *)this = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 2));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
}

void siri::dialogengine::Node::~Node(siri::dialogengine::Node *this)
{
  *(void *)this = &unk_1F2126C60;
  *((void *)this + 8) = &unk_1F2126CB8;
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  *((void *)this + 8) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F2126C60;
  *((void *)this + 8) = &unk_1F2126CB8;
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  *((void *)this + 8) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F2126C60;
  *((void *)this + 8) = &unk_1F2126CB8;
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  *((void *)this + 8) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

uint64_t siri::dialogengine::Node::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) ^ 1;
}

BOOL siri::dialogengine::Node::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 119);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 119);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 104);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 119);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 104);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v8 = (const void **)(a1 + 96);
  if (v5 >= 0) {
    uint64_t v9 = (unsigned __int8 *)(a2 + 96);
  }
  else {
    uint64_t v9 = *(unsigned __int8 **)(a2 + 96);
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 104))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 119))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      uint64_t v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v10 = *(unsigned __int8 *)(a1 + 143);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 143);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 128);
  }
  uint64_t v12 = *(unsigned __int8 *)(a2 + 143);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a2 + 128);
  }
  if (v11 != v12) {
    return 0;
  }
  std::string v14 = (const void **)(a1 + 120);
  if (v13 >= 0) {
    int v15 = (unsigned __int8 *)(a2 + 120);
  }
  else {
    int v15 = *(unsigned __int8 **)(a2 + 120);
  }
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*v14, v15, *(void *)(a1 + 128))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 143))
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      std::string v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10) {
        goto LABEL_31;
      }
    }
    return 0;
  }
LABEL_31:
  uint64_t v16 = *(unsigned __int8 *)(a1 + 167);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = *(unsigned __int8 *)(a1 + 167);
  }
  else {
    uint64_t v17 = *(void *)(a1 + 152);
  }
  uint64_t v18 = *(unsigned __int8 *)(a2 + 167);
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(a2 + 152);
  }
  if (v17 != v18) {
    return 0;
  }
  uint64_t v20 = (const void **)(a1 + 144);
  if (v19 >= 0) {
    uint64_t v21 = (unsigned __int8 *)(a2 + 144);
  }
  else {
    uint64_t v21 = *(unsigned __int8 **)(a2 + 144);
  }
  if ((v16 & 0x80) != 0)
  {
    if (memcmp(*v20, v21, *(void *)(a1 + 152))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 167))
  {
    while (*(unsigned __int8 *)v20 == *v21)
    {
      uint64_t v20 = (const void **)((char *)v20 + 1);
      ++v21;
      if (!--v16) {
        goto LABEL_46;
      }
    }
    return 0;
  }
LABEL_46:
  uint64_t v22 = *(unsigned __int8 *)(a1 + 191);
  if ((v22 & 0x80u) == 0) {
    uint64_t v23 = *(unsigned __int8 *)(a1 + 191);
  }
  else {
    uint64_t v23 = *(void *)(a1 + 176);
  }
  uint64_t v24 = *(unsigned __int8 *)(a2 + 191);
  int v25 = (char)v24;
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *(void *)(a2 + 176);
  }
  if (v23 != v24) {
    return 0;
  }
  uint64_t v26 = (const void **)(a1 + 168);
  if (v25 >= 0) {
    uint64_t v27 = (unsigned __int8 *)(a2 + 168);
  }
  else {
    uint64_t v27 = *(unsigned __int8 **)(a2 + 168);
  }
  if ((v22 & 0x80) != 0)
  {
    if (!memcmp(*v26, v27, *(void *)(a1 + 176))) {
      return *(float *)(a1 + 192) == *(float *)(a2 + 192);
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 191))
  {
    while (*(unsigned __int8 *)v26 == *v27)
    {
      uint64_t v26 = (const void **)((char *)v26 + 1);
      ++v27;
      if (!--v22) {
        return *(float *)(a1 + 192) == *(float *)(a2 + 192);
      }
    }
    return 0;
  }
  return *(float *)(a1 + 192) == *(float *)(a2 + 192);
}

uint64_t siri::dialogengine::Node::IsConditionMet(siri::dialogengine::Node *this, siri::dialogengine::Context *a2)
{
  if (*((char *)this + 143) < 0)
  {
    if (*((void *)this + 16)) {
      goto LABEL_3;
    }
    return 1;
  }
  if (!*((unsigned char *)this + 143)) {
    return 1;
  }
LABEL_3:
  siri::dialogengine::Node::GetCondition(this, a2, &v38);
  if (v38)
  {
    memset(&v37, 0, sizeof(v37));
    if (!a2
      || (int v5 = *(siri::dialogengine::Context ***)(v38 + 144), v5 == *(siri::dialogengine::Context ***)(v38 + 152)))
    {
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = siri::dialogengine::EvaluateConditionEntry(a2, *v5, (siri::dialogengine::ConditionEntry *)&v37, v4);
    }
    siri::dialogengine::Node::GetIdForDebug(this, a2, 0, &v36);
    std::operator+<char>();
    long long v7 = std::string::append(&v31, "' for '");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v36;
    }
    else {
      uint64_t v9 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v36.__r_.__value_.__l.__size_;
    }
    uint64_t v11 = std::string::append(&v32, (const std::string::value_type *)v9, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    int v13 = std::string::append(&v33, "' evaluated to: ");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (v6) {
      int v15 = "true";
    }
    else {
      int v15 = "false";
    }
    std::string::basic_string[abi:ne180100]<0>(v29, v15);
    if ((v30 & 0x80u) == 0) {
      uint64_t v16 = v29;
    }
    else {
      uint64_t v16 = (void **)v29[0];
    }
    if ((v30 & 0x80u) == 0) {
      std::string::size_type v17 = v30;
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v29[1];
    }
    uint64_t v18 = std::string::append(&v34, (const std::string::value_type *)v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((char)v30 < 0) {
      operator delete(v29[0]);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  }
  else
  {
    siri::dialogengine::Node::GetIdForDebug(this, a2, 0, &v37);
    std::operator+<char>();
    uint64_t v20 = std::string::append(&v33, "' in node '");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v22 = &v37;
    }
    else {
      uint64_t v22 = (std::string *)v37.__r_.__value_.__r.__words[0];
    }
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v37.__r_.__value_.__l.__size_;
    }
    uint64_t v24 = std::string::append(&v34, (const std::string::value_type *)v22, v23);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    uint64_t v26 = std::string::append(&__p, "'");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v36, 1u);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    uint64_t v6 = 0;
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  return v6;
}

void sub_1C5D22620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  *(void *)(v47 - 112) = v47 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 112));
  unsigned __int8 v49 = *(std::__shared_weak_count **)(v47 - 56);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::Node::GetIdForDebug(siri::dialogengine::Node *this@<X0>, siri::dialogengine::Context *a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  siri::dialogengine::GetLogStateRef(this);
  if (HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = a3 == 0;
  }
  if (v8)
  {
    if (*((char *)this + 119) < 0)
    {
      int v13 = (const std::string::value_type *)*((void *)this + 12);
      std::string::size_type v14 = *((void *)this + 13);
      std::string::__init_copy_ctor_external(a4, v13, v14);
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
      a4->__r_.__value_.__r.__words[2] = *((void *)this + 14);
    }
  }
  else
  {
    siri::dialogengine::Node::GetGlobalId(this, a2, &v15);
    uint64_t v9 = std::string::insert(&v15, 0, ": '");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    uint64_t v11 = std::string::append(&v16, "'");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    a4->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5D22898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Node::GetGlobalId(siri::dialogengine::Node *this@<X0>, siri::dialogengine::Context *a2@<X1>, std::string *a3@<X8>)
{
  if (a2)
  {
    uint64_t v7 = *((void *)a2 + 63);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 64);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      if (v7)
      {
        uint64_t v8 = *((void *)a2 + 63);
        uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 64);
        BOOL v9 = v6 == 0;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      }
    }
    else if (v7)
    {
      uint64_t v8 = *((void *)a2 + 63);
      BOOL v9 = 1;
LABEL_8:
      siri::dialogengine::File::GetOrCreateId(v8, (uint64_t)this, 1, 0, (uint64_t)a3);
      if (!v9)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      return;
    }
  }
  if (*((char *)this + 119) < 0)
  {
    long long v10 = (const std::string::value_type *)*((void *)this + 12);
    std::string::size_type v11 = *((void *)this + 13);
    std::string::__init_copy_ctor_external(a3, v10, v11);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
    a3->__r_.__value_.__r.__words[2] = *((void *)this + 14);
  }
}

void sub_1C5D229E0(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Node::Execute(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void siri::dialogengine::Node::GetId(siri::dialogengine::Node *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 12), *((void *)this + 13));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 14);
  }
}

std::string *siri::dialogengine::Node::SetId(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 4, a2);
}

uint64_t siri::dialogengine::Node::GetParent(siri::dialogengine::Node *this)
{
  return *((void *)this + 25);
}

uint64_t siri::dialogengine::Node::SetParent(uint64_t this, siri::dialogengine::Node *a2)
{
  *(void *)(this + 200) = a2;
  return this;
}

void siri::dialogengine::Node::GetConditionName(siri::dialogengine::Node *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 15), *((void *)this + 16));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 120);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 17);
  }
}

std::string *siri::dialogengine::Node::SetConditionName(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 5, a2);
}

std::string *siri::dialogengine::Node::SetCase(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 6, a2);
}

void siri::dialogengine::Node::GetCase(siri::dialogengine::Node *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 167) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 18), *((void *)this + 19));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 9);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 20);
  }
}

void siri::dialogengine::Node::GetNote(siri::dialogengine::Node *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 191) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 21), *((void *)this + 22));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 168);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 23);
  }
}

std::string *siri::dialogengine::Node::SetNote(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 7, a2);
}

double siri::dialogengine::Node::GetWeight(siri::dialogengine::Node *this)
{
  return *((float *)this + 48);
}

float siri::dialogengine::Node::SetWeight(siri::dialogengine::Node *this, float a2)
{
  float result = fmaxf(a2, 0.0);
  *((float *)this + 48) = result;
  return result;
}

BOOL siri::dialogengine::Node::HasWeight(siri::dialogengine::Node *this)
{
  return *((float *)this + 48) != 1.0;
}

void siri::dialogengine::FormatSpeakableEmail(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 23))
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      return;
    }
LABEL_5:
    siri::dialogengine::RemoveUnicodeControlChars();
  }
  if (*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  char v2 = *(const std::string::value_type **)a1;
  std::string::__init_copy_ctor_external(a2, v2, 0);
}

void sub_1C5D22D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&__p);
  if (*(char *)(v14 - 41) < 0) {
    operator delete(*(void **)(v14 - 64));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogPersonHandle::phoneNumber(siri::dialogengine::DialogPersonHandle *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "type");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  uint64_t v6 = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "countryCode");
  OptionalStringParameter = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "friendlyPhoneNumberName");
  siri::dialogengine::GetOptionalBooleanParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "friendlyPhoneNumberNameShort");
  siri::dialogengine::GetOptionalBooleanParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (RequiredStringParameter)
  {
    (*(void (**)(std::string *__return_ptr, void *))(*(void *)RequiredStringParameter + 48))(&__p, RequiredStringParameter);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = __p;
    }
    siri::dialogengine::StringToLower((uint64_t)&__str, (uint64_t)&v11);
    if (v12 < 0)
    {
      BOOL v9 = *((void *)&v11 + 1) == 11
        && *(void *)v11 == 0x6D756E656E6F6870
        && *(void *)(v11 + 3) == 0x7265626D756E656ELL;
      operator delete((void *)v11);
    }
    else
    {
      BOOL v9 = v12 == 11 && (void)v11 == 0x6D756E656E6F6870 && *(void *)((char *)&v11 + 3) == 0x7265626D756E656ELL;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v27 < 0) {
      operator delete(v26);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v9)
      {
LABEL_49:
        if (v6)
        {
          (*(void (**)(std::string *__return_ptr, void *))(*(void *)v6 + 48))(&__p, v6);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v14 = __p;
          }
          if (v27 < 0) {
            operator delete(v26);
          }
          if (v25 < 0) {
            operator delete(v24);
          }
          if (v23 < 0) {
            operator delete(v22);
          }
          if (v21 < 0) {
            operator delete(v20);
          }
          if (v19 < 0) {
            operator delete(v18);
          }
          if (v17 < 0) {
            operator delete(v16);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (OptionalStringParameter) {
              goto LABEL_70;
            }
            goto LABEL_73;
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v14, "");
        }
        if (OptionalStringParameter)
        {
LABEL_70:
          (*(void (**)(std::string *__return_ptr, void *))(*(void *)OptionalStringParameter + 48))(&__p, OptionalStringParameter);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v13 = __p;
          }
          if (v27 < 0) {
            operator delete(v26);
          }
          if (v25 < 0) {
            operator delete(v24);
          }
          if (v23 < 0) {
            operator delete(v22);
          }
          if (v21 < 0) {
            operator delete(v20);
          }
          if (v19 < 0) {
            operator delete(v18);
          }
          if (v17 < 0) {
            operator delete(v16);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
LABEL_89:
          siri::dialogengine::PhoneNumber::FormatNumber(this, (uint64_t)&v14, (uint64_t)&v13);
        }
LABEL_73:
        std::string::basic_string[abi:ne180100]<0>(&v13, "");
        goto LABEL_89;
      }
    }
    else if (v9)
    {
      goto LABEL_49;
    }
  }
  operator new();
}

void sub_1C5D236CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a12);
  if (a45 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)a50);
  siri::dialogengine::SpeakableString::~SpeakableString(&a65);
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogPersonHandle::emailAddress(siri::dialogengine::DialogPersonHandle *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "type");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  int v5 = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!RequiredStringParameter) {
      goto LABEL_48;
    }
  }
  else if (!RequiredStringParameter)
  {
LABEL_48:
    operator new();
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(void *)RequiredStringParameter + 48))(&__p, RequiredStringParameter);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v22 = __p;
  }
  siri::dialogengine::StringToLower((uint64_t)&v22, (uint64_t)&v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v7 = v23.__r_.__value_.__l.__size_ == 12
      && *(void *)v23.__r_.__value_.__l.__data_ == 0x6464616C69616D65
      && *(_DWORD *)(v23.__r_.__value_.__r.__words[0] + 8) == 1936942450;
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v7 = SHIBYTE(v23.__r_.__value_.__r.__words[2]) == 12
      && v23.__r_.__value_.__r.__words[0] == 0x6464616C69616D65
      && LODWORD(v23.__r_.__value_.__r.__words[1]) == 1936942450;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v7) {
      goto LABEL_48;
    }
  }
  else if (!v7)
  {
    goto LABEL_48;
  }
  if (v5)
  {
    (*(void (**)(std::string *__return_ptr, void *))(*(void *)v5 + 48))(&__p, v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v23, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v23 = __p;
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (v15 < 0) {
      operator delete(v14);
    }
    if (v13 < 0) {
      operator delete(v12);
    }
    if (v11 < 0) {
      operator delete(v10);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "");
  }
  operator new();
}

void sub_1C5D23D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void siri::dialogengine::DialogPersonHandle::formattedValue(siri::dialogengine::DialogPersonHandle *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogPersonHandle::formattedLabel(siri::dialogengine::DialogPersonHandle *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  v42[6] = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[11],0>(&__p, "home", "home phone");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[11],0>(v24, "work", "work phone");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[13],0>(v32, "mobile", "mobile phone");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[11],0>(v34, "main", "main phone");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v35, "homefax", "home fax");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v36, "home_fax", "home fax");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v37, "workfax", "work fax");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v38, "work_fax", "work fax");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v39, "pager", "pager");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[12],0>(v40, "other phone");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v41, "phone", "phone");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[13],0>(v42, "school", "school phone");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&siri::dialogengine::DialogPersonHandle::formattedLabel(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sPhoneLabelToConcept, (const void **)&__p.__r_.__value_.__l.__data_, 13);
    for (uint64_t i = 576; i != -48; i -= 48)
      std::pair<std::string const,std::string>::~pair((uint64_t)&__p + i);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &siri::dialogengine::DialogPersonHandle::formattedLabel(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sPhoneLabelToConcept, &dword_1C5C1E000);
  }
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[15],0>(&__p);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[11],0>(v24, "work", "work email");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[12],0>(v28, "other email");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[13],0>(v32, "school", "school email");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&siri::dialogengine::DialogPersonHandle::formattedLabel(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sEmailLabelToConcept, (const void **)&__p.__r_.__value_.__l.__data_, 4);
    for (uint64_t j = 144; j != -48; j -= 48)
      std::pair<std::string const,std::string>::~pair((uint64_t)&__p + j);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &siri::dialogengine::DialogPersonHandle::formattedLabel(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sEmailLabelToConcept, &dword_1C5C1E000);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "label");
  OptionalStringParameter = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  int v5 = OptionalStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5) {
      goto LABEL_5;
    }
  }
  else if (OptionalStringParameter)
  {
LABEL_5:
    (*(void (**)(std::string *__return_ptr, void *))(*(void *)v5 + 48))(&__p, v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v20 = __p;
    }
    if (v33 < 0) {
      operator delete(v32[0]);
    }
    if (v31 < 0) {
      operator delete(v30);
    }
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    if (v27 < 0) {
      operator delete(v26);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_24:
    siri::dialogengine::StringTrim("_$!<>", &v20, &__p);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    std::string v20 = __p;
    siri::dialogengine::StringSplit((unsigned __int8 *)&v20, ".", &v18);
    if (v18 != v19) {
      std::string::operator=(&v20, (const std::string *)(v19 - 24));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "type");
    RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
    BOOL v7 = RequiredStringParameter;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v7) {
        goto LABEL_30;
      }
    }
    else if (RequiredStringParameter)
    {
LABEL_30:
      (*(void (**)(std::string *__return_ptr, void *))(*(void *)v7 + 48))(&__p, v7);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v15 = __p;
      }
      siri::dialogengine::StringToLower((uint64_t)&v15, (uint64_t)v16);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      if (v31 < 0) {
        operator delete(v30);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      if (v27 < 0) {
        operator delete(v26);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      if (v23 < 0) {
        operator delete(v22);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_51:
      if (v17 < 0)
      {
        if (v16[1] != (void *)12) {
          goto LABEL_60;
        }
        uint64_t v8 = (void **)v16[0];
      }
      else
      {
        if (v17 != 12) {
          goto LABEL_60;
        }
        uint64_t v8 = v16;
      }
      BOOL v9 = *v8;
      int v10 = *((_DWORD *)v8 + 2);
      if (v9 == (void *)0x6464616C69616D65 && v10 == 1936942450)
      {
        siri::dialogengine::StringToLower((uint64_t)&v20, (uint64_t)&__p);
        uint64_t v12 = std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::DialogPersonHandle::formattedLabel(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sEmailLabelToConcept, (const void **)&__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((_UNKNOWN *)v12 != &unk_1EA3D82F0) {
          goto LABEL_63;
        }
        goto LABEL_64;
      }
LABEL_60:
      siri::dialogengine::StringToLower((uint64_t)&v20, (uint64_t)&__p);
      uint64_t v12 = std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::DialogPersonHandle::formattedLabel(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sPhoneLabelToConcept, (const void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((_UNKNOWN *)v12 != &unk_1EA3D82D0) {
LABEL_63:
      }
        std::string::operator=(&v20, (const std::string *)(v12 + 56));
LABEL_64:
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    goto LABEL_51;
  }
  std::string::basic_string[abi:ne180100]<0>(&v20, "");
  goto LABEL_24;
}

void sub_1C5D246C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  for (uint64_t i = 144; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v36 + i);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[11],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5D248AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(void *a1)
{
  char v2 = std::string::basic_string[abi:ne180100]<0>(a1, "iphone");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "iphone");
  return a1;
}

void sub_1C5D24908(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5D2495C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5D249B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5D24A04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  int v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1C5D24A58(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[12],0>(void *a1, char *a2)
{
  uint64_t v4 = std::string::basic_string[abi:ne180100]<0>(a1, "other");
  std::string::basic_string[abi:ne180100]<0>(v4 + 3, a2);
  return a1;
}

void sub_1C5D24AB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1C5D24B3C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[15],0>(void *a1)
{
  char v2 = std::string::basic_string[abi:ne180100]<0>(a1, "home");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "personal email");
  return a1;
}

void sub_1C5D24B90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::string>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void siri::dialogengine::DialogPersonHandle::formattedType(siri::dialogengine::DialogPersonHandle *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(&__p);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(&v12);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&siri::dialogengine::DialogPersonHandle::formattedType(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sTypeToConcept, (const void **)&__p.__r_.__value_.__l.__data_, 2);
    for (uint64_t i = 48; i != -48; i -= 48)
      std::pair<std::string const,std::string>::~pair((uint64_t)&__p + i);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &siri::dialogengine::DialogPersonHandle::formattedType(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sTypeToConcept, &dword_1C5C1E000);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "type");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  int v5 = RequiredStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5) {
      goto LABEL_4;
    }
  }
  else if (RequiredStringParameter)
  {
LABEL_4:
    (*(void (**)(std::string *__return_ptr, void *))(*(void *)v5 + 48))(&__p, v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v8 = __p;
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (v15 < 0) {
      operator delete(v14);
    }
    if (v13 < 0) {
      operator delete(v12);
    }
    if (v11 < 0) {
      operator delete(v10);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_23:
    siri::dialogengine::StringToLower((uint64_t)&v8, (uint64_t)&__p);
    uint64_t v6 = std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::DialogPersonHandle::formattedType(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sTypeToConcept, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((_UNKNOWN *)v6 != &unk_1EA3D8310) {
      std::string::operator=(&v8, (const std::string *)(v6 + 56));
    }
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  goto LABEL_23;
}

void sub_1C5D24E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  for (uint64_t i = 48; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v21 + i);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(void *a1)
{
  char v2 = std::string::basic_string[abi:ne180100]<0>(a1, "emailaddress");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "email address");
  return a1;
}

void sub_1C5D24F94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(void *a1)
{
  char v2 = std::string::basic_string[abi:ne180100]<0>(a1, "phonenumber");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "phone number");
  return a1;
}

void sub_1C5D24FF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogPersonHandle::formattedLabelAndType(siri::dialogengine::DialogPersonHandle *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "type");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)__p, (uint64_t)a2);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  int v5 = siri::dialogengine::GetRequiredStringParameter((const void **)__p, (uint64_t)a2);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "label");
  OptionalStringParameter = siri::dialogengine::GetOptionalStringParameter((const void **)__p, (uint64_t)a2);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (RequiredStringParameter) {
      goto LABEL_7;
    }
  }
  else if (RequiredStringParameter)
  {
LABEL_7:
    (*(void (**)(void **__return_ptr, void *))(*(void *)RequiredStringParameter + 48))(__p, RequiredStringParameter);
    siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)__p, &v9);
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (v15 < 0) {
      operator delete(v14);
    }
    if (v13 < 0) {
      operator delete(v12);
    }
    if (v11 < 0) {
      operator delete(__p[0]);
    }
LABEL_23:
    if (v5)
    {
      (*(void (**)(void **__return_ptr, void *))(*(void *)v5 + 48))(__p, v5);
      siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)__p, &v8);
      if (v23 < 0) {
        operator delete(v22);
      }
      if (v21 < 0) {
        operator delete(v20);
      }
      if (v19 < 0) {
        operator delete(v18);
      }
      if (v17 < 0) {
        operator delete(v16);
      }
      if (v15 < 0) {
        operator delete(v14);
      }
      if (v13 < 0) {
        operator delete(v12);
      }
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v8, "");
    }
    if (OptionalStringParameter)
    {
      (*(void (**)(void **__return_ptr, void *))(*(void *)OptionalStringParameter + 48))(__p, OptionalStringParameter);
      siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)__p, &v7);
      if (v23 < 0) {
        operator delete(v22);
      }
      if (v21 < 0) {
        operator delete(v20);
      }
      if (v19 < 0) {
        operator delete(v18);
      }
      if (v17 < 0) {
        operator delete(v16);
      }
      if (v15 < 0) {
        operator delete(v14);
      }
      if (v13 < 0) {
        operator delete(v12);
      }
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v7, "");
    }
    siri::dialogengine::CreateJSONStringVal();
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "");
  goto LABEL_23;
}

void sub_1C5D2559C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(exception_object);
}

void __assign_helper_atomic_property_(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *__copy_helper_atomic_property_(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *float result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1C5D25968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5D25B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 88;
      std::string v7 = v4 - 88;
      std::string v8 = v4 - 88;
      do
      {
        std::string v9 = *(void (***)(char *))v8;
        v8 -= 88;
        (*v9)(v7);
        v6 -= 88;
        BOOL v10 = v7 == v2;
        std::string v7 = v8;
      }
      while (!v10);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C5D25D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D25EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  a12 = (void **)&a14;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1C5D260D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D261E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D262D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5D26390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D26480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5D26540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D26630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5D26714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5D267EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5D2689C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D26974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

siri::dialogengine::File *siri::dialogengine::File::File(siri::dialogengine::File *this)
{
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F2126948;
  *((void *)this + 1) = (char *)this + 16;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 18) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 19, "5.2");
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = (char *)this + 208;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((void *)this + 34) = (char *)this + 280;
  *((void *)this + 35) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 36) = 0;
  siri::dialogengine::GroupPhrases::GroupPhrases((siri::dialogengine::File *)((char *)this + 312));
  *((void *)this + 73) = 0;
  *((void *)this + 72) = 0;
  *((void *)this + 71) = (char *)this + 576;
  *((void *)this + 76) = 0;
  *((void *)this + 75) = 0;
  *((void *)this + 74) = (char *)this + 600;
  *((void *)this + 78) = 0;
  *((void *)this + 80) = 0;
  *((void *)this + 79) = 0;
  *((void *)this + 77) = (char *)this + 624;
  *((void *)this + 82) = 0;
  *((void *)this + 81) = 0;
  *((unsigned char *)this + 672) = 1;
  *((unsigned char *)this + 680) = 0;
  *((unsigned char *)this + 704) = 0;
  *((unsigned char *)this + 712) = 0;
  *((unsigned char *)this + 736) = 0;
  *((unsigned char *)this + 744) = 0;
  *((unsigned char *)this + 768) = 0;
  return this;
}

void sub_1C5D26AD4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 151) < 0) {
    operator delete(*(void **)(v1 + 128));
  }
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*(void **)(v1 + 104));
  }
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*(void **)(v1 + 80));
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*(void **)(v1 + 56));
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  *(void *)uint64_t v1 = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

void std::shared_ptr<siri::dialogengine::File>::shared_ptr[abi:ne180100]<siri::dialogengine::File,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5D26BBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::File *,std::shared_ptr<siri::dialogengine::File>::__shared_ptr_default_delete<siri::dialogengine::File,siri::dialogengine::File>,std::allocator<siri::dialogengine::File>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::File *,std::shared_ptr<siri::dialogengine::File>::__shared_ptr_default_delete<siri::dialogengine::File,siri::dialogengine::File>,std::allocator<siri::dialogengine::File>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::File *,std::shared_ptr<siri::dialogengine::File>::__shared_ptr_default_delete<siri::dialogengine::File,siri::dialogengine::File>,std::allocator<siri::dialogengine::File>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

std::string *__assign_helper_atomic_property__516(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t result = std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  if (a1 != a2) {
    uint64_t result = (std::string *)std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(a1 + 32), *(void **)(a2 + 32), (void *)(a2 + 40));
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return result;
}

uint64_t *std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  int v5 = (uint64_t **)result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t)(result + 1);
    *(void *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(void *)(v6 + 8)) {
      std::string v8 = *(void **)(v6 + 8);
    }
    else {
      std::string v8 = (void *)v6;
    }
    uint64_t v18 = (const void **)result;
    char v19 = v8;
    std::string v20 = v8;
    if (v8)
    {
      char v19 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        std::string v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          BOOL v10 = v20;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v5, &v17, (const void **)v20 + 4);
          std::__tree<std::string>::__insert_node_at(v5, v17, leaf_high, v10);
          std::string v8 = v19;
          std::string v20 = v19;
          if (v19) {
            char v19 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          }
          uint64_t v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              uint64_t v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v13 = *a2 == (void)v9;
              std::string v9 = a2;
            }
            while (!v13);
          }
          if (!v8) {
            break;
          }
          std::string v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t *)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)v5, (uint64_t)(a2 + 4), (uint64_t)&v18);
      std::string v14 = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v5, &v17, v18 + 4);
      uint64_t result = std::__tree<std::string>::__insert_node_at(v5, v17, v14, (uint64_t *)v18);
      char v15 = (void *)a2[1];
      if (v15)
      {
        do
        {
          std::string v16 = v15;
          char v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          std::string v16 = (void *)a2[2];
          BOOL v13 = *v16 == (void)a2;
          a2 = v16;
        }
        while (!v13);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1C5D26FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__tree<std::string>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

void *std::__tree<std::string>::__find_leaf_high(uint64_t a1, void *a2, const void **a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        int v5 = (void *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::string>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *__copy_helper_atomic_property__518(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  uint64_t result = std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 32), (const void ***)(a2 + 32));
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return result;
}

void sub_1C5D27198(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1C5D271F4(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    long long v4 = a2;
    int v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          std::string v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          std::string v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = (const void **)v8;
        }
        while (!v9);
      }
      long long v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_1C5D273FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22)
{
  siri::dialogengine::GrammarFeature::~GrammarFeature((siri::dialogengine::GrammarFeature *)&__p);

  _Unwind_Resume(a1);
}

void siri::dialogengine::GrammarFeature::~GrammarFeature(siri::dialogengine::GrammarFeature *this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void sub_1C5D27624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5D276E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  siri::dialogengine::GrammarFeature::~GrammarFeature((siri::dialogengine::GrammarFeature *)&a9);

  _Unwind_Resume(a1);
}

void sub_1C5D2782C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

uint64_t *siri::dialogengine::GetNamedEntityParametersForCatId@<X0>(const void **a1@<X0>, uint64_t *a2@<X8>)
{
  {
    operator new();
  }
  long long v4 = (std::once_flag::_State_type *)siri::dialogengine::GetNamedEntityParametersMap(void)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetNamedEntityParametersMap(void)::flag, memory_order_acquire) != -1)
  {
    BOOL v9 = &v7;
    std::string v8 = &v9;
    std::__call_once(v4, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetNamedEntityParametersMap(void)::$_0 &&>>);
  }
  uint64_t v5 = siri::dialogengine::GetNamedEntityParametersMap(void)::sMap;
  uint64_t result = (uint64_t *)std::__tree<std::string>::find<std::string>(siri::dialogengine::GetNamedEntityParametersMap(void)::sMap, a1);
  if ((uint64_t *)(v5 + 8) != result) {
    return std::set<std::string>::set[abi:ne180100](a2, (const void ***)result + 7);
  }
  a2[2] = 0;
  a2[1] = 0;
  *a2 = (uint64_t)(a2 + 1);
  return result;
}

void sub_1C5D27970(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetNamedEntityParametersMap(void)::$_0 &&>>()
{
}

void siri::dialogengine::TokenizeText(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t v43 = 0;
  std::string::size_type v44 = 0;
  uint64_t v45 = 0;
  memset(&__str, 0, sizeof(__str));
  morphun::util::ULocale::ULocale();
  morphun::util::StringUtils::to_u16string();
  uint64_t Tokenizer = morphun::TokenizerFactory::createTokenizer();
  uint64_t v6 = Tokenizer;
  if (Tokenizer)
  {
    char v7 = (void *)(*(uint64_t (**)(uint64_t, std::basic_string<char16_t> *))(*(void *)Tokenizer + 24))(Tokenizer, &__str);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    morphun::TokenIterator::TokenIterator();
    std::string v8 = (morphun::Token *)v7[2];
    if (v8) {
      morphun::Token::getNext(v8);
    }
    morphun::TokenIterator::TokenIterator();
    uint64_t v38 = v7;
    uint64_t v39 = v6;
    while ((morphun::TokenIterator::operator!=() & 1) != 0)
    {
      BOOL v10 = (morphun::Token *)morphun::TokenIterator::operator*();
      if ((morphun::Token::isWhitespace(v10) & 1) == 0
        && ((morphun::Token::isSignificant(v10) & 1) != 0 || morphun::Token::getLength(v10)))
      {
        int v11 = (*(uint64_t (**)(morphun::Token *))(*(void *)v10 + 24))(v10);
        uint64_t v15 = siri::dialogengine::ConvertChar16OffsetToBytes(&__str, v11, v12, v13, v14);
        int v16 = (*(uint64_t (**)(morphun::Token *))(*(void *)v10 + 32))(v10);
        uint64_t v20 = siri::dialogengine::ConvertChar16OffsetToBytes(&__str, v16, v17, v18, v19);
        morphun::Token::getValue(v10);
        morphun::util::StringUtils::to_string();
        char v21 = v43;
        std::string::size_type v22 = v44;
        int v23 = SHIBYTE(v45);
        char v25 = a2[1];
        unint64_t v24 = (unint64_t)a2[2];
        *(_DWORD *)char v40 = v45;
        *(_DWORD *)&v40[3] = *(_DWORD *)((char *)&v45 + 3);
        if ((unint64_t)v25 >= v24)
        {
          uint64_t v26 = *a2;
          unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((v25 - *a2) >> 3);
          unint64_t v28 = v27 + 1;
          if (v27 + 1 > 0x666666666666666) {
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v24 - (void)v26) >> 3);
          if (2 * v29 > v28) {
            unint64_t v28 = 2 * v29;
          }
          if (v29 >= 0x333333333333333) {
            unint64_t v30 = 0x666666666666666;
          }
          else {
            unint64_t v30 = v28;
          }
          uint64_t v47 = a2 + 2;
          if (v30)
          {
            if (v30 > 0x666666666666666) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            char v31 = (std::string::value_type *)operator new(40 * v30);
          }
          else
          {
            char v31 = 0;
          }
          char v33 = &v31[40 * v27];
          uint64_t v43 = v31;
          std::string::size_type v44 = (std::string::size_type)v33;
          uint64_t v45 = v33;
          unsigned int v46 = &v31[40 * v30];
          *(void *)char v33 = v15;
          *((void *)v33 + 1) = v20;
          std::string v34 = (std::string *)(v33 + 16);
          if (v23 < 0)
          {
            std::string::__init_copy_ctor_external(v34, v21, v22);
            uint64_t v26 = *a2;
            char v25 = a2[1];
            char v33 = (char *)v44;
            unsigned int v35 = v45;
          }
          else
          {
            v34->__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
            *((void *)v33 + 3) = v22;
            *((_DWORD *)v33 + 8) = *(_DWORD *)v40;
            *(_DWORD *)(v33 + 35) = *(_DWORD *)&v40[3];
            v33[39] = v23;
            unsigned int v35 = v33;
          }
          std::string v32 = v35 + 40;
          uint64_t v45 = v35 + 40;
          if (v25 != v26)
          {
            do
            {
              *(_OWORD *)(v33 - 40) = *(_OWORD *)(v25 - 40);
              long long v36 = *(_OWORD *)(v25 - 24);
              *((void *)v33 - 1) = *((void *)v25 - 1);
              *(_OWORD *)(v33 - 24) = v36;
              v33 -= 40;
              *((void *)v25 - 2) = 0;
              *((void *)v25 - 1) = 0;
              *((void *)v25 - 3) = 0;
              v25 -= 40;
            }
            while (v25 != v26);
            uint64_t v26 = *a2;
            char v25 = a2[1];
            std::string v32 = v45;
          }
          *a2 = v33;
          a2[1] = v32;
          std::string v37 = a2[2];
          a2[2] = v46;
          uint64_t v45 = v25;
          unsigned int v46 = v37;
          uint64_t v43 = v26;
          std::string::size_type v44 = (std::string::size_type)v26;
          std::__split_buffer<siri::dialogengine::Token>::~__split_buffer((uint64_t)&v43);
          char v7 = v38;
          uint64_t v6 = v39;
        }
        else
        {
          *(void *)char v25 = v15;
          *((void *)v25 + 1) = v20;
          if (v23 < 0)
          {
            char v7 = v38;
            uint64_t v6 = v39;
            std::string::__init_copy_ctor_external((std::string *)(v25 + 16), v21, v22);
          }
          else
          {
            *((void *)v25 + 2) = v21;
            *((void *)v25 + 3) = v22;
            *((_DWORD *)v25 + 8) = *(_DWORD *)v40;
            *(_DWORD *)(v25 + 35) = *(_DWORD *)&v40[3];
            v25[39] = v23;
            char v7 = v38;
            uint64_t v6 = v39;
          }
          std::string v32 = v25 + 40;
          a2[1] = v25 + 40;
        }
        a2[1] = v32;
        if (v23 < 0) {
          operator delete(v21);
        }
      }
      morphun::TokenIterator::operator++();
    }
    if (v7) {
      (*(void (**)(void *))(*v7 + 16))(v7);
    }
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  else
  {
    if (*((char *)a1 + 23) >= 0) {
      BOOL v9 = a1;
    }
    else {
      BOOL v9 = (uint64_t *)*a1;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"morphun::TokenizerFactory::createTokenizer returned nullptr for locale '%s'", v5, v9);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v42);
}

void sub_1C5D27E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a31);
  _Unwind_Resume(a1);
}

void std::vector<siri::dialogengine::Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    long long v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 5;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t siri::dialogengine::ConvertChar16OffsetToBytes(std::basic_string<char16_t> *__str, int a2, uint64_t a3, uint64_t a4, std::allocator<char16_t> *a5)
{
  std::basic_string<char16_t>::basic_string(&v10, __str, 0, a2, a5);
  morphun::util::StringUtils::to_string();
  if ((char)v9 < 0)
  {
    uint64_t v5 = v8;
    operator delete(v7);
  }
  else
  {
    uint64_t v5 = v9;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1C5D28130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<siri::dialogengine::Token>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 40;
      *(void *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::basic_string(std::basic_string<char16_t> *this, const std::basic_string<char16_t> *__str, std::basic_string<char16_t>::size_type __pos, std::basic_string<char16_t>::size_type __n, std::allocator<char16_t> *__a)
{
  uint64_t v6 = __str;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::basic_string<char16_t>::size_type size = __str->__r_.__value_.__l.__size_;
    if (size < __pos) {
      goto LABEL_18;
    }
    uint64_t v6 = (const std::basic_string<char16_t> *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    std::basic_string<char16_t>::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos) {
LABEL_18:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  std::basic_string<char16_t>::size_type v9 = size - __pos;
  if (v9 >= __n) {
    std::basic_string<char16_t>::size_type v10 = __n;
  }
  else {
    std::basic_string<char16_t>::size_type v10 = v9;
  }
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v10 >= 0xB)
  {
    uint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v10 | 3) != 0xB) {
      uint64_t v12 = v10 | 3;
    }
    int v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v12 + 1);
    this->__r_.__value_.__l.__size_ = v10;
    this->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    this->__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v11;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = v10;
    int v11 = this;
    if (!v10) {
      goto LABEL_17;
    }
  }
  memmove(v11, (char *)v6 + 2 * __pos, 2 * v10);
LABEL_17:
  *((_WORD *)v11 + v10) = 0;
  return this;
}

double siri::dialogengine::PatternSchema::PatternSchema(siri::dialogengine::PatternSchema *this)
{
  *((void *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = (char *)this + 128;
  *((void *)this + 19) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = (char *)this + 152;
  *((void *)this + 22) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = (char *)this + 176;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  return result;
}

{
  double result;

  *((void *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = (char *)this + 128;
  *((void *)this + 19) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = (char *)this + 152;
  *((void *)this + 22) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = (char *)this + 176;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  return result;
}

void siri::dialogengine::PatternSchema::GetName(siri::dialogengine::PatternSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void siri::dialogengine::PatternSchema::GetFilename(siri::dialogengine::PatternSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
}

std::string *siri::dialogengine::PatternSchema::SetFilename(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

void siri::dialogengine::PatternSchema::GetDescription(siri::dialogengine::PatternSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((void *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 8);
  }
}

std::string *siri::dialogengine::PatternSchema::SetDescription(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

void siri::dialogengine::PatternSchema::GetDeprecated(siri::dialogengine::PatternSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((void *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 11);
  }
}

std::string *siri::dialogengine::PatternSchema::SetDeprecated(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 3, a2);
}

void siri::dialogengine::PatternSchema::GetVersionAdded(siri::dialogengine::PatternSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 12), *((void *)this + 13));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 14);
  }
}

std::string *siri::dialogengine::PatternSchema::SetVersionAdded(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 4, a2);
}

uint64_t siri::dialogengine::PatternSchema::GetSetting@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__tree<std::string>::find<std::string>(a1 + 120, a2);
  if (a1 + 128 == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(result + 64);
    *a3 = *(void *)(result + 56);
    a3[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void siri::dialogengine::PatternSchema::GetSettings(siri::dialogengine::PatternSchema *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = (uint64_t **)(a2 + 8);
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = (const void **)*((void *)this + 15);
  uint64_t v4 = (const void ***)((char *)this + 128);
  if (v3 != (const void **)((char *)this + 128))
  {
    uint64_t v6 = a2 + 16;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + 8);
      if (*(uint64_t ***)a2 == v2) {
        break;
      }
      uint64_t v8 = v2;
      if (v7)
      {
        do
        {
          uint64_t v9 = v7;
          uint64_t v7 = *(void *)(v7 + 8);
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t)v8[2];
          BOOL v10 = *(void *)v9 == (void)v8;
          uint64_t v8 = (uint64_t **)v9;
        }
        while (v10);
      }
      if (std::less<std::string>::operator()[abi:ne180100](v6, (const void **)(v9 + 32), v3 + 4))
      {
        if (!*v2) {
          goto LABEL_10;
        }
LABEL_12:
        uint64_t v15 = (void *)v9;
        int v11 = (uint64_t **)(v9 + 8);
        goto LABEL_14;
      }
      int v11 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a2, &v15, v3 + 4);
LABEL_14:
      if (!*v11) {
        goto LABEL_15;
      }
LABEL_16:
      uint64_t v12 = (const void **)v3[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = (const void ***)v12;
          uint64_t v12 = (const void **)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (const void ***)v3[2];
          BOOL v10 = *v13 == v3;
          uint64_t v3 = (const void **)v13;
        }
        while (!v10);
      }
      uint64_t v3 = (const void **)v13;
      if (v13 == v4) {
        return;
      }
    }
    uint64_t v9 = (uint64_t)v2;
    if (!v7)
    {
LABEL_10:
      uint64_t v15 = v2;
      int v11 = v2;
LABEL_15:
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::PatternSetting>> const&>((uint64_t)v14, a2, (long long *)v3 + 2);
      std::__tree<std::string>::__insert_node_at((uint64_t **)a2, (uint64_t)v15, v11, v14[0]);
      v14[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
      goto LABEL_16;
    }
    goto LABEL_12;
  }
}

void sub_1C5D285C8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::PatternSetting>> const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_1C5D28630(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchema::SetSettings(uint64_t a1, void *a2)
{
  uint64_t v2 = (uint64_t **)(a1 + 120);
  if ((void *)(a1 + 120) != a2)
  {
    uint64_t v3 = a2 + 1;
    uint64_t v4 = (void *)*a2;
    if (*(void *)(a1 + 136))
    {
      uint64_t v6 = *(void *)(a1 + 128);
      uint64_t v5 = (void *)(a1 + 128);
      uint64_t v7 = (void *)*(v5 - 1);
      *(v5 - 1) = v5;
      *(void *)(v6 + 16) = 0;
      *uint64_t v5 = 0;
      v5[1] = 0;
      if (v7[1]) {
        uint64_t v8 = (void *)v7[1];
      }
      else {
        uint64_t v8 = v7;
      }
      std::string::size_type v22 = v2;
      int v23 = v8;
      unint64_t v24 = v8;
      if (!v8 || (int v23 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8), v4 == v3))
      {
        uint64_t v15 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
          uint64_t v10 = v4[7];
          uint64_t v9 = v4[8];
          if (v9) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
          }
          int v11 = (std::__shared_weak_count *)v8[8];
          v8[7] = v10;
          v8[8] = v9;
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          uint64_t v12 = v24;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v21, (const void **)v24 + 4);
          std::__tree<std::string>::__insert_node_at(v2, v21, leaf_high, v12);
          uint64_t v8 = v23;
          unint64_t v24 = v23;
          if (v23) {
            int v23 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v23);
          }
          std::string v14 = (void *)v4[1];
          if (v14)
          {
            do
            {
              uint64_t v15 = v14;
              std::string v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              uint64_t v15 = (void *)v4[2];
              BOOL v16 = *v15 == (void)v4;
              uint64_t v4 = v15;
            }
            while (!v16);
          }
          if (!v8) {
            break;
          }
          uint64_t v4 = v15;
        }
        while (v15 != v3);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v22);
      uint64_t v4 = v15;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::PatternSetting>> const&>((uint64_t)&v22, (uint64_t)v2, (long long *)v4 + 2);
        uint64_t v17 = (uint64_t *)v22;
        uint64_t v18 = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v21, (const void **)v22 + 4);
        std::__tree<std::string>::__insert_node_at(v2, v21, v18, v17);
        std::string::size_type v22 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v22);
        char v19 = (void *)v4[1];
        if (v19)
        {
          do
          {
            uint64_t v20 = v19;
            char v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            uint64_t v20 = (void *)v4[2];
            BOOL v16 = *v20 == (void)v4;
            uint64_t v4 = v20;
          }
          while (!v16);
        }
        uint64_t v4 = v20;
      }
      while (v20 != v3);
    }
  }
}

void sub_1C5D28818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v2);
  }
  return a1;
}

void siri::dialogengine::PatternSchema::AddSetting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v5 = (uint64_t **)(a1 + 120);
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
    }
    else
    {
      long long v6 = *(_OWORD *)(v2 + 8);
      __p.__r_.__value_.__r.__words[2] = *(void *)(v2 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    }
    uint64_t v7 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)v5, &v17, (const void **)&__p.__r_.__value_.__l.__data_);
    uint64_t v8 = *v7;
    if (!*v7)
    {
      uint64_t v9 = (uint64_t **)v7;
      uint64_t v8 = operator new(0x48uLL);
      v15[1] = a1 + 128;
      *((_OWORD *)v8 + 2) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      std::string::size_type v10 = __p.__r_.__value_.__r.__words[2];
      memset(&__p, 0, sizeof(__p));
      *((void *)v8 + 7) = 0;
      *((void *)v8 + 8) = 0;
      *((void *)v8 + 6) = v10;
      char v16 = 1;
      std::__tree<std::string>::__insert_node_at(v5, v17, v9, (uint64_t *)v8);
      v15[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
    }
    uint64_t v12 = *a2;
    uint64_t v11 = a2[1];
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v8 + 8);
    *((void *)v8 + 7) = v12;
    *((void *)v8 + 8) = v11;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5D28994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::PatternSchema::GetRequiredParameter@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__tree<std::string>::find<std::string>(a1 + 144, a2);
  if (a1 + 152 == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(result + 64);
    *a3 = *(void *)(result + 56);
    a3[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

uint64_t siri::dialogengine::PatternSchema::GetRequiredParameters@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::shared_ptr<siri::dialogengine::Parameter>>::map[abi:ne180100](a2, this + 18);
}

uint64_t std::map<std::string,std::shared_ptr<siri::dialogengine::Parameter>>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (*(uint64_t ***)a1 == v3) {
        break;
      }
      uint64_t v7 = v3;
      if (v6)
      {
        do
        {
          uint64_t v8 = v6;
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v8 = (uint64_t)v7[2];
          BOOL v9 = *(void *)v8 == (void)v7;
          uint64_t v7 = (uint64_t **)v8;
        }
        while (v9);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v8 + 32), v5 + 4))
      {
        if (!*v3) {
          goto LABEL_9;
        }
LABEL_11:
        uint64_t v15 = (void *)v8;
        std::string::size_type v10 = (uint64_t **)(v8 + 8);
        goto LABEL_13;
      }
      std::string::size_type v10 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, &v15, v5 + 4);
LABEL_13:
      if (!*v10) {
        goto LABEL_14;
      }
LABEL_15:
      uint64_t v11 = (const void **)v5[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (const void ***)v11;
          uint64_t v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (const void ***)v5[2];
          BOOL v9 = *v12 == v5;
          uint64_t v5 = (const void **)v12;
        }
        while (!v9);
      }
      uint64_t v5 = (const void **)v12;
      if (v12 == v4) {
        return a1;
      }
    }
    uint64_t v8 = (uint64_t)v3;
    if (!v6)
    {
LABEL_9:
      uint64_t v15 = v3;
      std::string::size_type v10 = v3;
LABEL_14:
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::Parameter>> const&>((uint64_t)v14, a1, (long long *)v5 + 2);
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v10, v14[0]);
      v14[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_1C5D28B78(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::Parameter>> const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_1C5D28BE0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchema::SetRequiredParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 144;
  if (v2 != a2) {
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,void *> *,long>>(v2, *(long long **)a2, (long long *)(a2 + 8));
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,void *> *,long>>(uint64_t a1, long long *a2, long long *a3)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(uint64_t **)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v22 = a1;
    int v23 = v8;
    unint64_t v24 = v8;
    if (v8)
    {
      int v23 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        BOOL v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          uint64_t v11 = *((void *)v9 + 7);
          uint64_t v10 = *((void *)v9 + 8);
          if (v10) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v12 = (std::__shared_weak_count *)v8[8];
          v8[7] = v11;
          v8[8] = v10;
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
          uint64_t v13 = v24;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high(a1, &v21, (const void **)v24 + 4);
          std::__tree<std::string>::__insert_node_at((uint64_t **)a1, v21, leaf_high, v13);
          uint64_t v8 = v23;
          unint64_t v24 = v23;
          if (v23) {
            int v23 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v23);
          }
          uint64_t v15 = (long long *)*((void *)v9 + 1);
          if (v15)
          {
            do
            {
              a2 = v15;
              uint64_t v15 = *(long long **)v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v16 = *(void *)a2 == (void)v9;
              BOOL v9 = a2;
            }
            while (!v16);
          }
          if (!v8) {
            break;
          }
          BOOL v9 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v22);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::Parameter>> const&>((uint64_t)&v22, a1, a2 + 2);
      uint64_t v17 = (uint64_t *)v22;
      uint64_t v18 = (uint64_t **)std::__tree<std::string>::__find_leaf_high(a1, &v21, (const void **)(v22 + 32));
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, v21, v18, v17);
      uint64_t v22 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v22);
      char v19 = (long long *)*((void *)a2 + 1);
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          char v19 = *(long long **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (long long *)*((void *)a2 + 2);
          BOOL v16 = *(void *)v20 == (void)a2;
          a2 = v20;
        }
        while (!v16);
      }
      a2 = v20;
    }
    while (v20 != a3);
  }
}

void sub_1C5D28DDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchema::AddRequiredParameter(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t **)(a1 + 144);
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
    }
    else
    {
      long long v5 = *(_OWORD *)(v2 + 8);
      __p.__r_.__value_.__r.__words[2] = *(void *)(v2 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
    }
    p_p = &__p;
    uint64_t v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p);
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v9 = (std::__shared_weak_count *)*((void *)v6 + 8);
    *((void *)v6 + 7) = v8;
    *((void *)v6 + 8) = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5D28E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::PatternSchema::GetComputedParameter@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__tree<std::string>::find<std::string>(a1 + 168, a2);
  if (a1 + 176 == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(result + 64);
    *a3 = *(void *)(result + 56);
    a3[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

uint64_t siri::dialogengine::PatternSchema::GetComputedParameters@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::shared_ptr<siri::dialogengine::Parameter>>::map[abi:ne180100](a2, this + 21);
}

void siri::dialogengine::PatternSchema::SetComputedParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 168;
  if (v2 != a2) {
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,void *> *,long>>(v2, *(long long **)a2, (long long *)(a2 + 8));
  }
}

void siri::dialogengine::PatternSchema::AddComputedParameter(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t **)(a1 + 168);
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
    }
    else
    {
      long long v5 = *(_OWORD *)(v2 + 8);
      __p.__r_.__value_.__r.__words[2] = *(void *)(v2 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
    }
    p_p = &__p;
    uint64_t v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p);
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v9 = (std::__shared_weak_count *)*((void *)v6 + 8);
    *((void *)v6 + 7) = v8;
    *((void *)v6 + 8) = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5D28FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *siri::dialogengine::PatternSchema::GetGroups@<X0>(void *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = (char *)this[24];
  uint64_t v4 = (char *)this[25];
  if (v4 != v3)
  {
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](a2, (v4 - v3) >> 4);
    this = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>,std::shared_ptr<siri::dialogengine::PatternSchemaComponent>*,std::shared_ptr<siri::dialogengine::PatternSchemaComponent>*,std::shared_ptr<siri::dialogengine::PatternSchemaComponent>*>((uint64_t)(a2 + 2), v3, v4, (void *)a2[1]);
    a2[1] = this;
  }
  return this;
}

void sub_1C5D29070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void siri::dialogengine::PatternSchema::GetGroup(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 192);
  long long v5 = *(void **)(a1 + 200);
  if (v4 == v5)
  {
LABEL_28:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  while (1)
  {
    uint64_t v7 = *v4;
    if (*(char *)(*v4 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
    }
    else
    {
      long long v8 = *(_OWORD *)(v7 + 8);
      __p.__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    if (size != v10)
    {
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_27;
    }
    uint64_t v12 = v11 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      break;
    }
    uint64_t v17 = (void *)__p.__r_.__value_.__r.__words[0];
    int v18 = memcmp(__p.__r_.__value_.__l.__data_, v12, __p.__r_.__value_.__l.__size_);
    operator delete(v17);
    if (!v18) {
      goto LABEL_29;
    }
LABEL_27:
    v4 += 2;
    if (v4 == v5) {
      goto LABEL_28;
    }
  }
  if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
    uint64_t v13 = 0;
    do
    {
      int v14 = __p.__r_.__value_.__s.__data_[v13];
      int v15 = v12[v13];
    }
    while (v14 == v15 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v13++);
    if (v14 != v15) {
      goto LABEL_27;
    }
  }
LABEL_29:
  uint64_t v19 = v4[1];
  *a3 = *v4;
  a3[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
}

void siri::dialogengine::PatternSchema::SetGroups(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2 = a1 + 24;
  if (a1 + 24 != (uint64_t *)a2)
  {
    long long v5 = *a2;
    uint64_t v4 = (char *)a2[1];
    uint64_t v6 = v4 - (char *)*a2;
    unint64_t v7 = v6 >> 4;
    BOOL v9 = a1 + 26;
    uint64_t v8 = a1[26];
    uint64_t v10 = (void *)a1[24];
    if (v6 >> 4 > (unint64_t)((v8 - (uint64_t)v10) >> 4))
    {
      if (v10)
      {
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__clear[abi:ne180100](a1 + 24);
        operator delete((void *)*v2);
        uint64_t v8 = 0;
        *uint64_t v2 = 0;
        v2[1] = 0;
        v2[2] = 0;
      }
      if (v6 < 0) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = v8 >> 3;
      if (v8 >> 3 <= v7) {
        uint64_t v11 = v6 >> 4;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](v2, v12);
      uint64_t v13 = (void *)a1[25];
      uint64_t v14 = (uint64_t)v9;
      int v15 = v5;
      goto LABEL_14;
    }
    unint64_t v16 = (a1[25] - (uint64_t)v10) >> 4;
    if (v16 < v7)
    {
      uint64_t v17 = &v5[2 * v16];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *>(*a2, v17, v10);
      uint64_t v13 = (void *)a1[25];
      uint64_t v14 = (uint64_t)v9;
      int v15 = v17;
LABEL_14:
      a1[25] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>,std::shared_ptr<siri::dialogengine::PatternSchemaComponent>*,std::shared_ptr<siri::dialogengine::PatternSchemaComponent>*,std::shared_ptr<siri::dialogengine::PatternSchemaComponent>*>(v14, v15, v4, v13);
      return;
    }
    int v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *>(*a2, a2[1], v10);
    for (uint64_t i = (void *)a1[25]; i != v18; i -= 2)
    {
      uint64_t v20 = (std::__shared_weak_count *)*(i - 1);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
    }
    a1[25] = (uint64_t)v18;
  }
}

void siri::dialogengine::PatternSchema::AddGroup(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v4 = (void *)a1[25];
    unint64_t v5 = a1[26];
    if ((unint64_t)v4 < v5)
    {
      uint64_t v6 = a2[1];
      *uint64_t v4 = *a2;
      v4[1] = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v7 = v4 + 2;
      goto LABEL_23;
    }
    uint64_t v8 = a1[24];
    uint64_t v9 = ((uint64_t)v4 - v8) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v12);
    int v15 = &v13[16 * v9];
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)int v15 = *(_OWORD *)a2;
    if (*((void *)&v16 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = &v13[16 * v14];
    unint64_t v7 = v15 + 16;
    int v18 = (void *)a1[24];
    uint64_t v19 = (void *)a1[25];
    if (v19 == v18)
    {
      a1[24] = v15;
      a1[25] = v7;
      a1[26] = v17;
      if (!v19) {
        goto LABEL_23;
      }
    }
    else
    {
      do
      {
        long long v20 = *((_OWORD *)v19 - 1);
        v19 -= 2;
        *((_OWORD *)v15 - 1) = v20;
        v15 -= 16;
        *uint64_t v19 = 0;
        v19[1] = 0;
      }
      while (v19 != v18);
      uint64_t v21 = (void *)a1[24];
      uint64_t v19 = (void *)a1[25];
      a1[24] = v15;
      a1[25] = v7;
      a1[26] = v17;
      if (v19 != v21)
      {
        do
        {
          uint64_t v22 = (std::__shared_weak_count *)*(v19 - 1);
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          v19 -= 2;
        }
        while (v19 != v21);
        uint64_t v19 = v21;
      }
      if (!v19) {
        goto LABEL_23;
      }
    }
    operator delete(v19);
LABEL_23:
    a1[25] = v7;
  }
}

BOOL siri::dialogengine::PatternSchema::Validate(siri::dialogengine::PatternSchema *this, siri::dialogengine::Context *a2)
{
  *((void *)&v106 + 1) = *MEMORY[0x1E4F143B8];
  if (*((char *)this + 23) < 0)
  {
    if (*((void *)this + 1)) {
      goto LABEL_7;
    }
  }
  else if (*((unsigned char *)this + 23))
  {
    goto LABEL_7;
  }
  std::operator+<char>();
  siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&v104);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
LABEL_7:
  if (*((char *)this + 95) < 0)
  {
    if (!*((void *)this + 10)) {
      goto LABEL_23;
    }
  }
  else if (!*((unsigned char *)this + 95))
  {
    goto LABEL_23;
  }
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v105, "): ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v103.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *((char *)this + 47);
  if (v6 >= 0) {
    unint64_t v7 = (char *)this + 24;
  }
  else {
    unint64_t v7 = (const std::string::value_type *)*((void *)this + 3);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *((unsigned __int8 *)this + 47);
  }
  else {
    std::string::size_type v8 = *((void *)this + 4);
  }
  uint64_t v9 = std::string::append(&v103, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v104.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Context::AddSchemaWarning((uint64_t *)a2, (long long *)&v104);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
LABEL_23:
  uint64_t v11 = (void *)*((void *)this + 24);
  unsigned int v96 = (void *)*((void *)this + 25);
  if (v11 != v96)
  {
    unint64_t v12 = (char *)this + 24;
    while (1)
    {
      uint64_t v13 = *v11;
      uint64_t v14 = (std::__shared_weak_count *)v11[1];
      v97 = v11;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v13 + 40))(&v104, v13);
      if (v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0] == 16
        && **(_DWORD **)v104.__r_.__value_.__l.__data_ == 4)
      {
        v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
        if (*(char *)(v13 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)(v13 + 8), *(void *)(v13 + 16));
        }
        else
        {
          long long v15 = *(_OWORD *)(v13 + 8);
          v102.__r_.__value_.__r.__words[2] = *(void *)(v13 + 24);
          *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v15;
        }
        unsigned int v74 = std::string::insert(&v102, 0, "Pattern schema contains a group '");
        long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
        v105.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v75;
        v74->__r_.__value_.__l.__size_ = 0;
        v74->__r_.__value_.__r.__words[2] = 0;
        v74->__r_.__value_.__r.__words[0] = 0;
        std::string v76 = std::string::append(&v105, "' marked as disallow: ");
        long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v77;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        v76->__r_.__value_.__r.__words[0] = 0;
        int v78 = *((char *)this + 47);
        if (v78 >= 0) {
          std::string v79 = v12;
        }
        else {
          std::string v79 = (const std::string::value_type *)*((void *)this + 3);
        }
        if (v78 >= 0) {
          std::string::size_type v80 = *((unsigned __int8 *)this + 47);
        }
        else {
          std::string::size_type v80 = *((void *)this + 4);
        }
        uint64_t v81 = std::string::append(&v103, v79, v80);
        long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
        v104.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v82;
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&v104);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v104.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v105.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v102.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
      }
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v13 + 56))(&v104, v13);
      std::string::size_type size = v104.__r_.__value_.__l.__size_;
      std::string::size_type v16 = v104.__r_.__value_.__r.__words[0];
      v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v13 + 56))(&v104, v13);
      BOOL v18 = v16 != size;
      std::string::size_type v20 = v104.__r_.__value_.__l.__size_;
      for (uint64_t i = (uint64_t *)v104.__r_.__value_.__r.__words[0]; i != (uint64_t *)v20; i += 2)
      {
        uint64_t v21 = *i;
        uint64_t v22 = (std::__shared_weak_count *)i[1];
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        memset(&v103, 0, sizeof(v103));
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(&v103, *(void **)(v21 + 24), *(void **)(v21 + 32), (uint64_t)(*(void *)(v21 + 32) - *(void *)(v21 + 24)) >> 4);
        BOOL v23 = v103.__r_.__value_.__l.__size_ - v103.__r_.__value_.__r.__words[0] == 16
           && **(_DWORD **)v103.__r_.__value_.__l.__data_ == 4;
        v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        if (!v23)
        {
          BOOL v18 = 0;
          break;
        }
      }
      v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v13 + 72))(&v104, v13);
      v98 = v14;
      long long v24 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
      v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v13 + 72))(&v104, v13);
      std::string::size_type v25 = v104.__r_.__value_.__l.__size_;
      for (uint64_t j = (uint64_t *)v104.__r_.__value_.__r.__words[0]; j != (uint64_t *)v25; j += 2)
      {
        uint64_t v27 = *j;
        unint64_t v28 = (std::__shared_weak_count *)j[1];
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        memset(&v103, 0, sizeof(v103));
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(&v103, *(void **)(v27 + 24), *(void **)(v27 + 32), (uint64_t)(*(void *)(v27 + 32) - *(void *)(v27 + 24)) >> 4);
        BOOL v29 = v103.__r_.__value_.__l.__size_ - v103.__r_.__value_.__r.__words[0] == 16
           && **(_DWORD **)v103.__r_.__value_.__l.__data_ == 4;
        v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        if (!v29)
        {
          v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
          char v31 = v98;
          unint64_t v12 = (char *)this + 24;
          goto LABEL_79;
        }
      }
      v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
      BOOL v30 = (void)v24 != *((void *)&v24 + 1) && v18;
      char v31 = v98;
      unint64_t v12 = (char *)this + 24;
      if (v30)
      {
        if (*(char *)(v13 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)(v13 + 8), *(void *)(v13 + 16));
        }
        else
        {
          long long v32 = *(_OWORD *)(v13 + 8);
          v102.__r_.__value_.__r.__words[2] = *(void *)(v13 + 24);
          *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v32;
        }
        char v33 = std::string::insert(&v102, 0, "Pattern group '");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v105.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        unsigned int v35 = std::string::append(&v105, " has all dialog and visual components disallowed: ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        int v37 = *((char *)this + 47);
        if (v37 >= 0) {
          uint64_t v38 = (char *)this + 24;
        }
        else {
          uint64_t v38 = (const std::string::value_type *)*((void *)this + 3);
        }
        if (v37 >= 0) {
          std::string::size_type v39 = *((unsigned __int8 *)this + 47);
        }
        else {
          std::string::size_type v39 = *((void *)this + 4);
        }
        char v40 = std::string::append(&v103, v38, v39);
        long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v104.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&v104);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v104.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v105.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v102.__r_.__value_.__l.__data_);
        }
      }
LABEL_79:
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v13 + 48))(&v104, v13);
      long long v42 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
      v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
      if (*((void *)&v42 + 1) == (void)v42) {
        goto LABEL_100;
      }
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v13 + 56))(&v104, v13);
      if (v104.__r_.__value_.__l.__size_ != v104.__r_.__value_.__r.__words[0]) {
        break;
      }
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v13 + 72))(&v103, v13);
      long long v43 = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
      v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
      if (*((void *)&v43 + 1) != (void)v43) {
        goto LABEL_83;
      }
LABEL_100:
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v13 + 48))(&v104, v13);
      std::string::size_type v55 = v104.__r_.__value_.__l.__size_;
      for (std::string::size_type k = v104.__r_.__value_.__r.__words[0]; k != v55; k += 24)
      {
        siri::dialogengine::PatternRegistry::GetSchema((uint64_t)a2, (const std::string::value_type **)k, (uint64_t *)&v103);
        std::string::size_type v56 = v103.__r_.__value_.__r.__words[0];
        if (v103.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103.__r_.__value_.__l.__size_);
        }
        if (!v56)
        {
          if (*(char *)(v13 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)(v13 + 8), *(void *)(v13 + 16));
          }
          else
          {
            long long v57 = *(_OWORD *)(v13 + 8);
            v99.__r_.__value_.__r.__words[2] = *(void *)(v13 + 24);
            *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v57;
          }
          unsigned int v58 = std::string::insert(&v99, 0, "Pattern group '");
          long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v100.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          unsigned int v60 = std::string::append(&v100, " specifies non-existing nested pattern '");
          long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
          v101.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v61;
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          int v62 = *(char *)(k + 23);
          if (v62 >= 0) {
            uint64_t v63 = (const std::string::value_type *)k;
          }
          else {
            uint64_t v63 = *(const std::string::value_type **)k;
          }
          if (v62 >= 0) {
            std::string::size_type v64 = *(unsigned __int8 *)(k + 23);
          }
          else {
            std::string::size_type v64 = *(void *)(k + 8);
          }
          unsigned int v65 = std::string::append(&v101, v63, v64);
          long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          v102.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          unsigned int v67 = std::string::append(&v102, "' in: ");
          long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
          v105.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v68;
          v67->__r_.__value_.__l.__size_ = 0;
          v67->__r_.__value_.__r.__words[2] = 0;
          v67->__r_.__value_.__r.__words[0] = 0;
          int v69 = *((char *)this + 47);
          if (v69 >= 0) {
            v70 = v12;
          }
          else {
            v70 = (const std::string::value_type *)*((void *)this + 3);
          }
          if (v69 >= 0) {
            std::string::size_type v71 = *((unsigned __int8 *)this + 47);
          }
          else {
            std::string::size_type v71 = *((void *)this + 4);
          }
          uint64_t v72 = std::string::append(&v105, v70, v71);
          long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
          v103.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v73;
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&v103);
          if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v103.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v105.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v102.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v101.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v99.__r_.__value_.__l.__data_);
          }
        }
      }
      v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      uint64_t v11 = v97 + 2;
      if (v97 + 2 == v96) {
        goto LABEL_151;
      }
    }
    v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
LABEL_83:
    if (*(char *)(v13 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)(v13 + 8), *(void *)(v13 + 16));
    }
    else
    {
      long long v44 = *(_OWORD *)(v13 + 8);
      v102.__r_.__value_.__r.__words[2] = *(void *)(v13 + 24);
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v44;
    }
    uint64_t v45 = std::string::insert(&v102, 0, "Pattern group '");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    uint64_t v47 = std::string::append(&v105, " specifies both nested patterns and dialog/visual components: ");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    int v49 = *((char *)this + 47);
    if (v49 >= 0) {
      unsigned int v50 = v12;
    }
    else {
      unsigned int v50 = (const std::string::value_type *)*((void *)this + 3);
    }
    if (v49 >= 0) {
      std::string::size_type v51 = *((unsigned __int8 *)this + 47);
    }
    else {
      std::string::size_type v51 = *((void *)this + 4);
    }
    long long v52 = std::string::append(&v103, v50, v51);
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (long long *)&v104);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v103.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v105.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v102.__r_.__value_.__l.__data_);
    }
    goto LABEL_100;
  }
LABEL_151:
  uint64_t v83 = (char *)*((void *)this + 15);
  uint64_t v84 = (char *)this + 128;
  if (v83 != (char *)this + 128)
  {
    do
    {
      (*(void (**)(void, siri::dialogengine::Context *))(**((void **)v83 + 7) + 24))(*((void *)v83 + 7), a2);
      unsigned int v85 = (char *)*((void *)v83 + 1);
      if (v85)
      {
        do
        {
          unsigned int v86 = v85;
          unsigned int v85 = *(char **)v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          unsigned int v86 = (char *)*((void *)v83 + 2);
          BOOL v87 = *(void *)v86 == (void)v83;
          uint64_t v83 = v86;
        }
        while (!v87);
      }
      uint64_t v83 = v86;
    }
    while (v86 != v84);
    uint64_t v83 = (char *)*((void *)this + 15);
  }
  if (v83 != v84)
  {
    do
    {
      uint64_t v88 = *((void *)v83 + 7);
      if (*(char *)(v88 + 359) < 0) {
        std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(v88 + 336), *(void *)(v88 + 344));
      }
      else {
        std::string v104 = *(std::string *)(v88 + 336);
      }
      std::string::size_type v89 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      char v90 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v89 = v104.__r_.__value_.__l.__size_;
      }
      if (v89)
      {
        if (*(char *)(v88 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)(v88 + 8), *(void *)(v88 + 16));
        }
        else
        {
          long long v91 = *(_OWORD *)(v88 + 8);
          v105.__r_.__value_.__r.__words[2] = *(void *)(v88 + 24);
          *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v91;
        }
        memset(&v103, 0, sizeof(v103));
        v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
        v102.__r_.__value_.__s.__data_[8] = 0;
        v103.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v103.__r_.__value_.__l.__size_ = v103.__r_.__value_.__r.__words[0];
        v103.__r_.__value_.__r.__words[2] = v103.__r_.__value_.__r.__words[0] + 24;
        v103.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v103.__r_.__value_.__r.__words[2], (long long *)&v105, &v106, (std::string *)v103.__r_.__value_.__l.__data_);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v105.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::CheckReferenceSetting((uint64_t *)a2, (uint64_t)this, v88, (uint64_t)&v104, (uint64_t *)&v103);
        v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
        char v90 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      }
      if (v90 < 0) {
        operator delete(v104.__r_.__value_.__l.__data_);
      }
      unsigned int v92 = (char *)*((void *)v83 + 1);
      if (v92)
      {
        do
        {
          uint64_t v93 = v92;
          unsigned int v92 = *(char **)v92;
        }
        while (v92);
      }
      else
      {
        do
        {
          uint64_t v93 = (char *)*((void *)v83 + 2);
          BOOL v87 = *(void *)v93 == (void)v83;
          uint64_t v83 = v93;
        }
        while (!v87);
      }
      uint64_t v83 = v93;
    }
    while (v93 != v84);
  }
  memset(&v104, 0, sizeof(v104));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v104, *((long long **)a2 + 77), *((long long **)a2 + 78), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 78) - *((void *)a2 + 77)) >> 3));
  BOOL v94 = v104.__r_.__value_.__r.__words[0] == v104.__r_.__value_.__l.__size_;
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  return v94;
}

void sub_1C5D2A0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (*(char *)(v46 - 137) < 0) {
    operator delete(*(void **)(v46 - 160));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::CheckReferenceSetting(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = std::__tree<std::string>::find<std::string>(a2 + 120, (const void **)a4);
  if (a2 + 128 == v10)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(v10 + 56);
    uint64_t v11 = *(std::__shared_weak_count **)(v10 + 64);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v12)
    {
      uint64_t v13 = (_OWORD *)(v12 + 32);
      if (*(char *)(v12 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(v12 + 32), *(void *)(v12 + 40));
      }
      else
      {
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = *v13;
        v67.__r_.__value_.__r.__words[2] = *(void *)(v12 + 48);
      }
      if (*(char *)(a3 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(a3 + 32), *(void *)(a3 + 40));
      }
      else {
        std::string v66 = *(std::string *)(a3 + 32);
      }
      char v24 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v67.__r_.__value_.__l.__size_;
      }
      std::string::size_type v26 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      int v27 = SHIBYTE(v66.__r_.__value_.__r.__words[2]);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v26 = v66.__r_.__value_.__l.__size_;
      }
      long long v59 = a1;
      if (size == v26)
      {
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v28 = &v66;
        }
        else {
          unint64_t v28 = (std::string *)v66.__r_.__value_.__r.__words[0];
        }
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        {
          BOOL v34 = memcmp(v67.__r_.__value_.__l.__data_, v28, v67.__r_.__value_.__l.__size_) != 0;
          if ((v27 & 0x80000000) == 0) {
            goto LABEL_44;
          }
        }
        else if (*((unsigned char *)&v67.__r_.__value_.__s + 23))
        {
          uint64_t v29 = HIBYTE(v67.__r_.__value_.__r.__words[2]) - 1;
          BOOL v30 = &v67;
          do
          {
            int v32 = v30->__r_.__value_.__s.__data_[0];
            BOOL v30 = (std::string *)((char *)v30 + 1);
            int v31 = v32;
            int v33 = v28->__r_.__value_.__s.__data_[0];
            unint64_t v28 = (std::string *)((char *)v28 + 1);
            BOOL v34 = v31 != v33;
          }
          while (v31 == v33 && v29-- != 0);
          if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_44:
            if ((v24 & 0x80) == 0) {
              goto LABEL_45;
            }
            goto LABEL_50;
          }
        }
        else
        {
          BOOL v34 = 0;
          if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_44;
          }
        }
      }
      else
      {
        BOOL v34 = 1;
        if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_44;
        }
      }
      operator delete(v66.__r_.__value_.__l.__data_);
      if ((*((unsigned char *)&v67.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_45:
        if (v34) {
          goto LABEL_46;
        }
        goto LABEL_51;
      }
LABEL_50:
      operator delete(v67.__r_.__value_.__l.__data_);
      if (v34)
      {
LABEL_46:
        std::operator+<char>();
        long long v36 = std::string::append(&v62, "' has a 'defaultValueFromSetting' value that names a setting ('");
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(v12 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)(v12 + 8), *(void *)(v12 + 16));
        }
        else
        {
          long long v38 = *(_OWORD *)(v12 + 8);
          v61.__r_.__value_.__r.__words[2] = *(void *)(v12 + 24);
          *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v38;
        }
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v40 = &v61;
        }
        else {
          char v40 = (std::string *)v61.__r_.__value_.__r.__words[0];
        }
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v41 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v41 = v61.__r_.__value_.__l.__size_;
        }
        long long v42 = std::string::append(&v63, (const std::string::value_type *)v40, v41);
        long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        long long v44 = std::string::append(&v64, "') of the wrong type (");
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(v12 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(v12 + 32), *(void *)(v12 + 40));
        }
        else
        {
          *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *v13;
          v60.__r_.__value_.__r.__words[2] = *(void *)(v12 + 48);
        }
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v46 = &v60;
        }
        else {
          uint64_t v46 = (std::string *)v60.__r_.__value_.__r.__words[0];
        }
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v47 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v47 = v60.__r_.__value_.__l.__size_;
        }
        long long v48 = std::string::append(&v65, (const std::string::value_type *)v46, v47);
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        unsigned int v50 = std::string::append(&v66, ")");
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v67.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddSchemaError(v59, (long long *)&v67);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v67.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v65.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        {
          BOOL v23 = (void *)v62.__r_.__value_.__r.__words[0];
          goto LABEL_116;
        }
        goto LABEL_117;
      }
LABEL_51:
      if (*(char *)(v12 + 231) < 0) {
        std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(v12 + 208), *(void *)(v12 + 216));
      }
      else {
        std::string v67 = *(std::string *)(v12 + 208);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v39 = v67.__r_.__value_.__l.__size_;
        operator delete(v67.__r_.__value_.__l.__data_);
        if (v39) {
          goto LABEL_117;
        }
      }
      else if (*((unsigned char *)&v67.__r_.__value_.__s + 23))
      {
        goto LABEL_117;
      }
      if (*(char *)(v12 + 359) < 0) {
        std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(v12 + 336), *(void *)(v12 + 344));
      }
      else {
        std::string v67 = *(std::string *)(v12 + 336);
      }
      std::string::size_type v52 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v52 = v67.__r_.__value_.__l.__size_;
      }
      if (v52)
      {
        unint64_t v53 = a5[1];
        if (v53 >= a5[2])
        {
          uint64_t v54 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a5, (long long *)a4);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a5, (long long *)a4);
          uint64_t v54 = v53 + 24;
        }
        a5[1] = v54;
        if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*a5, v54, (unsigned __int8 **)&v67) == v54)
        {
          siri::dialogengine::CheckReferenceSetting(v59, a2, a3, &v67, a5);
        }
        else
        {
          if (*(char *)(a3 + 31) < 0) {
            std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
          }
          else {
            std::string v64 = *(std::string *)(a3 + 8);
          }
          std::string::size_type v55 = std::string::insert(&v64, 0, "Pattern setting '");
          long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v65.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          long long v57 = std::string::append(&v65, "' is part of a cycle of 'defaultValueFromSetting' values");
          long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          v66.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddSchemaError(v59, (long long *)&v66);
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v65.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
        }
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      {
        BOOL v23 = (void *)v67.__r_.__value_.__r.__words[0];
        goto LABEL_116;
      }
      goto LABEL_117;
    }
  }
  std::operator+<char>();
  uint64_t v14 = std::string::append(&v64, "' has a 'defaultValueFromSetting' value that names a setting that does not exist ('");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = *(char *)(a4 + 23);
  if (v16 >= 0) {
    uint64_t v17 = (const std::string::value_type *)a4;
  }
  else {
    uint64_t v17 = *(const std::string::value_type **)a4;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v18 = *(void *)(a4 + 8);
  }
  uint64_t v19 = std::string::append(&v65, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  uint64_t v21 = std::string::append(&v66, "')");
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Context::AddSchemaError(a1, (long long *)&v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v23 = (void *)v64.__r_.__value_.__r.__words[0];
LABEL_116:
    operator delete(v23);
  }
LABEL_117:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C5D2A9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (*(char *)(v50 - 89) < 0) {
    operator delete(*(void **)(v50 - 112));
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      int v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      int v6 = a3[1];
    }
    if (v5 >= 0) {
      unint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      unint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t non-virtual thunk to'siri::dialogengine::GroupAll::Validate(siri::dialogengine::GroupAll *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::GroupAll::Validate((siri::dialogengine::GroupAll *)((char *)this - 64), a2);
}

uint64_t siri::dialogengine::GroupAll::Validate(siri::dialogengine::GroupAll *this, siri::dialogengine::Context *a2)
{
  char v4 = siri::dialogengine::Group::Validate((uint64_t **)this, a2);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v19, (const void ***)this + 9);
  char v5 = v19;
  if (v19 != (long long *)v20)
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v16, v5 + 2);
      std::string::basic_string[abi:ne180100]<0>(__p, "all");
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)__p, (uint64_t)&v16, v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v6 = v15;
      unsigned __int8 v7 = v15;
      if ((v15 & 0x80u) != 0) {
        unint64_t v6 = (unint64_t)v14[1];
      }
      if (v6)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)v14, 0);
        char v4 = 0;
        unsigned __int8 v7 = v15;
      }
      if ((v7 & 0x80) != 0) {
        operator delete(v14[0]);
      }
      if (v18 < 0) {
        operator delete(v17);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      uint64_t v8 = (long long *)*((void *)v5 + 1);
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = *(long long **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (long long *)*((void *)v5 + 2);
          BOOL v10 = *(void *)v9 == (void)v5;
          char v5 = v9;
        }
        while (!v10);
      }
      char v5 = v9;
    }
    while (v9 != (long long *)v20);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v20[0]);
  return v4 & 1;
}

void sub_1C5D2ADA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::pair<std::string const,std::string>::~pair((uint64_t)&a22);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(v22 - 64));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'siri::dialogengine::GroupAll::~GroupAll(siri::dialogengine::GroupAll *this)
{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupAll *)((char *)this - 64));
  JUMPOUT(0x1C8796D70);
}

{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupAll *)((char *)this - 64));
}

void siri::dialogengine::Group::~Group(siri::dialogengine::Group *this)
{
  *(void *)this = &unk_1F2126BE0;
  *((void *)this + 8) = &unk_1F2126C38;
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  uint64_t v2 = (void **)((char *)this + 208);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)this = &unk_1F2126C60;
  *((void *)this + 8) = &unk_1F2126CB8;
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  *((void *)this + 8) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

{
  uint64_t vars8;

  siri::dialogengine::Group::~Group(this);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::GroupAll::Execute(siri::dialogengine::GroupAll *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t *a3@<X8>)
{
  siri::dialogengine::Node::GetIdForDebug(this, a2, 0, &v22);
  unint64_t v6 = std::string::insert(&v22, 0, "Executing 'All' group");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  std::string::size_type v24 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((*(uint64_t (**)(siri::dialogengine::GroupAll *, siri::dialogengine::Context *))(*(void *)this + 48))(this, a2))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v9 = *((void *)this + 26);
    for (uint64_t i = *((void *)this + 27); v9 != i; v9 += 16)
    {
      uint64_t v12 = *(siri::dialogengine::Node **)v9;
      uint64_t v11 = *(std::__shared_weak_count **)(v9 + 8);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v12)
      {
        if ((*(uint64_t (**)(siri::dialogengine::Node *, siri::dialogengine::Context *))(*(void *)v12 + 48))(v12, a2))
        {
          (*(void (**)(void **__return_ptr, siri::dialogengine::Node *, siri::dialogengine::Context *))(*(void *)v12 + 40))(__p, v12, a2);
          if (__p[0] == __p[1])
          {
            siri::dialogengine::Node::GetIdForDebug(v12, a2, 0, &v21);
            uint64_t v17 = std::string::insert(&v21, 0, "  Child of <all> returned an empty result - skipping: ");
            long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
            v22.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v18;
            v17->__r_.__value_.__l.__size_ = 0;
            v17->__r_.__value_.__r.__words[2] = 0;
            v17->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Log::Debug((siri::dialogengine *)&v22);
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v22.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v21.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            siri::dialogengine::Node::GetIdForDebug(v12, a2, 0, &v21);
            char v13 = std::string::insert(&v21, 0, "  Match found for <all> group - adding: ");
            long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
            v22.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v14;
            v13->__r_.__value_.__l.__size_ = 0;
            v13->__r_.__value_.__r.__words[2] = 0;
            v13->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Log::Debug((siri::dialogengine *)&v22);
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v22.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v21.__r_.__value_.__l.__data_);
            }
            std::vector<std::shared_ptr<siri::dialogengine::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::Node>*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::Node>*>>(a3, a3[1], (uint64_t *)__p[0], (void *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 4);
          }
          v22.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
        }
        else
        {
          siri::dialogengine::Node::GetIdForDebug(v12, a2, 0, &v22);
          unsigned __int8 v15 = std::string::insert(&v22, 0, "  Condition for child of <all> failed - skipping: ");
          long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          std::string::size_type v24 = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
          if (SHIBYTE(v24) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v22.__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"  Programming error: NULL node in <all> group", v8);
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
  }
  else
  {
    siri::dialogengine::Node::GetIdForDebug(this, a2, 0, &v22);
    uint64_t v19 = std::string::insert(&v22, 0, "Condition for <all> group failed - skipping: ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    std::string::size_type v24 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_1C5D2B2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::shared_ptr<siri::dialogengine::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::Node>*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::Node>*>>(uint64_t *result, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    unint64_t v6 = a3;
    long long v7 = result;
    uint64_t v8 = *result;
    uint64_t v9 = a2 - *result;
    uint64_t v10 = v9 >> 4;
    uint64_t v11 = (char *)(*result + (v9 & 0xFFFFFFFFFFFFFFF0));
    uint64_t v13 = (uint64_t)(result + 2);
    uint64_t v12 = result[2];
    long long v14 = (char *)result[1];
    if (a5 <= (v12 - (uint64_t)v14) >> 4)
    {
      uint64_t v19 = (v14 - v11) >> 4;
      if (v19 >= a5)
      {
        long long v20 = &a3[2 * a5];
        uint64_t result = (uint64_t *)result[1];
      }
      else
      {
        long long v20 = &a3[2 * v19];
        uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::ConditionEntry>>,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((uint64_t)(result + 2), v20, a4, v14);
        v7[1] = (uint64_t)result;
        if (v14 - v11 < 1) {
          return result;
        }
      }
      std::string v21 = &v11[16 * a5];
      std::string v22 = (char *)&result[-2 * a5];
      BOOL v23 = result;
      if (v22 < v14)
      {
        BOOL v23 = result;
        do
        {
          *(_OWORD *)BOOL v23 = *(_OWORD *)v22;
          v23 += 2;
          *(void *)std::string v22 = 0;
          *((void *)v22 + 1) = 0;
          v22 += 16;
        }
        while (v22 < v14);
      }
      v7[1] = (uint64_t)v23;
      if (result != (uint64_t *)v21)
      {
        std::string::size_type v24 = (std::__shared_weak_count **)(result - 1);
        uint64_t v25 = 16 * (((char *)result - v21) >> 4);
        uint64_t v26 = v8 + 16 * v10 - 16;
        do
        {
          int v27 = (void *)(v26 + v25);
          long long v28 = *(_OWORD *)(v26 + v25);
          *int v27 = 0;
          v27[1] = 0;
          uint64_t v29 = *v24;
          *(_OWORD *)(v24 - 1) = v28;
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
          v24 -= 2;
          v25 -= 16;
        }
        while (v25);
      }
      return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *,std::shared_ptr<siri::dialogengine::PatternSchemaUsage> *>(v6, v20, v11);
    }
    else
    {
      unint64_t v15 = a5 + ((uint64_t)&v14[-v8] >> 4);
      if (v15 >> 60) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v12 - v8;
      if (v16 >> 3 > v15) {
        unint64_t v15 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      uint64_t v41 = v13;
      if (v17) {
        unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v30 = v17 + 16 * v10;
      unint64_t v38 = v17;
      *(void *)&long long v39 = v30;
      unint64_t v40 = v17 + 16 * v18;
      int v31 = (_OWORD *)(v30 + 16 * a5);
      int v32 = (void *)v30;
      do
      {
        *int v32 = *v6;
        uint64_t v33 = v6[1];
        v32[1] = v33;
        if (v33) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
        }
        v32 += 2;
        v6 += 2;
      }
      while (v32 != (void *)v31);
      uint64_t v34 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::ChunkText>>,std::reverse_iterator<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::reverse_iterator<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::reverse_iterator<std::shared_ptr<siri::dialogengine::ChunkText>*>>(v13, (uint64_t)v11, v11, *v7, (void *)*v7, v30, v30);
      unsigned int v35 = (char *)v7[1];
      long long v44 = v31;
      long long v45 = v31;
      v42[0] = v13;
      v42[1] = &v44;
      v42[2] = &v45;
      if (v11 != v35)
      {
        do
        {
          *v31++ = *(_OWORD *)v11;
          *(void *)uint64_t v11 = 0;
          *((void *)v11 + 1) = 0;
          v11 += 16;
        }
        while (v11 != v35);
        long long v45 = v31;
      }
      char v43 = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::dialogengine::ChunkText>>,std::shared_ptr<siri::dialogengine::ChunkText>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v42);
      long long v36 = *(_OWORD *)v7;
      *long long v7 = v34;
      v7[1] = (uint64_t)v31;
      long long v39 = v36;
      uint64_t v37 = v7[2];
      v7[2] = v40;
      unint64_t v40 = v37;
      unint64_t v38 = v36;
      return (uint64_t *)std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v38);
    }
  }
  return result;
}

void siri::dialogengine::GroupAll::~GroupAll(siri::dialogengine::GroupAll *this)
{
  siri::dialogengine::Group::~Group(this);
  JUMPOUT(0x1C8796D70);
}

double siri::dialogengine::GroupAll::GroupAll(siri::dialogengine::GroupAll *this)
{
  *((void *)this + 7) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((void *)this + 31) = 0;
  *(void *)this = &unk_1F211A078;
  *((void *)this + 8) = &unk_1F211A0D0;
  return result;
}

{
  double result;

  *((void *)this + 7) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((void *)this + 31) = 0;
  *(void *)this = &unk_1F211A078;
  *((void *)this + 8) = &unk_1F211A0D0;
  return result;
}

double siri::dialogengine::Node::Node(siri::dialogengine::Node *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *(void *)this = &unk_1F2126C60;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = &unk_1F2126CB8;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *((void *)this + 25) = 0;
  return result;
}

uint64_t siri::dialogengine::LogEntry::LogEntry(uint64_t a1, int a2, long long *a3)
{
  *(_DWORD *)a1 = a2;
  char v4 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(void *)(a1 + 32) = 0;
  gettimeofday(&v7, 0);
  *(double *)(a1 + 32) = (double)v7.tv_usec / 1000000.0 + (double)v7.tv_sec;
  return a1;
}

uint64_t siri::dialogengine::LogEntry::GetLevel(siri::dialogengine::LogEntry *this)
{
  return *(unsigned int *)this;
}

void *siri::dialogengine::LogEntry::GetLevelAsString@<X0>(siri::dialogengine::LogEntry *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(unsigned int *)this;
  if (v4 > 3) {
    long long v5 = "unknown";
  }
  else {
    long long v5 = off_1E651DC28[v4];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

void siri::dialogengine::LogEntry::GetLine(siri::dialogengine::LogEntry *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

double siri::dialogengine::LogEntry::GetTimeStamp(siri::dialogengine::LogEntry *this)
{
  return *((double *)this + 4);
}

void siri::dialogengine::LogEntry::AsString(siri::dialogengine::LogEntry *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *(unsigned int *)this;
  if (v4 > 3) {
    long long v5 = "unknown";
  }
  else {
    long long v5 = off_1E651DC28[v4];
  }
  std::string::basic_string[abi:ne180100]<0>(v12, v5);
  siri::dialogengine::StringToUpper((uint64_t)v12, (uint64_t)&v14);
  unint64_t v6 = std::string::append(&v14, ": ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)this + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 8);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

void sub_1C5D2BA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v27 - 25) < 0) {
    operator delete(*(void **)(v27 - 48));
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Log::LogWithLevel(uint64_t a1, unsigned int a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  {
    siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "DialogEngine");
  }
  if (siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog
    || (puts("ERROR: OS log handle is null.  Attempting to recreate"),
        os_log_t v4 = os_log_create("com.apple.siri.DialogEngine", "DialogEngine"),
        long long v5 = (void *)siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog,
        siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog = (uint64_t)v4,
        v5,
        siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog))
  {
    siri::dialogengine::LogEntry::LogEntry((uint64_t)v27, a2, (long long *)a1);
    if (a2 >= 4) {
      os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
    }
    else {
      os_log_type_t v6 = (0x10020001u >> (8 * a2));
    }
    int v7 = *(char *)(a1 + 23);
    if (v7 < 0 && (unint64_t v8 = *(void *)(a1 + 8), v8 >= 0x401))
    {
      if (v8 <= 0xFFFFFFFFFFFFFC7ALL)
      {
        std::string::size_type v16 = 0;
        do
        {
          std::string::basic_string[abi:ne180100]<0>(&buf, "\n");
          unint64_t v17 = siri::dialogengine::StringRFind(a1, (uint64_t)&buf, v16 + 900);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          unint64_t v18 = *(unsigned __int8 *)(a1 + 23);
          if ((v18 & 0x80u) != 0) {
            unint64_t v18 = *(void *)(a1 + 8);
          }
          if (v17 <= v16 || v17 == -1 || v16 + 900 > v18) {
            std::string::size_type v21 = v16 + 900;
          }
          else {
            std::string::size_type v21 = v17;
          }
          std::string::basic_string(&v26, (const std::string *)a1, v16, v21 - v16, (std::allocator<char> *)&buf);
          std::string v22 = siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog;
          BOOL v11 = os_log_type_enabled((os_log_t)siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog, v6);
          if (v11)
          {
            std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
            if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v26.__r_.__value_.__l.__size_;
            }
            std::string::size_type v24 = size + v16;
            uint64_t v25 = &v26;
            if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v25 = (std::string *)v26.__r_.__value_.__r.__words[0];
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 134218498;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v16;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v24;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
            int v31 = v25;
            _os_log_impl(&dword_1C5C1E000, v22, v6, "LOG_CHUNK[%zu:%zu]=%s", (uint8_t *)&buf, 0x20u);
          }
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v26.__r_.__value_.__l.__data_);
          }
          std::string::size_type v16 = v21;
        }
        while (v21 < v8);
        goto LABEL_17;
      }
      uint64_t v9 = siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog;
      os_log_type_t v10 = v6;
      BOOL v11 = os_log_type_enabled((os_log_t)siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog, v6);
      if (v11)
      {
        std::string::size_type v12 = *(void *)a1;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v12;
LABEL_16:
        _os_log_impl(&dword_1C5C1E000, v9, v10, "%s", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog;
      os_log_type_t v10 = v6;
      BOOL v11 = os_log_type_enabled((os_log_t)siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog, v6);
      if (v11)
      {
        std::string::size_type v13 = *(void *)a1;
        if (v7 >= 0) {
          std::string::size_type v13 = a1;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v13;
        goto LABEL_16;
      }
    }
LABEL_17:
    siri::dialogengine::GetLogStateRef((siri::dialogengine *)v11);
    if ((void)xmmword_1EA3D8360)
    {
      siri::dialogengine::GetLogStateRef(v14);
      if (!(void)xmmword_1EA3D8360) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      std::string v14 = (siri::dialogengine *)(*(uint64_t (**)(void, unsigned char *))(*(void *)xmmword_1EA3D8360 + 48))(xmmword_1EA3D8360, v27);
    }
    siri::dialogengine::GetLogStateRef(v14);
    if ((_BYTE)siri::dialogengine::GetLogStateRef(void)::logState)
    {
      siri::dialogengine::LogEntry::AsString((siri::dialogengine::LogEntry *)v27, &buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string v15 = (void *)buf.__r_.__value_.__r.__words[0];
        puts(buf.__r_.__value_.__l.__data_);
        operator delete(v15);
      }
      else
      {
        puts((const char *)&buf);
      }
    }
    if (v29 < 0) {
      operator delete(__p);
    }
    return;
  }
  printf("ERROR: Could not create OS log");
}

void sub_1C5D2BEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetLogStateRef(siri::dialogengine *this)
{
  {
    siri::dialogengine::GetLogStateRef(void)::logState = 0;
    xmmword_1EA3D8360 = 0u;
    unk_1EA3D8370 = 0u;
    byte_1EA3D8380 = 0;
    __cxa_atexit((void (*)(void *))siri::dialogengine::LogState::~LogState, &siri::dialogengine::GetLogStateRef(void)::logState, &dword_1C5C1E000);
  }
}

void siri::dialogengine::LogState::~LogState(siri::dialogengine::LogState *this)
{
  uint64_t v2 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__function::__value_func<void ()(siri::dialogengine::LogEntry const&)>::~__value_func[abi:ne180100]((void *)this + 1);
}

void *std::__function::__value_func<void ()(siri::dialogengine::LogEntry const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL siri::dialogengine::Log::ShowDebug(siri::dialogengine::Log *this)
{
  siri::dialogengine::GetLogStateRef(this);
  if (HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState)) {
    return 1;
  }
  return siri::dialogengine::EnableDebug(v1);
}

void siri::dialogengine::Log::Info(uint64_t a1)
{
}

void siri::dialogengine::Log::Warn(uint64_t a1)
{
}

void siri::dialogengine::Log::Debug(siri::dialogengine *a1)
{
  siri::dialogengine::GetLogStateRef(a1);
  if (HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState) || siri::dialogengine::EnableDebug(v2))
  {
    siri::dialogengine::Log::LogWithLevel((uint64_t)a1, 2u);
  }
}

void siri::dialogengine::Log::Error(uint64_t a1)
{
}

void siri::dialogengine::Log::Info(siri::dialogengine::Log *this, const char *a2, ...)
{
  va_start(va, a2);
  os_log_type_t v6 = 0;
  va_copy(v5, va);
  vasprintf(&v6, (const char *)this, va);
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, v6);
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 0);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    free(v6);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)this);
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 0);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C5D2C1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Log::Warn(siri::dialogengine::Log *this, const char *a2, ...)
{
  va_start(va, a2);
  os_log_type_t v6 = 0;
  va_copy(v5, va);
  vasprintf(&v6, (const char *)this, va);
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, v6);
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 1u);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    free(v6);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)this);
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 1u);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C5D2C274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Log::Debug(siri::dialogengine::Log *this, const char *a2, ...)
{
  va_start(va, a2);
  siri::dialogengine::GetLogStateRef(this);
  if (HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState) || siri::dialogengine::EnableDebug(v3))
  {
    int v7 = 0;
    va_copy(v6, va);
    vasprintf(&v7, (const char *)this, va);
    if (v7)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 2u);
      if (v5 < 0) {
        operator delete(__p[0]);
      }
      free(v7);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)this);
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 2u);
      if (v5 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1C5D2C350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Log::Error(siri::dialogengine::Log *this, const char *a2, ...)
{
  va_start(va, a2);
  va_list v6 = 0;
  va_copy(v5, va);
  vasprintf(&v6, (const char *)this, va);
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, v6);
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    free(v6);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)this);
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C5D2C414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Log::SetOutputToStdout(siri::dialogengine::Log *this)
{
  int v1 = (int)this;
  siri::dialogengine::GetLogStateRef(this);
  LOBYTE(siri::dialogengine::GetLogStateRef(void)::logState) = v1;
  if (v1)
  {
    MEMORY[0x1F4180F10](1);
  }
}

uint64_t siri::dialogengine::Log::IsOutputToStdout(siri::dialogengine::Log *this)
{
  return siri::dialogengine::GetLogStateRef(void)::logState;
}

void siri::dialogengine::Log::SetLogDebugMessages(siri::dialogengine::Log *this)
{
  char v1 = (char)this;
  siri::dialogengine::GetLogStateRef(this);
  HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState) = v1;
  siri::dialogengine::GetLogStateRef(v2);
  if (HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState) && morphun::util::LoggerConfig::getLogLevel(v3) >= 2)
  {
    MEMORY[0x1F4180F08](1);
  }
}

uint64_t siri::dialogengine::Log::IsLogDebugMessages(siri::dialogengine::Log *this)
{
  return HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState);
}

void *siri::dialogengine::Log::SetLoggerCallback(siri::dialogengine *a1)
{
  v8[3] = *MEMORY[0x1E4F143B8];
  siri::dialogengine::GetLogStateRef(a1);
  uint64_t v2 = (siri::dialogengine *)*((void *)a1 + 3);
  if (!v2)
  {
    int v7 = 0;
    char v4 = (void *)xmmword_1EA3D8360;
    if ((uint64_t *)xmmword_1EA3D8360 != &qword_1EA3D8348)
    {
      uint64_t v3 = 0;
LABEL_9:
      int v7 = v4;
      *(void *)&xmmword_1EA3D8360 = v3;
      return std::__function::__value_func<void ()(siri::dialogengine::LogEntry const&)>::~__value_func[abi:ne180100](v6);
    }
LABEL_10:
    (*(void (**)(void))(qword_1EA3D8348 + 24))();
    (*(void (**)(void))(*(void *)xmmword_1EA3D8360 + 32))(xmmword_1EA3D8360);
    *(void *)&xmmword_1EA3D8360 = v7;
    int v7 = v6;
    return std::__function::__value_func<void ()(siri::dialogengine::LogEntry const&)>::~__value_func[abi:ne180100](v6);
  }
  if (v2 == a1)
  {
    int v7 = v6;
    (*(void (**)(siri::dialogengine *, void *))(*(void *)a1 + 24))(a1, v6);
    uint64_t v3 = v7;
  }
  else
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(siri::dialogengine *))(*(void *)v2 + 16))(v2);
    int v7 = v3;
  }
  char v4 = (void *)xmmword_1EA3D8360;
  if (v3 != v6)
  {
    if ((uint64_t *)xmmword_1EA3D8360 != &qword_1EA3D8348) {
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  if ((uint64_t *)xmmword_1EA3D8360 == &qword_1EA3D8348)
  {
    (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
    (*(void (**)(void *))(*v7 + 32))(v7);
    int v7 = 0;
    (*(void (**)(void, void *))(*(void *)xmmword_1EA3D8360 + 24))(xmmword_1EA3D8360, v6);
    (*(void (**)(void))(*(void *)xmmword_1EA3D8360 + 32))(xmmword_1EA3D8360);
    *(void *)&xmmword_1EA3D8360 = 0;
    int v7 = v6;
    (*(void (**)(void *, uint64_t *))(v8[0] + 24))(v8, &qword_1EA3D8348);
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else
  {
    (*(void (**)(void *, uint64_t *))(v6[0] + 24))(v6, &qword_1EA3D8348);
    (*(void (**)(void *))(*v7 + 32))(v7);
    int v7 = (void *)xmmword_1EA3D8360;
  }
  *(void *)&xmmword_1EA3D8360 = &qword_1EA3D8348;
  return std::__function::__value_func<void ()(siri::dialogengine::LogEntry const&)>::~__value_func[abi:ne180100](v6);
}

void sub_1C5D2C854(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5D2C8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D2C9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D2CA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Idiom_descriptor(SnippetUI *this)
{
  return file_level_enum_descriptors_Idiom_2eproto;
}

BOOL SnippetUI::Idiom_IsValid(SnippetUI *this)
{
  return this < 0xA;
}

void siri::dialogengine::CollectDialogIdsVisitor::Visit(uint64_t **this, const siri::dialogengine::Dialog *a2)
{
  if (*((char *)a2 + 119) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)a2 + 4);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(this + 1, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    char v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v4 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D2CB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::CollectDialogIdsVisitor::~CollectDialogIdsVisitor(char **this)
{
  *this = (char *)&unk_1F211B858;
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
  JUMPOUT(0x1C8796D70);
}

{
  *this = (char *)&unk_1F211B858;
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
}

uint64_t siri::dialogengine::CollectDialogIdsVisitor::GetDialogIds(siri::dialogengine::CollectDialogIdsVisitor *this)
{
  return (uint64_t)this + 8;
}

void siri::dialogengine::CreateJSONBoolVal(siri::dialogengine *this)
{
}

void sub_1C5D2CCFC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::BoolValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::BoolValue>,std::allocator<siri::dialogengine::BoolValue>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::BoolValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::BoolValue>,std::allocator<siri::dialogengine::BoolValue>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::BoolValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::BoolValue>,std::allocator<siri::dialogengine::BoolValue>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::CreateJSONDoubleVal(siri::dialogengine *this, double a2)
{
}

void sub_1C5D2CE90(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::DoubleValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::DoubleValue>,std::allocator<siri::dialogengine::DoubleValue>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::DoubleValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::DoubleValue>,std::allocator<siri::dialogengine::DoubleValue>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::DoubleValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::DoubleValue>,std::allocator<siri::dialogengine::DoubleValue>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::CreateJSONStringVal()
{
}

void sub_1C5D2D004(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::StringValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::StringValue>,std::allocator<siri::dialogengine::StringValue>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::StringValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::StringValue>,std::allocator<siri::dialogengine::StringValue>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::StringValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::StringValue>,std::allocator<siri::dialogengine::StringValue>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::CreateJSONIntVal(siri::dialogengine *this)
{
}

void sub_1C5D2D1B0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::IntValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::IntValue>,std::allocator<siri::dialogengine::IntValue>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::IntValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::IntValue>,std::allocator<siri::dialogengine::IntValue>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::IntValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::IntValue>,std::allocator<siri::dialogengine::IntValue>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::CreateJSONUintVal(siri::dialogengine *this)
{
}

void sub_1C5D2D340(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::UintValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::UintValue>,std::allocator<siri::dialogengine::UintValue>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::UintValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::UintValue>,std::allocator<siri::dialogengine::UintValue>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::UintValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::UintValue>,std::allocator<siri::dialogengine::UintValue>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::CreateJSONInt64Val(siri::dialogengine *this)
{
}

void sub_1C5D2D4D4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Int64Value *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::Int64Value>,std::allocator<siri::dialogengine::Int64Value>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Int64Value *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::Int64Value>,std::allocator<siri::dialogengine::Int64Value>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::Int64Value *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::Int64Value>,std::allocator<siri::dialogengine::Int64Value>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::CreateJSONObjectVal()
{
}

void sub_1C5D2D66C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ObjectValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::ObjectValue>,std::allocator<siri::dialogengine::ObjectValue>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ObjectValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::ObjectValue>,std::allocator<siri::dialogengine::ObjectValue>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::ObjectValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::ObjectValue>,std::allocator<siri::dialogengine::ObjectValue>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::CreateJSONArrayVal()
{
}

void sub_1C5D2D80C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4037ACD87BLL);
  _Unwind_Resume(a1);
}

void std::shared_ptr<siri::dialogengine::JSONValue>::shared_ptr[abi:ne180100]<siri::dialogengine::ArrayValue,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5D2D898(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ArrayValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::ArrayValue>,std::allocator<siri::dialogengine::ArrayValue>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ArrayValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::ArrayValue>,std::allocator<siri::dialogengine::ArrayValue>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::ArrayValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::ArrayValue>,std::allocator<siri::dialogengine::ArrayValue>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

BOOL siri::dialogengine::GetJSONBoolVal(const void **a1, const char *a2)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (v3) {
      return v3[12] != 0;
    }
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type BoolValue!", a2);
  return 0;
}

double siri::dialogengine::GetJSONDoubleVal(const void **a1, const char *a2)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (v3) {
      return v3[2];
    }
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type DoubleValue!", a2);
  return 0.0;
}

void siri::dialogengine::GetJSONStringVal(const void **a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  char v4 = *a1;
  if (v4
  {
    if (v5[39] < 0)
    {
      int v7 = (const std::string::value_type *)*((void *)v5 + 2);
      std::string::size_type v8 = *((void *)v5 + 3);
      std::string::__init_copy_ctor_external(a3, v7, v8);
    }
    else
    {
      long long v6 = *((_OWORD *)v5 + 1);
      a3->__r_.__value_.__r.__words[2] = *((void *)v5 + 4);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
    }
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type StringValue!", a2);
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

uint64_t siri::dialogengine::GetJSONIntVal(const void **a1, const char *a2)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (v3) {
      return v3[3];
    }
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type IntValue!", a2);
  return 0xFFFFFFFFLL;
}

uint64_t siri::dialogengine::GetJSONUintVal(const void **a1, const char *a2)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (v3) {
      return v3[3];
    }
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type UintValue!", a2);
  return 0;
}

uint64_t siri::dialogengine::GetJSONInt64Val(const void **a1, const char *a2)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (v3) {
      return v3[2];
    }
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type Int64Value!", a2);
  return 0;
}

void siri::dialogengine::GetJSONObjectVal(const void **a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  char v4 = *a1;
  if (v4
  {
    std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)a3, v5 + 2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type ObjectValue!", a2);
    a3[2] = 0;
    a3[1] = 0;
    *a3 = a3 + 1;
  }
}

void siri::dialogengine::GetJSONArrayVal(const void **a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *a1;
  if (v4
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    long long v6 = (char *)v5[2];
    int v7 = (char *)v5[3];
    std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>((char *)a3, v6, v7, (v7 - v6) >> 4);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type ArrayValue!", a2);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
}

void siri::dialogengine::SetJSONObjectVal(const void **a1, void *a2)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (v4)
    {
      siri::dialogengine::ObjectValue::SetVal((uint64_t)v4, a2);
    }
  }
}

void siri::dialogengine::InsertJSONObjectVal(const void **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    if (v6)
    {
      uint64_t v7 = *a3;
      std::string::size_type v8 = (std::__shared_weak_count *)a3[1];
      v9[0] = v7;
      v9[1] = (uint64_t)v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::dialogengine::ObjectValue::InsertVal((uint64_t)v6, a2, v9);
      if (v8)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
}

void sub_1C5D2DF70(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::FindAndInsertJSONObjectVal(const void **a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  char v4 = *a1;
  if (v4)
  {
    if (v8)
    {
      std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v40, v8 + 2);
      uint64_t v9 = v40;
      if (v40 != v41)
      {
        while (1)
        {
          os_log_type_t v10 = v9[7];
          int v11 = v10[2];
          if (v11 == 7)
          {
            if (v18)
            {
              uint64_t v34 = 0;
              uint64_t v35 = 0;
              uint64_t v36 = 0;
              std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>((char *)&v34, v18[2], v18[3], ((char *)v18[3] - (char *)v18[2]) >> 4);
              uint64_t v20 = v34;
              uint64_t v19 = v35;
              while (v20 != v19)
              {
                std::string::size_type v21 = *(const void **)v20;
                if (*(void *)v20
                {
                  std::string v22 = *(std::__shared_weak_count **)(v20 + 8);
                  v33[0] = v21;
                  v33[1] = v22;
                  if (v22) {
                    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  BOOL v23 = (std::__shared_weak_count *)a4[1];
                  v32[0] = *a4;
                  v32[1] = v23;
                  if (v23) {
                    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  siri::dialogengine::FindAndInsertJSONObjectVal(v33, a2, a3, v32);
                  if (v23) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
                  }
                  if (v22) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
                  }
                }
                v20 += 16;
              }
              long long v42 = (void **)&v34;
              std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v42);
            }
            goto LABEL_46;
          }
          if (v11 == 6) {
            break;
          }
LABEL_46:
          uint64_t v27 = v9[1];
          if (v27)
          {
            do
            {
              long long v28 = (void **)v27;
              uint64_t v27 = (void *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              long long v28 = (void **)v9[2];
              BOOL v29 = *v28 == v9;
              uint64_t v9 = v28;
            }
            while (!v29);
          }
          uint64_t v9 = v28;
          if (v28 == v41) {
            goto LABEL_58;
          }
        }
        uint64_t v12 = *((unsigned __int8 *)v9 + 55);
        if ((v12 & 0x80u) == 0) {
          std::string::size_type v13 = (void *)*((unsigned __int8 *)v9 + 55);
        }
        else {
          std::string::size_type v13 = v9[5];
        }
        uint64_t v14 = a2[23];
        int v15 = (char)v14;
        if ((v14 & 0x80u) != 0) {
          uint64_t v14 = *((void *)a2 + 1);
        }
        if (v13 != (void *)v14) {
          goto LABEL_37;
        }
        std::string::size_type v16 = (const void **)(v9 + 4);
        if (v15 >= 0) {
          unint64_t v17 = a2;
        }
        else {
          unint64_t v17 = *(unsigned __int8 **)a2;
        }
        if ((v12 & 0x80) != 0)
        {
          if (memcmp(*v16, v17, (size_t)v9[5]))
          {
LABEL_37:
            std::string::size_type v24 = (std::__shared_weak_count *)v9[8];
            v38[0] = v10;
            v38[1] = v24;
            if (v24) {
              atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v25 = (std::__shared_weak_count *)a4[1];
            v37[0] = *a4;
            v37[1] = v25;
            if (v25) {
              atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            siri::dialogengine::FindAndInsertJSONObjectVal(v38, a2, a3, v37);
            if (v25) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            }
            if (!v24) {
              goto LABEL_46;
            }
            std::string v26 = v24;
LABEL_45:
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
            goto LABEL_46;
          }
        }
        else if (*((unsigned char *)v9 + 55))
        {
          while (*(unsigned __int8 *)v16 == *v17)
          {
            std::string::size_type v16 = (const void **)((char *)v16 + 1);
            ++v17;
            if (!--v12)
            {
              if (v10) {
                goto LABEL_53;
              }
              goto LABEL_46;
            }
          }
          goto LABEL_37;
        }
LABEL_53:
        if (!v30) {
          goto LABEL_46;
        }
        uint64_t v31 = a4[1];
        v39[0] = *a4;
        v39[1] = v31;
        if (v31) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
        }
        siri::dialogengine::ObjectValue::InsertVal((uint64_t)v30, a3, v39);
        if (!v31) {
          goto LABEL_46;
        }
        std::string v26 = (std::__shared_weak_count *)v31;
        goto LABEL_45;
      }
LABEL_58:
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v41[0]);
    }
  }
}

void sub_1C5D2E324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a24);
  _Unwind_Resume(a1);
}

void *siri::dialogengine::ParseJSONString@<X0>(unsigned int *a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a2;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  if (!rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a1, a2))return std::string::basic_string[abi:ne180100]<0>(a3, ""); {
  if (v3[23] >= 0)
  }
    long long v6 = v3;
  else {
    long long v6 = *(const char **)v3;
  }
  uint64_t v7 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a1, v6);
  if ((*(_WORD *)(v7 + 22) & 0x400) == 0)
  {
    std::operator+<char>();
    std::string::size_type v8 = std::string::append(&v12, " is not a string type");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    return std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v7);
  return std::string::basic_string[abi:ne180100]<0>(a3, String);
}

void sub_1C5D2E4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(unsigned int *a1, const char *a2)
{
  v5[3] = *MEMORY[0x1E4F143B8];
  v5[1] = a2;
  v5[2] = 0x405000000000000;
  v5[0] = rapidjson::GenericStringRef<char>::NotNullStrLen(a2);
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>((uint64_t)&v4, a1, (uint64_t)v5);
  if (*((_WORD *)a1 + 11) != 3) {
    __assert_rtn("MemberEnd", "document.h", 1158, "IsObject()");
  }
  return v4 != *((void *)a1 + 1) + 48 * *a1;
}

uint64_t rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(unsigned int *a1, const char *a2)
{
  v5[3] = *MEMORY[0x1E4F143B8];
  v5[1] = a2;
  v5[2] = 0x405000000000000;
  v5[0] = rapidjson::GenericStringRef<char>::NotNullStrLen(a2);
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>((uint64_t)&v4, a1, (uint64_t)v5);
  if (*((_WORD *)a1 + 11) != 3) {
    __assert_rtn("MemberEnd", "document.h", 1164, "IsObject()");
  }
  if (v4 == *((void *)a1 + 1) + 48 * *a1) {
    __assert_rtn("operator[]", "document.h", 1133, "false");
  }
  return v4 + 24;
}

uint64_t rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(uint64_t result)
{
  if ((*(_WORD *)(result + 22) & 0x400) == 0) {
    __assert_rtn("GetString", "document.h", 1767, "IsString()");
  }
  if ((*(_WORD *)(result + 22) & 0x1000) == 0) {
    return *(void *)(result + 8);
  }
  return result;
}

size_t rapidjson::GenericStringRef<char>::NotNullStrLen(const char *a1)
{
  if (!a1) {
    __assert_rtn("NotNullStrLen", "document.h", 334, "str != 0");
  }
  return strlen(a1);
}

uint64_t rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if (*((_WORD *)a2 + 11) != 3) {
    __assert_rtn("FindMember", "document.h", 1249, "IsObject()");
  }
  if ((*(_WORD *)(a3 + 22) & 0x400) == 0) {
    __assert_rtn("FindMember", "document.h", 1250, "name.IsString()");
  }
  va_list v5 = (void *)result;
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)uint64_t result = v6;
  while (v6 != *((void *)a2 + 1) + 48 * *a2)
  {
    if ((*(_WORD *)(a3 + 22) & 0x400) == 0) {
      __assert_rtn("StringEqual", "document.h", 2086, "IsString()");
    }
    if ((*(_WORD *)(v6 + 22) & 0x400) == 0) {
      __assert_rtn("StringEqual", "document.h", 2087, "rhs.IsString()");
    }
    unsigned int StringLength = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetStringLength((unsigned int *)a3);
    uint64_t result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetStringLength((unsigned int *)v6);
    if (StringLength == result)
    {
      String = (const void *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(a3);
      uint64_t result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v6);
      if (String == (const void *)result) {
        break;
      }
      uint64_t result = memcmp(String, (const void *)result, StringLength);
      if (!result) {
        break;
      }
    }
    v6 += 48;
    *va_list v5 = v6;
    if (*((_WORD *)a2 + 11) != 3) {
      __assert_rtn("MemberEnd", "document.h", 1164, "IsObject()");
    }
  }
  return result;
}

uint64_t rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetStringLength(unsigned int *a1)
{
  if ((*((_WORD *)a1 + 11) & 0x400) == 0) {
    __assert_rtn("GetStringLength", "document.h", 1772, "IsString()");
  }
  if ((*((_WORD *)a1 + 11) & 0x1000) != 0) {
    return (21 - *((char *)a1 + 21));
  }
  else {
    return *a1;
  }
}

double siri::dialogengine::ParseJSONDouble(unsigned int *a1, const char *a2)
{
  uint64_t v2 = a2;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  if (!rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a1, a2))return 0.0; {
  if (v2[23] >= 0)
  }
    uint64_t v4 = v2;
  else {
    uint64_t v4 = *(const char **)v2;
  }
  va_list v5 = (_WORD *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a1, v4);
  if ((v5[11] & 0x200) == 0)
  {
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v10, " is not a double type");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    return 0.0;
  }
  return rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetDouble(v5, v6);
}

void sub_1C5D2E9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetDouble(_WORD *a1, double a2)
{
  __int16 v2 = a1[11];
  if ((v2 & 0x10) == 0) {
    __assert_rtn("GetDouble", "document.h", 1740, "IsNumber()");
  }
  if ((a1[11] & 0x200) != 0) {
    return *(double *)a1;
  }
  if ((v2 & 0x20) != 0) {
    return (double)*(int *)a1;
  }
  if ((v2 & 0x40) != 0)
  {
    LODWORD(a2) = *(_DWORD *)a1;
    return (double)*(unint64_t *)&a2;
  }
  if ((v2 & 0x80) == 0)
  {
    if ((a1[11] & 0x100) == 0) {
      __assert_rtn("GetDouble", "document.h", 1745, "(data_.f.flags & kUint64Flag) != 0");
    }
    a2 = *(double *)a1;
    return (double)*(unint64_t *)&a2;
  }
  return (double)*(uint64_t *)a1;
}

uint64_t siri::dialogengine::ParseJSONUint(unsigned int *a1, const char *a2)
{
  __int16 v2 = a2;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  uint64_t result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a1, a2);
  if (result)
  {
    if (v2[23] >= 0) {
      va_list v5 = v2;
    }
    else {
      va_list v5 = *(const char **)v2;
    }
    double v6 = (_WORD *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a1, v5);
    if ((v6[11] & 0x40) != 0)
    {
      return *(unsigned int *)v6;
    }
    else
    {
      std::operator+<char>();
      uint64_t v7 = std::string::append(&v9, " is not an unsigned int type");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
      if (SHIBYTE(v11) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      return 0;
    }
  }
  return result;
}

void sub_1C5D2EBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *siri::dialogengine::SetJSONBool(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a1 + 3);
  if (!v3) {
    __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
  }
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const char *)a2;
  }
  else {
    uint64_t v7 = *(const char **)a2;
  }
  if (v6 >= 0) {
    LODWORD(v8) = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  *((void *)&__dst + 1) = v7;
  uint64_t v17 = 0x405000000000000;
  *(void *)&long long __dst = rapidjson::GenericStringRef<char>::NotNullStrLen(v7);
  uint64_t result = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>((uint64_t)&v13, a1, (uint64_t)&__dst);
  if (*((_WORD *)a1 + 11) != 3) {
    __assert_rtn("MemberEnd", "document.h", 1164, "IsObject()");
  }
  uint64_t v10 = v13;
  if (v13 == *((void *)a1 + 1) + 48 * *a1)
  {
    long long __dst = 0uLL;
    uint64_t v17 = 0;
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetString(&__dst, v7, v8, v3);
    *((void *)&v14 + 1) = 0;
    uint64_t v15 = 0;
    if (a3) {
      __int16 v12 = 10;
    }
    else {
      __int16 v12 = 9;
    }
    *(void *)&long long v14 = 0;
    HIWORD(v15) = v12;
    return rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::AddMember(a1, &__dst, &v14, v3);
  }
  else
  {
    *(void *)(v13 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(void *)(v10 + 24) = 0;
    if (a3) {
      __int16 v11 = 10;
    }
    else {
      __int16 v11 = 9;
    }
    *(_WORD *)(v10 + 46) = v11;
  }
  return result;
}

_WORD *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetString(_WORD *__dst, const char *a2, int a3, uint64_t a4)
{
  if (!a2 && a3) {
    __assert_rtn("GenericStringRef", "document.h", 322, "str != 0 || len == 0u");
  }
  va_list v5 = "";
  if (a2) {
    va_list v5 = a2;
  }
  uint64_t v7 = v5;
  int v8 = a3;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetStringRaw(__dst, (uint64_t)&v7, a4);
  return __dst;
}

unsigned int *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::AddMember(unsigned int *a1, long long *a2, long long *a3, uint64_t a4)
{
  if (*((_WORD *)a1 + 11) != 3) {
    __assert_rtn("AddMember", "document.h", 1282, "IsObject()");
  }
  if ((*((_WORD *)a2 + 11) & 0x400) == 0) {
    __assert_rtn("AddMember", "document.h", 1283, "name.IsString()");
  }
  unsigned int v7 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 >= v8)
  {
    unsigned int v9 = v8 ? v8 + ((v8 + 1) >> 1) : 16;
    if (v8 < v9)
    {
      uint64_t v10 = (const void *)*((void *)a1 + 1);
      uint64_t v11 = 48 * v9;
      if (v10)
      {
        __int16 v12 = *(unint64_t **)a4;
        uint64_t v13 = *(void *)(*(void *)a4 + 8);
        if ((const void *)(*(void *)a4 + v13 - 48 * v8 + 24) == v10 && (unint64_t v14 = v13 + v11 - 48 * v8, v14 <= *v12))
        {
          v12[1] = v14;
        }
        else
        {
          uint64_t v15 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(a4, v11);
          std::string::size_type v16 = v15;
          if (v15) {
            BOOL v17 = v8 == 0;
          }
          else {
            BOOL v17 = 1;
          }
          if (!v17) {
            memcpy(v15, v10, 48 * v8);
          }
          uint64_t v10 = v16;
        }
      }
      else
      {
        uint64_t v10 = (const void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(a4, v11);
      }
      *((void *)a1 + 1) = v10;
      a1[1] = v9;
      unsigned int v7 = *a1;
    }
  }
  uint64_t v18 = *((void *)a1 + 1);
  uint64_t v19 = v18 + 48 * v7;
  long long v20 = *a2;
  *(void *)(v19 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v19 = v20;
  *((_WORD *)a2 + 11) = 0;
  uint64_t v21 = v18 + 48 * *a1;
  long long v22 = *a3;
  *(void *)(v21 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(v21 + 24) = v22;
  *((_WORD *)a3 + 11) = 0;
  ++*a1;
  return a1;
}

uint64_t rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void **)a1;
  if (!v4 || (uint64_t v5 = v4[1], v6 = v5 + v3, v5 + v3 > *v4))
  {
    if (*(void *)(a1 + 8) <= v3) {
      unint64_t v7 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    else {
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (!*(void *)(a1 + 24)) {
      operator new();
    }
    if (v7 == -24) {
      return 0;
    }
    uint64_t v4 = malloc_type_malloc(v7 + 24, 0x9245A057uLL);
    if (!v4) {
      return 0;
    }
    uint64_t v5 = 0;
    *uint64_t v4 = v7;
    v4[1] = 0;
    v4[2] = *(void *)a1;
    *(void *)a1 = v4;
    unint64_t v6 = v3;
  }
  uint64_t v8 = (uint64_t)v4 + v5 + 24;
  v4[1] = v6;
  return v8;
}

void *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetStringRaw(_WORD *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __dst;
  if (*(_DWORD *)(a2 + 8) > 0x15u)
  {
    __dst[11] = 3077;
    *(_DWORD *)long long __dst = *(_DWORD *)(a2 + 8);
    uint64_t v5 = rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(a3, (*(_DWORD *)(a2 + 8) + 1));
    v4[1] = v5;
    uint64_t v4 = (void *)v5;
  }
  else
  {
    __dst[11] = 7173;
    *((unsigned char *)__dst + 21) = 21 - *(unsigned char *)(a2 + 8);
  }
  uint64_t result = memcpy(v4, *(const void **)a2, *(unsigned int *)(a2 + 8));
  *((unsigned char *)v4 + *(unsigned int *)(a2 + 8)) = 0;
  return result;
}

unsigned int *siri::dialogengine::SetJSONString(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a1 + 3);
  if (!v3) {
    __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
  }
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    unint64_t v6 = (const char *)a2;
  }
  else {
    unint64_t v6 = *(const char **)a2;
  }
  if (v5 >= 0) {
    LODWORD(v7) = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    unsigned int v9 = (const char *)a3;
  }
  else {
    unsigned int v9 = *(const char **)a3;
  }
  if (v8 >= 0) {
    int v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    int v10 = *(_DWORD *)(a3 + 8);
  }
  *((void *)&__dst + 1) = v6;
  uint64_t v16 = 0x405000000000000;
  *(void *)&long long __dst = rapidjson::GenericStringRef<char>::NotNullStrLen(v6);
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>((uint64_t)&v12, a1, (uint64_t)&__dst);
  if (*((_WORD *)a1 + 11) != 3) {
    __assert_rtn("MemberEnd", "document.h", 1164, "IsObject()");
  }
  if (v12 != *((void *)a1 + 1) + 48 * *a1) {
    return (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetString((_WORD *)(v12 + 24), v9, v10, v3);
  }
  long long __dst = 0uLL;
  uint64_t v16 = 0;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetString(&__dst, v6, v7, v3);
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetString(&v13, v9, v10, v3);
  return rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::AddMember(a1, &__dst, &v13, v3);
}

unsigned int *siri::dialogengine::SetJSONUintVal(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a1 + 3);
  if (!v3) {
    __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
  }
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const char *)a2;
  }
  else {
    uint64_t v7 = *(const char **)a2;
  }
  if (v6 >= 0) {
    LODWORD(v8) = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  *((void *)&__dst + 1) = v7;
  uint64_t v17 = 0x405000000000000;
  *(void *)&long long __dst = rapidjson::GenericStringRef<char>::NotNullStrLen(v7);
  uint64_t result = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>((uint64_t)&v13, a1, (uint64_t)&__dst);
  if (*((_WORD *)a1 + 11) != 3) {
    __assert_rtn("MemberEnd", "document.h", 1164, "IsObject()");
  }
  uint64_t v10 = v13;
  if (v13 == *((void *)a1 + 1) + 48 * *a1)
  {
    long long __dst = 0uLL;
    uint64_t v17 = 0;
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetString(&__dst, v7, v8, v3);
    uint64_t v15 = 0;
    long long v14 = a3;
    if (a3 < 0) {
      __int16 v12 = 470;
    }
    else {
      __int16 v12 = 502;
    }
    HIWORD(v15) = v12;
    return rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::AddMember(a1, &__dst, &v14, v3);
  }
  else
  {
    *(void *)(v13 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(void *)(v10 + 24) = a3;
    if (a3 < 0) {
      __int16 v11 = 470;
    }
    else {
      __int16 v11 = 502;
    }
    *(_WORD *)(v10 + 46) = v11;
  }
  return result;
}

BOOL siri::dialogengine::ParseJSONBool(unsigned int *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a1, a2))
  {
    if (v4[23] >= 0) {
      int v6 = v4;
    }
    else {
      int v6 = *(const char **)v4;
    }
    int v7 = *(unsigned __int16 *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a1, v6)+ 22);
    if ((v7 & 8) != 0)
    {
      return v7 == 10;
    }
    else
    {
      std::operator+<char>();
      uint64_t v8 = std::string::append(&v11, " is not a BOOL type");
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      std::string::size_type v13 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
      if (SHIBYTE(v13) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
    }
  }
  return a3;
}

void sub_1C5D2F4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ParseJSONStringList(unsigned int *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a1, a2))
  {
    if (v3[23] >= 0) {
      int v6 = v3;
    }
    else {
      int v6 = *(const char **)v3;
    }
    uint64_t v7 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a1, v6);
    if (*(_WORD *)(v7 + 22) == 4)
    {
      for (unsigned int i = 0; ; ++i)
      {
        if (i >= *(_DWORD *)v7) {
          return;
        }
        uint64_t v9 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](v7, i);
        if ((*(_WORD *)(v9 + 22) & 0x400) != 0)
        {
          String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v9);
          std::string::basic_string[abi:ne180100]<0>(&v27, String);
          unint64_t v14 = *(void *)(a3 + 8);
          unint64_t v13 = *(void *)(a3 + 16);
          if (v14 >= v13)
          {
            unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *(void *)a3) >> 3);
            unint64_t v17 = v16 + 1;
            if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(void *)a3) >> 3);
            if (2 * v18 > v17) {
              unint64_t v17 = 2 * v18;
            }
            if (v18 >= 0x555555555555555) {
              unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v19 = v17;
            }
            __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
            if (v19) {
              long long v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v19);
            }
            else {
              long long v20 = 0;
            }
            uint64_t v21 = v20 + v16;
            __p.__first_ = v20;
            __p.__begin_ = v21;
            __p.__end_cap_.__value_ = &v20[v19];
            long long v22 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
            v21->__r_.__value_.__r.__words[2] = v27.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
            memset(&v27, 0, sizeof(v27));
            __p.__end_ = v21 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__p);
            uint64_t v23 = *(void *)(a3 + 8);
            std::__split_buffer<std::string>::~__split_buffer(&__p);
            int v24 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
            *(void *)(a3 + 8) = v23;
            if (v24 < 0) {
LABEL_27:
            }
              operator delete(v27.__r_.__value_.__l.__data_);
          }
          else
          {
            long long v15 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
            *(void *)(v14 + 16) = *((void *)&v27.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v14 = v15;
            *(void *)(a3 + 8) = v14 + 24;
          }
        }
        else
        {
          std::operator+<char>();
          uint64_t v10 = std::string::append(&v27, " has non-string member");
          long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          __p.__end_ = (std::__split_buffer<std::string>::pointer)v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__first_ = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
          if (SHIBYTE(__p.__end_) < 0) {
            operator delete(__p.__first_);
          }
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_27;
          }
        }
        if (*(_WORD *)(v7 + 22) != 4) {
          __assert_rtn("Size", "document.h", 1557, "IsArray()");
        }
      }
    }
    std::operator+<char>();
    uint64_t v25 = std::string::append(&v27, " is not an array type");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p.__end_ = (std::__split_buffer<std::string>::pointer)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__first_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (SHIBYTE(__p.__end_) < 0) {
      operator delete(__p.__first_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5D2F800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](uint64_t a1, unsigned int a2)
{
  if (*(_WORD *)(a1 + 22) != 4) {
    __assert_rtn("operator[]", "document.h", 1583, "IsArray()");
  }
  if (*(_DWORD *)a1 <= a2) {
    __assert_rtn("operator[]", "document.h", 1584, "index < data_.a.size");
  }
  return *(void *)(a1 + 8) + 24 * a2;
}

void siri::dialogengine::ConvertVariableObjToJSONObj(uint64_t *__return_ptr a1@<X8>, siri::dialogengine *this@<X0>)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  siri::dialogengine::VariableObject::GetValues(this, &v29);
  uint64_t v4 = v29;
  int v5 = v30;
  while (v4 != v5)
  {
    int v6 = (char *)*v4;
    if (*((char *)*v4 + 55) < 0) {
      std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)v6 + 4), *((void *)v6 + 5));
    }
    else {
      std::string v28 = *(std::string *)(v6 + 32);
    }
    uint64_t v7 = (char *)*v4;
    if (*((char *)*v4 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)v7 + 1), *((void *)v7 + 2));
    }
    else
    {
      long long v8 = *(_OWORD *)(v7 + 8);
      v27.__r_.__value_.__r.__words[2] = *((void *)v7 + 3);
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v8;
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v28.__r_.__value_.__l.__size_ == 12)
      {
        if (*(void *)v28.__r_.__value_.__l.__data_ == 0x412E676F6C616964
          && *(_DWORD *)(v28.__r_.__value_.__r.__words[0] + 8) == 2036429426)
        {
LABEL_47:
          if (*v4) {
          else
          }
            unint64_t v17 = 0;
          siri::dialogengine::ConvertVariableArrayToJSONAry((siri::dialogengine *)&__p, v17);
          siri::dialogengine::CreateJSONArrayVal();
        }
        goto LABEL_75;
      }
      if (v28.__r_.__value_.__l.__size_ != 13)
      {
        if (v28.__r_.__value_.__l.__size_ == 14
          && *(void *)v28.__r_.__value_.__l.__data_ == 0x422E676F6C616964
          && *(void *)(v28.__r_.__value_.__r.__words[0] + 6) == 0x6E61656C6F6F422ELL)
        {
LABEL_26:
          siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v11[66]);
        }
        goto LABEL_75;
      }
      if (*(void *)v28.__r_.__value_.__l.__data_ == 0x532E676F6C616964
        && *(void *)(v28.__r_.__value_.__r.__words[0] + 5) == 0x676E697274532E67)
      {
LABEL_66:
        int v24 = (char *)*v4;
        if (*v4) {
        if (v24[95] < 0)
        }
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v24 + 9), *((void *)v24 + 10));
        else {
          std::string __p = *(std::string *)(v24 + 3);
        }
        siri::dialogengine::CreateJSONStringVal();
      }
      if (*(void *)v28.__r_.__value_.__l.__data_ == 0x4E2E676F6C616964
        && *(void *)(v28.__r_.__value_.__r.__words[0] + 5) == 0x7265626D754E2E67)
      {
LABEL_70:
        siri::dialogengine::CreateJSONDoubleVal((siri::dialogengine *)v25, v25[9]);
      }
      long long v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(v28.__r_.__value_.__r.__words[2]) == 12)
      {
        if (v28.__r_.__value_.__r.__words[0] == 0x412E676F6C616964
          && LODWORD(v28.__r_.__value_.__r.__words[1]) == 2036429426)
        {
          goto LABEL_47;
        }
        goto LABEL_75;
      }
      if (HIBYTE(v28.__r_.__value_.__r.__words[2]) != 13)
      {
        if (HIBYTE(v28.__r_.__value_.__r.__words[2]) == 14
          && v28.__r_.__value_.__r.__words[0] == 0x422E676F6C616964
          && *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 6) == 0x6E61656C6F6F422ELL)
        {
          goto LABEL_26;
        }
        goto LABEL_75;
      }
      if (v28.__r_.__value_.__r.__words[0] == 0x532E676F6C616964
        && *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 5) == 0x676E697274532E67)
      {
        goto LABEL_66;
      }
      if (v28.__r_.__value_.__r.__words[0] == 0x4E2E676F6C616964
        && *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 5) == 0x7265626D754E2E67)
      {
        goto LABEL_70;
      }
      long long v15 = &v28;
    }
    std::string::size_type v20 = v15->__r_.__value_.__r.__words[0];
    uint64_t v21 = *(std::string::size_type *)((char *)v15->__r_.__value_.__r.__words + 5);
    if (v20 == 0x4F2E676F6C616964 && v21 == 0x7463656A624F2E67)
    {
      uint64_t v23 = (void *)*v4;
      if (*v4) {
      siri::dialogengine::ConvertVariableObjToJSONObj((uint64_t *)&__p, (siri::dialogengine *)v23, v3);
      }
      siri::dialogengine::CreateJSONObjectVal();
    }
LABEL_75:
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    v4 += 2;
  }
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
}

void sub_1C5D2FECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  a25 = &a31;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v31);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  int v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  int v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    int v6 = (uint64_t *)operator new(0x48uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    long long v8 = (std::string *)(v6 + 4);
    uint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    char v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1C5D30094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void siri::dialogengine::ConvertVariableArrayToJSONAry(siri::dialogengine *this, siri::dialogengine::VariableArray *a2)
{
  unint64_t v3 = 0;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  while (1)
  {
    uint64_t v4 = *((void *)a2 + 9);
    if (v3 >= (*((void *)a2 + 10) - v4) >> 4) {
      break;
    }
    long long v5 = *(_OWORD *)(v4 + 16 * v3);
    int v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (const void *)v5;
    if (*(char *)(v5 + 55) < 0) {
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(v5 + 32), *(void *)(v5 + 40));
    }
    else {
      std::string v27 = *(std::string *)(v5 + 32);
    }
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (HIBYTE(v27.__r_.__value_.__r.__words[2]) == 12)
      {
        if (v27.__r_.__value_.__r.__words[0] == 0x412E676F6C616964
          && LODWORD(v27.__r_.__value_.__r.__words[1]) == 2036429426)
        {
          goto LABEL_63;
        }
        goto LABEL_67;
      }
      if (HIBYTE(v27.__r_.__value_.__r.__words[2]) != 13)
      {
        if (HIBYTE(v27.__r_.__value_.__r.__words[2]) != 14) {
          goto LABEL_69;
        }
        if (v27.__r_.__value_.__r.__words[0] == 0x422E676F6C616964
          && *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 6) == 0x6E61656C6F6F422ELL)
        {
          goto LABEL_26;
        }
LABEL_67:
        if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_69;
        }
        goto LABEL_68;
      }
      if (v27.__r_.__value_.__r.__words[0] == 0x532E676F6C616964
        && *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 5) == 0x676E697274532E67)
      {
        goto LABEL_56;
      }
      if (v27.__r_.__value_.__r.__words[0] == 0x4E2E676F6C616964
        && *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 5) == 0x7265626D754E2E67)
      {
        goto LABEL_64;
      }
      char v13 = &v27;
LABEL_50:
      std::string::size_type v17 = v13->__r_.__value_.__r.__words[0];
      uint64_t v18 = *(std::string::size_type *)((char *)v13->__r_.__value_.__r.__words + 5);
      if (v17 == 0x4F2E676F6C616964 && v18 == 0x7463656A624F2E67)
      {
        siri::dialogengine::ConvertVariableObjToJSONObj((uint64_t *)&__p, v20, v21);
        siri::dialogengine::CreateJSONObjectVal();
      }
      goto LABEL_67;
    }
    switch(v27.__r_.__value_.__l.__size_)
    {
      case 0xCuLL:
        if (*(void *)v27.__r_.__value_.__l.__data_ == 0x412E676F6C616964
          && *(_DWORD *)(v27.__r_.__value_.__r.__words[0] + 8) == 2036429426)
        {
LABEL_63:
          siri::dialogengine::ConvertVariableArrayToJSONAry((siri::dialogengine *)&__p, v24);
          siri::dialogengine::CreateJSONArrayVal();
        }
        goto LABEL_67;
      case 0xDuLL:
        char v13 = (std::string *)v27.__r_.__value_.__r.__words[0];
        if (*(void *)v27.__r_.__value_.__l.__data_ == 0x532E676F6C616964
          && *(void *)(v27.__r_.__value_.__r.__words[0] + 5) == 0x676E697274532E67)
        {
LABEL_56:
          if (v22[95] < 0) {
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v22 + 9), *((void *)v22 + 10));
          }
          else {
            std::string __p = *(std::string *)(v22 + 3);
          }
          siri::dialogengine::CreateJSONStringVal();
        }
        if (*(void *)v27.__r_.__value_.__l.__data_ == 0x4E2E676F6C616964
          && *(void *)(v27.__r_.__value_.__r.__words[0] + 5) == 0x7265626D754E2E67)
        {
LABEL_64:
          siri::dialogengine::CreateJSONDoubleVal((siri::dialogengine *)v25, v25[9]);
        }
        goto LABEL_50;
      case 0xEuLL:
        if (*(void *)v27.__r_.__value_.__l.__data_ == 0x422E676F6C616964
          && *(void *)(v27.__r_.__value_.__r.__words[0] + 6) == 0x6E61656C6F6F422ELL)
        {
LABEL_26:
          siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v10[66]);
        }
        goto LABEL_67;
    }
LABEL_68:
    operator delete(v27.__r_.__value_.__l.__data_);
LABEL_69:
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    ++v3;
  }
}

void sub_1C5D30850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a10);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__swap_out_circular_buffer(void *result, void *a2)
{
  unint64_t v3 = (void *)*result;
  __int16 v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *((_OWORD *)v2 - 1);
    v2 -= 2;
    *(_OWORD *)(v4 - 16) = v5;
    v4 -= 16;
    *__int16 v2 = 0;
    v2[1] = 0;
  }
  a2[1] = v4;
  int v6 = (void *)*result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void siri::dialogengine::ConvertJSONToJSONObj()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)&v0);
}

void sub_1C5D30AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v3);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)va);
  _Unwind_Resume(a1);
}

void rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument(uint64_t a1)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 80) = 1024;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  operator new();
}

void sub_1C5D30B3C(_Unwind_Exception *a1)
{
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(v1 + 40);
  _Unwind_Resume(a1);
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<128u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v20 = a1;
  uint64_t v21 = v4;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v24 = 256;
  int v26 = 2;
  LODWORD(v25) = 0;
  *((void *)&v25 + 1) = 0;
  for (unsigned int i = *(unsigned __int8 **)a2; ; ++i)
  {
    unsigned int v6 = *i;
    BOOL v7 = v6 > 0x20;
    uint64_t v8 = (1 << v6) & 0x100002600;
    if (v7 || v8 == 0) {
      break;
    }
  }
  *(void *)a2 = i;
  if (!*i)
  {
    int v18 = 1;
LABEL_26:
    unint64_t v19 = &i[-*(void *)(a2 + 8)];
    LODWORD(v25) = v18;
    *((void *)&v25 + 1) = v19;
    goto LABEL_16;
  }
  rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<128u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>((uint64_t)&v21, (unsigned __int8 **)a2, (void *)a1);
  if (!v25)
  {
    for (unsigned int i = *(unsigned __int8 **)a2; ; ++i)
    {
      unsigned int v10 = *i;
      BOOL v7 = v10 > 0x20;
      uint64_t v11 = (1 << v10) & 0x100002600;
      if (v7 || v11 == 0) {
        break;
      }
    }
    *(void *)a2 = i;
    if (*i)
    {
      int v18 = 2;
      goto LABEL_26;
    }
  }
LABEL_16:
  *(void *)&long long v23 = *((void *)&v22 + 1);
  int v13 = v25;
  *(_OWORD *)(a1 + 88) = v25;
  if (v13) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = rapidjson::ParseResult::IsError;
  }
  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 64);
    if (v15 - *(void *)(a1 + 56) != 24) {
      __assert_rtn("ParseStream", "document.h", 2259, "stack_.GetSize() == sizeof(ValueType)");
    }
    *(void *)(a1 + 64) = v15 - 24;
    if (v15 - 24 != a1)
    {
      long long v16 = *(_OWORD *)(v15 - 24);
      *(void *)(a1 + 16) = *(void *)(v15 - 8);
      *(_OWORD *)a1 = v16;
      *(_WORD *)(v15 - 2) = 0;
    }
  }
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ClearStackOnExit::~ClearStackOnExit((uint64_t)&v20);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&v21);
  return a1;
}

void sub_1C5D30CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a13 = a12;
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ClearStackOnExit::~ClearStackOnExit((uint64_t)&a9);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&a10);
  _Unwind_Resume(a1);
}

unsigned int *siri::dialogengine::ConvertRapidJSONToJSONObj(unsigned int *result, unsigned int *a2, double a3)
{
  if (result != a2)
  {
    unint64_t v3 = result + 6;
    do
    {
      int v4 = *((unsigned __int16 *)v3 + 11);
      switch(v4 & 7)
      {
        case 1:
          rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)(v3 - 6));
          int v5 = *((unsigned __int16 *)v3 + 11);
          if ((v5 & 8) != 0) {
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v5 == 10));
          }
          goto LABEL_23;
        case 2:
          rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)(v3 - 6));
          int v7 = *((unsigned __int16 *)v3 + 11);
          if ((v7 & 8) != 0) {
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v7 == 10));
          }
LABEL_23:
          __assert_rtn("GetBool", "document.h", 1078, "IsBool()");
        case 3:
          *((void *)&v13 + 1) = 0;
          uint64_t v14 = 0;
          *(void *)&long long v13 = (char *)&v13 + 8;
          if (v4 == 3)
          {
            siri::dialogengine::ConvertRapidJSONToJSONObj(*((void *)v3 + 1), *((void *)v3 + 1) + 48 * *v3, &v13);
            rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)(v3 - 6));
            siri::dialogengine::CreateJSONObjectVal();
          }
          __assert_rtn("MemberBegin", "document.h", 1155, "IsObject()");
        case 4:
          long long v13 = 0uLL;
          uint64_t v14 = 0;
          if (v4 == 4)
          {
            std::string __p = v3;
            siri::dialogengine::ConvertRapidJSONToJSONArray((unsigned int **)&__p, a3);
            rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)(v3 - 6));
            siri::dialogengine::CreateJSONArrayVal();
          }
          __assert_rtn("GetArray", "document.h", 1724, "IsArray()");
        case 5:
          rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)(v3 - 6));
          String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)v3);
          std::string::basic_string[abi:ne180100]<0>(&v13, String);
          siri::dialogengine::CreateJSONStringVal();
        case 6:
          if ((v4 & 0x20) != 0)
          {
            rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)(v3 - 6));
            if ((*((_WORD *)v3 + 11) & 0x20) != 0) {
              siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)*v3);
            }
            __assert_rtn("GetInt", "document.h", 1731, "data_.f.flags & kIntFlag");
          }
          if ((v4 & 0x200) != 0)
          {
            rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)(v3 - 6));
            double Double = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetDouble(v3, v8);
            siri::dialogengine::CreateJSONDoubleVal(v10, Double);
          }
          if ((v4 & 0x40) != 0)
          {
            rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)(v3 - 6));
            if ((*((_WORD *)v3 + 11) & 0x40) != 0) {
              siri::dialogengine::CreateJSONUintVal((siri::dialogengine *)*v3);
            }
            __assert_rtn("GetUint", "document.h", 1732, "data_.f.flags & kUintFlag");
          }
          return result;
        default:
          break;
      }
      uint64_t v11 = v3 + 6;
      v3 += 12;
    }
    while (v11 != a2);
  }
  return result;
}

void sub_1C5D31194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      while (v3 != *(void **)(v2 + 16))
      {
        int v4 = (void *)v3[2];
        free(v3);
        *(void *)uint64_t v2 = v4;
        unint64_t v3 = v4;
        if (!v4) {
          goto LABEL_7;
        }
      }
      v3[1] = 0;
    }
LABEL_7:
    uint64_t v5 = *(void *)(v2 + 32);
    if (v5) {
      MEMORY[0x1C8796D70](v5, 0xC400A2AC0F1);
    }
    MEMORY[0x1C8796D70](v2, 0x10A0C40AAA3F4FELL);
  }
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(a1 + 40);
  return a1;
}

uint64_t rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(uint64_t a1)
{
  free(*(void **)(a1 + 16));
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

unsigned int **siri::dialogengine::ConvertRapidJSONToJSONArray(unsigned int **result, double a2)
{
  uint64_t v2 = *result;
  int v3 = *((unsigned __int16 *)*result + 11);
  if (v3 != 4) {
    __assert_rtn("Begin", "document.h", 1591, "IsArray()");
  }
  for (unsigned int i = (unsigned int *)*((void *)v2 + 1); ; i += 6)
  {
    if (v3 != 4) {
      __assert_rtn("End", "document.h", 1594, "IsArray()");
    }
    if (i == (unsigned int *)(*((void *)v2 + 1) + 24 * *v2)) {
      break;
    }
    int v5 = *((unsigned __int16 *)i + 11);
    if (v5 == 3)
    {
      __p[1] = 0;
      uint64_t v9 = 0;
      __p[0] = &__p[1];
      if (*((_WORD *)i + 11) == 3)
      {
        siri::dialogengine::ConvertRapidJSONToJSONObj(*((void *)i + 1), *((void *)i + 1) + 48 * *i, __p);
        siri::dialogengine::CreateJSONObjectVal();
      }
      __assert_rtn("GetObject", "document.h", 1545, "IsObject()");
    }
    if (v5 == 4)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v9 = 0;
      if (*((_WORD *)i + 11) == 4)
      {
        unsigned int v10 = i;
        siri::dialogengine::ConvertRapidJSONToJSONArray(&v10, __p);
        siri::dialogengine::CreateJSONArrayVal();
      }
      __assert_rtn("GetArray", "document.h", 1724, "IsArray()");
    }
    if ((v5 & 8) != 0) {
      siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v5 == 10));
    }
    if ((v5 & 0x400) != 0)
    {
      String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)i);
      std::string::basic_string[abi:ne180100]<0>(__p, String);
      siri::dialogengine::CreateJSONStringVal();
    }
    if ((v5 & 0x20) != 0) {
      siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)*i);
    }
    if ((v5 & 0x200) != 0)
    {
      double Double = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetDouble(i, a2);
      siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)(int)Double);
    }
    if ((v5 & 0x40) != 0) {
      siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)*i);
    }
    uint64_t v2 = *result;
    int v3 = *((unsigned __int16 *)*result + 11);
  }
  return result;
}

void sub_1C5D31938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  int v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  if (!*v5)
  {
    unsigned int v6 = v5;
    int v7 = (char *)operator new(0x48uLL);
    v9[0] = v7;
    v9[1] = a1 + 1;
    char v10 = 0;
    double v8 = (std::string *)(v7 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((void *)v7 + 6) = *(void *)(a3 + 16);
    }
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(a3 + 24);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    char v10 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v11, v6, (uint64_t *)v7);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  }
}

void sub_1C5D31ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ClearStackOnExit::~ClearStackOnExit(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  int v3 = *(void **)(*(void *)a1 + 56);
  v2[8] = v3;
  free(v3);
  v2[7] = 0;
  v2[8] = 0;
  v2[9] = 0;
  return a1;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(void *a1, size_t size)
{
  int v4 = (void *)a1[2];
  uint64_t v5 = a1[3];
  if (size)
  {
    uint64_t result = (char *)malloc_type_realloc(v4, size, 0x9D18BDCDuLL);
  }
  else
  {
    free(v4);
    uint64_t result = 0;
  }
  a1[2] = result;
  a1[3] = &result[v5 - (void)v4];
  a1[4] = &result[size];
  return result;
}

BOOL rapidjson::ParseResult::IsError(rapidjson::ParseResult *this)
{
  return *(_DWORD *)this != 0;
}

void rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<128u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, unsigned __int8 **a2, void *a3)
{
  unsigned int v6 = (char *)*a2;
  int v7 = (char)**a2;
  int v8 = **a2;
  if (v7 > 109)
  {
    if (v7 != 123)
    {
      if (v7 == 116)
      {
        if (v8 != 116) {
          __assert_rtn("ParseTrue", "reader.h", 868, "is.Peek() == 't'");
        }
        uint64_t v9 = v6 + 1;
        *a2 = (unsigned __int8 *)(v6 + 1);
        if (v6[1] == 114)
        {
          uint64_t v9 = v6 + 2;
          *a2 = (unsigned __int8 *)(v6 + 2);
          if (v6[2] == 117)
          {
            uint64_t v9 = v6 + 3;
            *a2 = (unsigned __int8 *)(v6 + 3);
            if (v6[3] == 101)
            {
              *a2 = (unsigned __int8 *)(v6 + 4);
              uint64_t v10 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
              *(void *)(v10 + 8) = 0;
              *(void *)(v10 + 16) = 0;
              *(void *)uint64_t v10 = 0;
              __int16 v11 = 10;
              goto LABEL_55;
            }
          }
        }
        if (*(_DWORD *)(a1 + 48)) {
          __assert_rtn("ParseTrue", "reader.h", 876, "!HasParseError()");
        }
        goto LABEL_149;
      }
      if (v7 == 110)
      {
        if (v8 != 110) {
          __assert_rtn("ParseNull", "reader.h", 855, "is.Peek() == 'n'");
        }
        uint64_t v9 = v6 + 1;
        *a2 = (unsigned __int8 *)(v6 + 1);
        if (v6[1] == 117)
        {
          uint64_t v9 = v6 + 2;
          *a2 = (unsigned __int8 *)(v6 + 2);
          if (v6[2] == 108)
          {
            uint64_t v9 = v6 + 3;
            *a2 = (unsigned __int8 *)(v6 + 3);
            if (v6[3] == 108)
            {
              *a2 = (unsigned __int8 *)(v6 + 4);
              __int16 v12 = (void *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
              v12[1] = 0;
              void v12[2] = 0;
              *__int16 v12 = 0;
              return;
            }
          }
        }
        if (*(_DWORD *)(a1 + 48)) {
          __assert_rtn("ParseNull", "reader.h", 863, "!HasParseError()");
        }
LABEL_149:
        int64_t v61 = v9 - a2[1];
        int v62 = 3;
LABEL_150:
        *(_DWORD *)(a1 + 48) = v62;
        *(void *)(a1 + 56) = v61;
        return;
      }
LABEL_29:
      int v18 = (char *)a2[1];
      if (v8 == 45)
      {
        uint64_t v20 = (unsigned __int8 *)(v6 + 1);
        int v19 = v6[1];
      }
      else
      {
        int v19 = **a2;
        uint64_t v20 = *a2;
      }
      LODWORD(v21) = v19 - 48;
      if (v19 == 48)
      {
        int v39 = 0;
        LODWORD(v26) = 0;
        unint64_t v40 = 0;
        int v41 = 0;
        double v25 = 0.0;
        unsigned int v22 = v20[1];
        uint64_t v23 = (uint64_t)(v20 + 1);
      }
      else
      {
        if ((v19 - 49) > 8)
        {
          if (*(_DWORD *)(a1 + 48)) {
            __assert_rtn("ParseNumber", "reader.h", 1532, "!HasParseError()");
          }
          std::string v63 = (unsigned __int8 *)(v20 - (unsigned __int8 *)v18);
          int v64 = 3;
          goto LABEL_217;
        }
        uint64_t v23 = (uint64_t)(v20 + 1);
        unsigned int v22 = v20[1];
        unsigned int v24 = v22 - 48;
        double v25 = 0.0;
        if (v8 == 45)
        {
          if (v24 <= 9)
          {
            uint64_t v26 = 0;
            while (1)
            {
              if (v21 > 0xCCCCCCB)
              {
                if (v21 != 214748364) {
                  goto LABEL_42;
                }
                if (v22 > 0x38) {
                  break;
                }
              }
              LODWORD(v21) = v22 + 10 * v21 - 48;
              unsigned int v22 = v20[v26++ + 2];
              if (v22 - 48 >= 0xA)
              {
                int v39 = 0;
                unint64_t v40 = 0;
                int v41 = 0;
                uint64_t v23 = (uint64_t)&v20[v26 + 1];
                goto LABEL_94;
              }
            }
            unsigned int v22 = 57;
            LODWORD(v21) = 214748364;
LABEL_42:
            uint64_t v23 = (uint64_t)&v20[v26 + 1];
LABEL_77:
            unint64_t v40 = v21;
            if (v8 == 45)
            {
              while (v40 <= 0xCCCCCCCCCCCCCCBLL || v40 == 0xCCCCCCCCCCCCCCCLL && v22 <= 0x38)
              {
                unsigned int v38 = *(unsigned __int8 *)++v23;
                unint64_t v40 = v22 - 48 + 10 * v40;
                LODWORD(v26) = v26 + 1;
                unsigned int v22 = v38;
                if (v38 - 48 >= 0xA) {
                  goto LABEL_92;
                }
              }
            }
            else
            {
              while (v40 <= 0x1999999999999998 || v40 == 0x1999999999999999 && v22 <= 0x35)
              {
                unsigned int v42 = *(unsigned __int8 *)++v23;
                unint64_t v40 = v22 - 48 + 10 * v40;
                LODWORD(v26) = v26 + 1;
                unsigned int v22 = v42;
                if (v42 - 48 >= 0xA)
                {
LABEL_92:
                  int v39 = 0;
                  double v25 = 0.0;
                  goto LABEL_93;
                }
              }
            }
            double v25 = (double)v40;
            do
            {
              unsigned int v43 = *(unsigned __int8 *)++v23;
              double v25 = (double)(int)(v22 - 48) + v25 * 10.0;
              unsigned int v22 = v43;
            }
            while (v43 - 48 < 0xA);
            int v39 = 1;
LABEL_93:
            int v41 = 1;
            goto LABEL_94;
          }
        }
        else if (v24 <= 9)
        {
          uint64_t v26 = 0;
          while (1)
          {
            if (v21 > 0x19999998)
            {
              if (v21 != 429496729) {
                goto LABEL_76;
              }
              if (v22 > 0x35) {
                break;
              }
            }
            LODWORD(v21) = v22 + 10 * v21 - 48;
            unsigned int v22 = v20[v26++ + 2];
            if (v22 - 48 >= 0xA)
            {
              int v39 = 0;
              unint64_t v40 = 0;
              int v41 = 0;
              uint64_t v23 = (uint64_t)&v20[v26 + 1];
              goto LABEL_94;
            }
          }
          LODWORD(v21) = 429496729;
LABEL_76:
          uint64_t v23 = (uint64_t)&v20[v26 + 1];
          goto LABEL_77;
        }
        int v39 = 0;
        LODWORD(v26) = 0;
        unint64_t v40 = 0;
        int v41 = 0;
      }
LABEL_94:
      long long v44 = (unsigned char *)(v6 - v18);
      if (v22 == 46)
      {
        unsigned int v46 = *(unsigned __int8 *)(v23 + 1);
        long long v45 = (unsigned __int8 *)(v23 + 1);
        unsigned int v22 = v46;
        if (v46 - 48 >= 0xA)
        {
          if (*(_DWORD *)(a1 + 48)) {
            __assert_rtn("ParseNumber", "reader.h", 1575, "!HasParseError()");
          }
          *(_DWORD *)(a1 + 48) = 14;
          *(void *)(a1 + 56) = v45 - (unsigned __int8 *)v18;
          uint64_t v20 = v45;
          goto LABEL_142;
        }
        int v47 = 0;
        if ((v39 & 1) == 0)
        {
          if (!v41) {
            unint64_t v40 = v21;
          }
          while (v22 <= 0x39 && !(v40 >> 53))
          {
            int v49 = (char)*++v45;
            int v48 = v49;
            unint64_t v40 = v22 - 48 + 10 * v40;
            --v47;
            if (v40) {
              LODWORD(v26) = v26 + 1;
            }
            unsigned int v22 = v48;
            if (v48 <= 47)
            {
              int v50 = 0;
              double v25 = (double)v40;
              uint64_t v20 = v45;
              goto LABEL_113;
            }
          }
          double v25 = (double)v40;
        }
        uint64_t v20 = v45;
        while (v22 <= 0x39)
        {
          if ((int)v26 <= 16)
          {
            double v25 = (double)(int)(v22 - 48) + v25 * 10.0;
            --v47;
            if (v25 > 0.0) {
              LODWORD(v26) = v26 + 1;
            }
          }
          int v51 = (char)*++v20;
          unsigned int v22 = v51;
          if (v51 <= 47) {
            goto LABEL_112;
          }
        }
        int v39 = 1;
      }
      else
      {
        int v47 = 0;
        uint64_t v20 = (unsigned __int8 *)v23;
      }
      if (v22 != 101 && v22 != 69)
      {
        if ((v39 & 1) == 0)
        {
          if (v41)
          {
            if (v8 == 45) {
              rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64((uint64_t)a3, -(uint64_t)v40);
            }
            else {
              rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64((uint64_t)a3, v40);
            }
            goto LABEL_142;
          }
          int v102 = v21;
          uint64_t v58 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
          *(void *)(v58 + 8) = 0;
          *(void *)(v58 + 16) = 0;
          if (v8 == 45)
          {
            *(void *)uint64_t v58 = -v102;
            BOOL v103 = -v102 < 0;
            __int16 v60 = 182;
          }
          else
          {
            *(void *)uint64_t v58 = v102;
            BOOL v103 = v102 < 0;
            __int16 v60 = 470;
          }
          if (!v103) {
            __int16 v60 = 502;
          }
          goto LABEL_141;
        }
LABEL_112:
        int v50 = 0;
LABEL_113:
        unsigned int v52 = v47 + v50;
        if ((int)v52 > -309)
        {
          if ((v52 & 0x80000000) == 0)
          {
            if (v52 >= 0x135)
            {
              v97 = "n >= 0 && n <= 308";
              int v98 = 48;
              std::string v99 = "pow10.h";
              std::string v100 = "Pow10";
              goto LABEL_231;
            }
            double v53 = v25 * rapidjson::internal::Pow10(int)::e[v52];
            goto LABEL_135;
          }
          unsigned int v54 = -v52;
        }
        else
        {
          double v53 = 0.0;
          if (v52 < 0xFFFFFD98) {
            goto LABEL_138;
          }
          double v25 = v25 / 1.0e308;
          unsigned int v54 = -308 - v52;
        }
        double v53 = v25 / rapidjson::internal::Pow10(int)::e[v54];
LABEL_135:
        if (v53 > 1.79769313e308)
        {
          if (!*(_DWORD *)(a1 + 48))
          {
LABEL_137:
            *(_DWORD *)(a1 + 48) = 13;
            *(void *)(a1 + 56) = v44;
LABEL_142:
            *a2 = v20;
            a2[1] = (unsigned __int8 *)v18;
            return;
          }
          v97 = "!HasParseError()";
          int v98 = 1707;
          std::string v99 = "reader.h";
          std::string v100 = "ParseNumber";
LABEL_231:
          __assert_rtn(v100, v99, v98, v97);
        }
LABEL_138:
        uint64_t v58 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
        double v59 = -v53;
        if (v8 != 45) {
          double v59 = v53;
        }
        *(void *)(v58 + 8) = 0;
        *(void *)(v58 + 16) = 0;
        *(double *)uint64_t v58 = v59;
        __int16 v60 = 534;
LABEL_141:
        *(_WORD *)(v58 + 22) = v60;
        goto LABEL_142;
      }
      int v55 = v20[1];
      unint64_t v21 = v21;
      if (v41) {
        unint64_t v21 = v40;
      }
      if (!v39) {
        double v25 = (double)v21;
      }
      if (v55 == 43)
      {
        int v55 = v20[2];
        if ((v55 - 48) < 0xA)
        {
          uint64_t v56 = 3;
          goto LABEL_125;
        }
        v20 += 2;
      }
      else if (v55 == 45)
      {
        int v94 = v20[2] - 48;
        if (v94 < 0xA)
        {
          v20 += 3;
          if (v47 >= 1) {
            __assert_rtn("ParseNumber", "reader.h", 1639, "expFrac <= 0");
          }
          int v95 = *v20;
          if ((v95 - 48) <= 9)
          {
            while (1)
            {
              int v94 = v95 + 10 * v94 - 48;
              if (v94 > (v47 + 2147483639) / 10) {
                break;
              }
              int v96 = *++v20;
              int v95 = v96;
              if ((v96 - 48) >= 0xA) {
                goto LABEL_229;
              }
            }
            do
              int v101 = *++v20;
            while ((v101 - 48) < 0xA);
          }
LABEL_229:
          int v50 = -v94;
          goto LABEL_113;
        }
        v20 += 2;
      }
      else
      {
        if ((v55 - 48) < 0xA)
        {
          uint64_t v56 = 2;
LABEL_125:
          v20 += v56;
          int v50 = v55 - 48;
          do
          {
            int v57 = *v20;
            if ((v57 - 48) > 9) {
              goto LABEL_113;
            }
            ++v20;
            int v50 = v57 + 10 * v50 - 48;
          }
          while (v50 <= 308 - v47);
          if (*(_DWORD *)(a1 + 48)) {
            __assert_rtn("ParseNumber", "reader.h", 1655, "!HasParseError()");
          }
          goto LABEL_137;
        }
        ++v20;
      }
      if (*(_DWORD *)(a1 + 48)) {
        __assert_rtn("ParseNumber", "reader.h", 1660, "!HasParseError()");
      }
      std::string v63 = (unsigned __int8 *)(v20 - (unsigned __int8 *)v18);
      int v64 = 15;
LABEL_217:
      *(_DWORD *)(a1 + 48) = v64;
      *(void *)(a1 + 56) = v63;
      goto LABEL_142;
    }
    if (v8 != 123) {
      __assert_rtn("ParseObject", "reader.h", 739, "is.Peek() == '{'");
    }
    *a2 = (unsigned __int8 *)(v6 + 1);
    uint64_t v13 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0;
    *(void *)uint64_t v13 = 0;
    *(_WORD *)(v13 + 22) = 3;
    for (unsigned int i = *a2; ; ++i)
    {
      unsigned int v15 = *i;
      BOOL v103 = v15 > 0x20;
      uint64_t v16 = (1 << v15) & 0x100002600;
      if (v103 || v16 == 0) {
        break;
      }
    }
    *a2 = i;
    if (!*(_DWORD *)(a1 + 48))
    {
      int v33 = *i;
      if (v33 == 125)
      {
        *a2 = i + 1;
        uint64_t v34 = a3;
        unsigned int v35 = 0;
LABEL_59:
        rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject(v34, v35);
      }
      else
      {
        if (v33 != 34)
        {
LABEL_196:
          int64_t v61 = i - a2[1];
          int v62 = 4;
          goto LABEL_150;
        }
        int v65 = 0;
        while (1)
        {
          v66.n128_f64[0] = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<128u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, (uint64_t)a3);
          if (*(_DWORD *)(a1 + 48)) {
            break;
          }
          for (uint64_t j = *a2; ; ++j)
          {
            unsigned int v68 = *j;
            BOOL v103 = v68 > 0x20;
            uint64_t v69 = (1 << v68) & 0x100002600;
            if (v103 || v69 == 0) {
              break;
            }
          }
          *a2 = j;
          if (*j != 58)
          {
            int64_t v61 = j - a2[1];
            int v62 = 5;
            goto LABEL_150;
          }
          std::string::size_type v71 = j + 1;
          *a2 = v71;
          while (1)
          {
            unsigned int v72 = *v71;
            BOOL v103 = v72 > 0x20;
            uint64_t v73 = (1 << v72) & 0x100002600;
            if (v103 || v73 == 0) {
              break;
            }
            ++v71;
          }
          *a2 = v71;
          rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<128u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3, v66);
          if (*(_DWORD *)(a1 + 48)) {
            return;
          }
          for (std::string::size_type k = (char *)*a2; ; ++k)
          {
            unsigned int v76 = *k;
            BOOL v103 = v76 > 0x20;
            uint64_t v77 = (1 << v76) & 0x100002600;
            if (v103 || v77 == 0) {
              break;
            }
          }
          *a2 = (unsigned __int8 *)k;
          unsigned int v35 = v65 + 1;
          int v79 = *k;
          if (v79 != 44)
          {
            if (v79 == 125)
            {
              *a2 = (unsigned __int8 *)(k + 1);
              uint64_t v34 = a3;
              goto LABEL_59;
            }
            int64_t v61 = k - (char *)a2[1];
            int v62 = 6;
            goto LABEL_150;
          }
          unsigned int i = (unsigned __int8 *)(k + 1);
          *a2 = i;
          while (1)
          {
            unsigned int v80 = *i;
            BOOL v103 = v80 > 0x20;
            uint64_t v81 = (1 << v80) & 0x100002600;
            if (v103 || v81 == 0) {
              break;
            }
            ++i;
          }
          *a2 = i;
          int v83 = *i;
          if (v83 == 125)
          {
            rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject(a3, v35);
LABEL_219:
            ++*a2;
            return;
          }
          ++v65;
          if (v83 != 34) {
            goto LABEL_196;
          }
        }
      }
    }
  }
  else
  {
    switch(v7)
    {
      case '""':
        rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<128u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, (uint64_t)a3);
        break;
      case '[':
        if (v8 != 91) {
          __assert_rtn("ParseArray", "reader.h", 807, "is.Peek() == '['");
        }
        *a2 = (unsigned __int8 *)(v6 + 1);
        uint64_t v27 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
        *(void *)(v27 + 8) = 0;
        *(void *)(v27 + 16) = 0;
        *(void *)uint64_t v27 = 0;
        *(_WORD *)(v27 + 22) = 4;
        for (m = *a2; ; ++m)
        {
          unsigned int v30 = *m;
          BOOL v103 = v30 > 0x20;
          uint64_t v31 = (1 << v30) & 0x100002600;
          if (v103 || v31 == 0) {
            break;
          }
        }
        *a2 = m;
        if (!*(_DWORD *)(a1 + 48))
        {
          if (*m == 93)
          {
            *a2 = m + 1;
            uint64_t v36 = a3;
            unsigned int v37 = 0;
LABEL_65:
            rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray(v36, v37);
          }
          else
          {
            unsigned int v84 = 0;
            while (1)
            {
              rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<128u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3, v28);
              if (*(_DWORD *)(a1 + 48)) {
                break;
              }
              for (n = *a2; ; ++n)
              {
                unsigned int v86 = *n;
                BOOL v103 = v86 > 0x20;
                uint64_t v87 = (1 << v86) & 0x100002600;
                if (v103 || v87 == 0) {
                  break;
                }
              }
              ++v84;
              *a2 = n;
              int v89 = *n;
              if (v89 != 44)
              {
                if (v89 == 93)
                {
                  *a2 = n + 1;
                  uint64_t v36 = a3;
                  unsigned int v37 = v84;
                  goto LABEL_65;
                }
                int64_t v61 = n - a2[1];
                int v62 = 7;
                goto LABEL_150;
              }
              char v90 = n + 1;
              *a2 = v90;
              while (1)
              {
                unsigned int v91 = *v90;
                BOOL v103 = v91 > 0x20;
                uint64_t v92 = (1 << v91) & 0x100002600;
                if (v103 || v92 == 0) {
                  break;
                }
                ++v90;
              }
              *a2 = v90;
              if (*v90 == 93)
              {
                rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray(a3, v84);
                goto LABEL_219;
              }
            }
          }
        }
        break;
      case 'f':
        if (v8 != 102) {
          __assert_rtn("ParseFalse", "reader.h", 881, "is.Peek() == 'f'");
        }
        uint64_t v9 = v6 + 1;
        *a2 = (unsigned __int8 *)(v6 + 1);
        if (v6[1] == 97)
        {
          uint64_t v9 = v6 + 2;
          *a2 = (unsigned __int8 *)(v6 + 2);
          if (v6[2] == 108)
          {
            uint64_t v9 = v6 + 3;
            *a2 = (unsigned __int8 *)(v6 + 3);
            if (v6[3] == 115)
            {
              uint64_t v9 = v6 + 4;
              *a2 = (unsigned __int8 *)(v6 + 4);
              if (v6[4] == 101)
              {
                *a2 = (unsigned __int8 *)(v6 + 5);
                uint64_t v10 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
                *(void *)(v10 + 8) = 0;
                *(void *)(v10 + 16) = 0;
                *(void *)uint64_t v10 = 0;
                __int16 v11 = 9;
LABEL_55:
                *(_WORD *)(v10 + 22) = v11;
                return;
              }
            }
          }
        }
        if (*(_DWORD *)(a1 + 48)) {
          __assert_rtn("ParseFalse", "reader.h", 889, "!HasParseError()");
        }
        goto LABEL_149;
      default:
        goto LABEL_29;
    }
  }
}

void sub_1C5D32998(_Unwind_Exception *a1)
{
  *uint64_t v1 = v3;
  v1[1] = v2;
  _Unwind_Resume(a1);
}

double rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<128u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  long long v25 = *a2;
  uint64_t v26 = a2;
  if (*(unsigned char *)v25 != 34) {
    __assert_rtn("ParseString", "reader.h", 961, "s.Peek() == '\\\"'");
  }
  uint64_t v5 = (unsigned __int8 *)(v25 + 1);
  *(void *)&long long v25 = v25 + 1;
  *(void *)uint64_t v23 = a1;
  unsigned int v24 = 0;
  while (1)
  {
    while (1)
    {
      unsigned int v6 = *v5;
      if (v6 == 92) {
        break;
      }
      if (v6 == 34)
      {
        *(void *)&long long v25 = v5 + 1;
        *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(void **)v23, 1) = 0;
        ++v24;
        if (!*(_DWORD *)(a1 + 48))
        {
          unsigned int v15 = v24;
          uint64_t v16 = (const char *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>::Pop(*(uint64_t *)v23, v24);
          rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::String(a3, v16, v15 - 1);
        }
        goto LABEL_27;
      }
      if (v6 <= 0x1F)
      {
        int v17 = *(_DWORD *)(a1 + 48);
        if (*v5)
        {
          if (!v17)
          {
            int v18 = &v5[-*((void *)&v25 + 1)];
            int v19 = 12;
            goto LABEL_26;
          }
          int v21 = 1044;
        }
        else
        {
          if (!v17)
          {
            int v18 = &v5[-*((void *)&v25 + 1)];
            int v19 = 11;
            goto LABEL_26;
          }
          int v21 = 1042;
        }
        goto LABEL_31;
      }
      *(void *)&long long v25 = ++v5;
      int v7 = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(void **)v23, 1);
LABEL_7:
      *int v7 = v6;
      ++v24;
    }
    uint64_t v8 = v5[1];
    *(void *)&long long v25 = v5 + 1;
    LOBYTE(v6) = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseStringToStream<0u,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(rapidjson::GenericStringStream<rapidjson::UTF8<char>> &,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char> &)::escape[v8];
    if ((_BYTE)v6)
    {
      v5 += 2;
      *(void *)&long long v25 = v5;
      int v7 = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(void **)v23, 1);
      goto LABEL_7;
    }
    if (v8 != 117)
    {
      if (!*(_DWORD *)(a1 + 48))
      {
        int v19 = 10;
        int v18 = &v5[-*((void *)&v25 + 1)];
        goto LABEL_26;
      }
      int v21 = 1033;
LABEL_31:
      __assert_rtn("ParseStringToStream", "reader.h", v21, "!HasParseError()");
    }
    *(void *)&long long v25 = v5 + 2;
    uint64_t v22 = (uint64_t)&v5[-*((void *)&v25 + 1)];
    unsigned int v9 = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(a1, (uint64_t *)&v25, (uint64_t)&v5[-*((void *)&v25 + 1)]);
    unsigned int v10 = v9;
    if (*(_DWORD *)(a1 + 48)) {
      goto LABEL_27;
    }
    if (v9 >> 10 == 54) {
      break;
    }
LABEL_13:
    rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>((void **)v23, v10);
    uint64_t v5 = (unsigned __int8 *)v25;
  }
  uint64_t v11 = v25;
  if (*(unsigned char *)v25 == 92)
  {
    int v12 = *(unsigned __int8 *)(v25 + 1);
    *(void *)&long long v25 = v25 + 1;
    if (v12 == 117)
    {
      unsigned int v13 = v9;
      *(void *)&long long v25 = v11 + 2;
      int v14 = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(a1, (uint64_t *)&v25, v22);
      if (*(_DWORD *)(a1 + 48)) {
        goto LABEL_27;
      }
      if ((v14 - 57344) >= 0xFFFFFC00)
      {
        unsigned int v10 = ((v14 - 56320) | ((v13 << 10) - 56623104)) + 0x10000;
        goto LABEL_13;
      }
    }
  }
  int v19 = 9;
  int v18 = (unsigned __int8 *)v22;
LABEL_26:
  *(_DWORD *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v18;
LABEL_27:
  double result = *(double *)&v25;
  *uint64_t v26 = v25;
  return result;
}

void sub_1C5D32C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, _OWORD *a14)
{
  *a14 = a13;
  _Unwind_Resume(a1);
}

uint64_t rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(void *a1)
{
  uint64_t v3 = a1 + 3;
  uint64_t result = a1[3];
  if (v3[1] - result > 23)
  {
    if (result) {
      goto LABEL_3;
    }
LABEL_6:
    __assert_rtn("PushUnsafe", "stack.h", 130, "stackTop_");
  }
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a1);
  uint64_t result = a1[3];
  if (!result) {
    goto LABEL_6;
  }
LABEL_3:
  if (a1[4] - result <= 23) {
    __assert_rtn("PushUnsafe", "stack.h", 131, "static_cast<std::ptrdiff_t>(sizeof(T) * count) <= (stackEnd_ - stackTop_)");
  }
  a1[3] = result + 24;
  return result;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64(uint64_t a1, unint64_t a2)
{
  uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)(a1 + 40));
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = a2;
  *(_WORD *)(result + 22) = 150;
  if ((a2 & 0x8000000000000000) != 0)
  {
    if (a2 < 0xFFFFFFFF80000000) {
      return result;
    }
    __int16 v5 = 182;
    goto LABEL_9;
  }
  if (HIDWORD(a2)) {
    __int16 v4 = 406;
  }
  else {
    __int16 v4 = 470;
  }
  *(_WORD *)(result + 22) = v4;
  if (!(a2 >> 31))
  {
    __int16 v5 = v4 | 0x20;
LABEL_9:
    *(_WORD *)(result + 22) = v5;
  }
  return result;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64(uint64_t a1, uint64_t a2)
{
  uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)(a1 + 40));
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = a2;
  if (a2 < 0) {
    __int16 v4 = 278;
  }
  else {
    __int16 v4 = 406;
  }
  *(_WORD *)(result + 22) = v4;
  if (!HIDWORD(a2))
  {
    *(_WORD *)(result + 22) = v4 | 0x40;
    if (!((unint64_t)a2 >> 31)) {
      *(_WORD *)(result + 22) = v4 | 0x60;
    }
  }
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(void *a1)
{
  uint64_t v1 = a1[2];
  if (v1)
  {
    unint64_t v2 = a1[4] - v1 + ((unint64_t)(a1[4] - v1 + 1) >> 1);
  }
  else
  {
    if (!*a1) {
      operator new();
    }
    uint64_t v1 = 0;
    unint64_t v2 = a1[5];
  }
  unint64_t v3 = a1[3] - v1 + 24;
  if (v2 <= v3) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = v2;
  }
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v4);
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray(void *a1, unsigned int a2)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  size_t v4 = 24 * a2;
  if (v3 - v2 < v4) {
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  }
  __int16 v5 = (_WORD *)(v3 - v4);
  a1[8] = v3 - v4;
  if (v3 - v4 - v2 <= 0x17) {
    __assert_rtn("Top", "stack.h", 146, "GetSize() >= sizeof(T)");
  }
  uint64_t result = (void *)a1[3];
  if (!result) {
    __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
  }
  *(v5 - 1) = 4;
  if (a2)
  {
    uint64_t v8 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)result, 24 * a2);
    *((void *)v5 - 2) = v8;
    uint64_t result = memcpy(v8, v5, v4);
  }
  else
  {
    *((void *)v5 - 2) = 0;
  }
  *((_DWORD *)v5 - 6) = a2;
  *((_DWORD *)v5 - 5) = a2;
  return result;
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject(void *a1, unsigned int a2)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  size_t v4 = 48 * a2;
  if (v3 - v2 < v4) {
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  }
  __int16 v5 = (_WORD *)(v3 - v4);
  a1[8] = v3 - v4;
  if (v3 - v4 - v2 <= 0x17) {
    __assert_rtn("Top", "stack.h", 146, "GetSize() >= sizeof(T)");
  }
  uint64_t result = (void *)a1[3];
  if (!result) {
    __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
  }
  *(v5 - 1) = 3;
  if (a2)
  {
    uint64_t v8 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)result, 48 * a2);
    *((void *)v5 - 2) = v8;
    uint64_t result = memcpy(v8, v5, v4);
  }
  else
  {
    *((void *)v5 - 2) = 0;
  }
  *((_DWORD *)v5 - 6) = a2;
  *((_DWORD *)v5 - 5) = a2;
  return result;
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>::Pop(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 - *(void *)(a1 + 16) < (unint64_t)a2) {
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  }
  uint64_t v3 = v2 - a2;
  *(void *)(a1 + 24) = v3;
  return v3;
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::String(uint64_t a1, const char *a2, int a3)
{
  uint64_t v6 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)(a1 + 40));
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
  }
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  uint64_t v8 = "";
  if (a2) {
    uint64_t v8 = a2;
  }
  unsigned int v10 = v8;
  int v11 = a3;
  if (!a2 && a3) {
    __assert_rtn("GenericStringRef", "document.h", 322, "str != 0 || len == 0u");
  }
  return rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetStringRaw((_WORD *)v6, (uint64_t)&v10, v7);
}

uint64_t rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(void *a1, uint64_t a2)
{
  if (a1[4] - a1[3] < a2) {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(a1, a2);
  }
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>((uint64_t)a1, a2);
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  LODWORD(result) = 0;
  uint64_t v5 = *a2;
  while (1)
  {
    int v6 = *(char *)(v5 + v4);
    if ((v6 - 48) >= 0xA) {
      break;
    }
    int v7 = -48;
LABEL_8:
    uint64_t result = (v6 + 16 * result + v7);
    *a2 = v5 + v4++ + 1;
    if (v4 == 4) {
      return result;
    }
  }
  if (*(unsigned __int8 *)(v5 + v4) - 65 < 6)
  {
    int v7 = -55;
    goto LABEL_8;
  }
  if (*(unsigned __int8 *)(v5 + v4) - 97 < 6)
  {
    int v7 = -87;
    goto LABEL_8;
  }
  if (*(_DWORD *)(v3 + 48)) {
    __assert_rtn("ParseHex4", "reader.h", 917, "!HasParseError()");
  }
  uint64_t result = 0;
  *(_DWORD *)(v3 + 48) = 8;
  *(void *)(v3 + 56) = a3;
  return result;
}

unsigned char *rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(void **a1, unsigned int a2)
{
  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (HIWORD(a2))
      {
        if (a2 >= 0x110000) {
          __assert_rtn("Encode", "encodings.h", 115, "codepoint <= 0x10FFFF");
        }
        *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 1) = (a2 >> 18) | 0xF0;
        int v6 = a1 + 1;
        ++*((_DWORD *)a1 + 2);
        *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 1) = (a2 >> 12) & 0x3F | 0x80;
        ++*((_DWORD *)a1 + 2);
      }
      else
      {
        *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 1) = (a2 >> 12) | 0xE0;
        int v6 = a1 + 1;
        ++*((_DWORD *)a1 + 2);
      }
      *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 1) = (a2 >> 6) & 0x3F | 0x80;
      ++*v6;
    }
    else
    {
      *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 1) = (a2 >> 6) | 0xC0;
      int v6 = a1 + 1;
      ++*((_DWORD *)a1 + 2);
    }
    uint64_t result = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 1);
    *uint64_t result = a2 & 0x3F | 0x80;
    uint64_t v4 = v6;
  }
  else
  {
    uint64_t v4 = a1 + 1;
    uint64_t result = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 1);
    *uint64_t result = a2;
  }
  ++*v4;
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    unint64_t v3 = a1[4] - v2 + ((unint64_t)(a1[4] - v2 + 1) >> 1);
  }
  else
  {
    if (!*a1) {
      operator new();
    }
    uint64_t v2 = 0;
    unint64_t v3 = a1[5];
  }
  size_t v4 = a1[3] + a2 - v2;
  if (v3 <= v4) {
    size_t v5 = v4;
  }
  else {
    size_t v5 = v3;
  }
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v5);
}

uint64_t rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    __assert_rtn("PushUnsafe", "stack.h", 130, "stackTop_");
  }
  if (*(void *)(a1 + 32) - v2 < a2) {
    __assert_rtn("PushUnsafe", "stack.h", 131, "static_cast<std::ptrdiff_t>(sizeof(T) * count) <= (stackEnd_ - stackTop_)");
  }
  *(void *)(a1 + 24) = v2 + a2;
  return v2;
}

uint64_t siri::dialogengine::ConstructJSONString@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  memset(v13, 0, sizeof(v13));
  uint64_t v14 = 0;
  uint64_t v15 = 256;
  int v6 = v13;
  memset(v7, 0, sizeof(v7));
  uint64_t v8 = 0;
  uint64_t v9 = 512;
  int v10 = 324;
  __int16 v11 = 0x2000;
  uint64_t v12 = 4;
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(&v6);
  siri::dialogengine::WriteToJSON((uint64_t *)&v6, a1);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(&v6);
  String = (char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString(v13);
  std::string::basic_string[abi:ne180100]<0>(a2, String);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v7);
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v13);
}

void sub_1C5D335E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(v11);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(void **a1)
{
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1, 3);
  uint64_t v2 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>(a1 + 1);
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 0;
  uint64_t result = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 1);
  *uint64_t result = 123;
  return result;
}

void siri::dialogengine::WriteToJSON(uint64_t *a1, void *a2)
{
  uint64_t v2 = (long long *)(a2 + 1);
  unint64_t v3 = (long long *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    while (2)
    {
      std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100](&v33, v3 + 2);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v5 = &v33;
      }
      else {
        size_t v5 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      unsigned int v6 = strlen((const char *)v5);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a1, (uint64_t)v5, v6);
      switch(v34[2])
      {
        case 0:
          uint64_t v8 = v35;
          v28[0] = v34;
          v28[1] = v35;
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          JSONIntVal = (rapidjson::internal *)siri::dialogengine::GetJSONIntVal(v28, v7);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int((void **)a1, JSONIntVal);
          goto LABEL_41;
        case 1:
          uint64_t v8 = v35;
          v27[0] = v34;
          v27[1] = v35;
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          JSONUintVal = (rapidjson::internal *)siri::dialogengine::GetJSONUintVal(v27, v7);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint((void **)a1, JSONUintVal);
          goto LABEL_41;
        case 2:
          uint64_t v8 = v35;
          v26[0] = v34;
          v26[1] = v35;
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t JSONInt64Val = siri::dialogengine::GetJSONInt64Val(v26, v7);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64((void **)a1, JSONInt64Val);
          goto LABEL_41;
        case 3:
          uint64_t v8 = v35;
          v29[0] = v34;
          v29[1] = v35;
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL JSONBoolVal = siri::dialogengine::GetJSONBoolVal(v29, v7);
          if (JSONBoolVal) {
            int v19 = 2;
          }
          else {
            int v19 = 1;
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)a1, v19);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool(a1, JSONBoolVal);
          goto LABEL_41;
        case 5:
          uint64_t v8 = v35;
          v25[0] = v34;
          v25[1] = v35;
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          double JSONDoubleVal = siri::dialogengine::GetJSONDoubleVal(v25, v7);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)a1, 6);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteDouble((uint64_t)a1, JSONDoubleVal);
          goto LABEL_41;
        case 6:
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((void **)a1);
          uint64_t v15 = v35;
          v30[0] = v34;
          v30[1] = v35;
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::GetJSONObjectVal(v30, v14, &__p);
          siri::dialogengine::WriteToJSON(a1, &__p);
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)__p.__r_.__value_.__l.__size_);
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((void **)a1);
          goto LABEL_43;
        case 7:
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((void **)a1);
          int v17 = v35;
          v31[0] = v34;
          v31[1] = v35;
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::GetJSONArrayVal(v31, v16, (uint64_t)&__p);
          siri::dialogengine::WriteToJSONFromArrayType(a1, (const char *)&__p);
          p_p = &__p;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((void **)a1);
          goto LABEL_43;
        default:
          uint64_t v8 = v35;
          v24[0] = v34;
          v24[1] = v35;
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::GetJSONStringVal(v24, v7, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v12 = &__p;
          }
          else {
            uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          unsigned int v13 = strlen((const char *)v12);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a1, (uint64_t)v12, v13);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
LABEL_41:
          if (v8) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
LABEL_43:
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v33.__r_.__value_.__l.__data_);
          }
          int v21 = (long long *)*((void *)v3 + 1);
          if (v21)
          {
            do
            {
              uint64_t v22 = v21;
              int v21 = *(long long **)v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              uint64_t v22 = (long long *)*((void *)v3 + 2);
              BOOL v23 = *(void *)v22 == (void)v3;
              unint64_t v3 = v22;
            }
            while (!v23);
          }
          unint64_t v3 = v22;
          if (v22 == v2) {
            return;
          }
          continue;
      }
    }
  }
}

void sub_1C5D3397C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  *(void *)(v32 - 104) = &__p;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 104));
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(v32 - 144);
  _Unwind_Resume(a1);
}

unsigned char *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(void **a1)
{
  uint64_t v1 = (char *)a1[4];
  if ((unint64_t)(v1 - (char *)a1[3]) <= 0xF) {
    __assert_rtn("EndObject", "prettywriter.h", 139, "Base::level_stack_.GetSize() >= sizeof(typename Base::Level)");
  }
  if (*(v1 - 8)) {
    __assert_rtn("EndObject", "prettywriter.h", 140, "!Base::level_stack_.template Top<typename Base::Level>()->inArray");
  }
  uint64_t v4 = *((void *)v1 - 2);
  uint64_t v2 = v1 - 16;
  uint64_t v3 = v4;
  if (v4) {
    __assert_rtn("EndObject", "prettywriter.h", 141, "0 == Base::level_stack_.template Top<typename Base::Level>()->valueCount % 2");
  }
  a1[4] = v2;
  if (v3)
  {
    *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 1) = 10;
    size_t v6 = ((unint64_t)((char *)a1[4] - (char *)a1[3]) >> 4) * *((unsigned int *)a1 + 16);
    int v7 = *((unsigned __int8 *)a1 + 61);
    uint64_t v8 = (void *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, v6);
    memset(v8, v7, v6);
  }
  uint64_t result = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 1);
  *uint64_t result = 125;
  return result;
}

uint64_t rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString(void *a1)
{
  *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(a1, 1) = 0;
  uint64_t result = a1[2];
  uint64_t v3 = a1[3];
  if (v3 == result) {
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  }
  a1[3] = v3 - 1;
  return result;
}

unsigned char *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  if (!a2) {
    __assert_rtn("String", "prettywriter.h", 111, "str != 0");
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)a1, 5);
  return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(a1, a2, a3);
}

unsigned char *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray(void **a1)
{
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1, 4);
  uint64_t v2 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>(a1 + 1);
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  uint64_t result = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 1);
  *uint64_t result = 91;
  return result;
}

void siri::dialogengine::WriteToJSONFromArrayType(uint64_t *a1, const char *a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = *((void *)a2 + 1);
  if (*(void *)a2 != v3)
  {
    while (2)
    {
      size_t v6 = *(_DWORD **)v2;
      size_t v5 = *(std::__shared_weak_count **)(v2 + 8);
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      switch(v6[2])
      {
        case 0:
          v19[0] = v6;
          v19[1] = v5;
          if (v5) {
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          JSONIntVal = (rapidjson::internal *)siri::dialogengine::GetJSONIntVal(v19, a2);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int((void **)a1, JSONIntVal);
          goto LABEL_28;
        case 1:
          v18[0] = v6;
          v18[1] = v5;
          if (v5) {
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          JSONUintVal = (rapidjson::internal *)siri::dialogengine::GetJSONUintVal(v18, a2);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint((void **)a1, JSONUintVal);
          goto LABEL_28;
        case 3:
          v20[0] = v6;
          v20[1] = v5;
          if (v5) {
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL JSONBoolVal = siri::dialogengine::GetJSONBoolVal(v20, a2);
          if (JSONBoolVal) {
            int v12 = 2;
          }
          else {
            int v12 = 1;
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)a1, v12);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool(a1, JSONBoolVal);
          goto LABEL_28;
        case 5:
          v17[0] = v6;
          v17[1] = v5;
          if (v5) {
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          double JSONDoubleVal = siri::dialogengine::GetJSONDoubleVal(v17, a2);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)a1, 6);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteDouble((uint64_t)a1, JSONDoubleVal);
LABEL_28:
          if (!v5) {
            goto LABEL_44;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          goto LABEL_43;
        case 6:
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((void **)a1);
          v21[0] = v6;
          v21[1] = v5;
          if (v5) {
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::GetJSONObjectVal(v21, v14, &__p);
          siri::dialogengine::WriteToJSON(a1, &__p);
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((void *)__p.__r_.__value_.__l.__size_);
          if (v5) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((void **)a1);
          goto LABEL_42;
        case 7:
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((void **)a1);
          v22[0] = v6;
          v22[1] = v5;
          if (v5) {
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::GetJSONArrayVal(v22, v15, (uint64_t)&__p);
          siri::dialogengine::WriteToJSONFromArrayType(a1, &__p);
          p_p = &__p;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
          if (v5) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((void **)a1);
          goto LABEL_42;
        default:
          v16[0] = v6;
          v16[1] = v5;
          if (v5) {
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::dialogengine::GetJSONStringVal(v16, a2, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v9 = &__p;
          }
          else {
            uint64_t v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          unsigned int v10 = strlen((const char *)v9);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a1, (uint64_t)v9, v10);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (!v5) {
              goto LABEL_42;
            }
          }
          else if (!v5)
          {
            goto LABEL_42;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
LABEL_42:
          if (v5) {
LABEL_43:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v5);
LABEL_44:
          v2 += 16;
          if (v2 == v3) {
            return;
          }
          continue;
      }
    }
  }
}

void sub_1C5D33EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  *(void *)(v29 - 88) = &__p;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 88));
  if (v28)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(a1);
}

unsigned char *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray(void **a1)
{
  uint64_t v1 = (char *)a1[4];
  if ((unint64_t)(v1 - (char *)a1[3]) <= 0xF) {
    __assert_rtn("EndArray", "prettywriter.h", 165, "Base::level_stack_.GetSize() >= sizeof(typename Base::Level)");
  }
  if (!*(v1 - 8)) {
    __assert_rtn("EndArray", "prettywriter.h", 166, "Base::level_stack_.template Top<typename Base::Level>()->inArray");
  }
  uint64_t v3 = *((void *)v1 - 2);
  a1[4] = v1 - 16;
  if (v3 && (*((unsigned char *)a1 + 68) & 1) == 0)
  {
    *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 1) = 10;
    size_t v4 = ((unint64_t)((char *)a1[4] - (char *)a1[3]) >> 4) * *((unsigned int *)a1 + 16);
    int v5 = *((unsigned __int8 *)a1 + 61);
    size_t v6 = (void *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, v4);
    memset(v6, v5, v4);
  }
  uint64_t result = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 1);
  *uint64_t result = 93;
  return result;
}

void **rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(void **result, int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (char *)result[4];
  unint64_t v4 = v3 - (char *)result[3];
  if (v4)
  {
    if (v4 <= 0xF) {
      __assert_rtn("Top", "stack.h", 146, "GetSize() >= sizeof(T)");
    }
    uint64_t v6 = *((void *)v3 - 2);
    if (*(v3 - 8))
    {
      if (v6)
      {
        uint64_t result = (void **)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*result, 1);
        *(unsigned char *)uint64_t result = 44;
        if (*((unsigned char *)v2 + 68))
        {
          uint64_t result = (void **)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*v2, 1);
          *(unsigned char *)uint64_t result = 32;
        }
      }
      if (*((unsigned char *)v2 + 68)) {
        goto LABEL_21;
      }
      *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*v2, 1) = 10;
    }
    else
    {
      char v7 = 10;
      if (v6)
      {
        uint64_t v8 = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*result, 1);
        if (v6) {
          char v9 = 58;
        }
        else {
          char v9 = 44;
        }
        if (v6) {
          char v7 = 32;
        }
        else {
          char v7 = 10;
        }
        *uint64_t v8 = v9;
      }
      uint64_t result = (void **)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*v2, 1);
      *(unsigned char *)uint64_t result = v7;
      if (*(v3 - 16)) {
        goto LABEL_21;
      }
    }
    size_t v10 = ((unint64_t)((char *)v2[4] - (char *)v2[3]) >> 4) * *((unsigned int *)v2 + 16);
    uint64_t v11 = *v2;
    int v12 = *((unsigned __int8 *)v2 + 61);
    unsigned int v13 = (void *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(v11, v10);
    uint64_t result = (void **)memset(v13, v12, v10);
LABEL_21:
    if (*(v3 - 8)) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = a2 == 5;
    }
    if (!v14 && (*((void *)v3 - 2) & 1) == 0) {
      __assert_rtn("PrettyPrefix", "prettywriter.h", 243, "type == kStringType");
    }
    ++*((void *)v3 - 2);
    return result;
  }
  if (*((unsigned char *)result + 60)) {
    __assert_rtn("PrettyPrefix", "prettywriter.h", 247, "!Base::hasRoot_");
  }
  *((unsigned char *)result + 60) = 1;
  return result;
}

unsigned char *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool(uint64_t *a1, int a2)
{
  uint64_t v3 = (void *)*a1;
  uint64_t v4 = v3[4] - v3[3];
  if (!a2)
  {
    if (v4 <= 4)
    {
      rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v3, 5);
      uint64_t v3 = (void *)*a1;
    }
    *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>((uint64_t)v3, 1) = 102;
    char v5 = 115;
    char v6 = 108;
    char v7 = 97;
    goto LABEL_7;
  }
  if (v4 <= 3)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v3, 4);
    char v5 = 117;
    char v6 = 114;
    char v7 = 116;
LABEL_7:
    uint64_t v3 = (void *)*a1;
    goto LABEL_8;
  }
  char v5 = 117;
  char v6 = 114;
  char v7 = 116;
LABEL_8:
  *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>((uint64_t)v3, 1) = v7;
  *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = v6;
  *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = v5;
  uint64_t result = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1);
  *uint64_t result = 101;
  return result;
}

unsigned char *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int(void **a1, rapidjson::internal *a2)
{
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1, 6);
  uint64_t v4 = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 11);
  char v6 = v4;
  if ((a2 & 0x80000000) != 0)
  {
    *uint64_t v4 = 45;
    char v7 = v4 + 1;
    a2 = (rapidjson::internal *)-(int)a2;
  }
  else
  {
    char v7 = v4;
  }
  uint64_t result = rapidjson::internal::u32toa(a2, v7, v5);
  uint64_t v9 = (*a1)[3];
  if (v9 - (*a1)[2] < (unint64_t)(v6 - result + 11)) {
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  }
  (*a1)[3] = v9 - (v6 - result) - 11;
  return result;
}

unsigned char *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint(void **a1, rapidjson::internal *a2)
{
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1, 6);
  uint64_t v4 = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 10);
  uint64_t result = rapidjson::internal::u32toa(a2, v4, v5);
  uint64_t v7 = (*a1)[3];
  if (v7 - (*a1)[2] < (unint64_t)(v4 - result + 10)) {
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  }
  (*a1)[3] = v7 - (v4 - result) - 10;
  return result;
}

unsigned char *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64(void **a1, unint64_t a2)
{
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1, 6);
  uint64_t v4 = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 21);
  char v6 = v4;
  if ((a2 & 0x8000000000000000) != 0)
  {
    *uint64_t v4 = 45;
    uint64_t v7 = v4 + 1;
    a2 = -(uint64_t)a2;
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t result = rapidjson::internal::u64toa(a2, v7, v5);
  uint64_t v9 = (*a1)[3];
  if (v9 - (*a1)[2] < (unint64_t)(v6 - result + 21)) {
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  }
  (*a1)[3] = v9 - (v6 - result) - 21;
  return result;
}

BOOL rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteDouble(uint64_t a1, double a2)
{
  unint64_t v3 = *(void *)&a2;
  uint64_t v4 = *(void *)&a2 & 0x7FF0000000000000;
  if ((*(void *)&a2 & 0x7FF0000000000000) == 0x7FF0000000000000) {
    return v4 != 0x7FF0000000000000;
  }
  char v6 = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(void **)a1, 25);
  int v7 = *(_DWORD *)(a1 + 56);
  if (v7 <= 0) {
    __assert_rtn("dtoa", "dtoa.h", 217, "maxDecimalPlaces >= 1");
  }
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    if (a2 >= 0.0)
    {
      uint64_t v8 = v6;
    }
    else
    {
      unsigned char *v6 = 45;
      uint64_t v8 = v6 + 1;
      unint64_t v3 = *(void *)&a2 ^ 0x8000000000000000;
    }
    int v10 = ((v3 >> 52) & 0x7FF) - 1075;
    unint64_t v11 = v3 & 0xFFFFFFFFFFFFFLL;
    if (((v3 >> 52) & 0x7FF) != 0) {
      unint64_t v11 = v3 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
    }
    else {
      int v10 = -1074;
    }
    uint64_t v12 = (2 * (v11 & 0x1FFFFFFFFFFFFFLL)) | 1;
    int v13 = v10 - 1;
    if (((v3 >> 52) & 0x7FF) == 0)
    {
      unint64_t v14 = __clz((2 * (v11 & 0x1FFFFFFFFFFFFFLL)) & 0x1FFFFFFFFFFFFELL | 1) - 10;
      unint64_t v15 = v14;
      do
      {
        --v13;
        --v15;
      }
      while (v15);
      v12 <<= v14;
    }
    uint64_t v16 = 2 * v11 - 1;
    if (v11 == 0x10000000000000) {
      char v17 = -2;
    }
    else {
      char v17 = -1;
    }
    if (v11 == 0x10000000000000) {
      uint64_t v16 = 0x3FFFFFFFFFFFFFLL;
    }
    double v18 = (double)(-51 - v13) * 0.301029996 + 347.0;
    int v19 = (int)v18;
    if (v18 - (double)(int)v18 > 0.0) {
      ++v19;
    }
    unsigned int v20 = (v19 >> 3) + 1;
    if (v20 >= 0x57) {
      __assert_rtn("GetCachedPowerByIndex", "diyfp.h", 234, "index < 87");
    }
    if (!v11) {
      __assert_rtn("Normalize", "diyfp.h", 103, "f != 0");
    }
    uint64_t v89 = v4;
    char v90 = v6;
    uint64_t v21 = v12 << 10;
    uint64_t v22 = (v13 - 10);
    uint64_t v23 = v16 << (v10 - (v13 - 10) + v17);
    int v87 = v7;
    int v88 = 8 * v20;
    uint64_t v24 = rapidjson::internal::GetCachedPowerByIndex(unsigned long)::kCachedPowers_F[v20];
    int v25 = __clz(v11);
    unint64_t v26 = rapidjson::internal::DiyFp::operator*(v11 << v25, (v10 - v25), v24);
    unint64_t v27 = rapidjson::internal::DiyFp::operator*(v21, v22, v24);
    int v29 = v28;
    unint64_t v30 = rapidjson::internal::DiyFp::operator*(v23, v22, v24);
    int v31 = 0;
    unint64_t v32 = v27 - 1 + ~v30;
    int v33 = -v29;
    unint64_t v34 = 1 << -(char)v29;
    unint64_t v35 = v27 - 1 - v26;
    unint64_t v36 = (v27 - 1) >> -(char)v29;
    unint64_t v37 = (v34 - 1) & (v27 - 1);
    if (v36 < 0x5F5E100) {
      int v38 = 8;
    }
    else {
      int v38 = 9;
    }
    if (v36 >= 0x989680) {
      int v39 = v38;
    }
    else {
      int v39 = 7;
    }
    if (v36 >= 0xF4240) {
      int v40 = v39;
    }
    else {
      int v40 = 6;
    }
    if (v36 >= 0x186A0) {
      int v41 = v40;
    }
    else {
      int v41 = 5;
    }
    if (v36 >> 4 >= 0x271) {
      int v42 = v41;
    }
    else {
      int v42 = 4;
    }
    if (v36 >= 0x3E8) {
      int v43 = v42;
    }
    else {
      int v43 = 3;
    }
    if (v36 >= 0x64) {
      int v44 = v43;
    }
    else {
      int v44 = 2;
    }
    if (v36 >= 0xA) {
      int v45 = v44;
    }
    else {
      int v45 = 1;
    }
    while (2)
    {
      if (v45 <= 0)
      {
        LODWORD(v60) = 1;
        int v59 = v88;
        do
        {
          uint64_t v61 = 10 * v37;
          unint64_t v62 = (10 * v37) >> v33;
          if ((_BYTE)v62) {
            BOOL v63 = 0;
          }
          else {
            BOOL v63 = v31 == 0;
          }
          if (v63) {
            int v31 = 0;
          }
          else {
            v8[v31++] = v62 + 48;
          }
          v32 *= 10;
          unint64_t v37 = v61 & (v34 - 1);
          uint64_t v60 = (int)v60 - 1;
        }
        while (v32 <= v37);
        int v45 = v60 - 1;
        if ((int)v60 < -7) {
          uint64_t v64 = 0;
        }
        else {
          uint64_t v64 = rapidjson::internal::DigitGen(rapidjson::internal::DiyFp const&,rapidjson::internal::DiyFp const&,unsigned long long,char *,int *,int *)::kPow10[1 - v60];
        }
        if (v32 - v37 >= v34)
        {
          unint64_t v65 = v64 * v35;
          if (v37 < v64 * v35)
          {
            uint64_t v66 = -(uint64_t)v37;
            unint64_t v67 = v32 - v34;
            unint64_t v68 = v34 + v37;
            uint64_t v69 = -(uint64_t)(v64 * v35);
            do
            {
              if (v68 >= v65 && v65 + v66 <= v69 + v68) {
                break;
              }
              --v8[v31 - 1];
              if (v68 >= v65) {
                break;
              }
              unint64_t v70 = v67 + v66;
              v66 -= v34;
              v68 += v34;
            }
            while (v70 >= v34);
          }
        }
      }
      else
      {
        --v45;
        unint64_t v46 = 0;
        switch(v45)
        {
          case 0:
            goto LABEL_62;
          case 1:
            unsigned int v47 = v36 / 0xA;
            unint64_t v46 = v36 % 0xA;
            goto LABEL_56;
          case 2:
            unsigned int v47 = v36 / 0x64;
            unint64_t v46 = v36 % 0x64;
            goto LABEL_56;
          case 3:
            unsigned int v47 = v36 / 0x3E8;
            unint64_t v46 = v36 % 0x3E8;
            goto LABEL_56;
          case 4:
            unsigned int v47 = v36 / 0x2710;
            unint64_t v46 = v36 % 0x2710;
LABEL_56:
            LODWORD(v36) = v47;
            goto LABEL_62;
          case 5:
            unsigned int v48 = v36 / 0x186A0;
            unint64_t v46 = v36 % 0x186A0;
            goto LABEL_61;
          case 6:
            unsigned int v48 = v36 / 0xF4240;
            unint64_t v46 = v36 % 0xF4240;
            goto LABEL_61;
          case 7:
            unsigned int v48 = v36 / 0x989680;
            unint64_t v46 = v36 % 0x989680;
            goto LABEL_61;
          case 8:
            unsigned int v48 = v36 / 0x5F5E100;
            unint64_t v46 = v36 % 0x5F5E100;
LABEL_61:
            LODWORD(v36) = v48;
LABEL_62:
            int v49 = v36;
            unint64_t v36 = v46;
            if (!v49) {
              goto LABEL_63;
            }
            goto LABEL_64;
          default:
            unint64_t v46 = v36;
LABEL_63:
            LOBYTE(v49) = 0;
            int v50 = 0;
            if (v31)
            {
LABEL_64:
              int v50 = v31 + 1;
              v8[v31] = v49 + 48;
              unint64_t v36 = v46;
            }
            unint64_t v51 = (unint64_t)v36 << v33;
            unint64_t v52 = v51 + v37;
            int v31 = v50;
            if (v32 < v51 + v37) {
              continue;
            }
            if (v52 < v35)
            {
              unint64_t v53 = (unint64_t)rapidjson::internal::DigitGen(rapidjson::internal::DiyFp const&,rapidjson::internal::DiyFp const&,unsigned long long,char *,int *,int *)::kPow10[v45] << v33;
              if (v32 - (v51 + v37) >= v53)
              {
                unint64_t v54 = ~(v26 + v52);
                unint64_t v55 = v37 + v53 + v51;
                unint64_t v56 = -2 - v30 - v55;
                uint64_t v57 = v26 - v27 + 1;
                do
                {
                  if (v55 >= v35 && v54 + v27 <= v57 + v55) {
                    break;
                  }
                  --v8[v50 - 1];
                  if (v55 >= v35) {
                    break;
                  }
                  unint64_t v58 = v56 + v27;
                  v27 -= v53;
                  v55 += v53;
                }
                while (v58 >= v53);
              }
            }
            int v31 = v50;
            int v59 = v88;
            break;
        }
      }
      break;
    }
    int v71 = v45 - v59;
    int v72 = v45 - v59 + 348;
    int v73 = v72 + v31;
    if (v72 >= 0 && v73 <= 21)
    {
      if (v45 - v59 != -348)
      {
        if (v73 <= v31 + 1) {
          int v74 = v31 + 1;
        }
        else {
          int v74 = v45 - v59 + 348 + v31;
        }
        memset(&v8[v31], 48, (v74 + ~v31) + 1);
      }
      long long v75 = &v8[v73];
      _WORD *v75 = 12334;
      uint64_t v76 = (uint64_t)(v75 + 1);
      goto LABEL_127;
    }
    unsigned int v77 = v73 - 1;
    if ((v73 - 1) <= 0x14)
    {
      uint64_t v78 = (v73 + 1);
      memmove(&v8[v78], &v8[v73], -348 - v71);
      v8[v73] = 46;
      if (v87 + v72 < 0)
      {
        char v6 = v90;
        uint64_t v4 = v89;
        if (v87 < 2)
        {
LABEL_125:
          uint64_t v76 = (uint64_t)&v8[v73 + 2];
        }
        else
        {
          int v83 = v73 + v87;
          while (v8[v83] == 48)
          {
            if (--v83 <= (int)v78) {
              goto LABEL_125;
            }
          }
          uint64_t v76 = (uint64_t)&v8[v83 + 1];
        }
        goto LABEL_128;
      }
      uint64_t v76 = (uint64_t)&v8[v31 + 1];
      goto LABEL_127;
    }
    if (v73 == 0 || v73 >= 0xFFFFFFFB)
    {
      uint64_t v79 = 2 - v73;
      memmove(&v8[v79], v8, v31);
      *(_WORD *)uint64_t v8 = 11824;
      if (v73 < 0)
      {
        if ((int)v79 <= 3) {
          int v80 = 3;
        }
        else {
          int v80 = 2 - v73;
        }
        memset(v8 + 2, 48, (v80 - 2));
      }
      if (v87 < -348 - v71)
      {
        char v6 = v90;
        uint64_t v4 = v89;
        if (v87 < 2)
        {
LABEL_115:
          uint64_t v76 = (uint64_t)(v8 + 3);
        }
        else
        {
          int v81 = v87 + 1;
          while (v8[v81] == 48)
          {
            if (v81-- < 4) {
              goto LABEL_115;
            }
          }
          uint64_t v76 = (uint64_t)&v8[v81 + 1];
        }
        goto LABEL_128;
      }
      uint64_t v76 = (uint64_t)&v8[v79 + v31];
      goto LABEL_127;
    }
    if (v73 < -v87)
    {
      *(_WORD *)uint64_t v8 = 11824;
      std::string v8[2] = 48;
      uint64_t v76 = (uint64_t)(v8 + 3);
LABEL_127:
      char v6 = v90;
      uint64_t v4 = v89;
      goto LABEL_128;
    }
    if (v31 == 1)
    {
      v8[1] = 101;
      if ((v77 & 0x80000000) == 0)
      {
        uint64_t v9 = v8 + 2;
LABEL_140:
        char v6 = v90;
        uint64_t v4 = v89;
        if (v77 < 0x64)
        {
          if (v77 < 0xA)
          {
            *uint64_t v9 = v77 + 48;
            uint64_t v76 = (uint64_t)(v9 + 1);
          }
          else
          {
            *(_WORD *)uint64_t v9 = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v77];
            uint64_t v76 = (uint64_t)(v9 + 2);
          }
          goto LABEL_128;
        }
        *uint64_t v9 = v77 / 0x64 + 48;
        *(_WORD *)(v9 + 1) = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v77 % 0x64];
        goto LABEL_118;
      }
      uint64_t v9 = v8 + 3;
      std::string v8[2] = 45;
    }
    else
    {
      memmove(v8 + 2, v8 + 1, v31 - 1);
      v8[1] = 46;
      v8[v31 + 1] = 101;
      uint64_t v9 = &v8[v31 + 2];
      if ((v77 & 0x80000000) == 0) {
        goto LABEL_140;
      }
      *v9++ = 45;
    }
    unsigned int v77 = 1 - v73;
    goto LABEL_140;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    unsigned char *v6 = 45;
    uint64_t v9 = v6 + 1;
  }
  else
  {
    uint64_t v9 = v6;
  }
  *(_WORD *)uint64_t v9 = 11824;
  void v9[2] = 48;
LABEL_118:
  uint64_t v76 = (uint64_t)(v9 + 3);
LABEL_128:
  unsigned int v84 = &v6[-v76];
  uint64_t v85 = *(void *)(*(void *)a1 + 24);
  if (v85 - *(void *)(*(void *)a1 + 16) < (unint64_t)(v84 + 25)) {
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  }
  *(void *)(*(void *)a1 + 24) = v85 - (void)v84 - 25;
  return v4 != 0x7FF0000000000000;
}

unint64_t rapidjson::internal::DiyFp::operator*(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((a3 * (unint64_t)HIDWORD(a1)) >> 32)
       + HIDWORD(a3) * (unint64_t)HIDWORD(a1)
       + ((HIDWORD(a3) * (unint64_t)a1) >> 32)
       + ((((a3 * (unint64_t)a1) >> 32)
         + (a3 * HIDWORD(a1))
         + (HIDWORD(a3) * a1)
         + 0x80000000) >> 32);
}

unsigned char *rapidjson::internal::u64toa(unint64_t this, unsigned char *a2, char *a3)
{
  if (!a2) {
    __assert_rtn("u64toa", "itoa.h", 127, "buffer != 0");
  }
  if (this < 0x5F5E100)
  {
    if (this >> 4 <= 0x270)
    {
      if (this < 0x3E8)
      {
        if (this < 0x64)
        {
          if (this < 0xA) {
            goto LABEL_16;
          }
          goto LABEL_15;
        }
      }
      else
      {
        *a2++ = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(unsigned __int16)this / 0x64u];
      }
      *a2++ = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
              + ((2 * ((unsigned __int16)this / 0x64u)) | 1));
LABEL_15:
      *a2++ = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(unsigned __int16)this % 0x64u];
LABEL_16:
      *a2 = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((unsigned __int16)(2 * ((unsigned __int16)this % 0x64u)) | 1u));
      return a2 + 1;
    }
    unint64_t v6 = (this / 0x7A120uLL) & 0x3FFE;
    if (this < 0x989680)
    {
      if (this < 0xF4240)
      {
        if (this >> 5 < 0xC35) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
    }
    else
    {
      *a2++ = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + v6);
    }
    *a2++ = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + (v6 | 1));
LABEL_27:
    *a2++ = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(unsigned __int16)(this / 0x2710) % 0x64u];
LABEL_28:
    *a2 = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
          + ((unsigned __int16)(2 * ((unsigned __int16)(this / 0x2710) % 0x64u)) | 1u));
    a2[1] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[this % 0x2710 / 0x64];
    a2[2] = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((2 * (this % 0x2710 / 0x64)) | 1));
    a2[3] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[this % 0x2710 % 0x64];
    a2[4] = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((unsigned __int16)(2 * (this % 0x2710 % 0x64)) | 1u));
    return a2 + 5;
  }
  if (this < 0x2386F26FC10000)
  {
    unsigned int v3 = this % 0x5F5E100;
    unsigned int v4 = this / 0x5F5E100;
    unsigned __int16 v5 = v3 % 0x2710;
    if (this < 0x38D7EA4C68000)
    {
      if (this < 0x5AF3107A4000)
      {
        if (this < 0x9184E72A000)
        {
          if (this < 0xE8D4A51000)
          {
            if (this < 0x174876E800)
            {
              if (this < 0x2540BE400)
              {
                if (this < 0x3B9ACA00) {
                  goto LABEL_24;
                }
                goto LABEL_23;
              }
LABEL_22:
              *a2++ = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((2 * (v4 % 0x2710 / 0x64)) | 1));
LABEL_23:
              *a2++ = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v4 % 0x2710 % 0x64];
LABEL_24:
              *a2 = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                    + ((unsigned __int16)(2 * (v4 % 0x2710 % 0x64)) | 1u));
              a2[1] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v3 / 0xF4240];
              a2[2] = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((2 * (v3 / 0xF4240)) | 1));
              a2[3] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(unsigned __int16)(v3 / 0x2710) % 0x64u];
              a2[4] = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                      + ((unsigned __int16)(2 * ((unsigned __int16)(v3 / 0x2710) % 0x64u)) | 1u));
              a2[5] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v5 / 0x64u];
              a2[6] = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((2 * (v5 / 0x64u)) | 1));
              a2[7] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v5 % 0x64u];
              a2[8] = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                      + ((unsigned __int16)(2 * (v5 % 0x64u)) | 1u));
              return a2 + 9;
            }
LABEL_21:
            *a2++ = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v4 % 0x2710 / 0x64];
            goto LABEL_22;
          }
LABEL_20:
          *a2++ = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                  + ((unsigned __int16)(2 * ((unsigned __int16)(v4 / 0x2710) % 0x64u)) | 1u));
          goto LABEL_21;
        }
LABEL_19:
        *a2++ = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(unsigned __int16)(v4 / 0x2710) % 0x64u];
        goto LABEL_20;
      }
    }
    else
    {
      *a2++ = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(this / 0x5F5E100) / 0xF4240];
    }
    *a2++ = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((2 * ((this / 0x5F5E100) / 0xF4240)) | 1));
    goto LABEL_19;
  }
  unint64_t v7 = this / 0x2386F26FC10000;
  unint64_t v8 = this % 0x2386F26FC10000;
  if ((this / 0x2386F26FC10000) > 9)
  {
    if (v7 > 0x63)
    {
      unsigned int v11 = (unsigned __int16)v7 / 0x64u;
      if (v7 > 0x3E7)
      {
        uint64_t v14 = (unsigned __int16)v7 % 0x64u;
        *(_WORD *)a2 = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v11];
        a2[2] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v14];
        char v15 = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((unsigned __int16)(v14 * 2) & 0xFFFE)
                                                                             + 1);
        uint64_t v9 = a2 + 4;
        a2[3] = v15;
      }
      else
      {
        *a2 = v11 + 48;
        uint64_t v12 = (unsigned __int16)v7 % 0x64u;
        a2[1] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v12];
        char v13 = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((unsigned __int16)(v12 * 2) & 0xFFFE)
                                                                             + 1);
        uint64_t v9 = a2 + 3;
        a2[2] = v13;
      }
    }
    else
    {
      *a2 = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[this / 0x2386F26FC10000];
      uint64_t v9 = a2 + 2;
      a2[1] = HIBYTE(rapidjson::internal::GetDigitsLut(void)::cDigitsLut[this / 0x2386F26FC10000]);
    }
  }
  else
  {
    *a2 = v7 + 48;
    uint64_t v9 = a2 + 1;
  }
  unsigned int v16 = v8 % 0x5F5E100;
  unsigned __int16 v17 = (v8 / 0x5F5E100) % 0x2710;
  unsigned int v18 = v17 / 0x64u;
  uint64_t v19 = v17 % 0x64u;
  unsigned __int16 v20 = v16 % 0x2710;
  *uint64_t v9 = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(v8 / 0x5F5E100) / 0xF4240];
  v9[1] = HIBYTE(rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(v8 / 0x5F5E100) / 0xF4240]);
  *((_WORD *)v9 + 1) = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(unsigned __int16)((v8 / 0x5F5E100)
                                                                                            / 0x2710)
                                                                         % 0x64u];
  *((_WORD *)v9 + 2) = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v18];
  v9[6] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v19];
  v9[7] = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((unsigned __int16)(v19 * 2) & 0xFFFE) + 1);
  v9[8] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v16 / 0xF4240];
  v9[9] = HIBYTE(rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v16 / 0xF4240]);
  *((_WORD *)v9 + 5) = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(unsigned __int16)(v16 / 0x2710) % 0x64u];
  *((_WORD *)v9 + 6) = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v20 / 0x64u];
  v9[14] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v20 % 0x64u];
  int v10 = v9 + 16;
  v9[15] = *((unsigned char *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + (unsigned __int16)(2 * (v20 % 0x64u)) + 1);
  return v10;
}

unsigned char *rapidjson::internal::u32toa(rapidjson::internal *this, unsigned char *a2, char *a3)
{
  if (!a2) {
    __assert_rtn("u32toa", "itoa.h", 40, "buffer != 0");
  }
  if (this >> 4 <= 0x270)
  {
    if (this < 0x3E8)
    {
      if (this < 0x64)
      {
        if (this < 0xA) {
          goto LABEL_11;
        }
        goto LABEL_10;
      }
    }
    else
    {
      *a2++ = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * ((unsigned __int16)this / 0x64u));
    }
    *a2++ = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((2 * ((unsigned __int16)this / 0x64u)) | 1));
LABEL_10:
    *a2++ = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * ((unsigned __int16)this % 0x64u));
LABEL_11:
    *a2 = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
          + ((unsigned __int16)(2 * ((unsigned __int16)this % 0x64u)) | 1u));
    return a2 + 1;
  }
  if (this < 0x5F5E100)
  {
    if (this < 0x989680)
    {
      if (this <= 0xF423F)
      {
        if (this >> 5 < 0xC35) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
    }
    else
    {
      *a2++ = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this / 0xF4240));
    }
    *a2++ = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((2 * (this / 0xF4240)) | 1));
LABEL_16:
    *a2++ = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + 2 * ((unsigned __int16)(this / 0x2710) % 0x64u));
LABEL_17:
    *a2 = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
          + ((unsigned __int16)(2 * ((unsigned __int16)(this / 0x2710) % 0x64u)) | 1u));
    a2[1] = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this % 0x2710 / 0x64));
    a2[2] = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((2 * (this % 0x2710 / 0x64)) | 1));
    a2[3] = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this % 0x2710 % 0x64));
    a2[4] = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((unsigned __int16)(2 * (this % 0x2710 % 0x64)) | 1u));
    return a2 + 5;
  }
  unsigned int v4 = this % 0x5F5E100;
  if (this < 0x3B9ACA00)
  {
    char v5 = this / 0x5F5E100 + 48;
    unint64_t v6 = a2 + 1;
  }
  else
  {
    char v5 = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this / 0x5F5E100));
    unint64_t v6 = a2 + 2;
    a2[1] = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this / 0x5F5E100) + 1);
  }
  *a2 = v5;
  unsigned __int16 v7 = v4 % 0x2710;
  unsigned int v8 = v7 / 0x64u;
  uint64_t v9 = 2 * (v7 % 0x64u);
  unsigned char *v6 = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (v4 / 0xF4240));
  v6[1] = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (v4 / 0xF4240) + 1);
  *((_WORD *)v6 + 1) = *((_WORD *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                       + (unsigned __int16)(v4 / 0x2710) % 0x64u);
  *((_WORD *)v6 + 2) = *((_WORD *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + v8);
  v6[6] = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + v9);
  unsigned int v3 = v6 + 8;
  v6[7] = *((unsigned char *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((unsigned __int16)v9 & 0xFFFE) + 1);
  return v3;
}

uint64_t rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>(void *a1)
{
  unsigned int v3 = a1 + 3;
  uint64_t result = a1[3];
  if (v3[1] - result > 15)
  {
    if (result) {
      goto LABEL_3;
    }
LABEL_6:
    __assert_rtn("PushUnsafe", "stack.h", 130, "stackTop_");
  }
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>(a1);
  uint64_t result = a1[3];
  if (!result) {
    goto LABEL_6;
  }
LABEL_3:
  if (a1[4] - result <= 15) {
    __assert_rtn("PushUnsafe", "stack.h", 131, "static_cast<std::ptrdiff_t>(sizeof(T) * count) <= (stackEnd_ - stackTop_)");
  }
  a1[3] = result + 16;
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>(void *a1)
{
  uint64_t v1 = a1[2];
  if (v1)
  {
    unint64_t v2 = a1[4] - v1 + ((unint64_t)(a1[4] - v1 + 1) >> 1);
  }
  else
  {
    if (!*a1) {
      operator new();
    }
    uint64_t v1 = 0;
    unint64_t v2 = a1[5];
  }
  unint64_t v3 = a1[3] - v1 + 16;
  if (v2 <= v3) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = v2;
  }
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v4);
}

unsigned char *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6 = (void *)*a1;
  uint64_t v7 = 6 * a3 + 2;
  if (v6[4] - v6[3] < v7)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v6, v7);
    unint64_t v6 = (void *)*a1;
  }
  *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>((uint64_t)v6, 1) = 34;
  if (a3)
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = *(unsigned __int8 *)(a2 + v8);
      int v10 = rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(char const*,unsigned int)::escape[v9];
      unsigned int v11 = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1);
      if (v10)
      {
        *unsigned int v11 = 92;
        *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = v10;
        if (v10 == 117)
        {
          *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = 48;
          *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = 48;
          char v12 = rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(char const*,unsigned int)::hexDigits[v9 >> 4];
          *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = v12;
          char v13 = rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(char const*,unsigned int)::hexDigits[v9 & 0xF];
          *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = v13;
        }
      }
      else
      {
        *unsigned int v11 = v9;
      }
      ++v8;
    }
    while (v8 < a3);
  }
  uint64_t result = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1);
  *uint64_t result = 34;
  return result;
}

void siri::dialogengine::DialogCalendar::dateDescriptive(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  __int16 v9 = 0;
  char v10 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v12) = 0;
  siri::dialogengine::GetDateFormatterOptions((void **)&v6, a2);
  if (SBYTE7(v12) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v6;
  *(void *)&long long v12 = v7;
  BYTE8(v12) = v8;
  std::string::basic_string[abi:ne180100]<0>(&v5, "none");
  siri::dialogengine::GetDateDescriptive((uint64_t)this, (uint64_t)a2);
}

void sub_1C5D35B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

double siri::dialogengine::GetDateFormatterOptions(void **this, const siri::dialogengine::VariableObject *a2)
{
  *((unsigned char *)std::string::basic_string[abi:ne180100]<0>(this, "") + 24) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "dateFormatter");
  OptionalObjectParameter = siri::dialogengine::GetOptionalObjectParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  uint64_t v6 = (uint64_t)OptionalObjectParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6) {
      return result;
    }
  }
  else if (!OptionalObjectParameter)
  {
    return result;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "length");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "omitYear");
  OptionalBooleanParameter = siri::dialogengine::GetOptionalBooleanParameter((const void **)&__p.__r_.__value_.__l.__data_, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!OptionalStringParameter)
    {
LABEL_9:
      if (!OptionalBooleanParameter) {
        return result;
      }
      goto LABEL_10;
    }
  }
  else if (!OptionalStringParameter)
  {
    goto LABEL_9;
  }
  if (OptionalStringParameter[95] < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)OptionalStringParameter + 9), *((void *)OptionalStringParameter + 10));
  }
  else {
    std::string __p = *(std::string *)(OptionalStringParameter + 3);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
  double result = *(double *)&__p.__r_.__value_.__l.__data_;
  *(std::string *)this = __p;
  if (OptionalBooleanParameter) {
LABEL_10:
  }
    *((unsigned char *)this + 24) = OptionalBooleanParameter[66];
  return result;
}

void sub_1C5D35CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetDateDescriptive(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "secs");
  siri::dialogengine::GetOptionalNumberParameter((const void **)__p, a2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  operator new();
}

void sub_1C5D35ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a9);
  if (*(char *)(v10 - 65) < 0) {
    operator delete(*(void **)(v10 - 88));
  }
  MEMORY[0x1C8796D70](v9, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void sub_1C5D35F24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C5D35F1CLL);
}

void siri::dialogengine::GetDateDescriptiveSpeakableString(uint64_t a1, siri::dialogengine::Context *this, siri::dialogengine::Context *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  siri::dialogengine::Context::GetLocaleWithUserCalendar(this, (const char *)this, (uint64_t)&v17);
  siri::dialogengine::GetRequestTimeStamp(this, a3, &v16);
  siri::dialogengine::GetNowTimeStamp(this, a3, &v15);
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v19 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  LOBYTE(v19[1]) = 0;
  siri::dialogengine::GetICUDayName(&v16, (uint64_t *)__p, &v14);
  if (SHIBYTE(v19[0]) < 0) {
    operator delete(__p[0]);
  }
  if (*(unsigned char *)a5)
  {
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__str, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = v14;
    }
  }
  else
  {
    siri::dialogengine::GetICUDisplayDate(&v16, (uint64_t *)(a5 + 8), &__str);
  }
  int ICUDifferenceInDays = siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)&v15, (const siri::dialogengine::TimeStamp *)&v16, v9);
  __p[0] = 0;
  __p[1] = 0;
  v19[0] = 0;
  siri::dialogengine::GetICUDifferenceInWeeks(&v15, &v16);
  if (SHIBYTE(v19[0]) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "none");
  BOOL v11 = siri::dialogengine::StringsEqual(a4, (uint64_t)__p);
  BOOL v12 = v11;
  if (SHIBYTE(v19[0]) < 0)
  {
    operator delete(__p[0]);
    if (v12) {
      goto LABEL_18;
    }
  }
  else if (v11)
  {
    goto LABEL_18;
  }
  if (ICUDifferenceInDays >= -7 && ICUDifferenceInDays <= -3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "fr");
    siri::dialogengine::StringStartsWith(&v17, (unsigned __int8 *)__p);
    if (SHIBYTE(v19[0]) < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_18:
  siri::dialogengine::CreateJSONStringVal();
}

void sub_1C5D366A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a77 < 0) {
    operator delete(__p);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(v77);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::dateDescriptiveAbsolute(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  __int16 v9 = 0;
  char v10 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v12) = 0;
  siri::dialogengine::GetDateFormatterOptions((void **)&v6, a2);
  if (SBYTE7(v12) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v6;
  *(void *)&long long v12 = v7;
  BYTE8(v12) = v8;
  HIBYTE(v9) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "none");
  siri::dialogengine::GetDateDescriptive((uint64_t)this, (uint64_t)a2);
}

void sub_1C5D36A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::dateDescriptiveAbsoluteWithDayOfWeek(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  memset(v9, 0, 3);
  *(_OWORD *)std::string __p = 0u;
  long long v11 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v11) = 0;
  siri::dialogengine::GetDateFormatterOptions((void **)&v6, a2);
  if (SBYTE7(v11) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v6;
  *(void *)&long long v11 = v7;
  BYTE8(v11) = v8;
  *(_WORD *)((char *)v9 + 1) = 257;
  std::string::basic_string[abi:ne180100]<0>(&v5, "none");
  siri::dialogengine::GetDateDescriptive((uint64_t)this, (uint64_t)a2);
}

void sub_1C5D36B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::dateDescriptiveOmitYear(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  __int16 v8 = 0;
  char v9 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v11 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v11) = 0;
  siri::dialogengine::GetDateFormatterOptions((void **)&v6, a2);
  if (SBYTE7(v11) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v6;
  *(void *)&long long v11 = v7;
  BYTE8(v11) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "none");
  siri::dialogengine::GetDateDescriptive((uint64_t)this, (uint64_t)a2);
}

void sub_1C5D36C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefixOnOmitYear(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  __int16 v8 = 0;
  char v9 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v11 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v11) = 0;
  siri::dialogengine::GetDateFormatterOptions((void **)&v6, a2);
  if (SBYTE7(v11) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v6;
  *(void *)&long long v11 = v7;
  BYTE8(v11) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "on");
  siri::dialogengine::GetDateDescriptive((uint64_t)this, (uint64_t)a2);
}

void sub_1C5D36D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefix(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  __int16 v9 = 0;
  char v10 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v12) = 0;
  siri::dialogengine::GetDateFormatterOptions(v5, a2);
  if (SBYTE7(v12) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)v5;
  *(void *)&long long v12 = v6;
  BYTE8(v12) = BYTE8(v6);
  std::string::basic_string[abi:ne180100]<0>(&v8, "prefix");
  uint64_t v7 = 0;
  *(_OWORD *)char v5 = 0u;
  long long v6 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v5[1], "");
  LOBYTE(v7) = 0;
  siri::dialogengine::GetDateDescriptive((uint64_t)this, (uint64_t)a2);
}

void sub_1C5D36EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefixFor(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  __int16 v9 = 0;
  char v10 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v12) = 0;
  siri::dialogengine::GetDateFormatterOptions(v5, a2);
  if (SBYTE7(v12) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)v5;
  *(void *)&long long v12 = v6;
  BYTE8(v12) = BYTE8(v6);
  std::string::basic_string[abi:ne180100]<0>(&v8, "for");
  uint64_t v7 = 0;
  *(_OWORD *)char v5 = 0u;
  long long v6 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v5[1], "");
  LOBYTE(v7) = 0;
  siri::dialogengine::GetDateDescriptive((uint64_t)this, (uint64_t)a2);
}

void sub_1C5D37048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefixFrom(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  __int16 v9 = 0;
  char v10 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v12) = 0;
  siri::dialogengine::GetDateFormatterOptions(v5, a2);
  if (SBYTE7(v12) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)v5;
  *(void *)&long long v12 = v6;
  BYTE8(v12) = BYTE8(v6);
  std::string::basic_string[abi:ne180100]<0>(&v8, "from");
  uint64_t v7 = 0;
  *(_OWORD *)char v5 = 0u;
  long long v6 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v5[1], "");
  LOBYTE(v7) = 0;
  siri::dialogengine::GetDateDescriptive((uint64_t)this, (uint64_t)a2);
}

void sub_1C5D371AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefixOn(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  __int16 v9 = 0;
  char v10 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v12) = 0;
  siri::dialogengine::GetDateFormatterOptions(v5, a2);
  if (SBYTE7(v12) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)v5;
  *(void *)&long long v12 = v6;
  BYTE8(v12) = BYTE8(v6);
  std::string::basic_string[abi:ne180100]<0>(&v8, "on");
  uint64_t v7 = 0;
  *(_OWORD *)char v5 = 0u;
  long long v6 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v5[1], "");
  LOBYTE(v7) = 0;
  siri::dialogengine::GetDateDescriptive((uint64_t)this, (uint64_t)a2);
}

void sub_1C5D37310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefixUntil(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  __int16 v9 = 0;
  char v10 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v12) = 0;
  siri::dialogengine::GetDateFormatterOptions(v5, a2);
  if (SBYTE7(v12) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)v5;
  *(void *)&long long v12 = v6;
  BYTE8(v12) = BYTE8(v6);
  std::string::basic_string[abi:ne180100]<0>(&v8, "until");
  uint64_t v7 = 0;
  *(_OWORD *)char v5 = 0u;
  long long v6 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v5[1], "");
  LOBYTE(v7) = 0;
  siri::dialogengine::GetDateDescriptive((uint64_t)this, (uint64_t)a2);
}

void sub_1C5D37474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::timeDescriptive(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "none");
  siri::dialogengine::GetTimeDescriptive(this, a2, (uint64_t)__p);
}

void sub_1C5D37528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetTimeDescriptive(siri::dialogengine::Context *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "secs");
  OptionalNumberParameter = siri::dialogengine::GetOptionalNumberParameter((const void **)__p, (uint64_t)a2);
  uint64_t v7 = OptionalNumberParameter;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_3:
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v8 = *(std::string *)a3;
      }
      siri::dialogengine::GetTimeDescriptiveSpeakableString((int)__p, a1, a2);
    }
  }
  else if (OptionalNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5D37844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,void *a29,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a37 < 0) {
    operator delete(a29);
  }
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a45);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetTimeDescriptiveSpeakableString(int a1, siri::dialogengine::Context *this, siri::dialogengine::Context *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  siri::dialogengine::Context::GetLocaleWithUserCalendar(this, (const char *)this, (uint64_t)&v20);
  siri::dialogengine::GetRequestTimeStamp(this, a3, &v19);
  siri::dialogengine::GetUCalendarFieldValue<(UCalendarDateFields)11>(&v19);
  siri::dialogengine::GetUCalendarFieldValue<(UCalendarDateFields)12>(&v19);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v9, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  }
  else {
    std::string v9 = v20;
  }
  std::string::basic_string[abi:ne180100]<0>(&v8, "none");
  siri::dialogengine::GetICUHour12((siri::dialogengine *)&v19, v5);
  UCalendarField = (siri::dialogengine *)siri::dialogengine::GetUCalendarFieldValue<(UCalendarDateFields)11>(&v19);
  siri::dialogengine::GetUCalendarFieldValue<(UCalendarDateFields)12>(&v19);
  siri::dialogengine::GetICULocalizedMeridiem(&v19, &v22);
  __str.__r_.__value_.__r.__words[0] = 0x100000001;
  siri::dialogengine::GetICUDefaultDisplayTime(&v19, (uint64_t)&v9, (uint64_t)&__str, &v21);
  memset(v10, 0, sizeof(v10));
  *(_OWORD *)long long v11 = 0u;
  *(_OWORD *)long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  if (siri::dialogengine::ShouldUse24HrDisplay(this, v7)) {
    siri::dialogengine::CreateJSONIntVal(UCalendarField);
  }
  siri::dialogengine::CreateJSONIntVal(UCalendarField);
}

void sub_1C5D383C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  _Unwind_Resume(a1);
}

void sub_1C5D38818()
{
}

void siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefix(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "prefix");
  siri::dialogengine::GetTimeDescriptive(this, a2, (uint64_t)__p);
}

void sub_1C5D38884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefixFor(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "for");
  siri::dialogengine::GetTimeDescriptive(this, a2, (uint64_t)__p);
}

void sub_1C5D38904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefixFrom(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "from");
  siri::dialogengine::GetTimeDescriptive(this, a2, (uint64_t)__p);
}

void sub_1C5D38984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefixOn(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "on");
  siri::dialogengine::GetTimeDescriptive(this, a2, (uint64_t)__p);
}

void sub_1C5D38A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefixUntil(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "until");
  siri::dialogengine::GetTimeDescriptive(this, a2, (uint64_t)__p);
}

void sub_1C5D38A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::dateTimeDescriptive(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "none");
  siri::dialogengine::GetDateTimeDescriptive(this, a2, (const std::string::value_type **)__p);
}

void sub_1C5D38B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetDateTimeDescriptive(siri::dialogengine *a1, siri::dialogengine::Context *a2, const std::string::value_type **a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "ja");
  std::string::basic_string[abi:ne180100]<0>(&v36, "ko");
  std::string::basic_string[abi:ne180100]<0>(v37, "tr");
  std::string::basic_string[abi:ne180100]<0>(&v38[1], "zh");
  std::string::basic_string[abi:ne180100]<0>(v39, "yue");
  std::set<std::string>::set[abi:ne180100]((uint64_t)v34, (const void **)&__p.__r_.__value_.__l.__data_, 5);
  for (uint64_t i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v40[i]) < 0) {
      operator delete(v39[i]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "secs");
  OptionalNumberParameter = siri::dialogengine::GetOptionalNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  std::string v8 = OptionalNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v8)
    {
LABEL_7:
      siri::dialogengine::GetRequestTimeStamp(a1, a2, &v33);
      siri::dialogengine::GetNowTimeStamp(a1, a2, &v32);
      siri::dialogengine::GetRequestTimeStamp(a1, a2, &__p);
      siri::dialogengine::IsICUMidnight((siri::dialogengine *)&__p, v9);
      if (SHIBYTE(v36) < 0) {
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      siri::dialogengine::GetRequestTimeStamp(a1, a2, &__p);
      siri::dialogengine::IsICUEndOfDay((siri::dialogengine *)&__p, v10);
      if (SHIBYTE(v36) < 0) {
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)&v32, (const siri::dialogengine::TimeStamp *)&v33, v11);
      if ((siri::dialogengine::ShouldUse24HrDisplay(a1, v12) & 1) == 0)
      {
        siri::dialogengine::Context::GetLocale(a1, v13, (uint64_t)&v21);
        siri::dialogengine::GetLocaleLanguage(&__p);
        if (SBYTE7(v22) < 0) {
          operator delete((void *)v21);
        }
        std::__tree<std::string>::find<std::string>((uint64_t)v34, (const void **)&__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v31 = 0;
      long long v29 = 0u;
      *(_OWORD *)unint64_t v30 = 0u;
      *(_OWORD *)unint64_t v27 = 0u;
      *(_OWORD *)int v28 = 0u;
      *(_OWORD *)int v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      *(_OWORD *)uint64_t v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      int v14 = *((char *)a3 + 23);
      if (v14 < 0)
      {
        long long v16 = *a3;
        std::string::size_type v17 = (std::string::size_type)a3[1];
        if (v17 != 5 || (*(_DWORD *)v16 == 1769238133 ? (BOOL v18 = v16[4] == 108) : (BOOL v18 = 0), !v18))
        {
          std::string::__init_copy_ctor_external(&v19, v16, v17);
          goto LABEL_33;
        }
      }
      else if (v14 != 5 || (*(_DWORD *)a3 == 1769238133 ? (BOOL v15 = *((unsigned char *)a3 + 4) == 108) : (BOOL v15 = 0), !v15))
      {
        std::string v19 = *(std::string *)a3;
        goto LABEL_33;
      }
      std::string::basic_string[abi:ne180100]<0>(&v19, "prefix");
LABEL_33:
      siri::dialogengine::GetTimeDescriptiveSpeakableString((int)&v20, a1, a2);
    }
  }
  else if (OptionalNumberParameter)
  {
    goto LABEL_7;
  }
  operator new();
}

void sub_1C5D3961C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x298], (char *)STACK[0x2A0]);
  _Unwind_Resume(a1);
}

void sub_1C5D39998()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x2B0]) {
      JUMPOUT(0x1C5D39990);
    }
  }
}

uint64_t std::set<std::string>::set[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_1C5D39A2C(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::dateTimeDescriptiveWithPrefix(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "prefix");
  siri::dialogengine::GetDateTimeDescriptive(this, a2, (const std::string::value_type **)__p);
}

void sub_1C5D39AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::dateTimeDescriptiveWithPrefixFor(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "for");
  siri::dialogengine::GetDateTimeDescriptive(this, a2, (const std::string::value_type **)__p);
}

void sub_1C5D39B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::dateTimeDescriptiveWithPrefixFrom(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "from");
  siri::dialogengine::GetDateTimeDescriptive(this, a2, (const std::string::value_type **)__p);
}

void sub_1C5D39BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::dateTimeDescriptiveWithPrefixOn(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "on");
  siri::dialogengine::GetDateTimeDescriptive(this, a2, (const std::string::value_type **)__p);
}

void sub_1C5D39C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::dateTimeDescriptiveWithPrefixUntil(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "until");
  siri::dialogengine::GetDateTimeDescriptive(this, a2, (const std::string::value_type **)__p);
}

void sub_1C5D39CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::nonSpecificDateTimeDescriptive(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "none");
  siri::dialogengine::GetNonSpecificDateTimeDescriptive(this, a2);
}

void sub_1C5D39D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetNonSpecificDateTimeDescriptive(siri::dialogengine *a1, siri::dialogengine::Context *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v10, "secs");
  OptionalNumberParameter = siri::dialogengine::GetOptionalNumberParameter((const void **)v10, (uint64_t)a2);
  char v5 = OptionalNumberParameter;
  if (v11 < 0)
  {
    operator delete(v10[0]);
    if (v5)
    {
LABEL_3:
      siri::dialogengine::GetRequestTimeStamp(a1, a2, &v9);
      siri::dialogengine::GetNowTimeStamp(a1, a2, &v8);
      if (siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)&v8, (const siri::dialogengine::TimeStamp *)&v9, v6))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "none");
        siri::dialogengine::GetNonSpecificTimePeriodSpeakableString(a1, (char *)a2);
      }
      siri::dialogengine::GetNonSpecificDateTimePeriodSpeakableString(a1, a2);
    }
  }
  else if (OptionalNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5D3A544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&STACK[0x290]);
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  MEMORY[0x1C8796D70](v71, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a39);
  if (a66 < 0) {
    operator delete(a61);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(&a71);
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete((void *)STACK[0x258]);
  }
  if (SLOBYTE(STACK[0x28F]) < 0) {
    operator delete((void *)STACK[0x278]);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::nonSpecificDateTimeDescriptiveWithPrefix(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "prefix");
  siri::dialogengine::GetNonSpecificDateTimeDescriptive(this, a2);
}

void sub_1C5D3A8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogCalendar::nonSpecificDateTimeDescriptiveWithPrefixOn(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "on");
  siri::dialogengine::GetNonSpecificDateTimeDescriptive(this, a2);
}

void sub_1C5D3A958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogCalendar::monthName(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, v11);
  if (v11[0] != 0x7FFFFFFFFFFFFFFFLL)
  {
    siri::dialogengine::GetDateFormatterOptions(v10, a2);
    siri::dialogengine::Context::GetLocaleWithUserCalendar(this, v5, (uint64_t)&__p);
    siri::dialogengine::GetICUMonthName(v11, (uint64_t *)v10, &v9);
    if (v8 < 0) {
      operator delete(__p);
    }
    operator new();
  }
  if (v12 < 0) {
    operator delete((void *)v11[1]);
  }
  return 0;
}

void sub_1C5D3AA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v26, 0x10B3C40D3060B95);
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::dayName(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, v11);
  if (v11[0] != 0x7FFFFFFFFFFFFFFFLL)
  {
    siri::dialogengine::GetDateFormatterOptions(v10, a2);
    siri::dialogengine::Context::GetLocaleWithUserCalendar(this, v5, (uint64_t)&__p);
    siri::dialogengine::GetICUDayName(v11, (uint64_t *)v10, &v9);
    if (v8 < 0) {
      operator delete(__p);
    }
    operator new();
  }
  if (v12 < 0) {
    operator delete((void *)v11[1]);
  }
  return 0;
}

void sub_1C5D3AC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v26, 0x10B3C40D3060B95);
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::timeDescriptiveAbsolute(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v9);
  char v8 = 1;
  int v7 = siri::dialogengine::ShouldUse24HrDisplay(this, v4) ^ 1;
  siri::dialogengine::Context::GetLocaleWithUserCalendar(this, v5, (uint64_t)&v6);
  operator new();
}

void sub_1C5D3AD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  MEMORY[0x1C8796D70](v26, 0x10B3C40D3060B95);
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::timeDescriptiveAbsoluteNoMeridiem(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v9);
  char v8 = 0;
  int v7 = siri::dialogengine::ShouldUse24HrDisplay(this, v4) ^ 1;
  siri::dialogengine::Context::GetLocaleWithUserCalendar(this, v5, (uint64_t)&v6);
  operator new();
}

void sub_1C5D3AF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  MEMORY[0x1C8796D70](v26, 0x10B3C40D3060B95);
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::daysFromToday(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, v7);
  if (v7[0] != 0x7FFFFFFFFFFFFFFFLL)
  {
    siri::dialogengine::GetNowTimeStamp(this, a2, &v6);
    operator new();
  }
  if (v8 < 0) {
    operator delete((void *)v7[1]);
  }
  return 0;
}

void sub_1C5D3B068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  MEMORY[0x1C8796D70](v22, 0x10B3C4030AE2ACELL);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::minuteOfHour(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, v4);
  if (v4[0] != 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  if (v5 < 0) {
    operator delete((void *)v4[1]);
  }
  return 0;
}

void sub_1C5D3B180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  MEMORY[0x1C8796D70](v22, 0x10B3C4030AE2ACELL);
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::hourOfDay(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, v4);
  if (v4[0] != 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  if (v5 < 0) {
    operator delete((void *)v4[1]);
  }
  return 0;
}

void sub_1C5D3B280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  MEMORY[0x1C8796D70](v22, 0x10B3C4030AE2ACELL);
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::month(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, v4);
  if (v4[0] != 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  if (v5 < 0) {
    operator delete((void *)v4[1]);
  }
  return 0;
}

void sub_1C5D3B380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  MEMORY[0x1C8796D70](v22, 0x10B3C4030AE2ACELL);
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::dayOfMonth(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, v4);
  if (v4[0] != 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  if (v5 < 0) {
    operator delete((void *)v4[1]);
  }
  return 0;
}

void sub_1C5D3B480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  MEMORY[0x1C8796D70](v22, 0x10B3C4030AE2ACELL);
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::year(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, v4);
  if (v4[0] != 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  if (v5 < 0) {
    operator delete((void *)v4[1]);
  }
  return 0;
}

void sub_1C5D3B580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  MEMORY[0x1C8796D70](v22, 0x10B3C4030AE2ACELL);
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isCurrentYear(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v8);
  if (v8 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v7);
  siri::dialogengine::GetICUYear((siri::dialogengine *)&v7, v5);
  siri::dialogengine::GetICUYear((siri::dialogengine *)&v8, v6);
  operator new();
}

void sub_1C5D3B708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v32, 0x10B3C408E4F17DDLL);
  if (a25 < 0) {
    operator delete(a17);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isFuture(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v7);
  if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v6);
  siri::dialogengine::GetICUInterval((siri::dialogengine *)&v6, (const siri::dialogengine::TimeStamp *)&v7, v5);
  operator new();
}

void sub_1C5D3B8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isPast(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v7);
  if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v6);
  siri::dialogengine::GetICUInterval((siri::dialogengine *)&v6, (const siri::dialogengine::TimeStamp *)&v7, v5);
  operator new();
}

void sub_1C5D3BA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::withinNextWeek(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v7);
  if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v6);
  siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)&v6, (const siri::dialogengine::TimeStamp *)&v7, v5);
  operator new();
}

void sub_1C5D3BC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::withinPastWeek(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v7);
  if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v6);
  siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)&v6, (const siri::dialogengine::TimeStamp *)&v7, v5);
  operator new();
}

void sub_1C5D3BE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isToday(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v6);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v5);
  operator new();
}

void sub_1C5D3C000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  MEMORY[0x1C8796D70](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isTomorrow(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v6);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v5);
  operator new();
}

void sub_1C5D3C1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  MEMORY[0x1C8796D70](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isYesterday(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v6);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v5);
  operator new();
}

void sub_1C5D3C390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  MEMORY[0x1C8796D70](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isThisWeek(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::Context::GetDeviceLocale(this, &v7);
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v6);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v5);
  operator new();
}

void sub_1C5D3C57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, void *__p, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  MEMORY[0x1C8796D70](v31, 0x10B3C408E4F17DDLL);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (*(char *)(v32 - 17) < 0) {
    operator delete(*(void **)(v32 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isThisMonth(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v6);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v5);
  operator new();
}

void sub_1C5D3C75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  MEMORY[0x1C8796D70](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isThisYear(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v6);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v5);
  operator new();
}

void sub_1C5D3C924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  MEMORY[0x1C8796D70](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isLastWeek(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::Context::GetDeviceLocale(this, &v7);
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v6);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v5);
  operator new();
}

void sub_1C5D3CB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, void *__p, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  MEMORY[0x1C8796D70](v31, 0x10B3C408E4F17DDLL);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (*(char *)(v32 - 17) < 0) {
    operator delete(*(void **)(v32 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isLastMonth(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v6);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v5);
  operator new();
}

void sub_1C5D3CCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  MEMORY[0x1C8796D70](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isLastYear(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v6);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v5);
  operator new();
}

void sub_1C5D3CEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  MEMORY[0x1C8796D70](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isNextWeek(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::Context::GetDeviceLocale(this, &v7);
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v6);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v5);
  operator new();
}

void sub_1C5D3D0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, void *__p, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  MEMORY[0x1C8796D70](v31, 0x10B3C408E4F17DDLL);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (*(char *)(v32 - 17) < 0) {
    operator delete(*(void **)(v32 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isNextMonth(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v6);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v5);
  operator new();
}

void sub_1C5D3D284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  MEMORY[0x1C8796D70](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isNextYear(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v6);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v5);
  operator new();
}

void sub_1C5D3D44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  MEMORY[0x1C8796D70](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isSameDateAsToday(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::IsSameDateAsTodayWithOffset(siri::dialogengine *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  int v3 = (int)a3;
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v12);
  if (v12 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v11);
  v11 += v3;
  int ICUDayOfMonth = siri::dialogengine::GetICUDayOfMonth((siri::dialogengine *)&v12, v6);
  if (ICUDayOfMonth == siri::dialogengine::GetICUDayOfMonth((siri::dialogengine *)&v11, v8))
  {
    siri::dialogengine::GetICUMonth((siri::dialogengine *)&v12, v9);
    siri::dialogengine::GetICUMonth((siri::dialogengine *)&v11, v10);
  }
  operator new();
}

void sub_1C5D3D664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v32, 0x10B3C408E4F17DDLL);
  if (a25 < 0) {
    operator delete(a17);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isSameDateAsTomorrow(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isSameDateAsYesterday(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isFirstDayOfWeek(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::Context::GetDeviceLocale(this, &v6);
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v5);
  if (v5 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::IsICUFirstDayOfWeek(&v5);
  operator new();
}

void sub_1C5D3D838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v21, 0x10B3C408E4F17DDLL);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v22 - 17) < 0) {
    operator delete(*(void **)(v22 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isEarlyMorning(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::IsCalendarInDateTimeRange(siri::dialogengine *a1, siri::dialogengine::Context *a2, int a3)
{
  siri::dialogengine::GetRequestTimeStamp(a1, a2, &v5);
  if (v5 == 0x7FFFFFFFFFFFFFFFLL) {
    operator new();
  }
  siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)&v5, a3);
  operator new();
}

void sub_1C5D3D9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v22, 0x10B3C408E4F17DDLL);
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCalendar::isMorning(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isNoon(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isEarlyAfternoon(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isAfternoon(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isEarlyEvening(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isEvening(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isNight(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isLateNight(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isBreakfast(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isBrunch(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isLunch(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isDinner(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isDayTime(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isBedTime(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCalendar::isHappyHour(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

siri::dialogengine::Context *siri::dialogengine::DialogCalendar::timeZone(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  int v3 = a2;
  if (a2)
  {
    if (((*(uint64_t (**)(siri::dialogengine::Context *, siri::dialogengine::Context *, const siri::dialogengine::VariableObject *))(*(void *)a2 + 32))(a2, a2, a3) & 1) == 0)
    {
      siri::dialogengine::GetRequestTimeStamp(this, v3, &v6);
      operator new();
    }
    return 0;
  }
  return v3;
}

void sub_1C5D3DBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v17 - 17) < 0) {
    operator delete(*(void **)(v17 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogCalendar::asDateTime(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  if (a2 && ((*(uint64_t (**)(siri::dialogengine::Context *))(*(void *)a2 + 32))(a2) & 1) == 0) {
    operator new();
  }
  return 0;
}

void sub_1C5D3DE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 33) < 0) {
    operator delete(*(void **)(v21 - 56));
  }
  _Unwind_Resume(exception_object);
}

siri::dialogengine::PatternContext *siri::dialogengine::PatternContext::PatternContext(siri::dialogengine::PatternContext *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = (char *)this + 32;
  *((void *)this + 8) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = (char *)this + 56;
  unint64_t v2 = (char *)operator new(0x88uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unint64_t v2 = &unk_1F211F088;
  std::string::basic_string[abi:ne180100]<0>(&v4, "pattern context");
  *(_OWORD *)(v2 + 24) = v4;
  *((void *)v2 + 5) = v5;
  *((void *)v2 + 6) = 850045863;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((void *)v2 + 16) = 0;
  *((void *)v2 + 15) = 0;
  *((void *)v2 + 13) = 0;
  *((void *)v2 + 14) = v2 + 120;
  *((void *)this + 9) = v2 + 24;
  *((void *)this + 10) = v2;
  siri::dialogengine::PatternContext::InitPatternSettings((uint64_t **)this);
  return this;
}

void sub_1C5D3DFB8(_Unwind_Exception *a1)
{
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  siri::dialogengine::PatternCache::~PatternCache(v1);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v3);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternContext::InitPatternSettings(uint64_t **this)
{
  if (_os_feature_enabled_impl())
  {
    uint64_t v2 = (std::__shared_weak_count *)operator new(0x60uLL);
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2126A20;
    std::string::basic_string[abi:ne180100]<0>(&v10, "sonicStatusIndicator");
    siri::dialogengine::VariableBoolean::VariableBoolean((uint64_t)&v2[1], &v10, 0);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    v7[0] = v2 + 1;
    v7[1] = v2;
    siri::dialogengine::PatternContext::AddPatternSetting(this, v7);
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)operator new(0x60uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2126A20;
  std::string::basic_string[abi:ne180100]<0>(&v10, "printSupportingDialogInDisplayModes");
  siri::dialogengine::VariableBoolean::VariableBoolean((uint64_t)&v3[1], &v10, 0);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  v6[0] = v3 + 1;
  v6[1] = v3;
  siri::dialogengine::PatternContext::AddPatternSetting(this, v6);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  if (_os_feature_enabled_impl())
  {
    long long v4 = (std::__shared_weak_count *)operator new(0x108uLL);
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2126AF0;
    std::string::basic_string[abi:ne180100]<0>(&v10, "visualLocation");
    std::string::basic_string[abi:ne180100]<0>(__p, "snippetspace");
    siri::dialogengine::VariableString::VariableString((uint64_t)&v4[1], &v10, (uint64_t)__p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    v5[0] = v4 + 1;
    v5[1] = v4;
    siri::dialogengine::PatternContext::AddPatternSetting(this, v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C5D3E1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternCache::~PatternCache(siri::dialogengine::PatternCache *this)
{
}

void siri::dialogengine::PatternContext::AddPatternSetting(uint64_t **a1, void *a2)
{
  uint64_t v4 = *a2;
  if (*(char *)(*a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 8), *(void *)(v4 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(v4 + 8);
    __p.__r_.__value_.__r.__words[2] = *(void *)(v4 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  }
  p_p = &__p;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p);
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  char v9 = (std::__shared_weak_count *)*((void *)v6 + 8);
  *((void *)v6 + 7) = v8;
  *((void *)v6 + 8) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D3E330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::VariableString>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableString>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2126AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableString>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2126AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::VariableBoolean>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableBoolean>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2126A20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableBoolean>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2126A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::SemanticModelCache>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::less<void>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>>>::destroy(*(void **)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::less<void>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::less<void>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::less<void>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::SemanticModelCache::Entry>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::SemanticModelCache::Entry>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(a1 + 72));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<siri::dialogengine::SemanticModelCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F088;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::SemanticModelCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F211F088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t siri::dialogengine::PatternContext::FindPatternSetting@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__tree<std::string>::find<std::string>(a1, a2);
  if (a1 + 8 == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(result + 64);
    *a3 = *(void *)(result + 56);
    a3[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void siri::dialogengine::PatternContext::AddPatternSettings(uint64_t **a1, const char *a2)
{
  uint64_t v2 = a2 + 8;
  int v3 = *(const char **)a2;
  if (*(const char **)a2 != a2 + 8)
  {
    do
    {
      if (*((void *)v3 + 7))
      {
        uint64_t v12 = (long long *)(v3 + 32);
        long long v5 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)v3 + 4, &v12);
        uint64_t v7 = *((void *)v3 + 7);
        uint64_t v6 = *((void *)v3 + 8);
        if (v6) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (std::__shared_weak_count *)v5[8];
        v5[7] = v7;
        v5[8] = v6;
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
      }
      else
      {
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Trying to add a NULL pattern setting to the PatternContext. It will not be added.", a2);
      }
      char v9 = (const char *)*((void *)v3 + 1);
      if (v9)
      {
        do
        {
          std::string v10 = v9;
          char v9 = *(const char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          std::string v10 = (const char *)*((void *)v3 + 2);
          BOOL v11 = *(void *)v10 == (void)v3;
          int v3 = v10;
        }
        while (!v11);
      }
      int v3 = v10;
    }
    while (v10 != v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  long long v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x48uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    uint64_t v8 = (std::string *)(v6 + 4);
    char v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    char v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1C5D3E80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void siri::dialogengine::PatternContext::AddEntryToPatternCache(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4) {
    long long v5 = (uint64_t **)(a1 + 24);
  }
  else {
    long long v5 = (uint64_t **)(a1 + 48);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(v5, (const void **)&v6.__r_.__value_.__l.__data_, (uint64_t)&v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D3E8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  long long v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  if (!*v5)
  {
    std::string v6 = v5;
    uint64_t v7 = (char *)operator new(0x50uLL);
    v9[0] = v7;
    v9[1] = a1 + 1;
    char v10 = 0;
    uint64_t v8 = (std::string *)(v7 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((void *)v7 + 6) = *(void *)(a3 + 16);
    }
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v7 + 9) = *(void *)(a3 + 40);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 24) = 0;
    char v10 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v11, v6, (uint64_t *)v7);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  }
}

void sub_1C5D3E9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void siri::dialogengine::PatternContext::FindPatternCacheEntry(uint64_t a1@<X0>, const void **a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  if (a3) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1 + 48;
  }
  uint64_t v6 = std::__tree<std::string>::find<std::string>(v5, a2);
  if (v5 + 8 == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(a4, "");
  }
  else if (*(char *)(v6 + 79) < 0)
  {
    uint64_t v8 = *(const std::string::value_type **)(v6 + 56);
    std::string::size_type v9 = *(void *)(v6 + 64);
    std::string::__init_copy_ctor_external(a4, v8, v9);
  }
  else
  {
    long long v7 = *(_OWORD *)(v6 + 56);
    a4->__r_.__value_.__r.__words[2] = *(void *)(v6 + 72);
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v7;
  }
}

BOOL siri::dialogengine::PatternContext::GetSonicResponseStatus(siri::dialogengine::PatternContext *this)
{
  if (_os_feature_enabled_impl())
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "sonicStatusIndicator");
    BOOL RequiredBooleanSettingFromPatternContext = siri::dialogengine::GetRequiredBooleanSettingFromPatternContext((uint64_t)this, (const void **)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Feature is not enabled in this build. Use ffctl to enable it.", v2);
    return 0;
  }
  return RequiredBooleanSettingFromPatternContext;
}

void sub_1C5D3EB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::GetRequiredBooleanSettingFromPatternContext(uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::string>::find<std::string>(a1, a2);
  if (a1 + 8 == v3)
  {
    char v6 = 0;
LABEL_9:
    std::operator+<char>();
    std::string::size_type v9 = std::string::append(&v14, "'. It should always exist.");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v16 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    goto LABEL_10;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *(const void **)(v3 + 56);
  char v6 = *(std::__shared_weak_count **)(v4 + 64);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5) {
    goto LABEL_9;
  }
  if (v7)
  {
    BOOL v8 = v7[66] != 0;
    if (!v6) {
      return v8;
    }
    goto LABEL_15;
  }
  std::operator+<char>();
  uint64_t v12 = std::string::append(&v14, "' but it's not a BOOLean variable.");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string::size_type v16 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
LABEL_10:
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  BOOL v8 = 0;
  if (v6) {
LABEL_15:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void sub_1C5D3ECC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::PatternContext::GetPrintSupportingDialogInDisplayModes(siri::dialogengine::PatternContext *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "printSupportingDialogInDisplayModes");
  BOOL RequiredBooleanSettingFromPatternContext = siri::dialogengine::GetRequiredBooleanSettingFromPatternContext((uint64_t)this, (const void **)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return RequiredBooleanSettingFromPatternContext;
}

void sub_1C5D3ED74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::PatternContext::GetSemanticModelCache@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 80);
  *a2 = *(void *)(this + 72);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void siri::dialogengine::MorphunUpdaterCatutil::GetPaths(uint64_t a1@<X8>)
{
  *(void *)&long long v23 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&v21, "morphun");
  std::string::basic_string[abi:ne180100]<0>(v22, "getpath");
  memset(&__str, 0, sizeof(__str));
  __p.__r_.__value_.__s.__data_[8] = 0;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
  __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[0] + 48;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str.__r_.__value_.__r.__words[2], &v21, &v23, (std::string *)__str.__r_.__value_.__l.__data_);
  siri::dialogengine::ExecuteCatutil((uint64_t *)&__str, 0, 0, &__s);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v22[i + 2]) < 0) {
      operator delete((void *)v22[i]);
    }
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size_t size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_)
    {
      if ((uint64_t)__s.__r_.__value_.__l.__size_ < 1)
      {
        BOOL v8 = "No Morphun locales installed on device!";
        goto LABEL_17;
      }
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      goto LABEL_11;
    }
LABEL_16:
    BOOL v8 = "Execution of catutil failed while retrieving Morphun assets paths for all locales.";
    goto LABEL_17;
  }
  size_t size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
    goto LABEL_16;
  }
  p_s = &__s;
LABEL_11:
  long long v7 = (char *)p_s + size;
  BOOL v8 = "No Morphun locales installed on device!";
  std::string::size_type v9 = p_s;
  do
  {
    long long v10 = memchr(v9, 58, size);
    if (!v10) {
      break;
    }
    if (*v10 == 58)
    {
      BOOL v8 = "No Morphun locales installed on device!";
      if (v10 == v7 || v10 - (unsigned char *)p_s == -1) {
        break;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, " ");
      std::string::basic_string[abi:ne180100]<0>(&__p, "\n");
      siri::dialogengine::StringSplitWithDelimiters(&__s, (unsigned __int8 *)&__str, (unsigned __int8 *)&__p, (uint64_t)&v21);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      uint64_t v11 = v21;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v21 + 1) - v21) >> 3) >= 2
        && *((void *)&v21 + 1) != (void)v21)
      {
        unint64_t v13 = 0;
        uint64_t v14 = 24;
        do
        {
          siri::dialogengine::StringTrim(" \t\n\r", (const std::string *)(v11 + v14 - 24), &__str);
          std::string::size_type v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v15 = __str.__r_.__value_.__l.__size_;
          }
          std::string::basic_string(&__p, &__str, 0, v15 - 1, (std::allocator<char> *)&p_str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = __p;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v21 + 1) - v21) >> 3) <= v13 + 1) {
            std::vector<std::string>::__throw_out_of_range[abi:ne180100]();
          }
          siri::dialogengine::StringTrim(" \t\n\r", (const std::string *)(v21 + v14), &__p);
          p_str = &__str;
          std::string::size_type v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (const void **)&__str.__r_.__value_.__l.__data_, (long long **)&p_str);
          std::string::operator=((std::string *)(v16 + 7), &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          v13 += 2;
          uint64_t v11 = v21;
          v14 += 48;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v21 + 1) - v21) >> 3) > v13);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      goto LABEL_18;
    }
    std::string::size_type v9 = (std::string *)(v10 + 1);
    size_t size = v7 - (unsigned char *)v9;
  }
  while (v7 - (unsigned char *)v9 >= 1);
LABEL_17:
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)v8, v3);
LABEL_18:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D3F124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v34);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__throw_out_of_range[abi:ne180100]()
{
}

void siri::dialogengine::MorphunUpdaterCatutil::GetPath(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  *(void *)&long long v20 = *MEMORY[0x1E4F143B8];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "morphun");
  std::string::basic_string[abi:ne180100]<0>(v17, "getpath");
  std::string::basic_string[abi:ne180100]<0>(v18, "--locale");
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v19 = *(std::string *)a1;
  }
  memset(&v11, 0, sizeof(v11));
  unint64_t v13 = &v11;
  char v14 = 0;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  v11.__r_.__value_.__l.__size_ = v11.__r_.__value_.__r.__words[0];
  v11.__r_.__value_.__r.__words[2] = v11.__r_.__value_.__r.__words[0] + 96;
  v11.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11.__r_.__value_.__r.__words[2], (long long *)__p, &v20, (std::string *)v11.__r_.__value_.__l.__data_);
  siri::dialogengine::ExecuteCatutil((uint64_t *)&v11, 0, 0, &__s);
  unint64_t v13 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v19.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v19.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size_t size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_)
    {
      if ((uint64_t)__s.__r_.__value_.__l.__size_ < 1)
      {
LABEL_25:
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"No such Morphun locale(s) installed on device!", v4);
        goto LABEL_26;
      }
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
LABEL_14:
      BOOL v8 = (char *)p_s + size;
      std::string::size_type v9 = p_s;
      while (1)
      {
        long long v10 = memchr(v9, 58, size);
        if (!v10) {
          goto LABEL_25;
        }
        if (*v10 == 58)
        {
          if (v10 == v8 || v10 - (unsigned char *)p_s == -1) {
            goto LABEL_25;
          }
          siri::dialogengine::StringSplit((unsigned __int8 *)&__s, " ", __p);
          if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)48) {
            siri::dialogengine::StringTrim(" \t\n\r", (const std::string *)__p[0] + 1, &v11);
          }
          else {
            std::string::basic_string[abi:ne180100]<0>(&v11, "");
          }
          *a2 = v11;
          v11.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
          goto LABEL_26;
        }
        std::string::size_type v9 = (std::string *)(v10 + 1);
        size_t size = v8 - (unsigned char *)v9;
        if (v8 - (unsigned char *)v9 < 1) {
          goto LABEL_25;
        }
      }
    }
  }
  else
  {
    size_t size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (*((unsigned char *)&__s.__r_.__value_.__s + 23))
    {
      p_s = &__s;
      goto LABEL_14;
    }
  }
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
LABEL_26:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D3F4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  a10 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::MorphunUpdaterCatutil::Download(uint64_t a1, uint64_t *a2)
{
  *(void *)&long long v19 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v14, "morphun");
  std::string::basic_string[abi:ne180100]<0>(v16, "download");
  std::string::basic_string[abi:ne180100]<0>(v17, "--locale");
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)v18, *a2, a2[1], (uint64_t)__p);
  BOOL v8 = 0;
  std::string::size_type v9 = 0;
  long long v10 = 0;
  uint64_t v12 = &v8;
  char v13 = 0;
  BOOL v8 = operator new(0x60uLL);
  std::string::size_type v9 = v8;
  long long v10 = (char *)v8 + 96;
  std::string::size_type v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v10, (long long *)v14, &v19, (std::string *)v8);
  siri::dialogengine::ExecuteCatutil((uint64_t *)&v8, 0, 0, &v11);
  uint64_t v12 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  for (uint64_t i = 0; i != -96; i -= 24)
  {
    if ((char)v18[i + 23] < 0) {
      operator delete(*(void **)&v18[i]);
    }
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v11.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if ((*((unsigned char *)&v11.__r_.__value_.__s + 23) & 0x80) == 0) {
      return size != 0;
    }
LABEL_20:
    operator delete(v11.__r_.__value_.__l.__data_);
    return size != 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v8, " ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)v14, *a2, a2[1], (uint64_t)&v8);
  if (SHIBYTE(v10) < 0) {
    operator delete(v8);
  }
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v8, 3u);
  if (SHIBYTE(v10) < 0) {
    operator delete(v8);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if ((*((unsigned char *)&v11.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_20;
  }
  return size != 0;
}

void sub_1C5D3F7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::MorphunUpdaterCatutil::Download(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v17 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "morphun");
  std::string::basic_string[abi:ne180100]<0>(v14, "download");
  std::string::basic_string[abi:ne180100]<0>(v15, "--locale");
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v16 = *(std::string *)a2;
  }
  char v6 = 0;
  char v7 = 0;
  BOOL v8 = 0;
  long long v10 = &v6;
  char v11 = 0;
  char v6 = (std::string *)operator new(0x60uLL);
  char v7 = v6;
  BOOL v8 = v6 + 4;
  char v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v8, (long long *)__p, &v17, v6);
  siri::dialogengine::ExecuteCatutil((uint64_t *)&v6, 0, 0, &v9);
  long long v10 = &v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v16.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v16.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v9.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if ((*((unsigned char *)&v9.__r_.__value_.__s + 23) & 0x80) == 0) {
      return size != 0;
    }
LABEL_17:
    operator delete(v9.__r_.__value_.__l.__data_);
    return size != 0;
  }
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if ((*((unsigned char *)&v9.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_17;
  }
  return size != 0;
}

void sub_1C5D3FAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::MorphunUpdaterCatutil::~MorphunUpdaterCatutil(siri::dialogengine::MorphunUpdaterCatutil *this)
{
}

uint64_t siri::dialogengine::IsiOS(siri::dialogengine *this)
{
  return 1;
}

uint64_t siri::dialogengine::IsMacOS(siri::dialogengine *this)
{
  return 0;
}

uint64_t siri::dialogengine::IstvOS(siri::dialogengine *this)
{
  return 0;
}

uint64_t siri::dialogengine::IsInternal(siri::dialogengine *this)
{
  return os_variant_has_internal_diagnostics();
}

uint64_t siri::dialogengine::IsSeed(siri::dialogengine *this)
{
  return 0;
}

uint64_t siri::dialogengine::IsProduction(siri::dialogengine *this)
{
  return os_variant_has_internal_diagnostics() ^ 1;
}

void siri::dialogengine::BuildId(uint64_t a1@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  size_t v9 = 256;
  if (sysctlbyname("kern.osversion", __s, &v9, 0, 0))
  {
    std::string::basic_string[abi:ne180100]<0>((void *)a1, "");
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    MEMORY[0x1C8796900](__p, "i");
    if ((v8 & 0x80u) == 0) {
      size_t v3 = v8;
    }
    else {
      size_t v3 = (size_t)__p[1];
    }
    size_t v4 = strlen(__s);
    std::string::basic_string[abi:ne180100](a1, v3 + v4);
    if (*(char *)(a1 + 23) < 0) {
      a1 = *(void *)a1;
    }
    if (v3)
    {
      if ((v8 & 0x80u) == 0) {
        char v5 = __p;
      }
      else {
        char v5 = (void **)__p[0];
      }
      memmove((void *)a1, v5, v3);
    }
    char v6 = (void *)(a1 + v3);
    if (v4) {
      memmove(v6, __s, v4);
    }
    *((unsigned char *)v6 + v4) = 0;
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C5D3FD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

siri::dialogengine::XmlErrorHandler *siri::dialogengine::XmlErrorHandler::XmlErrorHandler(siri::dialogengine::XmlErrorHandler *this, Context *a2)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)siri::dialogengine::sHandler() = this;
  xmlSetStructuredErrorFunc(*(void **)this, (xmlStructuredErrorFunc)siri::dialogengine::HandleError);
  return this;
}

void sub_1C5D3FD94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<siri::dialogengine::XmlError>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<siri::dialogengine::XmlError>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::allocator<siri::dialogengine::XmlError>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<siri::dialogengine::XmlError>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void siri::dialogengine::HandleError(siri::dialogengine *this, void *a2, _xmlError *a3)
{
  size_t v3 = *(siri::dialogengine::XmlErrorHandler **)siri::dialogengine::sHandler();
  if (v3)
  {
    siri::dialogengine::XmlErrorHandler::Handle(v3, v4, v5);
  }
}

void siri::dialogengine::XmlErrorHandler::Handle(siri::dialogengine::XmlErrorHandler *this, void *a2, _xmlError *a3)
{
  char v5 = (char *)this + 24;
  unint64_t v6 = *((void *)this + 3);
  unint64_t v7 = *((void *)this + 2);
  if (!a3)
  {
    if (v7 < v6)
    {
      std::allocator<siri::dialogengine::XmlError>::construct[abi:ne180100]<siri::dialogengine::XmlError,char const(&)[61]>(*((void *)this + 2));
      goto LABEL_6;
    }
    uint64_t v16 = *((void *)this + 1);
    unint64_t v17 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v7 - v16) >> 3);
    if (v17 + 1 <= 0x1AF286BCA1AF286)
    {
      unint64_t v18 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v6 - v16) >> 3);
      uint64_t v19 = 2 * v18;
      if (2 * v18 <= v17 + 1) {
        uint64_t v19 = v17 + 1;
      }
      if (v18 >= 0xD79435E50D7943) {
        unint64_t v20 = 0x1AF286BCA1AF286;
      }
      else {
        unint64_t v20 = v19;
      }
      unint64_t v30 = v5;
      if (v20) {
        unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::XmlError>>(v20);
      }
      else {
        uint64_t v21 = 0;
      }
      __p.__r_.__value_.__r.__words[0] = v20;
      __p.__r_.__value_.__l.__size_ = v20 + 152 * v17;
      unint64_t v29 = v20 + 152 * v21;
      std::allocator<siri::dialogengine::XmlError>::construct[abi:ne180100]<siri::dialogengine::XmlError,char const(&)[61]>(__p.__r_.__value_.__l.__size_);
      __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_ + 152;
      uint64_t v22 = (uint64_t *)((char *)this + 8);
      goto LABEL_27;
    }
LABEL_42:
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  if (v7 < v6)
  {
    siri::dialogengine::XmlError::XmlError(*((siri::dialogengine::XmlError **)this + 2), a3);
LABEL_6:
    unint64_t v9 = v7 + 152;
    *((void *)this + 2) = v7 + 152;
    goto LABEL_28;
  }
  uint64_t v10 = *((void *)this + 1);
  unint64_t v11 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v7 - v10) >> 3);
  if (v11 + 1 > 0x1AF286BCA1AF286) {
    goto LABEL_42;
  }
  unint64_t v12 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v6 - v10) >> 3);
  uint64_t v13 = 2 * v12;
  if (2 * v12 <= v11 + 1) {
    uint64_t v13 = v11 + 1;
  }
  if (v12 >= 0xD79435E50D7943) {
    unint64_t v14 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v14 = v13;
  }
  unint64_t v30 = v5;
  if (v14) {
    unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::XmlError>>(v14);
  }
  else {
    uint64_t v15 = 0;
  }
  __p.__r_.__value_.__r.__words[0] = v14;
  __p.__r_.__value_.__l.__size_ = v14 + 152 * v11;
  unint64_t v29 = v14 + 152 * v15;
  siri::dialogengine::XmlError::XmlError((siri::dialogengine::XmlError *)__p.__r_.__value_.__l.__size_, a3);
  __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_ + 152;
  uint64_t v22 = (uint64_t *)((char *)this + 8);
LABEL_27:
  std::vector<siri::dialogengine::XmlError>::__swap_out_circular_buffer(v22, &__p);
  unint64_t v9 = *((void *)this + 2);
  std::__split_buffer<siri::dialogengine::XmlError>::~__split_buffer((uint64_t)&__p);
LABEL_28:
  *((void *)this + 2) = v9;
  long long v23 = (siri::dialogengine::XmlError *)(v9 - 152);
  if (a2)
  {
    siri::dialogengine::XmlError::GetMessageWithDetails(v23, &__p);
    siri::dialogengine::Context::SetError((uint64_t)a2, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v25 = a2[63];
    uint64_t v24 = (std::__shared_weak_count *)a2[64];
    if (v24)
    {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if (v25)
    {
      siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&__p, *(int *)(v9 - 88), (const std::string *)(v9 - 112));
      uint64_t v26 = a2[63];
      uint64_t v27 = (std::__shared_weak_count *)a2[64];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::dialogengine::File::AddValidationError(v26, (long long *)(v9 - 144), (uint64_t)&__p);
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    siri::dialogengine::XmlError::GetMessageWithDetails(v23, &__p);
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5D401C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void std::allocator<siri::dialogengine::XmlError>::construct[abi:ne180100]<siri::dialogengine::XmlError,char const(&)[61]>(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "An XML parse error occurred, but no information was provided");
  siri::dialogengine::XmlError::XmlError(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D40274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::XmlError>>(unint64_t a1)
{
  if (a1 >= 0x1AF286BCA1AF287) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(152 * a1);
}

uint64_t *std::vector<siri::dialogengine::XmlError>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_DWORD *)(v6 - 152) = *(_DWORD *)(v2 + v5 - 152);
      long long v8 = *(_OWORD *)(v2 + v5 - 144);
      *(void *)(v6 - 128) = *(void *)(v2 + v5 - 128);
      *(_OWORD *)(v6 - 144) = v8;
      *(void *)(v7 - 136) = 0;
      *(void *)(v7 - 128) = 0;
      int v9 = *(_DWORD *)(v2 + v5 - 120);
      *(void *)(v7 - 144) = 0;
      *(_DWORD *)(v6 - 120) = v9;
      long long v10 = *(_OWORD *)(v2 + v5 - 112);
      *(void *)(v6 - 96) = *(void *)(v2 + v5 - 96);
      *(_OWORD *)(v6 - 112) = v10;
      *(void *)(v7 - 104) = 0;
      *(void *)(v7 - 96) = 0;
      *(void *)(v7 - 112) = 0;
      *(_DWORD *)(v6 - 88) = *(_DWORD *)(v2 + v5 - 88);
      long long v11 = *(_OWORD *)(v2 + v5 - 80);
      *(void *)(v6 - 64) = *(void *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 80) = v11;
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 64) = 0;
      *(void *)(v7 - 80) = 0;
      long long v12 = *(_OWORD *)(v2 + v5 - 56);
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = v12;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 56) = 0;
      long long v13 = *(_OWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(_OWORD *)(v6 - 32) = v13;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      v5 -= 152;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v14 = *result;
  *uint64_t result = v4;
  a2[1] = v14;
  uint64_t v15 = result[1];
  result[1] = a2[2];
  a2[2] = v15;
  uint64_t v16 = result[2];
  result[2] = a2[3];
  a2[3] = v16;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<siri::dialogengine::XmlError>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 152;
    std::allocator<siri::dialogengine::XmlError>::destroy[abi:ne180100](i - 152);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void siri::dialogengine::XmlErrorHandler::Register(siri::dialogengine::XmlErrorHandler *this)
{
  uint64_t v1 = (void ***)siri::dialogengine::sHandler();
  *uint64_t v1 = v2;
  uint64_t v3 = *v2;
  xmlSetStructuredErrorFunc(v3, (xmlStructuredErrorFunc)siri::dialogengine::HandleError);
}

void siri::dialogengine::XmlErrorHandler::~XmlErrorHandler(siri::dialogengine::XmlErrorHandler *this)
{
  uint64_t v2 = (siri::dialogengine::XmlErrorHandler **)siri::dialogengine::sHandler();
  if (*v2 == this)
  {
    *uint64_t v2 = 0;
    xmlSetStructuredErrorFunc(0, 0);
  }
  uint64_t v3 = (void **)((char *)this + 8);
  std::vector<siri::dialogengine::XmlError>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void siri::dialogengine::XmlErrorHandler::Unregister(siri::dialogengine::XmlErrorHandler *this)
{
  uint64_t v1 = (void *)siri::dialogengine::sHandler();
  if (*v1 == v2)
  {
    *uint64_t v1 = 0;
    xmlSetStructuredErrorFunc(0, 0);
  }
}

BOOL siri::dialogengine::XmlErrorHandler::ok(siri::dialogengine::XmlErrorHandler *this)
{
  return *((void *)this + 1) == *((void *)this + 2);
}

void siri::dialogengine::XmlErrorHandler::clear(siri::dialogengine::XmlErrorHandler *this)
{
  uint64_t v3 = *((void *)this + 1);
  for (uint64_t i = *((void *)this + 2); i != v3; std::allocator<siri::dialogengine::XmlError>::destroy[abi:ne180100](i))
    i -= 152;
  *((void *)this + 2) = v3;
}

void sub_1C5D40710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

void sub_1C5D40844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D40D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, void *a9, void *a10, uint64_t a11, int __pa, __int16 __p_4, char __p_6, char __p_7, uint64_t a16, uint64_t a17, char **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char *a31,std::__split_buffer<std::string> *a32,uint64_t a33,char a34)
{
  a18 = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a31 = &a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);

  _Unwind_Resume(a1);
}

void *siri::dialogengine::Defer::Defer(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  result[4] = 0;
  return result;
}

{
  *uint64_t result = a2;
  result[4] = 0;
  return result;
}

void *siri::dialogengine::Defer::Defer(void *a1, uint64_t a2)
{
  *a1 = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a2);
  return a1;
}

{
  *a1 = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void siri::dialogengine::Defer::~Defer(siri::dialogengine::Defer *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 1);
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char *siri::dialogengine::Defer::Clear(siri::dialogengine::Defer *this)
{
  *(void *)this = 0;
  uint64_t v2 = (char *)this + 8;
  uint64_t result = (char *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (result == v2) {
    return (char *)(*(uint64_t (**)(char *))(*(void *)v2 + 32))(v2);
  }
  if (result) {
    return (char *)(*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t non-virtual thunk to'siri::dialogengine::GroupPhrases::Validate(siri::dialogengine::GroupPhrases *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::GroupPhrases::Validate((siri::dialogengine::GroupPhrases *)((char *)this - 64), a2);
}

uint64_t siri::dialogengine::GroupPhrases::Validate(siri::dialogengine::GroupPhrases *this, siri::dialogengine::Context *a2)
{
  *((void *)&v46 + 1) = *MEMORY[0x1E4F143B8];
  char v4 = siri::dialogengine::Group::Validate((uint64_t **)this, a2);
  v43[0] = 0;
  v43[1] = 0;
  int v42 = v43;
  siri::dialogengine::GroupPhrases::GetPhrases(this, &v45);
  std::string::size_type size = v45.__r_.__value_.__l.__size_;
  uint64_t v5 = (uint64_t *)v45.__r_.__value_.__r.__words[0];
  if (v45.__r_.__value_.__r.__words[0] != v45.__r_.__value_.__l.__size_)
  {
    while (1)
    {
      uint64_t v8 = *v5;
      uint64_t v7 = (std::__shared_weak_count *)v5[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(char *)(v8 + 255) < 0) {
        std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(v8 + 232), *(void *)(v8 + 240));
      }
      else {
        std::string v41 = *(std::string *)(v8 + 232);
      }
      std::string::size_type v9 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v9 = v41.__r_.__value_.__l.__size_;
      }
      if (v9)
      {
        if (v43 != (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v42, (const void **)&v41.__r_.__value_.__l.__data_))
        {
          std::operator+<char>();
          long long v10 = std::string::append(&v44, "' already exists.");
          long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, v8);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v44.__r_.__value_.__l.__data_);
          }
          char v4 = 0;
        }
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v42, (const void **)&v41.__r_.__value_.__l.__data_, (uint64_t)&v41);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "Phrase group has empty 'phrase' field - ignoring it.");
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__p, v8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        char v4 = 0;
      }
      char v12 = (*(uint64_t (**)(uint64_t, siri::dialogengine::Context *))(*(void *)v8 + 32))(v8, a2);
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v44, (const void ***)this + 9);
      v4 &= v12;
      std::string::size_type v13 = v44.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v44.__r_.__value_.__l.__data_ != &v44.__r_.__value_.__r.__words[1])
      {
        do
        {
          std::pair<std::string const,std::string>::pair[abi:ne180100](&__p, (long long *)(v13 + 32));
          std::string::basic_string[abi:ne180100]<0>(v34, "phrase");
          siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)v34, (uint64_t)&__p, v36);
          if (v35 < 0) {
            operator delete(v34[0]);
          }
          unint64_t v14 = v37;
          unsigned __int8 v15 = v37;
          if ((v37 & 0x80u) != 0) {
            unint64_t v14 = (unint64_t)v36[1];
          }
          if (v14)
          {
            siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)v36, 0);
            char v4 = 0;
            unsigned __int8 v15 = v37;
          }
          if ((v15 & 0x80) != 0) {
            operator delete(v36[0]);
          }
          if (v40 < 0) {
            operator delete(v39);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v16 = *(std::string **)(v13 + 8);
          if (v16)
          {
            do
            {
              unint64_t v17 = v16;
              uint64_t v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
            }
            while (v16);
          }
          else
          {
            do
            {
              unint64_t v17 = *(std::string **)(v13 + 16);
              BOOL v18 = v17->__r_.__value_.__r.__words[0] == v13;
              std::string::size_type v13 = (std::string::size_type)v17;
            }
            while (!v18);
          }
          std::string::size_type v13 = (std::string::size_type)v17;
        }
        while (v17 != (std::string *)&v44.__r_.__value_.__r.__words[1]);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v44.__r_.__value_.__l.__size_);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v7) {
        goto LABEL_41;
      }
LABEL_42:
      v5 += 2;
      if (v5 == (uint64_t *)size) {
        goto LABEL_46;
      }
    }
    operator delete(v41.__r_.__value_.__l.__data_);
    if (!v7) {
      goto LABEL_42;
    }
LABEL_41:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    goto LABEL_42;
  }
LABEL_46:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  siri::dialogengine::GroupPhrases::GetPhrases(this, &__p);
  std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
  uint64_t v19 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    do
    {
      unint64_t v29 = v19;
      uint64_t v21 = *v19;
      unint64_t v20 = (std::__shared_weak_count *)v19[1];
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v30 = v20;
      char v22 = 0;
      uint64_t v23 = 0;
      v44.__r_.__value_.__r.__words[0] = 1;
      do
      {
        char v24 = v22;
        uint64_t v25 = *((unsigned int *)&v44.__r_.__value_.__l.__data_ + v23);
        if (*(char *)(v21 + 255) < 0) {
          std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)(v21 + 232), *(void *)(v21 + 240));
        }
        else {
          std::string v45 = *(std::string *)(v21 + 232);
        }
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
        v41.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v31 = (std::string *)operator new(0x18uLL);
        uint64_t v32 = v31;
        uint64_t v33 = v31 + 1;
        uint64_t v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v33, (long long *)&v45, &v46, v31);
        char v26 = siri::dialogengine::GroupPhrases::CheckForInfiniteLoop((uint64_t)this, (uint64_t)a2, v21, v21, v25, (long long **)&v31, 0);
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        v4 &= v26;
        char v22 = 1;
        uint64_t v23 = 1;
      }
      while ((v24 & 1) == 0);
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      uint64_t v19 = v29 + 2;
    }
    while (v29 + 2 != (uint64_t *)v28);
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  std::__tree<std::string>::destroy((uint64_t)&v42, v43[0]);
  return v4 & 1;
}

void sub_1C5D41598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45,char *a46)
{
}

void siri::dialogengine::GroupPhrases::GetPhrases(siri::dialogengine::GroupPhrases *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *((void *)this + 26);
  for (uint64_t i = *((void *)this + 27); v2 != i; v2 += 16)
  {
    uint64_t v5 = *(const void **)v2;
    uint64_t v6 = *(std::__shared_weak_count **)(v2 + 8);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v5)
    {
      if (v7)
      {
        *(void *)&long long v8 = v7;
        *((void *)&v8 + 1) = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::vector<std::shared_ptr<siri::dialogengine::Group>>::push_back[abi:ne180100]((uint64_t)a2, &v8);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
      }
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C5D417F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GroupPhrases::CheckForInfiniteLoop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long **a6, int a7)
{
  if (!a4) {
    return 1;
  }
  if (*(char *)(a4 + 143) < 0) {
    std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(a4 + 120), *(void *)(a4 + 128));
  }
  else {
    std::string v54 = *(std::string *)(a4 + 120);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v54.__r_.__value_.__l.__size_ == 0;
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v54.__r_.__value_.__r.__words[2]) == 0;
  }
  unint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(&v68, *(void **)(a4 + 208), *(void **)(a4 + 216), (uint64_t)(*(void *)(a4 + 216) - *(void *)(a4 + 208)) >> 4);
  std::string::size_type v13 = v68;
  int v39 = v69;
  if (v68 == v69)
  {
LABEL_94:
    uint64_t v11 = 1;
    goto LABEL_96;
  }
  int v41 = !v12 | a7;
  unsigned int v38 = a5;
  while (2)
  {
    uint64_t v15 = *v13;
    unint64_t v14 = (std::__shared_weak_count *)v13[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(char *)(v15 + 143) < 0) {
      std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(v15 + 120), *(void *)(v15 + 128));
    }
    else {
      std::string v54 = *(std::string *)(v15 + 120);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v16 = v54.__r_.__value_.__l.__size_ == 0;
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    else
    {
      BOOL v16 = SHIBYTE(v54.__r_.__value_.__r.__words[2]) == 0;
    }
    uint64_t v17 = !v16 | v41;
    if (v18)
    {
      uint64_t v19 = v18;
      memset(&v67, 0, sizeof(v67));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v67, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
      int v20 = siri::dialogengine::GroupPhrases::CheckForInfiniteLoop(a1, a2, a3, v19, a5, &v67, v17);
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
      if (v20) {
        int v21 = 3;
      }
      else {
        int v21 = 1;
      }
      goto LABEL_89;
    }
    if (!v22) {
      goto LABEL_86;
    }
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    siri::dialogengine::SpeakableString::SpeakableString(&v54, (const siri::dialogengine::SpeakableString *)&v22[8].__shared_weak_owners_);
    if (a5) {
      siri::dialogengine::SpeakableString::GetPrintChunks((siri::dialogengine::SpeakableString *)&v54, v23, (uint64_t *)&v50);
    }
    else {
      siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::SpeakableString *)&v54, v23, (uint64_t *)&v50);
    }
    unint64_t v51 = 0;
    unint64_t v52 = 0;
    uint64_t v53 = 0;
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(&v51, v50.__r_.__value_.__l.__data_, (void *)v50.__r_.__value_.__l.__size_, (uint64_t)(v50.__r_.__value_.__l.__size_ - v50.__r_.__value_.__r.__words[0]) >> 4);
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
    uint64_t v25 = v51;
    char v24 = v52;
    if (v51 == v52)
    {
      int v21 = 0;
      char v36 = 1;
      goto LABEL_71;
    }
    while (1)
    {
      char v26 = *v25;
      uint64_t v27 = (std::__shared_weak_count *)v25[1];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v26) {
        goto LABEL_60;
      }
      if (!v26) {
        goto LABEL_60;
      }
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v26[223] < 0) {
        std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)v26 + 25), *((void *)v26 + 26));
      }
      else {
        std::string v50 = *(std::string *)(v26 + 200);
      }
      std::string::size_type v28 = *a6;
      unint64_t v29 = a6[1];
      uint64_t v30 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)*a6, (uint64_t)v29, (unsigned __int8 **)&v50);
      memset(&v49, 0, sizeof(v49));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v49, v28, v29, 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
      std::string::size_type size = (_OWORD *)v49.__r_.__value_.__l.__size_;
      if (v49.__r_.__value_.__l.__size_ >= v49.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v33 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v49, (long long *)&v50);
      }
      else
      {
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v49.__r_.__value_.__l.__size_, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v32 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
          *(void *)(v49.__r_.__value_.__l.__size_ + 16) = *((void *)&v50.__r_.__value_.__l + 2);
          *std::string::size_type size = v32;
        }
        std::string::size_type v33 = (std::string::size_type)size + 24;
      }
      v49.__r_.__value_.__l.__size_ = v33;
      if ((long long *)v30 == v29)
      {
        Phrase = siri::dialogengine::GroupPhrases::GetPhrase(a1, (unsigned __int8 *)&v50);
        memset(&v44, 0, sizeof(v44));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v44, (long long *)v49.__r_.__value_.__l.__data_, (long long *)v49.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49.__r_.__value_.__l.__size_ - v49.__r_.__value_.__r.__words[0]) >> 3));
        char v35 = siri::dialogengine::GroupPhrases::CheckForInfiniteLoop(a1, a2, a3, Phrase, v38, &v44, v17);
        v47[0] = &v44;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, " -> ");
        siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)v47, (uint64_t)v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_, (uint64_t)__p);
        if (v46 < 0) {
          operator delete(__p[0]);
        }
        std::operator+<char>();
        if (v41) {
          siri::dialogengine::Context::AddValidationWarning(a2, (long long *)__p, a3);
        }
        else {
          siri::dialogengine::Context::AddValidationError(a2, (long long *)__p, a3);
        }
        if (v46 < 0) {
          operator delete(__p[0]);
        }
        if (v48 < 0) {
          operator delete(v47[0]);
        }
        char v35 = 0;
      }
      v47[0] = &v49;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
      char v26 = (char *)v27;
      if (v35)
      {
LABEL_60:
        char v36 = 1;
        if (!v26) {
          goto LABEL_62;
        }
LABEL_61:
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v26);
        goto LABEL_62;
      }
      char v36 = 0;
      char v26 = (char *)v27;
      if (v27) {
        goto LABEL_61;
      }
LABEL_62:
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if ((v36 & 1) == 0) {
        break;
      }
      v25 += 2;
      if (v25 == v24)
      {
        int v21 = 0;
        goto LABEL_71;
      }
    }
    int v21 = 1;
LABEL_71:
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    a5 = v38;
    if (v66 < 0) {
      operator delete(v65);
    }
    if (v64 < 0) {
      operator delete(v63);
    }
    if (v62 < 0) {
      operator delete(v61);
    }
    if (v60 < 0) {
      operator delete(v59);
    }
    if (v58 < 0) {
      operator delete(v57);
    }
    if (v56 < 0) {
      operator delete(v55);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    char v22 = v14;
    if (v36) {
LABEL_86:
    }
      int v21 = 0;
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
LABEL_89:
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (v21 == 3 || !v21)
    {
      v13 += 2;
      if (v13 == v39) {
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
  uint64_t v11 = 0;
LABEL_96:
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  return v11;
}

void sub_1C5D41E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  a24 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a38 < 0) {
    operator delete(__p);
  }
  if (v43)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  std::string __p = &a39;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a42);
  if (v42)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  a42 = v44 - 112;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  _Unwind_Resume(a1);
}

char *siri::dialogengine::GroupPhrases::GetPhrase(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(void *)(a1 + 208);
  uint64_t v4 = *(void *)(a1 + 216);
  while (v3 != v4)
  {
    uint64_t v6 = *(const void **)v3;
    uint64_t v7 = *(std::__shared_weak_count **)(v3 + 8);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v6) {
      goto LABEL_34;
    }
    if (!v8) {
      goto LABEL_34;
    }
    std::string::size_type v9 = v8;
    if (v8[255] < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v8 + 29), *((void *)v8 + 30));
    }
    else {
      std::string __p = *(std::string *)(v8 + 232);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v11 = a2[23];
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *((void *)a2 + 1);
    }
    if (size == v11)
    {
      if (v12 >= 0) {
        std::string::size_type v13 = a2;
      }
      else {
        std::string::size_type v13 = *(unsigned __int8 **)a2;
      }
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        uint64_t v23 = (void *)__p.__r_.__value_.__r.__words[0];
        int v24 = memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_);
        operator delete(v23);
        if (!v24)
        {
LABEL_31:
          LOBYTE(v22) = 1;
          if (!v7) {
            goto LABEL_37;
          }
LABEL_36:
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
          goto LABEL_37;
        }
        goto LABEL_34;
      }
      if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
        goto LABEL_31;
      }
      uint64_t v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
      p_p = &__p;
      do
      {
        int v17 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v16 = v17;
        int v19 = *v13++;
        int v18 = v19;
        BOOL v21 = v14-- != 0;
        BOOL v22 = v16 == v18;
      }
      while (v16 == v18 && v21);
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
LABEL_30:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v22) {
          goto LABEL_31;
        }
LABEL_34:
        LOBYTE(v22) = 0;
        goto LABEL_35;
      }
    }
    else
    {
      BOOL v22 = 0;
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_30;
      }
    }
    if (v22) {
      goto LABEL_31;
    }
LABEL_35:
    std::string::size_type v9 = v2;
    if (v7) {
      goto LABEL_36;
    }
LABEL_37:
    if (v22) {
      return v9;
    }
    v3 += 16;
    uint64_t v2 = v9;
  }
  return 0;
}

void sub_1C5D42194(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<siri::dialogengine::Group>>::push_back[abi:ne180100](uint64_t a1, long long *a2)
{
  uint64_t v5 = *(void **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    long long v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v5 - *(void *)a1) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    std::string::size_type v13 = (char *)operator new(16 * v12);
    uint64_t v14 = &v13[16 * v9];
    long long v15 = *a2;
    *(_OWORD *)uint64_t v14 = *a2;
    if (*((void *)&v15 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
      long long v8 = *(void **)a1;
      uint64_t v5 = *(void **)(a1 + 8);
    }
    int v16 = &v13[16 * v12];
    uint64_t v7 = v14 + 16;
    if (v5 == v8)
    {
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v16;
    }
    else
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v14 - 1) = v17;
        v14 -= 16;
        *uint64_t v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v8);
      long long v8 = *(void **)a1;
      int v18 = *(void **)(a1 + 8);
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v16;
      while (v18 != v8)
      {
        int v19 = (std::__shared_weak_count *)*(v18 - 1);
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        v18 -= 2;
      }
    }
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *uint64_t v5 = *(void *)a2;
    v5[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = v5 + 2;
  }
  *(void *)(a1 + 8) = v7;
}

void non-virtual thunk to'siri::dialogengine::GroupPhrases::~GroupPhrases(siri::dialogengine::GroupPhrases *this)
{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupPhrases *)((char *)this - 64));
  JUMPOUT(0x1C8796D70);
}

{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupPhrases *)((char *)this - 64));
}

void siri::dialogengine::GroupPhrases::Execute(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void siri::dialogengine::GroupPhrases::~GroupPhrases(siri::dialogengine::GroupPhrases *this)
{
  siri::dialogengine::Group::~Group(this);
  JUMPOUT(0x1C8796D70);
}

double siri::dialogengine::GroupPhrases::GroupPhrases(siri::dialogengine::GroupPhrases *this)
{
  *((void *)this + 7) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((void *)this + 31) = 0;
  *(void *)this = &unk_1F211A470;
  *((void *)this + 8) = &unk_1F211A4C8;
  return result;
}

{
  double result;

  *((void *)this + 7) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((void *)this + 31) = 0;
  *(void *)this = &unk_1F211A470;
  *((void *)this + 8) = &unk_1F211A4C8;
  return result;
}

void non-virtual thunk to'siri::dialogengine::ConditionExpression::~ConditionExpression(siri::dialogengine::ConditionExpression *this)
{
  uint64_t v2 = (void **)((char *)this - 88);
  *((void *)this - 11) = &unk_1F211A4F0;
  *(void *)this = &unk_1F211A530;
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  siri::dialogengine::ConditionEntry::~ConditionEntry(v2);
  JUMPOUT(0x1C8796D70);
}

{
  void **v2;
  uint64_t vars8;

  uint64_t v2 = (void **)((char *)this - 88);
  *((void *)this - 11) = &unk_1F211A4F0;
  *(void *)this = &unk_1F211A530;
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  siri::dialogengine::ConditionEntry::~ConditionEntry(v2);
}

BOOL siri::dialogengine::ConditionExpression::Evaluate(const void **this, uint64_t **a2, siri::dialogengine::ExecutionState *a3)
{
  if (!a2) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v59, "");
  std::string::basic_string[abi:ne180100]<0>(&v58, "");
  siri::dialogengine::ResolveValue(a2, this + 19, 1, (uint64_t)&v59, (uint64_t)&v58, &v60);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = (char *)(this + 22);
  if (*((char *)this + 199) < 0)
  {
    long long v8 = this[23];
    if (v8 != (const void *)7)
    {
      if (v8 != (const void *)9) {
        goto LABEL_25;
      }
      uint64_t v5 = *(char **)v5;
LABEL_14:
      uint64_t v9 = *(void *)v5;
      int v10 = v5[8];
      if (v9 != 0x656E696665646E75 || v10 != 100) {
        goto LABEL_25;
      }
      BOOL v7 = v60 == 0;
      goto LABEL_119;
    }
    uint64_t v5 = *(char **)v5;
  }
  else
  {
    int v6 = *((unsigned __int8 *)this + 199);
    if (v6 != 7)
    {
      if (v6 != 9) {
        goto LABEL_25;
      }
      goto LABEL_14;
    }
  }
  int v12 = *(_DWORD *)v5;
  int v13 = *(_DWORD *)(v5 + 3);
  if (v12 != 1768318308 || v13 != 1684369001)
  {
LABEL_25:
    siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)(this + 19), 1, (uint64_t)&v59);
    std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v59.__r_.__value_.__l.__size_;
    }
    if (size || !v60)
    {
LABEL_33:
      if (siri::dialogengine::IsArrayType(&v59))
      {
        std::string::basic_string[abi:ne180100]<0>(&v58, (char *)siri::dialogengine::TYPE_ARRAY);
      }
      else
      {
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          std::string v58 = v59;
          goto LABEL_40;
        }
        std::string::__init_copy_ctor_external(&v58, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
LABEL_40:
      std::string v59 = v58;
      size_t v16 = strlen(siri::dialogengine::TYPE_BOOLEAN);
      size_t v17 = v16;
      size_t v18 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      {
        size_t v20 = v59.__r_.__value_.__l.__size_;
        if (v16 != v59.__r_.__value_.__l.__size_)
        {
          BOOL v21 = siri::dialogengine::TYPE_STRING;
          size_t v22 = strlen(siri::dialogengine::TYPE_STRING);
          goto LABEL_54;
        }
        if (v16 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        int v19 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (v16 != HIBYTE(v59.__r_.__value_.__r.__words[2]))
        {
          BOOL v21 = siri::dialogengine::TYPE_STRING;
          size_t v22 = strlen(siri::dialogengine::TYPE_STRING);
          goto LABEL_50;
        }
        int v19 = &v59;
      }
      if (!memcmp(v19, siri::dialogengine::TYPE_BOOLEAN, v17))
      {
        unint64_t v29 = v61;
        v57[0] = v60;
        v57[1] = v61;
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v30 = siri::dialogengine::ConditionExpression::EvaluateBoolean((uint64_t)this, a2, (uint64_t)v57);
        goto LABEL_115;
      }
      BOOL v21 = siri::dialogengine::TYPE_STRING;
      size_t v22 = strlen(siri::dialogengine::TYPE_STRING);
      if ((v18 & 0x80) != 0)
      {
        size_t v20 = v59.__r_.__value_.__l.__size_;
LABEL_54:
        if (v22 != v20)
        {
          int v24 = siri::dialogengine::TYPE_NUMBER;
          size_t v25 = strlen(siri::dialogengine::TYPE_NUMBER);
          goto LABEL_71;
        }
        if (v20 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v23 = (std::string *)v59.__r_.__value_.__r.__words[0];
LABEL_57:
        if (!memcmp(v23, v21, v20))
        {
          unint64_t v29 = v61;
          v56[0] = v60;
          v56[1] = v61;
          if (v61) {
            atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v30 = siri::dialogengine::ConditionExpression::EvaluateString((uint64_t)this, a2, (uint64_t)v56);
          goto LABEL_115;
        }
        int v24 = siri::dialogengine::TYPE_NUMBER;
        size_t v25 = strlen(siri::dialogengine::TYPE_NUMBER);
        if ((v18 & 0x80) == 0) {
          goto LABEL_59;
        }
        size_t v20 = v59.__r_.__value_.__l.__size_;
LABEL_71:
        if (v25 != v20)
        {
          uint64_t v27 = (const void *)siri::dialogengine::TYPE_DIALOG_CALENDAR;
          size_t v28 = strlen((const char *)siri::dialogengine::TYPE_DIALOG_CALENDAR);
          goto LABEL_80;
        }
        if (v20 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        char v26 = (std::string *)v59.__r_.__value_.__r.__words[0];
LABEL_74:
        if (!memcmp(v26, v24, v20))
        {
          unint64_t v29 = v61;
          v55[0] = v60;
          v55[1] = v61;
          if (v61) {
            atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v30 = siri::dialogengine::ConditionExpression::EvaluateNumber((uint64_t)this, a2, (uint64_t)v55);
          goto LABEL_115;
        }
        uint64_t v27 = (const void *)siri::dialogengine::TYPE_DIALOG_CALENDAR;
        size_t v28 = strlen((const char *)siri::dialogengine::TYPE_DIALOG_CALENDAR);
        if ((v18 & 0x80) == 0) {
          goto LABEL_76;
        }
LABEL_80:
        if (v28 != v59.__r_.__value_.__l.__size_)
        {
          long long v32 = (const void *)siri::dialogengine::TYPE_ARRAY;
          size_t v33 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
          goto LABEL_92;
        }
        if (v28 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v31 = (std::string *)v59.__r_.__value_.__r.__words[0];
LABEL_83:
        if (!memcmp(v31, v27, v28))
        {
          unint64_t v29 = v61;
          v54[0] = v60;
          v54[1] = v61;
          if (v61) {
            atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v30 = siri::dialogengine::ConditionExpression::EvaluateDialogCalendar((uint64_t)this, a2, (uint64_t)v54);
          goto LABEL_115;
        }
        long long v32 = (const void *)siri::dialogengine::TYPE_ARRAY;
        size_t v33 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
        if ((v18 & 0x80) == 0) {
          goto LABEL_85;
        }
LABEL_92:
        if (v33 != v59.__r_.__value_.__l.__size_)
        {
          char v35 = (const void *)siri::dialogengine::TYPE_UNKNOWN;
          size_t v37 = strlen(siri::dialogengine::TYPE_UNKNOWN);
          goto LABEL_105;
        }
        if (v33 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v34 = (std::string *)v59.__r_.__value_.__r.__words[0];
LABEL_95:
        if (!memcmp(v34, v32, v33))
        {
          unint64_t v29 = v61;
          v53[0] = (const void *)v60;
          v53[1] = v61;
          if (v61) {
            atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v30 = siri::dialogengine::ConditionExpression::EvaluateArray((uint64_t)this, a2, v53);
          goto LABEL_115;
        }
        char v35 = (const void *)siri::dialogengine::TYPE_UNKNOWN;
        size_t v37 = strlen(siri::dialogengine::TYPE_UNKNOWN);
        if ((v18 & 0x80) == 0)
        {
LABEL_97:
          if (v37 == v18)
          {
            unsigned int v38 = &v59;
            goto LABEL_108;
          }
          goto LABEL_109;
        }
LABEL_105:
        if (v37 == v59.__r_.__value_.__l.__size_)
        {
          if (v37 == -1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          unsigned int v38 = (std::string *)v59.__r_.__value_.__r.__words[0];
LABEL_108:
          if (!memcmp(v38, v35, v37))
          {
            std::operator+<char>();
            char v40 = std::string::append(&v49, "' for variable: '");
            long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
            v50.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v41;
            v40->__r_.__value_.__l.__size_ = 0;
            v40->__r_.__value_.__r.__words[2] = 0;
            v40->__r_.__value_.__r.__words[0] = 0;
            int v42 = *((char *)this + 175);
            if (v42 >= 0) {
              int v43 = (const std::string::value_type *)(this + 19);
            }
            else {
              int v43 = (const std::string::value_type *)this[19];
            }
            if (v42 >= 0) {
              std::string::size_type v44 = *((unsigned __int8 *)this + 175);
            }
            else {
              std::string::size_type v44 = (std::string::size_type)this[20];
            }
            std::string v45 = std::string::append(&v50, v43, v44);
            long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
            v51.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v46;
            v45->__r_.__value_.__l.__size_ = 0;
            v45->__r_.__value_.__r.__words[2] = 0;
            v45->__r_.__value_.__r.__words[0] = 0;
            unsigned int v47 = std::string::append(&v51, "'");
            long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
            v58.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v48;
            v47->__r_.__value_.__l.__size_ = 0;
            v47->__r_.__value_.__r.__words[2] = 0;
            v47->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Log::LogWithLevel((uint64_t)&v58, 3u);
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v58.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v51.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v50.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v49.__r_.__value_.__l.__data_);
            }
            BOOL v7 = 0;
            goto LABEL_117;
          }
        }
LABEL_109:
        unint64_t v29 = v61;
        v52[0] = v60;
        v52[1] = (uint64_t)v61;
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v30 = siri::dialogengine::ConditionExpression::EvaluateOther((uint64_t)this, v36, v52, (uint64_t)&v59);
LABEL_115:
        BOOL v7 = v30;
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
LABEL_117:
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
        goto LABEL_119;
      }
LABEL_50:
      if (v22 != v18)
      {
        int v24 = siri::dialogengine::TYPE_NUMBER;
        size_t v25 = strlen(siri::dialogengine::TYPE_NUMBER);
LABEL_59:
        if (v25 != v18)
        {
          uint64_t v27 = (const void *)siri::dialogengine::TYPE_DIALOG_CALENDAR;
          size_t v28 = strlen((const char *)siri::dialogengine::TYPE_DIALOG_CALENDAR);
LABEL_76:
          if (v28 != v18)
          {
            long long v32 = (const void *)siri::dialogengine::TYPE_ARRAY;
            size_t v33 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
LABEL_85:
            if (v33 != v18)
            {
              char v35 = (const void *)siri::dialogengine::TYPE_UNKNOWN;
              size_t v37 = strlen(siri::dialogengine::TYPE_UNKNOWN);
              goto LABEL_97;
            }
            unint64_t v34 = &v59;
            goto LABEL_95;
          }
          uint64_t v31 = &v59;
          goto LABEL_83;
        }
        char v26 = &v59;
        size_t v20 = v18;
        goto LABEL_74;
      }
      uint64_t v23 = &v59;
      size_t v20 = v18;
      goto LABEL_57;
    }
    if (*(char *)(v60 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(v60 + 32), *(void *)(v60 + 40));
      if ((*((unsigned char *)&v59.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_32;
      }
    }
    else
    {
      std::string v58 = *(std::string *)(v60 + 32);
      if ((*((unsigned char *)&v59.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_32:
        std::string v59 = v58;
        goto LABEL_33;
      }
    }
    operator delete(v59.__r_.__value_.__l.__data_);
    goto LABEL_32;
  }
  BOOL v7 = v60 != 0;
LABEL_119:
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  return v7;
}

void sub_1C5D42D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 121) < 0) {
    operator delete(*(void **)(v28 - 144));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v28 - 89) < 0) {
    operator delete(*(void **)(v28 - 112));
  }
  uint64_t v30 = *(std::__shared_weak_count **)(v28 - 72);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::ConditionExpression::EvaluateBoolean(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  if (*(void *)a3
  {
    BOOL v7 = *(std::__shared_weak_count **)(a3 + 8);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = v6[66] != 0;
  }
  else
  {
    BOOL v7 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = (unsigned __int8 **)(a1 + 176);
  if (*(char *)(a1 + 199) < 0)
  {
    uint64_t v12 = *(void *)(a1 + 184);
    if (!v12) {
      goto LABEL_82;
    }
    if (v12 == 3)
    {
      if (*(_WORD *)*v9 == 25971 && (*v9)[2] == 116) {
        goto LABEL_82;
      }
      goto LABEL_32;
    }
    if (v12 != 5) {
      goto LABEL_32;
    }
    uint64_t v11 = *v9;
  }
  else
  {
    int v10 = *(unsigned __int8 *)(a1 + 199);
    if (!*(unsigned char *)(a1 + 199)) {
      goto LABEL_82;
    }
    if (v10 == 3)
    {
      if (*(_WORD *)v9 == 25971 && *(unsigned char *)(a1 + 178) == 116) {
        goto LABEL_82;
      }
      goto LABEL_32;
    }
    uint64_t v11 = (_WORD *)(a1 + 176);
    if (v10 != 5) {
      goto LABEL_32;
    }
  }
  int v13 = *(_DWORD *)v11;
  int v14 = *((unsigned __int8 *)v11 + 4);
  if (v13 == 1702063733 && v14 == 116)
  {
    uint64_t v8 = v8 ^ 1;
    goto LABEL_82;
  }
LABEL_32:
  std::string::basic_string[abi:ne180100]<0>(&v43, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::ResolveValue(a2, (const void **)(a1 + 200), 1, (uint64_t)&v43, (uint64_t)&__p, (uint64_t *)&v45);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)v43);
  }
  if (v45
  {
    int v19 = v46;
    if (v46) {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v20 = v18[66] != 0;
  }
  else
  {
    int v19 = 0;
    BOOL v20 = 0;
  }
  if (*(char *)(a1 + 199) < 0)
  {
    uint64_t v22 = *(void *)(a1 + 184);
    if (v22 != 1)
    {
      if (v22 == 2)
      {
        BOOL v21 = *v9;
        goto LABEL_49;
      }
LABEL_55:
      std::operator+<char>();
      int v24 = std::string::append(&v39, " ");
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      int v26 = *(char *)(a1 + 199);
      if (v26 >= 0) {
        uint64_t v27 = (const std::string::value_type *)(a1 + 176);
      }
      else {
        uint64_t v27 = *(const std::string::value_type **)(a1 + 176);
      }
      if (v26 >= 0) {
        std::string::size_type v28 = *(unsigned __int8 *)(a1 + 199);
      }
      else {
        std::string::size_type v28 = *(void *)(a1 + 184);
      }
      unint64_t v29 = std::string::append(&v40, v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      uint64_t v31 = std::string::append(&v41, " ");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      int v33 = *(char *)(a1 + 223);
      if (v33 >= 0) {
        unint64_t v34 = (const std::string::value_type *)(a1 + 200);
      }
      else {
        unint64_t v34 = *(const std::string::value_type **)(a1 + 200);
      }
      if (v33 >= 0) {
        std::string::size_type v35 = *(unsigned __int8 *)(a1 + 223);
      }
      else {
        std::string::size_type v35 = *(void *)(a1 + 208);
      }
      uint64_t v36 = std::string::append(&__p, v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      std::string::size_type v44 = v36->__r_.__value_.__r.__words[2];
      long long v43 = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&v43, 3u);
      if (SHIBYTE(v44) < 0) {
        operator delete((void *)v43);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      uint64_t v8 = 0;
      goto LABEL_78;
    }
    int v23 = **v9;
LABEL_53:
    if (v23 == 61)
    {
      uint64_t v8 = v8 ^ v20 ^ 1;
      goto LABEL_78;
    }
    goto LABEL_55;
  }
  if (*(unsigned char *)(a1 + 199) == 1)
  {
    int v23 = *(unsigned __int8 *)v9;
    goto LABEL_53;
  }
  BOOL v21 = (_WORD *)(a1 + 176);
  if (*(unsigned char *)(a1 + 199) != 2) {
    goto LABEL_55;
  }
LABEL_49:
  if (*v21 != 15649) {
    goto LABEL_55;
  }
  uint64_t v8 = v8 ^ v20;
LABEL_78:
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
LABEL_82:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v8;
}

void sub_1C5D43260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v37 - 73) < 0) {
    operator delete(*(void **)(v37 - 96));
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  std::string v39 = *(std::__shared_weak_count **)(v37 - 56);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ConditionExpression::EvaluateString(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  if (*(void *)a3
  {
    BOOL v7 = *(std::__shared_weak_count **)(a3 + 8);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v6[95] < 0) {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
    }
    else {
      std::string __str = *(std::string *)(v6 + 3);
    }
  }
  else
  {
    BOOL v7 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
  }
  memset(&v74, 0, sizeof(v74));
  if (*(char *)(a1 + 223) < 0)
  {
    if (!*(void *)(a1 + 208)) {
      goto LABEL_29;
    }
  }
  else if (!*(unsigned char *)(a1 + 223))
  {
    goto LABEL_29;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::ResolveValue(a2, (const void **)(a1 + 200), 1, (uint64_t)&v73, (uint64_t)&__p, (uint64_t *)&lpsrc);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (lpsrc.__r_.__value_.__r.__words[0]
  {
    std::string::size_type size = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    if (v8[95] < 0) {
      std::string::__init_copy_ctor_external(&v73, *((const std::string::value_type **)v8 + 9), *((void *)v8 + 10));
    }
    else {
      std::string v73 = *(std::string *)(v8 + 3);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v73, "");
    std::string::size_type size = 0;
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  std::string v74 = v73;
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  if (lpsrc.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
  }
LABEL_29:
  int v10 = (unsigned __int8 *)(a1 + 176);
  int v11 = *(unsigned __int8 *)(a1 + 199);
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
    uint64_t v12 = (uint64_t *)(a1 + 176);
    if (v11 != 11) {
      goto LABEL_38;
    }
LABEL_34:
    uint64_t v13 = *v12;
    uint64_t v14 = *(uint64_t *)((char *)v12 + 3);
    if (v13 == 0x616D5F7865676572 && v14 == 0x686374616D5F7865) {
      goto LABEL_43;
    }
    goto LABEL_38;
  }
  if (*(void *)(a1 + 184) == 11)
  {
    uint64_t v12 = *(uint64_t **)v10;
    goto LABEL_34;
  }
LABEL_38:
  siri::dialogengine::StringToLower((uint64_t)&__str, (uint64_t)&v73);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = v73;
  siri::dialogengine::StringToLower((uint64_t)&v74, (uint64_t)&v73);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  std::string v74 = v73;
  int v11 = *(unsigned __int8 *)(a1 + 199);
LABEL_43:
  if ((v11 & 0x80) == 0)
  {
    switch(v11)
    {
      case 0:
        goto LABEL_128;
      case 1:
        goto LABEL_45;
      case 2:
        goto LABEL_124;
      case 5:
        if (*(_DWORD *)v10 != 1953525093 || *(unsigned char *)(a1 + 180) != 121) {
          goto LABEL_126;
        }
        goto LABEL_108;
      case 8:
        switch(*(void *)v10)
        {
          case 0x7974706D656E6F6ELL:
            goto LABEL_128;
          case 0x736E6961746E6F63:
            goto LABEL_140;
          case 0x6874697773646E65:
            goto LABEL_190;
        }
        goto LABEL_126;
      case 10:
        if (*(void *)v10 != 0x6977737472617473 || *(_WORD *)(a1 + 184) != 26740) {
          goto LABEL_126;
        }
        goto LABEL_96;
      case 11:
        if (*(void *)v10 != 0x616D5F7865676572 || *(void *)(a1 + 179) != 0x686374616D5F7865) {
          goto LABEL_126;
        }
        goto LABEL_102;
      default:
        goto LABEL_126;
    }
  }
  uint64_t v17 = *(void *)(a1 + 184);
  if (v17 <= 7)
  {
    if (v17)
    {
      if (v17 == 5 && **(_DWORD **)v10 == 1953525093 && *(unsigned char *)(*(void *)v10 + 4) == 121)
      {
LABEL_108:
        std::string::size_type v37 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v37 = __str.__r_.__value_.__l.__size_;
        }
        BOOL v38 = v37 == 0;
        goto LABEL_111;
      }
      goto LABEL_63;
    }
LABEL_128:
    std::string::size_type v40 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v40 = __str.__r_.__value_.__l.__size_;
    }
    BOOL v41 = v40 == 0;
    goto LABEL_131;
  }
  if (v17 == 8)
  {
    switch(**(void **)v10)
    {
      case 0x7974706D656E6F6ELL:
        goto LABEL_128;
      case 0x736E6961746E6F63:
LABEL_140:
        uint64_t v34 = siri::dialogengine::StringContains(&__str.__r_.__value_.__l.__data_, (char *)&v74);
        goto LABEL_203;
      case 0x6874697773646E65:
LABEL_190:
        uint64_t v34 = siri::dialogengine::StringEndsWith(&__str, (unsigned __int8 *)&v74);
        goto LABEL_203;
    }
    if ((v11 & 0x80) == 0) {
      goto LABEL_122;
    }
  }
  else if (v17 == 10 && **(void **)v10 == 0x6977737472617473 && *(_WORD *)(*(void *)v10 + 8) == 26740)
  {
LABEL_96:
    uint64_t v34 = siri::dialogengine::StringStartsWith(&__str, (unsigned __int8 *)&v74);
    goto LABEL_203;
  }
LABEL_63:
  if (*(void *)(a1 + 184) == 11)
  {
    if (**(void **)v10 == 0x616D5F7865676572 && *(void *)(*(void *)v10 + 3) == 0x686374616D5F7865) {
LABEL_102:
    }
      siri::dialogengine::StringRegexMatch();
    if ((v11 & 0x80) == 0)
    {
LABEL_122:
      if (v11 == 1)
      {
LABEL_45:
        int v16 = *v10;
        if (v16 == 61) {
          goto LABEL_71;
        }
LABEL_46:
        if (v16 != 62) {
          goto LABEL_126;
        }
LABEL_169:
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v51 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v51 = v74.__r_.__value_.__l.__size_;
        }
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v52 = &v74;
        }
        else {
          unint64_t v52 = (std::string *)v74.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v53 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v53 = __str.__r_.__value_.__l.__size_;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (v53 >= v51) {
          size_t v55 = v51;
        }
        else {
          size_t v55 = v53;
        }
        int v56 = memcmp(v52, p_str, v55);
        if (v56) {
          BOOL v32 = v56 < 0;
        }
        else {
          BOOL v32 = v51 < v53;
        }
        goto LABEL_204;
      }
      if (v11 != 2) {
        goto LABEL_126;
      }
LABEL_124:
      std::string v39 = (_WORD *)(a1 + 176);
      if (*(_WORD *)v10 != 15649) {
        goto LABEL_125;
      }
      goto LABEL_149;
    }
  }
  if (*(void *)(a1 + 184) == 1)
  {
    if (**(unsigned char **)v10 == 61)
    {
LABEL_71:
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v21 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v21 = __str.__r_.__value_.__l.__size_;
      }
      std::string::size_type v22 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v22 = v74.__r_.__value_.__l.__size_;
      }
      if (v21 == v22)
      {
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v23 = &v74;
        }
        else {
          int v23 = (std::string *)v74.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
          {
            uint64_t v24 = HIBYTE(__str.__r_.__value_.__r.__words[2]) - 1;
            long long v25 = &__str;
            do
            {
              int v27 = v25->__r_.__value_.__s.__data_[0];
              long long v25 = (std::string *)((char *)v25 + 1);
              int v26 = v27;
              int v29 = v23->__r_.__value_.__s.__data_[0];
              int v23 = (std::string *)((char *)v23 + 1);
              int v28 = v29;
              BOOL v31 = v24-- != 0;
              BOOL v32 = v26 == v28;
            }
            while (v26 == v28 && v31);
            goto LABEL_204;
          }
LABEL_187:
          BOOL v32 = 1;
          goto LABEL_204;
        }
        BOOL v38 = memcmp(__str.__r_.__value_.__l.__data_, v23, __str.__r_.__value_.__l.__size_) == 0;
LABEL_111:
        BOOL v32 = v38;
        goto LABEL_204;
      }
LABEL_225:
      BOOL v32 = 0;
      goto LABEL_204;
    }
    if ((v11 & 0x80) == 0) {
      goto LABEL_146;
    }
  }
  if (*(void *)(a1 + 184) != 2)
  {
LABEL_167:
    if (*(void *)(a1 + 184) == 1)
    {
      if (**(unsigned char **)v10 == 62) {
        goto LABEL_169;
      }
      if ((v11 & 0x80) == 0) {
        goto LABEL_126;
      }
    }
    if (*(void *)(a1 + 184) != 2) {
      goto LABEL_126;
    }
    std::string v39 = *(_WORD **)v10;
    goto LABEL_125;
  }
  if (**(_WORD **)v10 != 15649)
  {
    if ((v11 & 0x80) == 0)
    {
LABEL_146:
      if (v11 != 1)
      {
        std::string v39 = (_WORD *)(a1 + 176);
        if (v11 != 2)
        {
LABEL_126:
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 176), "<"))
          {
            uint64_t v34 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&__str, &v74);
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 176), "<="))
          {
            uint64_t v34 = std::operator<=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v74.__r_.__value_.__l.__data_);
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 176), "ver_eq"))
          {
            uint64_t v34 = siri::dialogengine::VersionEqual((unsigned __int8 *)&__str, (unsigned __int8 *)&v74);
          }
          else
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 176), "ver_ne"))
            {
              BOOL v32 = !siri::dialogengine::VersionEqual((unsigned __int8 *)&__str, (unsigned __int8 *)&v74);
              goto LABEL_204;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 176), "ver_gt"))
            {
              uint64_t v34 = siri::dialogengine::VersionGreaterThan((uint64_t)&__str, (uint64_t)&v74);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 176), "ver_ge"))
            {
              uint64_t v34 = siri::dialogengine::VersionGreaterThanOrEqual((unsigned __int8 *)&__str, (unsigned __int8 *)&v74);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 176), "ver_lt"))
            {
              uint64_t v34 = siri::dialogengine::VersionLessThan((unsigned __int8 *)&__str, (unsigned __int8 *)&v74);
            }
            else
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 176), "ver_le"))
              {
                std::operator+<char>();
                std::string v58 = std::string::append(&v70, "' for expression '");
                long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
                lpsrc.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
                *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v59;
                v58->__r_.__value_.__l.__size_ = 0;
                v58->__r_.__value_.__r.__words[2] = 0;
                v58->__r_.__value_.__r.__words[0] = 0;
                char v62 = *(const std::string::value_type **)(a1 + 152);
                uint64_t v61 = a1 + 152;
                uint64_t v60 = v62;
                int v63 = *(char *)(v61 + 23);
                if (v63 >= 0) {
                  char v64 = (const std::string::value_type *)v61;
                }
                else {
                  char v64 = v60;
                }
                if (v63 >= 0) {
                  std::string::size_type v65 = *(unsigned __int8 *)(v61 + 23);
                }
                else {
                  std::string::size_type v65 = *(void *)(v61 + 8);
                }
                char v66 = std::string::append(&lpsrc, v64, v65);
                long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v67;
                v66->__r_.__value_.__l.__size_ = 0;
                v66->__r_.__value_.__r.__words[2] = 0;
                v66->__r_.__value_.__r.__words[0] = 0;
                unint64_t v68 = std::string::append(&__p, "'");
                long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
                v73.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v69;
                v68->__r_.__value_.__l.__size_ = 0;
                v68->__r_.__value_.__r.__words[2] = 0;
                v68->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Log::LogWithLevel((uint64_t)&v73, 3u);
                if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v73.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(lpsrc.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v70.__r_.__value_.__l.__data_);
                }
                goto LABEL_225;
              }
              uint64_t v34 = siri::dialogengine::VersionLessThanOrEqual((unsigned __int8 *)&__str, (unsigned __int8 *)&v74);
            }
          }
LABEL_203:
          BOOL v32 = v34;
          goto LABEL_204;
        }
LABEL_125:
        if (*v39 == 15678)
        {
          uint64_t v34 = std::operator>=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__str, &v74);
          goto LABEL_203;
        }
        goto LABEL_126;
      }
      int v16 = *v10;
      goto LABEL_46;
    }
    goto LABEL_167;
  }
LABEL_149:
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v42 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v42 = __str.__r_.__value_.__l.__size_;
  }
  std::string::size_type v43 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v43 = v74.__r_.__value_.__l.__size_;
  }
  if (v42 != v43) {
    goto LABEL_187;
  }
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = &v74;
  }
  else {
    std::string::size_type v44 = (std::string *)v74.__r_.__value_.__r.__words[0];
  }
  if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    BOOL v41 = memcmp(__str.__r_.__value_.__l.__data_, v44, __str.__r_.__value_.__l.__size_) == 0;
LABEL_131:
    BOOL v32 = !v41;
    goto LABEL_204;
  }
  if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
    goto LABEL_225;
  }
  uint64_t v45 = HIBYTE(__str.__r_.__value_.__r.__words[2]) - 1;
  long long v46 = &__str;
  do
  {
    int v48 = v46->__r_.__value_.__s.__data_[0];
    long long v46 = (std::string *)((char *)v46 + 1);
    int v47 = v48;
    int v49 = v44->__r_.__value_.__s.__data_[0];
    std::string::size_type v44 = (std::string *)((char *)v44 + 1);
    BOOL v32 = v47 != v49;
  }
  while (v47 == v49 && v45-- != 0);
LABEL_204:
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v32;
}

void sub_1C5D43D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v36 - 73) < 0) {
    operator delete(*(void **)(v36 - 96));
  }
  if (*(char *)(v36 - 41) < 0) {
    operator delete(*(void **)(v36 - 64));
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::ConditionExpression::EvaluateNumber(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  double v5 = 0.0;
  if (*(void *)a3
  {
    uint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v5 = v7[9];
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (*(char *)(a1 + 223) < 0)
  {
    if (*(void *)(a1 + 208)) {
      goto LABEL_9;
    }
LABEL_18:
    double v9 = 0.0;
    goto LABEL_22;
  }
  if (!*(unsigned char *)(a1 + 223)) {
    goto LABEL_18;
  }
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(&v44, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::ResolveValue(a2, (const void **)(a1 + 200), 1, (uint64_t)&v44, (uint64_t)&__p, (uint64_t *)&lpsrc);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete((void *)v44);
  }
  double v9 = 0.0;
  if (lpsrc.__r_.__value_.__r.__words[0])
  {
    if (v10)
    {
      std::string::size_type size = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        double v9 = v10[9];
        std::__shared_weak_count::__release_shared[abi:ne180100](size);
      }
      else
      {
        double v9 = v10[9];
      }
    }
  }
  if (lpsrc.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
  }
LABEL_22:
  uint64_t v12 = (unsigned __int8 *)(a1 + 176);
  int v13 = *(unsigned __int8 *)(a1 + 199);
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
    uint64_t v14 = (int *)(a1 + 176);
    switch(*(unsigned char *)(a1 + 199))
    {
      case 0:
        goto LABEL_45;
      case 1:
        int v15 = *v12;
        switch(v15)
        {
          case '<':
            goto LABEL_112;
          case '>':
            goto LABEL_54;
          case '=':
            goto LABEL_72;
        }
        goto LABEL_85;
      case 2:
        switch(*(_WORD *)v12)
        {
          case 0x3D21:
            goto LABEL_68;
          case 0x3D3E:
            goto LABEL_105;
          case 0x3D3C:
            goto LABEL_58;
        }
        goto LABEL_85;
      case 6:
        goto LABEL_46;
      case 7:
        goto LABEL_81;
      case 0xE:
        if (*(void *)v12 != 0x69746C756D5F7369 || *(void *)(a1 + 182) != 0x666F5F656C706974) {
          goto LABEL_85;
        }
        goto LABEL_64;
      default:
        goto LABEL_85;
    }
  }
  uint64_t v16 = *(void *)(a1 + 184);
  switch(v16)
  {
    case 0:
LABEL_45:
      BOOL v18 = v5 == 0.0;
      goto LABEL_69;
    case 1:
      int v20 = **(unsigned __int8 **)v12;
      if (v20 == 61)
      {
LABEL_72:
        BOOL v23 = v5 == v9;
        goto LABEL_108;
      }
      if (v20 == 62)
      {
LABEL_54:
        uint64_t v21 = v5 > v9;
        goto LABEL_100;
      }
      if (**(unsigned char **)v12 == 60)
      {
LABEL_112:
        uint64_t v21 = v5 < v9;
        goto LABEL_100;
      }
      if ((v13 & 0x80) == 0) {
        goto LABEL_85;
      }
      break;
    case 2:
      if (**(_WORD **)v12 != 15649)
      {
        if (**(_WORD **)v12 == 15678)
        {
LABEL_105:
          uint64_t v21 = v5 >= v9;
          goto LABEL_100;
        }
        break;
      }
LABEL_68:
      BOOL v18 = v5 == v9;
LABEL_69:
      uint64_t v21 = !v18;
      goto LABEL_100;
  }
  if (*(void *)(a1 + 184) == 2)
  {
    if (**(_WORD **)v12 == 15676)
    {
LABEL_58:
      uint64_t v21 = v5 <= v9;
      goto LABEL_100;
    }
    if ((v13 & 0x80) == 0) {
      goto LABEL_85;
    }
  }
  if (*(void *)(a1 + 184) != 14) {
    goto LABEL_78;
  }
  if (**(void **)v12 == 0x69746C756D5F7369 && *(void *)(*(void *)v12 + 6) == 0x666F5F656C706974)
  {
LABEL_64:
    if (v9 != 0.0 && v5 == (double)(int)v5 && v9 == (double)(int)v9)
    {
      BOOL v23 = (int)v5 % (int)v9 == 0;
      goto LABEL_108;
    }
LABEL_99:
    uint64_t v21 = 0;
    goto LABEL_100;
  }
  if ((v13 & 0x80) != 0)
  {
LABEL_78:
    if (*(void *)(a1 + 184) != 6) {
      goto LABEL_79;
    }
    if (**(_DWORD **)v12 == 1868526441 && *(_WORD *)(*(void *)v12 + 4) == 25700) {
      goto LABEL_103;
    }
    if ((v13 & 0x80) != 0)
    {
LABEL_79:
      if (*(void *)(a1 + 184) == 7)
      {
        uint64_t v14 = *(int **)v12;
        goto LABEL_81;
      }
    }
LABEL_85:
    std::operator+<char>();
    int v28 = std::string::append(&v41, "' for expression '");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    lpsrc.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    BOOL v32 = *(const std::string::value_type **)(a1 + 152);
    uint64_t v31 = a1 + 152;
    long long v30 = v32;
    int v33 = *(char *)(v31 + 23);
    if (v33 >= 0) {
      uint64_t v34 = (const std::string::value_type *)v31;
    }
    else {
      uint64_t v34 = v30;
    }
    if (v33 >= 0) {
      std::string::size_type v35 = *(unsigned __int8 *)(v31 + 23);
    }
    else {
      std::string::size_type v35 = *(void *)(v31 + 8);
    }
    uint64_t v36 = std::string::append(&lpsrc, v34, v35);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    BOOL v38 = std::string::append(&__p, "'");
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    std::string::size_type v45 = v38->__r_.__value_.__r.__words[2];
    long long v44 = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v44, 3u);
    if (SHIBYTE(v45) < 0) {
      operator delete((void *)v44);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    goto LABEL_99;
  }
  if (v13 == 6)
  {
LABEL_46:
    if (*(_DWORD *)v12 != 1868526441 || *(_WORD *)(a1 + 180) != 25700) {
      goto LABEL_85;
    }
LABEL_103:
    if (v5 == (double)(int)v5)
    {
      uint64_t v21 = (int)v5 & 1;
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  uint64_t v14 = (int *)(a1 + 176);
  if (v13 != 7) {
    goto LABEL_85;
  }
LABEL_81:
  int v25 = *v14;
  int v26 = *(int *)((char *)v14 + 3);
  if (v25 != 1700754281 || v26 != 1852143205) {
    goto LABEL_85;
  }
  if (v5 != (double)(int)v5) {
    goto LABEL_99;
  }
  BOOL v23 = ((int)v5 & 1) == 0;
LABEL_108:
  uint64_t v21 = v23;
LABEL_100:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v21;
}

void sub_1C5D44458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ConditionExpression::EvaluateDialogCalendar(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  int v6 = (unsigned __int8 *)(a1 + 176);
  if (*(char *)(a1 + 199) < 0)
  {
    unint64_t v7 = *(void *)(a1 + 184);
    if (v7 != 10) {
      goto LABEL_22;
    }
    if (**(void **)v6 != 0x64696C6F685F7369 || *(_WORD *)(*(void *)v6 + 8) != 31073) {
      goto LABEL_83;
    }
  }
  else
  {
    unint64_t v7 = *(unsigned __int8 *)(a1 + 199);
    if (v7 != 10
      || (*(void *)v6 == 0x64696C6F685F7369 ? (BOOL v8 = *(unsigned __int16 *)(a1 + 184) == 31073) : (BOOL v8 = 0), !v8))
    {
LABEL_22:
      if (v7 > 2) {
        goto LABEL_83;
      }
      double CalendarSecsUTC = siri::dialogengine::GetCalendarSecsUTC(a2, (std::string *)(a1 + 152));
      double v14 = siri::dialogengine::GetCalendarSecsUTC(a2, (std::string *)(a1 + 200));
      int v15 = *(unsigned __int8 *)(a1 + 199);
      if ((v15 & 0x80) == 0)
      {
        if (v15 != 1)
        {
          if (v15 == 2)
          {
            if (*(_WORD *)v6 != 15649)
            {
              if (*(_WORD *)v6 == 15678) {
                return CalendarSecsUTC >= v14;
              }
              goto LABEL_82;
            }
            return CalendarSecsUTC != v14;
          }
LABEL_83:
          std::string::basic_string[abi:ne180100]<0>(&v47, "");
          std::string::basic_string[abi:ne180100]<0>(&v53, "");
          siri::dialogengine::ResolveValue(a2, (const void **)(a1 + 152), 1, (uint64_t)&v47, (uint64_t)&v53, &v45);
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)siri::dialogengine::TYPE_DIALOG_CALENDAR);
          uint64_t IsHoliday = siri::dialogengine::ConditionExpression::EvaluateOther(a1, v32, &v45, (uint64_t)__p);
          if (v50 < 0) {
            operator delete(__p[0]);
          }
          if (v46) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v46);
          }
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v53.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v47.__r_.__value_.__l.__data_);
          }
          return IsHoliday;
        }
        int v18 = *v6;
        if (v18 != 62)
        {
          if (v18 != 61) {
            goto LABEL_40;
          }
          return CalendarSecsUTC == v14;
        }
        return CalendarSecsUTC > v14;
      }
      uint64_t v16 = *(void *)(a1 + 184);
      if (v16 == 1)
      {
        int v19 = **(unsigned __int8 **)v6;
        if (v19 == 61) {
          return CalendarSecsUTC == v14;
        }
        if (v19 == 62) {
          return CalendarSecsUTC > v14;
        }
      }
      else if (v16 == 2)
      {
        if (**(_WORD **)v6 == 15649) {
          return CalendarSecsUTC != v14;
        }
        if (**(_WORD **)v6 == 15678) {
          return CalendarSecsUTC >= v14;
        }
        if ((v15 & 0x80) == 0)
        {
          if (v15 == 1)
          {
            int v18 = *v6;
LABEL_40:
            if (v18 != 60) {
              goto LABEL_83;
            }
            return CalendarSecsUTC < v14;
          }
          if (v15 != 2) {
            goto LABEL_83;
          }
LABEL_82:
          uint64_t IsHoliday = CalendarSecsUTC <= v14;
          if (*(_WORD *)v6 == 15676) {
            return IsHoliday;
          }
          goto LABEL_83;
        }
      }
      if (*(void *)(a1 + 184) == 1)
      {
        if (**(unsigned char **)v6 == 60) {
          return CalendarSecsUTC < v14;
        }
        if ((v15 & 0x80) == 0) {
          goto LABEL_83;
        }
      }
      if (*(void *)(a1 + 184) != 2) {
        goto LABEL_83;
      }
      int v6 = *(unsigned __int8 **)v6;
      goto LABEL_82;
    }
  }
  if (!*(void *)a3) {
    return 0;
  }
  if (!v10) {
    return 0;
  }
  int v11 = v10;
  uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v53, 0, sizeof(v53));
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 223)) {
      goto LABEL_77;
    }
LABEL_51:
    std::string::basic_string[abi:ne180100]<0>(&v47, "");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    siri::dialogengine::ResolveValue(a2, (const void **)(a1 + 200), 1, (uint64_t)&v47, (uint64_t)__p, (uint64_t *)&lpsrc);
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (lpsrc
    {
      uint64_t v21 = v52;
      if (v52) {
        atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v20[95] < 0) {
        std::string::__init_copy_ctor_external(&v47, *((const std::string::value_type **)v20 + 9), *((void *)v20 + 10));
      }
      else {
        std::string v47 = *(std::string *)(v20 + 3);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v47, "");
      uint64_t v21 = 0;
    }
    std::string v53 = v47;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v47.__r_.__value_.__l.__size_;
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    if (!size) {
      goto LABEL_77;
    }
    std::string::basic_string[abi:ne180100]<0>(&v47, "secs");
    uint64_t v23 = (uint64_t)(v11 + 72);
    uint64_t v24 = std::__tree<std::string>::find<std::string>((uint64_t)(v11 + 72), (const void **)&v47.__r_.__value_.__l.__data_);
    int v25 = v11 + 80;
    if (v11 + 80 == (char *)v24)
    {
      uint64_t v34 = 0;
      long long v30 = 0;
    }
    else
    {
      uint64_t v26 = v24;
      int v27 = *(const void **)(v24 + 56);
      int v28 = *(std::__shared_weak_count **)(v26 + 64);
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v27
      {
        uint64_t v31 = 0;
        long long v30 = 0;
        uint64_t v34 = 0;
        if (!v28) {
          goto LABEL_95;
        }
        goto LABEL_93;
      }
      long long v30 = v29;
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v31 = v28;
LABEL_93:
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        uint64_t v34 = v31;
        goto LABEL_95;
      }
      uint64_t v34 = 0;
    }
LABEL_95:
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v47, "secsSinceEpoch");
    uint64_t v35 = std::__tree<std::string>::find<std::string>(v23, (const void **)&v47.__r_.__value_.__l.__data_);
    if (v25 == (char *)v35)
    {
      std::string::size_type v42 = 0;
      std::string::size_type v40 = 0;
      goto LABEL_107;
    }
    uint64_t v36 = v35;
    long long v37 = *(const void **)(v35 + 56);
    BOOL v38 = *(std::__shared_weak_count **)(v36 + 64);
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v37
    {
      std::string::size_type v40 = v39;
      if (!v38)
      {
        std::string::size_type v42 = 0;
        goto LABEL_107;
      }
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      std::string v41 = v38;
    }
    else
    {
      std::string v41 = 0;
      std::string::size_type v40 = 0;
      std::string::size_type v42 = 0;
      if (!v38)
      {
LABEL_107:
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v47.__r_.__value_.__l.__data_);
        }
        if (v30)
        {
          if (v40) {
            double v43 = v40[9];
          }
          else {
            double v43 = 0.0;
          }
          double v44 = v30[9];
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          siri::dialogengine::GetICUTimeStamp((uint64_t)v44, (int)v43, (uint64_t)__p, &v47);
          if (v50 < 0) {
            operator delete(__p[0]);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "default");
          uint64_t IsHoliday = siri::dialogengine::DateIsHoliday((int64_t *)&v47, (uint64_t)&v53, (uint64_t)__p);
          if (v50 < 0) {
            operator delete(__p[0]);
          }
          if (v48 < 0) {
            operator delete((void *)v47.__r_.__value_.__l.__size_);
          }
        }
        else
        {
          uint64_t IsHoliday = 0;
        }
        if (v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v42);
        }
        if (v34) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        }
        goto LABEL_125;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    std::string::size_type v42 = v41;
    goto LABEL_107;
  }
  if (*(void *)(a1 + 208)) {
    goto LABEL_51;
  }
LABEL_77:
  uint64_t IsHoliday = 0;
LABEL_125:
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return IsHoliday;
}

void sub_1C5D44C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::__shared_weak_count *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::ConditionExpression::EvaluateArray(uint64_t a1, uint64_t **a2, const void **a3)
{
  {
    operator new();
  }
  double v5 = (std::once_flag::_State_type *)siri::dialogengine::ArrayOpStringToEnum(std::string const&)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::ArrayOpStringToEnum(std::string const&)::flag, memory_order_acquire) != -1)
  {
    v54[0] = &v49;
    v52[0] = v54;
    std::__call_once(v5, v52, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ArrayOpStringToEnum(std::string const&)::$_0 &&>>);
  }
  int v6 = (void *)siri::dialogengine::ArrayOpStringToEnum(std::string const&)::sMap;
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](siri::dialogengine::ArrayOpStringToEnum(std::string const&)::sMap + 24, a1 + 176);
  int8x8_t v8 = (int8x8_t)v6[1];
  if (!*(void *)&v8) {
    goto LABEL_23;
  }
  unint64_t v9 = v7;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  unint64_t v11 = v10.u32[0];
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v12 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v12 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v12 = (*(void *)&v8 - 1) & v7;
  }
  int v13 = *(unsigned __int8 ***)(*v6 + 8 * v12);
  if (!v13 || (double v14 = *v13) == 0)
  {
LABEL_23:
    std::string::basic_string[abi:ne180100]<0>(v54, "");
    std::string::basic_string[abi:ne180100]<0>(v52, "");
    siri::dialogengine::ResolveValue(a2, (const void **)(a1 + 152), 1, (uint64_t)v54, (uint64_t)v52, &v56);
    std::string::basic_string[abi:ne180100]<0>(&v49, (char *)siri::dialogengine::TYPE_ARRAY);
    uint64_t v19 = siri::dialogengine::ConditionExpression::EvaluateOther(a1, v18, &v56, (uint64_t)&v49);
    if (v51 < 0) {
      operator delete(v49);
    }
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    if (v53 < 0) {
      operator delete(v52[0]);
    }
    if (v55 < 0) {
      operator delete(v54[0]);
    }
    return v19;
  }
  uint64_t v15 = (uint64_t)(v6 + 4);
  while (1)
  {
    unint64_t v16 = *((void *)v14 + 1);
    if (v9 == v16) {
      break;
    }
    if (v11 > 1)
    {
      if (v16 >= *(void *)&v8) {
        v16 %= *(void *)&v8;
      }
    }
    else
    {
      v16 &= *(void *)&v8 - 1;
    }
    if (v16 != v12) {
      goto LABEL_23;
    }
LABEL_20:
    double v14 = *(unsigned __int8 **)v14;
    if (!v14) {
      goto LABEL_23;
    }
  }
  if ((std::equal_to<std::string>::operator()[abi:ne180100](v15, v14 + 16, (unsigned __int8 *)(a1 + 176)) & 1) == 0) {
    goto LABEL_20;
  }
  int v17 = *((_DWORD *)v14 + 10);
  if (v17 == 18) {
    goto LABEL_23;
  }
  if (!*a3) {
    return 0;
  }
  if (!v21) {
    return 0;
  }
  std::string::size_type v22 = v21;
  uint64_t v23 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(v54, "dialog.Array");
  BOOL IsBinaryOperator = siri::dialogengine::IsBinaryOperator(v23, (unsigned __int8 *)(a1 + 176));
  if (v55 < 0) {
    operator delete(v54[0]);
  }
  if (!IsBinaryOperator)
  {
    uint64_t v27 = 0;
    int v28 = 0;
    goto LABEL_46;
  }
  if (!(*(char *)(a1 + 223) < 0 ? *(void *)(a1 + 208) : *(unsigned __int8 *)(a1 + 223))) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v54, "");
  std::string::basic_string[abi:ne180100]<0>(v52, "");
  siri::dialogengine::ResolveValue(a2, (const void **)(a1 + 200), 1, (uint64_t)v54, (uint64_t)v52, (uint64_t *)&v49);
  uint64_t v27 = (uint64_t)v49;
  int v28 = v50;
  int v49 = 0;
  char v50 = 0;
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (v55 < 0) {
    operator delete(v54[0]);
  }
LABEL_46:
  switch(v17)
  {
    case 0:
      v47[0] = v27;
      v47[1] = (uint64_t)v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AllEqual(v22, (siri::dialogengine::Context *)a2, v47);
      goto LABEL_104;
    case 1:
      v46[0] = v27;
      v46[1] = (uint64_t)v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AllGreaterThan(v22, (siri::dialogengine::Context *)a2, v46);
      goto LABEL_104;
    case 2:
      v40[0] = v27;
      v40[1] = (uint64_t)v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AllGreaterThanOrEqual(v22, (siri::dialogengine::Context *)a2, v40);
      goto LABEL_104;
    case 3:
      v44[0] = v27;
      v44[1] = (uint64_t)v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AllLessThan(v22, (siri::dialogengine::Context *)a2, v44);
      goto LABEL_104;
    case 4:
      v42[0] = v27;
      v42[1] = (uint64_t)v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AllLessThanOrEqual(v22, (siri::dialogengine::Context *)a2, v42);
      goto LABEL_104;
    case 5:
      v45[0] = v27;
      v45[1] = (uint64_t)v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AnyGreaterThan(v22, (siri::dialogengine::Context *)a2, v45);
      goto LABEL_104;
    case 6:
      v39[0] = v27;
      v39[1] = (uint64_t)v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AnyGreaterThanOrEqual(v22, (siri::dialogengine::Context *)a2, v39);
      goto LABEL_104;
    case 7:
      v43[0] = v27;
      v43[1] = (uint64_t)v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AnyLessThan(v22, (siri::dialogengine::Context *)a2, v43);
      goto LABEL_104;
    case 8:
      v41[0] = v27;
      v41[1] = (uint64_t)v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AnyLessThanOrEqual(v22, (siri::dialogengine::Context *)a2, v41);
      goto LABEL_104;
    case 9:
      v48[0] = v27;
      v48[1] = (uint64_t)v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::Contains(v22, (siri::dialogengine::Context *)a2, v48);
      goto LABEL_104;
    case 10:
      v36[0] = v27;
      v36[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AllUnset(v22, (siri::dialogengine::Context *)a2, (uint64_t)v36);
      goto LABEL_104;
    case 11:
      v35[0] = v27;
      v35[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AnyUnset(v22, (siri::dialogengine::Context *)a2, (uint64_t)v35);
      goto LABEL_104;
    case 12:
      v38[0] = v27;
      v38[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AllSet(v22, (siri::dialogengine::Context *)a2, (uint64_t)v38);
      goto LABEL_104;
    case 13:
      v37[0] = v27;
      v37[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AnySet(v22, (siri::dialogengine::Context *)a2, (uint64_t)v37);
      goto LABEL_104;
    case 14:
      v33[0] = v27;
      v33[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AnyEmpty(v22, (siri::dialogengine::Context *)a2, (uint64_t)v33);
      goto LABEL_104;
    case 15:
      v34[0] = v27;
      v34[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AllEmpty(v22, (siri::dialogengine::Context *)a2, (uint64_t)v34);
      goto LABEL_104;
    case 16:
      v31[0] = v27;
      v31[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AnyNonEmpty(v22, (siri::dialogengine::Context *)a2, (uint64_t)v31);
      goto LABEL_104;
    case 17:
      v32[0] = v27;
      v32[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = siri::dialogengine::VariableArray::AllNonEmpty(v22, (siri::dialogengine::Context *)a2, (uint64_t)v32);
LABEL_104:
      uint64_t v19 = v29;
      if (!v28) {
        return v19;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
LABEL_106:
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      break;
    default:
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Unknown operator for dialog.Array.", v24);
      uint64_t v19 = 0;
      if (!v28) {
        return v19;
      }
      goto LABEL_106;
  }
  return v19;
}

void sub_1C5D45474(_Unwind_Exception *a1)
{
}

uint64_t siri::dialogengine::ConditionExpression::EvaluateOther(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v6 = (void **)(a1 + 176);
  if (*(char *)(a1 + 199) < 0)
  {
    uint64_t v10 = *(void *)(a1 + 184);
    if (!v10) {
      goto LABEL_11;
    }
    if (v10 != 5)
    {
      if (v10 == 8)
      {
        unint64_t v9 = (void *)**v6;
LABEL_10:
        if (v9 == (void *)0x7974706D656E6F6ELL)
        {
LABEL_11:
          uint64_t result = *a3;
          if (*a3) {
            return (*(unsigned int (**)(uint64_t, void **))(*(void *)result + 32))(result, v6) ^ 1;
          }
          return result;
        }
      }
LABEL_18:
      std::operator+<char>();
      uint64_t v15 = std::string::append(&v35, "' for expression '");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = *(const std::string::value_type **)(a1 + 152);
      uint64_t v18 = a1 + 152;
      int v17 = v19;
      int v20 = *(char *)(v18 + 23);
      if (v20 >= 0) {
        uint64_t v21 = (const std::string::value_type *)v18;
      }
      else {
        uint64_t v21 = v17;
      }
      if (v20 >= 0) {
        std::string::size_type v22 = *(unsigned __int8 *)(v18 + 23);
      }
      else {
        std::string::size_type v22 = *(void *)(v18 + 8);
      }
      uint64_t v23 = std::string::append(&v36, v21, v22);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      int v25 = std::string::append(&v37, "' for type '");
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      int v27 = *(char *)(a4 + 23);
      if (v27 >= 0) {
        int v28 = (const std::string::value_type *)a4;
      }
      else {
        int v28 = *(const std::string::value_type **)a4;
      }
      if (v27 >= 0) {
        std::string::size_type v29 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        std::string::size_type v29 = *(void *)(a4 + 8);
      }
      long long v30 = std::string::append(&v38, v28, v29);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      uint64_t v32 = std::string::append(&v39, "'");
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      std::string::size_type v41 = v32->__r_.__value_.__r.__words[2];
      long long v40 = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&v40, 3u);
      if (SHIBYTE(v41) < 0) {
        operator delete((void *)v40);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      return 0;
    }
    int8x8_t v8 = *v6;
  }
  else
  {
    int v7 = *(unsigned __int8 *)(a1 + 199);
    if (!*(unsigned char *)(a1 + 199)) {
      goto LABEL_11;
    }
    int8x8_t v8 = (void *)(a1 + 176);
    if (v7 != 5)
    {
      if (v7 == 8)
      {
        unint64_t v9 = *v6;
        goto LABEL_10;
      }
      goto LABEL_18;
    }
  }
  int v12 = *(_DWORD *)v8;
  int v13 = *((unsigned __int8 *)v8 + 4);
  if (v12 != 1953525093 || v13 != 121) {
    goto LABEL_18;
  }
  if (!*a3) {
    return 1;
  }
  uint64_t v34 = *(uint64_t (**)(void))(*(void *)*a3 + 32);
  return v34();
}

void sub_1C5D4585C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 25) < 0) {
    operator delete(*(void **)(v35 - 48));
  }
  if (*(char *)(v35 - 57) < 0) {
    operator delete(*(void **)(v35 - 80));
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::IsBinaryOperator(unsigned __int8 *a1, unsigned __int8 *a2)
{
  {
    operator new();
  }
  unint64_t v4 = (std::once_flag::_State_type *)siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::flag, memory_order_acquire) != -1)
  {
    uint64_t v10 = &v8;
    unint64_t v9 = &v10;
    std::__call_once(v4, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::$_0 &&>>);
  }
  double v5 = std::__hash_table<std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>>>::find<std::string>((void *)siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::sBinaryOperators, a1);
  if (v5) {
    int v6 = v5 + 40;
  }
  else {
    int v6 = (void *)siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::sBinaryOtherOperators;
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v6, a2) != 0;
}

void sub_1C5D459E4(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5D46160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v56 + 24);
  if (*(char *)(v57 - 97) < 0) {
    operator delete(*(void **)(v57 - 120));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a10);
  uint64_t v59 = 0;
  while (1)
  {
    if (*(&a56 + v59) < 0) {
      operator delete(*(void **)((char *)&a51 + v59));
    }
    v59 -= 24;
    if (v59 == -240)
    {
      if (a20 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_1C5D46490(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::unordered_set<std::string> const>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[1], a3);
  return this;
}

void sub_1C5D46504(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string> const>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string> const>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  long long v16 = (void *)(a1 + 16);
  int v17 = (char *)operator new(0x50uLL);
  uint64_t v18 = v17;
  v40[0] = (uint64_t)v17;
  v40[1] = a1 + 16;
  char v41 = 0;
  *(void *)int v17 = 0;
  *((void *)v17 + 1) = v9;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v17 + 16), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v17 + 1) = *(_OWORD *)a3;
    *((void *)v17 + 4) = *(void *)(a3 + 16);
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)(v18 + 40), a3 + 24);
  char v41 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if (*(void *)&prime > v10) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v25 = operator new(8 * *(void *)&prime);
          long long v26 = *(void **)a1;
          *(void *)a1 = v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          int v28 = (void *)*v16;
          if (*v16)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v29) = v16;
            uint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v35))
                  {
                    *(void *)(*(void *)a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *int v28 = *v34;
                  *uint64_t v34 = **(void **)(*(void *)a1 + 8 * v35);
                  **(void **)(*(void *)a1 + 8 * v35) = v34;
                  uint64_t v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_58:
                int v28 = v34;
                uint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        std::string v39 = *(void **)a1;
        *(void *)a1 = 0;
        if (v39) {
          operator delete(v39);
        }
        unint64_t v10 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  std::string v36 = *(uint64_t **)(*(void *)a1 + 8 * v3);
  uint64_t v37 = v40[0];
  if (v36)
  {
    *(void *)v40[0] = *v36;
LABEL_75:
    uint64_t *v36 = v37;
    goto LABEL_76;
  }
  *(void *)v40[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v37;
  *(void *)(*(void *)a1 + 8 * v3) = v16;
  if (*(void *)v37)
  {
    unint64_t v38 = *(void *)(*(void *)v37 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v38 >= v10) {
        v38 %= v10;
      }
    }
    else
    {
      v38 &= v10 - 1;
    }
    std::string v36 = (uint64_t *)(*(void *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v40[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,void *>>>>::reset[abi:ne180100](v40);
}

void sub_1C5D46980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16))
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 40);
      if (*(char *)(v1 + 39) < 0) {
        operator delete(*(void **)(v1 + 16));
      }
    }
    operator delete((void *)v1);
  }
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1C5D46A78(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ArrayOpStringToEnum(std::string const&)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5D47184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  while (1)
  {
    if (*((char *)v12 - 9) < 0) {
      operator delete(*(v12 - 4));
    }
    v12 -= 4;
    if (v12 == (void **)&a11)
    {
      MEMORY[0x1C8796D70](v11, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,siri::dialogengine::ArrayOperators>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,siri::dialogengine::ArrayOperators>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,siri::dialogengine::ArrayOperators>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,siri::dialogengine::ArrayOperators>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,siri::dialogengine::ArrayOperators>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

double siri::dialogengine::GetCalendarSecsUTC(uint64_t **a1, std::string *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::ResolveValue(a1, (const void **)&a2->__r_.__value_.__l.__data_, 1, (uint64_t)&v17, (uint64_t)__p, (uint64_t *)&lpsrc);
  if (!lpsrc)
  {
    unint64_t v4 = 0;
    goto LABEL_6;
  }
  if (!v4)
  {
LABEL_6:
    long long v5 = 0;
    goto LABEL_7;
  }
  long long v5 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0)
  {
    operator delete(v17);
    if (v4)
    {
LABEL_13:
      std::string::basic_string[abi:ne180100]<0>(&v17, "secs");
      uint64_t v6 = std::__tree<std::string>::find<std::string>((uint64_t)(v4 + 72), (const void **)&v17);
      if (v4 + 80 == (char *)v6)
      {
        unint64_t v15 = 0;
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v7 = v6;
        unint64_t v8 = *(const void **)(v6 + 56);
        unint64_t v9 = *(std::__shared_weak_count **)(v7 + 64);
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v8
        {
          unint64_t v12 = 0;
          uint64_t v11 = 0;
          unint64_t v15 = 0;
          if (!v9) {
            goto LABEL_30;
          }
          goto LABEL_28;
        }
        uint64_t v11 = v10;
        if (v9)
        {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v12 = v9;
LABEL_28:
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          unint64_t v15 = v12;
          goto LABEL_30;
        }
        unint64_t v15 = 0;
      }
LABEL_30:
      if (v19 < 0)
      {
        operator delete(v17);
        if (v11)
        {
LABEL_32:
          double v14 = v11[9];
          if (!v15) {
            goto LABEL_40;
          }
LABEL_36:
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          goto LABEL_40;
        }
      }
      else if (v11)
      {
        goto LABEL_32;
      }
      double v14 = 0.0;
      if (!v15) {
        goto LABEL_40;
      }
      goto LABEL_36;
    }
  }
  else if (v4)
  {
    goto LABEL_13;
  }
  LOBYTE(lpsrc) = 0;
  siri::dialogengine::GetTimeStampFromString(a2, &lpsrc, (time_t *)&v17);
  if ((_BYTE)lpsrc)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "UTC");
    double CurrentUTCOffset = 0.0;
    if (!siri::dialogengine::StringsEqual((uint64_t)&v18, (uint64_t)__p)) {
      double CurrentUTCOffset = siri::dialogengine::Context::GetCurrentUTCOffset((siri::dialogengine::Context *)a1);
    }
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    double v14 = (double)(uint64_t)v17 - CurrentUTCOffset;
  }
  else
  {
    double v14 = 0.0;
  }
  if (v20 < 0) {
    operator delete(v18);
  }
LABEL_40:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v14;
}

void sub_1C5D475F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

BOOL std::operator>=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 >= 0;
  }
  else {
    return v4 >= v5;
  }
}

BOOL std::operator<=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, const void **a2)
{
  int v2 = *((char *)a1 + 23);
  int v3 = *((char *)a2 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  if (v3 >= 0) {
    size_t v5 = a2;
  }
  else {
    size_t v5 = *a2;
  }
  if (v2 >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  if (v2 >= 0) {
    int v7 = a1;
  }
  else {
    int v7 = *a1;
  }
  if (v6 >= v4) {
    size_t v8 = v4;
  }
  else {
    size_t v8 = v6;
  }
  int v9 = memcmp(v5, v7, v8);
  if (v9) {
    return v9 >= 0;
  }
  else {
    return v4 >= v6;
  }
}

uint64_t siri::dialogengine::ConditionExpression::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) ^ 1;
}

uint64_t siri::dialogengine::ConditionExpression::operator==(uint64_t a1, const void *a2)
{
  uint64_t result = siri::dialogengine::ConditionEntry::operator==(a1, (uint64_t)a2);
  if (!result) {
    return result;
  }
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = *(unsigned __int8 *)(a1 + 175);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 175);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 160);
  }
  uint64_t v8 = *(unsigned __int8 *)(result + 175);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(result + 160);
  }
  if (v7 != v8) {
    return 0;
  }
  int v10 = (const void **)(a1 + 152);
  if (v9 >= 0) {
    uint64_t v11 = (unsigned __int8 *)(result + 152);
  }
  else {
    uint64_t v11 = *(unsigned __int8 **)(result + 152);
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v10, v11, *(void *)(a1 + 160))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 175))
  {
    while (*(unsigned __int8 *)v10 == *v11)
    {
      int v10 = (const void **)((char *)v10 + 1);
      ++v11;
      if (!--v6) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  uint64_t v12 = *(unsigned __int8 *)(a1 + 199);
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = *(unsigned __int8 *)(a1 + 199);
  }
  else {
    uint64_t v13 = *(void *)(a1 + 184);
  }
  uint64_t v14 = *(unsigned __int8 *)(v5 + 199);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(v5 + 184);
  }
  if (v13 != v14) {
    return 0;
  }
  long long v16 = (const void **)(a1 + 176);
  if (v15 >= 0) {
    int v17 = (unsigned __int8 *)(v5 + 176);
  }
  else {
    int v17 = *(unsigned __int8 **)(v5 + 176);
  }
  if ((v12 & 0x80) != 0)
  {
    if (!memcmp(*v16, v17, *(void *)(a1 + 184))) {
      goto LABEL_33;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 199))
  {
    while (*(unsigned __int8 *)v16 == *v17)
    {
      long long v16 = (const void **)((char *)v16 + 1);
      ++v17;
      if (!--v12) {
        goto LABEL_33;
      }
    }
    return 0;
  }
LABEL_33:
  uint64_t v18 = *(unsigned __int8 *)(a1 + 223);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = *(unsigned __int8 *)(a1 + 223);
  }
  else {
    uint64_t v19 = *(void *)(a1 + 208);
  }
  uint64_t v20 = *(unsigned __int8 *)(v5 + 223);
  int v21 = (char)v20;
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = *(void *)(v5 + 208);
  }
  if (v19 != v20) {
    return 0;
  }
  char v22 = (const void **)(a1 + 200);
  int v25 = *(unsigned __int8 **)(v5 + 200);
  long long v24 = (unsigned __int8 *)(v5 + 200);
  unint64_t v23 = v25;
  if (v21 >= 0) {
    long long v26 = v24;
  }
  else {
    long long v26 = v23;
  }
  if ((v18 & 0x80) != 0) {
    return memcmp(*v22, v26, *(void *)(a1 + 208)) == 0;
  }
  if (!*(unsigned char *)(a1 + 223)) {
    return 1;
  }
  uint64_t v27 = v18 - 1;
  do
  {
    int v29 = *(unsigned __int8 *)v22;
    char v22 = (const void **)((char *)v22 + 1);
    int v28 = v29;
    int v31 = *v26++;
    int v30 = v31;
    BOOL v33 = v27-- != 0;
    uint64_t result = v28 == v30;
  }
  while (v28 == v30 && v33);
  return result;
}

siri::dialogengine::Context *siri::dialogengine::ConditionExpression::Validate(siri::dialogengine::ConditionExpression *this, siri::dialogengine::Context *a2)
{
  int v2 = a2;
  if (!a2) {
    return v2;
  }
  if (!siri::dialogengine::ConditionEntry::Validate((const void ***)this, a2)) {
    return 0;
  }
  if ((*((char *)this + 175) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 175)) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
  if (!*((void *)this + 20))
  {
LABEL_19:
    std::string::basic_string[abi:ne180100]<0>(__p, "Condition expression has no name");
    siri::dialogengine::Context::AddValidationError((uint64_t)v2, (long long *)__p, (uint64_t)this + 88);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v6 = (void *)__p[0].__r_.__value_.__r.__words[0];
LABEL_41:
      operator delete(v6);
    }
    return 0;
  }
LABEL_5:
  if (!siri::dialogengine::IsPropertyValidForType((BOOL)v2, (unsigned __int8 *)this + 152))
  {
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v37, "'");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)v2, (long long *)__p, (uint64_t)this + 88);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v6 = (void *)v37.__r_.__value_.__r.__words[0];
    goto LABEL_41;
  }
  if ((siri::dialogengine::IsPropertyValidForLocale((uint64_t)v2, (unsigned __int8 *)this + 152) & 1) == 0)
  {
    std::operator+<char>();
    int v9 = std::string::append(&v35, "' is not valid for locale '");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::GetLocale(v2, v11, (uint64_t)&v34);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v34;
    }
    else {
      uint64_t v12 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v34.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = std::string::append(&v36, (const std::string::value_type *)v12, size);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    long long v16 = std::string::append(&v37, "'");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)v2, (long long *)__p, (uint64_t)this + 88);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v6 = (void *)v35.__r_.__value_.__r.__words[0];
    goto LABEL_41;
  }
  siri::dialogengine::ValidateVariableVersion((uint64_t)v2, (uint64_t)this + 152, &v37);
  std::string::size_type v4 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v4 = v37.__r_.__value_.__l.__size_;
  }
  if (!v4)
  {
    siri::dialogengine::ValidateVariableVersion((uint64_t)v2, (uint64_t)this + 200, __p);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    std::string v37 = __p[0];
    std::string::size_type v5 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v5 = v37.__r_.__value_.__l.__size_;
    }
    if (!v5)
    {
      __p[0].__r_.__value_.__s.__data_[0] = 0;
      char v33 = 0;
      siri::dialogengine::ResolveType((void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)v2, (uint64_t)this + 152, 1, (uint64_t)&v36);
      if (v33)
      {
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v35, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
        }
        else {
          std::string v35 = v32;
        }
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v19 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v19 = v35.__r_.__value_.__l.__size_;
        }
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        if (v19)
        {
          std::operator+<char>();
          uint64_t v20 = std::string::append(&v30, "' is deprecated: ");
          long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          v34.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v29, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
          }
          else {
            std::string v29 = v32;
          }
          if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v22 = &v29;
          }
          else {
            char v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
          }
          if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v23 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v23 = v29.__r_.__value_.__l.__size_;
          }
          long long v24 = std::string::append(&v34, (const std::string::value_type *)v22, v23);
          long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v35.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationWarning((uint64_t)v2, (long long *)&v35, (uint64_t)this + 88);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v29.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v34.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v30.__r_.__value_.__l.__data_);
          }
        }
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, siri::dialogengine::TYPE_BOOLEAN))
      {
        uint64_t v26 = siri::dialogengine::ConditionExpression::ValidateBoolean(this, v2);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, siri::dialogengine::TYPE_STRING))
      {
        uint64_t v26 = siri::dialogengine::ConditionExpression::ValidateString(this, v2);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, siri::dialogengine::TYPE_NUMBER))
      {
        uint64_t v26 = siri::dialogengine::ConditionExpression::ValidateNumber(this, v2);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, (char *)siri::dialogengine::TYPE_DIALOG_CALENDAR))
      {
        uint64_t v26 = siri::dialogengine::ConditionExpression::ValidateDialogCalendar(this, v2);
      }
      else if (siri::dialogengine::IsArrayType(&v36) {
             || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, (char *)siri::dialogengine::TYPE_ARRAY))
      }
      {
        uint64_t v26 = siri::dialogengine::ConditionExpression::ValidateArray(this, v2);
      }
      else
      {
        if (!std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, siri::dialogengine::TYPE_UNKNOWN))
        {
          std::operator+<char>();
          uint64_t v27 = std::string::append(&v34, "'");
          long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          v35.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v2, (long long *)&v35, (uint64_t)this + 88);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v34.__r_.__value_.__l.__data_);
          }
          int v2 = 0;
          goto LABEL_83;
        }
        uint64_t v26 = siri::dialogengine::ConditionExpression::ValidateOther((uint64_t)this, (uint64_t)v2, (uint64_t)&v36);
      }
      int v2 = (siri::dialogengine::Context *)v26;
LABEL_83:
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (v33) {
        siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p[0].__r_.__value_.__l.__data_);
      }
      goto LABEL_16;
    }
  }
  siri::dialogengine::Context::AddValidationError((uint64_t)v2, (long long *)&v37, (uint64_t)this + 88);
  int v2 = 0;
LABEL_16:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  return v2;
}

void sub_1C5D47FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (*(char *)(v54 - 121) < 0) {
    operator delete(*(void **)(v54 - 144));
  }
  if (*(char *)(v54 - 153) < 0) {
    operator delete(*(void **)(v54 - 176));
  }
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (a54) {
    siri::dialogengine::ObjectProperty::~ObjectProperty(&a21);
  }
  if (*(char *)(v54 - 57) < 0) {
    operator delete(*(void **)(v54 - 80));
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ConditionExpression::ValidateBoolean(siri::dialogengine::ConditionExpression *this, siri::dialogengine::Context *a2)
{
  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 199)) {
      goto LABEL_3;
    }
LABEL_8:
    if (*((char *)this + 223) < 0)
    {
      if (!*((void *)this + 26)) {
        return 1;
      }
    }
    else if (!*((unsigned char *)this + 223))
    {
      return 1;
    }
    std::operator+<char>();
    uint64_t v12 = std::string::append(&v34, "' has value but no operator");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v36 = v12->__r_.__value_.__r.__words[2];
    long long __s1 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &__s1, (uint64_t)this + 88);
    goto LABEL_22;
  }
  if (!*((void *)this + 23)) {
    goto LABEL_8;
  }
LABEL_3:
  std::string::size_type v4 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&__s1, "dialog.Boolean");
  BOOL IsUnaryOperator = siri::dialogengine::IsUnaryOperator(v4, (unsigned __int8 *)this + 176);
  BOOL v6 = IsUnaryOperator;
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    if (IsUnaryOperator) {
      goto LABEL_5;
    }
LABEL_12:
    long long v8 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&__s1, "dialog.Boolean");
    BOOL IsBinaryOperator = siri::dialogengine::IsBinaryOperator(v8, (unsigned __int8 *)this + 176);
    BOOL v10 = IsBinaryOperator;
    if (SHIBYTE(v36) < 0)
    {
      operator delete((void *)__s1);
      if (v10) {
        goto LABEL_14;
      }
    }
    else if (IsBinaryOperator)
    {
LABEL_14:
      if (*((char *)this + 223) < 0)
      {
        if (*((void *)this + 26)) {
          goto LABEL_16;
        }
      }
      else if (*((unsigned char *)this + 223))
      {
LABEL_16:
        siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)this + 200, 1, (uint64_t)&__s1);
        size_t v11 = strlen(siri::dialogengine::TYPE_BOOLEAN);
        if (SHIBYTE(v36) < 0)
        {
          if (v11 == *((void *)&__s1 + 1))
          {
            if (v11 == -1) {
              std::string::__throw_out_of_range[abi:ne180100]();
            }
            char v22 = (void *)__s1;
            int v23 = memcmp((const void *)__s1, siri::dialogengine::TYPE_BOOLEAN, v11);
            operator delete(v22);
            if (!v23) {
              return 1;
            }
          }
          else
          {
            operator delete((void *)__s1);
          }
        }
        else if (v11 == HIBYTE(v36) && !memcmp(&__s1, siri::dialogengine::TYPE_BOOLEAN, v11))
        {
          return 1;
        }
        std::operator+<char>();
        long long v24 = std::string::append(&v32, "' has non-BOOLean value: '");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        int v26 = *((char *)this + 223);
        if (v26 >= 0) {
          uint64_t v18 = (char *)this + 200;
        }
        else {
          uint64_t v18 = (const std::string::value_type *)*((void *)this + 25);
        }
        if (v26 >= 0) {
          std::string::size_type v19 = *((unsigned __int8 *)this + 223);
        }
        else {
          std::string::size_type v19 = *((void *)this + 26);
        }
        goto LABEL_46;
      }
      std::operator+<char>();
      uint64_t v20 = std::string::append(&v34, "' has no value");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      std::string::size_type v36 = v20->__r_.__value_.__r.__words[2];
      long long __s1 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, &__s1, (uint64_t)this + 88);
LABEL_22:
      if (SHIBYTE(v36) < 0) {
        operator delete((void *)__s1);
      }
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
      uint64_t v14 = (void *)v34.__r_.__value_.__r.__words[0];
      goto LABEL_54;
    }
    std::operator+<char>();
    long long v15 = std::string::append(&v32, "' has invalid operator: '");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    int v17 = *((char *)this + 199);
    if (v17 >= 0) {
      uint64_t v18 = (char *)this + 176;
    }
    else {
      uint64_t v18 = (const std::string::value_type *)*((void *)this + 22);
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *((unsigned __int8 *)this + 199);
    }
    else {
      std::string::size_type v19 = *((void *)this + 23);
    }
LABEL_46:
    uint64_t v27 = std::string::append(&v33, v18, v19);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::string v29 = std::string::append(&v34, "'");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    std::string::size_type v36 = v29->__r_.__value_.__r.__words[2];
    long long __s1 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &__s1, (uint64_t)this + 88);
    if (SHIBYTE(v36) < 0) {
      operator delete((void *)__s1);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v14 = (void *)v32.__r_.__value_.__r.__words[0];
LABEL_54:
    operator delete(v14);
    return 0;
  }
  operator delete((void *)__s1);
  if (!v6) {
    goto LABEL_12;
  }
LABEL_5:
  std::string::basic_string[abi:ne180100]<0>(&__s1, "Boolean condition");
  BOOL v7 = siri::dialogengine::ConditionExpression::ValidateUnaryOperator((uint64_t)this, (uint64_t)a2, (const void **)&__s1);
  if (SHIBYTE(v36) < 0) {
    operator delete((void *)__s1);
  }
  return v7;
}

void sub_1C5D485B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ConditionExpression::ValidateString(siri::dialogengine::ConditionExpression *this, siri::dialogengine::Context *a2)
{
  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 199)) {
      goto LABEL_3;
    }
LABEL_8:
    if (*((char *)this + 223) < 0)
    {
      if (*((void *)this + 26)) {
        goto LABEL_10;
      }
    }
    else if (*((unsigned char *)this + 223))
    {
LABEL_10:
      std::operator+<char>();
      int v9 = std::string::append(&v47, "' has value but no operator");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      __s1.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__s1, (uint64_t)this + 88);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
      size_t v11 = (void *)v47.__r_.__value_.__r.__words[0];
      goto LABEL_40;
    }
    return 1;
  }
  if (!*((void *)this + 23)) {
    goto LABEL_8;
  }
LABEL_3:
  std::string::size_type v4 = (void *)((char *)this + 176);
  std::string::size_type v5 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&__s1, "dialog.String");
  BOOL IsUnaryOperator = siri::dialogengine::IsUnaryOperator(v5, (unsigned __int8 *)this + 176);
  BOOL v7 = IsUnaryOperator;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s1.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_5:
      std::string::basic_string[abi:ne180100]<0>(&__s1, "String condition");
      BOOL v8 = siri::dialogengine::ConditionExpression::ValidateUnaryOperator((uint64_t)this, (uint64_t)a2, (const void **)&__s1.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      return v8;
    }
  }
  else if (IsUnaryOperator)
  {
    goto LABEL_5;
  }
  uint64_t v12 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&__s1, "dialog.String");
  BOOL IsBinaryOperator = siri::dialogengine::IsBinaryOperator(v12, (unsigned __int8 *)this + 176);
  BOOL v14 = IsBinaryOperator;
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (IsBinaryOperator) {
      goto LABEL_17;
    }
    goto LABEL_26;
  }
  operator delete(__s1.__r_.__value_.__l.__data_);
  if (!v14)
  {
LABEL_26:
    std::operator+<char>();
    long long v16 = std::string::append(&v45, "' has invalid operator: '");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    int v18 = *((char *)this + 199);
    if (v18 >= 0) {
      std::string::size_type v19 = (char *)this + 176;
    }
    else {
      std::string::size_type v19 = (const std::string::value_type *)*((void *)this + 22);
    }
    if (v18 >= 0) {
      std::string::size_type v20 = *((unsigned __int8 *)this + 199);
    }
    else {
      std::string::size_type v20 = *((void *)this + 23);
    }
    long long v21 = std::string::append(&v46, v19, v20);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    int v23 = std::string::append(&v47, "'");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    __s1.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__s1, (uint64_t)this + 88);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    size_t v11 = (void *)v45.__r_.__value_.__r.__words[0];
LABEL_40:
    operator delete(v11);
    return 0;
  }
LABEL_17:
  if ((*((char *)this + 223) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 223)) {
      goto LABEL_19;
    }
LABEL_44:
    std::operator+<char>();
    int v26 = std::string::append(&v47, "' has no value");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    __s1.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__s1, (uint64_t)this + 88);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_68;
    }
    uint64_t v28 = (void *)v47.__r_.__value_.__r.__words[0];
    goto LABEL_67;
  }
  if (!*((void *)this + 26)) {
    goto LABEL_44;
  }
LABEL_19:
  siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)this + 200, 1, (uint64_t)&__s1);
  size_t v15 = strlen(siri::dialogengine::TYPE_STRING);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v15 == __s1.__r_.__value_.__l.__size_)
    {
      if (v15 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      std::string v29 = (void *)__s1.__r_.__value_.__r.__words[0];
      int v30 = memcmp(__s1.__r_.__value_.__l.__data_, siri::dialogengine::TYPE_STRING, v15);
      operator delete(v29);
      if (!v30) {
        goto LABEL_51;
      }
    }
    else
    {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
  }
  else if (v15 == HIBYTE(__s1.__r_.__value_.__r.__words[2]) && !memcmp(&__s1, siri::dialogengine::TYPE_STRING, v15))
  {
LABEL_51:
    BOOL v8 = 1;
    goto LABEL_69;
  }
  std::operator+<char>();
  int v31 = std::string::append(&v45, "' has non-string value: '");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  int v33 = *((char *)this + 223);
  if (v33 >= 0) {
    std::string v34 = (char *)this + 200;
  }
  else {
    std::string v34 = (const std::string::value_type *)*((void *)this + 25);
  }
  if (v33 >= 0) {
    std::string::size_type v35 = *((unsigned __int8 *)this + 223);
  }
  else {
    std::string::size_type v35 = *((void *)this + 26);
  }
  std::string::size_type v36 = std::string::append(&v46, v34, v35);
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  unint64_t v38 = std::string::append(&v47, "'");
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  __s1.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&__s1, (uint64_t)this + 88);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v28 = (void *)v45.__r_.__value_.__r.__words[0];
LABEL_67:
    operator delete(v28);
  }
LABEL_68:
  BOOL v8 = 0;
LABEL_69:
  int v40 = *((char *)this + 199);
  if (v40 < 0)
  {
    if (*((void *)this + 23) != 11) {
      return v8;
    }
    std::string::size_type v4 = (void *)*v4;
  }
  else if (v40 != 11)
  {
    return v8;
  }
  if (*v4 == 0x616D5F7865676572 && *(void *)((char *)v4 + 3) == 0x686374616D5F7865)
  {
    if (*((char *)this + 223) < 0 ? *((void *)this + 26) : *((unsigned __int8 *)this + 223))
    {
      siri::dialogengine::ResolveLiteral((std::string *)((char *)this + 200), &__s1);
      if (__s1.__r_.__value_.__r.__words[0])
      {
        if (v43)
        {
          std::string::size_type size = (std::__shared_weak_count *)__s1.__r_.__value_.__l.__size_;
          if (__s1.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(__s1.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          goto LABEL_89;
        }
      }
      else
      {
        double v43 = 0;
      }
      std::string::size_type size = 0;
LABEL_89:
      if (__s1.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__s1.__r_.__value_.__l.__size_);
      }
      if (v43)
      {
        if (v43[95] < 0) {
          std::string::__init_copy_ctor_external(&__s1, *((const std::string::value_type **)v43 + 9), *((void *)v43 + 10));
        }
        else {
          std::string __s1 = *(std::string *)(v43 + 3);
        }
        siri::dialogengine::GetRegexError();
      }
      if (size) {
        std::__shared_weak_count::__release_shared[abi:ne180100](size);
      }
      return v8;
    }
  }
  return v8;
}

void sub_1C5D48D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ConditionExpression::ValidateNumber(siri::dialogengine::ConditionExpression *this, siri::dialogengine::Context *a2)
{
  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 199)) {
      goto LABEL_3;
    }
LABEL_7:
    if (*((char *)this + 223) < 0)
    {
      if (*((void *)this + 26)) {
        goto LABEL_9;
      }
    }
    else if (*((unsigned char *)this + 223))
    {
LABEL_9:
      std::operator+<char>();
      int v9 = std::string::append(&v49, "' has value but no operator");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      std::string::size_type v51 = v9->__r_.__value_.__r.__words[2];
      long long v50 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, &v50, (uint64_t)this + 88);
      if (SHIBYTE(v51) < 0) {
        operator delete((void *)v50);
      }
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
      size_t v11 = (void *)v49.__r_.__value_.__r.__words[0];
      goto LABEL_38;
    }
    return 1;
  }
  if (!*((void *)this + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  std::string::size_type v4 = (void *)((char *)this + 176);
  std::string::size_type v5 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&v50, "dialog.Number");
  BOOL IsUnaryOperator = siri::dialogengine::IsUnaryOperator(v5, (unsigned __int8 *)this + 176);
  BOOL v7 = IsUnaryOperator;
  if (SHIBYTE(v51) < 0)
  {
    operator delete((void *)v50);
    if (v7) {
      goto LABEL_5;
    }
  }
  else if (IsUnaryOperator)
  {
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(&v50, "Number condition");
    BOOL v8 = siri::dialogengine::ConditionExpression::ValidateUnaryOperator((uint64_t)this, (uint64_t)a2, (const void **)&v50);
    goto LABEL_66;
  }
  uint64_t v12 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&v50, "dialog.Number");
  BOOL IsBinaryOperator = siri::dialogengine::IsBinaryOperator(v12, (unsigned __int8 *)this + 176);
  BOOL v14 = IsBinaryOperator;
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
    if (IsBinaryOperator) {
      goto LABEL_16;
    }
    goto LABEL_24;
  }
  operator delete((void *)v50);
  if (!v14)
  {
LABEL_24:
    std::operator+<char>();
    int v18 = std::string::append(&v47, "' has invalid operator: ");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    int v20 = *((char *)this + 199);
    if (v20 >= 0) {
      long long v21 = (char *)this + 176;
    }
    else {
      long long v21 = (const std::string::value_type *)*((void *)this + 22);
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *((unsigned __int8 *)this + 199);
    }
    else {
      std::string::size_type v22 = *((void *)this + 23);
    }
    int v23 = std::string::append(&v48, v21, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    long long v25 = std::string::append(&v49, "'");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    std::string::size_type v51 = v25->__r_.__value_.__r.__words[2];
    long long v50 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &v50, (uint64_t)this + 88);
    if (SHIBYTE(v51) < 0) {
      operator delete((void *)v50);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    size_t v11 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_38:
    operator delete(v11);
    return 0;
  }
LABEL_16:
  siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)this + 200, 1, (uint64_t)&v50);
  if ((*((char *)this + 223) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 223)) {
      goto LABEL_18;
    }
LABEL_41:
    std::operator+<char>();
    long long v27 = std::string::append(&v48, "' has no value");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v49, (uint64_t)this + 88);
    goto LABEL_42;
  }
  if (!*((void *)this + 26)) {
    goto LABEL_41;
  }
LABEL_18:
  size_t v15 = strlen(siri::dialogengine::TYPE_NUMBER);
  size_t v16 = v15;
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
    if (v15 == HIBYTE(v51))
    {
      long long v17 = &v50;
      goto LABEL_49;
    }
LABEL_50:
    std::operator+<char>();
    int v30 = std::string::append(&v46, "' has non-number value: '");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    int v32 = *((char *)this + 223);
    if (v32 >= 0) {
      int v33 = (char *)this + 200;
    }
    else {
      int v33 = (const std::string::value_type *)*((void *)this + 25);
    }
    if (v32 >= 0) {
      std::string::size_type v34 = *((unsigned __int8 *)this + 223);
    }
    else {
      std::string::size_type v34 = *((void *)this + 26);
    }
    std::string::size_type v35 = std::string::append(&v47, v33, v34);
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    long long v37 = std::string::append(&v48, "'");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v49, (uint64_t)this + 88);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_65;
    }
    std::string v29 = (void *)v46.__r_.__value_.__r.__words[0];
LABEL_64:
    operator delete(v29);
LABEL_65:
    BOOL v8 = 0;
    goto LABEL_66;
  }
  if (v15 != *((void *)&v50 + 1)) {
    goto LABEL_50;
  }
  if (v15 == -1) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  long long v17 = (long long *)v50;
LABEL_49:
  if (memcmp(v17, siri::dialogengine::TYPE_NUMBER, v16)) {
    goto LABEL_50;
  }
  int v40 = *((char *)this + 199);
  if ((v40 & 0x80000000) == 0)
  {
    if (v40 != 14) {
      goto LABEL_86;
    }
    goto LABEL_74;
  }
  if (*((void *)this + 23) == 14)
  {
    std::string::size_type v4 = (void *)*v4;
LABEL_74:
    if (*v4 != 0x69746C756D5F7369 || *(void *)((char *)v4 + 6) != 0x666F5F656C706974) {
      goto LABEL_86;
    }
    siri::dialogengine::GetLiteralType((std::string *)((char *)this + 200), &v49);
    BOOL v42 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v49, siri::dialogengine::TYPE_NUMBER);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (!v42) {
      goto LABEL_86;
    }
    siri::dialogengine::ResolveLiteral((std::string *)((char *)this + 200), &v49);
    if (v49.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v49.__r_.__value_.__l.__size_);
    }
    if (v43 != 0.0) {
      goto LABEL_86;
    }
    std::operator+<char>();
    double v44 = std::string::append(&v48, "' has modulus of value zero");
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v49, (uint64_t)this + 88);
LABEL_42:
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_65;
    }
    std::string v29 = (void *)v48.__r_.__value_.__r.__words[0];
    goto LABEL_64;
  }
LABEL_86:
  BOOL v8 = 1;
LABEL_66:
  if (SHIBYTE(v51) < 0) {
    operator delete((void *)v50);
  }
  return v8;
}

void sub_1C5D49458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v35 - 73) < 0) {
    operator delete(*(void **)(v35 - 96));
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ConditionExpression::ValidateDialogCalendar(siri::dialogengine::ConditionExpression *this, siri::dialogengine::Context *a2)
{
  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 199)) {
      goto LABEL_3;
    }
LABEL_9:
    if (*((char *)this + 223) < 0)
    {
      if (!*((void *)this + 26)) {
        return 1;
      }
    }
    else if (!*((unsigned char *)this + 223))
    {
      return 1;
    }
    std::operator+<char>();
    BOOL v14 = std::string::append(&v66, "' has value but no operator for type 'dialog.Calendar'");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v68 = v14->__r_.__value_.__r.__words[2];
    long long v67 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &v67, (uint64_t)this + 88);
    goto LABEL_29;
  }
  if (!*((void *)this + 23)) {
    goto LABEL_9;
  }
LABEL_3:
  std::string::size_type v4 = (unsigned __int8 *)this + 176;
  std::string::size_type v5 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&v67, "dialog.Calendar");
  BOOL IsUnaryOperator = siri::dialogengine::IsUnaryOperator(v5, (unsigned __int8 *)this + 176);
  BOOL v7 = IsUnaryOperator;
  if (SHIBYTE(v68) < 0)
  {
    operator delete((void *)v67);
    if (v7) {
      goto LABEL_5;
    }
  }
  else if (IsUnaryOperator)
  {
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(&v67, "dialog.Calendar condition");
    BOOL v8 = siri::dialogengine::ConditionExpression::ValidateUnaryOperator((uint64_t)this, (uint64_t)a2, (const void **)&v67);
    goto LABEL_6;
  }
  int v9 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&v67, "dialog.Calendar");
  BOOL IsBinaryOperator = siri::dialogengine::IsBinaryOperator(v9, (unsigned __int8 *)this + 176);
  BOOL v11 = IsBinaryOperator;
  if ((SHIBYTE(v68) & 0x80000000) == 0)
  {
    if (IsBinaryOperator) {
      goto LABEL_15;
    }
LABEL_34:
    std::operator+<char>();
    long long v17 = std::string::append(&v64, "' has invalid operator: '");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    int v19 = *((char *)this + 199);
    if (v19 >= 0) {
      int v20 = (char *)this + 176;
    }
    else {
      int v20 = (const std::string::value_type *)*((void *)this + 22);
    }
    if (v19 >= 0) {
      std::string::size_type v21 = *((unsigned __int8 *)this + 199);
    }
    else {
      std::string::size_type v21 = *((void *)this + 23);
    }
    std::string::size_type v22 = std::string::append(&v65, v20, v21);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    long long v24 = std::string::append(&v66, "' for type 'dialog.Calendar'");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    std::string::size_type v68 = v24->__r_.__value_.__r.__words[2];
    long long v67 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &v67, (uint64_t)this + 88);
    if (SHIBYTE(v68) < 0) {
      operator delete((void *)v67);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    size_t v16 = (void *)v64.__r_.__value_.__r.__words[0];
    goto LABEL_48;
  }
  operator delete((void *)v67);
  if (!v11) {
    goto LABEL_34;
  }
LABEL_15:
  if ((*((char *)this + 223) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 223)) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }
  if (!*((void *)this + 26))
  {
LABEL_51:
    std::operator+<char>();
    long long v26 = std::string::append(&v66, "' has no value");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    std::string::size_type v68 = v26->__r_.__value_.__r.__words[2];
    long long v67 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &v67, (uint64_t)this + 88);
LABEL_29:
    if (SHIBYTE(v68) < 0) {
      operator delete((void *)v67);
    }
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    size_t v16 = (void *)v66.__r_.__value_.__r.__words[0];
LABEL_48:
    operator delete(v16);
    return 0;
  }
LABEL_17:
  int v12 = *((unsigned __int8 *)this + 199);
  if (*((char *)this + 199) < 0)
  {
    uint64_t v28 = *((void *)this + 23);
    if (v28 == 1)
    {
      if (**(unsigned char **)v4 == 61) {
        goto LABEL_80;
      }
      if ((v12 & 0x80) == 0) {
        goto LABEL_71;
      }
    }
    else if (v28 == 10 && **(void **)v4 == 0x64696C6F685F7369 && *(_WORD *)(*(void *)v4 + 8) == 31073)
    {
      goto LABEL_59;
    }
    if (*((void *)this + 23) != 2) {
      goto LABEL_73;
    }
    if (**(_WORD **)v4 == 15649) {
      goto LABEL_80;
    }
    if ((v12 & 0x80) != 0)
    {
LABEL_73:
      if (*((void *)this + 23) != 1) {
        goto LABEL_77;
      }
      std::string::size_type v34 = *(unsigned __int8 **)v4;
      goto LABEL_75;
    }
LABEL_71:
    std::string::size_type v34 = (unsigned __int8 *)this + 176;
    if (v12 != 1) {
      goto LABEL_77;
    }
LABEL_75:
    int v33 = *v34;
LABEL_76:
    if (v33 != 60) {
      goto LABEL_77;
    }
    goto LABEL_80;
  }
  if (v12 == 1)
  {
    int v33 = *v4;
    if (v33 == 61) {
      goto LABEL_80;
    }
    goto LABEL_76;
  }
  if (v12 == 2)
  {
    if (*(_WORD *)v4 != 15649) {
      goto LABEL_77;
    }
LABEL_80:
    siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)this + 200, 1, (uint64_t)&v67);
    unsigned __int8 v63 = 0;
    siri::dialogengine::GetTimeStampFromString((const std::string *)((char *)this + 200), &v63, v61);
    if (v62 < 0) {
      operator delete((void *)v61[1]);
    }
    size_t v35 = strlen(siri::dialogengine::TYPE_UNKNOWN);
    size_t v36 = v35;
    char v37 = HIBYTE(v68);
    if (SHIBYTE(v68) < 0)
    {
      if (v35 != *((void *)&v67 + 1))
      {
        BOOL v8 = 1;
        goto LABEL_7;
      }
      if (v35 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      long long v38 = (long long *)v67;
      goto LABEL_90;
    }
    if (v35 == HIBYTE(v68))
    {
      long long v38 = &v67;
LABEL_90:
      int v40 = memcmp(v38, siri::dialogengine::TYPE_UNKNOWN, v36);
      int v41 = v40 | v63;
      BOOL v8 = v41 != 0;
      if (!v41)
      {
        std::operator+<char>();
        BOOL v42 = std::string::append(&v60, "' has invalid value: '");
        long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        int v44 = *((char *)this + 223);
        if (v44 >= 0) {
          long long v45 = (char *)this + 200;
        }
        else {
          long long v45 = (const std::string::value_type *)*((void *)this + 25);
        }
        if (v44 >= 0) {
          std::string::size_type v46 = *((unsigned __int8 *)this + 223);
        }
        else {
          std::string::size_type v46 = *((void *)this + 26);
        }
        std::string v47 = std::string::append(&v64, v45, v46);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        std::string v49 = std::string::append(&v65, "'");
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v66, (uint64_t)this + 88);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v65.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        char v37 = HIBYTE(v68);
      }
      if (v37 < 0) {
        goto LABEL_7;
      }
      return v8;
    }
    return 1;
  }
  if (v12 != 10
    || (*(void *)v4 == 0x64696C6F685F7369 ? (BOOL v13 = *((unsigned __int16 *)this + 92) == 31073) : (BOOL v13 = 0), !v13))
  {
LABEL_77:
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)this + 22, "<=")
      && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)this + 22, ">")
      && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)this + 22, ">="))
    {
      return 1;
    }
    goto LABEL_80;
  }
LABEL_59:
  siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)this + 200, 1, (uint64_t)&v67);
  size_t v30 = strlen(siri::dialogengine::TYPE_UNKNOWN);
  size_t v31 = v30;
  if (SHIBYTE(v68) < 0)
  {
    if (v30 != *((void *)&v67 + 1)) {
      goto LABEL_113;
    }
    if (v30 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    int v32 = (long long *)v67;
  }
  else
  {
    if (v30 != HIBYTE(v68)) {
      goto LABEL_113;
    }
    int v32 = &v67;
  }
  if (!memcmp(v32, siri::dialogengine::TYPE_UNKNOWN, v31))
  {
    std::operator+<char>();
    char v55 = std::string::append(&v65, "' unknown");
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v66, (uint64_t)this + 88);
    goto LABEL_124;
  }
LABEL_113:
  if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v67, siri::dialogengine::TYPE_STRING))
  {
    std::operator+<char>();
    std::string::size_type v51 = std::string::append(&v65, "' not of type string");
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v66, (uint64_t)this + 88);
LABEL_124:
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    BOOL v8 = 0;
    goto LABEL_6;
  }
  siri::dialogengine::GetLiteralType((std::string *)((char *)this + 200), &v66);
  BOOL v53 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v66, siri::dialogengine::TYPE_STRING);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (v53)
  {
    siri::dialogengine::ResolveLiteral((std::string *)((char *)this + 200), &v65);
    uint64_t v54 = (char *)v65.__r_.__value_.__r.__words[0];
    if (v65.__r_.__value_.__r.__words[0]) {
    if (v54[95] < 0)
    }
      std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)v54 + 9), *((void *)v54 + 10));
    else {
      std::string v66 = *(std::string *)(v54 + 3);
    }
    if (v65.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v65.__r_.__value_.__l.__size_);
    }
    std::string::size_type size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v66.__r_.__value_.__l.__size_;
    }
    if (size && (siri::dialogengine::IsValidHoliday((uint64_t)&v66) & 1) != 0)
    {
      BOOL v8 = 1;
    }
    else
    {
      std::operator+<char>();
      std::string v58 = std::string::append(&v64, " is not a valid holiday");
      long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (long long *)&v65, (uint64_t)this + 88);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      BOOL v8 = 0;
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    BOOL v8 = 1;
  }
LABEL_6:
  if (SHIBYTE(v68) < 0) {
LABEL_7:
  }
    operator delete((void *)v67);
  return v8;
}

void sub_1C5D49E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,std::__shared_weak_count *a28,int a29,__int16 a30,char a31,char a32)
{
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (*(char *)(v32 - 57) < 0) {
    operator delete(*(void **)(v32 - 80));
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ConditionExpression::ValidateArray(siri::dialogengine::ConditionExpression *this, siri::dialogengine::Context *a2)
{
  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 199)) {
      goto LABEL_3;
    }
LABEL_8:
    if (*((char *)this + 223) < 0)
    {
      if (!*((void *)this + 26)) {
        return 1;
      }
    }
    else if (!*((unsigned char *)this + 223))
    {
      return 1;
    }
    std::operator+<char>();
    int v12 = std::string::append(&v34, "' has value but no operator");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v36 = v12->__r_.__value_.__r.__words[2];
    long long __s1 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &__s1, (uint64_t)this + 88);
    goto LABEL_22;
  }
  if (!*((void *)this + 23)) {
    goto LABEL_8;
  }
LABEL_3:
  std::string::size_type v4 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&__s1, "dialog.Array");
  BOOL IsUnaryOperator = siri::dialogengine::IsUnaryOperator(v4, (unsigned __int8 *)this + 176);
  BOOL v6 = IsUnaryOperator;
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    if (IsUnaryOperator) {
      goto LABEL_5;
    }
LABEL_12:
    BOOL v8 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&__s1, "dialog.Array");
    BOOL IsBinaryOperator = siri::dialogengine::IsBinaryOperator(v8, (unsigned __int8 *)this + 176);
    BOOL v10 = IsBinaryOperator;
    if (SHIBYTE(v36) < 0)
    {
      operator delete((void *)__s1);
      if (v10) {
        goto LABEL_14;
      }
    }
    else if (IsBinaryOperator)
    {
LABEL_14:
      if (*((char *)this + 223) < 0)
      {
        if (*((void *)this + 26))
        {
LABEL_16:
          siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)this + 200, 1, (uint64_t)&__s1);
          size_t v11 = strlen(siri::dialogengine::TYPE_UNKNOWN);
          if (SHIBYTE(v36) < 0)
          {
            if (v11 == *((void *)&__s1 + 1))
            {
              if (v11 == -1) {
                std::string::__throw_out_of_range[abi:ne180100]();
              }
              long long v26 = (void *)__s1;
              int v27 = memcmp((const void *)__s1, siri::dialogengine::TYPE_UNKNOWN, v11);
              operator delete(v26);
              if (!v27) {
                goto LABEL_48;
              }
            }
            else
            {
              operator delete((void *)__s1);
            }
          }
          else if (v11 == HIBYTE(v36) && !memcmp(&__s1, siri::dialogengine::TYPE_UNKNOWN, v11))
          {
LABEL_48:
            std::operator+<char>();
            uint64_t v28 = std::string::append(&v32, "' has unknown value: '");
            long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            v33.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v29;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            int v30 = *((char *)this + 223);
            if (v30 >= 0) {
              long long v18 = (char *)this + 200;
            }
            else {
              long long v18 = (const std::string::value_type *)*((void *)this + 25);
            }
            if (v30 >= 0) {
              std::string::size_type v19 = *((unsigned __int8 *)this + 223);
            }
            else {
              std::string::size_type v19 = *((void *)this + 26);
            }
LABEL_33:
            int v20 = std::string::append(&v33, v18, v19);
            long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            v34.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v21;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v20->__r_.__value_.__r.__words[0] = 0;
            std::string::size_type v22 = std::string::append(&v34, "'");
            long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
            std::string::size_type v36 = v22->__r_.__value_.__r.__words[2];
            long long __s1 = v23;
            v22->__r_.__value_.__l.__size_ = 0;
            v22->__r_.__value_.__r.__words[2] = 0;
            v22->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError((uint64_t)a2, &__s1, (uint64_t)this + 88);
            if (SHIBYTE(v36) < 0) {
              operator delete((void *)__s1);
            }
            if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v34.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v33.__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              return 0;
            }
            BOOL v14 = (void *)v32.__r_.__value_.__r.__words[0];
LABEL_41:
            operator delete(v14);
            return 0;
          }
          return 1;
        }
      }
      else if (*((unsigned char *)this + 223))
      {
        goto LABEL_16;
      }
      std::operator+<char>();
      long long v24 = std::string::append(&v34, "' has no value");
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      std::string::size_type v36 = v24->__r_.__value_.__r.__words[2];
      long long __s1 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, &__s1, (uint64_t)this + 88);
LABEL_22:
      if (SHIBYTE(v36) < 0) {
        operator delete((void *)__s1);
      }
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
      BOOL v14 = (void *)v34.__r_.__value_.__r.__words[0];
      goto LABEL_41;
    }
    std::operator+<char>();
    long long v15 = std::string::append(&v32, "' has invalid operator: '");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    int v17 = *((char *)this + 199);
    if (v17 >= 0) {
      long long v18 = (char *)this + 176;
    }
    else {
      long long v18 = (const std::string::value_type *)*((void *)this + 22);
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *((unsigned __int8 *)this + 199);
    }
    else {
      std::string::size_type v19 = *((void *)this + 23);
    }
    goto LABEL_33;
  }
  operator delete((void *)__s1);
  if (!v6) {
    goto LABEL_12;
  }
LABEL_5:
  std::string::basic_string[abi:ne180100]<0>(&__s1, "Array condition");
  BOOL v7 = siri::dialogengine::ConditionExpression::ValidateUnaryOperator((uint64_t)this, (uint64_t)a2, (const void **)&__s1);
  if (SHIBYTE(v36) < 0) {
    operator delete((void *)__s1);
  }
  return v7;
}

void sub_1C5D4A454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::ConditionExpression::ValidateOther(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a1 + 199) < 0) {
    uint64_t v6 = *(void *)(a1 + 184);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 199);
  }
  if (!v6)
  {
    if (*(char *)(a1 + 223) < 0)
    {
      if (*(void *)(a1 + 208)) {
        goto LABEL_10;
      }
    }
    else if (*(unsigned char *)(a1 + 223))
    {
LABEL_10:
      std::operator+<char>();
      BOOL v8 = std::string::append(&v37, "' has value but no operator for type '");
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      int v10 = *(char *)(a3 + 23);
      if (v10 >= 0) {
        size_t v11 = (const std::string::value_type *)a3;
      }
      else {
        size_t v11 = *(const std::string::value_type **)a3;
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v12 = *(void *)(a3 + 8);
      }
      long long v13 = std::string::append(&v38, v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      long long v15 = std::string::append(&v39, "'");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      std::string::size_type v41 = v15->__r_.__value_.__r.__words[2];
      long long v40 = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError(a2, &v40, a1 + 88);
      if (SHIBYTE(v41) < 0) {
        operator delete((void *)v40);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
      int v17 = (void *)v37.__r_.__value_.__r.__words[0];
      goto LABEL_48;
    }
    return 1;
  }
  if (!siri::dialogengine::IsUnaryOperator((unsigned __int8 *)a3, (unsigned __int8 *)(a1 + 176)))
  {
    std::operator+<char>();
    long long v18 = std::string::append(&v35, "' has invalid operator: '");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    int v20 = *(char *)(a1 + 199);
    if (v20 >= 0) {
      long long v21 = (const std::string::value_type *)(a1 + 176);
    }
    else {
      long long v21 = *(const std::string::value_type **)(a1 + 176);
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(a1 + 199);
    }
    else {
      std::string::size_type v22 = *(void *)(a1 + 184);
    }
    long long v23 = std::string::append(&v36, v21, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    long long v25 = std::string::append(&v37, "' for type '");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    int v27 = *(char *)(a3 + 23);
    if (v27 >= 0) {
      uint64_t v28 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v28 = *(const std::string::value_type **)a3;
    }
    if (v27 >= 0) {
      std::string::size_type v29 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v29 = *(void *)(a3 + 8);
    }
    int v30 = std::string::append(&v38, v28, v29);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::string v32 = std::string::append(&v39, "'");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    std::string::size_type v41 = v32->__r_.__value_.__r.__words[2];
    long long v40 = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError(a2, &v40, a1 + 88);
    if (SHIBYTE(v41) < 0) {
      operator delete((void *)v40);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    int v17 = (void *)v35.__r_.__value_.__r.__words[0];
LABEL_48:
    operator delete(v17);
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v40, "Condition");
  BOOL v7 = siri::dialogengine::ConditionExpression::ValidateUnaryOperator(a1, a2, (const void **)&v40);
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
  return v7;
}

void sub_1C5D4A844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 57) < 0) {
    operator delete(*(void **)(v35 - 80));
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5D4A934()
{
  if (*(char *)(v0 - 57) < 0) {
    JUMPOUT(0x1C5D4A928);
  }
  JUMPOUT(0x1C5D4A92CLL);
}

BOOL siri::dialogengine::IsUnaryOperator(unsigned __int8 *a1, unsigned __int8 *a2)
{
  {
    operator new();
  }
  std::string::size_type v4 = (std::once_flag::_State_type *)siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::flag;
  if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::flag, memory_order_acquire) != -1)
  {
    int v10 = &v8;
    long long v9 = &v10;
    std::__call_once(v4, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::$_0 &&>>);
  }
  std::string::size_type v5 = std::__hash_table<std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>>>::find<std::string>((void *)siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::sUnaryOperators, a1);
  if (v5) {
    uint64_t v6 = v5 + 40;
  }
  else {
    uint64_t v6 = (void *)siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::sUnaryOtherOperators;
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v6, a2) != 0;
}

void sub_1C5D4AA3C(_Unwind_Exception *a1)
{
}

BOOL siri::dialogengine::ConditionExpression::ValidateUnaryOperator(uint64_t a1, uint64_t a2, const void **a3)
{
  if (*(char *)(a1 + 223) < 0)
  {
    uint64_t v6 = *(void *)(a1 + 208);
    if (!v6) {
      return v6 == 0;
    }
  }
  else
  {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 223);
    if (!*(unsigned char *)(a1 + 223)) {
      return v6 == 0;
    }
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  char v8 = &v18;
  std::string::basic_string[abi:ne180100]((uint64_t)&v18, v7 + 13);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if (*((char *)a3 + 23) >= 0) {
      long long v9 = a3;
    }
    else {
      long long v9 = *a3;
    }
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, " expression '");
  int v10 = *(char *)(a1 + 175);
  if (v10 >= 0) {
    size_t v11 = (const std::string::value_type *)(a1 + 152);
  }
  else {
    size_t v11 = *(const std::string::value_type **)(a1 + 152);
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a1 + 175);
  }
  else {
    std::string::size_type v12 = *(void *)(a1 + 160);
  }
  long long v13 = std::string::append(&v18, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  long long v15 = std::string::append(&v19, "' has a unary operator and a value; The value will be ignored.");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  std::string::size_type v21 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Context::AddValidationWarning(a2, (long long *)__p, a1 + 88);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return v6 == 0;
}

void sub_1C5D4ABD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1C5D4B2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v35 = 0;
  while (1)
  {
    if (*(char *)(v33 + v35 + 95) < 0) {
      operator delete(*(void **)(v33 + v35 + 72));
    }
    v35 -= 24;
    if (v35 == -96)
    {
      MEMORY[0x1C8796D70](v32, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

void siri::dialogengine::ConditionExpression::~ConditionExpression(siri::dialogengine::ConditionExpression *this)
{
  *(void *)this = &unk_1F211A4F0;
  int v2 = (void **)((char *)this + 88);
  *((void *)this + 11) = &unk_1F211A530;
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  siri::dialogengine::ConditionEntry::~ConditionEntry((void **)this);
  JUMPOUT(0x1C8796D70);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F211A4F0;
  int v2 = (void **)((char *)this + 88);
  *((void *)this + 11) = &unk_1F211A530;
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  siri::dialogengine::ConditionEntry::~ConditionEntry((void **)this);
}

double siri::dialogengine::ConditionExpression::ConditionExpression(siri::dialogengine::ConditionExpression *this)
{
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 1) = (char *)this + 16;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 8) = 3;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 18) = 0;
  *(void *)this = &unk_1F211A4F0;
  *((void *)this + 11) = &unk_1F211A530;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 27) = 0;
  return result;
}

{
  double result;

  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 1) = (char *)this + 16;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 8) = 3;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 18) = 0;
  *(void *)this = &unk_1F211A4F0;
  *((void *)this + 11) = &unk_1F211A530;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 27) = 0;
  return result;
}

uint64_t siri::dialogengine::ConditionExpression::ConditionExpression(uint64_t a1, const std::string *a2, uint64_t a3, const std::string *a4)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 32) = 3;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = 0;
  *(void *)a1 = &unk_1F211A4F0;
  *(void *)(a1 + 88) = &unk_1F211A530;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  siri::dialogengine::ConditionExpression::SetName(a1, a2);
  siri::dialogengine::ConditionExpression::SetOperator(a1, a3);
  siri::dialogengine::ConditionExpression::SetValue(a1, a4);
  return a1;
}

void sub_1C5D4B974(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 223) < 0) {
    operator delete(*(void **)(v1 + 200));
  }
  if (*(char *)(v1 + 199) < 0) {
    operator delete(*(void **)(v1 + 176));
  }
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*v3);
  }
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  siri::dialogengine::ConditionEntry::~ConditionEntry((void **)v1);
  _Unwind_Resume(a1);
}

double siri::dialogengine::ConditionExpression::SetName(uint64_t a1, const std::string *a2)
{
  siri::dialogengine::StringTrim(" \t\n\r", a2, &v5);
  int v3 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*v3);
  }
  double result = *(double *)&v5.__r_.__value_.__l.__data_;
  *(_OWORD *)int v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(void *)(a1 + 168) = *((void *)&v5.__r_.__value_.__l + 2);
  return result;
}

double siri::dialogengine::ConditionExpression::SetOperator(uint64_t a1, uint64_t a2)
{
  siri::dialogengine::GetCanonicalOperator(a2, &v5);
  int v3 = (void **)(a1 + 176);
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*v3);
  }
  double result = *(double *)&v5.__r_.__value_.__l.__data_;
  *(_OWORD *)int v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(void *)(a1 + 192) = *((void *)&v5.__r_.__value_.__l + 2);
  return result;
}

double siri::dialogengine::ConditionExpression::SetValue(uint64_t a1, const std::string *a2)
{
  siri::dialogengine::StringTrim(" \t\n\r", a2, &v5);
  int v3 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*v3);
  }
  double result = *(double *)&v5.__r_.__value_.__l.__data_;
  *(_OWORD *)int v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(void *)(a1 + 216) = *((void *)&v5.__r_.__value_.__l + 2);
  return result;
}

void siri::dialogengine::ConditionExpression::GetName(siri::dialogengine::ConditionExpression *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 175) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 19), *((void *)this + 20));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 152);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 21);
  }
}

void siri::dialogengine::ConditionExpression::GetOperator(siri::dialogengine::ConditionExpression *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 199) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 22), *((void *)this + 23));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 11);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 24);
  }
}

void siri::dialogengine::ConditionExpression::GetValue(siri::dialogengine::ConditionExpression *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 223) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 25), *((void *)this + 26));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 27);
  }
}

void YAML::EmitFromEvents::OnMapEnd(YAML::EmitFromEvents *this)
{
  int v2 = (YAML::Emitter *)*((void *)this + 1);
  if (**(unsigned char **)v2) {
    YAML::Emitter::EmitEndMap(v2);
  }
  uint64_t v3 = *((void *)this + 7) - 1;
  if (*(_DWORD *)(*(void *)(*((void *)this + 3)
                             + (((unint64_t)(v3 + *((void *)this + 6)) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v3 + *((void *)this + 6)) & 0x3FF)) != 1)
    __assert_rtn("OnMapEnd", "emitfromevents.cpp", 92, "m_stateStack.top() == State::WaitingForKey");
  *((void *)this + 7) = v3;
  std::deque<YAML::EmitFromEvents::State::value>::__maybe_remove_back_spare[abi:ne180100]((void *)this + 2);
}

void std::deque<YAML::EmitFromEvents::State::value>::__maybe_remove_back_spare[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = ((v1 - v2) << 7) - 1;
  }
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x800)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

void YAML::EmitFromEvents::OnMapStart(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5)
{
  YAML::EmitFromEvents::BeginNode((YAML::Emitter *)a1);
  YAML::EmitFromEvents::EmitProps(a1, a3, a4);
  if (a5 == 1)
  {
    uint64_t v9 = 24;
  }
  else
  {
    if (a5 != 2) {
      goto LABEL_6;
    }
    uint64_t v9 = 23;
  }
  YAML::Emitter::SetLocalValue(*(YAML::Emitter **)(a1 + 8), v9);
LABEL_6:
  int v10 = *(YAML::Emitter **)(a1 + 8);
  if (**(unsigned char **)v10) {
    YAML::Emitter::EmitBeginMap(v10);
  }
  int v11 = 1;
  std::deque<YAML::EmitFromEvents::State::value>::push_back((void *)(a1 + 16), &v11);
}

YAML::Emitter *YAML::EmitFromEvents::BeginNode(YAML::Emitter *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (v1)
  {
    uint64_t v2 = this;
    int v3 = *(_DWORD *)(*(void *)(*((void *)this + 3)
                               + (((unint64_t)(v1 + *((void *)this + 6) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v1 + *((void *)this + 6) - 1) & 0x3FF));
    if (v3 == 1)
    {
      int v4 = 2;
      uint64_t v5 = 27;
    }
    else
    {
      if (v3 != 2) {
        return this;
      }
      int v4 = 1;
      uint64_t v5 = 28;
    }
    this = YAML::Emitter::SetLocalValue(*((YAML::Emitter **)this + 1), v5);
    unint64_t v6 = *((void *)v2 + 7) + *((void *)v2 + 6) - 1;
    *(_DWORD *)(*(void *)(*((void *)v2 + 3) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF)) = v4;
  }
  return this;
}

void YAML::EmitFromEvents::EmitProps(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if ((char)a2[23] < 0)
  {
    std::string::size_type v7 = *((void *)a2 + 1);
    if (!v7) {
      goto LABEL_21;
    }
    if (v7 == 1)
    {
      char v8 = *(const std::string::value_type **)a2;
      int v9 = *(unsigned __int8 *)v8;
      if (v9 == 33 || v9 == 63) {
        goto LABEL_21;
      }
      unint64_t v6 = *(YAML::Emitter **)(a1 + 8);
      std::string::size_type v7 = 1;
    }
    else
    {
      unint64_t v6 = *(YAML::Emitter **)(a1 + 8);
      char v8 = *(const std::string::value_type **)a2;
    }
    std::string::__init_copy_ctor_external(&v12, v8, v7);
  }
  else
  {
    if (!a2[23]) {
      goto LABEL_21;
    }
    if (a2[23] == 1)
    {
      int v5 = *a2;
      if (v5 == 33 || v5 == 63) {
        goto LABEL_21;
      }
    }
    unint64_t v6 = *(YAML::Emitter **)(a1 + 8);
    std::string v12 = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(&v16, "");
  YAML::_Tag::_Tag(&v13, &v16, (long long *)&v12, 0);
  if (v17 < 0) {
    operator delete((void *)v16);
  }
  YAML::Emitter::Write(v6, (uint64_t)&v13);
  if (v15 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    if (!a3) {
      return;
    }
    goto LABEL_22;
  }
LABEL_21:
  if (!a3) {
    return;
  }
LABEL_22:
  int v10 = *(uint64_t **)(a1 + 8);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v13, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  }
  else {
    std::string v13 = v11;
  }
  YAML::Emitter::Write(v10, (unsigned __int8 *)&v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D4BF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<YAML::EmitFromEvents::State::value>::push_back(void *a1, _DWORD *a2)
{
  int v4 = (char *)a1[2];
  int v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 7) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x400)
    {
      a1[4] = v9 - 1024;
      uint64_t v13 = *(void *)v5;
      std::string v11 = v5 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = (uint64_t)&v4[-*a1] >> 2;
          }
          long long v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v42);
          long long v45 = &v43[8 * (v42 >> 2)];
          std::string::size_type v46 = (uint64_t *)a1[1];
          int v4 = v45;
          uint64_t v47 = a1[2] - (void)v46;
          if (v47)
          {
            int v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v48 = 8 * (v47 >> 3);
            std::string v49 = &v43[8 * (v42 >> 2)];
            do
            {
              uint64_t v50 = *v46++;
              *(void *)std::string v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          std::string::size_type v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            int v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          std::string::size_type v21 = &v11[-8 * v20];
          int64_t v22 = v4 - v11;
          if (v4 == v11)
          {
            long long v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            long long v23 = (char *)a1[1];
          }
          int v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(void *)int v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      int v5 = (char *)a1[1];
      uint64_t v8 = a1[5];
      unint64_t v10 = a1[4] + v8;
      goto LABEL_84;
    }
    uint64_t v24 = v6 >> 3;
    long long v25 = (char *)a1[3];
    long long v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      uint64_t v28 = operator new(0x1000uLL);
      std::string::size_type v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = v27 >> 2;
          }
          uint64_t v53 = 2 * v52;
          uint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v52);
          int v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          long long v56 = (uint64_t *)a1[1];
          uint64_t v57 = v5;
          uint64_t v58 = a1[2] - (void)v56;
          if (v58)
          {
            uint64_t v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v59 = 8 * (v58 >> 3);
            std::string v60 = v5;
            do
            {
              uint64_t v61 = *v56++;
              *(void *)std::string v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          char v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            int v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v29;
        unsigned __int8 v63 = (char *)a1[1];
        std::string v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        uint64_t v65 = *((void *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          uint64_t v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = (uint64_t)&v64[-*a1] >> 2;
            }
            int v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v97);
            std::string v100 = &v98[8 * (v97 >> 2)];
            int v101 = (uint64_t *)a1[1];
            std::string v64 = v100;
            uint64_t v102 = a1[2] - (void)v101;
            if (v102)
            {
              std::string v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v103 = 8 * (v102 >> 3);
              std::string v104 = &v98[8 * (v97 >> 2)];
              do
              {
                uint64_t v105 = *v101++;
                *(void *)std::string v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            long long v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              std::string v64 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v16 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v16) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            uint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            int v72 = &v63[-8 * v71];
            int64_t v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              unsigned __int8 v63 = (char *)a1[1];
            }
            std::string v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(void *)std::string v64 = v65;
      }
      else
      {
        *(void *)int v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v27 >> 2;
    }
    long long v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v30);
    uint64_t v33 = v32;
    std::string v34 = &v31[8 * v24];
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v34;
    long long v110 = v35;
    std::string v36 = operator new(0x1000uLL);
    *(void *)&long long v37 = v34;
    *((void *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      uint64_t v38 = 8 * v24;
      *(void *)&long long v39 = v110;
      if (v6 >= 1)
      {
        uint64_t v40 = v38 >> 3;
        if (v40 >= -1) {
          unint64_t v41 = v40 + 1;
        }
        else {
          unint64_t v41 = v40 + 2;
        }
        v34 -= 8 * (v41 >> 1);
        *(void *)&long long v37 = v34;
        *((void *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      uint64_t v74 = v38 >> 2;
      if (v4 == v5) {
        unint64_t v75 = 1;
      }
      else {
        unint64_t v75 = v74;
      }
      uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v75);
      std::string v34 = &v76[8 * (v75 >> 2)];
      *(void *)&long long v39 = v76;
      *((void *)&v39 + 1) = v34;
      *(void *)&long long v37 = v34;
      *((void *)&v37 + 1) = &v76[8 * v77];
      if (!v31) {
        goto LABEL_56;
      }
      long long v107 = v37;
      long long v110 = v39;
      operator delete(v31);
      long long v37 = v107;
    }
    long long v39 = v110;
LABEL_56:
    *(void *)std::string v34 = v36;
    *(void *)&long long v37 = v37 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      uint64_t v79 = (void *)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1) == (void)v39)
      {
        int v81 = (unsigned char *)v37;
        if ((unint64_t)v37 >= *((void *)&v37 + 1))
        {
          if (*((void *)&v37 + 1) == *((void *)&v39 + 1)) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = (uint64_t)(*((void *)&v37 + 1) - *((void *)&v39 + 1)) >> 2;
          }
          int v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v86);
          int v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v89 = v80;
          uint64_t v90 = v81 - (unsigned char *)v79;
          if (v81 != (unsigned char *)v79)
          {
            uint64_t v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v91 = 8 * (v90 >> 3);
            uint64_t v92 = v80;
            uint64_t v93 = v79;
            do
            {
              uint64_t v94 = *v93++;
              *(void *)uint64_t v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(void *)&long long v39 = v87;
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = v89;
          *((void *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            long long v108 = v37;
            long long v112 = v39;
            operator delete(v79);
            long long v37 = v108;
            long long v39 = v112;
          }
        }
        else
        {
          uint64_t v82 = (uint64_t)(*((void *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1) {
            uint64_t v83 = v82 + 1;
          }
          else {
            uint64_t v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v85 = v37 + 8 * (v83 >> 1);
          int v80 = (char *)(v85 - (v37 - *((void *)&v39 + 1)));
          if ((void)v37 == *((void *)&v39 + 1))
          {
            int v81 = (unsigned char *)*((void *)&v39 + 1);
          }
          else
          {
            uint64_t v109 = *((void *)&v37 + 1);
            uint64_t v111 = v39;
            memmove((void *)(v85 - (v37 - *((void *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((void *)&v39 + 1));
            *((void *)&v37 + 1) = v109;
            *(void *)&long long v39 = v111;
          }
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = &v81[8 * v84];
        }
      }
      else
      {
        int v80 = (char *)*((void *)&v39 + 1);
      }
      uint64_t v95 = *(void *)(i - 8);
      *((void *)v80 - 1) = v95;
      *((void *)&v39 + 1) -= 8;
    }
    int v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96) {
      operator delete(v96);
    }
    goto LABEL_83;
  }
LABEL_84:
  *(_DWORD *)(*(void *)&v5[(v10 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v10 & 0x3FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_1C5D4C4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

std::string *YAML::_Tag::_Tag(std::string *this, long long *a2, long long *a3, int a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v8 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  return this;
}

void sub_1C5D4C5B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::ToString(_anonymous_namespace_ *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v3);
  std::ostream::operator<<();
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E4FBA408];
  uint64_t v1 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v3 + *(void *)(v3[0] - 2std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v3[2] = v1;
  v3[3] = MEMORY[0x1E4FBA470] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8796CC0](&v5);
}

void sub_1C5D4C744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 2std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 4)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 2std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 4)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 2std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 4)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1C5D4CA08(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1C8796CC0](v1);
  _Unwind_Resume(a1);
}

void YAML::EmitFromEvents::OnSequenceEnd(YAML::EmitFromEvents *this)
{
  uint64_t v2 = (YAML::Emitter *)*((void *)this + 1);
  if (**(unsigned char **)v2) {
    YAML::Emitter::EmitEndSeq(v2);
  }
  uint64_t v3 = *((void *)this + 7) - 1;
  if (*(_DWORD *)(*(void *)(*((void *)this + 3)
                             + (((unint64_t)(v3 + *((void *)this + 6)) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v3 + *((void *)this + 6)) & 0x3FF)))
    __assert_rtn("OnSequenceEnd", "emitfromevents.cpp", 68, "m_stateStack.top() == State::WaitingForSequenceEntry");
  *((void *)this + 7) = v3;
  std::deque<YAML::EmitFromEvents::State::value>::__maybe_remove_back_spare[abi:ne180100]((void *)this + 2);
}

void YAML::EmitFromEvents::OnSequenceStart(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5)
{
  YAML::EmitFromEvents::BeginNode((YAML::Emitter *)a1);
  YAML::EmitFromEvents::EmitProps(a1, a3, a4);
  if (a5 == 1)
  {
    uint64_t v9 = 24;
  }
  else
  {
    if (a5 != 2) {
      goto LABEL_6;
    }
    uint64_t v9 = 23;
  }
  YAML::Emitter::SetLocalValue(*(YAML::Emitter **)(a1 + 8), v9);
LABEL_6:
  uint64_t v10 = *(YAML::Emitter **)(a1 + 8);
  if (**(unsigned char **)v10) {
    YAML::Emitter::EmitBeginSeq(v10);
  }
  int v11 = 0;
  std::deque<YAML::EmitFromEvents::State::value>::push_back((void *)(a1 + 16), &v11);
}

uint64_t YAML::EmitFromEvents::OnScalar(YAML::Emitter *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, char *a5)
{
  YAML::EmitFromEvents::BeginNode(a1);
  YAML::EmitFromEvents::EmitProps((uint64_t)a1, a3, a4);
  uint64_t v9 = *((void *)a1 + 1);
  return YAML::Emitter::Write(v9, a5);
}

void YAML::EmitFromEvents::OnAlias(YAML::Emitter *a1)
{
  YAML::EmitFromEvents::BeginNode(a1);
  uint64_t v2 = (uint64_t *)*((void *)a1 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v4 = __p;
  }
  YAML::Emitter::Write(v2, (unsigned __int8 *)&v4);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D4CC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *YAML::EmitFromEvents::OnNull(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  YAML::EmitFromEvents::BeginNode((YAML::Emitter *)a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  YAML::EmitFromEvents::EmitProps((uint64_t)a1, (unsigned __int8 *)__p, a3);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return YAML::Emitter::Write(a1[1]);
}

void sub_1C5D4CCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void YAML::EmitFromEvents::~EmitFromEvents(YAML::EmitFromEvents *this)
{
  *(void *)this = &unk_1F211C1B8;
  std::deque<YAML::EmitFromEvents::State::value>::~deque[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F211C1B8;
  std::deque<YAML::EmitFromEvents::State::value>::~deque[abi:ne180100]((uint64_t)this + 16);
}

uint64_t std::deque<YAML::EmitFromEvents::State::value>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      char v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double YAML::EmitFromEvents::EmitFromEvents(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F211C1B8;
  *(void *)(a1 + 8) = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_1F211C1B8;
  *(void *)(a1 + 8) = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return result;
}

void siri::dialogengine::DialogUser::GetPersonData(siri::dialogengine::DialogUser *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  siri::dialogengine::DialogPerson::GetPersonData(a2, a3);
  uint64_t v7 = *(unsigned __int8 *)(a3 + 47);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 32);
  }
  if (v7) {
    goto LABEL_25;
  }
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (v8) {
    goto LABEL_25;
  }
  uint64_t v9 = *(unsigned __int8 *)(a3 + 383);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a3 + 368);
  }
  if (v9) {
    goto LABEL_25;
  }
  uint64_t v10 = *(unsigned __int8 *)(a3 + 359);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 344);
  }
  if (v10) {
    goto LABEL_25;
  }
  uint64_t v11 = *(unsigned __int8 *)(a3 + 215);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a3 + 200);
  }
  if (v11) {
    goto LABEL_25;
  }
  uint64_t v12 = *(unsigned __int8 *)(a3 + 191);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a3 + 176);
  }
  if (v12) {
    goto LABEL_25;
  }
  uint64_t v13 = *(unsigned __int8 *)(a3 + 551);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(a3 + 536);
  }
  if (v13) {
    goto LABEL_25;
  }
  uint64_t v14 = *(unsigned __int8 *)(a3 + 527);
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a3 + 512);
  }
  if (v14)
  {
LABEL_25:
    std::string::basic_string[abi:ne180100]<0>(&__p, "useConversationalName");
    uint64_t v15 = (void *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((void *)((char *)a2 + 80) == v15)
    {
      BOOL v18 = 1;
    }
    else
    {
      uint64_t v17 = v15[7];
      BOOL v16 = (std::__shared_weak_count *)v15[8];
      if (v16)
      {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v18 = v17 == 0;
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      else
      {
        BOOL v18 = v17 == 0;
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v18) {
        return;
      }
    }
    else if (!v18)
    {
      return;
    }
  }
  else
  {
    bzero(&__p, 0x409uLL);
    siri::dialogengine::PersonData::operator=(a3, (uint64_t)&__p);
    if (v101 < 0) {
      operator delete(v100);
    }
    if (v99 < 0) {
      operator delete(v98);
    }
    if (v97 < 0) {
      operator delete(v96);
    }
    if (v95 < 0) {
      operator delete(v94);
    }
    if (v93 < 0) {
      operator delete(v92);
    }
    if (v91 < 0) {
      operator delete(v90);
    }
    if (v89 < 0) {
      operator delete(v88);
    }
    if (v87 < 0) {
      operator delete(v86);
    }
    if (v85 < 0) {
      operator delete(v84);
    }
    if (v83 < 0) {
      operator delete(v82);
    }
    if (v81 < 0) {
      operator delete(v80);
    }
    if (v79 < 0) {
      operator delete(v78);
    }
    if (v77 < 0) {
      operator delete(v76);
    }
    if (v75 < 0) {
      operator delete(v74);
    }
    if (v73 < 0) {
      operator delete(v72);
    }
    if (v71 < 0) {
      operator delete(v70);
    }
    if (v69 < 0) {
      operator delete(v68);
    }
    if (v67 < 0) {
      operator delete(v66);
    }
    if (v65 < 0) {
      operator delete(v64);
    }
    if (v63 < 0) {
      operator delete(v62);
    }
    if (v61 < 0) {
      operator delete(v60);
    }
    if (v59 < 0) {
      operator delete(v58);
    }
    if (v57 < 0) {
      operator delete(v56);
    }
    if (v55 < 0) {
      operator delete(v54);
    }
    if (v53 < 0) {
      operator delete(v52);
    }
    if (v51 < 0) {
      operator delete(v50);
    }
    if (v49 < 0) {
      operator delete(v48);
    }
    if (v47 < 0) {
      operator delete(v46);
    }
    if (v45 < 0) {
      operator delete(v44);
    }
    if (v43 < 0) {
      operator delete(v42);
    }
    if (v41 < 0) {
      operator delete(v40);
    }
    if (v39 < 0) {
      operator delete(v37);
    }
    if (v36 < 0) {
      operator delete(v35);
    }
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (v30 < 0) {
      operator delete(v29);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__p, (siri::dialogengine::DialogUser *)((char *)this + 8));
    char v19 = v38;
    siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p.__r_.__value_.__l.__data_);
    if ((v19 & 2) == 0) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(v20, "John");
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, (uint64_t)v20);
    std::string::operator=((std::string *)a3, &__p);
    std::string::operator=((std::string *)(a3 + 24), &v23);
    std::string::operator=((std::string *)(a3 + 48), &v24);
    std::string::operator=((std::string *)(a3 + 72), &v25);
    std::string::operator=((std::string *)(a3 + 96), &v26);
    std::string::operator=((std::string *)(a3 + 120), &v27);
    std::string::operator=((std::string *)(a3 + 144), &v28);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v20, "Appleseed");
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, (uint64_t)v20);
    std::string::operator=((std::string *)(a3 + 336), &__p);
    std::string::operator=((std::string *)(a3 + 360), &v23);
    std::string::operator=((std::string *)(a3 + 384), &v24);
    std::string::operator=((std::string *)(a3 + 408), &v25);
    std::string::operator=((std::string *)(a3 + 432), &v26);
    std::string::operator=((std::string *)(a3 + 456), &v27);
    std::string::operator=((std::string *)(a3 + 480), &v28);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::SpeakableString::SetString(a3 + 168, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(v20, "John");
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, (uint64_t)v20);
    std::string::operator=((std::string *)(a3 + 504), &__p);
    std::string::operator=((std::string *)(a3 + 528), &v23);
    std::string::operator=((std::string *)(a3 + 552), &v24);
    std::string::operator=((std::string *)(a3 + 576), &v25);
    std::string::operator=((std::string *)(a3 + 600), &v26);
    std::string::operator=((std::string *)(a3 + 624), &v27);
    std::string::operator=((std::string *)(a3 + 648), &v28);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (*(char *)(a3 + 1031) < 0)
    {
      **(unsigned char **)(a3 + 1008) = 0;
      *(void *)(a3 + 1016) = 0;
    }
    else
    {
      *(unsigned char *)(a3 + 1008) = 0;
      *(unsigned char *)(a3 + 1031) = 0;
    }
  }
  *(unsigned char *)(a3 + 1032) = 1;
}

void sub_1C5D4DAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::PersonData::~PersonData(v21);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PersonData::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
  std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  std::string::operator=((std::string *)(a1 + 240), (const std::string *)(a2 + 240));
  std::string::operator=((std::string *)(a1 + 264), (const std::string *)(a2 + 264));
  std::string::operator=((std::string *)(a1 + 288), (const std::string *)(a2 + 288));
  std::string::operator=((std::string *)(a1 + 312), (const std::string *)(a2 + 312));
  std::string::operator=((std::string *)(a1 + 336), (const std::string *)(a2 + 336));
  std::string::operator=((std::string *)(a1 + 360), (const std::string *)(a2 + 360));
  std::string::operator=((std::string *)(a1 + 384), (const std::string *)(a2 + 384));
  std::string::operator=((std::string *)(a1 + 408), (const std::string *)(a2 + 408));
  std::string::operator=((std::string *)(a1 + 432), (const std::string *)(a2 + 432));
  std::string::operator=((std::string *)(a1 + 456), (const std::string *)(a2 + 456));
  std::string::operator=((std::string *)(a1 + 480), (const std::string *)(a2 + 480));
  std::string::operator=((std::string *)(a1 + 504), (const std::string *)(a2 + 504));
  std::string::operator=((std::string *)(a1 + 528), (const std::string *)(a2 + 528));
  std::string::operator=((std::string *)(a1 + 552), (const std::string *)(a2 + 552));
  std::string::operator=((std::string *)(a1 + 576), (const std::string *)(a2 + 576));
  std::string::operator=((std::string *)(a1 + 600), (const std::string *)(a2 + 600));
  std::string::operator=((std::string *)(a1 + 624), (const std::string *)(a2 + 624));
  std::string::operator=((std::string *)(a1 + 648), (const std::string *)(a2 + 648));
  std::string::operator=((std::string *)(a1 + 672), (const std::string *)(a2 + 672));
  std::string::operator=((std::string *)(a1 + 696), (const std::string *)(a2 + 696));
  std::string::operator=((std::string *)(a1 + 720), (const std::string *)(a2 + 720));
  std::string::operator=((std::string *)(a1 + 744), (const std::string *)(a2 + 744));
  std::string::operator=((std::string *)(a1 + 768), (const std::string *)(a2 + 768));
  std::string::operator=((std::string *)(a1 + 792), (const std::string *)(a2 + 792));
  std::string::operator=((std::string *)(a1 + 816), (const std::string *)(a2 + 816));
  std::string::operator=((std::string *)(a1 + 840), (const std::string *)(a2 + 840));
  std::string::operator=((std::string *)(a1 + 864), (const std::string *)(a2 + 864));
  std::string::operator=((std::string *)(a1 + 888), (const std::string *)(a2 + 888));
  std::string::operator=((std::string *)(a1 + 912), (const std::string *)(a2 + 912));
  std::string::operator=((std::string *)(a1 + 936), (const std::string *)(a2 + 936));
  std::string::operator=((std::string *)(a1 + 960), (const std::string *)(a2 + 960));
  std::string::operator=((std::string *)(a1 + 984), (const std::string *)(a2 + 984));
  unint64_t v4 = (void **)(a1 + 1008);
  if (*(char *)(a1 + 1031) < 0) {
    operator delete(*v4);
  }
  long long v5 = *(_OWORD *)(a2 + 1008);
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(_OWORD *)unint64_t v4 = v5;
  *(unsigned char *)(a2 + 1031) = 0;
  *(unsigned char *)(a2 + 1008) = 0;
  *(unsigned char *)(a1 + 1032) = *(unsigned char *)(a2 + 1032);
  return a1;
}

void siri::dialogengine::PersonData::~PersonData(void **this)
{
  if (*((char *)this + 1031) < 0) {
    operator delete(this[126]);
  }
  siri::dialogengine::SpeakableString::~SpeakableString(this + 105);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 84);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 63);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 42);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 21);
  siri::dialogengine::SpeakableString::~SpeakableString(this);
}

void siri::dialogengine::DialogUser::toString(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)v6);
  siri::dialogengine::DialogPerson::GetToString(this, a2, v6, v5);
}

void sub_1C5D4E140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void siri::dialogengine::DialogUser::givenName(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&__str);
  siri::dialogengine::SpeakableString::SpeakableString(&v89, (const siri::dialogengine::SpeakableString *)&__str);
  if (v88 < 0) {
    operator delete(__p);
  }
  if (v86 < 0) {
    operator delete(v85);
  }
  if (v84 < 0) {
    operator delete(v83);
  }
  if (v82 < 0) {
    operator delete(v81);
  }
  if (v80 < 0) {
    operator delete(v79);
  }
  if (v78 < 0) {
    operator delete(v77);
  }
  if (v76 < 0) {
    operator delete(v75);
  }
  if (v74 < 0) {
    operator delete(v73);
  }
  if (v72 < 0) {
    operator delete(v71);
  }
  if (v70 < 0) {
    operator delete(v69);
  }
  if (v68 < 0) {
    operator delete(v67);
  }
  if (v66 < 0) {
    operator delete(v65);
  }
  if (v64 < 0) {
    operator delete(v63);
  }
  if (v62 < 0) {
    operator delete(v61);
  }
  if (v60 < 0) {
    operator delete(v59);
  }
  if (v58 < 0) {
    operator delete(v57);
  }
  if (v56 < 0) {
    operator delete(v55);
  }
  if (v54 < 0) {
    operator delete(v53);
  }
  if (v52 < 0) {
    operator delete(v51);
  }
  if (v50 < 0) {
    operator delete(v49);
  }
  if (v48 < 0) {
    operator delete(v47);
  }
  if (v46 < 0) {
    operator delete(v45);
  }
  if (v44 < 0) {
    operator delete(v43);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  if (v40 < 0) {
    operator delete(v39);
  }
  if (v38 < 0) {
    operator delete(v37);
  }
  if (v36 < 0) {
    operator delete(v35);
  }
  if (v34 < 0) {
    operator delete(v33);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v6 < 0) {
    operator delete(v5);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v3, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  }
  else {
    std::string v3 = v90;
  }
  siri::dialogengine::DialogPerson::FormatSpeakableName((uint64_t)&v3, &__str);
  std::string::operator=(&v90, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_1C5D4E588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v20 - 200));
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogUser::middleName(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&__str);
  siri::dialogengine::SpeakableString::SpeakableString(&v89, (const siri::dialogengine::SpeakableString *)&v17);
  if (v88 < 0) {
    operator delete(__p);
  }
  if (v86 < 0) {
    operator delete(v85);
  }
  if (v84 < 0) {
    operator delete(v83);
  }
  if (v82 < 0) {
    operator delete(v81);
  }
  if (v80 < 0) {
    operator delete(v79);
  }
  if (v78 < 0) {
    operator delete(v77);
  }
  if (v76 < 0) {
    operator delete(v75);
  }
  if (v74 < 0) {
    operator delete(v73);
  }
  if (v72 < 0) {
    operator delete(v71);
  }
  if (v70 < 0) {
    operator delete(v69);
  }
  if (v68 < 0) {
    operator delete(v67);
  }
  if (v66 < 0) {
    operator delete(v65);
  }
  if (v64 < 0) {
    operator delete(v63);
  }
  if (v62 < 0) {
    operator delete(v61);
  }
  if (v60 < 0) {
    operator delete(v59);
  }
  if (v58 < 0) {
    operator delete(v57);
  }
  if (v56 < 0) {
    operator delete(v55);
  }
  if (v54 < 0) {
    operator delete(v53);
  }
  if (v52 < 0) {
    operator delete(v51);
  }
  if (v50 < 0) {
    operator delete(v49);
  }
  if (v48 < 0) {
    operator delete(v47);
  }
  if (v46 < 0) {
    operator delete(v45);
  }
  if (v44 < 0) {
    operator delete(v43);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  if (v40 < 0) {
    operator delete(v39);
  }
  if (v38 < 0) {
    operator delete(v37);
  }
  if (v36 < 0) {
    operator delete(v35);
  }
  if (v34 < 0) {
    operator delete(v33);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v6 < 0) {
    operator delete(v5);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v3, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  }
  else {
    std::string v3 = v90;
  }
  siri::dialogengine::DialogPerson::FormatSpeakableName((uint64_t)&v3, &__str);
  std::string::operator=(&v90, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_1C5D4EA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v20 - 200));
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogUser::familyName(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&__str);
  siri::dialogengine::SpeakableString::SpeakableString(&v89, (const siri::dialogengine::SpeakableString *)&v31);
  if (v88 < 0) {
    operator delete(__p);
  }
  if (v86 < 0) {
    operator delete(v85);
  }
  if (v84 < 0) {
    operator delete(v83);
  }
  if (v82 < 0) {
    operator delete(v81);
  }
  if (v80 < 0) {
    operator delete(v79);
  }
  if (v78 < 0) {
    operator delete(v77);
  }
  if (v76 < 0) {
    operator delete(v75);
  }
  if (v74 < 0) {
    operator delete(v73);
  }
  if (v72 < 0) {
    operator delete(v71);
  }
  if (v70 < 0) {
    operator delete(v69);
  }
  if (v68 < 0) {
    operator delete(v67);
  }
  if (v66 < 0) {
    operator delete(v65);
  }
  if (v64 < 0) {
    operator delete(v63);
  }
  if (v62 < 0) {
    operator delete(v61);
  }
  if (v60 < 0) {
    operator delete(v59);
  }
  if (v58 < 0) {
    operator delete(v57);
  }
  if (v56 < 0) {
    operator delete(v55);
  }
  if (v54 < 0) {
    operator delete(v53);
  }
  if (v52 < 0) {
    operator delete(v51);
  }
  if (v50 < 0) {
    operator delete(v49);
  }
  if (v48 < 0) {
    operator delete(v47);
  }
  if (v46 < 0) {
    operator delete(v45);
  }
  if (v44 < 0) {
    operator delete(v43);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  if (v40 < 0) {
    operator delete(v39);
  }
  if (v38 < 0) {
    operator delete(v37);
  }
  if (v36 < 0) {
    operator delete(v35);
  }
  if (v34 < 0) {
    operator delete(v33);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v6 < 0) {
    operator delete(v5);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v3, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  }
  else {
    std::string v3 = v90;
  }
  siri::dialogengine::DialogPerson::FormatSpeakableName((uint64_t)&v3, &__str);
  std::string::operator=(&v90, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_1C5D4EF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v20 - 200));
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogUser::nickname(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&__str);
  siri::dialogengine::SpeakableString::SpeakableString(&v89, (const siri::dialogengine::SpeakableString *)&v45);
  if (v88 < 0) {
    operator delete(__p);
  }
  if (v86 < 0) {
    operator delete(v85);
  }
  if (v84 < 0) {
    operator delete(v83);
  }
  if (v82 < 0) {
    operator delete(v81);
  }
  if (v80 < 0) {
    operator delete(v79);
  }
  if (v78 < 0) {
    operator delete(v77);
  }
  if (v76 < 0) {
    operator delete(v75);
  }
  if (v74 < 0) {
    operator delete(v73);
  }
  if (v72 < 0) {
    operator delete(v71);
  }
  if (v70 < 0) {
    operator delete(v69);
  }
  if (v68 < 0) {
    operator delete(v67);
  }
  if (v66 < 0) {
    operator delete(v65);
  }
  if (v64 < 0) {
    operator delete(v63);
  }
  if (v62 < 0) {
    operator delete(v61);
  }
  if (v60 < 0) {
    operator delete(v59);
  }
  if (v58 < 0) {
    operator delete(v57);
  }
  if (v56 < 0) {
    operator delete(v55);
  }
  if (v54 < 0) {
    operator delete(v53);
  }
  if (v52 < 0) {
    operator delete(v51);
  }
  if (v50 < 0) {
    operator delete(v49);
  }
  if (v48 < 0) {
    operator delete(v47);
  }
  if (v46 < 0) {
    operator delete(v45);
  }
  if (v44 < 0) {
    operator delete(v43);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  if (v40 < 0) {
    operator delete(v39);
  }
  if (v38 < 0) {
    operator delete(v37);
  }
  if (v36 < 0) {
    operator delete(v35);
  }
  if (v34 < 0) {
    operator delete(v33);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v6 < 0) {
    operator delete(v5);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v3, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  }
  else {
    std::string v3 = v90;
  }
  siri::dialogengine::DialogPerson::FormatSpeakableName((uint64_t)&v3, &__str);
  std::string::operator=(&v90, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_1C5D4F404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v20 - 200));
  _Unwind_Resume(a1);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogUser::simpleName(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&v10);
  siri::dialogengine::DialogPerson::GetSimpleName(this, a2, &v10, v5);
  char v8 = siri::dialogengine::DialogPerson::RemoveEmojis(v6, v7);
  if (v94 < 0) {
    operator delete(__p);
  }
  if (v92 < 0) {
    operator delete(v91);
  }
  if (v90 < 0) {
    operator delete(v89);
  }
  if (v88 < 0) {
    operator delete(v87);
  }
  if (v86 < 0) {
    operator delete(v85);
  }
  if (v84 < 0) {
    operator delete(v83);
  }
  if (v82 < 0) {
    operator delete(v81);
  }
  if (v80 < 0) {
    operator delete(v79);
  }
  if (v78 < 0) {
    operator delete(v77);
  }
  if (v76 < 0) {
    operator delete(v75);
  }
  if (v74 < 0) {
    operator delete(v73);
  }
  if (v72 < 0) {
    operator delete(v71);
  }
  if (v70 < 0) {
    operator delete(v69);
  }
  if (v68 < 0) {
    operator delete(v67);
  }
  if (v66 < 0) {
    operator delete(v65);
  }
  if (v64 < 0) {
    operator delete(v63);
  }
  if (v62 < 0) {
    operator delete(v61);
  }
  if (v60 < 0) {
    operator delete(v59);
  }
  if (v58 < 0) {
    operator delete(v57);
  }
  if (v56 < 0) {
    operator delete(v55);
  }
  if (v54 < 0) {
    operator delete(v53);
  }
  if (v52 < 0) {
    operator delete(v51);
  }
  if (v50 < 0) {
    operator delete(v49);
  }
  if (v48 < 0) {
    operator delete(v47);
  }
  if (v46 < 0) {
    operator delete(v45);
  }
  if (v44 < 0) {
    operator delete(v43);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  if (v40 < 0) {
    operator delete(v39);
  }
  if (v38 < 0) {
    operator delete(v37);
  }
  if (v36 < 0) {
    operator delete(v35);
  }
  if (v34 < 0) {
    operator delete(v33);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_1C5D4F7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void siri::dialogengine::DialogUser::pronoun(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void sub_1C5D4FB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 - 65) < 0) {
    operator delete(*(void **)(v17 - 88));
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogUser::groundingIfNeeded(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v8, (siri::dialogengine::DialogUser *)((char *)this + 8));
  if ((v9 & 2) == 0)
  {
    if (v10) {
      BOOL v6 = v11 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6) {
      siri::dialogengine::DialogUser::toString(this, a2, v5);
    }
  }
  siri::dialogengine::RequestInfo::~RequestInfo(v8);
  return 0;
}

void sub_1C5D4FC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t siri::dialogengine::DialogUser::groundingAlwaysIfMultiUser(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v7, (siri::dialogengine::DialogUser *)((char *)this + 8));
  if ((v8 & 2) == 0 && v9) {
    siri::dialogengine::DialogUser::toString(this, a2, v5);
  }
  siri::dialogengine::RequestInfo::~RequestInfo(v7);
  return 0;
}

void sub_1C5D4FD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void siri::dialogengine::DialogUser::formatWithHandle(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&v6);
  siri::dialogengine::DialogPerson::GetFormatWithHandle(this, a2, &v6, v5);
}

void sub_1C5D5001C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void siri::dialogengine::DialogUser::conversationalName(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)v6);
  siri::dialogengine::DialogPerson::GetConversationalName(this, a2, (const siri::dialogengine::VariableObject *)v6, v5);
}

void sub_1C5D50338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void siri::dialogengine::DialogUser::isUsingNickname(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v5, (siri::dialogengine::DialogUser *)((char *)this + 8));
  std::string::basic_string[abi:ne180100]<0>(__p, "userShouldPreferNickname");
  siri::dialogengine::RequestInfo::GetUserSetting((uint64_t)v5, (const void **)__p, &v6);
  siri::dialogengine::StringToBool(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  siri::dialogengine::RequestInfo::~RequestInfo(v5);
  operator new();
}

void sub_1C5D50428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v20, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogUser::isUsingFirstName(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)v3);
  siri::dialogengine::SpeakableString::SpeakableString(&v89, (const siri::dialogengine::SpeakableString *)v3);
  if (v88 < 0) {
    operator delete(__p);
  }
  if (v86 < 0) {
    operator delete(v85);
  }
  if (v84 < 0) {
    operator delete(v83);
  }
  if (v82 < 0) {
    operator delete(v81);
  }
  if (v80 < 0) {
    operator delete(v79);
  }
  if (v78 < 0) {
    operator delete(v77);
  }
  if (v76 < 0) {
    operator delete(v75);
  }
  if (v74 < 0) {
    operator delete(v73);
  }
  if (v72 < 0) {
    operator delete(v71);
  }
  if (v70 < 0) {
    operator delete(v69);
  }
  if (v68 < 0) {
    operator delete(v67);
  }
  if (v66 < 0) {
    operator delete(v65);
  }
  if (v64 < 0) {
    operator delete(v63);
  }
  if (v62 < 0) {
    operator delete(v61);
  }
  if (v60 < 0) {
    operator delete(v59);
  }
  if (v58 < 0) {
    operator delete(v57);
  }
  if (v56 < 0) {
    operator delete(v55);
  }
  if (v54 < 0) {
    operator delete(v53);
  }
  if (v52 < 0) {
    operator delete(v51);
  }
  if (v50 < 0) {
    operator delete(v49);
  }
  if (v48 < 0) {
    operator delete(v47);
  }
  if (v46 < 0) {
    operator delete(v45);
  }
  if (v44 < 0) {
    operator delete(v43);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  if (v40 < 0) {
    operator delete(v39);
  }
  if (v38 < 0) {
    operator delete(v37);
  }
  if (v36 < 0) {
    operator delete(v35);
  }
  if (v34 < 0) {
    operator delete(v33);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v6 < 0) {
    operator delete(v5);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  operator new();
}

void sub_1C5D5088C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v15, 0x10B3C408E4F17DDLL);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v16 - 200));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Grounding::ShouldGround(uint64_t a1, char *a2, uint64_t a3, unsigned __int8 *a4)
{
  int GroundingMode = siri::dialogengine::GetGroundingMode(a4);
  return siri::dialogengine::Grounding::ShouldGround(a1, a2, a3, GroundingMode);
}

uint64_t siri::dialogengine::GetGroundingMode(unsigned __int8 *a1)
{
  siri::dialogengine::StringSplit(a1, ",", &v31);
  uint64_t v1 = v31;
  uint64_t v2 = v32;
  if (v31 != v32)
  {
    while (1)
    {
      if (*((char *)v1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v1, *((void *)v1 + 1));
      }
      else
      {
        long long v3 = *v1;
        v30.__r_.__value_.__r.__words[2] = *((void *)v1 + 2);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v3;
      }
      siri::dialogengine::StringTrim(" \t\n\r", &v30, &__p);
      siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)v34);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v35 < 0) {
        break;
      }
      uint64_t v4 = 0;
      switch(v35)
      {
        case 4:
          if (*(_DWORD *)v34 != 1701015151) {
            goto LABEL_76;
          }
          uint64_t v4 = 2;
          break;
        case 5:
          if (*(_DWORD *)v34 != 1667856244 || v34[4] != 101) {
            goto LABEL_76;
          }
          uint64_t v4 = 3;
          break;
        case 6:
          if (*(_DWORD *)v34 != 1953724787 || *(unsigned __int16 *)&v34[4] != 28005) {
            goto LABEL_76;
          }
          uint64_t v4 = 1;
          break;
        case 10:
          if (*(void *)v34 != 0x6D69746565726874 || *(unsigned __int16 *)&v34[8] != 29541) {
            goto LABEL_76;
          }
          uint64_t v4 = 4;
          break;
        case 12:
          if (*(void *)v34 != 0x7369687465636E6FLL || *(unsigned int *)&v34[8] != 1801807223) {
            goto LABEL_76;
          }
          uint64_t v4 = 5;
          break;
        case 13:
          if (*(void *)v34 == 0x6968746563697774 && *(void *)&v34[5] == 0x6B65657773696874)
          {
            uint64_t v4 = 6;
          }
          else
          {
            if (*(void *)v34 != 0x7369687465636E6FLL || *(void *)&v34[5] != 0x68746E6F6D736968) {
              goto LABEL_76;
            }
            uint64_t v4 = 8;
          }
          break;
        case 14:
          if (*(void *)v34 != 0x6968746563697774 || *(void *)&v34[6] != 0x68746E6F6D736968) {
            goto LABEL_76;
          }
          uint64_t v4 = 9;
          break;
        case 18:
          if (*(void *)v34 == 0x6D69746565726874
            && *(void *)&v34[8] == 0x6577736968747365
            && *(unsigned __int16 *)&v34[16] == 27493)
          {
            uint64_t v4 = 7;
          }
          else
          {
LABEL_76:
            uint64_t v4 = 0;
          }
          break;
        case 19:
          unint64_t v17 = bswap64(*(unint64_t *)v34);
          unint64_t v18 = 0x746872656574696DLL;
          if (v17 == 0x746872656574696DLL
            && (v18 = 0x6573746869736D6FLL, unint64_t v17 = bswap64(*(unint64_t *)&v34[8]), v17 == 0x6573746869736D6FLL)
            && (v18 = 0x6869736D6F6E7468, unint64_t v17 = bswap64(*(unint64_t *)&v34[11]), v17 == 0x6869736D6F6E7468))
          {
            int v19 = 0;
          }
          else if (v17 < v18)
          {
            int v19 = -1;
          }
          else
          {
            int v19 = 1;
          }
          if (v19) {
            uint64_t v4 = 0;
          }
          else {
            uint64_t v4 = 10;
          }
          break;
        default:
          break;
      }
LABEL_77:
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (v4) {
        goto LABEL_141;
      }
      uint64_t v1 = (long long *)((char *)v1 + 24);
      if (v1 == v2) {
        goto LABEL_140;
      }
    }
    if (*(void *)&v34[8] == 4)
    {
      long long v5 = *(void **)v34;
      if (**(_DWORD **)v34 == 1701015151)
      {
        uint64_t v4 = 2;
        goto LABEL_21;
      }
    }
    else
    {
      if (*(void *)&v34[8] != 6)
      {
        uint64_t v4 = 0;
        long long v5 = *(void **)v34;
        switch(*(void *)&v34[8])
        {
          case 5:
            if (**(_DWORD **)v34 != 1667856244 || *(unsigned char *)(*(void *)v34 + 4) != 101) {
              goto LABEL_20;
            }
            uint64_t v4 = 3;
            break;
          case 0xALL:
            if (**(void **)v34 != 0x6D69746565726874 || *(_WORD *)(*(void *)v34 + 8) != 29541) {
              goto LABEL_20;
            }
            uint64_t v4 = 4;
            break;
          case 0xCLL:
            if (**(void **)v34 != 0x7369687465636E6FLL || *(_DWORD *)(*(void *)v34 + 8) != 1801807223) {
              goto LABEL_20;
            }
            uint64_t v4 = 5;
            break;
          case 0xDLL:
            if (**(void **)v34 == 0x6968746563697774 && *(void *)(*(void *)v34 + 5) == 0x6B65657773696874)
            {
              uint64_t v4 = 6;
            }
            else
            {
              if (**(void **)v34 != 0x7369687465636E6FLL || *(void *)(*(void *)v34 + 5) != 0x68746E6F6D736968) {
                goto LABEL_20;
              }
              uint64_t v4 = 8;
            }
            break;
          case 0xELL:
            if (**(void **)v34 ^ 0x6968746563697774 | *(void *)(*(void *)v34 + 6) ^ 0x68746E6F6D736968) {
              uint64_t v4 = 0;
            }
            else {
              uint64_t v4 = 9;
            }
            break;
          case 0x12:
            if (**(void **)v34 != 0x6D69746565726874
              || *(void *)(*(void *)v34 + 8) != 0x6577736968747365
              || *(_WORD *)(*(void *)v34 + 16) != 27493)
            {
              goto LABEL_20;
            }
            uint64_t v4 = 7;
            break;
          case 0x13:
            unint64_t v26 = bswap64(**(void **)v34);
            unint64_t v27 = 0x746872656574696DLL;
            if (v26 == 0x746872656574696DLL
              && (unint64_t v27 = 0x6573746869736D6FLL,
                  unint64_t v26 = bswap64(*(void *)(*(void *)v34 + 8)),
                  v26 == 0x6573746869736D6FLL)
              && (unint64_t v27 = 0x6869736D6F6E7468,
                  unint64_t v26 = bswap64(*(void *)(*(void *)v34 + 11)),
                  v26 == 0x6869736D6F6E7468))
            {
              int v28 = 0;
            }
            else if (v26 < v27)
            {
              int v28 = -1;
            }
            else
            {
              int v28 = 1;
            }
            if (v28) {
              uint64_t v4 = 0;
            }
            else {
              uint64_t v4 = 10;
            }
            break;
          default:
            goto LABEL_21;
        }
        goto LABEL_21;
      }
      long long v5 = *(void **)v34;
      if (**(_DWORD **)v34 == 1953724787 && *(_WORD *)(*(void *)v34 + 4) == 28005)
      {
        uint64_t v4 = 1;
LABEL_21:
        operator delete(v5);
        goto LABEL_77;
      }
    }
LABEL_20:
    uint64_t v4 = 0;
    goto LABEL_21;
  }
LABEL_140:
  uint64_t v4 = 0;
LABEL_141:
  *(void *)char v34 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
  return v4;
}

void sub_1C5D50EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  a9 = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Grounding::ShouldGround(uint64_t a1, char *a2, uint64_t a3, int a4)
{
  if (!a1) {
    return 1;
  }
  uint64_t v9 = *(void *)(a1 + 504);
  char v8 = *(std::__shared_weak_count **)(a1 + 512);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (!v9)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Ground::ShouldGround called without a loaded CAT file.", a2);
    return 1;
  }
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, (const siri::dialogengine::RequestInfo *)(a1 + 8));
  char v10 = v61;
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p[0].__r_.__value_.__l.__data_);
  if ((v10 & 2) != 0) {
    return 0;
  }
  siri::dialogengine::StringToLower(a3, (uint64_t)__p);
  siri::dialogengine::StringTrim(" \t\n\r", __p, &__str);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  char v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 640), (const void **)a2, (long long **)__p);
  std::string::operator=((std::string *)(v11 + 7), &__str);
  siri::dialogengine::Context::GetUseCaseState((const void ***)a1, v12, (uint64_t)v56);
  siri::dialogengine::DialogStateUseCase::GetGroundingUsage((uint64_t)v56, (const void **)a2, (uint64_t)&v52);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v50, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  }
  else {
    std::string v50 = v55;
  }
  siri::dialogengine::StringToLower((uint64_t)&v50, (uint64_t)&v51);
  siri::dialogengine::StringTrim(" \t\n\r", &v51, __p);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  std::string::size_type v15 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v15 = __p[0].__r_.__value_.__l.__size_;
  }
  if (size != v15)
  {
    BOOL v23 = 1;
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_38;
  }
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v17 = __p;
  }
  else {
    unint64_t v17 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    BOOL v23 = memcmp(__str.__r_.__value_.__l.__data_, v17, __str.__r_.__value_.__l.__size_) != 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_38;
  }
  if (!*((unsigned char *)&__str.__r_.__value_.__s + 23))
  {
    BOOL v23 = 0;
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
LABEL_38:
    operator delete(__p[0].__r_.__value_.__l.__data_);
    goto LABEL_32;
  }
  uint64_t v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]) - 1;
  p_str = &__str;
  do
  {
    int v21 = p_str->__r_.__value_.__s.__data_[0];
    p_str = (std::string *)((char *)p_str + 1);
    int v20 = v21;
    int v22 = v17->__r_.__value_.__s.__data_[0];
    unint64_t v17 = (std::string *)((char *)v17 + 1);
    BOOL v23 = v20 != v22;
  }
  while (v20 == v22 && v18-- != 0);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_38;
  }
LABEL_32:
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v50.__r_.__value_.__l.__data_);
    if (!v23) {
      goto LABEL_41;
    }
  }
  else if (!v23)
  {
LABEL_41:
    if (a4 == 1)
    {
      siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, (const siri::dialogengine::RequestInfo *)(a1 + 8));
      BOOL v13 = v62 != 0;
      siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p[0].__r_.__value_.__l.__data_);
    }
    else if ((a4 & 0xFFFFFFFD) != 0)
    {
      if (a4 == 4)
      {
        BOOL v25 = v52 >= 3;
      }
      else
      {
        if (a4 != 3)
        {
          double CurrentTime = siri::dialogengine::Context::GetCurrentTime((siri::dialogengine::Context *)a1);
          switch(a4)
          {
            case 5:
              std::string::size_type v29 = (double *)v53;
              if (v53 == v54) {
                goto LABEL_40;
              }
              uint64_t v30 = 0;
              do
              {
                double v31 = *v29++;
                LODWORD(v32) = v31 >= CurrentTime + -604800.0;
                if (v31 <= CurrentTime) {
                  uint64_t v32 = v32;
                }
                else {
                  uint64_t v32 = 0;
                }
                v30 += v32;
              }
              while (v29 != v54);
              goto LABEL_95;
            case 6:
              uint64_t v33 = (double *)v53;
              if (v53 == v54) {
                goto LABEL_40;
              }
              unint64_t v34 = 0;
              do
              {
                double v35 = *v33++;
                LODWORD(v36) = v35 >= CurrentTime + -604800.0;
                if (v35 <= CurrentTime) {
                  uint64_t v36 = v36;
                }
                else {
                  uint64_t v36 = 0;
                }
                v34 += v36;
              }
              while (v33 != v54);
              goto LABEL_102;
            case 7:
              long long v37 = (double *)v53;
              if (v53 == v54) {
                goto LABEL_40;
              }
              unint64_t v38 = 0;
              do
              {
                double v39 = *v37++;
                LODWORD(v40) = v39 >= CurrentTime + -604800.0;
                if (v39 <= CurrentTime) {
                  uint64_t v40 = v40;
                }
                else {
                  uint64_t v40 = 0;
                }
                v38 += v40;
              }
              while (v37 != v54);
              goto LABEL_109;
            case 8:
              char v41 = (double *)v53;
              if (v53 == v54) {
                goto LABEL_40;
              }
              uint64_t v30 = 0;
              do
              {
                double v42 = *v41++;
                LODWORD(v43) = v42 >= CurrentTime + -2592000.0;
                if (v42 <= CurrentTime) {
                  uint64_t v43 = v43;
                }
                else {
                  uint64_t v43 = 0;
                }
                v30 += v43;
              }
              while (v41 != v54);
LABEL_95:
              BOOL v26 = v30 == 0;
              goto LABEL_52;
            case 9:
              char v44 = (double *)v53;
              if (v53 == v54) {
                goto LABEL_40;
              }
              unint64_t v34 = 0;
              do
              {
                double v45 = *v44++;
                LODWORD(v46) = v45 >= CurrentTime + -2592000.0;
                if (v45 <= CurrentTime) {
                  uint64_t v46 = v46;
                }
                else {
                  uint64_t v46 = 0;
                }
                v34 += v46;
              }
              while (v44 != v54);
LABEL_102:
              BOOL v25 = v34 >= 2;
              goto LABEL_56;
            case 10:
              char v47 = (double *)v53;
              if (v53 == v54) {
                goto LABEL_40;
              }
              unint64_t v38 = 0;
              do
              {
                double v48 = *v47++;
                LODWORD(v49) = v48 >= CurrentTime + -2592000.0;
                if (v48 <= CurrentTime) {
                  uint64_t v49 = v49;
                }
                else {
                  uint64_t v49 = 0;
                }
                v38 += v49;
              }
              while (v47 != v54);
LABEL_109:
              BOOL v25 = v38 >= 3;
              goto LABEL_56;
            default:
              BOOL v13 = 0;
              goto LABEL_59;
          }
        }
        BOOL v25 = v52 >= 2;
      }
LABEL_56:
      BOOL v13 = !v25;
    }
    else
    {
      BOOL v26 = v52 == 0;
LABEL_52:
      BOOL v13 = v26;
    }
    goto LABEL_59;
  }
LABEL_40:
  BOOL v13 = 1;
LABEL_59:
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (v53)
  {
    char v54 = v53;
    operator delete(v53);
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy((void *)v58[4]);
  std::__tree<std::string>::destroy((uint64_t)v58, v58[1]);
  std::__tree<std::string>::destroy((uint64_t)v57, v57[1]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_1C5D51480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::GroundingInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void siri::dialogengine::GroundingInfo::~GroundingInfo(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  uint64_t v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
}

void siri::dialogengine::DialogStateUseCase::~DialogStateUseCase(siri::dialogengine::DialogStateUseCase *this)
{
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::GroundingInfo>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    long long v3 = *(void **)a1;
    operator delete(v3);
  }
}

BOOL siri::dialogengine::Grounding::HasGroundingOption(unsigned __int8 *a1, uint64_t a2)
{
  siri::dialogengine::StringSplit(a1, ",", &v11);
  uint64_t v3 = v12;
  if (v11 == v12)
  {
    BOOL v6 = 0;
  }
  else
  {
    uint64_t v4 = v11 + 24;
    do
    {
      if (*(char *)(v4 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(v4 - 24), *(void *)(v4 - 16));
      }
      else
      {
        long long v5 = *(_OWORD *)(v4 - 24);
        v10.__r_.__value_.__r.__words[2] = *(void *)(v4 - 8);
        *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
      }
      siri::dialogengine::StringTrim(" \t\n\r", &v10, &__p);
      BOOL v6 = siri::dialogengine::StringsEqual((uint64_t)&__p, a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      char v7 = v4 == v3 || v6;
      v4 += 24;
    }
    while ((v7 & 1) == 0);
  }
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  return v6;
}

void sub_1C5D51760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  a16 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::Grounding::IsValidMode(unsigned __int8 *a1)
{
  return siri::dialogengine::GetGroundingMode(a1) != 0;
}

void siri::dialogengine::ExecuteResultSet::Execute(siri::dialogengine **this@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "conclusionInSingleWindowResponse");
  BOOL BooleanParameter = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "windowSize");
  double NumberParameter = siri::dialogengine::ExecutePatternBase::GetNumberParameter((uint64_t)this, (const void **)&__p, 0.0);
  if ((char)v28 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "isFirstWindow");
  BOOL v6 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "isLastWindow");
  BOOL v7 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "isConclusion");
  BOOL v8 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "promptType");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  siri::dialogengine::ExecutePatternBase::GetStringParameter((uint64_t)this, (const void **)v23, (char *)v21, &v25);
  siri::dialogengine::StringToUpper((uint64_t)&v25, (uint64_t)&__p);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (siri::dialogengine::ExecutePatternBase::ShouldExecuteSashGroup(this, v9, v10)
    && (std::string::basic_string[abi:ne180100]<0>(&v25, "Sash"),
        siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25),
        SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (v8)
    {
LABEL_20:
      std::string::basic_string[abi:ne180100]<0>(&v25, "Conclusion");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      goto LABEL_50;
    }
  }
  else if (v8)
  {
    goto LABEL_20;
  }
  if (NumberParameter < 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "Intro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "Item");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "Attribution");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "Reference");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v25.__r_.__value_.__l.__data_);
      if (!BooleanParameter) {
        goto LABEL_50;
      }
    }
    else if (!BooleanParameter)
    {
LABEL_50:
      std::string::basic_string[abi:ne180100]<0>(&v25, "Prompt");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      goto LABEL_76;
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "Conclusion");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    goto LABEL_50;
  }
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "Intro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  int v11 = v6 && v7;
  if ((v11 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "WindowIntro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "Item");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "Attribution");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "Reference");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (!v7) {
      goto LABEL_62;
    }
  }
  else if (!v7)
  {
    goto LABEL_62;
  }
  int v12 = v28;
  if ((char)v28 < 0)
  {
    if (v27 == 12)
    {
      p_p = __p;
LABEL_58:
      uint64_t v14 = *(void *)p_p;
      int v15 = p_p[2];
      if (v14 == 0x41554E49544E4F43 && v15 == 1313818964) {
        goto LABEL_67;
      }
    }
  }
  else if (v28 == 12)
  {
    p_p = &__p;
    goto LABEL_58;
  }
LABEL_62:
  std::string::basic_string[abi:ne180100]<0>(&v25, "WindowPrompt");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (!v7) {
      goto LABEL_76;
    }
  }
  else if (!v7)
  {
    goto LABEL_76;
  }
  int v12 = v28;
LABEL_67:
  if ((v12 & 0x80) != 0)
  {
    if (v27 != 12) {
      goto LABEL_76;
    }
    unint64_t v17 = __p;
  }
  else
  {
    if (v12 != 12) {
      goto LABEL_76;
    }
    unint64_t v17 = &__p;
  }
  uint64_t v18 = *(void *)v17;
  int v19 = v17[2];
  if (v18 == 0x41554E49544E4F43 && v19 == 1313818964)
  {
    if ((v11 ^ 1 | BooleanParameter) == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v25, "Conclusion");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_50;
  }
LABEL_76:
  siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)this, a2);
  if ((char)v28 < 0) {
    operator delete(__p);
  }
}

void sub_1C5D51D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ExecuteResultSet::~ExecuteResultSet(siri::dialogengine::ExecuteResultSet *this)
{
  siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(this);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(siri::dialogengine::ExecutePatternBase *this)
{
  *(void *)this = &unk_1F2123830;
  long long v5 = (void **)((char *)this + 80);
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100](&v5);
  long long v5 = (void **)((char *)this + 56);
  std::vector<siri::dialogengine::ExecutePatternBase::Stage>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::vector<siri::dialogengine::ExecutePatternBase::Stage>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<siri::dialogengine::ExecutePatternBase::Stage>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<siri::dialogengine::ExecutePatternBase::Stage>::destroy[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(char **)(a1 + 40));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(void *)a1);
    std::__tree<std::string>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void InitDefaultsscc_info_ColorElement_ColorElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ColorElement.pb.cc", a4);
  SnippetUI::ColorElement::ColorElement((SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ColorElement_default_instance_, v4);
  qword_1EB690788 = (uint64_t)&SnippetUI::_Color_default_instance_;
}

SnippetUI::ColorElement *SnippetUI::ColorElement::ColorElement(SnippetUI::ColorElement *this)
{
  *(void *)this = &unk_1F211A580;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (atomic_load_explicit(scc_info_ColorElement_ColorElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ColorElement_ColorElement_2eproto);
  }
  *((void *)this + 5) = 0;
  return this;
}

void sub_1C5D52170(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<int>::~RepeatedField(v1 + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ColorElement::GetMetadata(SnippetUI::ColorElement *this)
{
  return file_level_metadata_ColorElement_2eproto;
}

uint64_t SnippetUI::ColorElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void SnippetUI::ColorElement::MergeFrom(SnippetUI::ColorElement *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ColorElement.pb.cc", 282);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::ColorElement::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D52294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ColorElement::MergeFrom(SnippetUI::ColorElement *this, const SnippetUI::ColorElement *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ColorElement.pb.cc", 297);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ColorElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 4, (int *)a2 + 4);
  if (a2 != (const SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_)
  {
    BOOL v6 = (const SnippetUI::Color *)*((void *)a2 + 5);
    if (v6)
    {
      char v7 = (SnippetUI::Color *)*((void *)this + 5);
      if (!v7)
      {
        char v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
        *((void *)this + 5) = v7;
        BOOL v6 = (const SnippetUI::Color *)*((void *)a2 + 5);
      }
      if (v6) {
        BOOL v8 = v6;
      }
      else {
        BOOL v8 = (const SnippetUI::Color *)&SnippetUI::_Color_default_instance_;
      }
      SnippetUI::Color::MergeFrom(v7, v8);
    }
  }
}

void sub_1C5D5237C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ColorElement::CopyFrom(SnippetUI::ColorElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ColorElement::Clear(this);
    SnippetUI::ColorElement::MergeFrom(this, a2);
  }
}

void SnippetUI::ColorElement::Clear(SnippetUI::ColorElement *this)
{
  *((_DWORD *)this + 4) = 0;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  char v4 = *((unsigned char *)this + 8);
  uint64_t v3 = (SnippetUI::ColorElement *)((char *)this + 8);
  *((void *)v3 + 4) = 0;
  if (v4)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ColorElement::InternalSerializeWithCachedSizesToArray(SnippetUI::ColorElement *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this != (SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_)
  {
    char v7 = (SnippetUI::Color *)*((void *)this + 5);
    if (v7)
    {
      if (*(void *)a3 <= (unint64_t)a2)
      {
        uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        char v7 = (SnippetUI::Color *)*((void *)this + 5);
      }
      *uint64_t v5 = 10;
      unsigned int v8 = *((_DWORD *)v7 + 6);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        unsigned int v10 = v8 >> 7;
        if (v8 >> 14)
        {
          int v11 = v5 + 2;
          do
          {
            int v12 = v11;
            *v11++ = v10 | 0x80;
            unsigned int v13 = v10 >> 7;
            unsigned int v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          char v9 = v12 + 2;
          *int v11 = v13;
        }
        else
        {
          void v5[2] = v10;
          char v9 = v5 + 3;
        }
      }
      else
      {
        v5[1] = v8;
        char v9 = v5 + 2;
      }
      uint64_t v5 = (char *)SnippetUI::Color::InternalSerializeWithCachedSizesToArray(v7, v9, a3, a4);
    }
  }
  unsigned int v15 = *((_DWORD *)this + 8);
  if ((int)v15 >= 1)
  {
    unint64_t v16 = *(void *)a3;
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      unint64_t v16 = *(void *)a3;
    }
    if (v16 <= (unint64_t)v5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      unint64_t v17 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
    }
    *uint64_t v5 = 18;
    uint64_t v18 = v5 + 1;
    if (v15 >= 0x80)
    {
      do
      {
        *v18++ = v15 | 0x80;
        unsigned int v30 = v15 >> 14;
        v15 >>= 7;
      }
      while (v30);
      uint64_t v5 = v18 - 1;
    }
    v5 += 2;
    *uint64_t v18 = v15;
    int v19 = (int *)*((void *)this + 3);
    int v20 = &v19[*((int *)this + 4)];
    do
    {
      if ((unint64_t)v5 >= *(void *)a3) {
        uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      }
      unint64_t v22 = *v19++;
      unint64_t v21 = v22;
      if (v22 > 0x7F)
      {
        *uint64_t v5 = v21 | 0x80;
        unint64_t v23 = v21 >> 7;
        if (v21 >> 14)
        {
          char v24 = v5 + 1;
          do
          {
            std::string v25 = v24;
            *v24++ = v23 | 0x80;
            unint64_t v26 = v23 >> 7;
            unint64_t v27 = v23 >> 14;
            v23 >>= 7;
          }
          while (v27);
          uint64_t v5 = v25 + 2;
          unsigned char *v24 = v26;
        }
        else
        {
          v5[1] = v23;
          v5 += 2;
        }
      }
      else
      {
        *v5++ = v21;
      }
    }
    while (v19 < v20);
  }
  uint64_t v28 = *((void *)this + 1);
  if (v28) {
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v28 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  }
  return (const google::protobuf::UnknownFieldSet *)v5;
}

void sub_1C5D526B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::ColorElement::_InternalParse(SnippetUI::ColorElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unint64_t v17 = a2;
  uint64_t v5 = (SnippetUI::ColorElement *)((char *)this + 16);
  BOOL v6 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23))) {
        return v17;
      }
      TagFallbacstd::string::size_type k = (google::protobuf::internal *)((char *)v17 + 1);
      unsigned int v10 = (char *)*(unsigned __int8 *)v17;
      if ((*(char *)v17 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallbacstd::string::size_type k = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
        unint64_t v17 = TagFallback;
        goto LABEL_7;
      }
      TagFallbacstd::string::size_type k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v10);
      unint64_t v17 = TagFallback;
      if (!TagFallback) {
        return TagFallback;
      }
LABEL_7:
      if (v10 >> 3 == 2) {
        break;
      }
      if (v10 >> 3 != 1 || v10 != 10)
      {
LABEL_12:
        if (v10) {
          BOOL v12 = (v10 & 7) == 4;
        }
        else {
          BOOL v12 = 1;
        }
        if (v12)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        unsigned int v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v6, TagFallback, a3, v8);
        goto LABEL_22;
      }
      unsigned int v14 = (SnippetUI::Color *)*((void *)this + 5);
      if (!v14)
      {
        unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
        *((void *)this + 5) = v14;
        TagFallbacstd::string::size_type k = v17;
      }
      unsigned int v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Color>(a3, v14, TagFallback);
LABEL_22:
      unint64_t v17 = (google::protobuf::internal *)v13;
      if (!v13) {
        return 0;
      }
    }
    if (v10 == 18)
    {
      unsigned int v13 = google::protobuf::internal::PackedInt32Parser(v5, TagFallback, a3, v7);
      goto LABEL_22;
    }
    if (v10 != 16) {
      goto LABEL_12;
    }
    int v15 = google::protobuf::internal::ReadVarint(&v17, (const char **)v10);
    if (!v17) {
      return 0;
    }
    SnippetUI::ColorElement::_internal_add_idioms((uint64_t)this, v15);
  }
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Color>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::Color *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  char v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    double result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  double result = (char *)SnippetUI::Color::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t SnippetUI::ColorElement::_internal_add_idioms(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  char v4 = (int *)(a1 + 16);
  if (v3 == *(_DWORD *)(a1 + 20)) {
    google::protobuf::RepeatedField<int>::Reserve((int *)(a1 + 16), v3 + 1);
  }
  uint64_t result = google::protobuf::RepeatedField<int>::elements((uint64_t)v4);
  uint64_t v6 = *v4;
  *char v4 = v6 + 1;
  *(_DWORD *)(result + 4 * v6) = a2;
  return result;
}

uint64_t SnippetUI::ColorElement::GetCachedSize(SnippetUI::ColorElement *this)
{
  return *((unsigned int *)this + 12);
}

char *SnippetUI::ColorElement::ByteSizeLong(SnippetUI::ColorElement *this)
{
  uint64_t v2 = (_DWORD *)((char *)this + 16);
  int v3 = *((_DWORD *)this + 4);
  if (!v3)
  {
    uint64_t v5 = 0;
LABEL_11:
    int v9 = 0;
    uint64_t v8 = 0;
    goto LABEL_14;
  }
  int v4 = 0;
  uint64_t v5 = 0;
  do
  {
    int v6 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v2, v4);
    if (v6 < 0) {
      uint64_t v7 = 10;
    }
    else {
      uint64_t v7 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
    }
    v5 += v7;
    ++v4;
  }
  while (v3 != v4);
  if (!v5) {
    goto LABEL_11;
  }
  if ((v5 & 0x80000000) != 0) {
    uint64_t v8 = 11;
  }
  else {
    uint64_t v8 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  int v9 = v5;
LABEL_14:
  *((_DWORD *)this + 8) = v9;
  int v10 = (const google::protobuf::UnknownFieldSet *)(v8 + v5);
  if (this != (SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_)
  {
    int v11 = (SnippetUI::Color *)*((void *)this + 5);
    if (v11)
    {
      int v12 = SnippetUI::Color::ByteSizeLong(v11);
      int v10 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v10
                                                          + 1
                                                          + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ColorElement *)((char *)this + 8), v10, (_DWORD *)this + 12);
  }
  else
  {
    *((_DWORD *)this + 12) = v10;
    return (char *)v10;
  }
}

uint64_t SnippetUI::ColorElement::IsInitialized(SnippetUI::ColorElement *this)
{
  return 1;
}

SnippetUI::ColorElement *SnippetUI::ColorElement::New(SnippetUI::ColorElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ColorElement>(a2);
}

SnippetUI::ColorElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ColorElement>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::ColorElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ColorElement>);
  }
  SnippetUI::ColorElement::ColorElement(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D52B4C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C407499B434);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ColorElement>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::ColorElement *SnippetUI::ColorElement::New(SnippetUI::ColorElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ColorElement>(0);
}

void SnippetUI::ColorElement::~ColorElement(SnippetUI::ColorElement *this)
{
  SnippetUI::ColorElement::~ColorElement(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F211A580;
  if (this != (SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_)
  {
    uint64_t v2 = *((void *)this + 5);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::ColorElement::InitAsDefaultInstance(SnippetUI::ColorElement *this)
{
  qword_1EB690788 = (uint64_t)&SnippetUI::_Color_default_instance_;
}

uint64_t SnippetUI::ColorElement::_Internal::color(SnippetUI::ColorElement::_Internal *this, const SnippetUI::ColorElement *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::ColorElement::clear_color(SnippetUI::ColorElement *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

SnippetUI::ColorElement *SnippetUI::ColorElement::ColorElement(SnippetUI::ColorElement *this, const SnippetUI::ColorElement *a2)
{
  *(void *)this = &unk_1F211A580;
  *((void *)this + 1) = 0;
  int v4 = (SnippetUI::ColorElement *)((char *)this + 8);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 16, (int *)a2 + 4);
  *((_DWORD *)this + 12) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 != (const SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_ && *((void *)a2 + 5)) {
    operator new();
  }
  *((void *)this + 5) = 0;
  return this;
}

void sub_1C5D52D9C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v3, 0x10A3C407A2727C4);
  google::protobuf::RepeatedField<int>::~RepeatedField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::ColorElement::default_instance(SnippetUI::ColorElement *this)
{
  if (atomic_load_explicit(scc_info_ColorElement_ColorElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ColorElement_ColorElement_2eproto);
  }
  return &SnippetUI::_ColorElement_default_instance_;
}

void SnippetUI::ColorElement::CopyFrom(SnippetUI::ColorElement *this, const SnippetUI::ColorElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::ColorElement::Clear(this);
    SnippetUI::ColorElement::MergeFrom(this, a2);
  }
}

void SnippetUI::ColorElement::InternalSwap(SnippetUI::ColorElement *this, SnippetUI::ColorElement *a2)
{
  int v4 = (SnippetUI::ColorElement *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      int v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  int v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 16, (uint64_t)a2 + 16);
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
}

siri::dialogengine::ElapsedTimer *siri::dialogengine::ElapsedTimer::ElapsedTimer(siri::dialogengine::ElapsedTimer *this)
{
  *((unsigned char *)this + 40) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((unsigned char *)this + 24) = 0;
  siri::dialogengine::ElapsedTimer::Reset(this);
  return this;
}

{
  *((unsigned char *)this + 40) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((unsigned char *)this + 24) = 0;
  siri::dialogengine::ElapsedTimer::Reset(this);
  return this;
}

void siri::dialogengine::ElapsedTimer::Reset(siri::dialogengine::ElapsedTimer *this)
{
  *(void *)this = siri::dialogengine::GetThreadId(this);
  if (*((unsigned char *)this + 40)) {
    *((unsigned char *)this + 40) = 0;
  }
  clock_gettime(_CLOCK_MONOTONIC_RAW, &v4);
  double v2 = ((double)v4.tv_nsec / 1000000000.0 + (double)v4.tv_sec) * 1000.0;
  double CurrentThreadMillisecondTime = siri::dialogengine::GetCurrentThreadMillisecondTime(*(siri::dialogengine **)this);
  *((double *)this + 1) = v2;
  *((double *)this + 2) = CurrentThreadMillisecondTime;
}

uint64_t siri::dialogengine::GetThreadId(siri::dialogengine *this)
{
  thread_inspect_t v1 = MEMORY[0x1C8797170](this);
  mach_msg_type_number_t thread_info_outCnt = 6;
  if (thread_info(v1, 4u, thread_info_out, &thread_info_outCnt))
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to get thread id", v2);
    *(void *)thread_info_out = 0;
  }
  mach_port_deallocate(*MEMORY[0x1E4F14960], v1);
  return *(void *)thread_info_out;
}

double siri::dialogengine::GetCurrentThreadMillisecondTime(siri::dialogengine *this)
{
  double v1 = -1.0;
  if ((siri::dialogengine *)siri::dialogengine::GetThreadId(this) == this)
  {
    mach_msg_type_number_t thread_info_outCnt = 10;
    thread_inspect_t v2 = MEMORY[0x1C8797170]();
    if (!thread_info(v2, 3u, thread_info_out, &thread_info_outCnt)) {
      double v1 = (double)thread_info_out[1] / 1000.0
    }
         + (double)thread_info_out[0] * 1000.0
         + (double)thread_info_out[2] * 1000.0
         + (double)thread_info_out[3] / 1000.0;
    mach_port_deallocate(*MEMORY[0x1E4F14960], v2);
  }
  return v1;
}

BOOL siri::dialogengine::ElapsedTimer::IsRunning(siri::dialogengine::ElapsedTimer *this)
{
  return *((unsigned char *)this + 40) == 0;
}

void siri::dialogengine::ElapsedTimer::Stop(siri::dialogengine **this)
{
  if (!*((unsigned char *)this + 40))
  {
    clock_gettime(_CLOCK_MONOTONIC_RAW, &v5);
    double v2 = ((double)v5.tv_nsec / 1000000000.0 + (double)v5.tv_sec) * 1000.0;
    double CurrentThreadMillisecondTime = siri::dialogengine::GetCurrentThreadMillisecondTime(*this);
    int v4 = *((unsigned __int8 *)this + 40);
    *((double *)this + 3) = v2;
    *((double *)this + 4) = CurrentThreadMillisecondTime;
    if (!v4) {
      *((unsigned char *)this + 40) = 1;
    }
  }
}

double siri::dialogengine::ElapsedTimer::GetSecs(siri::dialogengine::ElapsedTimer *this)
{
  return siri::dialogengine::ElapsedTimer::CalculateElapsedWallMilliseconds(this) / 1000.0;
}

double siri::dialogengine::ElapsedTimer::CalculateElapsedWallMilliseconds(siri::dialogengine::ElapsedTimer *this)
{
  if (*((unsigned char *)this + 40))
  {
    double v2 = *((double *)this + 3);
  }
  else
  {
    clock_gettime(_CLOCK_MONOTONIC_RAW, &v4);
    double v2 = ((double)v4.tv_nsec / 1000000000.0 + (double)v4.tv_sec) * 1000.0;
  }
  return v2 - *((double *)this + 1);
}

double siri::dialogengine::ElapsedTimer::GetThreadSecs(siri::dialogengine::ElapsedTimer *this)
{
  double v1 = siri::dialogengine::ElapsedTimer::CalculateElapsedThreadMilliseconds(this);
  if (v1 == -1.0) {
    return -1.0;
  }
  else {
    return v1 / 1000.0;
  }
}

double siri::dialogengine::ElapsedTimer::CalculateElapsedThreadMilliseconds(siri::dialogengine::ElapsedTimer *this)
{
  double v1 = -1.0;
  if (*((double *)this + 2) != -1.0)
  {
    if (*((unsigned char *)this + 40)) {
      double CurrentThreadMillisecondTime = *((double *)this + 4);
    }
    else {
      double CurrentThreadMillisecondTime = siri::dialogengine::GetCurrentThreadMillisecondTime(*(siri::dialogengine **)this);
    }
    double v1 = -1.0;
    if (CurrentThreadMillisecondTime != -1.0) {
      return CurrentThreadMillisecondTime - *((double *)this + 2);
    }
  }
  return v1;
}

void siri::dialogengine::ElapsedTimer::GetSecsAsString(siri::dialogengine::ElapsedTimer *this@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::ElapsedTimer::CalculateElapsedWallMilliseconds(this);
  siri::dialogengine::StringFromDouble((siri::dialogengine *)3, (uint64_t)&v4);
  uint64_t v3 = std::string::append(&v4, " s");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D53344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ElapsedTimer::GetMSecsAsString(siri::dialogengine::ElapsedTimer *this@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::ElapsedTimer::CalculateElapsedWallMilliseconds(this);
  siri::dialogengine::StringFromDouble((siri::dialogengine *)2, (uint64_t)&v4);
  uint64_t v3 = std::string::append(&v4, " ms");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D533D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ElapsedTimer::GetThreadSecsAsString(siri::dialogengine::ElapsedTimer *this@<X0>, void *a2@<X8>)
{
  double v3 = siri::dialogengine::ElapsedTimer::CalculateElapsedThreadMilliseconds(this);
  if (v3 == -1.0) {
    double v4 = -1.0;
  }
  else {
    double v4 = v3 / 1000.0;
  }
  if (v4 == -1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "unknown s due to thread switch");
  }
  else
  {
    siri::dialogengine::StringFromDouble((siri::dialogengine *)3, (uint64_t)&v7);
    timespec v5 = std::string::append(&v7, " s");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v5->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5D534A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ElapsedTimer::GetThreadMSecsAsString(siri::dialogengine::ElapsedTimer *this@<X0>, void *a2@<X8>)
{
  if (siri::dialogengine::ElapsedTimer::CalculateElapsedThreadMilliseconds(this) == -1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "unknown ms due to thread switch");
  }
  else
  {
    siri::dialogengine::StringFromDouble((siri::dialogengine *)2, (uint64_t)&v5);
    double v3 = std::string::append(&v5, " ms");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v3->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v5.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5D5356C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ElapsedTimer::GetCombinedSecsAsString(siri::dialogengine::ElapsedTimer *this@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::ElapsedTimer::GetSecsAsString(this, &v13);
  long long v4 = std::string::append(&v13, " (in thread ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::ElapsedTimer::GetThreadSecsAsString(this, __p);
  if ((v12 & 0x80u) == 0) {
    long long v6 = __p;
  }
  else {
    long long v6 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v7 = v12;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  uint64_t v8 = std::string::append(&v14, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v15, ")");
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D5369C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ElapsedTimer::GetCombinedMSecsAsString(siri::dialogengine::ElapsedTimer *this@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::ElapsedTimer::GetMSecsAsString(this, &v13);
  long long v4 = std::string::append(&v13, " (in thread ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::ElapsedTimer::GetThreadMSecsAsString(this, __p);
  if ((v12 & 0x80u) == 0) {
    long long v6 = __p;
  }
  else {
    long long v6 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v7 = v12;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  uint64_t v8 = std::string::append(&v14, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v15, ")");
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D53814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5D53B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);

  _Unwind_Resume(a1);
}

void sub_1C5D53D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *siri::dialogengine::ExecuteDetailedDisambiguationClarification::Execute@<X0>(siri::dialogengine **this@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "windowSize");
  double NumberParameter = siri::dialogengine::ExecutePatternBase::GetNumberParameter((uint64_t)this, (const void **)__p, 0.0);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "isFirstWindow");
  BOOL BooleanParameter = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "isLastWindow");
  BOOL v6 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "isConclusion");
  BOOL v9 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (siri::dialogengine::ExecutePatternBase::ShouldExecuteSashGroup(this, v7, v8)
    && (std::string::basic_string[abi:ne180100]<0>(__p, "Sash"),
        siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p),
        v12 < 0))
  {
    operator delete(__p[0]);
    if (v9) {
      goto LABEL_12;
    }
  }
  else if (v9)
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(__p, "Conclusion");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Prompt");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    goto LABEL_39;
  }
  if (NumberParameter >= 1.0)
  {
    if (BooleanParameter)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Intro");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    if (!BooleanParameter || !v6)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "WindowIntro");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Item");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Attribution");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Reference");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Intro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Item");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Attribution");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Reference");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "WindowPrompt");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
LABEL_39:
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)this, a2);
}

void sub_1C5D54164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ExecuteDetailedDisambiguationClarification::~ExecuteDetailedDisambiguationClarification(siri::dialogengine::ExecuteDetailedDisambiguationClarification *this)
{
  siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(this);
  JUMPOUT(0x1C8796D70);
}

void siri::dialogengine::ObjectEnumerant::~ObjectEnumerant(void **this)
{
  siri::dialogengine::ObjectEnumerant::~ObjectEnumerant(this);
  JUMPOUT(0x1C8796D70);
}

{
  *this = &unk_1F2125FA0;
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

double siri::dialogengine::ObjectEnumerant::ObjectEnumerant(siri::dialogengine::ObjectEnumerant *this)
{
  *(void *)this = &unk_1F2125FA0;
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 10) = 0;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F2125FA0;
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 10) = 0;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return result;
}

uint64_t siri::dialogengine::ObjectEnumerant::GetType(siri::dialogengine::ObjectEnumerant *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t siri::dialogengine::ObjectEnumerant::SetType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void siri::dialogengine::ObjectEnumerant::GetString(siri::dialogengine::ObjectEnumerant *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 39) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 2), *((void *)this + 3));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 1);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 4);
  }
}

std::string *siri::dialogengine::ObjectEnumerant::SetString(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

uint64_t siri::dialogengine::ObjectEnumerant::GetInt(siri::dialogengine::ObjectEnumerant *this)
{
  if (*((_DWORD *)this + 2) == 2) {
    return *((unsigned int *)this + 10);
  }
  else {
    return 0;
  }
}

uint64_t siri::dialogengine::ObjectEnumerant::SetInt(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void siri::dialogengine::ObjectEnumerant::GetDescription(siri::dialogengine::ObjectEnumerant *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((void *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 8);
  }
}

std::string *siri::dialogengine::ObjectEnumerant::SetDescription(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

void siri::dialogengine::ObjectEnumerant::GetDeprecated(siri::dialogengine::ObjectEnumerant *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((void *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 11);
  }
}

std::string *siri::dialogengine::ObjectEnumerant::SetDeprecated(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 3, a2);
}

void siri::dialogengine::CatIdToPath(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v8, "dialog");
  std::string::basic_string[abi:ne180100]<0>(v6, ".catfamily");
  std::string::basic_string[abi:ne180100]<0>(__p, ".cat");
  siri::dialogengine::CatIdToPath(a2, a1, (unint64_t)v8, (uint64_t)v6, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_1C5D54490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::CatIdToPath(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    siri::dialogengine::StringSplit((unsigned __int8 *)a2, "#", &v37);
    std::vector<std::string>::pointer end = v37.__end_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v37.__end_ - (char *)v37.__begin_) >> 3) >= 3)
    {
      std::vector<std::string>::resize(&v37, 2uLL);
      std::vector<std::string>::pointer end = v37.__end_;
    }
    int v11 = *(char *)(a5 + 23);
    if (v11 >= 0) {
      char v12 = (const std::string::value_type *)a5;
    }
    else {
      char v12 = *(const std::string::value_type **)a5;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(a5 + 8);
    }
    std::string::append(end - 1, v12, v13);
    std::vector<std::string>::pointer begin = v37.__begin_;
    std::vector<std::string>::pointer v15 = v37.__end_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v37.__end_ - (char *)v37.__begin_) >> 3) >= 2)
    {
      int v16 = *(char *)(a4 + 23);
      if (v16 >= 0) {
        unint64_t v17 = (const std::string::value_type *)a4;
      }
      else {
        unint64_t v17 = *(const std::string::value_type **)a4;
      }
      if (v16 >= 0) {
        std::string::size_type v18 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        std::string::size_type v18 = *(void *)(a4 + 8);
      }
      std::string::append(v37.__begin_, v17, v18);
      std::vector<std::string>::pointer begin = v37.__begin_;
      std::vector<std::string>::pointer v15 = v37.__end_;
    }
    if (v15 < v37.__end_cap_.__value_)
    {
      if (begin == v15)
      {
        if (*(char *)(a3 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
        }
        else
        {
          long long v25 = *(_OWORD *)a3;
          v15->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v25;
        }
        v37.__end_ = v15 + 1;
      }
      else
      {
        std::vector<std::string>::__move_range(&v37, begin, v15, begin + 1);
        BOOL v20 = (unint64_t)begin <= a3 && v37.__end_ > (std::vector<std::string>::pointer)a3;
        std::string::operator=(begin, (const std::string *)(a3 + 24 * v20));
      }
LABEL_56:
      std::string::basic_string[abi:ne180100]<0>(&v39, "/");
      siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)a1, (uint64_t)v37.__begin_, (uint64_t)v37.__end_, (uint64_t)&v39);
      if (SHIBYTE(v39.__end_) < 0) {
        operator delete(v39.__first_);
      }
      v39.__first_ = (std::__split_buffer<std::string>::pointer)&v37;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
      return;
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)begin) >> 3) + 1;
    if (v21 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v37.__end_cap_.__value_ - (char *)begin) >> 3) > v21) {
      unint64_t v21 = 0x5555555555555556 * (((char *)v37.__end_cap_.__value_ - (char *)begin) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v37.__end_cap_.__value_ - (char *)begin) >> 3) >= 0x555555555555555) {
      unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v21;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v37.__end_cap_;
    if (v22)
    {
      unint64_t v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v37.__end_cap_, v22);
      __v.__first_ = v23;
      __v.__begin_ = v23;
      __v.__end_ = v23;
      __v.__end_cap_.__value_ = &v23[v24];
      if (v24)
      {
LABEL_50:
        if (*(char *)(a3 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
        }
        else
        {
          long long v36 = *(_OWORD *)a3;
          v23->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
          *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v36;
        }
        ++__v.__end_;
        std::vector<std::string>::__swap_out_circular_buffer(&v37, &__v, begin);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        goto LABEL_56;
      }
    }
    else
    {
      memset(&__v, 0, 32);
    }
    v39.__end_cap_.__value_ = __v.__end_cap_.__value_;
    uint64_t v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)__v.__end_cap_.__value_, 1uLL);
    std::__split_buffer<std::string>::pointer v28 = __v.__begin_;
    if (__v.__end_ == __v.__begin_)
    {
      int64x2_t v34 = vdupq_n_s64((unint64_t)__v.__begin_);
      unsigned int v30 = v26;
    }
    else
    {
      int64_t v29 = __v.__end_ - __v.__begin_;
      unsigned int v30 = &v26[v29];
      uint64_t v31 = 24 * v29;
      uint64_t v32 = v26;
      do
      {
        long long v33 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v32->__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
        ++v32;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        ++v28;
        v31 -= 24;
      }
      while (v31);
      int64x2_t v34 = *(int64x2_t *)&__v.__begin_;
    }
    value = __v.__end_cap_.__value_;
    v39.__first_ = __v.__first_;
    __v.__first_ = v26;
    __v.__begin_ = v26;
    *(int64x2_t *)&v39.__begin_ = v34;
    __v.__end_ = v30;
    __v.__end_cap_.__value_ = &v26[v27];
    v39.__end_cap_.__value_ = value;
    std::__split_buffer<std::string>::~__split_buffer(&v39);
    unint64_t v23 = __v.__end_;
    goto LABEL_50;
  }
  std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void sub_1C5D54854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__split_buffer<std::string> *a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VisualCatIdToPath(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v8, "visual");
  std::string::basic_string[abi:ne180100]<0>(__p, ".catfamily");
  siri::dialogengine::CatIdToPath(a3, a1, (unint64_t)v8, (uint64_t)__p, a2);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_1C5D5493C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::CatPathToId(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  memset(&v28, 0, sizeof(v28));
  memset(&__p, 0, sizeof(__p));
  siri::dialogengine::StringSplit(a1, "/", &v26);
  std::string::size_type size = v26.__r_.__value_.__l.__size_;
  std::string::size_type v3 = v26.__r_.__value_.__r.__words[0];
  if (v26.__r_.__value_.__r.__words[0] == v26.__r_.__value_.__l.__size_)
  {
LABEL_29:
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_30:
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v26, 3u);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(a2, "");
    LOBYTE(v12) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
    goto LABEL_33;
  }
  while (1)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
    }
    else
    {
      long long v5 = *(_OWORD *)v3;
      __str.__r_.__value_.__r.__words[2] = *(void *)(v3 + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v5;
    }
    siri::dialogengine::StringToLower((uint64_t)&__str, (uint64_t)&v24);
    std::string::basic_string[abi:ne180100]<0>(&v23, ".catfamily");
    BOOL v6 = siri::dialogengine::StringEndsWith(&v24, (unsigned __int8 *)&v23);
    BOOL v7 = v6;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v23.__r_.__value_.__l.__data_);
      if (v7)
      {
LABEL_7:
        std::string::size_type v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v8 = __str.__r_.__value_.__l.__size_;
        }
        std::string::basic_string(&v23, &__str, 0, v8 - 10, (std::allocator<char> *)&v22);
        goto LABEL_16;
      }
    }
    else if (v6)
    {
      goto LABEL_7;
    }
    std::string::basic_string[abi:ne180100]<0>(&v23, ".patternfamily");
    BOOL v9 = siri::dialogengine::StringEndsWith(&v24, (unsigned __int8 *)&v23);
    BOOL v10 = v9;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v23.__r_.__value_.__l.__data_);
      if (!v10) {
        goto LABEL_20;
      }
LABEL_13:
      std::string::size_type v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v11 = __str.__r_.__value_.__l.__size_;
      }
      std::string::basic_string(&v23, &__str, 0, v11 - 14, (std::allocator<char> *)&v22);
LABEL_16:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v23;
      goto LABEL_24;
    }
    if (v9) {
      goto LABEL_13;
    }
LABEL_20:
    int v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    size_t v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    if (v13) {
      break;
    }
LABEL_24:
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    v3 += 24;
    if (v3 == size) {
      goto LABEL_29;
    }
  }
  siri::dialogengine::RemoveExtension((uint64_t)&__str, &v22);
  siri::dialogengine::RemoveExtension((uint64_t)&v22, &v23);
  std::string v28 = v23;
  *((unsigned char *)&v23.__r_.__value_.__s + 23) = 0;
  v23.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  LOBYTE(v14) = *((unsigned char *)&v28.__r_.__value_.__s + 23);
  int v15 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
  std::string::size_type v16 = v28.__r_.__value_.__l.__size_;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (v15 >= 0) {
    std::string::size_type v14 = v14;
  }
  else {
    std::string::size_type v14 = v16;
  }
  if (!v14) {
    goto LABEL_30;
  }
  unint64_t v17 = &v26;
  std::string::basic_string[abi:ne180100]((uint64_t)&v26, v13 + 1);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if (v12 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  memmove(v17, p_p, v13);
  *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v13) = 35;
  if (v15 >= 0) {
    int v19 = &v28;
  }
  else {
    int v19 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  BOOL v20 = std::string::append(&v26, (const std::string::value_type *)v19, v14);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  a2[2] = *((void *)&v20->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
LABEL_33:
  if ((v12 & 0x80) != 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D54CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (*(char *)(v45 - 89) < 0) {
    operator delete(*(void **)(v45 - 112));
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::RemoveExtension(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = std::string::rfind((const std::string *)a1, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v4 == -1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      long long v5 = *(const std::string::value_type **)a1;
      std::string::size_type v6 = *(void *)(a1 + 8);
      std::string::__init_copy_ctor_external(a2, v5, v6);
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string(a2, (const std::string *)a1, 0, v4, (std::allocator<char> *)&v7);
  }
}

void siri::dialogengine::CatFamilyFromId(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3)
  {
    siri::dialogengine::StringSplit((unsigned __int8 *)a1, "#", &v7);
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3) > 1)
    {
      uint64_t v4 = v7 + 8 * ((v8 - v7) >> 3);
      long long v5 = (const std::string::value_type **)(v4 - 48);
      if (*(char *)(v4 - 25) < 0)
      {
        std::string::__init_copy_ctor_external(a2, *v5, *(void *)(v4 - 40));
      }
      else
      {
        long long v6 = *(_OWORD *)v5;
        a2->__r_.__value_.__r.__words[2] = *(void *)(v4 - 32);
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(a2, "");
    }
    BOOL v9 = (void **)&v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1C5D54F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatFamilyDirectoryNameFromId(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3)
  {
    siri::dialogengine::CatFamilyFromId(a1, &v6);
    uint64_t v4 = std::string::append(&v6, ".catfamily");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v4->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1C5D55018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::PatternIdToPath(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v8, "pattern");
  std::string::basic_string[abi:ne180100]<0>(__p, ".patternfamily");
  siri::dialogengine::CatIdToPath(a3, a1, (unint64_t)v8, (uint64_t)__p, a2);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_1C5D550C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetCatLocales(unsigned __int8 **a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  double v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    while (1)
    {
      siri::dialogengine::StringSplit(v2, ".", v21);
      if ((long long *)((char *)v21[1] - (char *)v21[0]) == (long long *)72)
      {
        long long v5 = (unsigned __int16 *)v21[0] + 12;
        int v6 = *((char *)v21[0] + 47);
        if (v6 < 0)
        {
          if (*((void *)v21[0] + 4) == 3)
          {
            long long v5 = *(unsigned __int16 **)v5;
LABEL_8:
            int v7 = *v5;
            int v8 = *((unsigned __int8 *)v5 + 2);
            if (v7 != 24931 || v8 != 116) {
              goto LABEL_26;
            }
            int v10 = *((char *)v21[0] + 23);
            if (v10 < 0)
            {
              if (*((void *)v21[0] + 1) != 7)
              {
LABEL_22:
                unint64_t v15 = a2[1];
                if (v15 >= a2[2])
                {
                  uint64_t v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v21[0]);
                }
                else
                {
                  std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v21[0]);
                  uint64_t v16 = v15 + 24;
                }
                a2[1] = v16;
                goto LABEL_26;
              }
              std::string::size_type v11 = *(long long **)v21[0];
            }
            else
            {
              std::string::size_type v11 = v21[0];
              if (v10 != 7) {
                goto LABEL_22;
              }
            }
            int v12 = *(_DWORD *)v11;
            int v13 = *(_DWORD *)((char *)v11 + 3);
            if (v12 == 1918988383 && v13 == 1936548210) {
              goto LABEL_26;
            }
            goto LABEL_22;
          }
        }
        else if (v6 == 3)
        {
          goto LABEL_8;
        }
      }
LABEL_26:
      std::string v22 = v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
      v2 += 24;
      if (v2 == v3)
      {
        unint64_t v17 = *a2;
        std::string::size_type v18 = (__n128 *)a2[1];
        goto LABEL_29;
      }
    }
  }
  std::string::size_type v18 = 0;
  unint64_t v17 = 0;
LABEL_29:
  unint64_t v19 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v18 - v17) >> 3));
  if (v18 == (__n128 *)v17) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v17, v18, v20, 1);
}

void sub_1C5D55290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetCatLocales(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  memset(v5, 0, sizeof(v5));
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3)
  {
    siri::dialogengine::ListDir((const char *)a1, (uint64_t)v4);
    siri::dialogengine::GetCatLocales(v4, a2);
    int v6 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  v4[0] = (unsigned __int8 *)v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v4);
}

void sub_1C5D55348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 24) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 24));
  a10 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

DIR *siri::dialogengine::ListDir@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  double result = opendir(a1);
  uint64_t v4 = result;
  if (result)
  {
    for (uint64_t i = readdir(result); i; uint64_t i = readdir(v4))
    {
      d_name = i->d_name;
      if (strcmp(i->d_name, ".") && strcmp(d_name, ".."))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, d_name);
        unint64_t v8 = *(void *)(a2 + 8);
        unint64_t v7 = *(void *)(a2 + 16);
        if (v8 >= v7)
        {
          unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *(void *)a2) >> 3);
          unint64_t v11 = v10 + 1;
          if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(void *)a2) >> 3);
          if (2 * v12 > v11) {
            unint64_t v11 = 2 * v12;
          }
          if (v12 >= 0x555555555555555) {
            unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v13 = v11;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v13) {
            uint64_t v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v13);
          }
          else {
            uint64_t v14 = 0;
          }
          unint64_t v15 = v14 + v10;
          __v.__first_ = v14;
          __v.__begin_ = v15;
          __v.__end_cap_.__value_ = &v14[v13];
          long long v16 = *(_OWORD *)__p;
          v15->__r_.__value_.__r.__words[2] = v20;
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          __p[1] = 0;
          std::string::size_type v20 = 0;
          __p[0] = 0;
          __v.__end_ = v15 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          uint64_t v17 = *(void *)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          int v18 = SHIBYTE(v20);
          *(void *)(a2 + 8) = v17;
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v9 = *(_OWORD *)__p;
          *(void *)(v8 + 16) = v20;
          *(_OWORD *)unint64_t v8 = v9;
          *(void *)(a2 + 8) = v8 + 24;
        }
      }
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_1C5D55544(_Unwind_Exception *__p, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__split_buffer<std::string> *a7, ...)
{
  va_start(__pa, a7);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__pa);
  _Unwind_Resume(__p);
}

BOOL siri::dialogengine::FileExists(uint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1]) {
      return 0;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    return 0;
  }
  return stat((const char *)a1, &v3) != -1 && (v3.st_mode & 0xF000) == 0x8000;
}

BOOL siri::dialogengine::DirExists(uint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1]) {
      return 0;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    return 0;
  }
  return stat((const char *)a1, &v3) != -1 && (v3.st_mode & 0xF000) == 0x4000;
}

BOOL siri::dialogengine::PathExists(uint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1]) {
      return 0;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    return 0;
  }
  if (stat((const char *)a1, &v3) == -1) {
    return 0;
  }
  int v1 = v3.st_mode & 0xF000;
  BOOL result = 1;
  if (v1 != 0x4000) {
    return v1 == 0x8000 || v1 == 40960;
  }
  return result;
}

uint64_t siri::dialogengine::GetPermissions(uint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1]) {
      return 0xFFFFFFFFLL;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    return 0xFFFFFFFFLL;
  }
  if (stat((const char *)a1, &v2) == -1) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v2.st_mode & 0xFFF;
  }
}

uint64_t siri::dialogengine::AddPermissions(const char *a1, __int16 a2)
{
  stat v3 = a1;
  if (a1[23] < 0)
  {
    if (!*((void *)a1 + 1)) {
      return 0;
    }
    a1 = *(const char **)a1;
  }
  else if (!a1[23])
  {
    return 0;
  }
  if (stat(a1, &v8) != -1)
  {
    if (v3[23] >= 0) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = *(const char **)v3;
    }
    uint64_t v5 = chmod(v4, v8.st_mode & 0xFFF | a2);
    if (!v5) {
      return 1;
    }
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"AddPermissions: chmod returned %d", v6, v5);
  }
  return 0;
}

BOOL siri::dialogengine::FileExistsAndIsNotEmpty(uint64_t a1, uint64_t a2)
{
  siri::dialogengine::JoinPath(a1, a2, (uint64_t)__p);
  off_t FileSize = siri::dialogengine::GetFileSize((uint64_t *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return FileSize > 0;
}

void sub_1C5D55810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::JoinPath(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(char *)(a1 + 23);
  std::string::size_type v6 = *(void *)(a1 + 8);
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if (!v7)
  {
    if ((v8 & 0x80) == 0)
    {
LABEL_13:
      *(_OWORD *)a3 = *(_OWORD *)a2;
      uint64_t v12 = *(void *)(a2 + 16);
LABEL_16:
      *(void *)(a3 + 16) = v12;
      return;
    }
    unint64_t v13 = *(const std::string::value_type **)a2;
    std::string::size_type v6 = *(void *)(a2 + 8);
    goto LABEL_22;
  }
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (!v8)
  {
    if ((v5 & 0x80000000) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      uint64_t v12 = *(void *)(a1 + 16);
      goto LABEL_16;
    }
    unint64_t v13 = *(const std::string::value_type **)a1;
LABEL_22:
    std::string::__init_copy_ctor_external((std::string *)a3, v13, v6);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "/");
  BOOL v10 = siri::dialogengine::StringStartsWith((std::string *)a2, (unsigned __int8 *)__p);
  BOOL v11 = v10;
  if (v22 < 0)
  {
    operator delete(__p[0]);
    if (v11)
    {
LABEL_10:
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        return;
      }
      goto LABEL_13;
    }
  }
  else if (v10)
  {
    goto LABEL_10;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(void *)(a3 + 16) = *(void *)(a1 + 16);
  }
  while (1)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      uint64_t v17 = *(void *)(a3 + 8);
      if (!v17) {
        break;
      }
      std::string::size_type v15 = v17 - 1;
      int v16 = *(unsigned __int8 *)(*(void *)a3 + v17 - 1);
    }
    else
    {
      uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
      if (!*(unsigned char *)(a3 + 23)) {
        break;
      }
      std::string::size_type v15 = v14 - 1;
      int v16 = *(unsigned __int8 *)(a3 + v14 - 1);
    }
    if (v16 != 47) {
      break;
    }
    std::string::erase((std::string *)a3, v15, 0xFFFFFFFFFFFFFFFFLL);
  }
  std::string::push_back((std::string *)a3, 47);
  int v18 = *(char *)(a2 + 23);
  if (v18 >= 0) {
    unint64_t v19 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v19 = *(const std::string::value_type **)a2;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v20 = *(void *)(a2 + 8);
  }
  std::string::append((std::string *)a3, v19, v20);
}

void sub_1C5D559E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

off_t siri::dialogengine::GetFileSize(uint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1]) {
      return -1;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    return -1;
  }
  if (stat((const char *)a1, &v2) == -1) {
    return -1;
  }
  else {
    return v2.st_size;
  }
}

void siri::dialogengine::ExpandPath(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23))
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(void *)(a2 + 16) = *(void *)(a1 + 16);
      goto LABEL_6;
    }
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>((void *)a2, "");
    return;
  }
  std::string::size_type v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, v4);
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(&__p, "~");
  BOOL v5 = siri::dialogengine::StringStartsWith((std::string *)a1, (unsigned __int8 *)&__p);
  BOOL v6 = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6) {
      goto LABEL_21;
    }
  }
  else if (!v5)
  {
    goto LABEL_21;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "~/");
  BOOL v7 = siri::dialogengine::StringStartsWith((std::string *)a1, (unsigned __int8 *)&__p);
  BOOL v9 = v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v9) {
      goto LABEL_15;
    }
  }
  else if (v7)
  {
LABEL_15:
    std::string::basic_string(&__p, (const std::string *)a1, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v22);
    BOOL v10 = std::string::insert(&__p, 0, "${HOME}");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[0];
    v25.__r_.__value_.__r.__words[0] = v10->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
    char v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    std::string::size_type v13 = v25.__r_.__value_.__r.__words[0];
    *(void *)a2 = v11;
    *(void *)(a2 + 8) = v13;
    *(void *)(a2 + 15) = *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 7);
    *(unsigned char *)(a2 + 23) = v12;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_21;
  }
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"ExpandPath expands only leading \"~/\" not other \"~\" patterns", v8);
LABEL_21:
  std::string::basic_string[abi:ne180100]<0>(&v25, "${");
  std::string::basic_string[abi:ne180100]<0>(v22, "}");
  siri::dialogengine::StringSplitWithDelimiters((std::string *)a2, (unsigned __int8 *)&v25, (unsigned __int8 *)v22, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  for (std::string::size_type i = __p.__r_.__value_.__r.__words[0]; i != __p.__r_.__value_.__l.__size_; i += 24)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "${");
    if (siri::dialogengine::StringStartsWith((std::string *)i, (unsigned __int8 *)&v25))
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "}");
      BOOL v15 = siri::dialogengine::StringEndsWith((std::string *)i, (unsigned __int8 *)v22);
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
    else
    {
      BOOL v15 = 0;
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v25.__r_.__value_.__l.__data_);
      if (v15)
      {
LABEL_34:
        if (*(char *)(i + 23) < 0) {
          uint64_t v16 = *(void *)(i + 8);
        }
        else {
          uint64_t v16 = *(unsigned __int8 *)(i + 23);
        }
        std::string::basic_string(&v25, (const std::string *)i, 2uLL, v16 - 3, (std::allocator<char> *)v22);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
          int v18 = (std::string *)v25.__r_.__value_.__r.__words[0];
        }
        else
        {
          uint64_t v17 = &v25;
          int v18 = &v25;
        }
        unint64_t v19 = getenv((const char *)v18);
        if (v19)
        {
          MEMORY[0x1C8796900](i, v19);
          if (*(char *)(i + 23) < 0)
          {
            if (!*(void *)(i + 8)) {
              goto LABEL_46;
            }
          }
          else if (!*(unsigned char *)(i + 23))
          {
LABEL_46:
            if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v21 = &v25;
            }
            else {
              long long v21 = (std::string *)v25.__r_.__value_.__r.__words[0];
            }
            siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Environment variable ${%s} is empty", v20, v21);
          }
        }
        else
        {
          siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Environment variable ${%s} is not defined", 0, v17);
          MEMORY[0x1C8796900](i, "");
        }
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
      }
    }
    else if (v15)
    {
      goto LABEL_34;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v25, (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)v22);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v25;
  *((unsigned char *)&v25.__r_.__value_.__s + 23) = 0;
  v25.__r_.__value_.__s.__data_[0] = 0;
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
}

void sub_1C5D55E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

double siri::dialogengine::JoinPath@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      siri::dialogengine::JoinPath(a2, v2, (uint64_t)&v6);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      double result = *(double *)&v6;
      *(_OWORD *)a2 = v6;
      *(void *)(a2 + 16) = v7;
      v2 += 24;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1C5D55FFC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DirName(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    std::string::size_type v4 = __str;
  }
  else {
    std::string::size_type v4 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_24;
  }
  long long v6 = (unsigned __int8 *)v4 + size;
  uint64_t v7 = v4;
  uint64_t v8 = (std::string *)v6;
  do
  {
    BOOL v9 = v7;
    BOOL v10 = (unsigned __int8 *)v7;
    while (1)
    {
      int v11 = *v10++;
      if (v11 == 47) {
        break;
      }
      BOOL v9 = (std::string *)v10;
      if (v10 == v6)
      {
        BOOL v9 = v8;
        goto LABEL_13;
      }
    }
    uint64_t v7 = (std::string *)((char *)&v9->__r_.__value_.__l.__data_ + 1);
    uint64_t v8 = v9;
  }
  while (v10 != v6);
LABEL_13:
  if (v9 == (std::string *)v6 || (int64_t v12 = (char *)v9 - (char *)v4, v12 == -1))
  {
LABEL_24:
    std::string::basic_string[abi:ne180100]<0>((void *)a2, ".");
  }
  else
  {
    std::string::basic_string((std::string *)a2, __str, 0, v12 + 1, (std::allocator<char> *)&__p);
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "/");
      BOOL v13 = siri::dialogengine::StringEndsWith((std::string *)a2, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v13) {
        break;
      }
      uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *(void *)(a2 + 8);
      }
      std::string::basic_string(&__p, (const std::string *)a2, 0, v14 - 1, (std::allocator<char> *)&v16);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(std::string *)a2 = __p;
    }
  }
}

void sub_1C5D56190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::BaseName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    if (!v8)
    {
      BOOL v9 = *(const std::string::value_type **)a1;
      BOOL v10 = a2;
      std::string::size_type v11 = 0;
LABEL_24:
      std::string::__init_copy_ctor_external(v10, v9, v11);
      return;
    }
    std::string::size_type v5 = v8 - 1;
    uint64_t v7 = *(const std::string::value_type **)a1;
    if (*(unsigned char *)(*(void *)a1 + v8 - 1) != 47)
    {
      long long v6 = (unsigned __int8 *)&v7[v8];
LABEL_11:
      int64_t v12 = (unsigned __int8 *)v7;
      BOOL v13 = v6;
      do
      {
        uint64_t v14 = v12;
        BOOL v15 = v12;
        while (1)
        {
          int v16 = *v15++;
          if (v16 == 47) {
            break;
          }
          uint64_t v14 = v15;
          if (v15 == v6)
          {
            uint64_t v14 = v13;
            goto LABEL_17;
          }
        }
        int64_t v12 = v14 + 1;
        BOOL v13 = v14;
      }
      while (v15 != v6);
LABEL_17:
      if (v14 != v6)
      {
        int64_t v17 = v14 - (unsigned __int8 *)v7;
        if (v17 != -1)
        {
          std::string::basic_string(a2, (const std::string *)a1, v17 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
          return;
        }
      }
      if ((v4 & 0x80) == 0) {
        goto LABEL_21;
      }
      BOOL v9 = *(const std::string::value_type **)a1;
      std::string::size_type v11 = *(void *)(a1 + 8);
      BOOL v10 = a2;
      goto LABEL_24;
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 23))
    {
LABEL_21:
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      return;
    }
    std::string::size_type v5 = v4 - 1;
    if (*(unsigned char *)(a1 + v4 - 1) != 47)
    {
      long long v6 = (unsigned __int8 *)(a1 + v4);
      uint64_t v7 = (const std::string::value_type *)a1;
      goto LABEL_11;
    }
  }
  std::string::basic_string(&__p, (const std::string *)a1, 0, v5, (std::allocator<char> *)&v19);
  siri::dialogengine::BaseName(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D56334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetExtension(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::StringTrimRight("/", a1, &__p);
  std::string::size_type v3 = std::string::rfind(&__p, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v3 == -1) {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  else {
    std::string::basic_string(a2, &__p, v3 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v5);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D563DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::AddExtension(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v20);
    int v7 = *(char *)(a1 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *(void *)a1;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v8, v9);
    std::string::basic_string[abi:ne180100]<0>(__p, ".");
    BOOL v10 = siri::dialogengine::StringStartsWith((std::string *)a2, (unsigned __int8 *)__p);
    BOOL v11 = v10;
    if (v19 < 0)
    {
      operator delete(__p[0]);
      if (v11)
      {
LABEL_17:
        int v12 = *(char *)(a2 + 23);
        if (v12 >= 0) {
          uint64_t v13 = a2;
        }
        else {
          uint64_t v13 = *(void *)a2;
        }
        if (v12 >= 0) {
          uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v14 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v13, v14);
        std::stringbuf::str();
        v20[0] = *MEMORY[0x1E4FBA408];
        uint64_t v15 = *(void *)(MEMORY[0x1E4FBA408] + 72);
        *(void *)((char *)v20 + *(void *)(v20[0] - 2std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
        v21[0] = v15;
        v21[1] = MEMORY[0x1E4FBA470] + 16;
        if (v22 < 0) {
          operator delete((void *)v21[9]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1C8796CC0](&v23);
        return;
      }
    }
    else if (v10)
    {
      goto LABEL_17;
    }
    LOBYTE(__p[0]) = 46;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)__p, 1);
    goto LABEL_17;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v16 = *(const std::string::value_type **)a1;
    std::string::size_type v17 = *(void *)(a1 + 8);
    std::string::__init_copy_ctor_external(a3, v16, v17);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

void sub_1C5D5665C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::HasExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
    if ((v3 & 0x80u) != 0) {
      uint64_t v3 = *(void *)(a1 + 8);
    }
    if (v3)
    {
      siri::dialogengine::GetExtension((const std::string *)a1, &__p);
      siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)&__s1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::StringTrim(".", (const std::string *)a2, &v20);
      siri::dialogengine::StringToLower((uint64_t)&v20, (uint64_t)&__p);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      unsigned __int8 v5 = v24;
      if ((v24 & 0x80u) == 0) {
        size_t v6 = v24;
      }
      else {
        size_t v6 = __n;
      }
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      int v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (v6 != size)
      {
        BOOL v18 = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_34;
        }
        goto LABEL_37;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((char)v24 < 0)
      {
        BOOL v18 = memcmp(__s1, p_p, __n) == 0;
      }
      else
      {
        if (!v24)
        {
          BOOL v18 = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_34:
            if ((v5 & 0x80) == 0) {
              return v18;
            }
LABEL_38:
            operator delete(__s1);
            return v18;
          }
LABEL_37:
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v24 & 0x80) == 0) {
            return v18;
          }
          goto LABEL_38;
        }
        uint64_t v10 = v24 - 1;
        p_s1 = &__s1;
        do
        {
          int v13 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v12 = v13;
          int v15 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          int v14 = v15;
          BOOL v17 = v10-- != 0;
          BOOL v18 = v12 == v14;
        }
        while (v12 == v14 && v17);
      }
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_37;
    }
  }
  return 0;
}

void sub_1C5D56808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::RelativePathFromFolder(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4)
  {
    size_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    if ((char)v6 < 0) {
      size_t v6 = a2[1];
    }
    if (v6)
    {
      siri::dialogengine::StringSplit((unsigned __int8 *)a1, "/", &v30);
      int v8 = v30;
      int v7 = v31;
      if (v31 == v30)
      {
        int v13 = v31;
LABEL_32:
        if (v8 != v13)
        {
          memset(v29, 0, 7);
          if (v13 == v7)
          {
            BOOL v18 = 0;
            LOBYTE(v20) = 0;
            char v19 = 0;
            *(unsigned char *)a3 = 1;
          }
          else
          {
            unint64_t v17 = 0;
            uint64_t v26 = 0;
            unint64_t v27 = 0;
            unint64_t v28 = 0;
            do
            {
              if (v17 >= v28)
              {
                unint64_t v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v26, v13);
              }
              else
              {
                std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v26, v13);
                v17 += 24;
              }
              unint64_t v27 = v17;
              int v13 = (long long *)((char *)v13 + 24);
            }
            while (v13 != v7);
            std::string::basic_string[abi:ne180100]<0>(__p, "/");
            siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)v23, (uint64_t)v26, v27, (uint64_t)__p);
            BOOL v18 = (std::string::value_type *)v23[0];
            char v19 = v23[1];
            v29[0] = *(_DWORD *)v24;
            *(_DWORD *)((char *)v29 + 3) = *(_DWORD *)&v24[3];
            int v20 = v25;
            char v25 = 0;
            LOBYTE(v23[0]) = 0;
            if (v22 < 0) {
              operator delete(__p[0]);
            }
            v23[0] = (void **)&v26;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v23);
            *(unsigned char *)a3 = 1;
            if (v20 < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)(a3 + 8), v18, (std::string::size_type)v19);
              operator delete(v18);
LABEL_46:
              uint64_t v26 = &v30;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
              return;
            }
          }
          *(void *)(a3 + 8) = v18;
          *(void *)(a3 + 16) = v19;
          *(_DWORD *)(a3 + 24) = v29[0];
          *(_DWORD *)(a3 + 27) = *(_DWORD *)((char *)v29 + 3);
          *(unsigned char *)(a3 + 31) = v20;
          goto LABEL_46;
        }
      }
      else
      {
        char v9 = *((unsigned char *)a2 + 23);
        if (v9 >= 0) {
          uint64_t v10 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
        }
        else {
          uint64_t v10 = a2[1];
        }
        if (v9 >= 0) {
          BOOL v11 = (unsigned __int8 *)a2;
        }
        else {
          BOOL v11 = *a2;
        }
        int v12 = (const void **)v31;
        do
        {
          int v13 = (long long *)v12;
          v12 -= 3;
          uint64_t v14 = *((unsigned __int8 *)v13 - 1);
          if ((v14 & 0x80u) == 0) {
            int v15 = (unsigned __int8 *)*((unsigned __int8 *)v13 - 1);
          }
          else {
            int v15 = (unsigned __int8 *)*((void *)v13 - 2);
          }
          if (v15 == v10)
          {
            if ((v14 & 0x80) != 0)
            {
              if (!memcmp(*v12, v11, *((void *)v13 - 2))) {
                goto LABEL_32;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 - 1)) {
                goto LABEL_32;
              }
              uint64_t v16 = 0;
              while (*((unsigned __int8 *)v13 + v16 - 24) == v11[v16])
              {
                if (v14 == ++v16) {
                  goto LABEL_32;
                }
              }
            }
          }
        }
        while (v12 != (const void **)v8);
      }
      *(unsigned char *)a3 = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "");
      goto LABEL_46;
    }
  }
  *(unsigned char *)a3 = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "");
}

void sub_1C5D56AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  operator delete(v23);
  a19 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

double siri::dialogengine::GetFileModificationTime(uint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1]) {
      return 0.0;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    return 0.0;
  }
  int v1 = stat((const char *)a1, &v3);
  double result = (double)v3.st_mtimespec.tv_sec;
  if (v1 == -1) {
    return 0.0;
  }
  return result;
}

void *siri::dialogengine::GetTempDir@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "/tmp");
}

void *siri::dialogengine::GetHomeDir@<X0>(void *a1@<X8>)
{
  stat v3 = getenv("HOME");
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = "";
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, v4);
}

void *siri::dialogengine::GetCurrentDir@<X0>(void *a1@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  getcwd(__s, 0x400uLL);
  return std::string::basic_string[abi:ne180100]<0>(a1, __s);
}

BOOL siri::dialogengine::DeleteFile(const char *a1)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return unlink(a1) == 0;
}

void *siri::dialogengine::FindFileInPaths@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4 && (uint64_t v6 = a2[1] - *a2) != 0)
  {
    uint64_t v8 = 0;
    unint64_t v9 = v6 / 24;
    if (v9 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v9;
    }
    while (1)
    {
      siri::dialogengine::JoinPath(*a2 + v8, a1, a3);
      double result = (void *)siri::dialogengine::PathExists((uint64_t *)a3);
      if (result) {
        break;
      }
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      v8 += 24;
      if (!--v10) {
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    return std::string::basic_string[abi:ne180100]<0>((void *)a3, "");
  }
  return result;
}

void sub_1C5D56D90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ReadFileToString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  v19[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  if (v3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    std::ifstream::basic_ifstream(v17);
    uint64_t v4 = (std::locale::id *)MEMORY[0x1E4FBA258];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(v17[0] - 24)));
      uint64_t v5 = std::locale::use_facet(&v12, v4);
      unsigned __int8 v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v12);
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, (uint64_t)__p, v6);
      if ((v18[*(void *)(v17[0] - 24) + 16] & 5) != 0) {
        break;
      }
      if ((v16 & 0x80u) == 0) {
        size_t v7 = v16;
      }
      else {
        size_t v7 = (size_t)__p[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v12, v7 + 1);
      if ((v14 & 0x80u) == 0) {
        locale = (char *)&v12;
      }
      else {
        locale = (char *)v12.__locale_;
      }
      if (v7)
      {
        if ((v16 & 0x80u) == 0) {
          unint64_t v9 = __p;
        }
        else {
          unint64_t v9 = (void **)__p[0];
        }
        memmove(locale, v9, v7);
      }
      *(_WORD *)&locale[v7] = 10;
      if ((v14 & 0x80u) == 0) {
        uint64_t v10 = (const std::string::value_type *)&v12;
      }
      else {
        uint64_t v10 = (const std::string::value_type *)v12.__locale_;
      }
      if ((v14 & 0x80u) == 0) {
        std::string::size_type v11 = v14;
      }
      else {
        std::string::size_type v11 = v13;
      }
      std::string::append(a2, v10, v11);
      if ((char)v14 < 0) {
        operator delete(v12.__locale_);
      }
    }
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v17 + *(void *)(v17[0] - 24)), *(_DWORD *)&v18[*(void *)(v17[0] - 24) + 16] | 4);
    }
    v17[0] = *MEMORY[0x1E4FBA3F8];
    *(uint64_t *)((char *)v17 + *(void *)(v17[0] - 2std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
    MEMORY[0x1C8796A10](v18);
    std::istream::~istream();
    MEMORY[0x1C8796CC0](v19);
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C5D5709C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v23 + 23) < 0) {
    operator delete(*(void **)v23);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::WriteFileFromString(std::string *a1, uint64_t a2)
{
  v13[19] = *MEMORY[0x1E4F143B8];
  siri::dialogengine::DirName(a1, (uint64_t)&__p);
  if (!siri::dialogengine::DirExists((uint64_t *)&__p))
  {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size) {
      siri::dialogengine::CreateDir(&__p, 504);
    }
  }
  std::ofstream::basic_ofstream(&v10);
  uint64_t v4 = v12;
  if (v12)
  {
    int v5 = *(char *)(a2 + 23);
    uint64_t v6 = v5 >= 0 ? a2 : *(void *)a2;
    uint64_t v7 = v5 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, v6, v7);
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)&v11[*(void *)(v10 - 24) - 8], *(_DWORD *)&v11[*(void *)(v10 - 24) + 24] | 4);
    }
  }
  uint64_t v10 = *MEMORY[0x1E4FBA400];
  *(void *)&v11[*(void *)(v10 - 24) - 8] = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x1C8796A10](v11);
  std::ostream::~ostream();
  MEMORY[0x1C8796CC0](v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4 != 0;
}

void sub_1C5D572D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CreateDir(std::string *a1, __int16 a2)
{
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (!size) {
    return 0;
  }
  if (siri::dialogengine::DirExists((uint64_t *)a1))
  {
    if (siri::dialogengine::AddPermissions((const char *)a1, a2)) {
      return 1;
    }
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = (uint64_t *)a1;
    }
    else {
      std::string::size_type v13 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to add permissions to existing directory: %s", v5, v13);
    return 0;
  }
  siri::dialogengine::StringSplit((unsigned __int8 *)a1, "/", &v19);
  std::string::basic_string[abi:ne180100]<0>(__p, "/");
  if (siri::dialogengine::StringStartsWith(a1, (unsigned __int8 *)__p)) {
    uint64_t v7 = "/";
  }
  else {
    uint64_t v7 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(v17, v7);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = v19;
  if (v20 == v19)
  {
LABEL_26:
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      siri::dialogengine::JoinPath((uint64_t)v17, v8 + v9, (uint64_t)__p);
      if (SHIBYTE(v18) < 0) {
        operator delete(v17[0]);
      }
      *(_OWORD *)unint64_t v17 = *(_OWORD *)__p;
      uint64_t v18 = v16;
      if (!siri::dialogengine::DirExists((uint64_t *)v17))
      {
        std::string::size_type v11 = v18 >= 0 ? (const char *)v17 : (const char *)v17[0];
        if (mkdir(v11, a2)) {
          break;
        }
        uint64_t v12 = v18 >= 0 ? (const char *)v17 : (const char *)v17[0];
        if (chmod(v12, a2)) {
          break;
        }
      }
      ++v10;
      uint64_t v8 = v19;
      v9 += 24;
      if (v10 >= 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3)) {
        goto LABEL_26;
      }
    }
    uint64_t v6 = 0;
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  v17[0] = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  return v6;
}

void sub_1C5D574E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  a16 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::CopyFile(uint64_t *a1, std::string *a2)
{
  if (!siri::dialogengine::FileExists(a1)) {
    return 0;
  }
  siri::dialogengine::ReadFileToString((uint64_t)a1, &__p);
  BOOL v4 = siri::dialogengine::WriteFileFromString(a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1C5D575A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::DeleteDir(uint64_t *a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)a1 + 23)) {
      return 0;
    }
    return rmdir((const char *)a1) == 0;
  }
  if (a1[1])
  {
    a1 = (uint64_t *)*a1;
    return rmdir((const char *)a1) == 0;
  }
  return 0;
}

BOOL siri::dialogengine::DeleteDirTree(char *a1)
{
  siri::dialogengine::ListDirRecursively(a1, (uint64_t)&v14);
  unint64_t v2 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v15[-v14] >> 3));
  if (v15 == (unsigned __int8 *)v14) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  std::__introsort<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*,false>(v14, v15, v3, 1);
  unint64_t v4 = v14;
  int v5 = v15;
  if ((unsigned __int8 *)v14 == v15)
  {
LABEL_25:
    BOOL v9 = siri::dialogengine::DeleteDir((uint64_t *)a1);
    goto LABEL_31;
  }
  while (1)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)v4;
      v13.__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
      *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v6;
    }
    siri::dialogengine::JoinPath((uint64_t)a1, (uint64_t)&v13, (uint64_t)v11);
    if (!siri::dialogengine::FileExists((uint64_t *)v11)) {
      break;
    }
    if (v12 >= 0) {
      uint64_t v7 = (const char *)v11;
    }
    else {
      uint64_t v7 = v11[0];
    }
    if (unlink(v7)) {
      goto LABEL_26;
    }
LABEL_20:
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    v4 += 24;
    if ((unsigned __int8 *)v4 == v5) {
      goto LABEL_25;
    }
  }
  if (v12 < 0)
  {
    if (!v11[1]) {
      goto LABEL_27;
    }
    uint64_t v8 = v11[0];
  }
  else
  {
    if (!v12) {
      goto LABEL_28;
    }
    uint64_t v8 = (const char *)v11;
  }
  if (!rmdir(v8)) {
    goto LABEL_20;
  }
LABEL_26:
  if ((v12 & 0x80000000) == 0) {
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v11[0]);
LABEL_28:
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  BOOL v9 = 0;
LABEL_31:
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  return v9;
}

void sub_1C5D57774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  a16 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ListDirRecursively(const char *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  siri::dialogengine::ListDir(a1, (uint64_t)&v32);
  unint64_t v4 = v32;
  for (i = v33; v4 != i; unint64_t v4 = (long long *)((char *)v4 + 24))
  {
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    }
    else
    {
      long long v5 = *v4;
      v31.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v5;
    }
    unint64_t v6 = *(void *)(a2 + 8);
    if (v6 >= *(void *)(a2 + 16))
    {
      uint64_t v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (long long *)&v31);
    }
    else
    {
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v7 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
        *(void *)(v6 + 16) = *((void *)&v31.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v6 = v7;
      }
      uint64_t v8 = v6 + 24;
      *(void *)(a2 + 8) = v6 + 24;
    }
    *(void *)(a2 + 8) = v8;
    siri::dialogengine::JoinPath((uint64_t)a1, (uint64_t)&v31, (uint64_t)v29);
    if (siri::dialogengine::DirExists((uint64_t *)v29))
    {
      siri::dialogengine::ListDirRecursively(v28, v29);
      unint64_t v10 = (long long *)v28[0];
      BOOL v9 = (long long *)v28[1];
      while (v10 != v9)
      {
        if (*((char *)v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v10, *((void *)v10 + 1));
        }
        else
        {
          long long v11 = *v10;
          v27.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
          *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
        }
        siri::dialogengine::JoinPath((uint64_t)&v31, (uint64_t)&v27, (uint64_t)__p);
        unint64_t v13 = *(void *)(a2 + 8);
        unint64_t v12 = *(void *)(a2 + 16);
        if (v13 >= v12)
        {
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(void *)a2) >> 3);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(void *)a2) >> 3);
          if (2 * v17 > v16) {
            unint64_t v16 = 2 * v17;
          }
          if (v17 >= 0x555555555555555) {
            unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v18 = v16;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v18) {
            uint64_t v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v18);
          }
          else {
            uint64_t v19 = 0;
          }
          uint64_t v20 = v19 + v15;
          __v.__first_ = v19;
          __v.__begin_ = v20;
          __v.__end_cap_.__value_ = &v19[v18];
          long long v21 = *(_OWORD *)__p;
          v20->__r_.__value_.__r.__words[2] = v26;
          *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
          __p[1] = 0;
          std::string::size_type v26 = 0;
          __p[0] = 0;
          __v.__end_ = v20 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          uint64_t v22 = *(void *)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          int v23 = SHIBYTE(v26);
          *(void *)(a2 + 8) = v22;
          if (v23 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v14 = *(_OWORD *)__p;
          *(void *)(v13 + 16) = v26;
          *(_OWORD *)unint64_t v13 = v14;
          *(void *)(a2 + 8) = v13 + 24;
        }
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        unint64_t v10 = (long long *)((char *)v10 + 24);
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)v28;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1C5D57A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
}

void std::__introsort<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*,false>(unint64_t a1, unsigned __int8 *a2, uint64_t a3, char a4)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    unint64_t v10 = a2 - 24;
    std::string v104 = a2 - 48;
    unint64_t v106 = (unint64_t)a2;
    long long v11 = a2 - 72;
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = (uint64_t)&a2[-v12];
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a2[-v12] >> 3);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v10, (unsigned __int8 *)a1))
                {
                  long long v41 = *(_OWORD *)a1;
                  uint64_t v109 = *(void *)(a1 + 16);
                  long long v108 = v41;
                  long long v42 = *(_OWORD *)v10;
                  *(void *)(a1 + 16) = *((void *)v10 + 2);
                  *(_OWORD *)a1 = v42;
                  long long v43 = v108;
                  *((void *)v10 + 2) = v109;
                  *(_OWORD *)unint64_t v10 = v43;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)a1, (unsigned __int8 *)(a1 + 24), v10);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(a1, (unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a1 + 48), (long long *)v10);
                break;
              case 5uLL:
                char v44 = (long long *)(a1 + 24);
                uint64_t v45 = (long long *)(a1 + 48);
                uint64_t v46 = (long long *)(a1 + 72);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(a1, (unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a1 + 48), (long long *)(a1 + 72));
                if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v10, (unsigned __int8 *)(a1 + 72)))
                {
                  long long v108 = *v46;
                  long long v47 = v108;
                  uint64_t v109 = *(void *)(a1 + 88);
                  uint64_t v48 = v109;
                  uint64_t v49 = *((void *)v10 + 2);
                  *uint64_t v46 = *(_OWORD *)v10;
                  *(void *)(a1 + 88) = v49;
                  *((void *)v10 + 2) = v48;
                  *(_OWORD *)unint64_t v10 = v47;
                  if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 72), (unsigned __int8 *)(a1 + 48)))
                  {
                    uint64_t v50 = *(void *)(a1 + 64);
                    long long v51 = *v45;
                    *uint64_t v45 = *v46;
                    *(void *)(a1 + 64) = *(void *)(a1 + 88);
                    *uint64_t v46 = v51;
                    *(void *)(a1 + 88) = v50;
                    if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 48), (unsigned __int8 *)(a1 + 24)))
                    {
                      uint64_t v52 = *(void *)(a1 + 40);
                      long long v53 = *v44;
                      *char v44 = *v45;
                      *(void *)(a1 + 40) = *(void *)(a1 + 64);
                      *uint64_t v45 = v53;
                      *(void *)(a1 + 64) = v52;
                      if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 24), (unsigned __int8 *)a1))
                      {
                        long long v54 = *(_OWORD *)a1;
                        uint64_t v109 = *(void *)(a1 + 16);
                        long long v108 = v54;
                        *(_OWORD *)a1 = *v44;
                        *(void *)(a1 + 16) = *(void *)(a1 + 40);
                        *char v44 = v108;
                        *(void *)(a1 + 40) = v109;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            std::string v55 = (unsigned __int8 *)(a1 + 24);
            BOOL v57 = (unsigned __int8 *)a1 == a2 || v55 == a2;
            if (a4)
            {
              if (!v57)
              {
                uint64_t v58 = 0;
                unint64_t v59 = a1;
                do
                {
                  char v60 = (unsigned __int8 *)v59;
                  unint64_t v59 = (unint64_t)v55;
                  if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v55, v60))
                  {
                    long long v61 = *(_OWORD *)v59;
                    uint64_t v109 = *(void *)(v59 + 16);
                    long long v108 = v61;
                    *(void *)(v59 + 8) = 0;
                    *(void *)(v59 + 16) = 0;
                    *(void *)unint64_t v59 = 0;
                    uint64_t v62 = v58;
                    while (1)
                    {
                      uint64_t v63 = a1 + v62;
                      *(_OWORD *)(v63 + 24) = *(_OWORD *)(a1 + v62);
                      *(void *)(v63 + 40) = *(void *)(a1 + v62 + 16);
                      *(unsigned char *)(v63 + 23) = 0;
                      *(unsigned char *)uint64_t v63 = 0;
                      if (!v62) {
                        break;
                      }
                      v62 -= 24;
                      if (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v108, (unsigned __int8 *)(v62 + a1)))
                      {
                        uint64_t v64 = a1 + v62 + 24;
                        goto LABEL_85;
                      }
                    }
                    uint64_t v64 = a1;
LABEL_85:
                    long long v65 = v108;
                    *(void *)(v64 + 16) = v109;
                    *(_OWORD *)uint64_t v64 = v65;
                  }
                  std::string v55 = (unsigned __int8 *)(v59 + 24);
                  v58 += 24;
                }
                while ((unsigned __int8 *)(v59 + 24) != a2);
              }
            }
            else if (!v57)
            {
              do
              {
                int v98 = (unsigned __int8 *)a1;
                a1 = (unint64_t)v55;
                if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v55, v98))
                {
                  long long v99 = *(_OWORD *)a1;
                  uint64_t v109 = *(void *)(a1 + 16);
                  long long v108 = v99;
                  *(void *)(a1 + 8) = 0;
                  *(void *)(a1 + 16) = 0;
                  *(void *)a1 = 0;
                  unint64_t v100 = a1;
                  do
                  {
                    unint64_t v101 = v100 - 24;
                    *(_OWORD *)unint64_t v100 = *(_OWORD *)(v100 - 24);
                    *(void *)(v100 + 16) = *(void *)(v100 - 8);
                    *(unsigned char *)(v100 - 1) = 0;
                    *(unsigned char *)(v100 - 24) = 0;
                    BOOL v102 = siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v108, (unsigned __int8 *)(v100 - 48));
                    unint64_t v100 = v101;
                  }
                  while (v102);
                  long long v103 = v108;
                  *(void *)(v101 + 16) = v109;
                  *(_OWORD *)unint64_t v101 = v103;
                }
                std::string v55 = (unsigned __int8 *)(a1 + 24);
              }
              while ((unsigned __int8 *)(a1 + 24) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((unsigned __int8 *)a1 != a2)
            {
              int64_t v66 = (v14 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = a1 + 24 * v69;
                  if (2 * v67 + 2 < (uint64_t)v14
                    && siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 24 * v69), (unsigned __int8 *)(v70 + 24)))
                  {
                    v70 += 24;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  unint64_t v71 = a1 + 24 * v68;
                  if (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v70, (unsigned __int8 *)v71))
                  {
                    long long v72 = *(_OWORD *)v71;
                    uint64_t v109 = *(void *)(v71 + 16);
                    long long v108 = v72;
                    *(void *)(v71 + 8) = 0;
                    *(void *)(v71 + 16) = 0;
                    *(void *)unint64_t v71 = 0;
                    do
                    {
                      unint64_t v73 = v70;
                      long long v74 = *(_OWORD *)v70;
                      *(void *)(v71 + 16) = *(void *)(v70 + 16);
                      *(_OWORD *)unint64_t v71 = v74;
                      *(unsigned char *)(v70 + 23) = 0;
                      *(unsigned char *)unint64_t v70 = 0;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v75 = (2 * v69) | 1;
                      unint64_t v70 = a1 + 24 * v75;
                      uint64_t v76 = 2 * v69 + 2;
                      if (v76 < (uint64_t)v14
                        && siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 24 * v75), (unsigned __int8 *)(v70 + 24)))
                      {
                        v70 += 24;
                        uint64_t v75 = v76;
                      }
                      unint64_t v71 = v73;
                      uint64_t v69 = v75;
                    }
                    while (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v70, (unsigned __int8 *)&v108));
                    long long v77 = v108;
                    *(void *)(v73 + 16) = v109;
                    *(_OWORD *)unint64_t v73 = v77;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v78 = v13 / 0x18uLL;
              char v79 = (_OWORD *)v106;
              do
              {
                uint64_t v80 = 0;
                char v81 = v79;
                uint64_t v105 = *(void *)a1;
                *(void *)&long long v110 = *(void *)(a1 + 8);
                *(void *)((char *)&v110 + 7) = *(void *)(a1 + 15);
                char v107 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                unint64_t v82 = a1;
                do
                {
                  uint64_t v83 = v82 + 24 * v80 + 24;
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  uint64_t v85 = v84 + 2;
                  if (v84 + 2 < v78
                    && siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v83, (unsigned __int8 *)(v83 + 24)))
                  {
                    v83 += 24;
                    uint64_t v80 = v85;
                  }
                  if (*(char *)(v82 + 23) < 0) {
                    operator delete(*(void **)v82);
                  }
                  long long v86 = *(_OWORD *)v83;
                  *(void *)(v82 + 16) = *(void *)(v83 + 16);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(unsigned char *)(v83 + 23) = 0;
                  *(unsigned char *)uint64_t v83 = 0;
                  unint64_t v82 = v83;
                }
                while (v80 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
                char v79 = (_OWORD *)((char *)v79 - 24);
                if ((_OWORD *)v83 == (_OWORD *)((char *)v81 - 24))
                {
                  *(void *)uint64_t v83 = v105;
                  uint64_t v96 = *(void *)((char *)&v110 + 7);
                  *(void *)(v83 + 8) = v110;
                  *(void *)(v83 + 15) = v96;
                  *(unsigned char *)(v83 + 23) = v107;
                }
                else
                {
                  long long v87 = *v79;
                  *(void *)(v83 + 16) = *((void *)v81 - 1);
                  *(_OWORD *)uint64_t v83 = v87;
                  *((void *)v81 - 3) = v105;
                  uint64_t v88 = v110;
                  *(void *)((char *)v81 - 9) = *(void *)((char *)&v110 + 7);
                  *((void *)v81 - 2) = v88;
                  *((unsigned char *)v81 - 1) = v107;
                  uint64_t v89 = v83 - a1 + 24;
                  if (v89 >= 25)
                  {
                    unint64_t v90 = (v89 / 0x18uLL - 2) >> 1;
                    unint64_t v91 = a1 + 24 * v90;
                    if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v91, (unsigned __int8 *)v83))
                    {
                      long long v92 = *(_OWORD *)v83;
                      uint64_t v109 = *(void *)(v83 + 16);
                      long long v108 = v92;
                      *(void *)(v83 + 8) = 0;
                      *(void *)(v83 + 16) = 0;
                      *(void *)uint64_t v83 = 0;
                      do
                      {
                        uint64_t v93 = v91;
                        long long v94 = *(_OWORD *)v91;
                        *(void *)(v83 + 16) = *(void *)(v91 + 16);
                        *(_OWORD *)uint64_t v83 = v94;
                        *(unsigned char *)(v91 + 23) = 0;
                        *(unsigned char *)unint64_t v91 = 0;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = a1 + 24 * v90;
                        uint64_t v83 = v93;
                      }
                      while (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v91, (unsigned __int8 *)&v108));
                      long long v95 = v108;
                      *(void *)(v93 + 16) = v109;
                      *(_OWORD *)uint64_t v93 = v95;
                    }
                  }
                }
              }
              while (v78-- > 2);
            }
            return;
          }
          unint64_t v15 = a1 + 24 * (v14 >> 1);
          if ((unint64_t)v13 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)a1, (unsigned __int8 *)(a1 + 24 * (v14 >> 1)), v10);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a1 + 24 * (v14 >> 1) - 24), v104);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)(a1 + 48), (unsigned __int8 *)(a1 + 24 + 24 * (v14 >> 1)), v11);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)(a1 + 24 * (v14 >> 1) - 24), (unsigned __int8 *)v15, (unsigned __int8 *)(a1 + 24 + 24 * (v14 >> 1)));
            long long v16 = *(_OWORD *)a1;
            uint64_t v109 = *(void *)(a1 + 16);
            long long v108 = v16;
            uint64_t v17 = *(void *)(v15 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v17;
            long long v18 = v108;
            *(void *)(v15 + 16) = v109;
            *(_OWORD *)unint64_t v15 = v18;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)(a1 + 24 * (v14 >> 1)), (unsigned __int8 *)a1, v10);
          }
          --a3;
          a2 = (unsigned __int8 *)v106;
          if ((a4 & 1) != 0
            || siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 - 24), (unsigned __int8 *)a1))
          {
            break;
          }
          long long v31 = *(_OWORD *)a1;
          uint64_t v111 = *(void *)(a1 + 16);
          long long v110 = v31;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v110, v10))
          {
            unint64_t v12 = a1;
            do
              v12 += 24;
            while (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v110, (unsigned __int8 *)v12));
          }
          else
          {
            uint64_t v32 = (unsigned __int8 *)(a1 + 24);
            do
            {
              unint64_t v12 = (unint64_t)v32;
              if ((unint64_t)v32 >= v106) {
                break;
              }
              BOOL v33 = siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v110, v32);
              uint64_t v32 = (unsigned __int8 *)(v12 + 24);
            }
            while (!v33);
          }
          unint64_t v34 = v106;
          if (v12 < v106)
          {
            unint64_t v34 = v106;
            do
              v34 -= 24;
            while (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v110, (unsigned __int8 *)v34));
          }
          while (v12 < v34)
          {
            long long v35 = *(_OWORD *)v12;
            uint64_t v109 = *(void *)(v12 + 16);
            long long v108 = v35;
            long long v36 = *(_OWORD *)v34;
            *(void *)(v12 + 16) = *(void *)(v34 + 16);
            *(_OWORD *)unint64_t v12 = v36;
            long long v37 = v108;
            *(void *)(v34 + 16) = v109;
            *(_OWORD *)unint64_t v34 = v37;
            do
              v12 += 24;
            while (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v110, (unsigned __int8 *)v12));
            do
              v34 -= 24;
            while (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v110, (unsigned __int8 *)v34));
          }
          unint64_t v38 = (long long *)(v12 - 24);
          BOOL v4 = v12 - 24 >= a1;
          BOOL v5 = v12 - 24 == a1;
          if (v12 - 24 == a1)
          {
            if (*(char *)(v12 - 1) < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v39 = *v38;
            *(void *)(a1 + 16) = *(void *)(v12 - 8);
            *(_OWORD *)a1 = v39;
            *(unsigned char *)(v12 - 1) = 0;
            *(unsigned char *)(v12 - 24) = 0;
          }
          a4 = 0;
          long long v40 = v110;
          *(void *)(v12 - 8) = v111;
          *unint64_t v38 = v40;
        }
        long long v19 = *(_OWORD *)a1;
        uint64_t v111 = *(void *)(a1 + 16);
        long long v110 = v19;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v20 = (unsigned __int8 *)a1;
        do
        {
          long long v21 = v20;
          v20 += 24;
        }
        while (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v20, (unsigned __int8 *)&v110));
        uint64_t v22 = (unsigned __int8 *)v106;
        if (v21 == (unsigned __int8 *)a1)
        {
          uint64_t v22 = (unsigned __int8 *)v106;
          do
          {
            if (v20 >= v22) {
              break;
            }
            v22 -= 24;
          }
          while (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v22, (unsigned __int8 *)&v110));
        }
        else
        {
          do
            v22 -= 24;
          while (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v22, (unsigned __int8 *)&v110));
        }
        unint64_t v12 = (unint64_t)v20;
        if (v20 < v22)
        {
          int v23 = v22;
          do
          {
            long long v108 = *(_OWORD *)v12;
            long long v24 = v108;
            uint64_t v109 = *(void *)(v12 + 16);
            uint64_t v25 = v109;
            uint64_t v26 = *((void *)v23 + 2);
            *(_OWORD *)unint64_t v12 = *(_OWORD *)v23;
            *(void *)(v12 + 16) = v26;
            *((void *)v23 + 2) = v25;
            *(_OWORD *)int v23 = v24;
            do
              v12 += 24;
            while (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v12, (unsigned __int8 *)&v110));
            do
              v23 -= 24;
            while (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v23, (unsigned __int8 *)&v110));
          }
          while (v12 < (unint64_t)v23);
        }
        std::string v27 = (long long *)(v12 - 24);
        if (v12 - 24 == a1)
        {
          if (*(char *)(v12 - 1) < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v28 = *v27;
          *(void *)(a1 + 16) = *(void *)(v12 - 8);
          *(_OWORD *)a1 = v28;
          *(unsigned char *)(v12 - 1) = 0;
          *(unsigned char *)(v12 - 24) = 0;
        }
        long long v29 = v110;
        *(void *)(v12 - 8) = v111;
        *std::string v27 = v29;
        if (v20 >= v22) {
          break;
        }
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*,false>(a1, v12 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(a1, v12 - 24);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(v12, v106))
      {
        break;
      }
      if (!v30) {
        goto LABEL_35;
      }
    }
    a2 = (unsigned __int8 *)(v12 - 24);
    if (!v30) {
      continue;
    }
    break;
  }
}

BOOL siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = (char)a1[23];
  BOOL v3 = v2 < 0;
  if (v2 >= 0) {
    BOOL v4 = a1;
  }
  else {
    BOOL v4 = *(unsigned __int8 **)a1;
  }
  if (v3) {
    uint64_t v5 = *((void *)a1 + 1);
  }
  else {
    uint64_t v5 = a1[23];
  }
  if (v5)
  {
    unint64_t v6 = 0;
    do
    {
      int v7 = *v4++;
      if (v7 == 47) {
        ++v6;
      }
      --v5;
    }
    while (v5);
  }
  else
  {
    unint64_t v6 = 0;
  }
  uint64_t v8 = a2[23];
  if ((v8 & 0x80u) == 0) {
    BOOL v9 = a2;
  }
  else {
    BOOL v9 = *(unsigned __int8 **)a2;
  }
  unint64_t v10 = 0;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)a2 + 1);
  }
  for (; v8; --v8)
  {
    int v11 = *v9++;
    if (v11 == 47) {
      ++v10;
    }
  }
  return v6 > v10;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v6 = siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(a2, a1);
  BOOL result = siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(a3, a2);
  if (v6)
  {
    if (result)
    {
      uint64_t v8 = *((void *)a1 + 2);
      long long v9 = *(_OWORD *)a1;
      uint64_t v10 = *((void *)a3 + 2);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *((void *)a1 + 2) = v10;
    }
    else
    {
      uint64_t v17 = *((void *)a1 + 2);
      long long v18 = *(_OWORD *)a1;
      uint64_t v19 = *((void *)a2 + 2);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = v19;
      *(_OWORD *)a2 = v18;
      *((void *)a2 + 2) = v17;
      BOOL result = siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v8 = *((void *)a2 + 2);
      long long v9 = *(_OWORD *)a2;
      uint64_t v20 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v20;
    }
    *(_OWORD *)a3 = v9;
    *((void *)a3 + 2) = v8;
  }
  else if (result)
  {
    uint64_t v11 = *((void *)a2 + 2);
    long long v12 = *(_OWORD *)a2;
    uint64_t v13 = *((void *)a3 + 2);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((void *)a2 + 2) = v13;
    *(_OWORD *)a3 = v12;
    *((void *)a3 + 2) = v11;
    BOOL result = siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(a2, a1);
    if (result)
    {
      uint64_t v14 = *((void *)a1 + 2);
      long long v15 = *(_OWORD *)a1;
      uint64_t v16 = *((void *)a2 + 2);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = v16;
      *(_OWORD *)a2 = v15;
      *((void *)a2 + 2) = v14;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, long long *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)a1, a2, a3);
  if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)a4, a3))
  {
    uint64_t v9 = *((void *)a3 + 2);
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = *((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    *((void *)a3 + 2) = v11;
    *a4 = v10;
    *((void *)a4 + 2) = v9;
    if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(a3, a2))
    {
      uint64_t v12 = *((void *)a2 + 2);
      long long v13 = *(_OWORD *)a2;
      uint64_t v14 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v14;
      *(_OWORD *)a3 = v13;
      *((void *)a3 + 2) = v12;
      if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(a2, (unsigned __int8 *)a1))
      {
        uint64_t v15 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v16 = *((void *)a2 + 2);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v16;
        *(__n128 *)a2 = result;
        *((void *)a2 + 2) = v15;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = a2 - 24;
      if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a2 - 24), (unsigned __int8 *)a1))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(v6 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(void *)(a1 + 16) = v9;
        *(_OWORD *)uint64_t v6 = v8;
        *(void *)(v6 + 16) = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)a1, (unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(a1, (unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a1 + 48), (long long *)(a2 - 24));
      return 1;
    case 5uLL:
      uint64_t v17 = (long long *)(a1 + 24);
      long long v18 = (long long *)(a1 + 48);
      uint64_t v19 = (long long *)(a1 + 72);
      uint64_t v20 = a2 - 24;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(a1, (unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a1 + 48), (long long *)(a1 + 72));
      if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v20, (unsigned __int8 *)(a1 + 72)))
      {
        uint64_t v21 = *(void *)(a1 + 88);
        long long v22 = *v19;
        uint64_t v23 = *(void *)(v20 + 16);
        *uint64_t v19 = *(_OWORD *)v20;
        *(void *)(a1 + 88) = v23;
        *(_OWORD *)uint64_t v20 = v22;
        *(void *)(v20 + 16) = v21;
        if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 72), (unsigned __int8 *)(a1 + 48)))
        {
          uint64_t v24 = *(void *)(a1 + 64);
          long long v25 = *v18;
          *long long v18 = *v19;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *uint64_t v19 = v25;
          *(void *)(a1 + 88) = v24;
          if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 48), (unsigned __int8 *)(a1 + 24)))
          {
            uint64_t v26 = *(void *)(a1 + 40);
            long long v27 = *v17;
            *uint64_t v17 = *v18;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            *long long v18 = v27;
            *(void *)(a1 + 64) = v26;
            if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 24), (unsigned __int8 *)a1))
            {
              uint64_t v28 = *(void *)(a1 + 16);
              long long v29 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *uint64_t v17 = v29;
              *(void *)(a1 + 40) = v28;
            }
          }
        }
      }
      return 1;
    default:
      long long v10 = (unsigned __int8 *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)a1, (unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v11, v10))
    {
      long long v30 = *(_OWORD *)v11;
      uint64_t v31 = *(void *)(v11 + 16);
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      *(void *)uint64_t v11 = 0;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(void *)(v15 + 88) = *(void *)(a1 + v14 + 64);
        *(unsigned char *)(v15 + 71) = 0;
        *(unsigned char *)(v15 + 48) = 0;
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v30, (unsigned __int8 *)(v15 + 24)))
        {
          uint64_t v16 = a1 + v14 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      *(_OWORD *)uint64_t v16 = v30;
      *(void *)(v16 + 16) = v31;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    long long v10 = (unsigned __int8 *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

void siri::dialogengine::ExecuteShellCommand(const char *a1@<X0>, int *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t v6 = popen(a1, "r");
  if (!v6) {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not execute command!", v5);
  }
  while (!feof(v6))
  {
    if (fgets(__s, 2048, v6)) {
      std::string::append(a3, __s);
    }
  }
  int v7 = pclose(v6);
  if (a2) {
    *a2 = v7;
  }
  if (v7 == -1)
  {
    uint64_t v12 = *__error();
    int v13 = __error();
    uint64_t v14 = strerror(*v13);
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"catutil child process pclose returned -1. errno %d: %s", v15, v12, v14);
  }
  else
  {
    LODWORD(v9) = v7 & 0x7F;
    if (v9 != 127)
    {
      unsigned int v10 = BYTE1(v7);
      if ((v7 & 0x7F) != 0) {
        uint64_t v11 = "catutil child process killed, signal = %d";
      }
      else {
        uint64_t v11 = "catutil child process exited, status = %d";
      }
      if (v9) {
        uint64_t v9 = v9;
      }
      else {
        uint64_t v9 = v10;
      }
      goto LABEL_18;
    }
    uint64_t v9 = (v7 >> 8);
    if (v9 != 19)
    {
      uint64_t v11 = "catutil child process stopped, signal = %d";
LABEL_18:
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)v11, v8, v9);
    }
  }
}

void sub_1C5D58C24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t YAML::Exp::ParseHex(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(result + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(result + 8);
  }
  if (!v2) {
    return 0;
  }
  uint64_t v4 = (void *)result;
  LODWORD(result) = 0;
  if (v3 < 0) {
    uint64_t v4 = (void *)*v4;
  }
  do
  {
    int v6 = *(char *)v4;
    uint64_t v4 = (void *)((char *)v4 + 1);
    int v5 = v6;
    if ((v6 - 97) >= 6)
    {
      if ((v5 - 65) >= 6)
      {
        if ((v5 - 48) >= 0xA)
        {
          exception = __cxa_allocate_exception(0x38uLL);
          std::string::basic_string[abi:ne180100]<0>(&v10, "bad character found while scanning hex number");
          YAML::Exception::Exception((uint64_t)exception, a2, &v10);
          void *exception = &unk_1F2127238;
        }
        int v7 = -48;
      }
      else
      {
        int v7 = -55;
      }
    }
    else
    {
      int v7 = -87;
    }
    BOOL result = (v7 + v5 + 16 * result);
    --v2;
  }
  while (v2);
  return result;
}

void sub_1C5D58D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t YAML::Exception::Exception(uint64_t a1, _DWORD *a2, long long *a3)
{
  if (*a2 == -1 && a2[1] == -1 && a2[2] == -1)
  {
    if (*((char *)a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a3, *((void *)a3 + 1));
    }
    else {
      std::string v19 = *(std::string *)a3;
    }
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"yaml-cpp: error at line ", 24);
    long long v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", column ", 9);
    uint64_t v9 = (void *)std::ostream::operator<<();
    long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
    int v11 = *((char *)a3 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v12 = *(const std::string::value_type **)a3;
    }
    if (v11 >= 0) {
      uint64_t v13 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v13 = *((void *)a3 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
    std::stringbuf::str();
    v20[0] = *MEMORY[0x1E4FBA408];
    uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)((char *)v20 + *(void *)(v20[0] - 2std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    v21[0] = v14;
    v21[1] = MEMORY[0x1E4FBA470] + 16;
    if (v22 < 0) {
      operator delete((void *)v21[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C8796CC0](&v23);
  }
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v19);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F2127260;
  uint64_t v15 = *(void *)a2;
  *(_DWORD *)(a1 + 24) = a2[2];
  *(void *)(a1 + 16) = v15;
  int v16 = (std::string *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v17 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  return a1;
}

void sub_1C5D59038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::runtime_error::~runtime_error(v15);
  _Unwind_Resume(a1);
}

uint64_t YAML::Exp::Str@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  a2[23] = 1;
  *a2 = this;
  a2[1] = 0;
  return this;
}

void YAML::Exp::Escape(YAML::Exp *this@<X0>, YAML::Stream *a2@<X1>, uint64_t a3@<X8>)
{
  memset(&v32, 0, sizeof(v32));
  if ((int)a2 >= 1)
  {
    int v5 = (int)a2;
    do
    {
      std::string::value_type v6 = YAML::Stream::get(this);
      std::string::push_back(&v32, v6);
      --v5;
    }
    while (v5);
  }
  int v7 = *((_DWORD *)this + 4);
  v31.__r_.__value_.__r.__words[0] = *((void *)this + 1);
  LODWORD(v31.__r_.__value_.__r.__words[1]) = v7;
  unsigned int v8 = YAML::Exp::ParseHex((uint64_t)&v32, &v31);
  unsigned int v9 = v8;
  if (HIWORD(v8) > 0x10u || (v8 & 0xFFFFF800) == 55296)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31.__r_.__value_.__r.__words[2], (uint64_t)"invalid unicode: ", 17);
    std::ostream::operator<<();
    exception = __cxa_allocate_exception(0x38uLL);
    int v22 = *((_DWORD *)this + 4);
    v29.__r_.__value_.__r.__words[0] = *((void *)this + 1);
    LODWORD(v29.__r_.__value_.__r.__words[1]) = v22;
    std::stringbuf::str();
    YAML::Exception::Exception((uint64_t)exception, &v29, (long long *)&__s);
    void *exception = &unk_1F2127238;
  }
  if (v8 <= 0x7F)
  {
    *(unsigned char *)(a3 + 23) = 1;
    *(_WORD *)a3 = v8;
    goto LABEL_37;
  }
  if (v8 > 0x7FF)
  {
    if (HIWORD(v8))
    {
      *((unsigned char *)&v29.__r_.__value_.__s + 23) = 1;
      LOWORD(v29.__r_.__value_.__l.__data_) = ((v8 >> 18) - 16);
      char v28 = 1;
      v27[0] = (v8 >> 12) & 0x3F | 0x80;
      v27[1] = 0;
      int v16 = std::string::append(&v29, v27, 1uLL);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      __s.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      char v26 = 1;
      v25[0] = (v9 >> 6) & 0x3F | 0x80;
      v25[1] = 0;
      long long v18 = std::string::append(&__s, v25, 1uLL);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      char v24 = 1;
      LOWORD(__p) = v9 & 0x3F | 0x80;
      uint64_t v20 = std::string::append(&v31, (const std::string::value_type *)&__p, 1uLL);
      *(std::string *)a3 = *v20;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (v24 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (v26 < 0) {
        operator delete(*(void **)v25);
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
      if (v28 < 0) {
        operator delete(*(void **)v27);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v12 = (void *)v29.__r_.__value_.__r.__words[0];
        goto LABEL_36;
      }
    }
    else
    {
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = ((v8 >> 12) - 32);
      *((unsigned char *)&v29.__r_.__value_.__s + 23) = 1;
      LOWORD(v29.__r_.__value_.__l.__data_) = (v8 >> 6) & 0x3F | 0x80;
      uint64_t v13 = std::string::append(&__s, (const std::string::value_type *)&v29, 1uLL);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      char v28 = 1;
      v27[0] = v9 & 0x3F | 0x80;
      v27[1] = 0;
      uint64_t v15 = std::string::append(&v31, v27, 1uLL);
      *(std::string *)a3 = *v15;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (v28 < 0) {
        operator delete(*(void **)v27);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v12 = (void *)__s.__r_.__value_.__r.__words[0];
        goto LABEL_36;
      }
    }
  }
  else
  {
    *((unsigned char *)&v31.__r_.__value_.__s + 23) = 1;
    LOWORD(v31.__r_.__value_.__l.__data_) = ((v8 >> 6) - 64);
    *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
    LOWORD(__s.__r_.__value_.__l.__data_) = v8 & 0x3F | 0x80;
    int v11 = std::string::append(&v31, (const std::string::value_type *)&__s, 1uLL);
    *(std::string *)a3 = *v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v12 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_36:
      operator delete(v12);
    }
  }
LABEL_37:
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D59484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a38 < 0)
  {
    operator delete(__p);
    if ((v46 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a40);
      if (*(char *)(v47 - 49) < 0) {
        operator delete(*(void **)(v47 - 72));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v45);
  goto LABEL_6;
}

void YAML::Exp::Escape(YAML::Exp *this@<X0>, uint64_t a2@<X8>)
{
  int v5 = YAML::Stream::get(this);
  int v6 = YAML::Stream::get(this);
  if (v5 != 39 || v6 != 39)
  {
    if (v6 > 91)
    {
      switch(v6)
      {
        case '\\':
          int v7 = "\\"";
          goto LABEL_4;
        case '_':
          int v7 = "\xA0";
          goto LABEL_4;
        case 'a':
          int v7 = "\a";
          goto LABEL_4;
        case 'b':
          int v7 = "\b";
          goto LABEL_4;
        case 'e':
          int v7 = "\x1B";
          goto LABEL_4;
        case 'f':
          int v7 = "\f";
          goto LABEL_4;
        case 'n':
          int v7 = "\n";
          goto LABEL_4;
        case 'r':
          int v7 = "\r";
          goto LABEL_4;
        case 't':
          goto LABEL_20;
        case 'u':
          uint64_t v8 = a2;
          unsigned int v9 = this;
          uint64_t v10 = 4;
          goto LABEL_38;
        case 'v':
          int v7 = "\v";
          goto LABEL_4;
        case 'x':
          uint64_t v8 = a2;
          unsigned int v9 = this;
          uint64_t v10 = 2;
          goto LABEL_38;
        default:
          goto LABEL_42;
      }
    }
    if (v6 > 46)
    {
      switch(v6)
      {
        case 'L':
          int v7 = "\u2028";
          goto LABEL_4;
        case 'M':
        case 'O':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
          break;
        case 'N':
          int v7 = "\x85";
          goto LABEL_4;
        case 'P':
          int v7 = "\u2029";
          goto LABEL_4;
        case 'U':
          uint64_t v8 = a2;
          unsigned int v9 = this;
          uint64_t v10 = 8;
LABEL_38:
          YAML::Exp::Escape(v9, (YAML::Stream *)v10, v8);
          return;
        default:
          if (v6 == 47)
          {
            int v7 = "/";
            goto LABEL_4;
          }
          if (v6 == 48)
          {
            *(unsigned char *)(a2 + 23) = 1;
            *(_WORD *)a2 = 0;
            return;
          }
          break;
      }
    }
    else if (v6 > 33)
    {
      if (v6 == 34)
      {
        int v7 = "\"";
        goto LABEL_4;
      }
      if (v6 == 39) {
        goto LABEL_3;
      }
    }
    else
    {
      if (v6 == 9)
      {
LABEL_20:
        int v7 = "\t";
        goto LABEL_4;
      }
      if (v6 == 32)
      {
        int v7 = " ";
        goto LABEL_4;
      }
    }
LABEL_42:
    std::string::value_type v11 = v6;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v18);
    exception = __cxa_allocate_exception(0x38uLL);
    int v13 = *((_DWORD *)this + 4);
    uint64_t v16 = *((void *)this + 1);
    int v17 = v13;
    std::string::basic_string[abi:ne180100]<0>(&v14, "unknown escape character: ");
    std::string::push_back(&v14, v11);
    std::string v15 = v14;
    memset(&v14, 0, sizeof(v14));
    YAML::Exception::Exception((uint64_t)exception, &v16, (long long *)&v15);
    void *exception = &unk_1F2127238;
  }
LABEL_3:
  int v7 = "'";
LABEL_4:
  std::string::basic_string[abi:ne180100]<0>((void *)a2, v7);
}

void sub_1C5D598CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

uint64_t non-virtual thunk to'siri::dialogengine::VisualRef::Validate(siri::dialogengine::VisualRef *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::VisualRef::Validate((siri::dialogengine::VisualRef *)((char *)this - 64), a2);
}

uint64_t siri::dialogengine::VisualRef::Validate(siri::dialogengine::VisualRef *this, siri::dialogengine::Context *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "visual");
  siri::dialogengine::ValidateXmlElementVersion((uint64_t)a2, (uint64_t)&__p, &v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = v34;
  if ((v34 & 0x80u) != 0) {
    uint64_t v4 = *((void *)&v33 + 1);
  }
  char v5 = v4 == 0;
  if (v4) {
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &v33, (uint64_t)this);
  }
  int v6 = (siri::dialogengine::VisualRef *)*((void *)this + 26);
  if (v6 != (siri::dialogengine::VisualRef *)((char *)this + 216))
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v31, (long long *)v6 + 2);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v30, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
      }
      else {
        std::string v30 = v31;
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v29, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      }
      else {
        std::string v29 = v32;
      }
      std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      char v8 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v29.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        siri::dialogengine::ParseSpeakableString((uint64_t)&v29, (uint64_t *)&__p);
        siri::dialogengine::ChunkList::Expand((uint64_t *)v28, (siri::dialogengine::ChunkList *)&__p, a2);
        v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
        char v9 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)v28, a2, this);
        siri::dialogengine::ExpandToText((uint64_t)&__p, v28[0], v28[1]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string v14 = __p;
        }
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v14.__r_.__value_.__l.__data_);
        }
        if (v27 < 0) {
          operator delete(v26);
        }
        if (v25 < 0) {
          operator delete(v24);
        }
        if (v23 < 0) {
          operator delete(v22);
        }
        if (v21 < 0) {
          operator delete(v20);
        }
        if (v19 < 0) {
          operator delete(v18);
        }
        if (v17 < 0) {
          operator delete(v16);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v5 &= v9;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        char v8 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      }
      if (v8 < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      uint64_t v10 = (siri::dialogengine::VisualRef *)*((void *)v6 + 1);
      if (v10)
      {
        do
        {
          std::string::value_type v11 = v10;
          uint64_t v10 = *(siri::dialogengine::VisualRef **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          std::string::value_type v11 = (siri::dialogengine::VisualRef *)*((void *)v6 + 2);
          BOOL v12 = *(void *)v11 == (void)v6;
          int v6 = v11;
        }
        while (!v12);
      }
      int v6 = v11;
    }
    while (v11 != (siri::dialogengine::VisualRef *)((char *)this + 216));
  }
  if ((char)v34 < 0) {
    operator delete((void *)v33);
  }
  return v5 & 1;
}

void sub_1C5D59CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (*(char *)(v37 - 81) < 0) {
    operator delete(*(void **)(v37 - 104));
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'siri::dialogengine::VisualRef::~VisualRef(siri::dialogengine::VisualRef *this)
{
  siri::dialogengine::VisualRef::~VisualRef((siri::dialogengine::VisualRef *)((char *)this - 64));
  JUMPOUT(0x1C8796D70);
}

{
  siri::dialogengine::VisualRef::~VisualRef((siri::dialogengine::VisualRef *)((char *)this - 64));
}

void siri::dialogengine::VisualRef::~VisualRef(siri::dialogengine::VisualRef *this)
{
  *(void *)this = &unk_1F211A670;
  *((void *)this + 8) = &unk_1F211A6D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 27));
  *(void *)this = &unk_1F2126C60;
  *((void *)this + 8) = &unk_1F2126CB8;
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  *((void *)this + 8) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

{
  uint64_t vars8;

  siri::dialogengine::VisualRef::~VisualRef(this);
  JUMPOUT(0x1C8796D70);
}

uint64_t siri::dialogengine::VisualRef::operator==(uint64_t a1, void *a2)
{
  if (*a2) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
  }
  else {
    return 0;
  }
}

uint64_t siri::dialogengine::VisualRef::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v4 = siri::dialogengine::Node::operator==(a1, a2);
  if (*(void *)(a1 + 224) != *(void *)(a2 + 224))
  {
LABEL_51:
    int v32 = 0;
    return v4 & v32;
  }
  char v5 = *(void **)(a1 + 208);
  int v6 = (void *)(a1 + 216);
  if (v5 != v6)
  {
    int v7 = *(void **)(a2 + 208);
    do
    {
      uint64_t v8 = *((unsigned __int8 *)v5 + 55);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = *((unsigned __int8 *)v5 + 55);
      }
      else {
        uint64_t v9 = v5[5];
      }
      uint64_t v10 = *((unsigned __int8 *)v7 + 55);
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = v7[5];
      }
      if (v9 != v10) {
        goto LABEL_51;
      }
      BOOL v12 = (const void **)(v5 + 4);
      if (v11 >= 0) {
        int v13 = (unsigned __int8 *)(v7 + 4);
      }
      else {
        int v13 = (unsigned __int8 *)v7[4];
      }
      if ((v8 & 0x80) != 0)
      {
        if (memcmp(*v12, v13, v5[5])) {
          goto LABEL_51;
        }
      }
      else if (*((unsigned char *)v5 + 55))
      {
        while (*(unsigned __int8 *)v12 == *v13)
        {
          BOOL v12 = (const void **)((char *)v12 + 1);
          ++v13;
          if (!--v8) {
            goto LABEL_19;
          }
        }
        goto LABEL_51;
      }
LABEL_19:
      uint64_t v14 = *((unsigned __int8 *)v5 + 79);
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = *((unsigned __int8 *)v5 + 79);
      }
      else {
        uint64_t v15 = v5[8];
      }
      uint64_t v16 = *((unsigned __int8 *)v7 + 79);
      int v17 = (char)v16;
      if ((v16 & 0x80u) != 0) {
        uint64_t v16 = v7[8];
      }
      if (v15 != v16) {
        goto LABEL_51;
      }
      long long v18 = (const void **)(v5 + 7);
      if (v17 >= 0) {
        char v19 = (unsigned __int8 *)(v7 + 7);
      }
      else {
        char v19 = (unsigned __int8 *)v7[7];
      }
      if ((v14 & 0x80) != 0)
      {
        if (memcmp(*v18, v19, v5[8])) {
          goto LABEL_51;
        }
      }
      else if (*((unsigned char *)v5 + 79))
      {
        uint64_t v20 = v14 - 1;
        do
        {
          int v22 = *(unsigned __int8 *)v18;
          long long v18 = (const void **)((char *)v18 + 1);
          int v21 = v22;
          int v24 = *v19++;
          int v23 = v24;
          BOOL v26 = v20-- != 0;
        }
        while (v21 == v23 && v26);
        if (v21 != v23) {
          goto LABEL_51;
        }
      }
      char v27 = (void *)v5[1];
      if (v27)
      {
        do
        {
          char v28 = v27;
          char v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          char v28 = (void *)v5[2];
          BOOL v29 = *v28 == (void)v5;
          char v5 = v28;
        }
        while (!v29);
      }
      std::string v30 = (void *)v7[1];
      if (v30)
      {
        do
        {
          std::string v31 = v30;
          std::string v30 = (void *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          std::string v31 = (void *)v7[2];
          BOOL v29 = *v31 == (void)v7;
          int v7 = v31;
        }
        while (!v29);
      }
      int v7 = v31;
      char v5 = v28;
    }
    while (v28 != v6);
  }
  int v32 = 1;
  return v4 & v32;
}

void *siri::dialogengine::VisualRef::operator==(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    BOOL v4 = *(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 72);
    return (void *)v4(a1, result);
  }
  return result;
}

void siri::dialogengine::VisualRef::Execute(siri::dialogengine::VisualRef *this, siri::dialogengine::Context *a2)
{
}

void sub_1C5D5A5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  int v46 = *(std::__shared_weak_count **)(v44 - 104);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  std::string __p = a10;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

siri::dialogengine::VisualRef *siri::dialogengine::VisualRef::VisualRef(siri::dialogengine::VisualRef *this, const void ***a2)
{
  BOOL v4 = siri::dialogengine::Node::Node(this, (const siri::dialogengine::Node *)a2);
  *(void *)BOOL v4 = &unk_1F211A670;
  *((void *)v4 + 8) = &unk_1F211A6D8;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v4 + 208, a2 + 26);
  return this;
}

void sub_1C5D5A744(_Unwind_Exception *a1)
{
  siri::dialogengine::Node::~Node(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<siri::dialogengine::VisualRef>::shared_ptr[abi:ne180100]<siri::dialogengine::VisualRef,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5D5A7C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VisualRef *,std::shared_ptr<siri::dialogengine::VisualRef>::__shared_ptr_default_delete<siri::dialogengine::VisualRef,siri::dialogengine::VisualRef>,std::allocator<siri::dialogengine::VisualRef>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VisualRef *,std::shared_ptr<siri::dialogengine::VisualRef>::__shared_ptr_default_delete<siri::dialogengine::VisualRef,siri::dialogengine::VisualRef>,std::allocator<siri::dialogengine::VisualRef>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::VisualRef *,std::shared_ptr<siri::dialogengine::VisualRef>::__shared_ptr_default_delete<siri::dialogengine::VisualRef,siri::dialogengine::VisualRef>,std::allocator<siri::dialogengine::VisualRef>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

siri::dialogengine::Node *siri::dialogengine::Node::Node(siri::dialogengine::Node *this, const siri::dialogengine::Node *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  *(void *)this = &unk_1F21271B8;
  *((void *)this + 1) = v4;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *((void *)this + 4) = *((void *)a2 + 4);
    *((_OWORD *)this + 1) = v5;
  }
  int v6 = (std::string *)((char *)this + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *((void *)this + 8) = &unk_1F21271E8;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)this + 72, (const void ***)a2 + 9);
  *(void *)this = &unk_1F2126C60;
  *((void *)this + 8) = &unk_1F2126CB8;
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 6);
    *((void *)this + 14) = *((void *)a2 + 14);
    *((_OWORD *)this + 6) = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 5, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 120);
    *((void *)this + 17) = *((void *)a2 + 17);
    *(_OWORD *)((char *)this + 120) = v9;
  }
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 6, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 9);
    *((void *)this + 20) = *((void *)a2 + 20);
    *((_OWORD *)this + 9) = v10;
  }
  int v11 = (std::string *)((char *)this + 168);
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *((const std::string::value_type **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v12 = *(_OWORD *)((char *)a2 + 168);
    *((void *)this + 23) = *((void *)a2 + 23);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *((_OWORD *)this + 12) = *((_OWORD *)a2 + 12);
  return this;
}

void sub_1C5D5AA88(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v3);
  }
  *(void *)(v1 + 64) = v2;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(v1 + 80));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)v1);
  _Unwind_Resume(a1);
}

double siri::dialogengine::VisualRef::VisualRef(siri::dialogengine::VisualRef *this)
{
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(void *)this = &unk_1F211A670;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = &unk_1F211A6D8;
  *((void *)this + 28) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 26) = (char *)this + 216;
  return result;
}

{
  double result;

  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(void *)this = &unk_1F211A670;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = &unk_1F211A6D8;
  *((void *)this + 28) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 26) = (char *)this + 216;
  return result;
}

BOOL siri::dialogengine::VisualRef::HasParam(uint64_t a1, const void **a2)
{
  return a1 + 216 != std::__tree<std::string>::find<std::string>(a1 + 208, a2);
}

std::string *siri::dialogengine::VisualRef::SetParam(uint64_t a1, long long *a2, const std::string *a3)
{
  int v6 = a2;
  uint64_t v4 = (std::string *)(std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 208), (const void **)a2, &v6)+ 7);
  return std::string::operator=(v4, a3);
}

void siri::dialogengine::VisualRef::GetParam(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = std::__tree<std::string>::find<std::string>(a1 + 208, a2);
  if (a1 + 216 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v5 + 79) < 0)
  {
    long long v7 = *(const std::string::value_type **)(v5 + 56);
    std::string::size_type v8 = *(void *)(v5 + 64);
    std::string::__init_copy_ctor_external(a3, v7, v8);
  }
  else
  {
    long long v6 = *(_OWORD *)(v5 + 56);
    a3->__r_.__value_.__r.__words[2] = *(void *)(v5 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

uint64_t siri::dialogengine::VisualRef::GetParams@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, this + 26);
}

BOOL siri::dialogengine::VisualRef::IsEmpty(siri::dialogengine::VisualRef *this)
{
  if (*((char *)this + 119) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 12), *((void *)this + 13));
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)this + 4);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    BOOL v3 = *((void *)this + 28) == 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v3;
    }
    goto LABEL_8;
  }
  BOOL v3 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_8:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

uint64_t siri::dialogengine::VisualRef::HasRequiredVariablesOrPhrases(siri::dialogengine::VisualRef *this)
{
  uint64_t v1 = (long long *)*((void *)this + 26);
  uint64_t v2 = (char *)this + 216;
  if (v1 == (long long *)((char *)this + 216))
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    int v3 = 0;
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v12, v1 + 2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v11 = __p;
      }
      std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
      char v5 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v11.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        siri::dialogengine::ParseSpeakableString((uint64_t)&v11, v10);
        v3 |= siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)v10);
        uint64_t v14 = (void **)v10;
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v14);
        char v5 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
      }
      if (v5 < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
      long long v6 = (long long *)*((void *)v1 + 1);
      if (v6)
      {
        do
        {
          long long v7 = v6;
          long long v6 = *(long long **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (long long *)*((void *)v1 + 2);
          BOOL v8 = *(void *)v7 == (void)v1;
          uint64_t v1 = v7;
        }
        while (!v8);
      }
      uint64_t v1 = v7;
    }
    while (v7 != (long long *)v2);
  }
  return v3 & 1;
}

void sub_1C5D5B030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
}

uint64_t YAML::Utils::ComputeStringFormat(char *a1, int a2, int a3, int a4)
{
  if (a2 == 7)
  {
    if (a3 != 1)
    {
      unint64_t v17 = a1[23];
      int v18 = (char)v17;
      if ((v17 & 0x80u) != 0) {
        unint64_t v17 = *((void *)a1 + 1);
      }
      if (!v17) {
        return 3;
      }
      BOOL v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = v18 >= 0 ? (uint64_t)a1 : *(void *)a1;
      do
      {
        if (a4 && *(char *)(v21 + v20) < 0) {
          break;
        }
        BOOL v19 = ++v20 >= v17;
      }
      while (v17 != v20);
      if (v19) {
        return 3;
      }
    }
    return 2;
  }
  if (a2 == 5)
  {
    unint64_t v9 = a1[23];
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (!v9) {
      return 1;
    }
    BOOL v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v10 >= 0 ? (uint64_t)a1 : *(void *)a1;
    do
    {
      int v14 = *(char *)(v13 + v12);
      if (v14 < 0) {
        char v15 = a4;
      }
      else {
        char v15 = 0;
      }
      if (v15) {
        break;
      }
      if (v14 == 10) {
        break;
      }
      BOOL v11 = ++v12 >= v9;
    }
    while (v9 != v12);
    if (v11) {
      return 1;
    }
    return 2;
  }
  if (a2) {
    return 2;
  }
  BOOL IsNullString = YAML::IsNullString(a1);
  if (IsNullString) {
    return 2;
  }
  if (a3 == 1)
  {
    YAML::Exp::PlainScalarInFlow((YAML::Exp *)IsNullString);
    BOOL v8 = &YAML::Exp::PlainScalarInFlow(void)::e;
  }
  else
  {
    YAML::Exp::PlainScalar((YAML::Exp *)IsNullString);
    BOOL v8 = &YAML::Exp::PlainScalar(void)::e;
  }
  if ((YAML::RegEx::Match((uint64_t)v8, a1) & 0x80000000) != 0) {
    return 2;
  }
  if (a1[23] < 0)
  {
    uint64_t v22 = *((void *)a1 + 1);
    if (!v22) {
      goto LABEL_42;
    }
    int v23 = *(uint64_t **)a1;
  }
  else
  {
    uint64_t v22 = a1[23];
    if (!a1[23]) {
      goto LABEL_42;
    }
    int v23 = (uint64_t *)a1;
  }
  if (*((unsigned char *)v23 + v22 - 1) == 32) {
    return 2;
  }
LABEL_42:
  {
    if (v40)
    {
      YAML::Exp::EndScalarInFlow(v40);
      {
        if (v48)
        {
          {
            if (v48)
            {
              {
                YAML::Exp::Space(void)::e = 1;
                word_1EA3D782C = 32;
                qword_1EA3D7838 = 0;
                unk_1EA3D7840 = 0;
                qword_1EA3D7830 = 0;
                __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Space(void)::e, &dword_1C5C1E000);
              }
              {
                YAML::Exp::Tab(void)::e = 1;
                word_1EA3D77CC = 9;
                qword_1EA3D77D8 = 0;
                unk_1EA3D77E0 = 0;
                qword_1EA3D77D0 = 0;
                __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tab(void)::e, &dword_1C5C1E000);
              }
              YAML::operator|(&YAML::Exp::Space(void)::e, &YAML::Exp::Tab(void)::e, (uint64_t)YAML::Exp::Blank(void)::e);
              __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::Blank(void)::e, &dword_1C5C1E000);
            }
          }
          YAML::Exp::Break(v48);
          YAML::operator|(YAML::Exp::Blank(void)::e, YAML::Exp::Break(void)::e, (uint64_t)YAML::Exp::BlankOrBreak(void)::e);
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::BlankOrBreak(void)::e, &dword_1C5C1E000);
        }
      }
      {
        YAML::Exp::Comment(void)::e = 1;
        word_1EA3D788C = 35;
        qword_1EA3D7898 = 0;
        unk_1EA3D78A0 = 0;
        qword_1EA3D7890 = 0;
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_1C5C1E000);
      }
      int v50 = YAML::Exp::Comment(void)::e;
      __int16 v51 = word_1EA3D788C;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v52 = 0;
      std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(&v52, (int *)qword_1EA3D7890, (int *)qword_1EA3D7898, (qword_1EA3D7898 - qword_1EA3D7890) >> 5);
      YAML::operator+(YAML::Exp::BlankOrBreak(void)::e, &v50, (uint64_t)&v55);
      long long v41 = (YAML::Exp *)YAML::operator|(YAML::Exp::EndScalarInFlow(void)::e, &v55, (uint64_t)&v57);
      YAML::Exp::NotPrintable(v41);
      long long v42 = (YAML::Exp *)YAML::operator|(&v57, YAML::Exp::NotPrintable(void)::e, (uint64_t)&v59);
      YAML::Exp::Utf8_ByteOrderMark(v42);
      long long v43 = (YAML::Exp *)YAML::operator|(&v59, YAML::Exp::Utf8_ByteOrderMark(void)::e, (uint64_t)&v61);
      YAML::Exp::Break(v43);
      YAML::operator|(&v61, YAML::Exp::Break(void)::e, (uint64_t)&v63);
      {
        YAML::Exp::Tab(void)::e = 1;
        word_1EA3D77CC = 9;
        qword_1EA3D77D8 = 0;
        unk_1EA3D77E0 = 0;
        qword_1EA3D77D0 = 0;
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tab(void)::e, &dword_1C5C1E000);
      }
      YAML::operator|((int *)&v63, &YAML::Exp::Tab(void)::e, (uint64_t)&_ZGRZN4YAML5Utils12_GLOBAL__N_118IsValidPlainScalarERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS_8FlowType5valueEbE15disallowed_flow_);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &_ZGRZN4YAML5Utils12_GLOBAL__N_118IsValidPlainScalarERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS_8FlowType5valueEbE15disallowed_flow_, &dword_1C5C1E000);
      long long v65 = (void **)&v63 + 1;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v65);
      long long v65 = (void **)v62;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v65);
      long long v65 = (void **)v60;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v65);
      long long v65 = (void **)v58;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v65);
      long long v65 = (void **)v56;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v65);
      long long v65 = (void **)&v52;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v65);
    }
  }
  {
    if (v44)
    {
      YAML::Exp::EndScalar(v44);
      {
        if (v49)
        {
          {
            if (v49)
            {
              {
                YAML::Exp::Space(void)::e = 1;
                word_1EA3D782C = 32;
                qword_1EA3D7838 = 0;
                unk_1EA3D7840 = 0;
                qword_1EA3D7830 = 0;
                __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Space(void)::e, &dword_1C5C1E000);
              }
              {
                YAML::Exp::Tab(void)::e = 1;
                word_1EA3D77CC = 9;
                qword_1EA3D77D8 = 0;
                unk_1EA3D77E0 = 0;
                qword_1EA3D77D0 = 0;
                __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tab(void)::e, &dword_1C5C1E000);
              }
              YAML::operator|(&YAML::Exp::Space(void)::e, &YAML::Exp::Tab(void)::e, (uint64_t)YAML::Exp::Blank(void)::e);
              __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::Blank(void)::e, &dword_1C5C1E000);
            }
          }
          YAML::Exp::Break(v49);
          YAML::operator|(YAML::Exp::Blank(void)::e, YAML::Exp::Break(void)::e, (uint64_t)YAML::Exp::BlankOrBreak(void)::e);
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::BlankOrBreak(void)::e, &dword_1C5C1E000);
        }
      }
      {
        YAML::Exp::Comment(void)::e = 1;
        word_1EA3D788C = 35;
        qword_1EA3D7898 = 0;
        unk_1EA3D78A0 = 0;
        qword_1EA3D7890 = 0;
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_1C5C1E000);
      }
      int v50 = YAML::Exp::Comment(void)::e;
      __int16 v51 = word_1EA3D788C;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v52 = 0;
      std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(&v52, (int *)qword_1EA3D7890, (int *)qword_1EA3D7898, (qword_1EA3D7898 - qword_1EA3D7890) >> 5);
      YAML::operator+(YAML::Exp::BlankOrBreak(void)::e, &v50, (uint64_t)&v55);
      uint64_t v45 = (YAML::Exp *)YAML::operator|(YAML::Exp::EndScalar(void)::e, &v55, (uint64_t)&v57);
      YAML::Exp::NotPrintable(v45);
      int v46 = (YAML::Exp *)YAML::operator|(&v57, YAML::Exp::NotPrintable(void)::e, (uint64_t)&v59);
      YAML::Exp::Utf8_ByteOrderMark(v46);
      uint64_t v47 = (YAML::Exp *)YAML::operator|(&v59, YAML::Exp::Utf8_ByteOrderMark(void)::e, (uint64_t)&v61);
      YAML::Exp::Break(v47);
      YAML::operator|(&v61, YAML::Exp::Break(void)::e, (uint64_t)&v63);
      {
        YAML::Exp::Tab(void)::e = 1;
        word_1EA3D77CC = 9;
        qword_1EA3D77D8 = 0;
        unk_1EA3D77E0 = 0;
        qword_1EA3D77D0 = 0;
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tab(void)::e, &dword_1C5C1E000);
      }
      YAML::operator|((int *)&v63, &YAML::Exp::Tab(void)::e, (uint64_t)&_ZGRZN4YAML5Utils12_GLOBAL__N_118IsValidPlainScalarERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS_8FlowType5valueEbE16disallowed_block_);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &_ZGRZN4YAML5Utils12_GLOBAL__N_118IsValidPlainScalarERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS_8FlowType5valueEbE16disallowed_block_, &dword_1C5C1E000);
      long long v65 = (void **)&v63 + 1;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v65);
      long long v65 = (void **)v62;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v65);
      long long v65 = (void **)v60;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v65);
      long long v65 = (void **)v58;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v65);
      long long v65 = (void **)v56;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v65);
      long long v65 = (void **)&v52;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v65);
    }
  }
  if (a3 != 1) {
  uint64_t v25 = *v24;
  }
  BOOL v26 = *(uint64_t **)a1;
  if (a1[23] < 0)
  {
    unint64_t v27 = *((void *)a1 + 1);
  }
  else
  {
    BOOL v26 = (uint64_t *)a1;
    unint64_t v27 = a1[23];
  }
  *(void *)&long long v63 = v26;
  *((void *)&v63 + 1) = v27;
  unint64_t v64 = 0;
  if (v27)
  {
    unint64_t v28 = 0;
    int v29 = *(_DWORD *)v25;
    while (1)
    {
      if ((v29 - 3) < 0xFFFFFFFE || v28 < v27)
      {
        switch(v29)
        {
          case 0:
            if (v28 >= v27) {
              int v30 = 0;
            }
            else {
              int v30 = -1;
            }
            goto LABEL_78;
          case 1:
            if (*(unsigned __int8 *)(v63 + v28) == *(unsigned __int8 *)(v25 + 4)) {
              return 2;
            }
            goto LABEL_79;
          case 2:
            int v35 = *(char *)(v63 + v28);
            if (*(char *)(v25 + 4) <= v35 && *(char *)(v25 + 5) >= v35) {
              return 2;
            }
            goto LABEL_79;
          case 3:
            uint64_t v36 = *(void *)(v25 + 8);
            if (*(void *)(v25 + 16) == v36) {
              goto LABEL_79;
            }
            uint64_t v37 = 0;
            unint64_t v38 = 0;
            while ((YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v36 + v37, &v63) & 0x80000000) != 0)
            {
              ++v38;
              uint64_t v36 = *(void *)(v25 + 8);
              v37 += 32;
              if (v38 >= (*(void *)(v25 + 16) - v36) >> 5) {
                goto LABEL_79;
              }
            }
            return 2;
          case 4:
            uint64_t v31 = *(void *)(v25 + 8);
            if (*(void *)(v25 + 16) == v31) {
              goto LABEL_79;
            }
            uint64_t v32 = 0;
            unint64_t v33 = 0;
            int v30 = -1;
            break;
          case 5:
            uint64_t v39 = *(void *)(v25 + 8);
            if (v39 != *(void *)(v25 + 16)
              && (YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v39, &v63) & 0x80000000) != 0)
            {
              return 2;
            }
            goto LABEL_79;
          case 6:
            int v30 = YAML::RegEx::MatchOpSeq<YAML::StringCharSource>(v25, &v63);
            goto LABEL_78;
          default:
            goto LABEL_79;
        }
        while (1)
        {
          int v34 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v31 + v32, &v63);
          if (v34 == -1) {
            break;
          }
          if (!v33) {
            int v30 = v34;
          }
          ++v33;
          uint64_t v31 = *(void *)(v25 + 8);
          v32 += 32;
          if (v33 >= (*(void *)(v25 + 16) - v31) >> 5)
          {
LABEL_78:
            if ((v30 & 0x80000000) == 0) {
              return 2;
            }
            break;
          }
        }
      }
LABEL_79:
      if (a4 && *(char *)(v63 + v64) < 0) {
        return 2;
      }
      unint64_t v28 = v64 + 1;
      unint64_t v64 = v28;
      unint64_t v27 = *((void *)&v63 + 1);
      if (v28 >= *((void *)&v63 + 1)) {
        return 0;
      }
    }
  }
  return 0;
}

void sub_1C5D5BBEC(_Unwind_Exception *a1)
{
}

void YAML::Exp::PlainScalarInFlow(YAML::Exp *this)
{
  {
    if (v1)
    {
      YAML::Exp::BlankOrBreak(v1);
      YAML::RegEx::RegEx((uint64_t)&v11, (char *)v9, 3);
      YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v11, (uint64_t)&v13);
      std::string::basic_string[abi:ne180100]<0>(__p, "-:");
      uint64_t v2 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v5, (char *)__p, 3);
      YAML::Exp::Blank(v2);
      YAML::operator+(&v5, YAML::Exp::Blank(void)::e, (uint64_t)&v7);
      YAML::operator|(&v13, (int *)&v7, (uint64_t)&v15);
      YAML::operator!(&v15, (uint64_t)&YAML::Exp::PlainScalarInFlow(void)::e);
      unint64_t v17 = (void **)&v16;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v17);
      unint64_t v17 = (void **)&v8;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v17);
      unint64_t v17 = (void **)&v6;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v17);
      if (v4 < 0) {
        operator delete(__p[0]);
      }
      long long v7 = (void **)&v14;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
      long long v7 = (void **)&v12;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::PlainScalarInFlow(void)::e, &dword_1C5C1E000);
    }
  }
}

void sub_1C5D5BF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31)
{
  *(void *)(v32 - 40) = v31 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 40));
  *(void *)(v32 - 40) = &a21;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 40));
  *(void *)(v32 - 40) = &a17;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 40));
  if (a15 < 0) {
    operator delete(__p);
  }
  a20 = (uint64_t *)(v32 - 96);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a20 = &a31;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void YAML::Exp::PlainScalar(YAML::Exp *this)
{
  {
    if (v1)
    {
      YAML::Exp::BlankOrBreak(v1);
      YAML::RegEx::RegEx((uint64_t)&v16, (char *)v14, 3);
      YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v16, (uint64_t)&v18);
      std::string::basic_string[abi:ne180100]<0>(__p, "-?:");
      uint64_t v2 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v10, (char *)__p, 3);
      YAML::Exp::BlankOrBreak(v2);
      int v3 = 0;
      __int16 v4 = 0;
      memset(v5, 0, sizeof(v5));
      YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v3, (uint64_t)&v6);
      YAML::operator+(&v10, (int *)&v6, (uint64_t)&v12);
      YAML::operator|(&v18, (int *)&v12, (uint64_t)&v20);
      YAML::operator!(&v20, (uint64_t)&YAML::Exp::PlainScalar(void)::e);
      uint64_t v22 = (void **)&v21;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v22);
      uint64_t v22 = (void **)&v13;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v22);
      uint64_t v22 = (void **)&v7;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v22);
      uint64_t v22 = (void **)v5;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v22);
      uint64_t v6 = (void **)&v11;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v6);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v12 = (void **)&v19;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v12);
      uint64_t v12 = (void **)&v17;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v12);
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::PlainScalar(void)::e, &dword_1C5C1E000);
    }
  }
}

void sub_1C5D5C204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  *(void *)(v39 - 40) = v38 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  *(void *)(v39 - 40) = &a29;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  *(void *)(v39 - 40) = &a15;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  *(void *)(v39 - 40) = v37;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  a14 = &a25;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  if (a23 < 0) {
    operator delete(__p);
  }
  a28 = v39 - 96;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = v39 - 128;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

uint64_t YAML::RegEx::Match(uint64_t a1, char *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    int v3 = a2;
  }
  else {
    int v3 = *(char **)a2;
  }
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  *(void *)&long long v18 = v3;
  *((void *)&v18 + 1) = v2;
  uint64_t v19 = 0;
  if ((*(_DWORD *)a1 - 3) < 0xFFFFFFFE || v2 != 0)
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
        if (v2) {
          return 0xFFFFFFFFLL;
        }
        else {
          return 0;
        }
      case 1:
        if (*v3 == *(unsigned char *)(a1 + 4)) {
          return 1;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      case 2:
        int v11 = *v3;
        uint64_t v5 = 0xFFFFFFFFLL;
        if (*(char *)(a1 + 4) <= v11)
        {
          if (*(char *)(a1 + 5) < v11) {
            return 0xFFFFFFFFLL;
          }
          else {
            return 1;
          }
        }
        return v5;
      case 3:
        uint64_t v12 = *(void *)(a1 + 8);
        uint64_t v13 = *(void *)(a1 + 16) - v12;
        if (!v13) {
          return 0xFFFFFFFFLL;
        }
        unint64_t v14 = 0;
        unint64_t v15 = v13 >> 5;
        while (1)
        {
          uint64_t v16 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v12, &v18);
          if ((v16 & 0x80000000) == 0) {
            break;
          }
          ++v14;
          v12 += 32;
          uint64_t v5 = 0xFFFFFFFFLL;
          if (v14 >= v15) {
            return v5;
          }
        }
        return v16;
      case 4:
        uint64_t v6 = *(void *)(a1 + 8);
        uint64_t v7 = *(void *)(a1 + 16) - v6;
        if (!v7) {
          return 0xFFFFFFFFLL;
        }
        unint64_t v8 = 0;
        unint64_t v9 = v7 >> 5;
        LODWORD(v5) = -1;
        break;
      case 5:
        uint64_t v5 = 0xFFFFFFFFLL;
        if (*(void *)(a1 + 8) != *(void *)(a1 + 16))
        {
          if ((int)YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(*(void *)(a1 + 8), &v18) >= 0) {
            return 0xFFFFFFFFLL;
          }
          else {
            return 1;
          }
        }
        return v5;
      case 6:
        return YAML::RegEx::MatchOpSeq<YAML::StringCharSource>(a1, &v18);
      default:
        return 0xFFFFFFFFLL;
    }
    while (1)
    {
      unsigned int v10 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v6, &v18);
      if (v10 == -1) {
        break;
      }
      if (v8) {
        uint64_t v5 = v5;
      }
      else {
        uint64_t v5 = v10;
      }
      ++v8;
      v6 += 32;
      if (v8 >= v9) {
        return v5;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void YAML::Exp::EndScalarInFlow(YAML::Exp *this)
{
  {
    if (v1)
    {
      int v17 = 1;
      __int16 v18 = 58;
      memset(v19, 0, sizeof(v19));
      YAML::Exp::BlankOrBreak(v1);
      int v10 = 0;
      __int16 v11 = 0;
      memset(v12, 0, sizeof(v12));
      YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v10, (uint64_t)&v13);
      std::string::basic_string[abi:ne180100]<0>(v6, ",]}");
      YAML::RegEx::RegEx((uint64_t)&v8, (char *)v6, 3);
      YAML::operator|(&v13, (int *)&v8, (uint64_t)&v15);
      YAML::operator+(&v17, (int *)&v15, (uint64_t)&v20);
      std::string::basic_string[abi:ne180100]<0>(__p, ",?[]{}");
      YAML::RegEx::RegEx((uint64_t)&v4, (char *)__p, 3);
      YAML::operator|(&v20, (int *)&v4, (uint64_t)&YAML::Exp::EndScalarInFlow(void)::e);
      uint64_t v22 = (void **)&v5;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v22);
      if (v3 < 0) {
        operator delete(__p[0]);
      }
      __int16 v4 = (void **)&v21;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v4);
      __int16 v4 = (void **)&v16;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v4);
      __int16 v4 = (void **)&v9;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v4);
      if (v7 < 0) {
        operator delete(v6[0]);
      }
      unint64_t v8 = (void **)&v14;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v8);
      unint64_t v8 = (void **)v12;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v8);
      unint64_t v15 = (void **)v19;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v15);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::EndScalarInFlow(void)::e, &dword_1C5C1E000);
    }
  }
}

void sub_1C5D5C6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35)
{
  *(void *)(v37 - 56) = v36 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  if (a15 < 0) {
    operator delete(__p);
  }
  a16 = (uint64_t *)(v37 - 80);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (uint64_t *)(v37 - 144);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = &a27;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (a25 < 0) {
    operator delete(a20);
  }
  a26 = &a35;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  *(void *)(v37 - 152) = v35;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 152));
  _Unwind_Resume(a1);
}

void sub_1C5D5C780()
{
}

void sub_1C5D5C788()
{
}

void YAML::Exp::Break(YAML::Exp *this)
{
  {
    int v5 = 1;
    __int16 v6 = 10;
    memset(v7, 0, sizeof(v7));
    std::string::basic_string[abi:ne180100]<0>(__p, "\r\n");
    YAML::RegEx::RegEx((uint64_t)&v3, (char *)__p, 6);
    YAML::operator|(&v5, (int *)&v3, (uint64_t)&YAML::Exp::Break(void)::e);
    unint64_t v8 = (void **)&v4;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v8);
    if (v2 < 0) {
      operator delete(__p[0]);
    }
    char v3 = (void **)v7;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v3);
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Break(void)::e, &dword_1C5C1E000);
  }
}

void sub_1C5D5C894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  *(void *)(v16 - 40) = v15 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 40));
  if (a14 < 0) {
    operator delete(__p);
  }
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void *std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(void *result, int *a2, int *a3, unint64_t a4)
{
  if (a4)
  {
    __int16 v6 = result;
    std::vector<YAML::RegEx>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v12 = v7;
    uint64_t v13 = v7;
    v10[0] = v6 + 2;
    v10[1] = &v12;
    std::string v10[2] = &v13;
    char v11 = 0;
    if (a2 == a3)
    {
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v8 = v7;
      do
      {
        int v9 = *a2;
        *(_WORD *)(v8 + 4) = *((_WORD *)a2 + 2);
        *(_DWORD *)uint64_t v8 = v9;
        *(void *)(v8 + 16) = 0;
        *(void *)(v8 + 24) = 0;
        *(void *)(v8 + 8) = 0;
        std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(v8 + 8);
        uint64_t v8 = v13 + 32;
        v13 += 32;
        a2 += 8;
      }
      while (a2 != a3);
    }
    char v11 = 1;
    double result = (void *)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<YAML::RegEx>,YAML::RegEx*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v6[1] = v8;
  }
  return result;
}

void sub_1C5D5C9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void YAML::Exp::NotPrintable(YAML::Exp *this)
{
  {
    int v19 = 1;
    __int16 v20 = 0;
    memset(v21, 0, sizeof(v21));
    std::string::basic_string[abi:ne180100]<0>(__p, "\x01\x02\x03\x04\x05\x06\a\b\v\f\x7F");
    YAML::RegEx::RegEx((uint64_t)&v17, (char *)__p, 3);
    YAML::operator|(&v19, (int *)&v17, (uint64_t)&v22);
    LODWORD(v13) = 2;
    WORD2(v13) = 7950;
    memset(v14, 0, sizeof(v14));
    YAML::operator|(&v22, (int *)&v13, (uint64_t)&v24);
    int v8 = 1;
    __int16 v9 = 194;
    memset(v10, 0, sizeof(v10));
    int v3 = 2;
    __int16 v4 = -31616;
    memset(v5, 0, sizeof(v5));
    LODWORD(v1) = 2;
    WORD2(v1) = -24698;
    memset(v2, 0, sizeof(v2));
    YAML::operator|(&v3, (int *)&v1, (uint64_t)&v6);
    YAML::operator+(&v8, (int *)&v6, (uint64_t)&v11);
    YAML::operator|(&v24, (int *)&v11, (uint64_t)&YAML::Exp::NotPrintable(void)::e);
    BOOL v26 = (void **)&v12;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v26);
    BOOL v26 = (void **)&v7;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v26);
    BOOL v26 = (void **)v2;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v26);
    uint64_t v1 = (void **)v5;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v1);
    __int16 v6 = (void **)v10;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v6);
    char v11 = (void **)&v25;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
    char v11 = v14;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
    uint64_t v13 = (void **)&v23;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
    uint64_t v13 = (void **)&v18;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    int v17 = (void **)v21;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v17);
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::NotPrintable(void)::e, &dword_1C5C1E000);
  }
}

void sub_1C5D5CC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  *(void *)(v41 - 72) = v40 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 72));
  *(void *)(v41 - 72) = &a18;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 72));
  *(void *)(v41 - 72) = v39;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 72));
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a25 = v41 - 96;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a29 = v41 - 128;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = v41 - 192;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (a38 < 0) {
    operator delete(__p);
  }
  *(void *)(v41 - 200) = v38;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 200));
  _Unwind_Resume(a1);
}

void YAML::Exp::Utf8_ByteOrderMark(YAML::Exp *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "﻿");
    YAML::RegEx::RegEx((uint64_t)&YAML::Exp::Utf8_ByteOrderMark(void)::e, (char *)__p, 6);
    if (v2 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Utf8_ByteOrderMark(void)::e, &dword_1C5C1E000);
  }
}

void sub_1C5D5CDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = (char *)**a1;
  if (v2)
  {
    __int16 v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        __int16 v6 = v4 - 32;
        uint64_t v7 = v4 - 24;
        std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
        __int16 v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void YAML::Exp::EndScalar(YAML::Exp *this)
{
  {
    if (v1)
    {
      int v7 = 1;
      __int16 v8 = 58;
      memset(v9, 0, sizeof(v9));
      YAML::Exp::BlankOrBreak(v1);
      int v2 = 0;
      __int16 v3 = 0;
      memset(v4, 0, sizeof(v4));
      YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v2, (uint64_t)&v5);
      YAML::operator+(&v7, (int *)&v5, (uint64_t)&YAML::Exp::EndScalar(void)::e);
      int v10 = (void **)&v6;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v10);
      int v10 = (void **)v4;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v10);
      int v5 = (void **)v9;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v5);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::EndScalar(void)::e, &dword_1C5C1E000);
    }
  }
}

void sub_1C5D5CFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *(void *)(v8 - 40) = v7 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  *(void *)(v8 - 40) = v6;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(uint64_t a1, void *a2)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      if (a2[2] >= a2[1]) {
        return 0;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    case 1:
      if (*(unsigned __int8 *)(*a2 + a2[2]) == *(unsigned __int8 *)(a1 + 4)) {
        return 1;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    case 2:
      int v5 = *(char *)(*a2 + a2[2]);
      uint64_t v4 = 0xFFFFFFFFLL;
      if (*(char *)(a1 + 4) <= v5)
      {
        if (*(char *)(a1 + 5) < v5) {
          return 0xFFFFFFFFLL;
        }
        else {
          return 1;
        }
      }
      return v4;
    case 3:
      uint64_t v6 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v6) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v6 + v7, a2);
        if ((v9 & 0x80000000) == 0) {
          break;
        }
        ++v8;
        uint64_t v6 = *(void *)(a1 + 8);
        v7 += 32;
        if (v8 >= (*(void *)(a1 + 16) - v6) >> 5) {
          return 0xFFFFFFFFLL;
        }
      }
      return v9;
    case 4:
      uint64_t v10 = *(void *)(a1 + 8);
      if (*(void *)(a1 + 16) == v10) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      LODWORD(v4) = -1;
      while (1)
      {
        unsigned int v13 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v10 + v11, a2);
        if (v13 == -1) {
          break;
        }
        if (v12) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v13;
        }
        ++v12;
        uint64_t v10 = *(void *)(a1 + 8);
        v11 += 32;
        if (v12 >= (*(void *)(a1 + 16) - v10) >> 5) {
          return v4;
        }
      }
      return 0xFFFFFFFFLL;
    case 5:
      uint64_t v14 = *(void *)(a1 + 8);
      uint64_t v4 = 0xFFFFFFFFLL;
      if (v14 != *(void *)(a1 + 16))
      {
        if ((int)YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v14, a2) >= 0) {
          return 0xFFFFFFFFLL;
        }
        else {
          return 1;
        }
      }
      return v4;
    case 6:
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = *(void *)(a1 + 16) - v15;
      if (v16)
      {
        uint64_t v17 = 0;
        LODWORD(v4) = 0;
        unint64_t v18 = v16 >> 5;
        while (1)
        {
          int v19 = (_DWORD *)(v15 + 32 * v17);
          unint64_t v42 = a2[2];
          long long v41 = *(_OWORD *)a2;
          unint64_t v20 = v42 + (int)v4;
          if ((int)v4 + (int)v42 < 0 != __OFADD__(v4, v42)) {
            unint64_t v20 = 0;
          }
          unint64_t v42 = v20;
          switch(*v19)
          {
            case 0:
              if (v20 >= *((void *)&v41 + 1)) {
                int v21 = 0;
              }
              else {
                int v21 = -1;
              }
              goto LABEL_59;
            case 1:
              if (*(unsigned __int8 *)(v41 + v20) != *(unsigned __int8 *)(v15 + 32 * v17 + 4)) {
                return 0xFFFFFFFFLL;
              }
              goto LABEL_57;
            case 2:
              uint64_t v22 = v15 + 32 * v17;
              int v23 = *(char *)(v41 + v20);
              if (*(char *)(v22 + 4) > v23 || *(char *)(v22 + 5) < v23) {
                return 0xFFFFFFFFLL;
              }
              goto LABEL_57;
            case 3:
              uint64_t v24 = v15 + 32 * v17;
              uint64_t v27 = *(void *)(v24 + 8);
              BOOL v26 = (uint64_t *)(v24 + 8);
              uint64_t v25 = v27;
              if (v26[1] == v27) {
                return 0xFFFFFFFFLL;
              }
              uint64_t v28 = 0;
              unint64_t v29 = 0;
              while (1)
              {
                int v30 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v25 + v28, &v41);
                if ((v30 & 0x80000000) == 0) {
                  break;
                }
                ++v29;
                uint64_t v25 = *v26;
                v28 += 32;
                if (v29 >= (v26[1] - *v26) >> 5) {
                  return 0xFFFFFFFFLL;
                }
              }
              int v21 = v30;
              goto LABEL_60;
            case 4:
              uint64_t v31 = v15 + 32 * v17;
              uint64_t v34 = *(void *)(v31 + 8);
              unint64_t v33 = (uint64_t *)(v31 + 8);
              uint64_t v32 = v34;
              if (v33[1] == v34) {
                return 0xFFFFFFFFLL;
              }
              uint64_t v35 = 0;
              unint64_t v36 = 0;
              int v21 = -1;
              break;
            case 5:
              uint64_t v38 = v15 + 32 * v17;
              uint64_t v39 = *(void *)(v38 + 8);
              if (v39 == *(void *)(v38 + 16)
                || (YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v39, &v41) & 0x80000000) == 0)
              {
                return 0xFFFFFFFFLL;
              }
LABEL_57:
              int v21 = 1;
              goto LABEL_60;
            case 6:
              int v21 = YAML::RegEx::MatchOpSeq<YAML::StringCharSource>((uint64_t)v19, &v41);
              goto LABEL_59;
            default:
              return 0xFFFFFFFFLL;
          }
          do
          {
            int v37 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v32 + v35, &v41);
            if (v37 == -1) {
              return 0xFFFFFFFFLL;
            }
            if (!v36) {
              int v21 = v37;
            }
            ++v36;
            uint64_t v32 = *v33;
            v35 += 32;
          }
          while (v36 < (v33[1] - *v33) >> 5);
LABEL_59:
          if (v21 == -1) {
            return 0xFFFFFFFFLL;
          }
LABEL_60:
          uint64_t v4 = (v21 + v4);
          if (++v17 >= v18) {
            return v4;
          }
        }
      }
      return 0;
    default:
      return 0xFFFFFFFFLL;
  }
}

uint64_t YAML::RegEx::MatchOpSeq<YAML::StringCharSource>(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16) - v2;
  if (!v3) {
    return 0;
  }
  uint64_t v5 = 0;
  LODWORD(v6) = 0;
  unint64_t v7 = v3 >> 5;
  while (2)
  {
    unint64_t v30 = *((void *)a2 + 2);
    long long v29 = *a2;
    unint64_t v8 = v30 + (int)v6;
    if ((int)v6 + (int)v30 < 0 != __OFADD__(v6, v30)) {
      unint64_t v8 = 0;
    }
    unint64_t v30 = v8;
    switch(*(_DWORD *)(v2 + 32 * v5))
    {
      case 0:
        if (v8 >= *((void *)&v29 + 1)) {
          int v9 = 0;
        }
        else {
          int v9 = -1;
        }
        goto LABEL_31;
      case 1:
        if (*(unsigned __int8 *)(v29 + v8) != *(unsigned __int8 *)(v2 + 32 * v5 + 4)) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_29;
      case 2:
        uint64_t v10 = v2 + 32 * v5;
        int v11 = *(char *)(v29 + v8);
        if (*(char *)(v10 + 4) > v11 || *(char *)(v10 + 5) < v11) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_29;
      case 3:
        uint64_t v12 = v2 + 32 * v5;
        uint64_t v15 = *(void *)(v12 + 8);
        uint64_t v14 = (uint64_t *)(v12 + 8);
        uint64_t v13 = v15;
        if (v14[1] == v15) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        while (1)
        {
          int v18 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v13 + v16, &v29);
          if ((v18 & 0x80000000) == 0) {
            break;
          }
          ++v17;
          uint64_t v13 = *v14;
          v16 += 32;
          if (v17 >= (v14[1] - *v14) >> 5) {
            return 0xFFFFFFFFLL;
          }
        }
        int v9 = v18;
        goto LABEL_32;
      case 4:
        uint64_t v19 = v2 + 32 * v5;
        uint64_t v22 = *(void *)(v19 + 8);
        int v21 = (uint64_t *)(v19 + 8);
        uint64_t v20 = v22;
        if (v21[1] == v22) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        int v9 = -1;
        break;
      case 5:
        uint64_t v26 = v2 + 32 * v5;
        uint64_t v27 = *(void *)(v26 + 8);
        if (v27 == *(void *)(v26 + 16)
          || (YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v27, &v29) & 0x80000000) == 0)
        {
          return 0xFFFFFFFFLL;
        }
LABEL_29:
        int v9 = 1;
        goto LABEL_32;
      case 6:
        int v9 = YAML::RegEx::MatchOpSeq<YAML::StringCharSource>();
        goto LABEL_31;
      default:
        return 0xFFFFFFFFLL;
    }
    do
    {
      int v25 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v20 + v23, &v29);
      if (v25 == -1) {
        return 0xFFFFFFFFLL;
      }
      if (!v24) {
        int v9 = v25;
      }
      ++v24;
      uint64_t v20 = *v21;
      v23 += 32;
    }
    while (v24 < (v21[1] - *v21) >> 5);
LABEL_31:
    if (v9 == -1) {
      return 0xFFFFFFFFLL;
    }
LABEL_32:
    uint64_t v6 = (v9 + v6);
    if (++v5 < v7) {
      continue;
    }
    return v6;
  }
}

void YAML::Exp::BlankOrBreak(YAML::Exp *this)
{
  {
    if (v1)
    {
      YAML::Exp::Blank(v1);
      YAML::Exp::Break(v2);
      YAML::operator|(YAML::Exp::Blank(void)::e, YAML::Exp::Break(void)::e, (uint64_t)&YAML::Exp::BlankOrBreak(void)::e);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::BlankOrBreak(void)::e, &dword_1C5C1E000);
    }
  }
}

void sub_1C5D5D690(_Unwind_Exception *a1)
{
}

void YAML::Exp::Blank(YAML::Exp *this)
{
  {
    if (v1)
    {
      YAML::Exp::Space(v1);
      YAML::Exp::Tab(v2);
      YAML::operator|(&YAML::Exp::Space(void)::e, &YAML::Exp::Tab(void)::e, (uint64_t)&YAML::Exp::Blank(void)::e);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Blank(void)::e, &dword_1C5C1E000);
    }
  }
}

void sub_1C5D5D750(_Unwind_Exception *a1)
{
}

void YAML::Exp::Space(YAML::Exp *this)
{
  {
    YAML::Exp::Space(void)::e = 1;
    word_1EA3D782C = 32;
    qword_1EA3D7838 = 0;
    unk_1EA3D7840 = 0;
    qword_1EA3D7830 = 0;
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Space(void)::e, &dword_1C5C1E000);
  }
}

void YAML::Exp::Tab(YAML::Exp *this)
{
  {
    YAML::Exp::Tab(void)::e = 1;
    word_1EA3D77CC = 9;
    qword_1EA3D77D8 = 0;
    unk_1EA3D77E0 = 0;
    qword_1EA3D77D0 = 0;
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tab(void)::e, &dword_1C5C1E000);
  }
}

char *std::vector<YAML::RegEx>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::RegEx>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<YAML::RegEx>,YAML::RegEx*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      do
      {
        uint64_t v4 = v2 - 32;
        uint64_t v6 = (void **)(v2 - 24);
        std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v6);
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::RegEx>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

void YAML::RegEx::~RegEx(YAML::RegEx *this)
{
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v1);
}

BOOL YAML::Utils::WriteSingleQuotedString(std::vector<char> *a1, unsigned __int8 *a2)
{
  YAML::ostream_wrapper::write(a1, "'", 1uLL);
  LODWORD(v10) = 0;
  uint64_t v4 = a2[23];
  uint64_t v5 = *(unsigned __int8 **)a2;
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(unsigned __int8 **)a2;
  }
  int v9 = v6;
  while (1)
  {
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *((void *)a2 + 1);
    }
    else {
      uint64_t v5 = a2;
    }
    if (!NextCodePointAndAdvance) {
      break;
    }
    if (v10 == 39)
    {
      YAML::ostream_wrapper::write(a1, "''", 2uLL);
    }
    else
    {
      if (v10 == 10) {
        return !NextCodePointAndAdvance;
      }
    }
    uint64_t v4 = a2[23];
    uint64_t v5 = *(unsigned __int8 **)a2;
  }
  YAML::ostream_wrapper::write(a1, "'", 1uLL);
  return !NextCodePointAndAdvance;
}

BOOL YAML::Utils::anonymous namespace'::GetNextCodePointAndAdvance(int *a1, unsigned __int8 **a2, unsigned __int8 *a3)
{
  uint64_t v3 = *a2;
  if (*a2 != a3)
  {
    unsigned int v4 = *v3;
    int v5 = 2;
    switch(v4 >> 4)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
        *a2 = v3 + 1;
        int v6 = (char)*v3;
        goto LABEL_6;
      case 0xCu:
      case 0xDu:
        goto LABEL_10;
      case 0xEu:
        int v5 = 3;
        goto LABEL_10;
      case 0xFu:
        int v5 = 4;
LABEL_10:
        int v8 = v4 & ~(255 << (v5 ^ 7));
        *a1 = v8;
        int v9 = v3 + 1;
        *a2 = v3 + 1;
        unsigned int v10 = v5 + 1;
        break;
      default:
        *a2 = v3 + 1;
        goto LABEL_5;
    }
    do
    {
      if (v9 == a3 || (int v11 = v8, (*v9 & 0xC0) != 0x80))
      {
LABEL_5:
        int v6 = 65533;
LABEL_6:
        *a1 = v6;
        return v3 != a3;
      }
      *a1 = v8 << 6;
      char v12 = *v9++;
      int v8 = v12 & 0x3F | (v8 << 6);
      *a1 = v8;
      *a2 = v9;
      --v10;
    }
    while (v10 > 2);
    int v6 = 65533;
    if (v8 >= 1114112 || (v11 & 0x3FFFFE0) == 0x360 || (v8 & 0xFFFE) == 0xFFFE || (v8 - 64976) <= 0x1F) {
      goto LABEL_6;
    }
  }
  return v3 != a3;
}

void YAML::Utils::anonymous namespace'::WriteCodePoint(std::vector<char> *this, YAML::ostream_wrapper *a2)
{
  if (a2 >> 16 <= 0x10) {
    unsigned int v3 = a2;
  }
  else {
    unsigned int v3 = 65533;
  }
  if (v3 > 0x7F)
  {
    if (v3 > 0x7FF)
    {
      if (HIWORD(v3))
      {
        char v11 = (v3 >> 18) | 0xF0;
        YAML::ostream_wrapper::write(this, &v11, 1uLL);
        char v12 = (v3 >> 12) & 0x3F | 0x80;
        YAML::ostream_wrapper::write(this, &v12, 1uLL);
        char v13 = (v3 >> 6) & 0x3F | 0x80;
        YAML::ostream_wrapper::write(this, &v13, 1uLL);
        char v14 = v3 & 0x3F | 0x80;
        unsigned int v4 = &v14;
      }
      else
      {
        char v8 = (v3 >> 12) | 0xE0;
        YAML::ostream_wrapper::write(this, &v8, 1uLL);
        char v9 = (v3 >> 6) & 0x3F | 0x80;
        YAML::ostream_wrapper::write(this, &v9, 1uLL);
        char v10 = v3 & 0x3F | 0x80;
        unsigned int v4 = &v10;
      }
    }
    else
    {
      char __src = (v3 >> 6) | 0xC0;
      YAML::ostream_wrapper::write(this, &__src, 1uLL);
      char v7 = v3 & 0x3F | 0x80;
      unsigned int v4 = &v7;
    }
  }
  else
  {
    char v5 = v3;
    unsigned int v4 = &v5;
  }
  YAML::ostream_wrapper::write(this, v4, 1uLL);
}

uint64_t YAML::Utils::WriteDoubleQuotedString(std::vector<char> *a1, unsigned __int8 *a2, int a3)
{
  YAML::ostream_wrapper::write(a1, "\"", 1uLL);
  uint64_t v6 = a2[23];
  char v7 = *(unsigned __int8 **)a2;
  if ((v6 & 0x80u) == 0) {
    char v8 = a2;
  }
  else {
    char v8 = *(unsigned __int8 **)a2;
  }
  LODWORD(v15) = 0;
  char v14 = v8;
  while (1)
  {
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *((void *)a2 + 1);
    }
    else {
      char v7 = a2;
    }
      break;
    uint64_t v9 = v15;
    switch((int)v15)
    {
      case 8:
        char v10 = a1;
        char v11 = "\\b";
        goto LABEL_22;
      case 9:
        char v10 = a1;
        char v11 = "\\t";
        goto LABEL_22;
      case 10:
        char v10 = a1;
        char v11 = "\\n";
        goto LABEL_22;
      case 11:
      case 12:
        goto LABEL_14;
      case 13:
        char v10 = a1;
        char v11 = "\\r";
        goto LABEL_22;
      default:
        if (v15 == 92)
        {
          char v10 = a1;
          char v11 = "\\\\"";
          goto LABEL_22;
        }
        if (v15 == 34)
        {
          char v10 = a1;
          char v11 = "\\\"";
LABEL_22:
          YAML::ostream_wrapper::write(v10, v11, 2uLL);
          goto LABEL_23;
        }
LABEL_14:
        if ((int)v15 < 32 || (v15 - 128) <= 0x20) {
          goto LABEL_26;
        }
        if (v15 == 65279)
        {
          char v12 = a1;
          uint64_t v9 = 65279;
LABEL_27:
          goto LABEL_23;
        }
        if (v15 >= 0x7F && a3)
        {
LABEL_26:
          char v12 = a1;
          goto LABEL_27;
        }
LABEL_23:
        uint64_t v6 = a2[23];
        char v7 = *(unsigned __int8 **)a2;
        break;
    }
  }
  YAML::ostream_wrapper::write(a1, "\"", 1uLL);
  return 1;
}

void YAML::Utils::anonymous namespace'::WriteDoubleQuoteEscapeSequence(std::vector<char> *this, YAML::ostream_wrapper *a2)
{
  int v2 = (int)a2;
  YAML::ostream_wrapper::write(this, "\\"", 1uLL);
  unsigned int v4 = "U";
  if (v2 >= 0xFFFF)
  {
    int v5 = 8;
  }
  else
  {
    unsigned int v4 = "u";
    int v5 = 4;
  }
  if (v2 >= 255) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = "x";
  }
  if (v2 >= 255) {
    int v7 = v5;
  }
  else {
    int v7 = 2;
  }
  YAML::ostream_wrapper::write(this, v6, 1uLL);
  unsigned int v8 = v7 | 1;
  int v9 = 4 * v7 - 4;
  do
  {
    YAML::ostream_wrapper::write(this, &__src, 1uLL);
    --v8;
    v9 -= 4;
  }
  while (v8 > 1);
}

uint64_t YAML::Utils::WriteLiteralString(std::vector<char> *a1, unsigned __int8 *a2, char *a3)
{
  YAML::ostream_wrapper::write(a1, "|\n", 2uLL);
  while (a1[2].__begin_ < a3)
  {
    char v14 = 32;
    YAML::ostream_wrapper::write(a1, &v14, 1uLL);
  }
  unsigned int v13 = 0;
  uint64_t v6 = a2[23];
  int v7 = *(unsigned __int8 **)a2;
  if ((v6 & 0x80u) == 0) {
    unsigned int v8 = a2;
  }
  else {
    unsigned int v8 = *(unsigned __int8 **)a2;
  }
  char v12 = v8;
  while (1)
  {
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *((void *)a2 + 1);
    }
    else {
      int v7 = a2;
    }
      break;
    int v9 = a1;
    if (v13 == 10)
    {
      char v10 = "\n";
      while (1)
      {
        YAML::ostream_wrapper::write(v9, v10, 1uLL);
        if (a1[2].__begin_ >= a3) {
          break;
        }
        char v15 = 32;
        char v10 = &v15;
        int v9 = a1;
      }
    }
    else
    {
    }
    uint64_t v6 = a2[23];
    int v7 = *(unsigned __int8 **)a2;
  }
  return 1;
}

uint64_t YAML::Utils::WriteChar(std::vector<char> *this, YAML::ostream_wrapper *a2)
{
  unsigned int v3 = this;
  if (((a2 & 0xDF) - 65) > 0x19u)
  {
    if ((int)a2 <= 9)
    {
      if (a2 == 8)
      {
        unsigned int v4 = "\"\\b\"";
        goto LABEL_15;
      }
      if (a2 == 9)
      {
        unsigned int v4 = "\"\\t\"";
        goto LABEL_15;
      }
    }
    else
    {
      switch(a2)
      {
        case 0xA:
          unsigned int v4 = "\"\\n\"";
          goto LABEL_15;
        case 0x5C:
          unsigned int v4 = "\"\\\\\"";
          goto LABEL_15;
        case 0x22:
          unsigned int v4 = "\"\\\"\"";
LABEL_15:
          size_t v5 = 4;
          goto LABEL_16;
      }
    }
    unsigned int v7 = a2 - 32;
    YAML::ostream_wrapper::write(this, "\"", 1uLL);
    if (v7 > 0x5E)
    {
    }
    else
    {
      char __src = (char)a2;
      YAML::ostream_wrapper::write(v3, &__src, 1uLL);
    }
    unsigned int v4 = "\"";
    goto LABEL_3;
  }
  char v8 = (char)a2;
  unsigned int v4 = &v8;
LABEL_3:
  this = v3;
  size_t v5 = 1;
LABEL_16:
  YAML::ostream_wrapper::write(this, v4, v5);
  return 1;
}

uint64_t YAML::Utils::WriteComment(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 48);
  YAML::ostream_wrapper::write((std::vector<char> *)a1, "#", 1uLL);
  if (a3)
  {
    uint64_t v7 = a3;
    do
    {
      char v17 = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)a1, &v17, 1uLL);
      --v7;
    }
    while (v7);
  }
  *(unsigned char *)(a1 + 56) = 1;
  unsigned int v16 = 0;
  uint64_t v8 = a2[23];
  int v9 = *(unsigned __int8 **)a2;
  if ((v8 & 0x80u) == 0) {
    char v10 = a2;
  }
  else {
    char v10 = *(unsigned __int8 **)a2;
  }
  char v15 = v10;
  while (1)
  {
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *((void *)a2 + 1);
    }
    else {
      int v9 = a2;
    }
      break;
    char v11 = (std::vector<char> *)a1;
    if (v16 == 10)
    {
      char v12 = "\n";
      while (1)
      {
        YAML::ostream_wrapper::write(v11, v12, 1uLL);
        if (*(void *)(a1 + 48) >= v6) {
          break;
        }
        char v18 = 32;
        char v12 = &v18;
        char v11 = (std::vector<char> *)a1;
      }
      YAML::ostream_wrapper::write((std::vector<char> *)a1, "#", 1uLL);
      if (a3)
      {
        uint64_t v13 = a3;
        do
        {
          char v19 = 32;
          YAML::ostream_wrapper::write((std::vector<char> *)a1, &v19, 1uLL);
          --v13;
        }
        while (v13);
      }
      *(unsigned char *)(a1 + 56) = 1;
    }
    else
    {
    }
    uint64_t v8 = a2[23];
    int v9 = *(unsigned __int8 **)a2;
  }
  return 1;
}

BOOL YAML::Utils::WriteAlias(std::vector<char> *a1, unsigned __int8 *a2)
{
  YAML::ostream_wrapper::write(a1, "*", 1uLL);
}

BOOL YAML::Utils::anonymous namespace'::WriteAliasName(std::vector<char> *a1, unsigned __int8 *a2)
{
  LODWORD(v11) = 0;
  uint64_t v4 = a2[23];
  size_t v5 = *(unsigned __int8 **)a2;
  if ((v4 & 0x80u) == 0) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = *(unsigned __int8 **)a2;
  }
  char v10 = v6;
  while (1)
  {
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *((void *)a2 + 1);
    }
    else {
      size_t v5 = a2;
    }
    if (!NextCodePointAndAdvance) {
      return !NextCodePointAndAdvance;
    }
    uint64_t v8 = (v11 - 91);
    if (v8 <= 0x2A)
    {
      if (v8 == 42) {
        goto LABEL_22;
      }
      if (((1 << (v11 - 91)) & 0x500000005) != 0) {
        return !NextCodePointAndAdvance;
      }
    }
    if (v11 <= 0x2C && ((1 << (char)v11) & 0x100100002600) != 0
      || v11 == 65279
      || (int)v11 < 32
      || v11 >= 0x7E
      && (v11 >> 16 > 0x10
       || (v11 - 64976) < 0x20
       || ((unsigned __int16)v11 & 0xFFFE) == 0xFFFE
       || v11 < 0xA0
       || (v11 & 0xFFFFF800) == 0xD800))
    {
      return !NextCodePointAndAdvance;
    }
LABEL_22:
    uint64_t v4 = a2[23];
    size_t v5 = *(unsigned __int8 **)a2;
  }
}

BOOL YAML::Utils::WriteAnchor(std::vector<char> *a1, unsigned __int8 *a2)
{
  YAML::ostream_wrapper::write(a1, "&", 1uLL);
}

uint64_t YAML::Utils::WriteTag(std::vector<char> *a1, uint64_t *a2, int a3)
{
  if (a3) {
    unint64_t v6 = "!<";
  }
  else {
    unint64_t v6 = "!";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v6);
  YAML::ostream_wrapper::write(a1, (const void **)&__p);
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__p);
  }
  int v8 = *((char *)a2 + 23);
  BOOL v9 = v8 < 0;
  if (v8 >= 0) {
    char v10 = a2;
  }
  else {
    char v10 = (uint64_t *)*a2;
  }
  if (v9) {
    uint64_t v11 = a2[1];
  }
  else {
    uint64_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  *(void *)&long long __p = v10;
  *((void *)&__p + 1) = v11;
  unint64_t v29 = 0;
  if (a3)
  {
    YAML::Exp::URI(v7);
    char v12 = &YAML::Exp::URI(void)::e;
    if (!v11) {
      goto LABEL_44;
    }
  }
  else
  {
    YAML::Exp::Tag(v7);
    char v12 = &YAML::Exp::Tag(void)::e;
    if (!v11) {
      goto LABEL_44;
    }
  }
  unint64_t v13 = 0;
  do
  {
    switch(*v12)
    {
      case 1:
        if (*(unsigned __int8 *)(__p + v13) == *((unsigned __int8 *)v12 + 4)) {
          goto LABEL_37;
        }
        return 0;
      case 2:
        int v14 = *(char *)(__p + v13);
        if (*((char *)v12 + 4) > v14 || *((char *)v12 + 5) < v14) {
          return 0;
        }
        goto LABEL_37;
      case 3:
        uint64_t v15 = *((void *)v12 + 1);
        if (*((void *)v12 + 2) == v15) {
          return 0;
        }
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        while (1)
        {
          int v18 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v15 + v16, &__p);
          if ((v18 & 0x80000000) == 0) {
            break;
          }
          ++v17;
          uint64_t v15 = *((void *)v12 + 1);
          v16 += 32;
          if (v17 >= (*((void *)v12 + 2) - v15) >> 5) {
            return 0;
          }
        }
LABEL_39:
        int v22 = v18;
        goto LABEL_40;
      case 4:
        uint64_t v19 = *((void *)v12 + 1);
        if (*((void *)v12 + 2) == v19) {
          return 0;
        }
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        int v22 = -1;
        break;
      case 5:
        uint64_t v24 = *((void *)v12 + 1);
        if (v24 == *((void *)v12 + 2)
          || (YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v24, &__p) & 0x80000000) == 0)
        {
          return 0;
        }
LABEL_37:
        int v22 = 1;
        goto LABEL_41;
      case 6:
        int v18 = YAML::RegEx::MatchOpSeq<YAML::StringCharSource>((uint64_t)v12, &__p);
        goto LABEL_39;
      default:
        return 0;
    }
    do
    {
      int v23 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v19 + v20, &__p);
      if (v23 == -1) {
        return 0;
      }
      if (!v21) {
        int v22 = v23;
      }
      ++v21;
      uint64_t v19 = *((void *)v12 + 1);
      v20 += 32;
    }
    while (v21 < (*((void *)v12 + 2) - v19) >> 5);
LABEL_40:
    if (v22 < 1) {
      return 0;
    }
LABEL_41:
    unint64_t v13 = v29;
    unsigned int v25 = v22 + 1;
    do
    {
      char __src = *(unsigned char *)(__p + v13);
      YAML::ostream_wrapper::write(a1, &__src, 1uLL);
      unint64_t v13 = ++v29;
      --v25;
    }
    while (v25 > 1);
  }
  while (v13 < *((void *)&__p + 1));
LABEL_44:
  if (!a3) {
    return 1;
  }
  uint64_t v26 = 1;
  YAML::ostream_wrapper::write(a1, ">", 1uLL);
  return v26;
}

void sub_1C5D5E814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void YAML::Exp::URI(YAML::Exp *this)
{
  {
    if (v1)
    {
      YAML::Exp::Word(v1);
      std::string::basic_string[abi:ne180100]<0>(__p, "#;/?:@&=+$,_.!~*'()[]");
      YAML::RegEx::RegEx((uint64_t)&v13, (char *)__p, 3);
      int v2 = (YAML::Exp *)YAML::operator|(YAML::Exp::Word(void)::e, &v13, (uint64_t)&v15);
      int v4 = 1;
      __int16 v5 = 37;
      memset(v6, 0, sizeof(v6));
      YAML::Exp::Hex(v2);
      unsigned int v3 = (YAML::Exp *)YAML::operator+(&v4, YAML::Exp::Hex(void)::e, (uint64_t)&v7);
      YAML::Exp::Hex(v3);
      YAML::operator+(&v7, YAML::Exp::Hex(void)::e, (uint64_t)&v9);
      YAML::operator|(&v15, (int *)&v9, (uint64_t)&YAML::Exp::URI(void)::e);
      unint64_t v17 = (void **)&v10;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v17);
      unint64_t v17 = (void **)&v8;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v17);
      unint64_t v17 = (void **)v6;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v17);
      BOOL v9 = (void **)&v16;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v9);
      BOOL v9 = (void **)&v14;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v9);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::URI(void)::e, &dword_1C5C1E000);
    }
  }
}

void sub_1C5D5E9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  *(void *)(v28 - 40) = v27 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  *(void *)(v28 - 40) = &a14;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  *(void *)(v28 - 40) = v26;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  a17 = v28 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = v28 - 96;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void YAML::Exp::Tag(YAML::Exp *this)
{
  {
    if (v1)
    {
      YAML::Exp::Word(v1);
      std::string::basic_string[abi:ne180100]<0>(__p, "#;/?:@&=+$_.~*'()");
      YAML::RegEx::RegEx((uint64_t)&v13, (char *)__p, 3);
      int v2 = (YAML::Exp *)YAML::operator|(YAML::Exp::Word(void)::e, &v13, (uint64_t)&v15);
      int v4 = 1;
      __int16 v5 = 37;
      memset(v6, 0, sizeof(v6));
      YAML::Exp::Hex(v2);
      unsigned int v3 = (YAML::Exp *)YAML::operator+(&v4, YAML::Exp::Hex(void)::e, (uint64_t)&v7);
      YAML::Exp::Hex(v3);
      YAML::operator+(&v7, YAML::Exp::Hex(void)::e, (uint64_t)&v9);
      YAML::operator|(&v15, (int *)&v9, (uint64_t)&YAML::Exp::Tag(void)::e);
      unint64_t v17 = (void **)&v10;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v17);
      unint64_t v17 = (void **)&v8;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v17);
      unint64_t v17 = (void **)v6;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v17);
      BOOL v9 = (void **)&v16;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v9);
      BOOL v9 = (void **)&v14;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v9);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tag(void)::e, &dword_1C5C1E000);
    }
  }
}

void sub_1C5D5EC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  *(void *)(v28 - 40) = v27 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  *(void *)(v28 - 40) = &a14;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  *(void *)(v28 - 40) = v26;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  a17 = v28 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = v28 - 96;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void YAML::Exp::Word(YAML::Exp *this)
{
  {
    if (v1)
    {
      YAML::Exp::AlphaNumeric(v1);
      int v2 = 1;
      __int16 v3 = 45;
      memset(v4, 0, sizeof(v4));
      YAML::operator|(YAML::Exp::AlphaNumeric(void)::e, &v2, (uint64_t)&YAML::Exp::Word(void)::e);
      __int16 v5 = (void **)v4;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v5);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Word(void)::e, &dword_1C5C1E000);
    }
  }
}

void sub_1C5D5ED70(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void YAML::Exp::Hex(YAML::Exp *this)
{
  {
    if (v1)
    {
      YAML::Exp::Digit(v1);
      int v4 = 2;
      __int16 v5 = 17985;
      memset(v6, 0, sizeof(v6));
      YAML::operator|(&YAML::Exp::Digit(void)::e, &v4, (uint64_t)&v7);
      LODWORD(v2) = 2;
      WORD2(v2) = 26209;
      memset(v3, 0, sizeof(v3));
      YAML::operator|(&v7, (int *)&v2, (uint64_t)&YAML::Exp::Hex(void)::e);
      BOOL v9 = (void **)v3;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v9);
      uint64_t v2 = (void **)&v8;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v2);
      uint64_t v2 = (void **)v6;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v2);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Hex(void)::e, &dword_1C5C1E000);
    }
  }
}

void sub_1C5D5EEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v12 - 40) = v11;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 40));
  a10 = (void **)(v10 + 8);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void YAML::Exp::Digit(YAML::Exp *this)
{
  {
    YAML::Exp::Digit(void)::e = 2;
    word_1EA3D7514 = 14640;
    qword_1EA3D7520 = 0;
    unk_1EA3D7528 = 0;
    qword_1EA3D7518 = 0;
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Digit(void)::e, &dword_1C5C1E000);
  }
}

void YAML::Exp::AlphaNumeric(YAML::Exp *this)
{
  {
    if (v1)
    {
      YAML::Exp::Alpha(v1);
      YAML::Exp::Digit(v2);
      YAML::operator|(YAML::Exp::Alpha(void)::e, &YAML::Exp::Digit(void)::e, (uint64_t)&YAML::Exp::AlphaNumeric(void)::e);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::AlphaNumeric(void)::e, &dword_1C5C1E000);
    }
  }
}

void sub_1C5D5F030(_Unwind_Exception *a1)
{
}

void YAML::Exp::Alpha(YAML::Exp *this)
{
  {
    {
      int v3 = 2;
      __int16 v4 = 31329;
      memset(v5, 0, sizeof(v5));
      LODWORD(v1) = 2;
      WORD2(v1) = 23105;
      memset(v2, 0, sizeof(v2));
      YAML::operator|(&v3, (int *)&v1, (uint64_t)&YAML::Exp::Alpha(void)::e);
      unint64_t v6 = (void **)v2;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v6);
      uint64_t v1 = (void **)v5;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v1);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Alpha(void)::e, &dword_1C5C1E000);
    }
  }
}

void sub_1C5D5F130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v3 - 40) = v2;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::Utils::WriteTagWithPrefix(std::vector<char> *a1, uint64_t *a2, uint64_t *a3)
{
  YAML::ostream_wrapper::write(a1, "!", 1uLL);
  uint64_t v7 = *((unsigned __int8 *)a2 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = (uint64_t *)*a2;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = a2[1];
  }
  *(void *)&long long v42 = v8;
  *((void *)&v42 + 1) = v7;
  unint64_t v43 = 0;
  if (v7)
  {
LABEL_7:
    YAML::Exp::URI(v6);
    if ((YAML::Exp::URI(void)::e - 3) < 0xFFFFFFFE || v43 < *((void *)&v42 + 1))
    {
      switch(YAML::Exp::URI(void)::e)
      {
        case 1:
          if (*(unsigned __int8 *)(v42 + v43) != byte_1EA3DA24C) {
            return 0;
          }
          goto LABEL_39;
        case 2:
          int v10 = *(char *)(v42 + v43);
          if (byte_1EA3DA24C <= v10 && byte_1EA3DA24D >= v10) {
            goto LABEL_39;
          }
          return 0;
        case 3:
          uint64_t v12 = qword_1EA3DA250;
          if (unk_1EA3DA258 == qword_1EA3DA250) {
            return 0;
          }
          if ((unint64_t)((unk_1EA3DA258 - qword_1EA3DA250) >> 5) <= 1) {
            uint64_t v13 = 1;
          }
          else {
            uint64_t v13 = (unk_1EA3DA258 - qword_1EA3DA250) >> 5;
          }
          while (1)
          {
            int v14 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v12, &v42);
            if ((v14 & 0x80000000) == 0) {
              break;
            }
            v12 += 32;
            if (!--v13) {
              return 0;
            }
          }
LABEL_41:
          int v18 = v14;
          goto LABEL_42;
        case 4:
          uint64_t v15 = qword_1EA3DA250;
          if (unk_1EA3DA258 == qword_1EA3DA250) {
            return 0;
          }
          uint64_t v16 = 0;
          if ((unint64_t)((unk_1EA3DA258 - qword_1EA3DA250) >> 5) <= 1) {
            uint64_t v17 = 1;
          }
          else {
            uint64_t v17 = (unk_1EA3DA258 - qword_1EA3DA250) >> 5;
          }
          int v18 = -1;
          break;
        case 5:
          if (qword_1EA3DA250 == unk_1EA3DA258
            || (YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(qword_1EA3DA250, &v42) & 0x80000000) == 0)
          {
            return 0;
          }
LABEL_39:
          int v18 = 1;
          goto LABEL_43;
        case 6:
          int v14 = YAML::RegEx::MatchOpSeq<YAML::StringCharSource>((uint64_t)&YAML::Exp::URI(void)::e, &v42);
          goto LABEL_41;
        default:
          return 0;
      }
      while (1)
      {
        int v19 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v15, &v42);
        if (v19 == -1) {
          break;
        }
        if (!v16) {
          int v18 = v19;
        }
        ++v16;
        v15 += 32;
        if (v17 == v16)
        {
LABEL_42:
          if (v18 < 1) {
            return 0;
          }
LABEL_43:
          unint64_t v20 = v43;
          unsigned int v21 = v18 + 1;
          do
          {
            LOBYTE(__src) = *(unsigned char *)(v42 + v20);
            YAML::ostream_wrapper::write(a1, (const char *)&__src, 1uLL);
            unint64_t v20 = ++v43;
            --v21;
          }
          while (v21 > 1);
          if (v20 < *((void *)&v42 + 1)) {
            goto LABEL_7;
          }
          goto LABEL_46;
        }
      }
    }
    return 0;
  }
LABEL_46:
  uint64_t v22 = 1;
  YAML::ostream_wrapper::write(a1, "!", 1uLL);
  uint64_t v24 = *((unsigned __int8 *)a3 + 23);
  if ((v24 & 0x80u) == 0) {
    unsigned int v25 = a3;
  }
  else {
    unsigned int v25 = (uint64_t *)*a3;
  }
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = a3[1];
  }
  *(void *)&long long __src = v25;
  *((void *)&__src + 1) = v24;
  unint64_t v41 = 0;
  if (v24)
  {
LABEL_52:
    YAML::Exp::Tag(v23);
    if ((YAML::Exp::Tag(void)::e - 3) < 0xFFFFFFFE || v41 < *((void *)&__src + 1))
    {
      switch(YAML::Exp::Tag(void)::e)
      {
        case 1:
          if (*(unsigned __int8 *)(__src + v41) != byte_1EA3DA314) {
            return 0;
          }
          goto LABEL_84;
        case 2:
          int v27 = *(char *)(__src + v41);
          if (byte_1EA3DA314 > v27 || byte_1EA3DA315 < v27) {
            return 0;
          }
          goto LABEL_84;
        case 3:
          uint64_t v29 = qword_1EA3DA318;
          if (unk_1EA3DA320 == qword_1EA3DA318) {
            return 0;
          }
          if ((unint64_t)((unk_1EA3DA320 - qword_1EA3DA318) >> 5) <= 1) {
            uint64_t v30 = 1;
          }
          else {
            uint64_t v30 = (unk_1EA3DA320 - qword_1EA3DA318) >> 5;
          }
          while (1)
          {
            int v31 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v29, &__src);
            if ((v31 & 0x80000000) == 0) {
              break;
            }
            v29 += 32;
            if (!--v30) {
              return 0;
            }
          }
LABEL_86:
          int v35 = v31;
          goto LABEL_87;
        case 4:
          uint64_t v32 = qword_1EA3DA318;
          if (unk_1EA3DA320 == qword_1EA3DA318) {
            return 0;
          }
          uint64_t v33 = 0;
          if ((unint64_t)((unk_1EA3DA320 - qword_1EA3DA318) >> 5) <= 1) {
            uint64_t v34 = 1;
          }
          else {
            uint64_t v34 = (unk_1EA3DA320 - qword_1EA3DA318) >> 5;
          }
          int v35 = -1;
          break;
        case 5:
          if (qword_1EA3DA318 == unk_1EA3DA320
            || (YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(qword_1EA3DA318, &__src) & 0x80000000) == 0)
          {
            return 0;
          }
LABEL_84:
          int v35 = 1;
          goto LABEL_88;
        case 6:
          int v31 = YAML::RegEx::MatchOpSeq<YAML::StringCharSource>((uint64_t)&YAML::Exp::Tag(void)::e, &__src);
          goto LABEL_86;
        default:
          return 0;
      }
      while (1)
      {
        int v36 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v32, &__src);
        if (v36 == -1) {
          break;
        }
        if (!v33) {
          int v35 = v36;
        }
        ++v33;
        v32 += 32;
        if (v34 == v33)
        {
LABEL_87:
          if (v35 < 1) {
            return 0;
          }
LABEL_88:
          unint64_t v37 = v41;
          unsigned int v38 = v35 + 1;
          do
          {
            char v44 = *(unsigned char *)(__src + v37);
            YAML::ostream_wrapper::write(a1, &v44, 1uLL);
            unint64_t v37 = ++v41;
            --v38;
          }
          while (v38 > 1);
          if (v37 >= *((void *)&__src + 1)) {
            return 1;
          }
          goto LABEL_52;
        }
      }
    }
    return 0;
  }
  return v22;
}

uint64_t YAML::Utils::WriteBinary(std::vector<char> *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3) {
    __int16 v4 = *(YAML **)(a2 + 24);
  }
  else {
    __int16 v4 = *(YAML **)a2;
  }
  if (v3) {
    unint64_t v5 = *(void *)(a2 + 32);
  }
  else {
    unint64_t v5 = *(void *)(a2 + 8) - *(void *)a2;
  }
  YAML::EncodeBase64(v4, v5, &__p);
  YAML::Utils::WriteDoubleQuotedString(a1, (unsigned __int8 *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C5D5F61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InitDefaultsscc_info_HeroHeader_HeroHeader_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HeroHeader.pb.cc", a4);
  SnippetUI::HeroHeader::HeroHeader((SnippetUI::HeroHeader *)&SnippetUI::_HeroHeader_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_HeroHeader_default_instance_, v4);
  qword_1EB68F4D0 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EB68F4D8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68F4E0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68F4E8 = &SnippetUI::_WatchListButton_default_instance_;
}

SnippetUI::HeroHeader *SnippetUI::HeroHeader::HeroHeader(SnippetUI::HeroHeader *this)
{
  *(void *)this = &unk_1F211A700;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  if (atomic_load_explicit(scc_info_HeroHeader_HeroHeader_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_HeroHeader_HeroHeader_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return this;
}

void sub_1C5D5F73C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::HeroHeader::GetMetadata(SnippetUI::HeroHeader *this)
{
  return file_level_metadata_HeroHeader_2eproto;
}

uint64_t SnippetUI::HeroHeader::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

void SnippetUI::HeroHeader::MergeFrom(SnippetUI::HeroHeader *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HeroHeader.pb.cc", 423);
    __int16 v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::HeroHeader::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D5F858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::HeroHeader::MergeFrom(SnippetUI::HeroHeader *this, const SnippetUI::HeroHeader *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HeroHeader.pb.cc", 438);
    __int16 v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::HeroHeader *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::HeroHeader *)&SnippetUI::_HeroHeader_default_instance_)
  {
    uint64_t v8 = (int **)*((void *)a2 + 3);
    if (v8)
    {
      BOOL v9 = (int **)*((void *)this + 3);
      if (!v9)
      {
        BOOL v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((void *)this + 3) = v9;
        uint64_t v8 = (int **)*((void *)a2 + 3);
      }
      if (v8) {
        int v10 = v8;
      }
      else {
        int v10 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      }
      SnippetUI::VisualProperty::MergeFrom(v9, v10);
    }
    uint64_t v11 = (int **)*((void *)a2 + 4);
    if (v11)
    {
      uint64_t v12 = (int **)*((void *)this + 4);
      if (!v12)
      {
        uint64_t v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v12;
        uint64_t v11 = (int **)*((void *)a2 + 4);
      }
      if (v11) {
        uint64_t v13 = v11;
      }
      else {
        uint64_t v13 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v12, v13);
    }
    int v14 = (int **)*((void *)a2 + 5);
    if (v14)
    {
      uint64_t v15 = (int **)*((void *)this + 5);
      if (!v15)
      {
        uint64_t v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v15;
        int v14 = (int **)*((void *)a2 + 5);
      }
      if (v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v15, v16);
    }
    uint64_t v17 = (const SnippetUI::WatchListButton *)*((void *)a2 + 6);
    if (v17)
    {
      int v18 = (SnippetUI::WatchListButton *)*((void *)this + 6);
      if (!v18)
      {
        int v18 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::WatchListButton>(0);
        *((void *)this + 6) = v18;
        uint64_t v17 = (const SnippetUI::WatchListButton *)*((void *)a2 + 6);
      }
      if (v17) {
        int v19 = v17;
      }
      else {
        int v19 = (const SnippetUI::WatchListButton *)&SnippetUI::_WatchListButton_default_instance_;
      }
      SnippetUI::WatchListButton::MergeFrom(v18, v19);
    }
  }
}

void sub_1C5D5FA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::HeroHeader::CopyFrom(SnippetUI::HeroHeader *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::HeroHeader::Clear(this);
    SnippetUI::HeroHeader::MergeFrom(this, a2);
  }
}

void SnippetUI::HeroHeader::Clear(SnippetUI::HeroHeader *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  char v8 = *((unsigned char *)this + 8);
  char v7 = (SnippetUI::HeroHeader *)((char *)this + 8);
  *((void *)v7 + 5) = 0;
  if (v8)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v7);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::HeroHeader::InternalSerializeWithCachedSizesToArray(SnippetUI::HeroHeader *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v5 = (char *)a2;
  if (this == (SnippetUI::HeroHeader *)&SnippetUI::_HeroHeader_default_instance_) {
    goto LABEL_49;
  }
  char v7 = (SnippetUI::VisualProperty *)*((void *)this + 3);
  if (v7)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      char v7 = (SnippetUI::VisualProperty *)*((void *)this + 3);
    }
    *uint64_t v5 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        uint64_t v12 = v5 + 2;
        do
        {
          uint64_t v13 = v12;
          *v12++ = v10 | 0x80;
          unsigned int v14 = v10 >> 7;
          unsigned int v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        uint64_t v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *uint64_t v12 = v14;
        goto LABEL_13;
      }
      void v5[2] = v10;
      uint64_t v9 = 3;
    }
    else
    {
      v5[1] = v8;
      uint64_t v9 = 2;
    }
    uint64_t v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    uint64_t v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  uint64_t v16 = (SnippetUI::TextProperty *)*((void *)this + 4);
  if (!v16) {
    goto LABEL_26;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    uint64_t v16 = (SnippetUI::TextProperty *)*((void *)this + 4);
  }
  *uint64_t v5 = 18;
  unsigned int v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    unsigned int v19 = v17 >> 7;
    if (v17 >> 14)
    {
      unsigned int v21 = v5 + 2;
      do
      {
        uint64_t v22 = v21;
        *v21++ = v19 | 0x80;
        unsigned int v23 = v19 >> 7;
        unsigned int v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      char v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *unsigned int v21 = v23;
      goto LABEL_25;
    }
    void v5[2] = v19;
    uint64_t v18 = 3;
  }
  else
  {
    v5[1] = v17;
    uint64_t v18 = 2;
  }
  char v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  unsigned int v25 = (SnippetUI::TextProperty *)*((void *)this + 5);
  if (!v25) {
    goto LABEL_38;
  }
  if ((unint64_t)v5 >= *(void *)a3)
  {
    uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    unsigned int v25 = (SnippetUI::TextProperty *)*((void *)this + 5);
  }
  *uint64_t v5 = 26;
  unsigned int v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    unsigned int v28 = v26 >> 7;
    if (v26 >> 14)
    {
      uint64_t v30 = v5 + 2;
      do
      {
        int v31 = v30;
        *v30++ = v28 | 0x80;
        unsigned int v32 = v28 >> 7;
        unsigned int v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      uint64_t v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *uint64_t v30 = v32;
      goto LABEL_37;
    }
    void v5[2] = v28;
    uint64_t v27 = 3;
  }
  else
  {
    v5[1] = v26;
    uint64_t v27 = 2;
  }
  uint64_t v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  uint64_t v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  uint64_t v34 = (SnippetUI::WatchListButton *)*((void *)this + 6);
  if (v34)
  {
    if ((unint64_t)v5 >= *(void *)a3)
    {
      uint64_t v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      uint64_t v34 = (SnippetUI::WatchListButton *)*((void *)this + 6);
    }
    *uint64_t v5 = 34;
    unsigned int v35 = *((_DWORD *)v34 + 6);
    if (v35 > 0x7F)
    {
      v5[1] = v35 | 0x80;
      unsigned int v37 = v35 >> 7;
      if (v35 >> 14)
      {
        unsigned int v38 = v5 + 2;
        do
        {
          uint64_t v39 = v38;
          *v38++ = v37 | 0x80;
          unsigned int v40 = v37 >> 7;
          unsigned int v41 = v37 >> 14;
          v37 >>= 7;
        }
        while (v41);
        int v36 = (google::protobuf::UnknownFieldSet *)(v39 + 2);
        *unsigned int v38 = v40;
      }
      else
      {
        void v5[2] = v37;
        int v36 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v35;
      int v36 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    uint64_t v5 = (char *)SnippetUI::WatchListButton::InternalSerializeWithCachedSizesToArray(v34, v36, a3, a4);
  }
LABEL_49:
  long long v42 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v42 + 23) < 0)
  {
    unint64_t v43 = (const char *)*((void *)v42 + 1);
    if (!v43) {
      goto LABEL_55;
    }
    long long v42 = *(google::protobuf::internal **)v42;
    goto LABEL_54;
  }
  unint64_t v43 = (const char *)*((unsigned __int8 *)v42 + 23);
  if (*((unsigned char *)v42 + 23))
  {
LABEL_54:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v42, v43, 1, (google::protobuf::internal *)"SnippetUI.HeroHeader.component_name");
    uint64_t v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((const void ***)this + 2), v5);
  }
LABEL_55:
  uint64_t v44 = *((void *)this + 1);
  if ((v44 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v44 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

google::protobuf::internal *SnippetUI::HeroHeader::_InternalParse(SnippetUI::HeroHeader *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v26 = a2;
  uint64_t v5 = (std::string **)((char *)this + 16);
  uint64_t v6 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v26, *((_DWORD *)a3 + 23))) {
      return v26;
    }
    TagFallbacstd::string::size_type k = (google::protobuf::internal *)((char *)v26 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v26;
    if ((*(char *)v26 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacstd::string::size_type k = (google::protobuf::internal *)((char *)v26 + 2);
LABEL_6:
      unsigned int v26 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacstd::string::size_type k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v26, v9);
    unsigned int v26 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_29;
        }
        unsigned int v10 = (SnippetUI::VisualProperty *)*((void *)this + 3);
        if (!v10)
        {
          unsigned int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((void *)this + 3) = v10;
          TagFallbacstd::string::size_type k = v26;
        }
        uint64_t v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v10, TagFallback);
        goto LABEL_34;
      case 2u:
        if (v9 != 18) {
          goto LABEL_29;
        }
        uint64_t v12 = (SnippetUI::TextProperty *)*((void *)this + 4);
        if (v12) {
          goto LABEL_19;
        }
        uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 4) = v12;
        goto LABEL_18;
      case 3u:
        if (v9 != 26) {
          goto LABEL_29;
        }
        uint64_t v12 = (SnippetUI::TextProperty *)*((void *)this + 5);
        if (v12) {
          goto LABEL_19;
        }
        uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v12;
LABEL_18:
        TagFallbacstd::string::size_type k = v26;
LABEL_19:
        uint64_t v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v12, TagFallback);
        goto LABEL_34;
      case 4u:
        if (v9 != 34) {
          goto LABEL_29;
        }
        uint64_t v13 = (SnippetUI::WatchListButton *)*((void *)this + 6);
        if (!v13)
        {
          uint64_t v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::WatchListButton>(0);
          *((void *)this + 6) = v13;
          TagFallbacstd::string::size_type k = v26;
        }
        unsigned int v14 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallbacstd::string::size_type k = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback) {
            goto LABEL_46;
          }
          unsigned int v15 = SizeFallback;
          unsigned int v14 = v18;
        }
        else
        {
          unsigned int v15 = (char *)TagFallback + 1;
        }
        int v19 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v15, v14);
        int v20 = *((_DWORD *)a3 + 22);
        BOOL v21 = __OFSUB__(v20--, 1);
        *((_DWORD *)a3 + 22) = v20;
        if (v20 < 0 != v21) {
          goto LABEL_46;
        }
        int v22 = v19;
        unsigned int v23 = SnippetUI::WatchListButton::_InternalParse(v13, (google::protobuf::internal *)v15, a3);
        if (!v23) {
          goto LABEL_46;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          goto LABEL_46;
        }
        int v24 = *((_DWORD *)a3 + 7) + v22;
        *((_DWORD *)a3 + 7) = v24;
        *(void *)a3 = *((void *)a3 + 1) + (v24 & (v24 >> 31));
        unsigned int v26 = v23;
        continue;
      case 6u:
        if (v9 != 50) {
          goto LABEL_29;
        }
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.HeroHeader.component_name");
        goto LABEL_34;
      default:
LABEL_29:
        if (v9) {
          BOOL v16 = (v9 & 7) == 4;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16)
        {
          *((_DWORD *)a3 + 20) = v9 - 1;
          return TagFallback;
        }
        uint64_t v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_34:
        unsigned int v26 = (google::protobuf::internal *)v11;
        if (v11) {
          continue;
        }
LABEL_46:
        TagFallbacstd::string::size_type k = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::HeroHeader::GetCachedSize(SnippetUI::HeroHeader *this)
{
  return *((unsigned int *)this + 14);
}

char *SnippetUI::HeroHeader::ByteSizeLong(SnippetUI::HeroHeader *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::HeroHeader *)&SnippetUI::_HeroHeader_default_instance_)
  {
    uint64_t v6 = (SnippetUI::VisualProperty *)*((void *)this + 3);
    if (v6)
    {
      char v7 = SnippetUI::VisualProperty::ByteSizeLong(v6);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v7[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v8 = (SnippetUI::TextProperty *)*((void *)this + 4);
    if (v8)
    {
      uint64_t v9 = SnippetUI::TextProperty::ByteSizeLong(v8);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v9[(void)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v10 = (SnippetUI::TextProperty *)*((void *)this + 5);
    if (v10)
    {
      uint64_t v11 = SnippetUI::TextProperty::ByteSizeLong(v10);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v11[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
    uint64_t v12 = (SnippetUI::WatchListButton *)*((void *)this + 6);
    if (v12)
    {
      uint64_t v13 = SnippetUI::WatchListButton::ByteSizeLong(v12);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v13[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::HeroHeader *)((char *)this + 8), v5, (_DWORD *)this + 14);
  }
  else
  {
    *((_DWORD *)this + 14) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::HeroHeader::IsInitialized(SnippetUI::HeroHeader *this)
{
  return 1;
}

SnippetUI::HeroHeader *SnippetUI::HeroHeader::New(SnippetUI::HeroHeader *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HeroHeader>(a2);
}

SnippetUI::HeroHeader *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HeroHeader>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::HeroHeader *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::HeroHeader>);
  }
  SnippetUI::HeroHeader::HeroHeader(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D60414(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C406AB77EA5);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::HeroHeader>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::HeroHeader *SnippetUI::HeroHeader::New(SnippetUI::HeroHeader *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HeroHeader>(0);
}

void SnippetUI::HeroHeader::~HeroHeader(SnippetUI::HeroHeader *this)
{
  SnippetUI::HeroHeader::~HeroHeader(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(void *)this = &unk_1F211A700;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::HeroHeader *)&SnippetUI::_HeroHeader_default_instance_)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *((void *)this + 5);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    char v7 = *((void *)this + 6);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::HeroHeader::InitAsDefaultInstance(SnippetUI::HeroHeader *this)
{
  qword_1EB68F4D0 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EB68F4D8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EB68F4E0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EB68F4E8 = &SnippetUI::_WatchListButton_default_instance_;
}

uint64_t SnippetUI::HeroHeader::_Internal::banner(SnippetUI::HeroHeader::_Internal *this, const SnippetUI::HeroHeader *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::HeroHeader::_Internal::text_1(SnippetUI::HeroHeader::_Internal *this, const SnippetUI::HeroHeader *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::HeroHeader::_Internal::text_2(SnippetUI::HeroHeader::_Internal *this, const SnippetUI::HeroHeader *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::HeroHeader::_Internal::watch_list_button(SnippetUI::HeroHeader::_Internal *this, const SnippetUI::HeroHeader *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::HeroHeader::clear_banner(SnippetUI::HeroHeader *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::HeroHeader::clear_text_1(SnippetUI::HeroHeader *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::HeroHeader::clear_text_2(SnippetUI::HeroHeader *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::HeroHeader::clear_watch_list_button(SnippetUI::HeroHeader *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

SnippetUI::HeroHeader *SnippetUI::HeroHeader::HeroHeader(SnippetUI::HeroHeader *this, const SnippetUI::HeroHeader *a2)
{
  *(void *)this = &unk_1F211A700;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::HeroHeader *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  if (a2 == (const SnippetUI::HeroHeader *)&SnippetUI::_HeroHeader_default_instance_)
  {
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
    *((void *)this + 5) = 0;
  }
  else
  {
    if (*((void *)a2 + 3)) {
      operator new();
    }
    *((void *)this + 3) = 0;
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
  }
  *((void *)this + 6) = 0;
  return this;
}

void sub_1C5D6091C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C4084265165);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::HeroHeader::default_instance(SnippetUI::HeroHeader *this)
{
  if (atomic_load_explicit(scc_info_HeroHeader_HeroHeader_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_HeroHeader_HeroHeader_2eproto);
  }
  return &SnippetUI::_HeroHeader_default_instance_;
}

void SnippetUI::HeroHeader::CopyFrom(SnippetUI::HeroHeader *this, const SnippetUI::HeroHeader *a2)
{
  if (a2 != this)
  {
    SnippetUI::HeroHeader::Clear(this);
    SnippetUI::HeroHeader::MergeFrom(this, a2);
  }
}

void SnippetUI::HeroHeader::InternalSwap(SnippetUI::HeroHeader *this, SnippetUI::HeroHeader *a2)
{
  uint64_t v4 = (SnippetUI::HeroHeader *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v17;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  char v7 = (uint64_t *)*((void *)this + 2);
  unsigned int v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    char v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)char v7 = *(_OWORD *)v9;
  void v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  void v9[2] = v10;
LABEL_13:
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v15;
  uint64_t v16 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v16;
}

void sub_1C5D60C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D60E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5D60F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5D61108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D612C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D613BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D61494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCurrency::toString(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::FormatCurrency(siri::dialogengine::Context *a1, uint64_t a2, char a3)
{
  v29[19] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  Requireddouble NumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  char v7 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(&__p, "units");
      RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
      uint64_t v9 = RequiredStringParameter;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v9)
        {
LABEL_5:
          double v10 = v7[9];
          (*(void (**)(std::string *__return_ptr, void *))(*(void *)v9 + 48))(&__p, v9);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v13 = __p;
          }
          if (v27 < 0) {
            operator delete(v26);
          }
          if (v25 < 0) {
            operator delete(v24);
          }
          if (v23 < 0) {
            operator delete(v22);
          }
          if (v21 < 0) {
            operator delete(v20);
          }
          if (v19 < 0) {
            operator delete(v18);
          }
          if (v17 < 0) {
            operator delete(v16);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (fabs(v10) >= 1000.0) {
            char v11 = a3;
          }
          else {
            char v11 = 0;
          }
          siri::dialogengine::GetCurrencyInfo((uint64_t)v12, a1, (unsigned __int8 *)&v13, v11);
          std::string::basic_string[abi:ne180100]<0>(v14, "unit#currencyUnit");
          v29[0] = 0;
          v29[1] = 0;
          unsigned int v28 = v29;
          siri::dialogengine::GetCurrencyCATValue(v10, (uint64_t)&__p, (uint64_t)a1, (uint64_t)&v13, (uint64_t)v14, (uint64_t)v12);
        }
      }
      else if (RequiredStringParameter)
      {
        goto LABEL_5;
      }
      operator new();
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5D61C20(_Unwind_Exception *a1)
{
}

void siri::dialogengine::GetCurrencyInfo(uint64_t a1, siri::dialogengine::Context *a2, unsigned __int8 *a3, char a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  siri::dialogengine::Context::GetDeviceLocale(a2, &v44);
  std::string::basic_string[abi:ne180100]<0>((void *)a1, "");
  char v7 = (void **)(a1 + 24);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 24), "");
  unsigned int v8 = (void **)(a1 + 48);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 48), "");
  *(_WORD *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 76) = 2;
  int v9 = (char)a3[23];
  if (v9 >= 0) {
    uint64_t v10 = a3[23];
  }
  else {
    uint64_t v10 = *((void *)a3 + 1);
  }
  if (v10 == 4)
  {
    if (v9 >= 0) {
      char v11 = a3;
    }
    else {
      char v11 = *(unsigned char **)a3;
    }
    if (*v11 == 88) {
      goto LABEL_13;
    }
  }
  else if (v10 == 3)
  {
    if (v9 >= 0) {
      char v11 = a3;
    }
    else {
      char v11 = *(unsigned char **)a3;
    }
LABEL_13:
    uint64_t v12 = MEMORY[0x1E4F14390];
    do
    {
      unsigned int v13 = (char)*v11;
      if ((v13 & 0x80000000) != 0) {
        int v14 = __maskrune(v13, 0x100uLL);
      }
      else {
        int v14 = *(_DWORD *)(v12 + 4 * v13 + 60) & 0x100;
      }
      if (!v14) {
        goto LABEL_25;
      }
      ++v11;
      --v10;
    }
    while (v10);
    int v15 = (char)a3[23];
    BOOL v16 = v15 < 0;
    if (v15 >= 0) {
      char v17 = (const char *)a3;
    }
    else {
      char v17 = *(const char **)a3;
    }
    int v18 = a3[23];
    if (v16) {
      int v18 = *((_DWORD *)a3 + 2);
    }
    u_charsToUChars(v17, us, v18 + 1);
    int v41 = 0;
    uint64_t v40 = unum_open();
    int v41 = 0;
    if ((int)ucurr_forLocale() >= 1)
    {
      siri::dialogengine::UCharToString((const unsigned __int16 *)0x100, &__p);
      char v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = a3[23];
      int v24 = (char)v23;
      if ((v23 & 0x80u) != 0) {
        uint64_t v23 = *((void *)a3 + 1);
      }
      if (size == v23)
      {
        if (v24 >= 0) {
          char v25 = a3;
        }
        else {
          char v25 = *(unsigned __int8 **)a3;
        }
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          unsigned int v35 = (void *)__p.__r_.__value_.__r.__words[0];
          *(unsigned char *)(a1 + 72) = memcmp(__p.__r_.__value_.__l.__data_, v25, __p.__r_.__value_.__l.__size_) == 0;
          goto LABEL_53;
        }
        if (!*((unsigned char *)&__p.__r_.__value_.__s + 23))
        {
          *(unsigned char *)(a1 + 72) = 1;
          goto LABEL_55;
        }
        uint64_t v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
        p_p = &__p;
        do
        {
          int v29 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          int v28 = v29;
          int v31 = *v25++;
          int v30 = v31;
          BOOL v33 = v26-- != 0;
          BOOL v34 = v28 == v30;
        }
        while (v34 && v33);
      }
      else
      {
        BOOL v34 = 0;
      }
      *(unsigned char *)(a1 + 72) = v34;
      if (v21 < 0)
      {
        unsigned int v35 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_53:
        operator delete(v35);
      }
    }
LABEL_55:
    int v41 = 0;
    int isAvailable = ucurr_isAvailable();
    *(unsigned char *)(a1 + 73) = isAvailable != 0;
    if (!isAvailable) {
      unum_setAttribute();
    }
    int v41 = 0;
    unum_formatDoubleCurrency();
    siri::dialogengine::UCharToString((const unsigned __int16 *)0x100, &__p);
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*v8);
    }
    *(_OWORD *)unsigned int v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 64) = *((void *)&__p.__r_.__value_.__l + 2);
    if ((a4 & 3) != 0)
    {
      {
        operator new();
      }
      unsigned int v37 = (std::once_flag::_State_type *)siri::dialogengine::GetNumberSeparatorsRegex(void)::flag;
      if (atomic_load_explicit((atomic_ullong *volatile)siri::dialogengine::GetNumberSeparatorsRegex(void)::flag, memory_order_acquire) != -1)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::__call_once(v37, &v42, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetNumberSeparatorsRegex(void)::$_0 &&>>);
      }
      memset(&__p, 0, sizeof(__p));
      if (a4) {
        siri::dialogengine::GetICUCompactNumberFormatLong(&v42);
      }
      else {
        siri::dialogengine::GetICUCompactNumberFormatShort(&v42);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v42;
      siri::dialogengine::ReplaceSpecialUnicodeSpaceChars();
    }
    *(_DWORD *)(a1 + 76) = ucurr_getDefaultFractionDigits();
    LODWORD(v38.__r_.__value_.__l.__data_) = 0;
    int v41 = 0;
    ucurr_getName();
    siri::dialogengine::UCharToString(0, &__p);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(std::string *)a1 = __p;
    uplrules_open();
    uplrules_select();
    siri::dialogengine::UCharToString((const unsigned __int16 *)0x100, &__p);
    uplrules_close();
    int v41 = 0;
    ucurr_getPluralName();
    siri::dialogengine::UCharToString((const unsigned __int16 *)LODWORD(v38.__r_.__value_.__l.__data_), &v42);
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*v7);
    }
    *(_OWORD *)char v7 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
    *(void *)(a1 + 40) = *((void *)&v42.__r_.__value_.__l + 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::unique_ptr<void *,siri::dialogengine::UNumberFormatDeleter>::reset[abi:ne180100](&v40);
    goto LABEL_59;
  }
LABEL_25:
  std::operator+<char>();
  char v19 = std::string::append(&v42, "'");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
LABEL_59:
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D62760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::unique_ptr<void *,siri::dialogengine::UNumberFormatDeleter>::reset[abi:ne180100](&a23);
  siri::dialogengine::CurrencyInfo::~CurrencyInfo(v44);
  if (a44 < 0) {
    operator delete(*v45);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetCurrencyCATValue(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long double v8 = round(__exp10((double)*(int *)(a6 + 76)) * a1);
  fmod(v8, 2.0);
  siri::dialogengine::GetSubUnitValue((siri::dialogengine *)*(unsigned int *)(a6 + 76), a1);
  siri::dialogengine::CreateJSONStringVal();
}

void sub_1C5D62F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
}

void siri::dialogengine::CurrencyInfo::~CurrencyInfo(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void siri::dialogengine::GetSubUnitValue(siri::dialogengine *this, double a2)
{
  double v3 = (double)(int)this;
  double v4 = __exp10((double)(int)this);
  double v5 = __exp10(v3);
  double v6 = v5 * a2;
  double v7 = round(v5 * a2);
  double v8 = v7 - v6;
  double v9 = fmod(v7, 2.0);
  BOOL v11 = v7 - v6 != -0.5 && v8 != 0.5 || v9 == 0.0;
  double v12 = v6 - v8;
  if (v11) {
    double v12 = v7;
  }
  double v13 = fabs(v12 / v5);
  fmod(round(v4 * (v13 - floor(v13))), 2.0);
}

void std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(std::string *a1, std::__wrap_iter<const char *> a2, std::__wrap_iter<const char *> a3, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *a4, const char *a5)
{
  std::string::size_type i = (std::string::value_type *)a2.__i_;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v37, a2, a3, a4, (std::regex_constants::match_flag_type)a5);
  memset(&__x.__match_.__prefix_, 0, 17);
  memset(&__x.__match_.__suffix_, 0, 17);
  __x.__match_.__ready_ = 0;
  __x.__match_.__position_start_.__i_ = 0;
  memset(&__x.__match_, 0, 41);
  memset(&__x, 0, 28);
  if (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v37, &__x))
  {
    size_t v9 = strlen(a5);
    std::__wrap_iter<const char *>::iterator_type v10 = 0;
    BOOL v11 = 0;
    double v12 = (unsigned __int8 *)&a5[v9];
    while (1)
    {
      if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v37, &__x))
      {
        while (v11 != v10)
          std::string::push_back(a1, *v11++);
        goto LABEL_47;
      }
      double v13 = (std::string::value_type *)v37.__match_.__prefix_.first.__i_;
      std::__wrap_iter<const char *>::iterator_type v14 = v37.__match_.__prefix_.second.__i_;
      while (v13 != v14)
        std::string::push_back(a1, *v13++);
      if (v9) {
        break;
      }
LABEL_44:
      BOOL v11 = (std::string::value_type *)v37.__match_.__suffix_.first.__i_;
      std::__wrap_iter<const char *>::iterator_type v10 = v37.__match_.__suffix_.second.__i_;
      std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v37);
    }
    int v15 = a5;
    while (1)
    {
      int v16 = *(unsigned __int8 *)v15;
      if (v16 == 36)
      {
        char v17 = (unsigned __int8 *)(v15 + 1);
        if (v15 + 1 == (const char *)v12) {
          goto LABEL_41;
        }
        int v18 = (char)*v17;
        int v16 = *v17;
        if (v18 > 38)
        {
          if (v18 == 39)
          {
            int v24 = (std::string::value_type *)v37.__match_.__suffix_.first.__i_;
            std::__wrap_iter<const char *>::iterator_type v23 = v37.__match_.__suffix_.second.__i_;
            while (v24 != v23)
              std::string::push_back(a1, *v24++);
            goto LABEL_43;
          }
          if (v18 == 96)
          {
            int v22 = (std::string::value_type *)v37.__match_.__prefix_.first.__i_;
            std::__wrap_iter<const char *>::iterator_type v21 = v37.__match_.__prefix_.second.__i_;
            while (v22 != v21)
              std::string::push_back(a1, *v22++);
            goto LABEL_43;
          }
LABEL_28:
          if ((v16 - 48) <= 9)
          {
            unint64_t v25 = *v17 - 48;
            if (v15 + 2 != (const char *)v12)
            {
              uint64_t v26 = *((unsigned __int8 *)v15 + 2);
              unsigned int v27 = v26 - 48;
              uint64_t v28 = v26 + 10 * (int)v25 - 48;
              if (v27 > 9)
              {
                char v17 = (unsigned __int8 *)(v15 + 1);
              }
              else
              {
                unint64_t v25 = v28;
                char v17 = (unsigned __int8 *)(v15 + 2);
              }
            }
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL
                * (((char *)v37.__match_.__matches_.__end_ - (char *)v37.__match_.__matches_.__begin_) >> 3);
            int v30 = &v37.__match_.__matches_.__begin_[(int)v25];
            BOOL v31 = v29 > v25;
            if (v29 <= v25) {
              p_unmatched = &v37.__match_.__unmatched_;
            }
            else {
              p_unmatched = &v37.__match_.__matches_.__begin_[(int)v25];
            }
            BOOL v33 = (std::string::value_type *)p_unmatched->first.__i_;
            p_second = &v30->second;
            if (!v31) {
              p_second = &v37.__match_.__unmatched_.second;
            }
            unsigned int v35 = (std::string::value_type *)p_second->__i_;
            while (v33 != v35)
              std::string::push_back(a1, *v33++);
            goto LABEL_43;
          }
LABEL_41:
          LOBYTE(v16) = 36;
          goto LABEL_42;
        }
        if (v18 != 36)
        {
          if (v18 == 38)
          {
            long long v20 = (std::string::value_type *)v37.__match_.__matches_.__begin_->first.__i_;
            std::__wrap_iter<const char *>::iterator_type v19 = v37.__match_.__matches_.__begin_->second.__i_;
            while (v20 != v19)
              std::string::push_back(a1, *v20++);
            goto LABEL_43;
          }
          goto LABEL_28;
        }
        ++v15;
      }
LABEL_42:
      std::string::push_back(a1, v16);
      char v17 = (unsigned __int8 *)v15;
LABEL_43:
      int v15 = (const char *)(v17 + 1);
      if (v17 + 1 == v12) {
        goto LABEL_44;
      }
    }
  }
  while (i != a3.__i_)
    std::string::push_back(a1, *i++);
LABEL_47:
  if (v37.__match_.__matches_.__begin_)
  {
    v37.__match_.__matches_.__end_ = v37.__match_.__matches_.__begin_;
    operator delete(v37.__match_.__matches_.__begin_);
  }
}

void sub_1C5D634C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unique_ptr<void *,siri::dialogengine::UNumberFormatDeleter>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    return unum_close();
  }
  return result;
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(std::regex_iterator<std::__wrap_iter<const char *>, char> *this, std::__wrap_iter<const char *> __a, std::__wrap_iter<const char *> __b, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__re, std::regex_constants::match_flag_type __m)
{
  this->__begin_ = __a;
  this->__end_ = __b;
  this->__pregex_ = __re;
  this->__flags_ = match_default;
  *(_OWORD *)&this->__match_.__matches_.__begin_ = 0u;
  p_match = (char **)&this->__match_;
  this->__match_.__prefix_.first.__i_ = 0;
  this->__match_.__prefix_.second.__i_ = 0;
  this->__match_.__prefix_.matched = 0;
  this->__match_.__suffix_.first.__i_ = 0;
  this->__match_.__suffix_.second.__i_ = 0;
  this->__match_.__suffix_.matched = 0;
  this->__match_.__ready_ = 0;
  this->__match_.__position_start_.__i_ = 0;
  *(_OWORD *)&this->__match_.__matches_.__end_cap_.__value_ = 0u;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&this->__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                               + 1) = 0u;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  char v17 = 0;
  uint64_t v18 = 0;
  memset(__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)__re, (std::sub_match<const char *> *)__a.__i_, (std::sub_match<const char *> *)__b.__i_, __p, 0);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(p_match, (uint64_t)__a.__i_, (char *)__b.__i_, (uint64_t *)__p, 0);
  if (__p[0].__begin_) {
    operator delete(__p[0].__begin_);
  }
  return this;
}

void sub_1C5D635F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v12 = *v10;
  if (*v10)
  {
    *(void *)(v9 + 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  p_match = &this->__match_;
  std::vector<std::ssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  std::vector<std::string>::pointer end = p_match->__matches_.__end_;
  uint64_t v9 = &__x->__match_;
  std::vector<std::ssub_match>::pointer v7 = __x->__match_.__matches_.__begin_;
  double v8 = v9->__matches_.__end_;
  BOOL v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7) {
    return this->__begin_.__i_ == __x->__begin_.__i_
  }
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_iterator<std::__wrap_iter<const char *>, char> *this)
{
  p_match = &this->__match_;
  std::vector<std::ssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  int i = (int)p_match[-1].__position_start_.__i_;
  unsigned __int32 flags = i | 0x800;
  LODWORD(p_match[-1].__position_start_.__i_) = i | 0x800;
  if (p_match->__matches_.__end_ == begin) {
    p_unmatched = &p_match->__unmatched_;
  }
  else {
    p_unmatched = begin;
  }
  std::vector<std::ssub_match>::pointer v7 = (std::sub_match<const char *> *)p_unmatched->second.__i_;
  if ((std::sub_match<const char *> *)p_unmatched->first.__i_ != v7)
  {
LABEL_5:
    this->__flags_ = flags | 0x80;
    uint64_t v9 = (std::sub_match<const char *> *)this->__end_.__i_;
    pregex = this->__pregex_;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    char v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    char v21 = 0;
    char v22 = 0;
    uint64_t v23 = 0;
    memset(__p, 0, 41);
    char v10 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)pregex, v7, v9, __p, flags | 0x80);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)p_match, (uint64_t)v7, (char *)v9, (uint64_t *)__p, (flags & 0x800) != 0);
    if (__p[0].__begin_) {
      operator delete(__p[0].__begin_);
    }
    if ((v10 & 1) == 0)
    {
      std::vector<std::ssub_match>::pointer begin = p_match->__matches_.__begin_;
LABEL_14:
      if (begin)
      {
        this->__match_.__matches_.__end_ = begin;
        operator delete(begin);
        p_match->__matches_.__begin_ = 0;
        p_match->__matches_.__end_ = 0;
        p_match->__matches_.__end_cap_.__value_ = 0;
      }
      this->__match_.__ready_ = 0;
      *(_OWORD *)&p_match->__matches_.__begin_ = 0u;
      *(_OWORD *)&p_match->__matches_.__end_cap_.__value_ = 0u;
      *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&p_match->__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                                   + 1) = 0u;
      this->__match_.__prefix_.first.__i_ = 0;
      this->__match_.__prefix_.second.__i_ = 0;
      this->__match_.__prefix_.matched = 0;
      this->__match_.__suffix_.first.__i_ = 0;
      this->__match_.__suffix_.second.__i_ = 0;
      this->__match_.__suffix_.matched = 0;
      this->__match_.__position_start_.__i_ = 0;
      return this;
    }
    return this;
  }
  uint64_t v11 = (std::sub_match<const char *> *)this->__end_.__i_;
  if (v11 == v7) {
    goto LABEL_14;
  }
  uint64_t v12 = this->__pregex_;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  char v22 = 0;
  uint64_t v23 = 0;
  memset(__p, 0, 41);
  char v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v12, v7, v11, __p, i | 0x860u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)p_match, (uint64_t)v7, (char *)v11, (uint64_t *)__p, 1);
  if (__p[0].__begin_) {
    operator delete(__p[0].__begin_);
  }
  if ((v13 & 1) == 0)
  {
    std::vector<std::ssub_match>::pointer v7 = (std::sub_match<const char *> *)((char *)v7 + 1);
    unsigned __int32 flags = this->__flags_;
    goto LABEL_5;
  }
  return this;
}

void sub_1C5D63854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  uint64_t v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0) {
      goto LABEL_18;
    }
    int v18 = v9 | 0x80;
    uint64_t v19 = (char *)&a2->first + 1;
    if (v19 != (const char *)a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        int v20 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v19, (const char *)a3, (uint64_t *)this, v18, 0);
        std::vector<std::csub_match>::pointer begin = this->__begin_;
        std::vector<std::csub_match>::pointer end = this->__end_;
        if (v20) {
          goto LABEL_8;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), v11);
      }
      while (++v19 != (const char *)a3);
    }
    std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
    if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v18, 0))
    {
LABEL_18:
      uint64_t result = 0;
      this->__end_ = this->__begin_;
      return result;
    }
  }
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
LABEL_8:
  if (end == begin) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = begin;
  }
  first = (std::sub_match<const char *> *)v14->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)v14->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)v14->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(char **a1, uint64_t a2, char *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  char v13 = *a1;
  uint64_t v12 = a1[1];
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a1) >> 3);
  unint64_t v15 = v11 - v14;
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      uint64_t v12 = &v13[8 * ((a4[1] - *a4) >> 3)];
      a1[1] = v12;
    }
  }
  else
  {
    uint64_t v16 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - v12) >> 3) >= v15)
    {
      unint64_t v29 = &v12[24 * v15];
      uint64_t v30 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((v12 - *a1) >> 3);
      do
      {
        *(void *)uint64_t v12 = 0;
        *((void *)v12 + 1) = 0;
        v12[16] = 0;
        v12 += 24;
        v30 -= 24;
      }
      while (v30);
      a1[1] = v29;
      uint64_t v12 = v29;
    }
    else
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v13) >> 3);
      uint64_t v18 = 2 * v17;
      if (2 * v17 <= v11) {
        uint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v18;
      }
      int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::string>>>(v19);
      char v22 = &v20[24 * v14];
      uint64_t v12 = &v20[24 * v11];
      uint64_t v23 = v22;
      uint64_t v24 = 24 * v11 - 24 * v14;
      do
      {
        *(void *)uint64_t v23 = 0;
        *((void *)v23 + 1) = 0;
        v23[16] = 0;
        v23 += 24;
        v24 -= 24;
      }
      while (v24);
      unint64_t v25 = &v20[24 * v21];
      unsigned int v27 = *a1;
      uint64_t v26 = a1[1];
      if (v26 != *a1)
      {
        do
        {
          long long v28 = *(_OWORD *)(v26 - 24);
          *((void *)v22 - 1) = *((void *)v26 - 1);
          *(_OWORD *)(v22 - 24) = v28;
          v22 -= 24;
          v26 -= 24;
        }
        while (v26 != v27);
        uint64_t v26 = *a1;
      }
      *a1 = v22;
      a1[1] = v12;
      a1[2] = v25;
      if (v26)
      {
        operator delete(v26);
        uint64_t v12 = a1[1];
      }
    }
  }
  BOOL v31 = *a1;
  if (v12 != *a1)
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    uint64_t v35 = *a4;
    uint64_t v34 = a4[1];
    do
    {
      unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v35) >> 3);
      std::regex_iterator<std::__wrap_iter<const char *>, char> v37 = (void *)(v35 + v32);
      if (v36 <= v33) {
        std::string v38 = a4 + 3;
      }
      else {
        std::string v38 = v37;
      }
      *(void *)&v31[v32] = a2 + *v38 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v33) {
        std::string v39 = a4 + 3;
      }
      else {
        std::string v39 = (uint64_t *)(*a4 + v32);
      }
      *(void *)&(*a1)[v32 + 8] = a2 + v39[1] - v10;
      uint64_t v35 = *a4;
      uint64_t v34 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v34 - *a4) >> 3) <= v33) {
        uint64_t v40 = a4 + 3;
      }
      else {
        uint64_t v40 = (uint64_t *)(*a4 + v32);
      }
      char v41 = *((unsigned char *)v40 + 16);
      BOOL v31 = *a1;
      std::string v42 = a1[1];
      (*a1)[v32 + 16] = v41;
      ++v33;
      v32 += 24;
    }
    while (v33 < 0xAAAAAAAAAAAAAAABLL * ((v42 - v31) >> 3));
  }
  a1[3] = a3;
  a1[4] = a3;
  *((unsigned char *)a1 + 40) = 0;
  unint64_t v43 = (char *)(a2 + a4[6] - v10);
  a1[6] = v43;
  a1[7] = (char *)(a2 + a4[7] - v10);
  *((unsigned char *)a1 + 64) = *((unsigned char *)a4 + 64);
  a1[9] = (char *)(a2 + a4[9] - v10);
  a1[10] = (char *)(a2 + a4[10] - v10);
  *((unsigned char *)a1 + 88) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    a1[13] = v43;
  }
  *((unsigned char *)a1 + 96) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7 = a5;
  int v9 = a3;
  uint64_t v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
  {
    v164 = (const char *)(a3 - a2);
    __int16 v163 = a5;
    if (*(_DWORD *)(a1 + 28))
    {
      v165[0] = 0;
      v165[1] = 0;
      *(void *)&long long v166 = 0;
      uint64_t v12 = *(void *)(a1 + 40);
      if (v12)
      {
        __x.first = a3;
        __x.second = a3;
        __x.matched = 0;
        *(_DWORD *)v168 = 0;
        memset(&v168[8], 0, 48);
        *(_OWORD *)std::string __p = 0u;
        memset(v170, 0, 21);
        v165[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v165, (uint64_t)v168);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        if (*(void *)&v168[32]) {
          operator delete(*(void **)&v168[32]);
        }
        v150 = a4;
        char v13 = v165[1];
        *((_DWORD *)v165[1] - 24) = 0;
        *(v13 - 11) = v10;
        *(v13 - 10) = v10;
        v160 = v9;
        *(v13 - 9) = v9;
        std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 8), *(unsigned int *)(a1 + 28), &__x);
        std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v165[1] - 40), *(unsigned int *)(a1 + 32));
        v156 = 0;
        v158 = 0;
        uint64_t v152 = 0;
        uint64_t v153 = 0;
        v154 = 0;
        v155 = 0;
        unint64_t v14 = 0;
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v17 = v165[1];
        *((void *)v165[1] - 2) = v12;
        *(v17 - 2) = v7;
        *((unsigned char *)v17 - 4) = a6;
        do
        {
          BOOL v18 = (++v16 & 0xFFF) != 0 || (int)(v16 >> 12) < (int)v164;
          if (!v18) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
          }
          int v20 = v17 - 4;
          uint64_t v19 = *((void *)v17 - 2);
          uint64_t v21 = v17 - 24;
          if (v19) {
            (*(void (**)(uint64_t, _DWORD *))(*(void *)v19 + 16))(v19, v17 - 24);
          }
          switch(*(_DWORD *)v21)
          {
            case 0xFFFFFC18:
              char v22 = (const char *)*((void *)v17 - 10);
              if ((v163 & 0x20) != 0 && v22 == v10 || (v163 & 0x1000) != 0 && v22 != v160) {
                goto LABEL_21;
              }
              if ((v15 & ((uint64_t)v14 >= (uint64_t)&v22[-*((void *)v17 - 11)])) != 0)
              {
                unint64_t v29 = v158;
                uint64_t v30 = v154;
              }
              else
              {
                uint64_t v32 = (long long *)*((void *)v17 - 8);
                BOOL v31 = (long long *)*((void *)v17 - 7);
                unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v32) >> 3);
                uint64_t v34 = v158;
                v149 = &v22[-*((void *)v17 - 11)];
                if (0xAAAAAAAAAAAAAAABLL * ((v153 - (uint64_t)v155) >> 3) >= v33)
                {
                  if (0xAAAAAAAAAAAAAAABLL * ((v158 - v155) >> 3) >= v33)
                  {
                    if (v32 == v31)
                    {
                      uint64_t v46 = v155;
                      uint64_t v47 = v155;
                    }
                    else
                    {
                      uint64_t v46 = v155;
                      uint64_t v47 = v155;
                      do
                      {
                        *(_OWORD *)uint64_t v47 = *v32;
                        v47[16] = *((unsigned char *)v32 + 16);
                        v47 += 24;
                        uint64_t v32 = (long long *)((char *)v32 + 24);
                      }
                      while (v32 != v31);
                    }
                    int64_t v45 = v47 - v46;
                    uint64_t v34 = v46;
                  }
                  else
                  {
                    char v41 = (long long *)((char *)v32 + 8 * ((v158 - v155) >> 3));
                    if (v158 != v155)
                    {
                      std::string v42 = v155;
                      do
                      {
                        *(_OWORD *)std::string v42 = *v32;
                        v42[16] = *((unsigned char *)v32 + 16);
                        uint64_t v32 = (long long *)((char *)v32 + 24);
                        v42 += 24;
                      }
                      while (v32 != v41);
                    }
                    unint64_t v43 = v158;
                    while (v41 != v31)
                    {
                      long long v44 = *v41;
                      *((void *)v43 + 2) = *((void *)v41 + 2);
                      *(_OWORD *)unint64_t v43 = v44;
                      v43 += 24;
                      char v41 = (long long *)((char *)v41 + 24);
                    }
                    int64_t v45 = v43 - v158;
                  }
                }
                else
                {
                  if (v155)
                  {
                    operator delete(v155);
                    uint64_t v153 = 0;
                  }
                  if (v33 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_220;
                  }
                  unint64_t v35 = 0x5555555555555556 * (v153 >> 3);
                  if (v35 <= v33) {
                    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v32) >> 3);
                  }
                  unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (v153 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v35;
                  if (v36 > 0xAAAAAAAAAAAAAAALL) {
LABEL_220:
                  }
                    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                  std::regex_iterator<std::__wrap_iter<const char *>, char> v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::string>>>(v36);
                  uint64_t v34 = v37;
                  std::string v39 = v37;
                  while (v32 != v31)
                  {
                    long long v40 = *v32;
                    *((void *)v39 + 2) = *((void *)v32 + 2);
                    *(_OWORD *)std::string v39 = v40;
                    v39 += 24;
                    uint64_t v32 = (long long *)((char *)v32 + 24);
                  }
                  uint64_t v153 = (uint64_t)&v37[24 * v38];
                  int64_t v45 = v39 - v37;
                  v155 = v37;
                }
                uint64_t v49 = (char *)*((void *)v17 - 5);
                uint64_t v48 = (char *)*((void *)v17 - 4);
                unint64_t v50 = (v48 - v49) >> 4;
                if (v50 <= (v152 - (uint64_t)v156) >> 4)
                {
                  unint64_t v57 = (v154 - v156) >> 4;
                  if (v57 >= v50)
                  {
                    if (v49 == v48)
                    {
                      long long v63 = v156;
                      uint64_t v62 = v156;
                      unint64_t v14 = v149;
                    }
                    else
                    {
                      uint64_t v62 = v156;
                      unint64_t v14 = v149;
                      do
                      {
                        *(void *)uint64_t v62 = *(void *)v49;
                        *((void *)v62 + 1) = *((void *)v49 + 1);
                        v62 += 16;
                        v49 += 16;
                      }
                      while (v49 != v48);
                      long long v63 = v156;
                    }
                    unint64_t v64 = (char *)(v62 - v63);
                    uint64_t v53 = v63;
                  }
                  else
                  {
                    uint64_t v58 = &v49[16 * v57];
                    if (v154 != v156)
                    {
                      int v59 = v156;
                      do
                      {
                        *(void *)int v59 = *(void *)v49;
                        *((void *)v59 + 1) = *((void *)v49 + 1);
                        v49 += 16;
                        v59 += 16;
                      }
                      while (v49 != v58);
                    }
                    unint64_t v14 = v149;
                    if (v58 == v48)
                    {
                      uint64_t v53 = v154;
                      char v60 = v154;
                    }
                    else
                    {
                      uint64_t v53 = v154;
                      char v60 = v154;
                      do
                      {
                        long long v61 = *(_OWORD *)v58;
                        v58 += 16;
                        *(_OWORD *)char v60 = v61;
                        v60 += 16;
                      }
                      while (v58 != v48);
                    }
                    unint64_t v64 = (char *)(v60 - v53);
                  }
                }
                else
                {
                  if (v156)
                  {
                    operator delete(v156);
                    uint64_t v152 = 0;
                  }
                  if (v48 - v49 < 0) {
                    goto LABEL_219;
                  }
                  uint64_t v51 = v152 >> 3;
                  if (v152 >> 3 <= v50) {
                    uint64_t v51 = (v48 - v49) >> 4;
                  }
                  unint64_t v52 = (unint64_t)v152 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v51;
                  if (v52 >> 60) {
LABEL_219:
                  }
                    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                  uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v52);
                  int v55 = v53;
                  if (v49 == v48)
                  {
                    unint64_t v14 = v149;
                  }
                  else
                  {
                    unint64_t v14 = v149;
                    do
                    {
                      long long v56 = *(_OWORD *)v49;
                      v49 += 16;
                      *(_OWORD *)int v55 = v56;
                      v55 += 16;
                    }
                    while (v49 != v48);
                  }
                  uint64_t v152 = (uint64_t)&v53[16 * v54];
                  unint64_t v64 = (char *)(v55 - v53);
                  v156 = v53;
                }
                unint64_t v29 = &v34[v45];
                uint64_t v30 = &v64[(void)v53];
              }
              v158 = v29;
              long long v65 = v165[1];
              v154 = v30;
              if (v14 == v164)
              {
                int64_t v66 = v165[0];
                while (v65 != v66)
                {
                  v65 -= 12;
                  std::allocator<std::__state<char>>::destroy[abi:ne180100](v65);
                }
                v165[1] = v66;
                char v15 = 1;
                unint64_t v14 = v164;
              }
              else
              {
                int64_t v67 = (char *)v165[1] - 96;
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)v165[1] - 12);
                v165[1] = v67;
                char v15 = 1;
              }
              break;
            case 0xFFFFFC1D:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              break;
            case 0xFFFFFC1F:
LABEL_21:
              uint64_t v23 = (char *)v165[1] - 96;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)v165[1] - 12);
              v165[1] = v23;
              break;
            case 0xFFFFFC20:
              long long v24 = *((_OWORD *)v17 - 5);
              *(_OWORD *)v168 = *v21;
              *(_OWORD *)&v168[16] = v24;
              memset(&v168[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v168[32], *((long long **)v17 - 8), *((long long **)v17 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v17 - 7) - *((void *)v17 - 8)) >> 3));
              __p[0] = 0;
              __p[1] = 0;
              v170[0] = 0;
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v17 - 5), *((long long **)v17 - 4), (uint64_t)(*((void *)v17 - 4) - *((void *)v17 - 5)) >> 4);
              uint64_t v25 = *v20;
              *(void *)((char *)&v170[1] + 5) = *(void *)((char *)v17 - 11);
              v170[1] = v25;
              (*(void (**)(void, uint64_t, _DWORD *))(*(void *)*v20 + 24))(*v20, 1, v17 - 24);
              (*(void (**)(void, void, unsigned char *))(*(void *)v170[1] + 24))(v170[1], 0, v168);
              uint64_t v26 = (char *)v165[1];
              if (v165[1] >= (void *)v166)
              {
                v165[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v165, (uint64_t)v168);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
              }
              else
              {
                long long v27 = *(_OWORD *)&v168[16];
                *(_OWORD *)v165[1] = *(_OWORD *)v168;
                *((_OWORD *)v26 + 1) = v27;
                *((void *)v26 + 4) = 0;
                *((void *)v26 + 5) = 0;
                *((void *)v26 + 6) = 0;
                *((void *)v26 + 7) = 0;
                *((_OWORD *)v26 + 2) = *(_OWORD *)&v168[32];
                *((void *)v26 + 6) = *(void *)&v168[48];
                memset(&v168[32], 0, 24);
                *((void *)v26 + 8) = 0;
                *((void *)v26 + 9) = 0;
                *(_OWORD *)(v26 + 56) = *(_OWORD *)__p;
                *((void *)v26 + 9) = v170[0];
                __p[0] = 0;
                __p[1] = 0;
                v170[0] = 0;
                uint64_t v28 = v170[1];
                *(void *)(v26 + 85) = *(void *)((char *)&v170[1] + 5);
                *((void *)v26 + 10) = v28;
                v165[1] = v26 + 96;
              }
              if (*(void *)&v168[32])
              {
                *(void *)&v168[40] = *(void *)&v168[32];
                operator delete(*(void **)&v168[32]);
              }
              break;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
          unint64_t v17 = v165[1];
        }
        while (v165[0] != v165[1]);
        if (v15)
        {
          uint64_t v69 = *v150;
          *(void *)uint64_t v69 = v10;
          *(void *)(v69 + 8) = &v14[(void)v10];
          *(unsigned char *)(v69 + 16) = 1;
          unint64_t v70 = v155;
          if (v158 != v155)
          {
            unint64_t v71 = v155 + 16;
            unsigned int v72 = 1;
            do
            {
              uint64_t v73 = v69 + 24 * v72;
              *(_OWORD *)uint64_t v73 = *((_OWORD *)v71 - 1);
              char v74 = *v71;
              v71 += 24;
              *(unsigned char *)(v73 + 16) = v74;
              BOOL v18 = 0xAAAAAAAAAAAAAAABLL * ((v158 - v155) >> 3) > v72++;
            }
            while (v18);
          }
          uint64_t v75 = 1;
        }
        else
        {
          uint64_t v75 = 0;
          unint64_t v70 = v155;
        }
        if (v156) {
          operator delete(v156);
        }
        if (v70) {
          operator delete(v70);
        }
      }
      else
      {
        uint64_t v75 = 0;
      }
      *(void *)v168 = v165;
      std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v168);
    }
    else
    {
      long long v166 = 0u;
      int64x2_t v167 = 0u;
      *(_OWORD *)v165 = 0u;
      uint64_t v75 = *(void *)(a1 + 40);
      if (v75)
      {
        *(_DWORD *)v168 = 0;
        memset(&v168[8], 0, 48);
        *(_OWORD *)std::string __p = 0uLL;
        memset(v170, 0, 21);
        std::deque<std::__state<char>>::push_back(v165, (uint64_t)v168);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        if (*(void *)&v168[32]) {
          operator delete(*(void **)&v168[32]);
        }
        v151 = a4;
        uint64_t v76 = v165[1];
        unint64_t v77 = v167.i64[1] + v167.i64[0] - 1;
        unint64_t v78 = v77 / 0x2A;
        uint64_t v79 = *((void *)v165[1] + v77 / 0x2A);
        unint64_t v80 = 3 * (v77 % 0x2A);
        uint64_t v81 = v79 + 32 * v80;
        *(_DWORD *)uint64_t v81 = 0;
        *(void *)(v81 + 8) = v10;
        *(void *)(v76[v78] + 32 * v80 + 16) = v10;
        *(void *)(v76[v78] + 32 * v80 + 24) = v9;
        std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v76[v78] + 32 * v80 + 56), *(unsigned int *)(a1 + 32));
        char v159 = 0;
        unsigned int v82 = 0;
        uint64_t v83 = v167.i64[1];
        uint64_t v84 = v165[1];
        unint64_t v85 = v167.i64[1] + v167.i64[0] - 1;
        unint64_t v86 = v85 / 0x2A;
        unint64_t v87 = 3 * (v85 % 0x2A);
        *(void *)(*((void *)v165[1] + v86) + 32 * v87 + 80) = v75;
        uint64_t v88 = v84[v86] + 32 * v87;
        *(_DWORD *)(v88 + 88) = v7;
        *(unsigned char *)(v88 + 92) = a6;
        v157 = 0;
        while (2)
        {
          if ((++v82 & 0xFFF) == 0 && (int)(v82 >> 12) >= (int)v164) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
          }
          unint64_t v90 = v83 + v167.i64[0] - 1;
          uint64_t v91 = *((void *)v165[1] + v90 / 0x2A);
          unint64_t v92 = v90 % 0x2A;
          uint64_t v93 = v91 + 96 * (v90 % 0x2A);
          long long v95 = (void *)(v93 + 80);
          uint64_t v94 = *(void *)(v93 + 80);
          if (v94) {
            (*(void (**)(uint64_t, unint64_t))(*(void *)v94 + 16))(v94, v91 + 96 * v92);
          }
          switch(*(_DWORD *)v93)
          {
            case 0xFFFFFC18:
              uint64_t v96 = *(const char **)(v91 + 96 * v92 + 16);
              BOOL v97 = (v7 & 0x1000) == 0 || v96 == v9;
              char v98 = v97;
              BOOL v99 = v96 != v10 || (v7 & 0x20) == 0;
              if (!v99 || (v98 & 1) == 0) {
                goto LABEL_203;
              }
              uint64_t v100 = (uint64_t)&v96[-*(void *)(v91 + 96 * v92 + 8)];
              unint64_t v101 = v157;
              if ((v159 & ((uint64_t)v157 >= v100)) == 0) {
                unint64_t v101 = (char *)v100;
              }
              if (v101 != v164)
              {
                v157 = v101;
                std::deque<std::__state<char>>::pop_back(v165);
                char v159 = 1;
                goto LABEL_204;
              }
              BOOL v102 = (void **)v165[1];
              long long v103 = (unsigned char *)v166;
              if ((void *)v166 == v165[1])
              {
                long long v103 = v165[1];
              }
              else
              {
                std::string v104 = v10;
                uint64_t v105 = (char *)v165[1] + 8 * (v167.i64[0] / 0x2AuLL);
                unint64_t v106 = (void *)(*v105 + 96 * (v167.i64[0] % 0x2AuLL));
                unint64_t v107 = *((void *)v165[1] + (v167.i64[1] + v167.i64[0]) / 0x2AuLL)
                     + 96 * ((v167.i64[1] + v167.i64[0]) % 0x2AuLL);
                if (v106 != (void *)v107)
                {
                  do
                  {
                    std::allocator<std::__state<char>>::destroy[abi:ne180100](v106);
                    v106 += 12;
                    if ((void *)((char *)v106 - *v105) == (void *)4032)
                    {
                      long long v108 = (void *)v105[1];
                      ++v105;
                      unint64_t v106 = v108;
                    }
                  }
                  while (v106 != (void *)v107);
                  BOOL v102 = (void **)v165[1];
                  long long v103 = (unsigned char *)v166;
                }
                uint64_t v10 = v104;
              }
              v167.i64[1] = 0;
              unint64_t v139 = v103 - (unsigned char *)v102;
              if (v139 >= 0x11)
              {
                do
                {
                  operator delete(*v102);
                  BOOL v102 = (void **)((char *)v165[1] + 8);
                  v165[1] = v102;
                  unint64_t v139 = v166 - (void)v102;
                }
                while ((void)v166 - (void)v102 > 0x10uLL);
              }
              if (v139 >> 3 == 1)
              {
                uint64_t v140 = 21;
              }
              else
              {
                if (v139 >> 3 != 2) {
                  goto LABEL_191;
                }
                uint64_t v140 = 42;
              }
              v167.i64[0] = v140;
LABEL_191:
              char v159 = 1;
              v157 = (char *)v164;
LABEL_204:
              uint64_t v83 = v167.i64[1];
              if (v167.i64[1]) {
                continue;
              }
              if (v159)
              {
                uint64_t v148 = *v151;
                *(void *)uint64_t v148 = v10;
                *(void *)(v148 + 8) = &v157[(void)v10];
                uint64_t v75 = 1;
                *(unsigned char *)(v148 + 16) = 1;
              }
              else
              {
                uint64_t v75 = 0;
              }
              break;
            case 0xFFFFFC19:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              goto LABEL_204;
            case 0xFFFFFC1D:
              unint64_t v109 = v167.i64[0];
              long long v110 = (char *)v165[1];
              uint64_t v111 = (char *)v166;
              if (!v167.i64[0])
              {
                unint64_t v114 = (uint64_t)(v166 - (unint64_t)v165[1]) >> 3;
                uint64_t v115 = 42 * v114 - 1;
                if ((void *)v166 == v165[1]) {
                  uint64_t v115 = 0;
                }
                if ((unint64_t)(v115 - v167.i64[1]) < 0x2A)
                {
                  if (v114 >= (uint64_t)(*((void *)&v166 + 1) - (unint64_t)v165[0]) >> 3)
                  {
                    if (*((void **)&v166 + 1) == v165[0]) {
                      unint64_t v116 = 1;
                    }
                    else {
                      unint64_t v116 = (uint64_t)(*((void *)&v166 + 1) - (unint64_t)v165[0]) >> 2;
                    }
                    *(void *)&v168[32] = (char *)&v166 + 8;
                    *(void *)v168 = std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v116);
                    *(void *)&v168[8] = *(void *)v168;
                    *(void *)&v168[16] = *(void *)v168;
                    *(void *)&v168[24] = *(void *)v168 + 8 * v117;
                    v162 = v10;
                    __x.first = (const char *)operator new(0xFC0uLL);
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v168, &__x);
                    v118 = (uint64_t *)v165[1];
                    v119 = *(char **)&v168[16];
                    for (int i = v9; v118 != (uint64_t *)v166; *(void *)&v168[16] += 8)
                    {
                      if (v119 == *(char **)&v168[24])
                      {
                        v120 = *(char **)&v168[8];
                        v121 = *(void **)v168;
                        if (*(void *)&v168[8] <= *(void *)v168)
                        {
                          if (v119 == *(char **)v168) {
                            unint64_t v128 = 1;
                          }
                          else {
                            unint64_t v128 = (uint64_t)&v119[-*(void *)v168] >> 2;
                          }
                          v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v128);
                          v131 = &v129[8 * (v128 >> 2)];
                          uint64_t v132 = v119 - v120;
                          BOOL v97 = v119 == v120;
                          v119 = v131;
                          int v9 = i;
                          if (!v97)
                          {
                            v119 = &v131[v132 & 0xFFFFFFFFFFFFFFF8];
                            uint64_t v133 = 8 * (v132 >> 3);
                            v134 = v131;
                            do
                            {
                              uint64_t v135 = *(void *)v120;
                              v120 += 8;
                              *(void *)v134 = v135;
                              v134 += 8;
                              v133 -= 8;
                            }
                            while (v133);
                          }
                          *(void *)v168 = v129;
                          *(void *)&v168[8] = v131;
                          *(void *)&v168[16] = v119;
                          *(void *)&v168[24] = &v129[8 * v130];
                          if (v121) {
                            operator delete(v121);
                          }
                        }
                        else
                        {
                          uint64_t v122 = (uint64_t)(*(void *)&v168[8] - *(void *)v168) >> 3;
                          if (v122 >= -1) {
                            uint64_t v123 = v122 + 1;
                          }
                          else {
                            uint64_t v123 = v122 + 2;
                          }
                          uint64_t v124 = *(void *)&v168[8] - 8 * (v123 >> 1);
                          size_t v125 = (size_t)&v119[-*(void *)&v168[8]];
                          if (v119 != *(char **)&v168[8])
                          {
                            v126 = (void *)(*(void *)&v168[8] - 8 * (v123 >> 1));
                            memmove(v126, *(const void **)&v168[8], v125);
                            uint64_t v124 = (uint64_t)v126;
                            v119 = v120;
                          }
                          v127 = &v119[-8 * (v123 >> 1)];
                          v119 = (char *)(v124 + v125);
                          *(void *)&v168[8] = v127;
                          *(void *)&v168[16] = v124 + v125;
                          int v9 = i;
                        }
                      }
                      uint64_t v136 = *v118++;
                      *(void *)v119 = v136;
                      v119 = (char *)(*(void *)&v168[16] + 8);
                    }
                    v137 = v165[0];
                    *(_OWORD *)v165 = *(_OWORD *)v168;
                    *(void *)&long long v166 = v119;
                    *((void *)&v166 + 1) = *(void *)&v168[24];
                    uint64_t v138 = 21;
                    if (&v119[-*(void *)&v168[8]] != (char *)8) {
                      uint64_t v138 = v167.i64[0] + 42;
                    }
                    v167.i64[0] = v138;
                    uint64_t v10 = v162;
                    if (v137) {
                      operator delete(v137);
                    }
                    LOWORD(v7) = v163;
                  }
                  else
                  {
                    if (v165[1] == v165[0])
                    {
                      *(void *)v168 = operator new(0xFC0uLL);
                      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v165, v168);
                      *(void *)v168 = *(void *)(v166 - 8);
                      *(void *)&long long v166 = v166 - 8;
                    }
                    else
                    {
                      *(void *)v168 = operator new(0xFC0uLL);
                    }
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v165, v168);
                    uint64_t v141 = 21;
                    if ((void)v166 - (unint64_t)v165[1] != 8) {
                      uint64_t v141 = v167.i64[0] + 42;
                    }
                    v167.i64[0] = v141;
                  }
                }
                else
                {
                  v167.i64[0] = 42;
                  *(void *)v168 = *(void *)(v166 - 8);
                  *(void *)&long long v166 = v166 - 8;
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v165, v168);
                }
                unint64_t v109 = v167.i64[0];
                long long v110 = (char *)v165[1];
                uint64_t v111 = (char *)v166;
              }
              v142 = &v110[8 * (v109 / 0x2A)];
              unint64_t v143 = *(void *)v142 + 96 * (v109 % 0x2A);
              if (v111 == v110) {
                uint64_t v144 = 0;
              }
              else {
                uint64_t v144 = v143;
              }
              if (v144 == *(void *)v142) {
                uint64_t v144 = *((void *)v142 - 1) + 4032;
              }
              long long v145 = *(_OWORD *)(v93 + 16);
              *(_OWORD *)(v144 - 96) = *(_OWORD *)v93;
              *(_OWORD *)(v144 - 80) = v145;
              uint64_t v146 = v91 + 96 * v92;
              *(void *)(v144 - 56) = 0;
              *(void *)(v144 - 48) = 0;
              *(void *)(v144 - 64) = 0;
              *(_OWORD *)(v144 - 64) = *(_OWORD *)(v146 + 32);
              *(void *)(v144 - 48) = *(void *)(v146 + 48);
              *(void *)(v146 + 32) = 0;
              *(void *)(v146 + 40) = 0;
              *(void *)(v146 + 48) = 0;
              *(void *)(v144 - 40) = 0;
              *(void *)(v144 - 32) = 0;
              *(void *)(v144 - 24) = 0;
              *(_OWORD *)(v144 - 40) = *(_OWORD *)(v146 + 56);
              *(void *)(v144 - 24) = *(void *)(v146 + 72);
              *(void *)(v146 + 56) = 0;
              *(void *)(v146 + 64) = 0;
              *(void *)(v146 + 72) = 0;
              uint64_t v147 = *v95;
              *(void *)(v144 - 11) = *(void *)(v93 + 85);
              *(void *)(v144 - 16) = v147;
              int64x2_t v167 = vaddq_s64(v167, (int64x2_t)xmmword_1C6163490);
              goto LABEL_203;
            case 0xFFFFFC1F:
LABEL_203:
              std::deque<std::__state<char>>::pop_back(v165);
              goto LABEL_204;
            case 0xFFFFFC20:
              long long v112 = *(_OWORD *)(v93 + 16);
              *(_OWORD *)v168 = *(_OWORD *)v93;
              *(_OWORD *)&v168[16] = v112;
              memset(&v168[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v168[32], *(long long **)(v91 + 96 * v92 + 32), *(long long **)(v91 + 96 * v92 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v91 + 96 * v92 + 40) - *(void *)(v91 + 96 * v92 + 32)) >> 3));
              __p[0] = 0;
              __p[1] = 0;
              v170[0] = 0;
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v91 + 96 * v92 + 56), *(long long **)(v91 + 96 * v92 + 64), (uint64_t)(*(void *)(v91 + 96 * v92 + 64) - *(void *)(v91 + 96 * v92 + 56)) >> 4);
              uint64_t v113 = *v95;
              *(void *)((char *)&v170[1] + 5) = *(void *)(v93 + 85);
              v170[1] = v113;
              (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v95 + 24))(*v95, 1, v93);
              (*(void (**)(void, void, unsigned char *))(*(void *)v170[1] + 24))(v170[1], 0, v168);
              std::deque<std::__state<char>>::push_back(v165, (uint64_t)v168);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              if (*(void *)&v168[32])
              {
                *(void *)&v168[40] = *(void *)&v168[32];
                operator delete(*(void **)&v168[32]);
              }
              goto LABEL_204;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
          break;
        }
      }
      std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v165);
    }
    return v75;
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
}

void sub_1C5D64D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  operator delete(v37);
  if (__p) {
    operator delete(__p);
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      BOOL v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      uint64_t v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    uint64_t v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::string>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  long long v44 = 0;
  int64_t v45 = 0;
  unint64_t v46 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)long long v40 = 0;
    memset(&v40[8], 0, 48);
    *(_OWORD *)std::string __p = 0u;
    memset(v42, 0, 21);
    int64_t v45 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v44, (uint64_t)v40);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (*(void *)&v40[32]) {
      operator delete(*(void **)&v40[32]);
    }
    uint64_t v38 = a4;
    std::vector<std::csub_match>::size_type v13 = v45;
    *((_DWORD *)v45 - 24) = 0;
    *((void *)v13 - 11) = a2;
    *((void *)v13 - 10) = a2;
    *((void *)v13 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v45 - 40), *(unsigned int *)(a1 + 32));
    std::pair<const char *, const char *> v14 = v45;
    *((void *)v45 - 2) = v6;
    std::string v39 = a3;
    signed int v15 = a3 - a2;
    *((_DWORD *)v14 - 2) = a5;
    *(v14 - 4) = a6;
    unsigned int v16 = 1;
    while (2)
    {
      if ((v16 & 0xFFF) != 0 || (int)(v16 >> 12) < v15)
      {
        BOOL v18 = v14 - 16;
        uint64_t v17 = *((void *)v14 - 2);
        uint64_t v19 = v14 - 96;
        if (v17) {
          (*(void (**)(uint64_t, char *))(*(void *)v17 + 16))(v17, v14 - 96);
        }
        switch(*(_DWORD *)v19)
        {
          case 0xFFFFFC18:
            std::vector<std::csub_match>::size_type v20 = (const char *)*((void *)v14 - 10);
            if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v39) {
              goto LABEL_16;
            }
            uint64_t v29 = *v38;
            *(void *)uint64_t v29 = a2;
            *(void *)(v29 + 8) = v20;
            *(unsigned char *)(v29 + 16) = 1;
            uint64_t v30 = *((void *)v14 - 8);
            uint64_t v31 = *((void *)v14 - 7) - v30;
            if (v31)
            {
              unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
              unint64_t v33 = (unsigned char *)(v30 + 16);
              unsigned int v34 = 1;
              do
              {
                uint64_t v35 = v29 + 24 * v34;
                *(_OWORD *)uint64_t v35 = *((_OWORD *)v33 - 1);
                char v36 = *v33;
                v33 += 24;
                *(unsigned char *)(v35 + 16) = v36;
              }
              while (v32 > v34++);
            }
            uint64_t v27 = 1;
            goto LABEL_25;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_23;
          case 0xFFFFFC1F:
LABEL_16:
            std::pair<const char *, const char *> v21 = v45 - 96;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)v45 - 12);
            int64_t v45 = v21;
            goto LABEL_23;
          case 0xFFFFFC20:
            long long v22 = *((_OWORD *)v14 - 5);
            *(_OWORD *)long long v40 = *(_OWORD *)v19;
            *(_OWORD *)&v40[16] = v22;
            memset(&v40[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v40[32], *((long long **)v14 - 8), *((long long **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v14 - 7) - *((void *)v14 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v42[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v14 - 5), *((long long **)v14 - 4), (uint64_t)(*((void *)v14 - 4) - *((void *)v14 - 5)) >> 4);
            uint64_t v23 = *(void *)v18;
            *(void *)((char *)&v42[1] + 5) = *(void *)(v14 - 11);
            v42[1] = v23;
            (*(void (**)(void, uint64_t, char *))(**(void **)v18 + 24))(*(void *)v18, 1, v14 - 96);
            (*(void (**)(void, void, unsigned char *))(*(void *)v42[1] + 24))(v42[1], 0, v40);
            long long v24 = v45;
            if ((unint64_t)v45 >= v46)
            {
              int64_t v45 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v44, (uint64_t)v40);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v25 = *(_OWORD *)&v40[16];
              *(_OWORD *)int64_t v45 = *(_OWORD *)v40;
              *((_OWORD *)v24 + 1) = v25;
              *((void *)v24 + 4) = 0;
              *((void *)v24 + 5) = 0;
              *((void *)v24 + 6) = 0;
              *((void *)v24 + 7) = 0;
              *((_OWORD *)v24 + 2) = *(_OWORD *)&v40[32];
              *((void *)v24 + 6) = *(void *)&v40[48];
              memset(&v40[32], 0, 24);
              *((void *)v24 + 8) = 0;
              *((void *)v24 + 9) = 0;
              *(_OWORD *)(v24 + 56) = *(_OWORD *)__p;
              *((void *)v24 + 9) = v42[0];
              __p[0] = 0;
              __p[1] = 0;
              v42[0] = 0;
              uint64_t v26 = v42[1];
              *(void *)(v24 + 85) = *(void *)((char *)&v42[1] + 5);
              *((void *)v24 + 10) = v26;
              int64_t v45 = v24 + 96;
            }
            if (*(void *)&v40[32])
            {
              *(void *)&v40[40] = *(void *)&v40[32];
              operator delete(*(void **)&v40[32]);
            }
LABEL_23:
            std::pair<const char *, const char *> v14 = v45;
            ++v16;
            if (v44 == v45) {
              goto LABEL_24;
            }
            continue;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
      }
      break;
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
  }
LABEL_24:
  uint64_t v27 = 0;
LABEL_25:
  *(void *)long long v40 = &v44;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  return v27;
}

void sub_1C5D65480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__state<char>::~__state(&a11);
  a11 = v16 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v7 = (char *)operator new(96 * v6);
  }
  else
  {
    int v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::csub_match>::size_type v9 = &v7[96 * v2];
  *(_OWORD *)std::vector<std::csub_match>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<std::csub_match>::size_type v13 = v9 + 96;
  std::pair<const char *, const char *> v14 = (char *)*a1;
  signed int v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = &v9[v16];
      BOOL v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    signed int v15 = (char *)*a1;
    std::pair<const char *, const char *> v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v21);
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  unint64_t v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      long long v25 = &end[v8];
      std::vector<std::csub_match>::size_type v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        std::pair<const char *, const char *> v27 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      std::vector<std::csub_match>::size_type v12 = 2 * v11;
      if (2 * v11 <= __sz) {
        std::vector<std::csub_match>::size_type v12 = __sz;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      std::pair<const char *, const char *> v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::string>>>(v13);
      uint64_t v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      uint64_t v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      BOOL v18 = v16;
      std::vector<std::csub_match>::size_type v19 = 24 * __sz - 24 * v7;
      do
      {
        std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *BOOL v18 = v20;
        BOOL v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      std::pair<const char *, const char *> v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      std::vector<std::csub_match>::pointer v23 = this->__begin_;
      long long v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          std::pair<const char *, const char *> v24 = v22[-1].std::pair<const char *, const char *>;
          *(void *)&v16[-1].matched = *(void *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        long long v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
      {
        operator delete(v22);
      }
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    BOOL v18 = &begin[__sz];
    goto LABEL_19;
  }
  std::vector<std::pair<unsigned long, const char *>>::size_type v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    BOOL v18 = &end[v6];
LABEL_19:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60) {
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (char *)value - (char *)begin;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v8 >> 3;
  if (v8 >> 3 <= __sz) {
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = __sz;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v10);
  std::vector<std::csub_match>::size_type v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  std::pair<const char *, const char *> v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  uint64_t v15 = &v12[v6];
  std::vector<std::pair<unsigned long, const char *>>::pointer v17 = this->__begin_;
  uint64_t v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    uint64_t v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8796870](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5D6599C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__state<char>::~__state(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::pair<unsigned long, const char *>>::size_type v6 = result;
    uint64_t result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C5D65AB0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::pair<unsigned long, const char *>>::size_type v6 = result;
    uint64_t result = std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C5D65B24(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8796870](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5D65B84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[2];
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  }
  unint64_t v7 = a1[4];
  unint64_t v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x2A)
    {
      unint64_t v22 = (v4 - v5) >> 3;
      std::vector<std::csub_match>::pointer v23 = (char *)a1[3];
      uint64_t v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v24 >> 2;
        }
        unint64_t v87 = a1 + 3;
        *(void *)&long long v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v25);
        *((void *)&v85 + 1) = v85 + 8 * v22;
        *(void *)&long long v86 = *((void *)&v85 + 1);
        *((void *)&v86 + 1) = v85 + 8 * v26;
        uint64_t v84 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v85, &v84);
        uint64_t v27 = a1[2];
        uint64_t v29 = (char *)*((void *)&v85 + 1);
        uint64_t v28 = (char *)v85;
        uint64_t v31 = (char *)*((void *)&v86 + 1);
        uint64_t v30 = (char *)v86;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28) {
                unint64_t v37 = 1;
              }
              else {
                unint64_t v37 = (v31 - v28) >> 2;
              }
              uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v37);
              long long v40 = v38;
              uint64_t v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v41 = v30 - v28;
              BOOL v35 = v30 == v28;
              uint64_t v30 = v29;
              if (!v35)
              {
                uint64_t v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v42 = 8 * (v41 >> 3);
                unint64_t v43 = v29;
                long long v44 = v28;
                do
                {
                  uint64_t v45 = *(void *)v44;
                  v44 += 8;
                  *(void *)unint64_t v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              uint64_t v31 = &v38[8 * v39];
              if (v28) {
                operator delete(v28);
              }
              uint64_t v28 = v40;
            }
            else
            {
              uint64_t v32 = (v31 - v30) >> 3;
              if (v32 >= -1) {
                unint64_t v33 = v32 + 1;
              }
              else {
                unint64_t v33 = v32 + 2;
              }
              unsigned int v34 = &v30[8 * (v33 >> 1)];
              uint64_t v29 = &v34[-(v30 - v28)];
              size_t v36 = v30 - v28;
              BOOL v35 = v30 == v28;
              uint64_t v30 = v34;
              if (!v35) {
                memmove(v29, v28, v36);
              }
            }
          }
          uint64_t v46 = *(void *)(v27 - 8);
          v27 -= 8;
          *((void *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(void *)&long long v85 = v28;
        *((void *)&v85 + 1) = v29;
        *(void *)&long long v86 = v30;
        *((void *)&v86 + 1) = v31;
        long long v48 = v85;
        long long v49 = v86;
        *(void *)&long long v85 = *a1;
        uint64_t v47 = (void *)v85;
        *((void *)&v85 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47) {
          operator delete(v47);
        }
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(void *)&long long v85 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v85);
LABEL_60:
        std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[1];
        unint64_t v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(void *)&long long v85 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v85);
      long long v61 = (void *)a1[1];
      uint64_t v4 = (char *)a1[2];
      uint64_t v63 = *v61;
      uint64_t v62 = (char *)(v61 + 1);
      uint64_t v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        uint64_t v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          uint64_t v65 = v64 >> 3;
          BOOL v14 = v64 >> 3 < -1;
          uint64_t v66 = (v64 >> 3) + 2;
          if (v14) {
            uint64_t v67 = v66;
          }
          else {
            uint64_t v67 = v65 + 1;
          }
          uint64_t v68 = -(v67 >> 1);
          uint64_t v69 = v67 >> 1;
          unint64_t v70 = &v62[-8 * v69];
          int64_t v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            uint64_t v62 = (char *)a1[1];
          }
          uint64_t v4 = &v70[v71];
          unsigned int v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1) {
          unint64_t v77 = 1;
        }
        else {
          unint64_t v77 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v77);
        unint64_t v52 = &v51[8 * (v77 >> 2)];
        uint64_t v54 = &v51[8 * v78];
        uint64_t v79 = (uint64_t *)a1[1];
        uint64_t v4 = v52;
        uint64_t v80 = a1[2] - (void)v79;
        if (v80)
        {
          uint64_t v4 = &v52[v80 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v81 = 8 * (v80 >> 3);
          unsigned int v82 = &v51[8 * (v77 >> 2)];
          do
          {
            uint64_t v83 = *v79++;
            *(void *)unsigned int v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_46:
        char v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          uint64_t v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 42;
      uint64_t v11 = *(void *)v5;
      std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v5 + 8;
      uint64_t v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        uint64_t v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          uint64_t v13 = v12 >> 3;
          BOOL v14 = v12 >> 3 < -1;
          uint64_t v15 = (v12 >> 3) + 2;
          if (v14) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = v13 + 1;
          }
          uint64_t v17 = -(v16 >> 1);
          uint64_t v18 = v16 >> 1;
          std::vector<std::csub_match>::size_type v19 = &v9[-8 * v18];
          int64_t v20 = v4 - v9;
          if (v4 == v9)
          {
            std::pair<const char *, const char *> v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            std::pair<const char *, const char *> v21 = (char *)a1[1];
          }
          uint64_t v4 = &v19[v20];
          unsigned int v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1) {
          unint64_t v50 = 1;
        }
        else {
          unint64_t v50 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v50);
        unint64_t v52 = &v51[8 * (v50 >> 2)];
        uint64_t v54 = &v51[8 * v53];
        int v55 = (uint64_t *)a1[1];
        uint64_t v4 = v52;
        uint64_t v56 = a1[2] - (void)v55;
        if (v56)
        {
          uint64_t v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v57 = 8 * (v56 >> 3);
          uint64_t v58 = &v51[8 * (v50 >> 2)];
          do
          {
            uint64_t v59 = *v55++;
            *(void *)uint64_t v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(void *)uint64_t v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  unint64_t v73 = *(void *)&v5[8 * (v8 / 0x2A)] + 96 * (v8 % 0x2A);
  long long v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v73 = *(_OWORD *)a2;
  *(_OWORD *)(v73 + 16) = v74;
  *(void *)(v73 + 40) = 0;
  *(void *)(v73 + 48) = 0;
  *(void *)(v73 + 32) = 0;
  *(_OWORD *)(v73 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v73 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v73 + 56) = 0;
  *(void *)(v73 + 64) = 0;
  *(void *)(v73 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v73 + 56) = result;
  *(void *)(v73 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v76 = *(void *)(a2 + 80);
  *(void *)(v73 + 85) = *(void *)(a2 + 85);
  *(void *)(v73 + 80) = v76;
  ++a1[5];
  return result;
}

void sub_1C5D66088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)(*(void *)(a1[1] + 8 * (v2 / 0x2A))
                                                                     + 96 * (v2 % 0x2A)));
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * ((v3 - v4) >> 3) - 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x54)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = &v2[v4 / 0x2A];
    uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    unint64_t v7 = (unint64_t)v2[(*(void *)(a1 + 40) + v4) / 0x2A] + 96 * ((*(void *)(a1 + 40) + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v6);
        v6 += 96;
        if (v6 - (unsigned char *)*v5 == 4032)
        {
          unint64_t v8 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v8;
        }
      }
      while (v6 != (char *)v7);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *(void *)(a1 + 40) = 0;
  unint64_t v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v10 = v9 >> 3;
  if (v10 == 1)
  {
    uint64_t v11 = 21;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    uint64_t v11 = 42;
LABEL_14:
    *(void *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13 != v14) {
      *(void *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, void *a2)
{
  unint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      uint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        uint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        std::vector<std::csub_match>::size_type v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)std::vector<std::csub_match>::size_type v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      std::pair<const char *, const char *> v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        unint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v16);
      std::vector<std::csub_match>::size_type v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      unint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        std::vector<std::csub_match>::pointer v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)std::vector<std::csub_match>::pointer v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        unint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        unint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      unint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, *(char **)a1, *(char **)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  }
  else
  {
    std::string __p = 0;
    size_t v19 = 0;
    uint64_t v20 = 0;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&v15, *(char **)a2, *(char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    unsigned int v3 = HIBYTE(v17);
    uint64_t v5 = v15;
    size_t v4 = v16;
  }
  else
  {
    size_t v4 = 0;
    uint64_t v5 = 0;
    unsigned int v3 = 0;
    uint64_t v15 = 0;
    size_t v16 = 0;
    uint64_t v17 = 0;
  }
  char v6 = HIBYTE(v20);
  if (v20 >= 0) {
    size_t v7 = HIBYTE(v20);
  }
  else {
    size_t v7 = v19;
  }
  if (v20 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v9 = v3;
  }
  else {
    size_t v9 = v4;
  }
  if ((v3 & 0x80u) == 0) {
    uint64_t v10 = (void **)&v15;
  }
  else {
    uint64_t v10 = v5;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  unsigned int v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0) {
      goto LABEL_24;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  unsigned int v13 = v9 < v7;
  if (v7 < v9) {
    unsigned int v13 = -1;
  }
  if (v12) {
    return v12;
  }
  else {
    return v13;
  }
}

void sub_1C5D6661C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetNumberSeparatorsRegex(void)::$_0 &&>>()
{
}

void sub_1C5D66684(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x1060C4040BE2400);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, const char *a2)
{
  unsigned int v3 = std::regex_traits<char>::regex_traits(a1);
  v3[2].__ct_ = 0;
  *(_OWORD *)&v3[1].__col_ = 0u;
  *(_OWORD *)&v3[1].__loc_.__locale_ = 0u;
  strlen(a2);
  std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>();
}

void sub_1C5D66718(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  unint64_t v2 = (const std::locale *)MEMORY[0x1C8796C60]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E4FBA280]);
  return this;
}

void sub_1C5D66784(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

void sub_1C5D66B88(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8796870](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5D66C00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>()
{
}

void sub_1C5D66CA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
  size_t v7 = a2;
  do
  {
    BOOL v8 = v7;
    size_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    size_t v9 = a1->__end_;
    uint64_t v10 = v8 + 1;
    size_t v11 = v8 + 1;
    do
    {
      BOOL v8 = v11;
      size_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  size_t v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      char v6 = v3;
      unsigned int v3 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, v3, v4);
    }
    while (v3 != v6);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned int v3 = a3;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
  size_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  BOOL v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    size_t v9 = a1->__end_;
    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    BOOL v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8796870](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5D66FD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x1C8796D70);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F2120480;
  unint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
  JUMPOUT(0x1C8796D70);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x1C8796D70);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(uint64_t a1, char *a2, char *a3)
{
  char v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    size_t v7 = v6;
    char v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8796870](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5D67418(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  char v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    uint64_t v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, a2, a3);
    goto LABEL_25;
  }
  int v8 = *a2;
  uint64_t v9 = (v8 - 36);
  if (v9 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v8 - 36)) & 0x5800000080004D1) != 0) {
    goto LABEL_4;
  }
  if (v9 == 5)
  {
    if (!*(_DWORD *)(a1 + 36)) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_13:
    if ((v8 - 123) >= 2)
    {
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, *a2);
LABEL_32:
      int64_t v14 = (unsigned __int8 *)(a2 + 1);
      goto LABEL_37;
    }
  }
LABEL_4:
  uint64_t v10 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_21:
    int v11 = *a2;
LABEL_22:
    if (v11 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v11 = *a2;
  if (v11 != 92) {
    goto LABEL_22;
  }
  int v12 = *v10;
  char v13 = *v10;
  if (((v12 - 36) > 0x3A || ((1 << (v12 - 36)) & 0x5800000080004F1) == 0)
    && (v12 - 123) >= 3)
  {
    if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
    {
      uint64_t v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, a2 + 1, a3, 0);
    }
    else
    {
      BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v13);
      uint64_t v17 = 2;
      if (!v16) {
        uint64_t v17 = 0;
      }
      uint64_t v15 = &a2[v17];
    }
    if (v15 != a2)
    {
LABEL_25:
      if (v15 == a2 && v15 != a3)
      {
        int v18 = *a2;
        if (v18 == 36)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor((std::basic_regex<char> *)a1);
          goto LABEL_32;
        }
        if (v18 != 40)
        {
          if (v18 == 94)
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor((std::basic_regex<char> *)a1);
            goto LABEL_32;
          }
          return (unsigned __int8 *)a2;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
        unsigned int v19 = *(_DWORD *)(a1 + 28);
        ++*(_DWORD *)(a1 + 36);
        uint64_t v20 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, a2 + 1, a3);
        if (v20 == a3 || (uint64_t v21 = v20, *v20 != 41)) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v19);
        --*(_DWORD *)(a1 + 36);
        uint64_t v15 = v21 + 1;
      }
      int64_t v14 = (unsigned __int8 *)v15;
      if (v15 != a2) {
        goto LABEL_37;
      }
      return (unsigned __int8 *)a2;
    }
    goto LABEL_21;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v13);
  int64_t v14 = (unsigned __int8 *)(a2 + 2);
LABEL_37:
  size_t v22 = (*(_DWORD *)(a1 + 28) + 1);
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), v22);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8796870](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5D678C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      char v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        char v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return a2;
    }
    uint64_t v15 = a2 + 1;
    BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            char v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              char v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              uint64_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            uint64_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        std::vector<std::csub_match>::pointer v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          char v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            char v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        unint64_t v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            char v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                char v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    char v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    char v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_1C5D67DAC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  if (result != a2)
  {
    int v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      int v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          int v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38) {
            break;
          }
          if (v4 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2) {
            return a2;
          }
        }
      }
    }
  }
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8796870](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5D67EC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8796870](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5D67F1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    unsigned int v7 = (unsigned char *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((void *)v7 - 2) = v5;
      *((void *)v7 - 1) = v5;
      *unsigned int v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  uint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    *uint64_t v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *uint64_t v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x1C8796D70);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C8796D70);
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C8796D70);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C8796D70);
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C8796D70);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_135;
    }
    uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3) {
      goto LABEL_135;
    }
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(unsigned char *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3) {
      goto LABEL_135;
    }
    BOOL v8 = a3 - 4;
    while (1)
    {
      uint64_t v9 = (char *)v5;
      uint64_t v10 = a3;
      if ((char *)v5 == a3) {
        goto LABEL_113;
      }
      int v11 = *(unsigned __int8 *)v5;
      uint64_t v10 = (char *)v5;
      if (v11 == 93) {
        goto LABEL_113;
      }
      memset(&v39, 0, sizeof(v39));
      if ((char *)(v5 + 1) != a3 && v11 == 91)
      {
        int v12 = *(unsigned __int8 *)(v5 + 1);
        switch(v12)
        {
          case '.':
            uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, (char *)(v5 + 2), a3, (uint64_t)&v39);
            uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
            std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
            if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v39.__r_.__value_.__l.__size_;
            }
            if (size) {
              goto LABEL_33;
            }
            goto LABEL_27;
          case ':':
            if ((uint64_t)&a3[-v5 - 2] < 2) {
              goto LABEL_134;
            }
            for (unint64_t i = 0; ; ++i)
            {
              size_t v14 = (char *)(v5 + i + 2);
              if (*v14 == 58 && *(unsigned char *)(v5 + i + 3) == 93) {
                break;
              }
              if (&v8[-v5] == (char *)i) {
                goto LABEL_134;
              }
            }
            if (v14 == a3) {
LABEL_134:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            int v24 = *(_DWORD *)(a1 + 24);
            std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
            std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
            }
            (*(void (**)(void, std::string *, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), p_p, (char *)p_p + v25);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v27 = &__p;
            }
            else {
              int v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            std::regex_traits<char>::char_class_type classname = std::__get_classname((const char *)v27, v24 & 1);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (!classname) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
            }
            char v29 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            goto LABEL_109;
          case '=':
            if ((uint64_t)&a3[-v5 - 2] < 2) {
              goto LABEL_134;
            }
            for (uint64_t j = 0; ; ++j)
            {
              size_t v14 = &j[v5 + 2];
              if (*v14 == 61 && j[v5 + 3] == 93) {
                break;
              }
              if (&v8[-v5] == j) {
                goto LABEL_134;
              }
            }
            if (v14 == a3) {
              goto LABEL_134;
            }
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&__p, a1, (char *)(v5 + 2), &j[v5 + 2]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
              if (!__p.__r_.__value_.__l.__size_) {
LABEL_136:
              }
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              uint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
                goto LABEL_136;
              }
              uint64_t v31 = &__p;
            }
            std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>((uint64_t)v40, a1, (char *)v31, (char *)v31 + v30);
            uint64_t v32 = (void *)HIBYTE(v41);
            if (v41 < 0) {
              uint64_t v32 = v40[1];
            }
            if (v32)
            {
              std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]((uint64_t *)v7, (long long *)v40);
            }
            else
            {
              std::string::size_type v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
              }
              if (v33 == 2)
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  BOOL v35 = &__p;
                }
                else {
                  BOOL v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v35->__r_.__value_.__s.__data_[0], v35->__r_.__value_.__s.__data_[1]);
              }
              else
              {
                if (v33 != 1) {
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unsigned int v34 = &__p;
                }
                else {
                  unsigned int v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v34->__r_.__value_.__s.__data_[0]);
              }
            }
            if (SHIBYTE(v41) < 0) {
              operator delete(v40[0]);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            char v29 = 0;
LABEL_109:
            uint64_t v5 = (uint64_t)(v14 + 2);
            BOOL v20 = v9;
            goto LABEL_110;
        }
      }
      uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
      uint64_t v10 = v9;
LABEL_27:
      if ((v5 | 0x40) != 0x40)
      {
        LOBYTE(v15) = *v10;
LABEL_32:
        std::string::operator=(&v39, v15);
        ++v10;
        goto LABEL_33;
      }
      int v15 = *v10;
      if (v15 != 92) {
        goto LABEL_32;
      }
      BOOL v16 = v10 + 1;
      if (v5)
      {
        uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v16, a3, &v39);
      }
      else
      {
        uint64_t v10 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v16, (std::basic_regex<char> *)a3, &v39, v7);
        uint64_t v5 = 0;
      }
LABEL_33:
      if (v10 != a3)
      {
        int v17 = *v10;
        if (v17 != 93)
        {
          BOOL v19 = v10 + 1;
          if (v10 + 1 != a3 && v17 == 45 && *v19 != 93)
          {
            memset(&__p, 0, sizeof(__p));
            BOOL v20 = v10 + 2;
            if (v10 + 2 != a3 && *v19 == 91 && *v20 == 46)
            {
              uint64_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v10 + 3, a3, (uint64_t)&__p);
              goto LABEL_119;
            }
            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v19) = *v19;
              if (v19 == 92)
              {
                if (v5) {
                  uint64_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v10 + 2, a3, &__p);
                }
                else {
                  uint64_t v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v10 + 2), (std::basic_regex<char> *)a3, &__p, v7);
                }
LABEL_119:
                BOOL v20 = v21;
LABEL_120:
                *(_OWORD *)long long v40 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                std::string::size_type v36 = v39.__r_.__value_.__r.__words[2];
                std::string v38 = __p;
                memset(&v39, 0, sizeof(v39));
                uint64_t v41 = v36;
                memset(&__p, 0, sizeof(__p));
                std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v7, (char *)v40, (char *)&v38);
                if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v38.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v41) < 0) {
                  operator delete(v40[0]);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                char v29 = 1;
LABEL_110:
                if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v39.__r_.__value_.__l.__data_);
                }
                uint64_t v10 = v20;
                if ((v29 & 1) == 0) {
                  goto LABEL_114;
                }
                goto LABEL_113;
              }
            }
            else
            {
              LOBYTE(v19) = *v19;
            }
            std::string::operator=(&__p, (std::string::value_type)v19);
            goto LABEL_120;
          }
        }
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v39.__r_.__value_.__l.__size_)
        {
          if (v39.__r_.__value_.__l.__size_ == 1)
          {
            size_t v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_42:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0]);
LABEL_79:
            char v29 = 1;
            BOOL v20 = v10;
            goto LABEL_110;
          }
          size_t v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_78:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0], v18->__r_.__value_.__s.__data_[1]);
          goto LABEL_79;
        }
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      else if (*((unsigned char *)&v39.__r_.__value_.__s + 23))
      {
        size_t v18 = &v39;
        if (HIBYTE(v39.__r_.__value_.__r.__words[2]) == 1) {
          goto LABEL_42;
        }
        goto LABEL_78;
      }
LABEL_113:
      uint64_t v5 = (uint64_t)v10;
LABEL_114:
      if ((char *)v5 == v9)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93) {
            return v9 + 1;
          }
        }
LABEL_135:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_1C5D68C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8796870](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5D68CD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_1C5D68E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  int v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  BOOL v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  int v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  *uint64_t v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  MEMORY[0x1C8796D70](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    uint64_t v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = &v5[-v6];
      uint64_t v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        unint64_t v9 = v4 - v6;
        if (2 * v9 > v8) {
          uint64_t v8 = 2 * v9;
        }
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v10 = v8;
        }
        if (v10) {
          uint64_t v11 = operator new(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        BOOL v19 = &v7[(void)v11];
        BOOL v20 = (char *)v11 + v10;
        v7[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v7[(void)v11 + 1];
        if (v5 != (unsigned char *)v6)
        {
          uint64_t v21 = &v5[~v6];
          do
          {
            char v22 = *--v5;
            (v21--)[(void)v11] = v22;
          }
          while (v5 != (unsigned char *)v6);
LABEL_45:
          uint64_t v5 = *(unsigned char **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  uint64_t v5 = *(unsigned char **)(a1 + 48);
  unint64_t v12 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      unint64_t v23 = *(void *)(a1 + 40);
      int v24 = &v5[-v23];
      uint64_t v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        unint64_t v26 = v12 - v23;
        if (2 * v26 > v25) {
          uint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v27 = v25;
        }
        if (v27) {
          uint64_t v11 = operator new(v27);
        }
        else {
          uint64_t v11 = 0;
        }
        BOOL v19 = &v24[(void)v11];
        BOOL v20 = (char *)v11 + v27;
        v24[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v24[(void)v11 + 1];
        if (v5 != (unsigned char *)v23)
        {
          std::string::size_type v30 = &v5[~v23];
          do
          {
            char v31 = *--v5;
            (v30--)[(void)v11] = v31;
          }
          while (v5 != (unsigned char *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *uint64_t v5 = v2;
    uint64_t v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12) {
    goto LABEL_22;
  }
  unint64_t v13 = *(void *)(a1 + 40);
  size_t v14 = &v5[-v13];
  uint64_t v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0) {
    goto LABEL_50;
  }
  unint64_t v16 = v12 - v13;
  if (2 * v16 > v15) {
    uint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v17 = v15;
  }
  if (v17) {
    uint64_t v11 = operator new(v17);
  }
  else {
    uint64_t v11 = 0;
  }
  BOOL v19 = &v14[(void)v11];
  BOOL v20 = (char *)v11 + v17;
  v14[(void)v11] = v2;
  uint64_t v18 = (uint64_t)&v14[(void)v11 + 1];
  if (v5 != (unsigned char *)v13)
  {
    uint64_t v28 = &v5[~v13];
    do
    {
      char v29 = *--v5;
      (v28--)[(void)v11] = v29;
    }
    while (v5 != (unsigned char *)v13);
    goto LABEL_45;
  }
LABEL_46:
  uint64_t v11 = v19;
LABEL_47:
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v20;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; ; ++i)
  {
    unint64_t v6 = &a2[i];
    if (a2[i] == 46 && v6[1] == 93) {
      break;
    }
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (v6 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119) {
          goto LABEL_25;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        long long v10 = a4;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100) {
        goto LABEL_25;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      goto LABEL_25;
    }
    std::string::value_type v9 = 0;
    long long v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
LABEL_25:
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            unint64_t v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            unint64_t v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        unint64_t v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      unint64_t v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  int v3 = a3;
  unint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        if (v4[23] < 0)
        {
          if (i >= *((void *)v4 + 1))
          {
LABEL_12:
            for (unint64_t j = 0; ; ++j)
            {
              if (v3[23] < 0)
              {
                if (j >= *((void *)v3 + 1)) {
                  goto LABEL_35;
                }
                std::string::value_type v11 = *(char **)v3;
              }
              else
              {
                std::string::value_type v11 = v3;
                if (j >= v3[23]) {
                  goto LABEL_35;
                }
              }
              char v12 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v11[j]);
              unint64_t v13 = v3;
              if (v3[23] < 0) {
                unint64_t v13 = *(char **)v3;
              }
              v13[j] = v12;
            }
          }
          std::string::value_type v7 = *(char **)v4;
        }
        else
        {
          std::string::value_type v7 = v4;
          if (i >= v4[23]) {
            goto LABEL_12;
          }
        }
        char v8 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v7[i]);
        char v9 = v4;
        if (v4[23] < 0) {
          char v9 = *(char **)v4;
        }
        v9[i] = v8;
      }
    }
    unint64_t v15 = 0;
    unint64_t v16 = a2[23];
    if ((v16 & 0x80) != 0) {
      goto LABEL_26;
    }
    while (v15 < v16)
    {
      while (1)
      {
        ++v15;
        if ((v16 & 0x80) == 0) {
          break;
        }
LABEL_26:
        if (v15 >= *((void *)a2 + 1)) {
          goto LABEL_29;
        }
      }
    }
LABEL_29:
    unint64_t v17 = 0;
    unint64_t v18 = a3[23];
    if ((v18 & 0x80) != 0) {
      goto LABEL_32;
    }
    while (v17 < v18)
    {
      while (1)
      {
        ++v17;
        if ((v18 & 0x80) == 0) {
          break;
        }
LABEL_32:
        if (v17 >= *((void *)a3 + 1)) {
          goto LABEL_35;
        }
      }
    }
LABEL_35:
    if (v4[23] < 0)
    {
      BOOL v20 = v4;
      unint64_t v4 = *(char **)v4;
      uint64_t v19 = *((void *)v20 + 1);
    }
    else
    {
      uint64_t v19 = v4[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v33, a1 + 16, v4, &v4[v19]);
    if (v3[23] < 0)
    {
      char v22 = v3;
      int v3 = *(char **)v3;
      uint64_t v21 = *((void *)v22 + 1);
    }
    else
    {
      uint64_t v21 = v3[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)v31, a1 + 16, v3, &v3[v21]);
    *(_OWORD *)BOOL v35 = v33;
    uint64_t v36 = v34;
    uint64_t v34 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v31;
    uint64_t v38 = v32;
    v31[0] = 0;
    v31[1] = 0;
    uint64_t v32 = 0;
    long long v33 = 0uLL;
    std::vector<siri::dialogengine::DatabaseField>::push_back[abi:ne180100]((void **)(a1 + 88), (long long *)v35);
    if (SHIBYTE(v38) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(v35[0]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(v31[0]);
    }
    if (SHIBYTE(v34) < 0)
    {
      unint64_t v23 = (void *)v33;
LABEL_69:
      operator delete(v23);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v14 = *((void *)a2 + 1);
    }
    else {
      uint64_t v14 = a2[23];
    }
    if (v14 != 1 || (a3[23] < 0 ? (uint64_t v24 = *((void *)a3 + 1)) : (uint64_t v24 = a3[23]), v24 != 1)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      uint64_t v25 = a2;
      if (a2[23] < 0) {
        uint64_t v25 = *(char **)a2;
      }
      char v26 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v25);
      size_t v27 = v4;
      if (v4[23] < 0) {
        size_t v27 = *(unsigned char **)v4;
      }
      *size_t v27 = v26;
      uint64_t v28 = v3;
      if (v3[23] < 0) {
        uint64_t v28 = *(char **)v3;
      }
      char v29 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v28);
      std::string::size_type v30 = v3;
      if (v3[23] < 0) {
        std::string::size_type v30 = *(unsigned char **)v3;
      }
      *std::string::size_type v30 = v29;
    }
    *(_OWORD *)BOOL v35 = *(_OWORD *)v4;
    uint64_t v36 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)unint64_t v4 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v38 = *((void *)v3 + 2);
    *(void *)int v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    std::vector<siri::dialogengine::DatabaseField>::push_back[abi:ne180100]((void **)(a1 + 88), (long long *)v35);
    if (SHIBYTE(v38) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v36) < 0)
    {
      unint64_t v23 = v35[0];
      goto LABEL_69;
    }
  }
}

void sub_1C5D69918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v8 = *(_WORD **)(a1 + 120);
    unint64_t v16 = *(void *)(a1 + 128);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(a1 + 112);
      uint64_t v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        uint64_t v19 = v18 >> 1;
        unint64_t v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1) {
          unint64_t v21 = v19 + 1;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v22 = v21;
        }
        if (v22) {
          uint64_t v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v25 = (_WORD *)(v22 + 2 * v19);
        uint64_t v26 = v22 + 2 * v23;
        *uint64_t v25 = v6;
        uint64_t v24 = v25 + 1;
        unint64_t v37 = *(char **)(a1 + 112);
        size_t v27 = *(char **)(a1 + 120);
        if (v27 == v37) {
          goto LABEL_46;
        }
        do
        {
          __int16 v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--uint64_t v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v30 = *(void *)(a1 + 112);
      uint64_t v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        uint64_t v32 = v31 >> 1;
        unint64_t v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1) {
          unint64_t v34 = v32 + 1;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v33 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v35 = v34;
        }
        if (v35) {
          uint64_t v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        uint64_t v25 = (_WORD *)(v35 + 2 * v32);
        uint64_t v26 = v35 + 2 * v36;
        *uint64_t v25 = v6;
        uint64_t v24 = v25 + 1;
        std::string v39 = *(char **)(a1 + 112);
        size_t v27 = *(char **)(a1 + 120);
        if (v27 == v39) {
          goto LABEL_46;
        }
        do
        {
          __int16 v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--uint64_t v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
  char v8 = *(_WORD **)(a1 + 120);
  unint64_t v7 = *(void *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *char v8 = v6;
    uint64_t v24 = v8 + 1;
    goto LABEL_48;
  }
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3) {
    goto LABEL_49;
  }
  uint64_t v11 = v10 >> 1;
  unint64_t v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1) {
    unint64_t v13 = v11 + 1;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    uint64_t v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v14);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v25 = (_WORD *)(v14 + 2 * v11);
  uint64_t v26 = v14 + 2 * v15;
  *uint64_t v25 = v6;
  uint64_t v24 = v25 + 1;
  uint64_t v28 = *(char **)(a1 + 112);
  size_t v27 = *(char **)(a1 + 120);
  if (v27 == v28) {
    goto LABEL_46;
  }
  do
  {
    __int16 v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--uint64_t v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  size_t v27 = *(char **)(a1 + 112);
LABEL_46:
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v26;
  if (v27) {
    operator delete(v27);
  }
LABEL_48:
  *(void *)(a1 + 120) = v24;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    __int16 v6 = __p;
  }
  else {
    __int16 v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5D69C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8796870](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5D69CA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8796870](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5D69D00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1C5D69E88(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  unint64_t v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  MEMORY[0x1C8796D70](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C8796D70);
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F21201E0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1C8796D70);
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F21201E0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        __n128 result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2120198;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1C8796D70);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2120198;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), 95);
    char v3 = v2;
    uint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 < v4)
    {
      *uint64_t v5 = v2;
      uint64_t v6 = (uint64_t)(v5 + 1);
LABEL_32:
      *(void *)(a1 + 72) = v6;
      return;
    }
    unint64_t v15 = *(void *)(a1 + 64);
    unint64_t v16 = &v5[-v15];
    uint64_t v17 = (uint64_t)&v5[-v15 + 1];
    if (v17 >= 0)
    {
      unint64_t v18 = v4 - v15;
      if (2 * v18 > v17) {
        uint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v19 = v17;
      }
      if (v19) {
        unint64_t v20 = operator new(v19);
      }
      else {
        unint64_t v20 = 0;
      }
      uint64_t v22 = &v20[v19];
      v16[(void)v20] = v3;
      uint64_t v6 = (uint64_t)&v16[(void)v20 + 1];
      if (v5 == (unsigned char *)v15)
      {
        unint64_t v20 = &v16[(void)v20];
      }
      else
      {
        uint64_t v23 = &v5[~v15];
        do
        {
          char v24 = *--v5;
          (v23--)[(void)v20] = v24;
        }
        while (v5 != (unsigned char *)v15);
        uint64_t v5 = *(unsigned char **)(a1 + 64);
      }
      *(void *)(a1 + 64) = v20;
      *(void *)(a1 + 72) = v6;
      *(void *)(a1 + 80) = v22;
      if (v5) {
        operator delete(v5);
      }
      goto LABEL_32;
    }
LABEL_55:
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v8 = *(unsigned char **)(a1 + 72);
  unint64_t v7 = *(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v8 >= v7)
    {
      unint64_t v9 = *(void *)(a1 + 64);
      uint64_t v10 = &v8[-v9];
      uint64_t v11 = (uint64_t)&v8[-v9 + 1];
      if (v11 < 0) {
        goto LABEL_55;
      }
      unint64_t v12 = v7 - v9;
      if (2 * v12 > v11) {
        uint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v13 = v11;
      }
      if (v13) {
        uint64_t v14 = operator new(v13);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v30 = &v10[(void)v14];
      uint64_t v31 = (char *)v14 + v13;
      v10[(void)v14] = 95;
      uint64_t v21 = (uint64_t)&v10[(void)v14 + 1];
      if (v8 != (unsigned char *)v9)
      {
        uint64_t v32 = &v8[~v9];
        do
        {
          char v33 = *--v8;
          (v32--)[(void)v14] = v33;
        }
        while (v8 != (unsigned char *)v9);
LABEL_50:
        unsigned __int8 v8 = *(unsigned char **)(a1 + 64);
        goto LABEL_52;
      }
      goto LABEL_51;
    }
  }
  else if ((unint64_t)v8 >= v7)
  {
    unint64_t v25 = *(void *)(a1 + 64);
    uint64_t v26 = &v8[-v25];
    uint64_t v27 = (uint64_t)&v8[-v25 + 1];
    if (v27 < 0) {
      goto LABEL_55;
    }
    unint64_t v28 = v7 - v25;
    if (2 * v28 > v27) {
      uint64_t v27 = 2 * v28;
    }
    if (v28 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v29 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v29 = v27;
    }
    if (v29) {
      uint64_t v14 = operator new(v29);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v30 = &v26[(void)v14];
    uint64_t v31 = (char *)v14 + v29;
    v26[(void)v14] = 95;
    uint64_t v21 = (uint64_t)&v26[(void)v14 + 1];
    if (v8 != (unsigned char *)v25)
    {
      unint64_t v34 = &v8[~v25];
      do
      {
        char v35 = *--v8;
        (v34--)[(void)v14] = v35;
      }
      while (v8 != (unsigned char *)v25);
      goto LABEL_50;
    }
LABEL_51:
    uint64_t v14 = v30;
LABEL_52:
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = v21;
    *(void *)(a1 + 80) = v31;
    if (v8) {
      operator delete(v8);
    }
    goto LABEL_54;
  }
  *unsigned __int8 v8 = 95;
  uint64_t v21 = (uint64_t)(v8 + 1);
LABEL_54:
  *(void *)(a1 + 72) = v21;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  unint64_t v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            uint64_t v6 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_57;
        case 'r':
          if (a4)
          {
            uint64_t v6 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_57;
        case 't':
          if (a4)
          {
            uint64_t v6 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_57;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            int v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              unint64_t v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                int v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6) {
                  goto LABEL_23;
                }
              }
            }
          }
          goto LABEL_62;
        case 'v':
          if (a4)
          {
            uint64_t v6 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_62;
          }
          char v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_28;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u) {
            goto LABEL_62;
          }
          char v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_62;
          }
          char v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_33;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u) {
            goto LABEL_62;
          }
          char v13 = -87;
LABEL_33:
          std::string::value_type v14 = v13 + v12 + 16 * (v11 + v10);
          if (a4) {
            std::string::operator=(a4, v14);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_43;
      }
      goto LABEL_57;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        uint64_t v6 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_48;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_57:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          uint64_t v6 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_48:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_57;
      }
LABEL_43:
      uint64_t v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if (v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          uint64_t v6 = a4;
          goto LABEL_48;
        }
        goto LABEL_57;
      }
LABEL_62:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_62;
    }
    char v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v15 & 0xDF) - 65) > 0x19u) {
      goto LABEL_62;
    }
    std::string::value_type v16 = v15 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v16);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a1 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D6AA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8796870](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5D6AADC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8796870](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5D6AB34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a3, a4, a4 - a3);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a1;
      }
      else {
        uint64_t v10 = *(unsigned char **)a1;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5D6AC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, long long *a2)
{
  char v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v8 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_236;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_66;
  }
  char v6 = *current;
  LOBYTE(v126) = *current;
  char v7 = current[1];
  HIBYTE(v126) = v7;
  if (this->__icase_)
  {
    LOBYTE(v126) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v126) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v126;
  __s.__r_.__value_.__s.__data_[2] = 0;
  memset(&__p, 0, sizeof(__p));
  std::__get_collation_name(&v127, (const char *)&__s);
  std::string __p = v127;
  std::string::size_type size = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  int v11 = SHIBYTE(v127.__r_.__value_.__r.__words[2]);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v127.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_11;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_11;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    goto LABEL_15;
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)this->__traits_.__col_ + 32))(&v127);
  if (v11 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v127;
  if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v127.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v127.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_11;
    }
    goto LABEL_178;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_178:
    std::string::operator=(&__p, &__s);
    goto LABEL_11;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_11:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v41 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v41) {
      goto LABEL_17;
    }
LABEL_66:
    BOOL negate = 0;
    uint64_t v8 = 1;
    goto LABEL_67;
  }
  if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
    goto LABEL_66;
  }
LABEL_17:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v13 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v13)
  {
    uint64_t v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1) {
      uint64_t v14 = 1;
    }
    p_second = &begin->second;
    while (v126 != *(p_second - 1) || HIBYTE(v126) != *p_second)
    {
      p_second += 2;
      if (!--v14) {
        goto LABEL_26;
      }
    }
    goto LABEL_233;
  }
LABEL_26:
  p_traits = &this->__traits_;
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v126, (char *)&v127);
    std::vector<std::pair<std::string, std::string>>::pointer v18 = this->__ranges_.__begin_;
    char v19 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    int64_t v20 = (char *)this->__ranges_.__end_ - (char *)v18;
    if (v20)
    {
      uint64_t v21 = 0;
      unint64_t v22 = v20 / 48;
      char v116 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v23 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v23 = __s.__r_.__value_.__l.__size_;
      }
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_s = &__s;
      }
      else {
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      if (v22 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v20 / 48;
      }
      uint64_t v26 = (unsigned __int8 *)&v18->second.__r_.__value_.__r.__words[2] + 7;
      BOOL v27 = 1;
      while (1)
      {
        int v28 = (char)*(v26 - 24);
        if (v28 >= 0) {
          size_t v29 = *(v26 - 24);
        }
        else {
          size_t v29 = *(void *)(v26 - 39);
        }
        if (v28 >= 0) {
          uint64_t v30 = (char *)(v26 - 47);
        }
        else {
          uint64_t v30 = *(char **)(v26 - 47);
        }
        if (v29 >= v23) {
          size_t v31 = v23;
        }
        else {
          size_t v31 = v29;
        }
        int v32 = memcmp(p_s, v30, v31);
        BOOL v33 = v23 >= v29;
        if (v32) {
          BOOL v33 = v32 >= 0;
        }
        if (v33)
        {
          int v34 = (char)*v26;
          if (v34 >= 0) {
            size_t v35 = *v26;
          }
          else {
            size_t v35 = *(void *)(v26 - 15);
          }
          if (v34 >= 0) {
            uint64_t v36 = (char *)(v26 - 23);
          }
          else {
            uint64_t v36 = *(char **)(v26 - 23);
          }
          if (v23 >= v35) {
            size_t v37 = v35;
          }
          else {
            size_t v37 = v23;
          }
          int v38 = memcmp(v36, p_s, v37);
          BOOL v39 = v35 >= v23;
          if (v38) {
            BOOL v39 = v38 >= 0;
          }
          if (v39) {
            break;
          }
        }
        BOOL v27 = ++v21 < v22;
        v26 += 48;
        if (v25 == v21)
        {
          int v40 = 0;
          BOOL negate = 0;
          goto LABEL_180;
        }
      }
      BOOL negate = 1;
      int v40 = 5;
LABEL_180:
      p_traits = &this->__traits_;
      char v19 = v116;
    }
    else
    {
      BOOL v27 = 0;
      int v40 = 0;
      BOOL negate = 0;
    }
    if (v19 < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (v27) {
      goto LABEL_211;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_215:
    if ((char)v126 < 0)
    {
      neg_masstd::string::size_type k = this->__neg_mask_;
    }
    else
    {
      masstd::string::size_type k = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v111 = tab[v126];
      if (((v111 & mask) != 0 || v126 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v126) & 0x80000000) == 0
        && ((tab[HIBYTE(v126)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v126) == 95))
      {
        goto LABEL_233;
      }
      neg_masstd::string::size_type k = this->__neg_mask_;
      if ((v111 & neg_mask) != 0 || v126 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_232:
        int v113 = negate;
LABEL_234:
        BOOL negate = v113;
        goto LABEL_235;
      }
    }
    if ((SHIBYTE(v126) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(v126)] & neg_mask) == 0)
      {
        int v113 = 1;
        if (HIBYTE(v126) != 95 || (neg_mask & 0x80) == 0) {
          goto LABEL_234;
        }
      }
      goto LABEL_232;
    }
LABEL_233:
    int v113 = 1;
    goto LABEL_234;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)p_traits, (char *)&v126, (char *)&v127);
  std::vector<std::string>::pointer v93 = this->__equivalences_.__begin_;
  uint64_t v94 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v95 = (char *)this->__equivalences_.__end_ - (char *)v93;
  if (!v95)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    goto LABEL_215;
  }
  uint64_t v96 = 0;
  unint64_t v97 = v95 / 24;
  long long v98 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v99 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v99 = __s.__r_.__value_.__l.__size_;
  }
  if (v97 <= 1) {
    uint64_t v100 = 1;
  }
  else {
    uint64_t v100 = v95 / 24;
  }
  BOOL v101 = 1;
  while (1)
  {
    BOOL v102 = &v93[v96];
    std::string::size_type v103 = HIBYTE(v102->__r_.__value_.__r.__words[2]);
    int v104 = (char)v103;
    if ((v103 & 0x80u) != 0) {
      std::string::size_type v103 = v102->__r_.__value_.__l.__size_;
    }
    if (v99 != v103) {
      goto LABEL_206;
    }
    uint64_t v105 = v104 >= 0 ? &v93[v96] : (std::string *)v102->__r_.__value_.__r.__words[0];
    if ((v94 & 0x80) == 0) {
      break;
    }
    unint64_t v121 = v97;
    uint64_t v124 = v94;
    int v108 = memcmp((const void *)v98, v105, *((size_t *)&v98 + 1));
    unint64_t v97 = v121;
    uint64_t v94 = v124;
    if (!v108)
    {
      int v40 = 5;
      BOOL negate = 1;
      goto LABEL_209;
    }
LABEL_206:
    BOOL v101 = ++v96 < v97;
    if (v96 == v100)
    {
      int v40 = 0;
      goto LABEL_208;
    }
  }
  if (!v94)
  {
    BOOL negate = 1;
    if (v101) {
      goto LABEL_235;
    }
    goto LABEL_215;
  }
  unint64_t v106 = &__s;
  uint64_t v107 = v94;
  do
  {
    if (v106->__r_.__value_.__s.__data_[0] != v105->__r_.__value_.__s.__data_[0]) {
      goto LABEL_206;
    }
    unint64_t v106 = (std::string *)((char *)v106 + 1);
    uint64_t v105 = (std::string *)((char *)v105 + 1);
    --v107;
  }
  while (v107);
  BOOL negate = 1;
  int v40 = 5;
LABEL_208:
  if ((v94 & 0x80) != 0) {
LABEL_209:
  }
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!v101) {
    goto LABEL_215;
  }
LABEL_211:
  if (v40)
  {
LABEL_235:
    uint64_t v8 = 2;
    goto LABEL_236;
  }
  uint64_t v8 = 2;
LABEL_67:
  unsigned __int8 v42 = *a2->__current_;
  v127.__r_.__value_.__s.__data_[0] = v42;
  if (this->__icase_)
  {
    unsigned __int8 v42 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v42);
    v127.__r_.__value_.__s.__data_[0] = v42;
  }
  std::vector<char>::pointer v43 = this->__chars_.__begin_;
  unint64_t v44 = this->__chars_.__end_ - v43;
  if (v44)
  {
    if (v44 <= 1) {
      unint64_t v44 = 1;
    }
    while (1)
    {
      int v45 = *v43++;
      if (v45 == v42) {
        break;
      }
      if (!--v44) {
        goto LABEL_74;
      }
    }
LABEL_167:
    BOOL negate = 1;
    goto LABEL_236;
  }
LABEL_74:
  std::regex_traits<char>::char_class_type v46 = this->__neg_mask_;
  if (v46 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v42 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v42] & v46) == 0) {
      int v47 = (v42 == 95) & (v46 >> 7);
    }
    else {
      LOBYTE(v47) = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v49 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v42, end - this->__neg_chars_.__begin_);
    unint64_t v50 = v49 ? v49 : end;
    if ((v47 & 1) == 0 && v50 == end) {
      goto LABEL_167;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v51 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v52 = this->__ranges_.__end_;
  if (v51 != v52)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v127, &v127.__r_.__value_.__s.__data_[1]);
      std::vector<std::pair<std::string, std::string>>::pointer v51 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v52 = this->__ranges_.__end_;
      unsigned int v53 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else
    {
      unsigned int v53 = 1;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v42;
    }
    int64_t v54 = (char *)v52 - (char *)v51;
    if (v54)
    {
      uint64_t v122 = v8;
      BOOL v119 = negate;
      uint64_t v55 = 0;
      unint64_t v56 = v54 / 48;
      char v117 = v53;
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v57 = v53;
      }
      else {
        std::string::size_type v57 = __s.__r_.__value_.__l.__size_;
      }
      if ((v53 & 0x80u) == 0) {
        uint64_t v58 = &__s;
      }
      else {
        uint64_t v58 = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      if (v56 <= 1) {
        uint64_t v59 = 1;
      }
      else {
        uint64_t v59 = v54 / 48;
      }
      char v60 = (unsigned __int8 *)&v51->second.__r_.__value_.__r.__words[2] + 7;
      BOOL v61 = 1;
      while (1)
      {
        int v62 = (char)*(v60 - 24);
        if (v62 >= 0) {
          size_t v63 = *(v60 - 24);
        }
        else {
          size_t v63 = *(void *)(v60 - 39);
        }
        if (v62 >= 0) {
          uint64_t v64 = (char *)(v60 - 47);
        }
        else {
          uint64_t v64 = *(char **)(v60 - 47);
        }
        if (v63 >= v57) {
          size_t v65 = v57;
        }
        else {
          size_t v65 = v63;
        }
        int v66 = memcmp(v58, v64, v65);
        BOOL v67 = v57 >= v63;
        if (v66) {
          BOOL v67 = v66 >= 0;
        }
        if (v67)
        {
          int v68 = (char)*v60;
          if (v68 >= 0) {
            size_t v69 = *v60;
          }
          else {
            size_t v69 = *(void *)(v60 - 15);
          }
          if (v68 >= 0) {
            unint64_t v70 = (char *)(v60 - 23);
          }
          else {
            unint64_t v70 = *(char **)(v60 - 23);
          }
          if (v57 >= v69) {
            size_t v71 = v69;
          }
          else {
            size_t v71 = v57;
          }
          int v72 = memcmp(v70, v58, v71);
          BOOL v73 = v69 >= v57;
          if (v72) {
            BOOL v73 = v72 >= 0;
          }
          if (v73) {
            break;
          }
        }
        BOOL v61 = ++v55 < v56;
        v60 += 48;
        if (v59 == v55)
        {
          BOOL negate = v119;
          goto LABEL_130;
        }
      }
      BOOL negate = 1;
LABEL_130:
      uint64_t v8 = v122;
      if (v117 < 0) {
LABEL_131:
      }
        operator delete(__s.__r_.__value_.__l.__data_);
    }
    else
    {
      BOOL v61 = 0;
      if ((v53 & 0x80) != 0) {
        goto LABEL_131;
      }
    }
    if (v61) {
      goto LABEL_236;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_162;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v127, &v127.__r_.__value_.__s.__data_[1]);
  std::vector<std::string>::pointer v74 = this->__equivalences_.__begin_;
  uint64_t v75 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v76 = (char *)this->__equivalences_.__end_ - (char *)v74;
  if (!v76)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    goto LABEL_162;
  }
  uint64_t v123 = v8;
  uint64_t v77 = 0;
  unint64_t v78 = v76 / 24;
  long long v79 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v80 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v80 = __s.__r_.__value_.__l.__size_;
  }
  if (v78 <= 1) {
    uint64_t v81 = 1;
  }
  else {
    uint64_t v81 = v76 / 24;
  }
  BOOL v82 = 1;
  while (2)
  {
    uint64_t v83 = &v74[v77];
    std::string::size_type v84 = HIBYTE(v83->__r_.__value_.__r.__words[2]);
    int v85 = (char)v84;
    if ((v84 & 0x80u) != 0) {
      std::string::size_type v84 = v83->__r_.__value_.__l.__size_;
    }
    if (v80 != v84)
    {
LABEL_155:
      BOOL v82 = ++v77 < v78;
      if (v77 == v81)
      {
LABEL_156:
        uint64_t v8 = v123;
        if ((v75 & 0x80) == 0) {
          goto LABEL_158;
        }
        goto LABEL_157;
      }
      continue;
    }
    break;
  }
  if (v85 >= 0) {
    long long v86 = &v74[v77];
  }
  else {
    long long v86 = (std::string *)v83->__r_.__value_.__r.__words[0];
  }
  if ((v75 & 0x80) != 0)
  {
    BOOL v120 = negate;
    unint64_t v89 = v78;
    uint64_t v118 = v81;
    int v90 = memcmp((const void *)v79, v86, *((size_t *)&v79 + 1));
    uint64_t v81 = v118;
    unint64_t v78 = v89;
    BOOL negate = v120;
    if (!v90)
    {
      BOOL negate = 1;
      uint64_t v8 = v123;
LABEL_157:
      operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_158;
    }
    goto LABEL_155;
  }
  if (v75)
  {
    unint64_t v87 = &__s;
    uint64_t v88 = v75;
    while (v87->__r_.__value_.__s.__data_[0] == v86->__r_.__value_.__s.__data_[0])
    {
      unint64_t v87 = (std::string *)((char *)v87 + 1);
      long long v86 = (std::string *)((char *)v86 + 1);
      if (!--v88)
      {
        BOOL negate = 1;
        goto LABEL_156;
      }
    }
    goto LABEL_155;
  }
  BOOL negate = 1;
  uint64_t v8 = v123;
LABEL_158:
  if (!v82)
  {
LABEL_162:
    if (v127.__r_.__value_.__s.__data_[0] < 0) {
      goto LABEL_236;
    }
    std::regex_traits<char>::char_class_type v91 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v127.__r_.__value_.__s.__data_[0]] & v91) == 0)
    {
      int v92 = (v91 >> 7) & 1;
      if (v127.__r_.__value_.__s.__data_[0] != 95) {
        int v92 = 0;
      }
      if (v92 != 1) {
        goto LABEL_236;
      }
    }
    goto LABEL_167;
  }
LABEL_236:
  if (negate == this->__negate_)
  {
    first = 0;
    int v115 = -993;
  }
  else
  {
    a2->__current_ += v8;
    first = this->__first_;
    int v115 = -995;
  }
  a2->__do_ = v115;
  a2->__node_ = first;
}

void sub_1C5D6B700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    char v6 = __p;
  }
  else {
    char v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5D6B7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a3, a4, a4 - a3);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    char v7 = __p;
  }
  else {
    char v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a1;
      }
      else {
        uint64_t v10 = *(unsigned char **)a1;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5D6B900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  JUMPOUT(0x1C8796D70);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  char v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  std::basic_regex<char>::value_type locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  char v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  char v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  unint64_t v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C8796D70);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8796870](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5D6BC1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (unint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C8796D70);
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    unint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    unsigned int v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      uint64_t v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F21202B8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1C8796D70);
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F21202B8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2120270;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1C8796D70);
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2120270;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = (char *)a2;
  if (a2 != a3)
  {
    std::vector<char>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    int v9 = a2 + 1;
    int v8 = *a2;
    if ((a2 + 1 != a3 || v8 != 36)
      && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      goto LABEL_29;
    }
    int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
    if (v11 == v3)
    {
      if (*v3 == 46) {
        operator new();
      }
      int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, v3, (char *)a3);
    }
    if (v11 == v3 && v11 != (char *)a3)
    {
      if (v9 == a3 || *v3 != 92) {
        return v3;
      }
      int v12 = *v9;
      if (v12 == 40)
      {
        uint64_t v13 = (uint64_t)(v3 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v14 = a1->__marked_count_;
        do
        {
          char v15 = (unsigned __int8 *)v13;
          uint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v13, a3);
        }
        while ((unsigned __int8 *)v13 != v15);
        if (v15 == a3 || v15 + 1 == a3 || *v15 != 92 || v15[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        int v11 = (char *)(v15 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v14);
      }
      else
      {
        BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v12);
        uint64_t v17 = 2;
        if (!v16) {
          uint64_t v17 = 0;
        }
        int v11 = &v3[v17];
      }
    }
    int v9 = (unsigned __int8 *)v11;
    if (v11 != v3)
    {
LABEL_29:
      if (v9 == a3) {
        return (char *)a3;
      }
      size_t v18 = a1->__marked_count_ + 1;
      int v19 = *v9;
      if (v19 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return (char *)(v9 + 1);
      }
      if (v9 + 1 == a3 || v19 != 92 || v9[1] != 123) {
        return (char *)v9;
      }
      int v29 = 0;
      int64_t v20 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v9 + 2, a3, &v29);
      if (v20 == v9 + 2) {
LABEL_45:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v20 != a3)
      {
        uint64_t v21 = v20 + 1;
        int v22 = *v20;
        if (v22 == 44)
        {
          int v28 = -1;
          std::string::size_type v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v20 + 1, a3, &v28);
          if (v23 != a3 && v23 + 1 != a3 && *v23 == 92 && v23[1] == 125)
          {
            size_t v25 = v28;
            size_t v24 = v29;
            if (v28 == -1)
            {
              size_t v25 = -1;
            }
            else if (v28 < v29)
            {
              goto LABEL_45;
            }
            uint64_t v3 = (char *)&v23[2 * (v23[1] == 125)];
            uint64_t v26 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v26, v24, v25, end, marked_count + 1, v18, 1);
            return v3;
          }
        }
        else if (v21 != a3 && v22 == 92 && *v21 == 125)
        {
          uint64_t v3 = (char *)(v20 + 2);
          size_t v24 = v29;
          uint64_t v26 = a1;
          size_t v25 = v29;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3) {
    return a2;
  }
  int v6 = (char)*a2;
  int v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3) {
        goto LABEL_32;
      }
      int v16 = a2[1];
      if (v16 == 66)
      {
        BOOL v17 = 1;
      }
      else
      {
        if (v16 != 98) {
          goto LABEL_31;
        }
        BOOL v17 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(a1, v17);
      return a2 + 2;
    }
    if (v6 != 94) {
      goto LABEL_32;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    return a2 + 1;
  }
  BOOL v9 = v6 == 40;
  int v8 = (char *)(a2 + 1);
  BOOL v9 = !v9 || v8 == a3;
  if (!v9)
  {
    uint64_t v10 = (char *)(a2 + 2);
    if (*v8 == 63 && v10 != a3)
    {
      int v12 = *v10;
      if (v12 == 33)
      {
        std::regex_traits<char>::regex_traits(&v44.__traits_);
        memset(&v44.__flags_, 0, 40);
        v44.__flags_ = a1->__flags_;
        uint64_t v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v44, a2 + 3, a3);
        unsigned int marked_count = v44.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v44, 1, a1->__marked_count_);
        a1->__marked_count_ += marked_count;
        if (v13 == a3 || *v13 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
LABEL_30:
        std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v44.__traits_.__loc_);
        uint64_t result = (unsigned __int8 *)(v13 + 1);
        if (v13 + 1 != (char *)a2) {
          return result;
        }
        goto LABEL_31;
      }
      if (v12 == 61)
      {
        std::regex_traits<char>::regex_traits(&v44.__traits_);
        memset(&v44.__flags_, 0, 40);
        v44.__flags_ = a1->__flags_;
        uint64_t v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v44, a2 + 3, a3);
        unsigned int v14 = v44.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v44, 0, a1->__marked_count_);
        a1->__marked_count_ += v14;
        if (v13 == a3 || *v13 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        goto LABEL_30;
      }
    }
LABEL_31:
    int v7 = *a2;
  }
LABEL_32:
  std::vector<char>::pointer end = a1->__end_;
  unsigned int v20 = a1->__marked_count_;
  if ((char)v7 <= 91)
  {
    uint64_t result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_60;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3) {
          goto LABEL_98;
        }
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_count = &a1->__open_count_;
          ++a1->__open_count_;
          int v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, a2 + 3, a3);
          if (v22 == a3) {
            goto LABEL_98;
          }
          std::string::size_type v23 = v22;
          if (*v22 != 41) {
            goto LABEL_98;
          }
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
          unsigned int v29 = a1->__marked_count_;
          p_open_count = &a1->__open_count_;
          ++a1->__open_count_;
          uint64_t v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, a2 + 1, a3);
          if (v30 == a3 || (std::string::size_type v23 = v30, *v30 != 41)) {
LABEL_98:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v29);
        }
        --*p_open_count;
        size_t v25 = (unsigned __int8 *)(v23 + 1);
        goto LABEL_57;
      case '*':
      case '+':
        goto LABEL_65;
      case '.':
        operator new();
      default:
        if ((char)v7 == 91)
        {
          size_t v25 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, a3);
          goto LABEL_57;
        }
        if ((char)v7 != 63) {
          goto LABEL_60;
        }
        goto LABEL_65;
    }
  }
  uint64_t v24 = ((char)v7 - 92);
  if (v24 <= 0x21)
  {
    if (((1 << (v7 - 92)) & 0x300000006) != 0) {
      return a2;
    }
    if ((char)v7 == 92)
    {
      if (v7 != 92) {
        return a2;
      }
      uint64_t v26 = (char *)(a2 + 1);
      if (a2 + 1 == (unsigned __int8 *)a3) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
      }
      int v27 = *v26;
      unsigned int v28 = v27 - 48;
      if (v27 == 48)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v28);
LABEL_97:
        size_t v25 = a2 + 2;
        goto LABEL_61;
      }
      if ((v27 - 49) <= 8)
      {
        size_t v25 = a2 + 2;
        if (a2 + 2 == (unsigned __int8 *)a3)
        {
          size_t v25 = (unsigned __int8 *)a3;
        }
        else
        {
          while (1)
          {
            int v32 = *v25;
            if ((v32 - 48) > 9) {
              break;
            }
            if (v28 >= 0x19999999) {
              goto LABEL_99;
            }
            ++v25;
            unsigned int v28 = v32 + 10 * v28 - 48;
            if (v25 == (unsigned __int8 *)a3)
            {
              size_t v25 = (unsigned __int8 *)a3;
              break;
            }
          }
          if (!v28) {
LABEL_99:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
        }
        if (v28 > v20) {
          goto LABEL_99;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v28);
        if (v25 != (unsigned __int8 *)v26)
        {
LABEL_57:
          uint64_t result = a2;
          if (v25 == a2) {
            return result;
          }
          goto LABEL_61;
        }
      }
      int v33 = *v26;
      if (v33 > 99)
      {
        if (v33 == 119)
        {
          int v34 = a1;
          BOOL v35 = 0;
          goto LABEL_89;
        }
        if (v33 == 115)
        {
          unsigned __int8 v42 = a1;
          BOOL v43 = 0;
LABEL_95:
          started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v42, v43);
          int v39 = started->__mask_ | 0x4000;
          goto LABEL_96;
        }
        if (v33 != 100)
        {
LABEL_90:
          std::string::size_type v41 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
          if (v41 == (std::basic_regex<char> *)v26) {
            size_t v25 = a2;
          }
          else {
            size_t v25 = (unsigned __int8 *)v41;
          }
          goto LABEL_57;
        }
        uint64_t v36 = a1;
        BOOL v37 = 0;
      }
      else
      {
        if (v33 != 68)
        {
          if (v33 != 83)
          {
            if (v33 == 87)
            {
              int v34 = a1;
              BOOL v35 = 1;
LABEL_89:
              int v40 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v34, v35);
              v40->__mask_ |= 0x500u;
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v40, 95);
              goto LABEL_97;
            }
            goto LABEL_90;
          }
          unsigned __int8 v42 = a1;
          BOOL v43 = 1;
          goto LABEL_95;
        }
        uint64_t v36 = a1;
        BOOL v37 = 1;
      }
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v36, v37);
      int v39 = started->__mask_ | 0x400;
LABEL_96:
      started->__mask_ = v39;
      goto LABEL_97;
    }
    if (v24 == 31) {
LABEL_65:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
LABEL_60:
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  size_t v25 = a2 + 1;
LABEL_61:
  size_t v31 = a1->__marked_count_ + 1;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v25, (unsigned __int8 *)a3, end, v20 + 1, v31);
}

void sub_1C5D6CCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8796870](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5D6CD5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C8796D70);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  std::basic_regex<char>::value_type locale = this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)locale);
  }
  std::locale::~locale(this);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  memset(&v23, 0, 17);
  char v24 = 0;
  uint64_t v25 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v19.first = *(const char **)(a2 + 24);
  v19.second = v19.first;
  v19.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v19);
  uint64_t v20 = v5;
  uint64_t v21 = v5;
  char v22 = 0;
  std::vector<std::csub_match>::value_type v23 = v19;
  uint64_t v25 = v5;
  char v24 = 1;
  int v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::vector<std::csub_match>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::vector<std::csub_match>::pointer begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = *(_DWORD *)(a1 + 80);
  uint64_t v12 = *(void *)(a2 + 32);
  unsigned int v13 = 2;
  uint64_t v14 = 1;
  do
  {
    char v15 = &begin[v14];
    uint64_t v16 = v12 + 24 * (v11 + v13 - 2);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    uint64_t v14 = v13;
  }
  while (v10 > v13++);
LABEL_14:
  operator delete(begin);
}

void sub_1C5D6D198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F2120108;
  unsigned int v2 = (std::locale *)(a1 + 2);
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  std::vector<std::csub_match>::size_type v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  JUMPOUT(0x1C8796D70);
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F2120108;
  unsigned int v2 = (std::locale *)(a1 + 2);
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  std::vector<std::csub_match>::size_type v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 **)(a2 + 8);
  uint64_t v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  std::vector<std::csub_match>::size_type v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F21200C0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1C8796D70);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F21200C0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C8796D70);
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__end_state<char>::~__end_state()
{
}

void siri::dialogengine::DialogCurrency::compactDecimalLong(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCurrency::compactDecimalShort(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
}

void siri::dialogengine::DialogCurrency::symbol(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  uint64_t v6 = RequiredStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (RequiredStringParameter)
  {
LABEL_3:
    (*(void (**)(std::string *__return_ptr, void *))(*(void *)v6 + 48))(&__p, v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v20 = __p;
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (v15 < 0) {
      operator delete(v14);
    }
    if (v13 < 0) {
      operator delete(v12);
    }
    if (v11 < 0) {
      operator delete(v10);
    }
    if (v9 < 0) {
      operator delete(v8);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_22:
    siri::dialogengine::GetCurrencyInfo((uint64_t)&__p, this, (unsigned __int8 *)&v20, 0);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v20, "");
  goto LABEL_22;
}

void sub_1C5D6D93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void siri::dialogengine::DialogCurrency::unitName(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  uint64_t v6 = RequiredStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_3:
      (*(void (**)(std::string *__return_ptr, void *))(*(void *)v6 + 48))(&__p, v6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v9 = __p;
      }
      if (v22 < 0) {
        operator delete(v21);
      }
      if (v20 < 0) {
        operator delete(v19);
      }
      if (v18 < 0) {
        operator delete(v17);
      }
      if (v16 < 0) {
        operator delete(v15);
      }
      if (v14 < 0) {
        operator delete(v13);
      }
      if (v12 < 0) {
        operator delete(v11);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::GetCurrencyInfo((uint64_t)&v8, this, (unsigned __int8 *)&v9, 0);
      siri::dialogengine::CreateJSONDoubleVal(v7, 1.0);
    }
  }
  else if (RequiredStringParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5D6DE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v59, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a54);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a33);
  siri::dialogengine::CurrencyInfo::~CurrencyInfo(&a35);
  if (a53 < 0) {
    operator delete(a48);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCurrency::subunitName(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  uint64_t v6 = RequiredStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_3:
      (*(void (**)(std::string *__return_ptr, void *))(*(void *)v6 + 48))(&__p, v6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v9 = __p;
      }
      if (v22 < 0) {
        operator delete(v21);
      }
      if (v20 < 0) {
        operator delete(v19);
      }
      if (v18 < 0) {
        operator delete(v17);
      }
      if (v16 < 0) {
        operator delete(v15);
      }
      if (v14 < 0) {
        operator delete(v13);
      }
      if (v12 < 0) {
        operator delete(v11);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::GetCurrencyInfo((uint64_t)&v8, this, (unsigned __int8 *)&v9, 0);
      siri::dialogengine::CreateJSONDoubleVal(v7, 1.0);
    }
  }
  else if (RequiredStringParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5D6E558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v59, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a54);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a33);
  siri::dialogengine::CurrencyInfo::~CurrencyInfo(&a35);
  if (a53 < 0) {
    operator delete(a48);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogCurrency::unitValue(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  Requireddouble NumberParameter = siri::dialogengine::GetRequiredNumberParameter((const void **)__p, (uint64_t)a2);
  int v5 = RequiredNumberParameter;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
LABEL_3:
    }
      operator new();
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5D6E864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void sub_1C5D6E8A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C5D6E8A0);
}

void siri::dialogengine::DialogCurrency::subunitValue(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  Requireddouble NumberParameter = siri::dialogengine::GetRequiredNumberParameter((const void **)__p, (uint64_t)a2);
  int v5 = RequiredNumberParameter;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
LABEL_3:
    }
      operator new();
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_1C5D6E9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8796D70](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FilterDialogForModeAndSettings(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  v134 = 0;
  long long v135 = 0uLL;
  uint64_t v10 = *(unsigned __int8 *)(a6 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a6 + 8);
  }
  if (v10)
  {
    std::operator+<char>();
    char v11 = std::string::append(&v133, "'");
    char v12 = (void *)v11->__r_.__value_.__r.__words[0];
    *(void *)uint64_t v136 = v11->__r_.__value_.__l.__size_;
    *(void *)&v136[7] = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v135) < 0) {
      operator delete(v134);
    }
    v134 = v12;
    *(void *)&long long v135 = *(void *)v136;
    *(void *)((char *)&v135 + 7) = *(void *)&v136[7];
    HIBYTE(v135) = v13;
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v133.__r_.__value_.__l.__data_);
    }
  }
  if ((a2 - 1) > 3) {
    char v14 = "";
  }
  else {
    char v14 = off_1E651E420[(a2 - 1)];
  }
  std::string::basic_string[abi:ne180100]<0>(&v133, v14);
  char v16 = &v134;
  if (v135 < 0) {
    char v16 = (void **)v134;
  }
  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v17 = &v133;
  }
  else {
    char v17 = (std::string *)v133.__r_.__value_.__r.__words[0];
  }
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Filtering dialog%s according to response mode '%s'", v15, v16, v17);
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1))
  {
    if (a3) {
      char v19 = "true";
    }
    else {
      char v19 = "false";
    }
    std::string::basic_string[abi:ne180100]<0>(v136, v19);
    if (v137 >= 0) {
      uint64_t v21 = v136;
    }
    else {
      uint64_t v21 = *(unsigned char **)v136;
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"alwaysDisplayDialog = %s", v20, v21);
    if (v137 < 0) {
      operator delete(*(void **)v136);
    }
    if (a4) {
      char v22 = "true";
    }
    else {
      char v22 = "false";
    }
    std::string::basic_string[abi:ne180100]<0>(v136, v22);
    if (v137 >= 0) {
      char v24 = v136;
    }
    else {
      char v24 = *(unsigned char **)v136;
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"printSupportingDialogInDisplayModes = %s", v23, v24);
    if (v137 < 0) {
      operator delete(*(void **)v136);
    }
    if (a5) {
      uint64_t v25 = "true";
    }
    else {
      uint64_t v25 = "false";
    }
    std::string::basic_string[abi:ne180100]<0>(v136, v25);
    if (v137 >= 0) {
      int v27 = v136;
    }
    else {
      int v27 = *(unsigned char **)v136;
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"containsVisual = %s", v26, v27);
    if (v137 < 0) {
      operator delete(*(void **)v136);
    }
    unint64_t v28 = 0;
    int v29 = a5 ^ 1 | a3;
    int v30 = v29 | a4;
    while (v28 < (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1))
    {
      switch((int)a2)
      {
        case 1:
          (*(void (**)(uint64_t *, unint64_t))(*a1 + 120))(a1, v28);
          int v32 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
          std::string::size_type v33 = v133.__r_.__value_.__r.__words[0];
          (*(void (**)(unsigned char *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v136, a1, v28);
          if (v32 >= 0) {
            BOOL v35 = &v133;
          }
          else {
            BOOL v35 = (std::string *)v33;
          }
          if (v137 >= 0) {
            uint64_t v36 = v136;
          }
          else {
            uint64_t v36 = *(unsigned char **)v136;
          }
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering removed SUPPORTING dialog with id '%s'", v34, v35, v36);
          if (v137 < 0) {
            operator delete(*(void **)v136);
          }
          (*(void (**)(uint64_t *, unint64_t, uint64_t))(*a1 + 136))(a1, v28, 1);
          int v37 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
          std::string::size_type v38 = v133.__r_.__value_.__r.__words[0];
          (*(void (**)(unsigned char *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v136, a1, v28);
          if (v37 >= 0) {
            int v40 = &v133;
          }
          else {
            int v40 = (std::string *)v38;
          }
          if (v137 >= 0) {
            std::string::size_type v41 = v136;
          }
          else {
            std::string::size_type v41 = *(unsigned char **)v136;
          }
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering disallowed printing dialog with id '%s' due to mode (set spokenOnly = true)", v39, v40, v41);
          goto LABEL_124;
        case 2:
          (*(void (**)(uint64_t *, unint64_t))(*a1 + 120))(a1, v28);
          int v42 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
          std::string::size_type v43 = v133.__r_.__value_.__r.__words[0];
          (*(void (**)(unsigned char *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v136, a1, v28);
          if (v42 >= 0) {
            int v45 = &v133;
          }
          else {
            int v45 = (std::string *)v43;
          }
          if (v137 >= 0) {
            std::regex_traits<char>::char_class_type v46 = v136;
          }
          else {
            std::regex_traits<char>::char_class_type v46 = *(unsigned char **)v136;
          }
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering removed SUPPORTING dialog with id '%s'", v44, v45, v46);
          if (v137 < 0)
          {
            operator delete(*(void **)v136);
            if (!v29) {
              goto LABEL_126;
            }
          }
          else if (!v29)
          {
            goto LABEL_126;
          }
          (*(void (**)(uint64_t *, unint64_t, void))(*a1 + 136))(a1, v28, 0);
          int v73 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
          std::string::size_type v74 = v133.__r_.__value_.__r.__words[0];
          (*(void (**)(unsigned char *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v136, a1, v28);
          if (v73 >= 0) {
            int64_t v76 = &v133;
          }
          else {
            int64_t v76 = (std::string *)v74;
          }
          if (v137 >= 0) {
            uint64_t v77 = v136;
          }
          else {
            uint64_t v77 = *(unsigned char **)v136;
          }
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering allowed printing dialog with id '%s' due to user setting (set spokenOnly = false)", v75, v76, v77);
          goto LABEL_124;
        case 3:
          (*(void (**)(uint64_t *, unint64_t))(*a1 + 112))(a1, v28);
          int v47 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
          std::string::size_type v48 = v133.__r_.__value_.__r.__words[0];
          (*(void (**)(unsigned char *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v136, a1, v28);
          if (v47 >= 0) {
            unint64_t v50 = &v133;
          }
          else {
            unint64_t v50 = (std::string *)v48;
          }
          if (v137 >= 0) {
            std::vector<std::pair<std::string, std::string>>::pointer v51 = v136;
          }
          else {
            std::vector<std::pair<std::string, std::string>>::pointer v51 = *(unsigned char **)v136;
          }
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering removed FULL dialog with id '%s'", v49, v50, v51);
          if (v137 < 0)
          {
            operator delete(*(void **)v136);
            if (!v30) {
              goto LABEL_126;
            }
          }
          else if (!v30)
          {
            goto LABEL_126;
          }
          (*(void (**)(uint64_t *, unint64_t, void))(*a1 + 136))(a1, v28, 0);
          int v78 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
          std::string::size_type v79 = v133.__r_.__value_.__r.__words[0];
          (*(void (**)(unsigned char *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v136, a1, v28);
          if (v78 >= 0) {
            int v66 = &v133;
          }
          else {
            int v66 = (std::string *)v79;
          }
          if (v137 >= 0) {
            BOOL v67 = v136;
          }
          else {
            BOOL v67 = *(unsigned char **)v136;
          }
          goto LABEL_123;
        case 4:
          uint64_t v52 = *a1;
          if (v30)
          {
            (*(void (**)(uint64_t *, unint64_t))(v52 + 112))(a1, v28);
            int v53 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
            std::string::size_type v54 = v133.__r_.__value_.__r.__words[0];
            (*(void (**)(unsigned char *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v136, a1, v28);
            if (v53 >= 0) {
              unint64_t v56 = &v133;
            }
            else {
              unint64_t v56 = (std::string *)v54;
            }
            if (v137 >= 0) {
              std::string::size_type v57 = v136;
            }
            else {
              std::string::size_type v57 = *(unsigned char **)v136;
            }
            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering removed FULL dialog with id '%s' due to pattern setting, user setting and/or lack of visual", v55, v56, v57);
            if (v137 < 0) {
              operator delete(*(void **)v136);
            }
            (*(void (**)(uint64_t *, unint64_t, uint64_t))(*a1 + 128))(a1, v28, 1);
            int v58 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
            std::string::size_type v59 = v133.__r_.__value_.__r.__words[0];
            (*(void (**)(unsigned char *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v136, a1, v28);
            if (v58 >= 0) {
              BOOL v61 = &v133;
            }
            else {
              BOOL v61 = (std::string *)v59;
            }
            if (v137 >= 0) {
              int v62 = v136;
            }
            else {
              int v62 = *(unsigned char **)v136;
            }
            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering disallowed speaking for dialog with id '%s' due to pattern setting, user setting and/or lack of visual (set printOnly = true)", v60, v61, v62);
            if (v137 < 0) {
              operator delete(*(void **)v136);
            }
            (*(void (**)(uint64_t *, unint64_t, void))(*a1 + 136))(a1, v28, 0);
            int v63 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
            std::string::size_type v64 = v133.__r_.__value_.__r.__words[0];
            (*(void (**)(unsigned char *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v136, a1, v28);
            if (v63 >= 0) {
              int v66 = &v133;
            }
            else {
              int v66 = (std::string *)v64;
            }
            if (v137 >= 0) {
              BOOL v67 = v136;
            }
            else {
              BOOL v67 = *(unsigned char **)v136;
            }
LABEL_123:
            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering allowed printing dialog with id '%s' due to pattern setting, user setting and/or lack of visual (set spokenOnly = false)", v65, v66, v67);
          }
          else
          {
            (*(void (**)(uint64_t *, unint64_t))(v52 + 144))(a1, v28);
            int v68 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
            std::string::size_type v69 = v133.__r_.__value_.__r.__words[0];
            (*(void (**)(unsigned char *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v136, a1, v28);
            if (v68 >= 0) {
              size_t v71 = &v133;
            }
            else {
              size_t v71 = (std::string *)v69;
            }
            if (v137 >= 0) {
              int v72 = v136;
            }
            else {
              int v72 = *(unsigned char **)v136;
            }
            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering completely removed dialog with id '%s'", v70, v71, v72);
          }
LABEL_124:
          if (v137 < 0) {
            operator delete(*(void **)v136);
          }
LABEL_126:
          ++v28;
          break;
        default:
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unrecognized response mode: %d", v31, a2);
          goto LABEL_126;
      }
    }
    (*(void (**)(uint64_t *))(*a1 + 152))(a1);
    uint64_t v81 = &v134;
    if (v135 < 0) {
      uint64_t v81 = (void **)v134;
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Done filtering dialog%s", v80, v81);
    if ((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1))
    {
      unint64_t v83 = 0;
      std::string::size_type v84 = "unset";
      while (v83 < (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1))
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t *, unint64_t))(*a1 + 24))(v136, a1, v83);
        if (v137 >= 0) {
          int v85 = v136;
        }
        else {
          int v85 = *(unsigned char **)v136;
        }
        (*(void (**)(void **__return_ptr, uint64_t *, unint64_t))(*a1 + 32))(v131, a1, v83);
        if (v132 >= 0) {
          long long v86 = v131;
        }
        else {
          long long v86 = (void **)v131[0];
        }
        (*(void (**)(void **__return_ptr, uint64_t *, unint64_t))(*a1 + 40))(v129, a1, v83);
        if (v130 >= 0) {
          unint64_t v87 = v129;
        }
        else {
          unint64_t v87 = (void **)v129[0];
        }
        (*(void (**)(void **__return_ptr, uint64_t *, unint64_t))(*a1 + 48))(v127, a1, v83);
        if (v128 >= 0) {
          uint64_t v88 = v127;
        }
        else {
          uint64_t v88 = (void **)v127[0];
        }
        (*(void (**)(void **__return_ptr, uint64_t *, unint64_t))(*a1 + 56))(v125, a1, v83);
        if (v126 >= 0) {
          unint64_t v89 = v125;
        }
        else {
          unint64_t v89 = (void **)v125[0];
        }
        __int16 v90 = (*(uint64_t (**)(uint64_t *, unint64_t))(*a1 + 64))(a1, v83);
        std::regex_traits<char>::char_class_type v91 = "true";
        if (!(_BYTE)v90) {
          std::regex_traits<char>::char_class_type v91 = "false";
        }
        if ((v90 & 0xFF00) != 0) {
          int v92 = (char *)v91;
        }
        else {
          int v92 = (char *)v84;
        }
        std::string::basic_string[abi:ne180100]<0>(v123, v92);
        if (v124 >= 0) {
          std::vector<std::string>::pointer v93 = v123;
        }
        else {
          std::vector<std::string>::pointer v93 = (void **)v123[0];
        }
        __int16 v94 = (*(uint64_t (**)(uint64_t *, unint64_t))(*a1 + 72))(a1, v83);
        int64_t v95 = "true";
        if (!(_BYTE)v94) {
          int64_t v95 = "false";
        }
        if ((v94 & 0xFF00) != 0) {
          uint64_t v96 = (char *)v95;
        }
        else {
          uint64_t v96 = (char *)v84;
        }
        std::string::basic_string[abi:ne180100]<0>(v121, v96);
        long long v112 = v93;
        if (v122 >= 0) {
          unint64_t v97 = v121;
        }
        else {
          unint64_t v97 = (void **)v121[0];
        }
        (*(void (**)(void **__return_ptr, uint64_t *, unint64_t))(*a1 + 80))(v119, a1, v83);
        int v108 = v97;
        unint64_t v109 = v87;
        long long v110 = v86;
        if (v120 >= 0) {
          long long v98 = v119;
        }
        else {
          long long v98 = (void **)v119[0];
        }
        (*(void (**)(void **__return_ptr, uint64_t *, unint64_t))(*a1 + 88))(v117, a1, v83);
        std::string::size_type v99 = v85;
        uint64_t v100 = v84;
        if (v118 >= 0) {
          BOOL v101 = v117;
        }
        else {
          BOOL v101 = (void **)v117[0];
        }
        (*(void (**)(void **__return_ptr, uint64_t *, unint64_t))(*a1 + 96))(v115, a1, v83);
        int v102 = v116;
        std::string::size_type v103 = (void **)v115[0];
        (*(void (**)(void **__return_ptr, uint64_t *, unint64_t))(*a1 + 104))(__p, a1, v83);
        uint64_t v105 = v115;
        if (v102 < 0) {
          uint64_t v105 = v103;
        }
        unint64_t v106 = __p;
        if (v114 < 0) {
          unint64_t v106 = (void **)__p[0];
        }
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Dialog ID: '%s'\nFull print: '%s'\nFull speak: '%s'\nSupporting print: '%s'\nSupporting speak: '%s'\nspokenOnly: %s\nprintOnly: %s\nRedacted full print: '%s'\nRedacted full speak: '%s'\nRedacted supporting print: '%s'\nRedacted supporting speak: '%s'", v104, v99, v110, v109, v88, v89, v112, v108,
          v98,
          v101,
          v105,
          v106);
        std::string::size_type v84 = v100;
        if (v114 < 0) {
          operator delete(__p[0]);
        }
        if (v116 < 0) {
          operator delete(v115[0]);
        }
        if (v118 < 0) {
          operator delete(v117[0]);
        }
        if (v120 < 0) {
          operator delete(v119[0]);
        }
        if (v122 < 0) {
          operator delete(v121[0]);
        }
        if (v124 < 0) {
          operator delete(v123[0]);
        }
        if (v126 < 0) {
          operator delete(v125[0]);
        }
        if (v128 < 0) {
          operator delete(v127[0]);
        }
        if (v130 < 0) {
          operator delete(v129[0]);
        }
        if (v132 < 0) {
          operator delete(v131[0]);
        }
        if (v137 < 0) {
          operator delete(*(void **)v136);
        }
        ++v83;
      }
    }
    else
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"All dialog was removed", v82);
    }
  }
  else
  {
    uint64_t v107 = &v134;
    if (v135 < 0) {
      uint64_t v107 = (void **)v134;
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"There is no dialog to filter%s", v18, v107);
  }
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v135) < 0) {
    operator delete(v134);
  }
}

void sub_1C5D6F8B8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(a1);
}

void sub_1C5D6FEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (*(char *)(v23 - 49) < 0) {
    operator delete(*(void **)(v23 - 72));
  }

  _Unwind_Resume(a1);
}

void sub_1C5D6FFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D700A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C5D70190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D70368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1C5D704D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1C5D70584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5D705E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5D70758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  siri::dialogengine::UpdatableDir::~UpdatableDir(&a18);

  _Unwind_Resume(a1);
}

void siri::dialogengine::UpdatableDir::~UpdatableDir(void **this)
{
  unsigned int v2 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  unsigned int v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void sub_1C5D70950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }

  _Unwind_Resume(a1);
}

void sub_1C5D70B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  siri::dialogengine::UpdatableDir::~UpdatableDir(&a18);

  _Unwind_Resume(a1);
}

void sub_1C5D70CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }

  _Unwind_Resume(a1);
}

void sub_1C5D70DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5D70F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  if (a28 < 0) {
    operator delete(a23);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D7118C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  siri::dialogengine::TestSuite::~TestSuite((siri::dialogengine::TestSuite *)(v35 - 88));

  _Unwind_Resume(a1);
}

void std::vector<siri::dialogengine::TestCase>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = (void **)**a1;
  if (v2)
  {
    std::vector<std::csub_match>::size_type v4 = (void **)v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        siri::dialogengine::TestCase::~TestCase(v4 - 32);
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void siri::dialogengine::TestSuite::~TestSuite(siri::dialogengine::TestSuite *this)
{
  unsigned int v2 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  unsigned int v2 = (void **)((char *)this + 8);
  std::vector<siri::dialogengine::TestCase>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void siri::dialogengine::TestCase::~TestCase(void **this)
{
  unsigned int v2 = this + 29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  unsigned int v2 = this + 25;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void sub_1C5D7152C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::TestSuite::~TestSuite((siri::dialogengine::TestSuite *)(v34 - 88));

  _Unwind_Resume(a1);
}

void sub_1C5D7161C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5D71694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5D71704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5D717D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5D71C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (*(char *)(v56 - 225) < 0) {
    operator delete(*(void **)(v56 - 248));
  }

  _Unwind_Resume(a1);
}

void sub_1C5D71F6C(_Unwind_Exception *a1)
{
  if (v4) {

  }
  _Unwind_Resume(a1);
}

id CATExecutor(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, void *a10)
{
  id v17 = a1;
  id v18 = a3;
  id v19 = a4;
  id v20 = a5;
  id v31 = a10;
  LODWORD(v30) = a9;
  uint64_t v21 = +[CATCommonApi CreateDEExecutor:v17 templateDir:a2 catId:v18 paramsXML:v19 localeXML:v20 parameters:a6 globalContext:a7 callback:a8 options:v30];
  if (v17)
  {
    id v22 = [v17 bundleIdentifier];
    std::string::basic_string[abi:ne180100]<0>(v37, (char *)[v22 UTF8String]);
    id v23 = [v21 templateDir];
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v23 UTF8String]);
    siri::dialogengine::GradingAllowListFactory::RegisterBundle((char *)v37, (long long *)__p);
    if (v36 < 0) {
      operator delete(__p[0]);
    }

    if (v38 < 0) {
      operator delete(v37[0]);
    }
  }
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  std::string v32[2] = ___ZL11CATExecutorP8NSBundleP5NSURLP8NSStringS4_S4_P12NSDictionaryP11objc_objectPU22objcproto11CATCallback11objc_objectiU13block_pointerFvPK9CATResultPK7NSErrorE_block_invoke;
  v32[3] = &unk_1E651F7F8;
  id v24 = v18;
  id v33 = v24;
  id v25 = v31;
  id v34 = v25;
  uint64_t v26 = (void *)MEMORY[0x1C8797450](v32);
  if (v25)
  {
    if (v24) {
      [v21 executeWithCompletionBlock:v26];
    }
    else {
      [v21 executeWithParams:v19 locale:v20 completionBlock:v26];
    }
    unint64_t v28 = 0;
  }
  else
  {
    int v27 = [v21 execute];
    unint64_t v28 = +[CATCommonApi DEResultToCATResult:v27 catId:v24];
  }
  return v28;
}

{
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v30;
  id v31;
  void v32[4];
  id v33;
  id v34;
  void *__p[2];
  char v36;
  void *v37[2];
  char v38;
  uint64_t vars8;

  id v17 = a1;
  id v18 = a3;
  id v19 = a4;
  id v20 = a5;
  id v31 = a10;
  LODWORD(v30) = a9;
  uint64_t v21 = +[CATCommonApi CreateDEExecutor:v17 templateDir:a2 catId:v18 paramsXML:v19 localeXML:v20 parameters:a6 globalContext:a7 callback:a8 options:v30];
  if (v17)
  {
    id v22 = [v17 bundleIdentifier];
    std::string::basic_string[abi:ne180100]<0>(v37, (char *)[v22 UTF8String]);
    id v23 = [v21 templateDir];
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v23 UTF8String]);
    siri::dialogengine::GradingAllowListFactory::RegisterBundle((char *)v37, (long long *)__p);
    if (v36 < 0) {
      operator delete(__p[0]);
    }

    if (v38 < 0) {
      operator delete(v37[0]);
    }
  }
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  std::string v32[2] = ___ZL11CATExecutorP8NSBundleP5NSURLP8NSStringS4_S4_P12NSDictionaryP11objc_objectPU22objcproto11CATCallback11objc_objectiU13block_pointerFvPK21DialogExecutionResultPK7NSErrorE_block_invoke;
  v32[3] = &unk_1E651F7F8;
  id v24 = v18;
  id v33 = v24;
  id v25 = v31;
  id v34 = v25;
  uint64_t v26 = (void *)MEMORY[0x1C8797450](v32);
  if (v25)
  {
    if (v24) {
      [v21 executeWithCompletionBlock:v26];
    }
    else {
      [v21 executeWithParams:v19 locale:v20 completionBlock:v26];
    }
    unint64_t v28 = 0;
  }
  else
  {
    int v27 = [v21 execute];
    unint64_t v28 = +[CATCommonApi DEResultToDialogExecutionResult:v27 catId:v24];
  }
  return v28;
}

void sub_1C5D72254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  _Unwind_Resume(a1);
}

void ___ZL11CATExecutorP8NSBundleP5NSURLP8NSStringS4_S4_P12NSDictionaryP11objc_objectPU22objcproto11CATCallback11objc_objectiU13block_pointerFvPK9CATResultPK7NSErrorE_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  uint64_t v3 = +[CATCommonApi DEResultToCATResult:catId:](CATCommonApi, "DEResultToCATResult:catId:");
  std::vector<std::csub_match>::size_type v4 = [v10 status];
  char v5 = [v4 isEqualToString:@"success"];

  uint64_t v6 = *(void *)(a1 + 40);
  if (v5)
  {
    char v7 = +[CATCommonApi NSErrorFromString:&stru_1F2127290 errorCode:0];
    (*(void (**)(uint64_t, void *, void *))(v6 + 16))(v6, v3, v7);
  }
  else
  {
    char v7 = [v10 error];
    uint64_t v8 = [v10 status];
    std::string v9 = +[CATCommonApi NSErrorFromString:v7 errorCode:v8];
    (*(void (**)(uint64_t, void *, void *))(v6 + 16))(v6, v3, v9);
  }
}

void sub_1C5D7242C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_KeyValue_Standard_Pair_KeyValue_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/KeyValue.pb.cc", a4);
  SnippetUI::KeyValue_Standard_Pair::KeyValue_Standard_Pair((SnippetUI::KeyValue_Standard_Pair *)&SnippetUI::_KeyValue_Standard_Pair_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_KeyValue_Standard_Pair_default_instance_, v4);
  qword_1EA3DAC50 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::KeyValue_Standard_Pair *SnippetUI::KeyValue_Standard_Pair::KeyValue_Standard_Pair(SnippetUI::KeyValue_Standard_Pair *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F211A7D8;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load_explicit(scc_info_KeyValue_Standard_Pair_KeyValue_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_KeyValue_Standard_Pair_KeyValue_2eproto);
  }
  *((void *)this + 5) = 0;
  return this;
}

void sub_1C5D72708(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::KeyValue_Standard_Pair::GetMetadata(SnippetUI::KeyValue_Standard_Pair *this)
{
  return file_level_metadata_KeyValue_2eproto;
}

uint64_t SnippetUI::KeyValue_Standard_Pair::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void SnippetUI::KeyValue_Standard_Pair::MergeFrom(int **this, int **lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/KeyValue.pb.cc", 306);
    std::vector<std::csub_match>::size_type v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::KeyValue_Standard_Pair::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
  }
}

void sub_1C5D7282C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::KeyValue_Standard_Pair::MergeFrom(int **this, int **a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/KeyValue.pb.cc", 321);
    std::vector<std::csub_match>::size_type v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  unint64_t v5 = (unint64_t)a2[1];
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  if (a2 != (int **)&SnippetUI::_KeyValue_Standard_Pair_default_instance_)
  {
    uint64_t v6 = (int **)a2[5];
    if (v6)
    {
      char v7 = (int **)this[5];
      if (!v7)
      {
        char v7 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        this[5] = (int *)v7;
        uint64_t v6 = (int **)a2[5];
      }
      if (v6) {
        uint64_t v8 = v6;
      }
      else {
        uint64_t v8 = (int **)&SnippetUI::_TextProperty_default_instance_;
      }
      SnippetUI::TextProperty::MergeFrom(v7, v8);
    }
  }
}

void sub_1C5D72914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    std::vector<std::csub_match>::size_type v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    uint64_t v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      char v13 = (int ***)(v6 + 8);
      char v14 = (int ***)v7;
      do
      {
        char v16 = *v13++;
        uint64_t v15 = v16;
        id v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::TextProperty>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      id v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      uint64_t v21 = (int ***)((char *)v8 + v20);
      id v22 = (int ***)(v20 + v6 + 8);
      do
      {
        id v23 = *v22++;
        id v24 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::TextProperty>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    uint64_t v26 = this[2];
    if (*v26 < v25) {
      *uint64_t v26 = v25;
    }
  }
}

void sub_1C5D72A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::TextProperty>::Merge(int **a1, int **a2)
{
}

void SnippetUI::KeyValue_Standard_Pair::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::KeyValue_Standard_Pair::Clear((SnippetUI::KeyValue_Standard_Pair *)this);
    SnippetUI::KeyValue_Standard_Pair::MergeFrom(this, a2);
  }
}

{
  uint64_t v2;

  if (a2 != this)
  {
    SnippetUI::KeyValue_Standard_Pair::Clear((SnippetUI::KeyValue_Standard_Pair *)this);
    SnippetUI::KeyValue_Standard_Pair::MergeFrom(this, a2);
  }
}

void SnippetUI::KeyValue_Standard_Pair::Clear(SnippetUI::KeyValue_Standard_Pair *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16);
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  char v4 = *((unsigned char *)this + 8);
  uint64_t v3 = (SnippetUI::KeyValue_Standard_Pair *)((char *)this + 8);
  *((void *)v3 + 4) = 0;
  if (v4)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
  }
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    uint64_t v3 = (SnippetUI::TextProperty **)(*(void *)(a1 + 16) + 8);
    do
    {
      char v4 = *v3++;
      SnippetUI::TextProperty::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1C5D72C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *SnippetUI::KeyValue_Standard_Pair::InternalSerializeWithCachedSizesToArray(SnippetUI::KeyValue_Standard_Pair *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v5 = (char *)a2;
  if (this != (SnippetUI::KeyValue_Standard_Pair *)&SnippetUI::_KeyValue_Standard_Pair_default_instance_)
  {
    char v7 = (SnippetUI::TextProperty *)*((void *)this + 5);
    if (v7)
    {
      if (*(void *)a3 <= (unint64_t)a2)
      {
        int v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        char v7 = (SnippetUI::TextProperty *)*((void *)this + 5);
      }
      *int v5 = 10;
      unsigned int v8 = *((_DWORD *)v7 + 15);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        unsigned int v10 = v8 >> 7;
        if (v8 >> 14)
        {
          int v11 = v5 + 2;
          do
          {
            uint64_t v12 = v11;
            *v11++ = v10 | 0x80;
            unsigned int v13 = v10 >> 7;
            unsigned int v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          uint64_t v9 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
          *int v11 = v13;
        }
        else
        {
          void v5[2] = v10;
          uint64_t v9 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v8;
        uint64_t v9 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      int v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v9, a3, a4);
    }
  }
  int v15 = *((_DWORD *)this + 6);
  if (v15)
  {
    int v16 = 0;
    while ((unint64_t)v5 < *(void *)a3)
    {
      if (v16 < 0) {
        goto LABEL_17;
      }
LABEL_18:
      if (*((_DWORD *)this + 6) <= v16)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v30, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        id v18 = google::protobuf::internal::LogMessage::operator<<(v30, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v29, (const char **)&v18->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v30[0].__r_.__value_.__l.__data_);
      }
      int v19 = *(SnippetUI::TextProperty **)(*((void *)this + 4) + 8 * v16 + 8);
      *int v5 = 18;
      unsigned int v20 = *((_DWORD *)v19 + 15);
      if (v20 > 0x7F)
      {
        v5[1] = v20 | 0x80;
        unsigned int v22 = v20 >> 7;
        if (v20 >> 14)
        {
          id v23 = v5 + 2;
          do
          {
            id v24 = v23;
            *v23++ = v22 | 0x80;
            unsigned int v25 = v22 >> 7;
            unsigned int v26 = v22 >> 14;
            v22 >>= 7;
          }
          while (v26);
          uint64_t v21 = (google::protobuf::UnknownFieldSet *)(v24 + 2);
          unsigned char *v23 = v25;
        }
        else
        {
          void v5[2] = v22;
          uint64_t v21 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v20;
        uint64_t v21 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      int v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v19, v21, a3, a4);
      if (++v16 == v15) {
        goto LABEL_31;
      }
    }
    int v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_18;
    }
LABEL_17:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v30, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    id v17 = google::protobuf::internal::LogMessage::operator<<(v30, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v29, (const char **)&v17->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v30[0].__r_.__value_.__l.__data_);
    goto LABEL_18;
  }
LABEL_31:
  uint64_t v27 = *((void *)this + 1);
  if ((v27 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v5;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v27 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
}

void sub_1C5D72EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::KeyValue_Standard_Pair::_InternalParse(SnippetUI::KeyValue_Standard_Pair *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  id v23 = a2;
  int v5 = (unsigned int *)((char *)this + 16);
  char v6 = (unint64_t *)((char *)this + 8);
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallbacstd::string::size_type k = (google::protobuf::internal *)((char *)v23 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v23;
    if ((*(char *)v23 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacstd::string::size_type k = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
      id v23 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacstd::string::size_type k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, v9);
    id v23 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v9 >> 3 == 2)
    {
      if (v9 != 18) {
        goto LABEL_12;
      }
      unsigned int v13 = (char *)TagFallback - 1;
LABEL_19:
      unsigned int v14 = (google::protobuf::internal *)(v13 + 1);
      id v23 = (google::protobuf::internal *)(v13 + 1);
      int v15 = (int *)*((void *)this + 4);
      if (v15)
      {
        uint64_t v16 = *((int *)this + 6);
        int v17 = *v15;
        if ((int)v16 < *v15)
        {
          *((_DWORD *)this + 6) = v16 + 1;
          id v18 = *(SnippetUI::TextProperty **)&v15[2 * v16 + 2];
          goto LABEL_26;
        }
        if (v17 == *((_DWORD *)this + 7))
        {
LABEL_24:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v17 + 1);
          int v15 = (int *)*((void *)this + 4);
          int v17 = *v15;
        }
        *int v15 = v17 + 1;
        id v18 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                   + 2));
        uint64_t v19 = *((void *)this + 4);
        uint64_t v20 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v20 + 1;
        *(void *)(v19 + 8 * v20 + 8) = v18;
        unsigned int v14 = v23;
LABEL_26:
        unsigned int v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v18, v14);
        id v23 = (google::protobuf::internal *)v13;
        if (!v13) {
          return 0;
        }
        if (*(void *)a3 <= (unint64_t)v13 || *v13 != 18) {
          continue;
        }
        goto LABEL_19;
      }
      int v17 = *((_DWORD *)this + 7);
      goto LABEL_24;
    }
    if (v9 >> 3 == 1 && v9 == 10)
    {
      uint64_t v21 = (SnippetUI::TextProperty *)*((void *)this + 5);
      if (!v21)
      {
        uint64_t v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((void *)this + 5) = v21;
        TagFallbacstd::string::size_type k = v23;
      }
      uint64_t v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v21, TagFallback);
      goto LABEL_33;
    }
LABEL_12:
    if (v9) {
      BOOL v11 = (v9 & 7) == 4;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      *((_DWORD *)a3 + 20) = v9 - 1;
      return TagFallback;
    }
    uint64_t v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_33:
    id v23 = (google::protobuf::internal *)v12;
    if (!v12) {
      return 0;
    }
  }
  return v23;
}

uint64_t SnippetUI::KeyValue_Standard_Pair::GetCachedSize(SnippetUI::KeyValue_Standard_Pair *this)
{
  return *((unsigned int *)this + 12);
}

char *SnippetUI::KeyValue_Standard_Pair::ByteSizeLong(SnippetUI::KeyValue_Standard_Pair *this)
{
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    char v4 = (SnippetUI::TextProperty **)(v3 + 8);
  }
  else {
    char v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * (void)v2;
    do
    {
      char v6 = *v4++;
      char v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (void)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (this != (SnippetUI::KeyValue_Standard_Pair *)&SnippetUI::_KeyValue_Standard_Pair_default_instance_)
  {
    unsigned int v8 = (SnippetUI::TextProperty *)*((void *)this + 5);
    if (v8)
    {
      uint64_t v9 = SnippetUI::TextProperty::ByteSizeLong(v8);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)&v9[(void)v2
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::KeyValue_Standard_Pair *)((char *)this + 8), v2, (_DWORD *)this + 12);
  }
  else
  {
    *((_DWORD *)this + 12) = v2;
    return (char *)v2;
  }
}

uint64_t SnippetUI::KeyValue_Standard_Pair::IsInitialized(SnippetUI::KeyValue_Standard_Pair *this)
{
  return 1;
}

SnippetUI::KeyValue_Standard_Pair *SnippetUI::KeyValue_Standard_Pair::New(SnippetUI::KeyValue_Standard_Pair *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard_Pair>(a2);
}

SnippetUI::KeyValue_Standard_Pair *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard_Pair>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::KeyValue_Standard_Pair *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::KeyValue_Standard_Pair>);
  }
  SnippetUI::KeyValue_Standard_Pair::KeyValue_Standard_Pair(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D73270(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40B18DE219);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::KeyValue_Standard_Pair>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::KeyValue_Standard_Pair *SnippetUI::KeyValue_Standard_Pair::New(SnippetUI::KeyValue_Standard_Pair *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard_Pair>(0);
}

void SnippetUI::KeyValue_Standard_Pair::~KeyValue_Standard_Pair(SnippetUI::KeyValue_Standard_Pair *this)
{
  SnippetUI::KeyValue_Standard_Pair::~KeyValue_Standard_Pair(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F211A7D8;
  if (this != (SnippetUI::KeyValue_Standard_Pair *)&SnippetUI::_KeyValue_Standard_Pair_default_instance_)
  {
    uint64_t v2 = *((void *)this + 5);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::KeyValue_Standard_Pair *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_KeyValue_Standard_KeyValue_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/KeyValue.pb.cc", a4);
  SnippetUI::KeyValue_Standard::KeyValue_Standard((SnippetUI::KeyValue_Standard *)&SnippetUI::_KeyValue_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_KeyValue_Standard_default_instance_, v4);
}

SnippetUI::KeyValue_Standard *SnippetUI::KeyValue_Standard::KeyValue_Standard(SnippetUI::KeyValue_Standard *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F211A898;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load_explicit(scc_info_KeyValue_Standard_KeyValue_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_KeyValue_Standard_KeyValue_2eproto);
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C5D7347C(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::KeyValue_Standard::GetMetadata(SnippetUI::KeyValue_Standard *this)
{
  return qword_1EA3D8508;
}

uint64_t SnippetUI::KeyValue_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void SnippetUI::KeyValue_Standard::MergeFrom(int **this, int **lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/KeyValue.pb.cc", 532);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::KeyValue_Standard::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
  }
}

void sub_1C5D735A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::KeyValue_Standard::MergeFrom(int **this, int **a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/KeyValue.pb.cc", 547);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  unint64_t v5 = (unint64_t)a2[1];
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::KeyValue_Standard_Pair>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  uint64_t v6 = (uint64_t)a2[5];
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      return;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    return;
  }
  uint64_t v9 = (std::string *)this[5];
  unsigned int v8 = (char *)(this + 5);
  char v7 = v9;
  if (v9 != (std::string *)v6)
  {
    if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v8, v6);
    }
    std::string::operator=(v7, (const std::string *)v6);
  }
}

void sub_1C5D73694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::KeyValue_Standard_Pair>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    char v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    unsigned int v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      unsigned int v13 = (int ***)(v6 + 8);
      unsigned int v14 = (int ***)v7;
      do
      {
        uint64_t v16 = *v13++;
        int v15 = v16;
        int v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::KeyValue_Standard_Pair>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      id v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      uint64_t v21 = (int ***)((char *)v8 + v20);
      unsigned int v22 = (int ***)(v20 + v6 + 8);
      do
      {
        id v23 = *v22++;
        id v24 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard_Pair>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::KeyValue_Standard_Pair>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    unsigned int v26 = this[2];
    if (*v26 < v25) {
      *unsigned int v26 = v25;
    }
  }
}

void sub_1C5D73804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::KeyValue_Standard_Pair>::Merge(int **a1, int **this)
{
}

void SnippetUI::KeyValue_Standard::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::KeyValue_Standard::Clear((SnippetUI::KeyValue_Standard *)this);
    SnippetUI::KeyValue_Standard::MergeFrom(this, a2);
  }
}

{
  uint64_t v2;

  if (a2 != this)
  {
    SnippetUI::KeyValue_Standard::Clear((SnippetUI::KeyValue_Standard *)this);
    SnippetUI::KeyValue_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::KeyValue_Standard::Clear(SnippetUI::KeyValue_Standard *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  else if (v2)
  {
    uint64_t v3 = (SnippetUI::KeyValue_Standard_Pair **)(*((void *)this + 4) + 8);
    do
    {
      char v4 = *v3++;
      SnippetUI::KeyValue_Standard_Pair::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  uint64_t v6 = *((void *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
  char v8 = *((unsigned char *)this + 8);
  char v7 = (SnippetUI::KeyValue_Standard *)((char *)this + 8);
  if (v8)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v7);
  }
}

void sub_1C5D73974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *SnippetUI::KeyValue_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::KeyValue_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    int v8 = 0;
    while ((unint64_t)a2 < *(void *)a3)
    {
      if (v8 < 0) {
        goto LABEL_5;
      }
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        uint64_t v10 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
      }
      int v11 = *(SnippetUI::KeyValue_Standard_Pair **)(*((void *)this + 4) + 8 * v8 + 8);
      *(unsigned char *)a2 = 10;
      unsigned int v12 = *((_DWORD *)v11 + 12);
      if (v12 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v12 | 0x80;
        unsigned int v14 = v12 >> 7;
        if (v12 >> 14)
        {
          int v15 = (char *)a2 + 2;
          do
          {
            uint64_t v16 = v15;
            *v15++ = v14 | 0x80;
            unsigned int v17 = v14 >> 7;
            unsigned int v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          unsigned int v13 = (google::protobuf::UnknownFieldSet *)(v16 + 2);
          *int v15 = v17;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v14;
          unsigned int v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v12;
        unsigned int v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::KeyValue_Standard_Pair::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7) {
        goto LABEL_19;
      }
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    char v9 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  int v19 = (google::protobuf::internal *)*((void *)this + 5);
  if (*((char *)v19 + 23) < 0)
  {
    uint64_t v20 = (const char *)*((void *)v19 + 1);
    if (!v20) {
      goto LABEL_25;
    }
    int v19 = *(google::protobuf::internal **)v19;
    goto LABEL_24;
  }
  uint64_t v20 = (const char *)*((unsigned __int8 *)v19 + 23);
  if (*((unsigned char *)v19 + 23))
  {
LABEL_24:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v19, v20, 1, (google::protobuf::internal *)"SnippetUI.KeyValue_Standard.component_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 5), (char *)a2);
  }
LABEL_25:
  uint64_t v21 = *((void *)this + 1);
  if ((v21 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v21 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

void sub_1C5D73BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::KeyValue_Standard::_InternalParse(SnippetUI::KeyValue_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  id v33 = a2;
  int v5 = (std::string **)((char *)this + 40);
  uint64_t v6 = (unsigned int *)((char *)this + 16);
  int v7 = (unint64_t *)((char *)this + 8);
  do
  {
LABEL_2:
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v33, *((_DWORD *)a3 + 23))) {
      return v33;
    }
    TagFallbacstd::string::size_type k = (google::protobuf::internal *)((char *)v33 + 1);
    uint64_t v10 = (char *)*(unsigned __int8 *)v33;
    if ((*(char *)v33 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacstd::string::size_type k = (google::protobuf::internal *)((char *)v33 + 2);
LABEL_6:
      id v33 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacstd::string::size_type k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v33, v10);
    id v33 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v10 >> 3 != 2)
    {
      if (v10 >> 3 != 1 || v10 != 10) {
        goto LABEL_12;
      }
      unsigned int v14 = (google::protobuf::internal *)((char *)TagFallback - 1);
      while (1)
      {
        int v15 = (google::protobuf::internal *)((char *)v14 + 1);
        id v33 = v15;
        uint64_t v16 = (int *)*((void *)this + 4);
        if (!v16) {
          break;
        }
        uint64_t v17 = *((int *)this + 6);
        int v18 = *v16;
        if ((int)v17 < *v16)
        {
          *((_DWORD *)this + 6) = v17 + 1;
          int v19 = *(SnippetUI::KeyValue_Standard_Pair **)&v16[2 * v17 + 2];
          goto LABEL_31;
        }
        if (v18 == *((_DWORD *)this + 7)) {
          goto LABEL_29;
        }
LABEL_30:
        int *v16 = v18 + 1;
        int v19 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard_Pair>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                             + 2));
        uint64_t v20 = *((void *)this + 4);
        uint64_t v21 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v21 + 1;
        *(void *)(v20 + 8 * v21 + 8) = v19;
        int v15 = v33;
LABEL_31:
        unsigned int v22 = *(unsigned __int8 *)v15;
        if (*(char *)v15 < 0)
        {
          SizeFallbacstd::string::size_type k = google::protobuf::internal::ReadSizeFallback(v15, (const char *)*(unsigned __int8 *)v15);
          if (!SizeFallback) {
            return 0;
          }
          char v23 = SizeFallback;
          unsigned int v22 = v25;
        }
        else
        {
          char v23 = (char *)v15 + 1;
        }
        int v26 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v23, v22);
        int v27 = *((_DWORD *)a3 + 22);
        BOOL v28 = __OFSUB__(v27--, 1);
        *((_DWORD *)a3 + 22) = v27;
        if (v27 < 0 != v28) {
          return 0;
        }
        int v29 = v26;
        unsigned int v14 = SnippetUI::KeyValue_Standard_Pair::_InternalParse(v19, (google::protobuf::internal *)v23, a3);
        if (!v14) {
          return 0;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          return 0;
        }
        int v30 = *((_DWORD *)a3 + 7) + v29;
        *((_DWORD *)a3 + 7) = v30;
        unint64_t v31 = *((void *)a3 + 1) + (v30 & (v30 >> 31));
        *(void *)a3 = v31;
        id v33 = v14;
        if (v31 <= (unint64_t)v14 || *(unsigned char *)v14 != 10) {
          goto LABEL_2;
        }
      }
      int v18 = *((_DWORD *)this + 7);
LABEL_29:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v18 + 1);
      uint64_t v16 = (int *)*((void *)this + 4);
      int v18 = *v16;
      goto LABEL_30;
    }
    if (v10 == 18)
    {
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      }
      unsigned int v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.KeyValue_Standard.component_name");
      goto LABEL_21;
    }
LABEL_12:
    if (v10) {
      BOOL v12 = (v10 & 7) == 4;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      *((_DWORD *)a3 + 20) = v10 - 1;
      return TagFallback;
    }
    unsigned int v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_21:
    id v33 = (google::protobuf::internal *)v13;
  }
  while (v13);
  return 0;
}

uint64_t SnippetUI::KeyValue_Standard::GetCachedSize(SnippetUI::KeyValue_Standard *this)
{
  return *((unsigned int *)this + 12);
}

char *SnippetUI::KeyValue_Standard::ByteSizeLong(SnippetUI::KeyValue_Standard *this)
{
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    char v4 = (SnippetUI::KeyValue_Standard_Pair **)(v3 + 8);
  }
  else {
    char v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * (void)v2;
    do
    {
      uint64_t v6 = *v4++;
      int v7 = SnippetUI::KeyValue_Standard_Pair::ByteSizeLong(v6);
      uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (void)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *((void *)this + 5);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_14;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v9;
  }
  uint64_t v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::KeyValue_Standard *)((char *)this + 8), v2, (_DWORD *)this + 12);
  }
  else
  {
    *((_DWORD *)this + 12) = v2;
    return (char *)v2;
  }
}

uint64_t SnippetUI::KeyValue_Standard::IsInitialized(SnippetUI::KeyValue_Standard *this)
{
  return 1;
}

SnippetUI::KeyValue_Standard *SnippetUI::KeyValue_Standard::New(SnippetUI::KeyValue_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard>(a2);
}

SnippetUI::KeyValue_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::KeyValue_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::KeyValue_Standard>);
  }
  SnippetUI::KeyValue_Standard::KeyValue_Standard(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D7403C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40B18DE219);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::KeyValue_Standard>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::KeyValue_Standard *SnippetUI::KeyValue_Standard::New(SnippetUI::KeyValue_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::KeyValue_Standard>(0);
}

void SnippetUI::KeyValue_Standard::~KeyValue_Standard(SnippetUI::KeyValue_Standard *this)
{
  SnippetUI::KeyValue_Standard::~KeyValue_Standard(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F211A898;
  uint64_t v2 = *((void *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::KeyValue_Standard *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::KeyValue_Standard_Pair::InitAsDefaultInstance(SnippetUI::KeyValue_Standard_Pair *this)
{
  qword_1EA3DAC50 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::KeyValue_Standard_Pair::_Internal::key(SnippetUI::KeyValue_Standard_Pair::_Internal *this, const SnippetUI::KeyValue_Standard_Pair *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::KeyValue_Standard_Pair::clear_key(SnippetUI::KeyValue_Standard_Pair *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

void SnippetUI::KeyValue_Standard_Pair::clear_value(SnippetUI::KeyValue_Standard_Pair *this)
{
}

SnippetUI::KeyValue_Standard_Pair *SnippetUI::KeyValue_Standard_Pair::KeyValue_Standard_Pair(SnippetUI::KeyValue_Standard_Pair *this, const SnippetUI::KeyValue_Standard_Pair *a2)
{
  *(void *)this = &unk_1F211A7D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  char v4 = (SnippetUI::KeyValue_Standard_Pair *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 12) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 != (const SnippetUI::KeyValue_Standard_Pair *)&SnippetUI::_KeyValue_Standard_Pair_default_instance_
    && *((void *)a2 + 5))
  {
    operator new();
  }
  *((void *)this + 5) = 0;
  return this;
}

void sub_1C5D742A0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v3, 0x10A1C40BEC01B52);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::KeyValue_Standard_Pair::default_instance(SnippetUI::KeyValue_Standard_Pair *this)
{
  if (atomic_load_explicit(scc_info_KeyValue_Standard_Pair_KeyValue_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_KeyValue_Standard_Pair_KeyValue_2eproto);
  }
  return &SnippetUI::_KeyValue_Standard_Pair_default_instance_;
}

void SnippetUI::KeyValue_Standard_Pair::InternalSwap(SnippetUI::KeyValue_Standard_Pair *this, SnippetUI::KeyValue_Standard_Pair *a2)
{
  char v4 = (SnippetUI::KeyValue_Standard_Pair *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::KeyValue_Standard_Pair *)((char *)this + 16), (SnippetUI::KeyValue_Standard_Pair *)((char *)a2 + 16));
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
}

SnippetUI::KeyValue_Standard *SnippetUI::KeyValue_Standard::KeyValue_Standard(SnippetUI::KeyValue_Standard *this, const SnippetUI::KeyValue_Standard *a2)
{
  *(void *)this = &unk_1F211A898;
  *(_OWORD *)((char *)this + 8) = 0u;
  char v4 = (SnippetUI::KeyValue_Standard *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::KeyValue_Standard_Pair>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 12) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v6 = *((void *)a2 + 5);
  if (*(char *)(v6 + 23) < 0) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  }
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, v6);
  }
  return this;
}

void sub_1C5D744BC(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::KeyValue_Standard::default_instance(SnippetUI::KeyValue_Standard *this)
{
  if (atomic_load_explicit(scc_info_KeyValue_Standard_KeyValue_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_KeyValue_Standard_KeyValue_2eproto);
  }
  return &SnippetUI::_KeyValue_Standard_default_instance_;
}

__n128 SnippetUI::KeyValue_Standard::InternalSwap(SnippetUI::KeyValue_Standard *this, SnippetUI::KeyValue_Standard *a2)
{
  char v4 = (SnippetUI::KeyValue_Standard *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::KeyValue_Standard *)((char *)this + 16), (SnippetUI::KeyValue_Standard *)((char *)a2 + 16));
  uint64_t v10 = (uint64_t *)*((void *)this + 5);
  uint64_t v8 = (std::string **)((char *)this + 40);
  uint64_t v9 = (std::string *)v10;
  int v11 = (std::string **)((char *)a2 + 40);
  if (v10 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      return result;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v8, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  BOOL v12 = *v11;
  if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    BOOL v12 = *v11;
  }
  std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
  __n128 result = *(__n128 *)&v9->__r_.__value_.__l.__data_;
  std::string::size_type v14 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v9->__r_.__value_.__r.__words[2] = v14;
  *(__n128 *)&v12->__r_.__value_.__l.__data_ = result;
  v12->__r_.__value_.__r.__words[2] = v13;
  return result;
}

uint64_t siri::dialogengine::LogCurareCATExecution(uint64_t *a1, const std::string::value_type *a2, uint64_t *a3, uint64_t *a4)
{
  v65[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = NSUserName();
  char v9 = [v8 isEqualToString:@"mobile"];

  if (v9)
  {
    int v11 = objc_opt_new();
    [v11 setDateFormat:@"yyyy-MM-dd HH:mm:ss.A-OOOO"];
    int v53 = [MEMORY[0x1E4F1C9C8] date];
    objc_msgSend(v11, "stringFromDate:");
    id v12 = objc_claimAutoreleasedReturnValue();
    std::string::basic_string[abi:ne180100]<0>(v62, (char *)[v12 UTF8String]);

    v64[0] = @"catId";
    if (*((char *)a1 + 23) >= 0) {
      std::string::size_type v13 = a1;
    }
    else {
      std::string::size_type v13 = (uint64_t *)*a1;
    }
    std::string::size_type v14 = [NSString stringWithUTF8String:v13];
    v65[0] = v14;
    v64[1] = @"patternId";
    if (*((char *)a4 + 23) >= 0) {
      int v15 = a4;
    }
    else {
      int v15 = (uint64_t *)*a4;
    }
    uint64_t v16 = [NSString stringWithUTF8String:v15];
    v65[1] = v16;
    v64[2] = @"params";
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v17 = a3;
    }
    else {
      uint64_t v17 = (uint64_t *)*a3;
    }
    int v18 = [NSString stringWithUTF8String:v17];
    v65[2] = v18;
    v64[3] = @"catTimeStamp";
    if (v63 >= 0) {
      int v19 = v62;
    }
    else {
      int v19 = (void **)v62[0];
    }
    uint64_t v20 = [NSString stringWithUTF8String:v19];
    v65[3] = v20;
    uint64_t v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v65 forKeys:v64 count:4];

    if (a2[23] >= 0) {
      unsigned int v22 = (uint64_t *)a2;
    }
    else {
      unsigned int v22 = *(uint64_t **)a2;
    }
    char v23 = [NSString stringWithUTF8String:v22];
    id v24 = (void *)[objc_alloc(MEMORY[0x1E4F618B8]) initWithStreamId:@"DialogEngine"];
    unsigned int v25 = (void *)[objc_alloc(MEMORY[0x1E4F618A8]) initWithContent:v21 interactionId:v23 dataVersion:0];
    id v61 = 0;
    [v24 insert:v25 error:&v61];
    id v26 = v61;
    if (v26)
    {
      int v27 = v26;
      id v28 = [v26 localizedFailureReason];
      uint64_t v29 = [v28 UTF8String];

      if (v29) {
        int v30 = (char *)v29;
      }
      else {
        int v30 = "no localizedFailureReason provided";
      }
      std::string::basic_string[abi:ne180100]<0>(&v59, v30);
      std::operator+<char>();
      unint64_t v31 = std::string::append(&v54, ", interactionId: ");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      int v33 = a2[23];
      if (v33 >= 0) {
        id v34 = a2;
      }
      else {
        id v34 = *(const std::string::value_type **)a2;
      }
      if (v33 >= 0) {
        std::string::size_type v35 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        std::string::size_type v35 = *((void *)a2 + 1);
      }
      char v36 = std::string::append(&v55, v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      char v38 = std::string::append(&v56, ", error: ");
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (v60 >= 0) {
        int v40 = (const std::string::value_type *)&v59;
      }
      else {
        int v40 = (const std::string::value_type *)v59;
      }
      if (v60 >= 0) {
        std::string::size_type v41 = HIBYTE(v60);
      }
      else {
        std::string::size_type v41 = *((void *)&v59 + 1);
      }
      int v42 = std::string::append(&v57, v40, v41);
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v60) < 0) {
        operator delete((void *)v59);
      }

      uint64_t v44 = 0;
    }
    else
    {
      std::operator+<char>();
      int v45 = std::string::append(&v57, ", interactionId: ");
      long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      int v47 = a2[23];
      if (v47 >= 0) {
        std::string::size_type v48 = a2;
      }
      else {
        std::string::size_type v48 = *(const std::string::value_type **)a2;
      }
      if (v47 >= 0) {
        std::string::size_type v49 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        std::string::size_type v49 = *((void *)a2 + 1);
      }
      unint64_t v50 = std::string::append(&__p, v48, v49);
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      int64_t v60 = v50->__r_.__value_.__r.__words[2];
      long long v59 = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&v59, 0);
      if (SHIBYTE(v60) < 0) {
        operator delete((void *)v59);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }

      uint64_t v44 = 1;
    }

    if (v63 < 0) {
      operator delete(v62[0]);
    }
  }
  else
  {
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"FeatureStore operation not permitted as 'root' user.", v10);
    return 0;
  }
  return v44;
}

void sub_1C5D74B70(_Unwind_Exception *a1, void *exc_buf, uint64_t a3, std::string *a4, std::string *a5, uint64_t a6, std::string *a7, uint64_t a8, std::string *a9, void *exc_bufa, std::string *a11, void *a12, std::string *a13, uint64_t a14, long long a15, std::string::size_type a16, uint64_t a17, long long __p, std::string::size_type a19, uint64_t a20,long long a21,std::string::size_type a22,uint64_t a23,long long a24,std::string::size_type a25,uint64_t a26,long long a27,std::string::size_type a28,uint64_t a29,long long a30,std::string::size_type a31,uint64_t a32,void *__pa,std::string::size_type a34,int a35,__int16 a36,char a37,unsigned __int8 a38)
{
  int v45 = (int)exc_buf;
  if (*(char *)(v44 - 201) < 0) {
    operator delete(*(void **)(v44 - 224));
  }
  if ((char)a38 < 0) {
    operator delete(__pa);
  }
  if (SHIBYTE(a31) < 0) {
    operator delete((void *)a30);
  }

  if (v45 == 1)
  {
    id v46 = objc_begin_catch(a1);
    id v47 = [v46 name];
    uint64_t v48 = [v47 UTF8String];
    if (v48)
    {
      id v42 = [v46 name];
      std::string::size_type v49 = (char *)[v42 UTF8String];
    }
    else
    {
      std::string::size_type v49 = "no name provided";
    }
    std::string::basic_string[abi:ne180100]<0>((void *)(v44 - 224), v49);
    if (v48) {

    }
    id v50 = [v46 reason];
    uint64_t v51 = [v50 UTF8String];
    if (v51)
    {
      id v42 = [v46 reason];
      uint64_t v52 = (char *)[v42 UTF8String];
    }
    else
    {
      uint64_t v52 = "no reason provided";
    }
    std::string::basic_string[abi:ne180100]<0>(&__pa, v52);
    if (v51) {

    }
    std::operator+<char>();
    int v53 = std::string::append((std::string *)&a12, ", interactionId: ");
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    a16 = v53->__r_.__value_.__r.__words[2];
    a15 = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    int v55 = *(char *)(v41 + 23);
    if (v55 >= 0) {
      std::string v56 = (const std::string::value_type *)v41;
    }
    else {
      std::string v56 = *(const std::string::value_type **)v41;
    }
    if (v55 >= 0) {
      std::string::size_type v57 = *(unsigned __int8 *)(v41 + 23);
    }
    else {
      std::string::size_type v57 = *(void *)(v41 + 8);
    }
    int v58 = std::string::append((std::string *)&a15, v56, v57);
    long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    a19 = v58->__r_.__value_.__r.__words[2];
    std::string __p = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    int64_t v60 = std::string::append((std::string *)&__p, ", exception: ");
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    a22 = v60->__r_.__value_.__r.__words[2];
    a21 = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    char v62 = *(unsigned char *)(v44 - 201);
    if (v62 >= 0) {
      char v63 = (const std::string::value_type *)(v44 - 224);
    }
    else {
      char v63 = *(const std::string::value_type **)(v44 - 224);
    }
    if (v62 >= 0) {
      std::string::size_type v64 = *(unsigned __int8 *)(v44 - 201);
    }
    else {
      std::string::size_type v64 = *(void *)(v44 - 216);
    }
    size_t v65 = std::string::append((std::string *)&a21, v63, v64);
    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    a25 = v65->__r_.__value_.__r.__words[2];
    a24 = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    BOOL v67 = std::string::append((std::string *)&a24, " - ");
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    a28 = v67->__r_.__value_.__r.__words[2];
    a27 = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    if ((a38 & 0x80u) == 0) {
      p_pa = (const std::string::value_type *)&__pa;
    }
    else {
      p_pa = (const std::string::value_type *)__pa;
    }
    if ((a38 & 0x80u) == 0) {
      std::string::size_type v70 = a38;
    }
    else {
      std::string::size_type v70 = a34;
    }
    size_t v71 = std::string::append((std::string *)&a27, p_pa, v70);
    long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    a31 = v71->__r_.__value_.__r.__words[2];
    a30 = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&a30, 3u);
    if (SHIBYTE(a31) < 0) {
      operator delete((void *)a30);
    }
    if (SHIBYTE(a28) < 0) {
      operator delete((void *)a27);
    }
    if (SHIBYTE(a25) < 0) {
      operator delete((void *)a24);
    }
    if (SHIBYTE(a22) < 0) {
      operator delete((void *)a21);
    }
    if (SHIBYTE(a19) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(a16) < 0) {
      operator delete((void *)a15);
    }
    if (SHIBYTE(a14) < 0) {
      operator delete(a12);
    }
    if ((char)a38 < 0) {
      operator delete(__pa);
    }
    if (*(char *)(v44 - 201) < 0) {
      operator delete(*(void **)(v44 - 224));
    }

    objc_end_catch();
    JUMPOUT(0x1C5D74B08);
  }

  if (*(char *)(v44 - 169) < 0) {
    operator delete(*(void **)(v44 - 192));
  }

  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogStateUseCaseFromNSDictionary(siri::dialogengine *this@<X0>, void *a2@<X8>)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  char v4 = this;
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = [(siri::dialogengine *)v4 objectForKey:@"count"];
    std::string v56 = v6;
    if (v6) {
      uint64_t v55 = [v6 unsignedIntValue];
    }
    else {
      uint64_t v55 = 0;
    }
    uint64_t v7 = [(siri::dialogengine *)v5 objectForKey:@"timestamp"];
    std::string::size_type v57 = v7;
    if (v7)
    {
      [v7 doubleValue];
      double v9 = v8;
    }
    else
    {
      double v9 = 0.0;
    }
    v103[1] = 0;
    v103[0] = 0;
    int v102 = v103;
    uint64_t v10 = [(siri::dialogengine *)v5 objectForKey:@"allRandomIds"];
    int v58 = v10;
    if (v10)
    {
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      id v11 = v10;
      uint64_t v12 = [v11 countByEnumeratingWithState:&v98 objects:v108 count:16];
      if (v12)
      {
        uint64_t v13 = *(void *)v99;
        do
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v99 != v13) {
              objc_enumerationMutation(v11);
            }
            int v15 = *(void **)(*((void *)&v98 + 1) + 8 * i);
            if (v15)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v15 UTF8String]);
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v102, (const void **)__p, (uint64_t)__p);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }
          }
          uint64_t v12 = [v11 countByEnumeratingWithState:&v98 objects:v108 count:16];
        }
        while (v12);
      }
    }
    v97[1] = 0;
    v97[0] = 0;
    uint64_t v96 = v97;
    long long v59 = [(siri::dialogengine *)v5 objectForKey:@"lastRandomIds"];
    if (v59)
    {
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      id v16 = v59;
      uint64_t v17 = [v16 countByEnumeratingWithState:&v92 objects:v107 count:16];
      if (v17)
      {
        uint64_t v18 = *(void *)v93;
        do
        {
          for (uint64_t j = 0; j != v17; ++j)
          {
            if (*(void *)v93 != v18) {
              objc_enumerationMutation(v16);
            }
            uint64_t v20 = *(void **)(*((void *)&v92 + 1) + 8 * j);
            if (v20)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v20 UTF8String]);
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v96, (const void **)__p, (uint64_t)__p);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }
          }
          uint64_t v17 = [v16 countByEnumeratingWithState:&v92 objects:v107 count:16];
        }
        while (v17);
      }
    }
    v91[0] = 0;
    v91[1] = 0;
    __int16 v90 = (uint64_t *)v91;
    uint64_t v21 = [@"grounding_" length];
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    obuint64_t j = [(siri::dialogengine *)v5 allKeys];
    uint64_t v22 = [obj countByEnumeratingWithState:&v86 objects:v106 count:16];
    if (v22)
    {
      uint64_t v68 = *(void *)v87;
      char v23 = v5;
      uint64_t v60 = v21;
      long long v61 = a2;
      do
      {
        uint64_t v24 = 0;
        uint64_t v62 = v22;
        do
        {
          if (*(void *)v87 != v68) {
            objc_enumerationMutation(obj);
          }
          id v70 = *(id *)(*((void *)&v86 + 1) + 8 * v24);
          if ([v70 hasPrefix:@"grounding_"])
          {
            unint64_t v83 = 0;
            std::string::size_type v84 = 0;
            unint64_t v85 = 0;
            long long v81 = 0uLL;
            uint64_t v82 = 0;
            id v25 = [v70 substringFromIndex:v21];
            std::string::basic_string[abi:ne180100]<0>(v79, (char *)[v25 UTF8String]);

            id v26 = [(siri::dialogengine *)v5 objectForKey:v70];
            std::string::size_type v69 = v26;
            if (v26)
            {
              int v27 = [v26 objectForKey:@"count"];
              BOOL v67 = v27;
              if (v27) {
                uint64_t v28 = [v27 unsignedIntValue];
              }
              else {
                uint64_t v28 = 0;
              }
              unint64_t v31 = [v69 objectForKey:@"timestamps"];
              uint64_t v65 = v28;
              long long v66 = v31;
              if (v31)
              {
                long long v77 = 0u;
                long long v78 = 0u;
                long long v75 = 0u;
                long long v76 = 0u;
                id v32 = v31;
                uint64_t v33 = [v32 countByEnumeratingWithState:&v75 objects:v105 count:16];
                uint64_t v63 = v24;
                if (v33)
                {
                  id v34 = 0;
                  uint64_t v29 = 0;
                  unint64_t v35 = 0;
                  uint64_t v36 = *(void *)v76;
                  do
                  {
                    for (uint64_t k = 0; k != v33; ++k)
                    {
                      if (*(void *)v76 != v36) {
                        objc_enumerationMutation(v32);
                      }
                      [*(id *)(*((void *)&v75 + 1) + 8 * k) doubleValue];
                      uint64_t v39 = v38;
                      if ((unint64_t)v34 >= v35)
                      {
                        uint64_t v40 = (v34 - v29) >> 3;
                        unint64_t v41 = v40 + 1;
                        if ((unint64_t)(v40 + 1) >> 61)
                        {
                          unint64_t v85 = v35;
                          unint64_t v83 = v29;
                          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                        }
                        if ((uint64_t)(v35 - (void)v29) >> 2 > v41) {
                          unint64_t v41 = (uint64_t)(v35 - (void)v29) >> 2;
                        }
                        if (v35 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v42 = v41;
                        }
                        if (v42) {
                          unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v42);
                        }
                        else {
                          uint64_t v43 = 0;
                        }
                        uint64_t v44 = (char *)(v42 + 8 * v40);
                        *(void *)uint64_t v44 = v39;
                        int v45 = v44 + 8;
                        while (v34 != v29)
                        {
                          uint64_t v46 = *((void *)v34 - 1);
                          v34 -= 8;
                          *((void *)v44 - 1) = v46;
                          v44 -= 8;
                        }
                        unint64_t v35 = v42 + 8 * v43;
                        std::string::size_type v84 = v45;
                        if (v29) {
                          operator delete(v29);
                        }
                        uint64_t v29 = v44;
                        id v34 = v45;
                        uint64_t v5 = v23;
                      }
                      else
                      {
                        *(void *)id v34 = v38;
                        v34 += 8;
                      }
                      std::string::size_type v84 = v34;
                    }
                    unint64_t v85 = v35;
                    unint64_t v83 = v29;
                    uint64_t v33 = [v32 countByEnumeratingWithState:&v75 objects:v105 count:16];
                  }
                  while (v33);
                }
                else
                {
                  uint64_t v29 = 0;
                }

                uint64_t v21 = v60;
                a2 = v61;
                uint64_t v22 = v62;
                uint64_t v24 = v63;
              }
              else
              {
                uint64_t v29 = 0;
              }
              id v47 = [v69 objectForKey:@"text"];
              uint64_t v48 = v47;
              if (v47)
              {
                std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v47 UTF8String]);
                if (SHIBYTE(v82) < 0) {
                  operator delete((void *)v81);
                }
                long long v81 = *(_OWORD *)__p;
                uint64_t v82 = *(void *)&__p[16];
              }

              uint64_t v30 = v65;
            }
            else
            {
              uint64_t v29 = 0;
              uint64_t v30 = 0;
            }
            siri::dialogengine::GroundingInfo::GroundingInfo(__p, v30, (uint64_t)&v83, &v81);
            int v104 = v79;
            std::string::size_type v49 = std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v90, (const void **)v79, (long long **)&v104);
            uint64_t v50 = v24;
            uint64_t v51 = (void *)*((void *)v49 + 8);
            *((void *)v49 + 7) = *(void *)__p;
            if (v51)
            {
              *((void *)v49 + 9) = v51;
              operator delete(v51);
              *((void *)v49 + 8) = 0;
              *((void *)v49 + 9) = 0;
              *((void *)v49 + 10) = 0;
            }
            *((_OWORD *)v49 + 4) = *(_OWORD *)&__p[8];
            *((void *)v49 + 10) = v72;
            *(void *)&__p[16] = 0;
            uint64_t v72 = 0;
            *(void *)&__p[8] = 0;
            uint64_t v52 = (void **)(v49 + 88);
            if (v49[111] < 0)
            {
              operator delete(*v52);
              int v53 = *(void **)&__p[8];
              *(_OWORD *)uint64_t v52 = v73;
              *((void *)v49 + 13) = v74;
              HIBYTE(v74) = 0;
              LOBYTE(v73) = 0;
              if (v53)
              {
                *(void *)&__p[16] = v53;
                operator delete(v53);
              }
            }
            else
            {
              *(_OWORD *)uint64_t v52 = v73;
              *((void *)v49 + 13) = v74;
            }

            uint64_t v24 = v50;
            if (v80 < 0) {
              operator delete(v79[0]);
            }
            if ((SHIBYTE(v82) & 0x80000000) == 0)
            {
              if (!v29) {
                goto LABEL_89;
              }
LABEL_88:
              std::string::size_type v84 = v29;
              operator delete(v29);
              goto LABEL_89;
            }
            operator delete((void *)v81);
            if (v29) {
              goto LABEL_88;
            }
          }
LABEL_89:

          ++v24;
        }
        while (v24 != v22);
        uint64_t v54 = [obj countByEnumeratingWithState:&v86 objects:v106 count:16];
        uint64_t v22 = v54;
      }
      while (v54);
    }

    siri::dialogengine::DialogStateUseCase::DialogStateUseCase((uint64_t)a2, v55, (const void ***)&v102, (const void ***)&v96, (const void ***)&v90, v9);
    std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(v91[0]);

    std::__tree<std::string>::destroy((uint64_t)&v96, v97[0]);
    std::__tree<std::string>::destroy((uint64_t)&v102, v103[0]);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[3] = 0;
    a2[2] = a2 + 3;
    a2[6] = 0;
    a2[4] = 0;
    a2[5] = a2 + 6;
    a2[10] = 0;
    a2[9] = 0;
    a2[7] = 0;
    a2[8] = a2 + 9;
  }
}

void sub_1C5D75934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x208], (char *)STACK[0x210]);
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x268], (char *)STACK[0x270]);

  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  uint64_t v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x70uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    double v8 = (std::string *)(v6 + 32);
    double v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *((void *)v6 + 13) = 0;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    char v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v7, (uint64_t *)v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1C5D75C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::GroundingInfo>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

id siri::dialogengine::DialogStateUseCaseToNSDictionary(siri::dialogengine *this, const siri::dialogengine::DialogStateUseCase *a2)
{
  v44[3] = *MEMORY[0x1E4F143B8];
  id v34 = (id)objc_opt_new();
  uint64_t v3 = [NSNumber numberWithUnsignedInt:*(unsigned int *)this];
  [v34 setObject:v3 forKey:@"count"];

  char v4 = [NSNumber numberWithDouble:*((double *)this + 1)];
  [v34 setObject:v4 forKey:@"timestamp"];

  uint64_t v33 = objc_opt_new();
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v36, (const void ***)this + 5);
  std::string::size_type v5 = v36.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v36.__r_.__value_.__l.__data_ != &v36.__r_.__value_.__r.__words[1])
  {
    do
    {
      uint64_t v6 = (void *)(v5 + 32);
      if (*(char *)(v5 + 55) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = [NSString stringWithUTF8String:v6];
      [v33 addObject:v7];

      double v8 = *(std::string **)(v5 + 8);
      if (v8)
      {
        do
        {
          double v9 = v8;
          double v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
        }
        while (v8);
      }
      else
      {
        do
        {
          double v9 = *(std::string **)(v5 + 16);
          BOOL v10 = v9->__r_.__value_.__r.__words[0] == v5;
          std::string::size_type v5 = (std::string::size_type)v9;
        }
        while (!v10);
      }
      std::string::size_type v5 = (std::string::size_type)v9;
    }
    while (v9 != (std::string *)&v36.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::string>::destroy((uint64_t)&v36, (char *)v36.__r_.__value_.__l.__size_);
  [v34 setObject:v33 forKey:@"allRandomIds"];
  id v32 = objc_opt_new();
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v36, (const void ***)this + 2);
  std::string::size_type v11 = v36.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v36.__r_.__value_.__l.__data_ != &v36.__r_.__value_.__r.__words[1])
  {
    do
    {
      uint64_t v12 = (void *)(v11 + 32);
      if (*(char *)(v11 + 55) < 0) {
        uint64_t v12 = (void *)*v12;
      }
      char v13 = [NSString stringWithUTF8String:v12];
      [v32 addObject:v13];

      uint64_t v14 = *(std::string **)(v11 + 8);
      if (v14)
      {
        do
        {
          int v15 = v14;
          uint64_t v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
        }
        while (v14);
      }
      else
      {
        do
        {
          int v15 = *(std::string **)(v11 + 16);
          BOOL v10 = v15->__r_.__value_.__r.__words[0] == v11;
          std::string::size_type v11 = (std::string::size_type)v15;
        }
        while (!v10);
      }
      std::string::size_type v11 = (std::string::size_type)v15;
    }
    while (v15 != (std::string *)&v36.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::string>::destroy((uint64_t)&v36, (char *)v36.__r_.__value_.__l.__size_);
  [v34 setObject:v32 forKey:@"lastRandomIds"];
  std::map<std::string,siri::dialogengine::GroundingInfo>::map[abi:ne180100]((uint64_t)&v41, (const void ***)this + 8);
  id v16 = v41;
  if (v41 != (long long *)v42)
  {
    do
    {
      std::pair<std::string const,siri::dialogengine::GroundingInfo>::pair[abi:ne180100](&v36, v16 + 2);
      uint64_t v17 = NSString;
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v19 = [v17 stringWithUTF8String:p_p];
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v20 = objc_opt_new();
      memset(&__p, 0, sizeof(__p));
      std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&__p, v38, (uint64_t)v39, (v39 - (unsigned char *)v38) >> 3);
      long long v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      uint64_t v22 = (double *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
      {
        do
        {
          char v23 = [NSNumber numberWithDouble:*v22];
          [v20 addObject:v23];

          ++v22;
        }
        while (v22 != *((double **)&v21 + 1));
      }
      if ((void)v21) {
        operator delete((void *)v21);
      }
      v43[0] = @"count";
      uint64_t v24 = [NSNumber numberWithUnsignedInt:v37];
      v44[0] = v24;
      v43[1] = @"text";
      id v25 = NSString;
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v40;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v26 = &__p;
      }
      else {
        id v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v27 = [v25 stringWithUTF8String:v26];
      uint64_t v43[2] = @"timestamps";
      v44[1] = v27;
      uint64_t v44[2] = v20;
      uint64_t v28 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v44 forKeys:v43 count:3];
      [v34 setObject:v28 forKey:v19];

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }

      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (v38)
      {
        uint64_t v39 = v38;
        operator delete(v38);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      uint64_t v29 = (long long *)*((void *)v16 + 1);
      if (v29)
      {
        do
        {
          uint64_t v30 = v29;
          uint64_t v29 = *(long long **)v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          uint64_t v30 = (long long *)*((void *)v16 + 2);
          BOOL v10 = *(void *)v30 == (void)v16;
          id v16 = v30;
        }
        while (!v10);
      }
      id v16 = v30;
    }
    while (v30 != (long long *)v42);
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(v42[0]);

  return v34;
}

void sub_1C5D76140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,siri::dialogengine::GroundingInfo>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[0] = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&this[1].__r_.__value_.__l.__size_, *((const void **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
  uint64_t v6 = (std::string *)((char *)this + 56);
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 56);
    this[3].__r_.__value_.__r.__words[0] = *((void *)a2 + 9);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1C5D7633C(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,siri::dialogengine::GroundingInfo>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C5D76424(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t siri::dialogengine::DialogStateFamilyFromNSDictionary(siri::dialogengine *this, NSDictionary *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = [(siri::dialogengine *)v2 objectForKey:@"count"];
    std::string::size_type v5 = v4;
    if (v4) {
      uint64_t v6 = [v4 unsignedIntValue];
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = [(siri::dialogengine *)v3 objectForKey:@"timestamp"];
    size_t v8 = v7;
    if (v7) {
      [v7 doubleValue];
    }
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_1C5D76538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id siri::dialogengine::DialogStateFamilyToNSDictionary(siri::dialogengine *this, const siri::dialogengine::DialogStateFamily *a2)
{
  uint64_t v3 = objc_opt_new();
  uint64_t v4 = [NSNumber numberWithUnsignedInt:*(unsigned int *)this];
  [v3 setObject:v4 forKey:@"count"];

  std::string::size_type v5 = [NSNumber numberWithDouble:*((double *)this + 1)];
  [v3 setObject:v5 forKey:@"timestamp"];

  return v3;
}

void sub_1C5D7660C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogStatePatternFromNSDictionary(siri::dialogengine *this, NSDictionary *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = [(siri::dialogengine *)v2 objectForKey:@"count"];
    std::string::size_type v5 = v4;
    if (v4) {
      uint64_t v6 = [v4 unsignedIntValue];
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = [(siri::dialogengine *)v3 objectForKey:@"timestamp"];
    size_t v8 = v7;
    if (v7) {
      [v7 doubleValue];
    }
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_1C5D766E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id siri::dialogengine::DialogStatePatternToNSDictionary(siri::dialogengine *this, const siri::dialogengine::DialogStatePattern *a2)
{
  uint64_t v3 = objc_opt_new();
  uint64_t v4 = [NSNumber numberWithUnsignedInt:*(unsigned int *)this];
  [v3 setObject:v4 forKey:@"count"];

  std::string::size_type v5 = [NSNumber numberWithDouble:*((double *)this + 1)];
  [v3 setObject:v5 forKey:@"timestamp"];

  return v3;
}

void sub_1C5D767B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::WriteDialogStateUseCaseToFile(const void ***a1, const char *a2)
{
  if (a2[23] >= 0) {
    uint64_t v4 = (uint64_t *)a2;
  }
  else {
    uint64_t v4 = *(uint64_t **)a2;
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"WriteDialogStateUseCaseToFile: %s", a2, v4);
  if (a1)
  {
    uint64_t v6 = *((unsigned __int8 *)a2 + 23);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *((void *)a2 + 1);
    }
    if (v6)
    {
      siri::dialogengine::Context::GetUseCaseState(a1, v5, (uint64_t)v13);
      size_t v8 = siri::dialogengine::DialogStateUseCaseToNSDictionary((siri::dialogengine *)v13, v7);
      if (a2[23] >= 0) {
        double v9 = (uint64_t *)a2;
      }
      else {
        double v9 = *(uint64_t **)a2;
      }
      BOOL v10 = [NSString stringWithUTF8String:v9];
      std::string::size_type v11 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v10];
      [v8 writeToURL:v11 error:0];

      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy((void *)v15[4]);
      std::__tree<std::string>::destroy((uint64_t)v15, v15[1]);
      std::__tree<std::string>::destroy((uint64_t)v14, v14[1]);
      return;
    }
    uint64_t v12 = "filePath is empty. Can't write use case state to file.";
  }
  else
  {
    uint64_t v12 = "Context is null; Can't get use case state.";
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)v12, v5);
}

void sub_1C5D76918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::string::size_type v5 = v4;

  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::WriteDialogStateFamilyToFile(siri::dialogengine::Context *a1, const char *a2)
{
  if (a2[23] >= 0) {
    uint64_t v4 = (uint64_t *)a2;
  }
  else {
    uint64_t v4 = *(uint64_t **)a2;
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"WriteDialogStateFamilyToFile: %s", a2, v4);
  if (a1)
  {
    uint64_t v6 = *((unsigned __int8 *)a2 + 23);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *((void *)a2 + 1);
    }
    if (v6)
    {
      v13[0] = siri::dialogengine::Context::GetFamilyState(a1, v5);
      v13[1] = v7;
      siri::dialogengine::DialogStateFamilyToNSDictionary((siri::dialogengine *)v13, v7);
      id v12 = (id)objc_claimAutoreleasedReturnValue();
      if (a2[23] >= 0) {
        size_t v8 = (uint64_t *)a2;
      }
      else {
        size_t v8 = *(uint64_t **)a2;
      }
      double v9 = [NSString stringWithUTF8String:v8];
      BOOL v10 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v9];
      [v12 writeToURL:v10 error:0];

      return;
    }
    std::string::size_type v11 = "filePath is empty. Can't write family state to file.";
  }
  else
  {
    std::string::size_type v11 = "Context is null; Can't get family state.";
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)v11, v5);
}

void sub_1C5D76A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v12 = v11;

  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_ImageElement_Contact_Avatar_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Contact_Avatar::ImageElement_Contact_Avatar((SnippetUI::ImageElement_Contact_Avatar *)&SnippetUI::_ImageElement_Contact_Avatar_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Contact_Avatar_default_instance_, v4);
}

SnippetUI::ImageElement_Contact_Avatar *SnippetUI::ImageElement_Contact_Avatar::ImageElement_Contact_Avatar(SnippetUI::ImageElement_Contact_Avatar *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F211AB08;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load_explicit(scc_info_ImageElement_Contact_Avatar_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Contact_Avatar_ImageElement_2eproto);
  }
  return this;
}

void sub_1C5D76B8C(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Contact_Avatar::GetMetadata(SnippetUI::ImageElement_Contact_Avatar *this)
{
  return qword_1EA3D8540;
}

void InitDefaultsscc_info_ImageElement_Symbol_Background_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Symbol_Background::ImageElement_Symbol_Background((SnippetUI::ImageElement_Symbol_Background *)&SnippetUI::_ImageElement_Symbol_Background_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Symbol_Background_default_instance_, v4);
  qword_1EA3DACF8 = (uint64_t)&SnippetUI::_Color_default_instance_;
  unk_1EA3DAD00 = &SnippetUI::_ImageElement_AspectRatio_default_instance_;
  qword_1EA3DAD08 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
  unk_1EA3DAD10 = &SnippetUI::_OptionalBool_default_instance_;
}

SnippetUI::ImageElement_Symbol_Background *SnippetUI::ImageElement_Symbol_Background::ImageElement_Symbol_Background(SnippetUI::ImageElement_Symbol_Background *this)
{
  *(void *)this = &unk_1F211AF88;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load_explicit(scc_info_ImageElement_Symbol_Background_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Symbol_Background_ImageElement_2eproto);
  }
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  return this;
}

void sub_1C5D76CC8(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Symbol_Background::GetMetadata(SnippetUI::ImageElement_Symbol_Background *this)
{
  return qword_1EA3D85A0;
}

uint64_t SnippetUI::ImageElement_Symbol_Background::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void SnippetUI::ImageElement_Symbol_Background::MergeFrom(SnippetUI::ImageElement_Symbol_Background *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 3992);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::ImageElement_Symbol_Background::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D76DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Symbol_Background::MergeFrom(SnippetUI::ImageElement_Symbol_Background *this, const SnippetUI::ImageElement_Symbol_Background *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 4007);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Symbol_Background *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 != (const SnippetUI::ImageElement_Symbol_Background *)&SnippetUI::_ImageElement_Symbol_Background_default_instance_)
  {
    uint64_t v6 = (const SnippetUI::Color *)*((void *)a2 + 2);
    if (v6)
    {
      char v7 = (SnippetUI::Color *)*((void *)this + 2);
      if (!v7)
      {
        char v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
        *((void *)this + 2) = v7;
        uint64_t v6 = (const SnippetUI::Color *)*((void *)a2 + 2);
      }
      if (v6) {
        size_t v8 = v6;
      }
      else {
        size_t v8 = (const SnippetUI::Color *)&SnippetUI::_Color_default_instance_;
      }
      SnippetUI::Color::MergeFrom(v7, v8);
    }
    double v9 = (const SnippetUI::ImageElement_AspectRatio *)*((void *)a2 + 3);
    if (v9)
    {
      BOOL v10 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 3);
      if (!v10)
      {
        BOOL v10 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
        *((void *)this + 3) = v10;
        double v9 = (const SnippetUI::ImageElement_AspectRatio *)*((void *)a2 + 3);
      }
      if (v9) {
        std::string::size_type v11 = v9;
      }
      else {
        std::string::size_type v11 = (const SnippetUI::ImageElement_AspectRatio *)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
      }
      SnippetUI::ImageElement_AspectRatio::MergeFrom(v10, v11);
    }
    id v12 = (const SnippetUI::OptionalBool *)*((void *)a2 + 4);
    if (v12)
    {
      char v13 = (SnippetUI::OptionalBool *)*((void *)this + 4);
      if (!v13)
      {
        char v13 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 4) = v13;
        id v12 = (const SnippetUI::OptionalBool *)*((void *)a2 + 4);
      }
      if (v12) {
        uint64_t v14 = v12;
      }
      else {
        uint64_t v14 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      }
      SnippetUI::OptionalBool::MergeFrom(v13, v14);
    }
    int v15 = (const SnippetUI::OptionalBool *)*((void *)a2 + 5);
    if (v15)
    {
      id v16 = (SnippetUI::OptionalBool *)*((void *)this + 5);
      if (!v16)
      {
        id v16 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 5) = v16;
        int v15 = (const SnippetUI::OptionalBool *)*((void *)a2 + 5);
      }
      if (v15) {
        uint64_t v17 = v15;
      }
      else {
        uint64_t v17 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      }
      SnippetUI::OptionalBool::MergeFrom(v16, v17);
    }
  }
}

void sub_1C5D76F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  __n128 result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_AspectRatio>);
  }
  result[1] = 0;
  result[2] = 0;
  *__n128 result = &unk_1F211B108;
  *((_DWORD *)result + 6) = 0;
  return result;
}

void SnippetUI::ImageElement_AspectRatio::MergeFrom(SnippetUI::ImageElement_AspectRatio *this, const SnippetUI::ImageElement_AspectRatio *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 4612);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_AspectRatio *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  float v6 = *((float *)a2 + 4);
  if (v6 != 0.0) {
    *((float *)this + 4) = v6;
  }
  float v7 = *((float *)a2 + 5);
  if (v7 != 0.0) {
    *((float *)this + 5) = v7;
  }
}

void sub_1C5D770AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_AspectRatio::GetMetadata(SnippetUI::ImageElement_AspectRatio *this)
{
  return qword_1EA3D85C0;
}

uint64_t SnippetUI::ImageElement_AspectRatio::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void SnippetUI::ImageElement_AspectRatio::MergeFrom(SnippetUI::ImageElement_AspectRatio *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 4597);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::ImageElement_AspectRatio::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D771CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_AspectRatio::CopyFrom(SnippetUI::ImageElement_AspectRatio *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (SnippetUI::ImageElement_AspectRatio *)((char *)this + 8);
    *((void *)v5 + 1) = 0;
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
    }
    SnippetUI::ImageElement_AspectRatio::MergeFrom(this, lpsrc);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_AspectRatio::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_AspectRatio *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  if (*((float *)this + 4) != 0.0)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      int v6 = *((_DWORD *)this + 4);
    }
    else
    {
      int v6 = *((_DWORD *)this + 4);
    }
    *a2 = 13;
    *(_DWORD *)(a2 + 1) = v6;
    a2 += 5;
  }
  if (*((float *)this + 5) != 0.0)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    int v7 = *((_DWORD *)this + 5);
    *a2 = 21;
    *(_DWORD *)(a2 + 1) = v7;
    a2 += 5;
  }
  uint64_t v8 = *((void *)this + 1);
  if ((v8 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v8 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::ImageElement_AspectRatio::_InternalParse(SnippetUI::ImageElement_AspectRatio *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  id v12 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v12, *((_DWORD *)a3 + 23)))return v12; {
        TagFallbacuint64_t k = (char *)v12 + 1;
        }
        uint64_t v8 = (char *)*(unsigned __int8 *)v12;
        if ((*(char *)v12 & 0x80000000) == 0) {
          goto LABEL_6;
        }
        uint64_t v8 = (char *)(v8 + (*TagFallback << 7) - 128);
        if ((*TagFallback & 0x80000000) == 0)
        {
          TagFallbacuint64_t k = (char *)v12 + 2;
LABEL_6:
          id v12 = (google::protobuf::internal *)TagFallback;
          goto LABEL_7;
        }
        TagFallbacuint64_t k = (char *)google::protobuf::internal::ReadTagFallback(v12, v8);
        id v12 = (google::protobuf::internal *)TagFallback;
        if (!TagFallback) {
          return (google::protobuf::internal *)TagFallback;
        }
LABEL_7:
        if (v8 >> 3 != 2) {
          break;
        }
        if (v8 != 21) {
          goto LABEL_12;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)TagFallback;
        id v12 = (google::protobuf::internal *)(TagFallback + 4);
      }
      if (v8 >> 3 != 1 || v8 != 13) {
        break;
      }
      *((_DWORD *)this + 4) = *(_DWORD *)TagFallback;
      id v12 = (google::protobuf::internal *)(TagFallback + 4);
    }
LABEL_12:
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    id v12 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, (google::protobuf::internal::InternalMetadataWithArena *)TagFallback, a3, v6);
    if (!v12) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return (google::protobuf::internal *)TagFallback;
}

uint64_t SnippetUI::ImageElement_AspectRatio::GetCachedSize(SnippetUI::ImageElement_AspectRatio *this)
{
  return *((unsigned int *)this + 6);
}

char *SnippetUI::ImageElement_AspectRatio::ByteSizeLong(SnippetUI::ImageElement_AspectRatio *this)
{
  uint64_t v1 = 5;
  if (*((float *)this + 4) == 0.0) {
    uint64_t v1 = 0;
  }
  if (*((float *)this + 5) == 0.0) {
    uint64_t v2 = (const google::protobuf::UnknownFieldSet *)v1;
  }
  else {
    uint64_t v2 = (const google::protobuf::UnknownFieldSet *)(v1 + 5);
  }
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_AspectRatio *)((char *)this + 8), v2, (_DWORD *)this + 6);
  }
  *((_DWORD *)this + 6) = v2;
  return (char *)v2;
}

uint64_t SnippetUI::ImageElement_AspectRatio::IsInitialized(SnippetUI::ImageElement_AspectRatio *this)
{
  return 1;
}

void SnippetUI::ImageElement_AspectRatio::Clear(SnippetUI::ImageElement_AspectRatio *this)
{
  char v2 = *((unsigned char *)this + 8);
  uint64_t v1 = (SnippetUI::ImageElement_AspectRatio *)((char *)this + 8);
  *((void *)v1 + 1) = 0;
  if (v2) {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
  }
}

void *SnippetUI::ImageElement_AspectRatio::New(SnippetUI::ImageElement_AspectRatio *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(a2);
}

void *SnippetUI::ImageElement_AspectRatio::New(SnippetUI::ImageElement_AspectRatio *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
}

void SnippetUI::ImageElement_AspectRatio::~ImageElement_AspectRatio(SnippetUI::ImageElement_AspectRatio *this)
{
  *(void *)this = &unk_1F211B108;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F211B108;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(void *)this = &unk_1F211B108;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_AspectRatio>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void SnippetUI::ImageElement_Symbol_Background::CopyFrom(SnippetUI::ImageElement_Symbol_Background *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Symbol_Background::Clear(this);
    SnippetUI::ImageElement_Symbol_Background::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Symbol_Background::Clear(SnippetUI::ImageElement_Symbol_Background *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  char v7 = *((unsigned char *)this + 8);
  int v6 = (SnippetUI::ImageElement_Symbol_Background *)((char *)this + 8);
  *((void *)v6 + 4) = 0;
  if (v7)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Symbol_Background::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Symbol_Background *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  if (this == (SnippetUI::ImageElement_Symbol_Background *)&SnippetUI::_ImageElement_Symbol_Background_default_instance_) {
    goto LABEL_49;
  }
  int v6 = (SnippetUI::Color *)*((void *)this + 2);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      int v6 = (SnippetUI::Color *)*((void *)this + 2);
    }
    *a2 = 10;
    unsigned int v7 = *((_DWORD *)v6 + 6);
    if (v7 > 0x7F)
    {
      a2[1] = v7 | 0x80;
      unsigned int v9 = v7 >> 7;
      if (v7 >> 14)
      {
        std::string::size_type v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          id v12 = v11;
          *v11++ = v9 | 0x80;
          unsigned int v13 = v9 >> 7;
          unsigned int v14 = v9 >> 14;
          v9 >>= 7;
        }
        while (v14);
        BOOL v10 = (char *)(v12 + 2);
        *std::string::size_type v11 = v13;
        goto LABEL_13;
      }
      a2[2] = v9;
      uint64_t v8 = 3;
    }
    else
    {
      a2[1] = v7;
      uint64_t v8 = 2;
    }
    BOOL v10 = &a2[v8];
LABEL_13:
    a2 = (char *)SnippetUI::Color::InternalSerializeWithCachedSizesToArray(v6, v10, a3, a4);
  }
  int v15 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 3);
  if (!v15) {
    goto LABEL_26;
  }
  if ((unint64_t)a2 >= *(void *)a3)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    int v15 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 3);
  }
  *a2 = 18;
  unsigned int v16 = *((_DWORD *)v15 + 6);
  if (v16 > 0x7F)
  {
    a2[1] = v16 | 0x80;
    unsigned int v18 = v16 >> 7;
    if (v16 >> 14)
    {
      uint64_t v20 = (unsigned __int8 *)(a2 + 2);
      do
      {
        long long v21 = v20;
        *v20++ = v18 | 0x80;
        unsigned int v22 = v18 >> 7;
        unsigned int v23 = v18 >> 14;
        v18 >>= 7;
      }
      while (v23);
      int v19 = (char *)(v21 + 2);
      unsigned __int8 *v20 = v22;
      goto LABEL_25;
    }
    a2[2] = v18;
    uint64_t v17 = 3;
  }
  else
  {
    a2[1] = v16;
    uint64_t v17 = 2;
  }
  int v19 = &a2[v17];
LABEL_25:
  a2 = (char *)SnippetUI::ImageElement_AspectRatio::InternalSerializeWithCachedSizesToArray(v15, v19, a3, a4);
LABEL_26:
  uint64_t v24 = (SnippetUI::OptionalBool *)*((void *)this + 4);
  if (!v24) {
    goto LABEL_38;
  }
  if ((unint64_t)a2 >= *(void *)a3)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    uint64_t v24 = (SnippetUI::OptionalBool *)*((void *)this + 4);
  }
  *a2 = 26;
  unsigned int v25 = *((_DWORD *)v24 + 5);
  if (v25 > 0x7F)
  {
    a2[1] = v25 | 0x80;
    unsigned int v27 = v25 >> 7;
    if (v25 >> 14)
    {
      uint64_t v29 = (unsigned __int8 *)(a2 + 2);
      do
      {
        uint64_t v30 = v29;
        *v29++ = v27 | 0x80;
        unsigned int v31 = v27 >> 7;
        unsigned int v32 = v27 >> 14;
        v27 >>= 7;
      }
      while (v32);
      uint64_t v28 = (char *)(v30 + 2);
      unsigned __int8 *v29 = v31;
      goto LABEL_37;
    }
    a2[2] = v27;
    uint64_t v26 = 3;
  }
  else
  {
    a2[1] = v25;
    uint64_t v26 = 2;
  }
  uint64_t v28 = &a2[v26];
LABEL_37:
  a2 = (char *)SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v24, v28, a3, a4);
LABEL_38:
  uint64_t v33 = (SnippetUI::OptionalBool *)*((void *)this + 5);
  if (v33)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      uint64_t v33 = (SnippetUI::OptionalBool *)*((void *)this + 5);
    }
    *a2 = 34;
    unsigned int v34 = *((_DWORD *)v33 + 5);
    if (v34 > 0x7F)
    {
      a2[1] = v34 | 0x80;
      unsigned int v36 = v34 >> 7;
      if (v34 >> 14)
      {
        unsigned int v37 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v38 = v37;
          *v37++ = v36 | 0x80;
          unsigned int v39 = v36 >> 7;
          unsigned int v40 = v36 >> 14;
          v36 >>= 7;
        }
        while (v40);
        unint64_t v35 = v38 + 2;
        *unsigned int v37 = v39;
      }
      else
      {
        a2[2] = v36;
        unint64_t v35 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v34;
      unint64_t v35 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v33, (char *)v35, a3, a4);
  }
LABEL_49:
  uint64_t v41 = *((void *)this + 1);
  if ((v41 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v41 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::ImageElement_Symbol_Background::_InternalParse(SnippetUI::ImageElement_Symbol_Background *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v15 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v15, *((_DWORD *)a3 + 23))) {
      return v15;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v15 + 1);
    uint64_t v8 = (char *)*(unsigned __int8 *)v15;
    if ((*(char *)v15 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v15 + 2);
LABEL_6:
      int v15 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v15, v8);
    int v15 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_24;
        }
        unsigned int v9 = (SnippetUI::Color *)*((void *)this + 2);
        if (!v9)
        {
          unsigned int v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
          *((void *)this + 2) = v9;
          TagFallbacuint64_t k = v15;
        }
        BOOL v10 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Color>(a3, v9, TagFallback);
        goto LABEL_29;
      case 2u:
        if (v8 != 18) {
          goto LABEL_24;
        }
        std::string::size_type v11 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 3);
        if (!v11)
        {
          std::string::size_type v11 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
          *((void *)this + 3) = v11;
          TagFallbacuint64_t k = v15;
        }
        BOOL v10 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_AspectRatio>(a3, v11, TagFallback);
        goto LABEL_29;
      case 3u:
        if (v8 != 26) {
          goto LABEL_24;
        }
        id v12 = (SnippetUI::OptionalBool *)*((void *)this + 4);
        if (v12) {
          goto LABEL_23;
        }
        id v12 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 4) = v12;
        goto LABEL_22;
      case 4u:
        if (v8 != 34) {
          goto LABEL_24;
        }
        id v12 = (SnippetUI::OptionalBool *)*((void *)this + 5);
        if (v12) {
          goto LABEL_23;
        }
        id v12 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 5) = v12;
LABEL_22:
        TagFallbacuint64_t k = v15;
LABEL_23:
        BOOL v10 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(a3, v12, TagFallback);
        goto LABEL_29;
      default:
LABEL_24:
        if (v8) {
          BOOL v13 = (v8 & 7) == 4;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          *((_DWORD *)a3 + 20) = v8 - 1;
          return TagFallback;
        }
        BOOL v10 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
LABEL_29:
        int v15 = (google::protobuf::internal *)v10;
        if (v10) {
          continue;
        }
        TagFallbacuint64_t k = 0;
        break;
    }
    return TagFallback;
  }
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_AspectRatio>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::ImageElement_AspectRatio *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  unsigned int v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    __n128 result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    uint64_t v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  __n128 result = (char *)SnippetUI::ImageElement_AspectRatio::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::OptionalBool *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  unsigned int v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    __n128 result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    uint64_t v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  __n128 result = (char *)SnippetUI::OptionalBool::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t SnippetUI::ImageElement_Symbol_Background::GetCachedSize(SnippetUI::ImageElement_Symbol_Background *this)
{
  return *((unsigned int *)this + 12);
}

char *SnippetUI::ImageElement_Symbol_Background::ByteSizeLong(SnippetUI::ImageElement_Symbol_Background *this)
{
  if (this == (SnippetUI::ImageElement_Symbol_Background *)&SnippetUI::_ImageElement_Symbol_Background_default_instance_)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v2 = (SnippetUI::Color *)*((void *)this + 2);
    if (v2)
    {
      uint64_t v3 = SnippetUI::Color::ByteSizeLong(v2);
      uint64_t v4 = (const google::protobuf::UnknownFieldSet *)&v3[((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v5 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 3);
    if (v5)
    {
      int v6 = SnippetUI::ImageElement_AspectRatio::ByteSizeLong(v5);
      uint64_t v4 = (const google::protobuf::UnknownFieldSet *)&v6[(void)v4
                                                        + 1
                                                        + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v7 = (SnippetUI::OptionalBool *)*((void *)this + 4);
    if (v7)
    {
      uint64_t v8 = SnippetUI::OptionalBool::ByteSizeLong(v7);
      uint64_t v4 = (const google::protobuf::UnknownFieldSet *)&v8[(void)v4
                                                        + 1
                                                        + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v9 = (SnippetUI::OptionalBool *)*((void *)this + 5);
    if (v9)
    {
      int v10 = SnippetUI::OptionalBool::ByteSizeLong(v9);
      uint64_t v4 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v4
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Symbol_Background *)((char *)this + 8), v4, (_DWORD *)this + 12);
  }
  else
  {
    *((_DWORD *)this + 12) = v4;
    return (char *)v4;
  }
}

uint64_t SnippetUI::ImageElement_Symbol_Background::IsInitialized(SnippetUI::ImageElement_Symbol_Background *this)
{
  return 1;
}

SnippetUI::ImageElement_Symbol_Background *SnippetUI::ImageElement_Symbol_Background::New(SnippetUI::ImageElement_Symbol_Background *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol_Background>(a2);
}

SnippetUI::ImageElement_Symbol_Background *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol_Background>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::ImageElement_Symbol_Background *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Symbol_Background>);
  }
  SnippetUI::ImageElement_Symbol_Background::ImageElement_Symbol_Background(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D77EFC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Symbol_Background>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::ImageElement_Symbol_Background *SnippetUI::ImageElement_Symbol_Background::New(SnippetUI::ImageElement_Symbol_Background *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol_Background>(0);
}

void SnippetUI::ImageElement_Symbol_Background::~ImageElement_Symbol_Background(SnippetUI::ImageElement_Symbol_Background *this)
{
  SnippetUI::ImageElement_Symbol_Background::~ImageElement_Symbol_Background(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(void *)this = &unk_1F211AF88;
  if (this != (SnippetUI::ImageElement_Symbol_Background *)&SnippetUI::_ImageElement_Symbol_Background_default_instance_)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 3);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)this + 4);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 5);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_ImageElement_AspectRatio_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  qword_1EA3DAD28 = 0;
  unk_1EA3DAD30 = 0;
  SnippetUI::_ImageElement_AspectRatio_default_instance_ = (uint64_t)&unk_1F211B108;
  dword_1EA3DAD38 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_AspectRatio_default_instance_, v4);
}

uint64_t SnippetUI::ImageElement_Contact_Avatar::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void SnippetUI::ImageElement_Contact_Avatar::MergeFrom(signed int **this, signed int **lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1538);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::ImageElement_Contact_Avatar::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
  }
}

void sub_1C5D781E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Contact_Avatar::MergeFrom(signed int **this, signed int **a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1553);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  unint64_t v5 = (unint64_t)a2[1];
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
}

void sub_1C5D78290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Contact_Avatar::CopyFrom(signed int **this, signed int **a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Contact_Avatar::Clear((SnippetUI::ImageElement_Contact_Avatar *)this);
    SnippetUI::ImageElement_Contact_Avatar::MergeFrom(this, a2);
  }
}

{
  uint64_t v2;

  if (a2 != this)
  {
    SnippetUI::ImageElement_Contact_Avatar::Clear((SnippetUI::ImageElement_Contact_Avatar *)this);
    SnippetUI::ImageElement_Contact_Avatar::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Contact_Avatar::Clear(SnippetUI::ImageElement_Contact_Avatar *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::ImageElement_Contact_Avatar *)((char *)this + 8);
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Contact_Avatar::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Contact_Avatar *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6 = *((_DWORD *)this + 6);
  if (v6 >= 1)
  {
    int v7 = 0;
    uint64_t v8 = (char *)this + 16;
    do
    {
      uint64_t v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v8, v7);
      uint64_t v10 = v9;
      unsigned int v11 = *(_DWORD *)(v9 + 8);
      if (*(char *)(v9 + 23) >= 0)
      {
        unint64_t v12 = *(unsigned __int8 *)(v9 + 23);
      }
      else
      {
        uint64_t v9 = *(void *)v9;
        unint64_t v12 = v11;
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v9, (const char *)v12, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Contact.Avatar.contact_ids");
      if (*(char *)(v10 + 23) < 0)
      {
        int64_t v13 = *(void *)(v10 + 8);
        if (v13 > 127) {
          goto LABEL_16;
        }
      }
      else
      {
        int64_t v13 = *(unsigned __int8 *)(v10 + 23);
      }
      if (*(void *)a3 - (void)a2 + 14 >= v13)
      {
        *(unsigned char *)a2 = 10;
        *((unsigned char *)a2 + 1) = v13;
        if (*(char *)(v10 + 23) >= 0) {
          int v14 = (const void *)v10;
        }
        else {
          int v14 = *(const void **)v10;
        }
        memcpy((char *)a2 + 2, v14, v13);
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v13 + 2);
        goto LABEL_14;
      }
LABEL_16:
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v10, (char *)a2);
LABEL_14:
      ++v7;
    }
    while (v6 != v7);
  }
  uint64_t v15 = *((void *)this + 1);
  if ((v15 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v15 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

google::protobuf::internal *SnippetUI::ImageElement_Contact_Avatar::_InternalParse(SnippetUI::ImageElement_Contact_Avatar *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  long long v21 = a2;
  unint64_t v5 = (unint64_t *)((char *)this + 8);
  int v6 = (unsigned int *)((char *)this + 16);
LABEL_2:
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v21 + 1);
    uint64_t v9 = (char *)*(unsigned __int8 *)v21;
    if ((*(char *)v21 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_6:
      long long v21 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, v9);
    long long v21 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v9 == 10)
    {
      unsigned int v11 = (char *)TagFallback - 1;
      while (1)
      {
        unint64_t v12 = v11 + 1;
        long long v21 = (google::protobuf::internal *)(v11 + 1);
        int64_t v13 = (int *)*((void *)this + 4);
        if (!v13) {
          break;
        }
        uint64_t v14 = *((int *)this + 6);
        int v15 = *v13;
        if ((int)v14 >= *v13)
        {
          if (v15 == *((_DWORD *)this + 7))
          {
LABEL_20:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v15 + 1);
            int64_t v13 = (int *)*((void *)this + 4);
            int v15 = *v13;
          }
          *int64_t v13 = v15 + 1;
          uint64_t v17 = *(atomic_ullong **)v6;
          if (!*(void *)v6) {
            operator new();
          }
          if (v17[14]) {
          AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v17, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
          }
          AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
          AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
          AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
          uint64_t v18 = *((void *)this + 4);
          uint64_t v19 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v19 + 1;
          *(void *)(v18 + 8 * v19 + 8) = AlignedAndAddCleanup;
          unint64_t v12 = (std::string::value_type *)v21;
          goto LABEL_26;
        }
        *((_DWORD *)this + 6) = v14 + 1;
        AlignedAndAddCleanup = *(std::string **)&v13[2 * v14 + 2];
LABEL_26:
        unsigned int v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(AlignedAndAddCleanup, v12, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.ImageElement.Contact.Avatar.contact_ids");
        long long v21 = (google::protobuf::internal *)v11;
        if (!v11) {
          return 0;
        }
        if (*(void *)a3 <= (unint64_t)v11 || *v11 != 10) {
          goto LABEL_2;
        }
      }
      int v15 = *((_DWORD *)this + 7);
      goto LABEL_20;
    }
    if (v9) {
      BOOL v10 = (v9 & 7) == 4;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      *((_DWORD *)a3 + 20) = v9 - 1;
      return TagFallback;
    }
    long long v21 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v5, TagFallback, a3, v7);
    if (!v21) {
      return 0;
    }
  }
  return v21;
}

uint64_t SnippetUI::ImageElement_Contact_Avatar::GetCachedSize(SnippetUI::ImageElement_Contact_Avatar *this)
{
  return *((unsigned int *)this + 10);
}

char *SnippetUI::ImageElement_Contact_Avatar::ByteSizeLong(SnippetUI::ImageElement_Contact_Avatar *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2 < 1)
  {
    uint64_t v4 = (const google::protobuf::UnknownFieldSet *)*((unsigned int *)this + 6);
  }
  else
  {
    int v3 = 0;
    uint64_t v4 = (const google::protobuf::UnknownFieldSet *)*((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16, v3);
      uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0) {
        uint64_t v6 = *(void *)(v5 + 8);
      }
      uint64_t v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6));
      ++v3;
    }
    while (v2 != v3);
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Contact_Avatar *)((char *)this + 8), v4, (_DWORD *)this + 10);
  }
  else
  {
    *((_DWORD *)this + 10) = v4;
    return (char *)v4;
  }
}

uint64_t SnippetUI::ImageElement_Contact_Avatar::IsInitialized(SnippetUI::ImageElement_Contact_Avatar *this)
{
  return 1;
}

SnippetUI::ImageElement_Contact_Avatar *SnippetUI::ImageElement_Contact_Avatar::New(SnippetUI::ImageElement_Contact_Avatar *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Avatar>(a2);
}

SnippetUI::ImageElement_Contact_Avatar *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Avatar>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::ImageElement_Contact_Avatar *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Contact_Avatar>);
  }
  SnippetUI::ImageElement_Contact_Avatar::ImageElement_Contact_Avatar(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D78868(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Contact_Avatar>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::ImageElement_Contact_Avatar *SnippetUI::ImageElement_Contact_Avatar::New(SnippetUI::ImageElement_Contact_Avatar *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Avatar>(0);
}

void SnippetUI::ImageElement_Contact_Avatar::~ImageElement_Contact_Avatar(SnippetUI::ImageElement_Contact_Avatar *this)
{
  *(void *)this = &unk_1F211AB08;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F211AB08;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1F211AB08;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

void InitDefaultsscc_info_ImageElement_Contact_Monogram_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Contact_Monogram::ImageElement_Contact_Monogram((SnippetUI::ImageElement_Contact_Monogram *)&SnippetUI::_ImageElement_Contact_Monogram_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Contact_Monogram_default_instance_, v4);
}

SnippetUI::ImageElement_Contact_Monogram *SnippetUI::ImageElement_Contact_Monogram::ImageElement_Contact_Monogram(SnippetUI::ImageElement_Contact_Monogram *this)
{
  *(void *)this = &unk_1F211AA48;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load_explicit(scc_info_ImageElement_Contact_Monogram_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Contact_Monogram_ImageElement_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1C5D78A64(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Contact_Monogram::GetMetadata(SnippetUI::ImageElement_Contact_Monogram *this)
{
  return qword_1EA3D8530;
}

uint64_t SnippetUI::ImageElement_Contact_Monogram::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void SnippetUI::ImageElement_Contact_Monogram::MergeFrom(SnippetUI::ImageElement_Contact_Monogram *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1340);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::ImageElement_Contact_Monogram::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D78B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Contact_Monogram::MergeFrom(SnippetUI::ImageElement_Contact_Monogram *this, const SnippetUI::ImageElement_Contact_Monogram *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1355);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Contact_Monogram *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      return;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    return;
  }
  uint64_t v9 = (std::string *)*((void *)this + 2);
  uint64_t v8 = (char *)this + 16;
  char v7 = v9;
  if (v9 != (std::string *)v6)
  {
    if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v8, v6);
    }
    std::string::operator=(v7, (const std::string *)v6);
  }
}

void sub_1C5D78C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Contact_Monogram::CopyFrom(SnippetUI::ImageElement_Contact_Monogram *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Contact_Monogram::Clear(this);
    SnippetUI::ImageElement_Contact_Monogram::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Contact_Monogram::Clear(SnippetUI::ImageElement_Contact_Monogram *this)
{
  uint64_t v1 = *((void *)this + 2);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::ImageElement_Contact_Monogram *)((char *)this + 8);
  if (v3) {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Contact_Monogram::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Contact_Monogram *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char v7 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    uint64_t v8 = (const char *)*((void *)v7 + 1);
    if (!v8) {
      goto LABEL_7;
    }
    char v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  uint64_t v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((unsigned char *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Contact.Monogram.letters");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 2), (char *)a2);
  }
LABEL_7:
  uint64_t v9 = *((void *)this + 1);
  if ((v9 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v9 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

google::protobuf::internal *SnippetUI::ImageElement_Contact_Monogram::_InternalParse(SnippetUI::ImageElement_Contact_Monogram *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unint64_t v12 = a2;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v12, *((_DWORD *)a3 + 23))) {
      return v12;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v12 + 1);
    uint64_t v8 = (char *)*(unsigned __int8 *)v12;
    if ((*(char *)v12 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v12 + 2);
LABEL_6:
      unint64_t v12 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v12, v8);
    unint64_t v12 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    if (v8 == 10)
    {
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      }
      char v10 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.ImageElement.Contact.Monogram.letters");
      goto LABEL_16;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    char v10 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v4, TagFallback, a3, v6);
LABEL_16:
    unint64_t v12 = (google::protobuf::internal *)v10;
    if (!v10) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

uint64_t SnippetUI::ImageElement_Contact_Monogram::GetCachedSize(SnippetUI::ImageElement_Contact_Monogram *this)
{
  return *((unsigned int *)this + 6);
}

char *SnippetUI::ImageElement_Contact_Monogram::ByteSizeLong(SnippetUI::ImageElement_Contact_Monogram *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(void *)(v1 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v1 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = v2;
  }
  uint64_t v4 = (const google::protobuf::UnknownFieldSet *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Contact_Monogram *)((char *)this + 8), v4, (_DWORD *)this + 6);
  }
  *((_DWORD *)this + 6) = v4;
  return (char *)v4;
}

uint64_t SnippetUI::ImageElement_Contact_Monogram::IsInitialized(SnippetUI::ImageElement_Contact_Monogram *this)
{
  return 1;
}

SnippetUI::ImageElement_Contact_Monogram *SnippetUI::ImageElement_Contact_Monogram::New(SnippetUI::ImageElement_Contact_Monogram *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Monogram>(a2);
}

SnippetUI::ImageElement_Contact_Monogram *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Monogram>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::ImageElement_Contact_Monogram *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Contact_Monogram>);
  }
  SnippetUI::ImageElement_Contact_Monogram::ImageElement_Contact_Monogram(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D7901C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Contact_Monogram>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::ImageElement_Contact_Monogram *SnippetUI::ImageElement_Contact_Monogram::New(SnippetUI::ImageElement_Contact_Monogram *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Monogram>(0);
}

void SnippetUI::ImageElement_Contact_Monogram::~ImageElement_Contact_Monogram(SnippetUI::ImageElement_Contact_Monogram *this)
{
  SnippetUI::ImageElement_Contact_Monogram::~ImageElement_Contact_Monogram(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F211AA48;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_ImageElement_Contact_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Contact::ImageElement_Contact((SnippetUI::ImageElement_Contact *)&SnippetUI::_ImageElement_Contact_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Contact_default_instance_, v4);
  qword_1EA3DACD8 = (uint64_t)&SnippetUI::_ImageElement_Contact_Monogram_default_instance_;
  unk_1EA3DACE0 = &SnippetUI::_ImageElement_Contact_Avatar_default_instance_;
}

SnippetUI::ImageElement_Contact *SnippetUI::ImageElement_Contact::ImageElement_Contact(SnippetUI::ImageElement_Contact *this)
{
  *(void *)this = &unk_1F211ABC8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if (atomic_load_explicit(scc_info_ImageElement_Contact_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Contact_ImageElement_2eproto);
  }
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1C5D79218(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Contact::GetMetadata(SnippetUI::ImageElement_Contact *this)
{
  return qword_1EA3D8550;
}

uint64_t SnippetUI::ImageElement_Contact::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

void SnippetUI::ImageElement_Contact::MergeFrom(SnippetUI::ImageElement_Contact *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1853);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::ImageElement_Contact::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D79334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Contact::MergeFrom(SnippetUI::ImageElement_Contact *this, const SnippetUI::ImageElement_Contact *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1868);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Contact *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  int v6 = *((_DWORD *)a2 + 4);
  if (v6) {
    *((_DWORD *)this + 4) = v6;
  }
  int v7 = *((_DWORD *)a2 + 9);
  if (v7 != 2)
  {
    if (v7 != 1) {
      return;
    }
    if (*((_DWORD *)this + 9) == 1)
    {
      uint64_t v8 = (SnippetUI::ImageElement_Contact_Monogram *)*((void *)this + 3);
    }
    else
    {
      SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      uint64_t v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Monogram>(0);
      *((void *)this + 3) = v8;
      if (*((_DWORD *)a2 + 9) != 1)
      {
        char v10 = (const SnippetUI::ImageElement_Contact_Monogram *)&SnippetUI::_ImageElement_Contact_Monogram_default_instance_;
        goto LABEL_18;
      }
    }
    char v10 = (const SnippetUI::ImageElement_Contact_Monogram *)*((void *)a2 + 3);
LABEL_18:
    SnippetUI::ImageElement_Contact_Monogram::MergeFrom(v8, v10);
    return;
  }
  if (*((_DWORD *)this + 9) == 2)
  {
    uint64_t v9 = (signed int **)*((void *)this + 3);
  }
  else
  {
    SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
    *((_DWORD *)this + 9) = 2;
    uint64_t v9 = (signed int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Avatar>(0);
    *((void *)this + 3) = v9;
    if (*((_DWORD *)a2 + 9) != 2)
    {
      unsigned int v11 = (signed int **)&SnippetUI::_ImageElement_Contact_Avatar_default_instance_;
      goto LABEL_20;
    }
  }
  unsigned int v11 = (signed int **)*((void *)a2 + 3);
LABEL_20:
  SnippetUI::ImageElement_Contact_Avatar::MergeFrom(v9, v11);
}

void sub_1C5D79494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Contact::clear_content(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 36);
  if (v2 == 2 || v2 == 1)
  {
    this = *(void *)(this + 24);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

void SnippetUI::ImageElement_Contact::CopyFrom(SnippetUI::ImageElement_Contact *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Contact::Clear(this);
    SnippetUI::ImageElement_Contact::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Contact::Clear(SnippetUI::ImageElement_Contact *this)
{
  *((_DWORD *)this + 4) = 0;
  SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::ImageElement_Contact *)((char *)this + 8);
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Contact::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Contact *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6 = *((_DWORD *)this + 9);
  if (v6 == 1)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    int v7 = (SnippetUI::ImageElement_Contact_Monogram *)*((void *)this + 3);
    *a2 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 6);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        unsigned int v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          char v12 = v11;
          *v11++ = v10 | 0x80;
          unsigned int v13 = v10 >> 7;
          unsigned int v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        uint64_t v9 = v12 + 2;
        *unsigned int v11 = v13;
      }
      else
      {
        a2[2] = v10;
        uint64_t v9 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v8;
      uint64_t v9 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_Contact_Monogram::InternalSerializeWithCachedSizesToArray(v7, (google::protobuf::UnknownFieldSet *)v9, a3, a4);
    int v6 = *((_DWORD *)this + 9);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    int v15 = (SnippetUI::ImageElement_Contact_Avatar *)*((void *)this + 3);
    *a2 = 18;
    unsigned int v16 = *((_DWORD *)v15 + 10);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        uint64_t v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v20 = v19;
          *v19++ = v18 | 0x80;
          unsigned int v21 = v18 >> 7;
          unsigned int v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        uint64_t v17 = v20 + 2;
        *uint64_t v19 = v21;
      }
      else
      {
        a2[2] = v18;
        uint64_t v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      uint64_t v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_Contact_Avatar::InternalSerializeWithCachedSizesToArray(v15, (google::protobuf::UnknownFieldSet *)v17, a3, a4);
  }
  unsigned int v23 = *((_DWORD *)this + 4);
  if (v23)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned int v23 = *((_DWORD *)this + 4);
    }
    *a2 = 24;
    if (v23 > 0x7F)
    {
      a2[1] = v23 | 0x80;
      unint64_t v24 = (unint64_t)(int)v23 >> 7;
      if (v23 >> 14)
      {
        unsigned int v25 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v26 = v25;
          *v25++ = v24 | 0x80;
          unint64_t v27 = v24 >> 7;
          unint64_t v28 = v24 >> 14;
          v24 >>= 7;
        }
        while (v28);
        a2 = (char *)(v26 + 2);
        *unsigned int v25 = v27;
      }
      else
      {
        a2[2] = v24;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v23;
      a2 += 2;
    }
  }
  uint64_t v29 = *((void *)this + 1);
  if ((v29 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v29 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::ImageElement_Contact::_InternalParse(SnippetUI::ImageElement_Contact *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v34 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v34, *((_DWORD *)a3 + 23)))return v34; {
        TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v34 + 1);
        }
        unsigned int v8 = (char *)*(unsigned __int8 *)v34;
        if ((*(char *)v34 & 0x80000000) == 0) {
          goto LABEL_6;
        }
        unsigned int v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v34 + 2);
LABEL_6:
          unsigned int v34 = TagFallback;
          goto LABEL_7;
        }
        TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v34, v8);
        unsigned int v34 = TagFallback;
        if (!TagFallback) {
          return TagFallback;
        }
LABEL_7:
        unsigned int v9 = v8 >> 3;
        if (v8 >> 3 != 3) {
          break;
        }
        if (v8 != 24) {
          goto LABEL_13;
        }
        char v12 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v13) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_23;
        }
        int v14 = *(char *)v12;
        unint64_t v13 = v13 + (v14 << 7) - 128;
        if ((v14 & 0x80000000) == 0)
        {
          char v12 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_23:
          unsigned int v34 = v12;
          goto LABEL_24;
        }
        unsigned int v34 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v13);
        if (!v34) {
          return 0;
        }
LABEL_24:
        *((_DWORD *)this + 4) = v13;
      }
      if (v9 != 2) {
        break;
      }
      if (v8 != 18) {
        goto LABEL_13;
      }
      if (*((_DWORD *)this + 9) == 2)
      {
        int v15 = (SnippetUI::ImageElement_Contact_Avatar *)*((void *)this + 3);
      }
      else
      {
        SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
        *((_DWORD *)this + 9) = 2;
        int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Avatar>(0);
        *((void *)this + 3) = v15;
        TagFallbacuint64_t k = v34;
      }
      unsigned int v17 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallbacuint64_t k = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback) {
          return 0;
        }
        unsigned int v18 = SizeFallback;
        unsigned int v17 = v22;
      }
      else
      {
        unsigned int v18 = (char *)TagFallback + 1;
      }
      int v23 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v18, v17);
      int v24 = *((_DWORD *)a3 + 22);
      BOOL v25 = __OFSUB__(v24--, 1);
      *((_DWORD *)a3 + 22) = v24;
      if (v24 < 0 != v25) {
        return 0;
      }
      int v26 = v23;
      unint64_t v27 = SnippetUI::ImageElement_Contact_Avatar::_InternalParse(v15, (google::protobuf::internal *)v18, a3);
      if (!v27) {
        return 0;
      }
LABEL_47:
      ++*((_DWORD *)a3 + 22);
      if (*((_DWORD *)a3 + 20)) {
        return 0;
      }
      int v32 = *((_DWORD *)a3 + 7) + v26;
      *((_DWORD *)a3 + 7) = v32;
      *(void *)a3 = *((void *)a3 + 1) + (v32 & (v32 >> 31));
      unsigned int v34 = v27;
    }
    if (v9 == 1 && v8 == 10)
    {
      if (*((_DWORD *)this + 9) == 1)
      {
        unsigned int v16 = (SnippetUI::ImageElement_Contact_Monogram *)*((void *)this + 3);
      }
      else
      {
        SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
        unsigned int v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Monogram>(0);
        *((void *)this + 3) = v16;
        TagFallbacuint64_t k = v34;
      }
      unsigned int v19 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        unint64_t v28 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!v28) {
          return 0;
        }
        uint64_t v20 = v28;
        unsigned int v19 = v29;
      }
      else
      {
        uint64_t v20 = (char *)TagFallback + 1;
      }
      int v30 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v20, v19);
      int v31 = *((_DWORD *)a3 + 22);
      BOOL v25 = __OFSUB__(v31--, 1);
      *((_DWORD *)a3 + 22) = v31;
      if (v31 < 0 != v25) {
        return 0;
      }
      int v26 = v30;
      unint64_t v27 = SnippetUI::ImageElement_Contact_Monogram::_InternalParse(v16, (google::protobuf::internal *)v20, a3);
      if (!v27) {
        return 0;
      }
      goto LABEL_47;
    }
LABEL_13:
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    unsigned int v34 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
    if (!v34) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

uint64_t SnippetUI::ImageElement_Contact::GetCachedSize(SnippetUI::ImageElement_Contact *this)
{
  return *((unsigned int *)this + 8);
}

char *SnippetUI::ImageElement_Contact::ByteSizeLong(SnippetUI::ImageElement_Contact *this)
{
  int v2 = *((_DWORD *)this + 4);
  if (v2)
  {
    if (v2 < 0) {
      uint64_t v3 = 11;
    }
    else {
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  int v4 = *((_DWORD *)this + 9);
  if (v4 == 2)
  {
    uint64_t v5 = SnippetUI::ImageElement_Contact_Avatar::ByteSizeLong(*((SnippetUI::ImageElement_Contact_Avatar **)this + 3));
  }
  else
  {
    if (v4 != 1) {
      goto LABEL_11;
    }
    uint64_t v5 = SnippetUI::ImageElement_Contact_Monogram::ByteSizeLong(*((SnippetUI::ImageElement_Contact_Monogram **)this + 3));
  }
  v3 += (uint64_t)&v5[((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1];
LABEL_11:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Contact *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v3, (_DWORD *)this + 8);
  }
  else
  {
    *((_DWORD *)this + 8) = v3;
    return (char *)v3;
  }
}

uint64_t SnippetUI::ImageElement_Contact::IsInitialized(SnippetUI::ImageElement_Contact *this)
{
  return 1;
}

SnippetUI::ImageElement_Contact *SnippetUI::ImageElement_Contact::New(SnippetUI::ImageElement_Contact *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact>(a2);
}

SnippetUI::ImageElement_Contact *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::ImageElement_Contact *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Contact>);
  }
  SnippetUI::ImageElement_Contact::ImageElement_Contact(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D79C38(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40E7D3C9D8);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Contact>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::ImageElement_Contact *SnippetUI::ImageElement_Contact::New(SnippetUI::ImageElement_Contact *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact>(0);
}

void SnippetUI::ImageElement_Contact::~ImageElement_Contact(SnippetUI::ImageElement_Contact *this)
{
  SnippetUI::ImageElement_Contact::~ImageElement_Contact(this);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F211ABC8;
  if (*((_DWORD *)this + 9)) {
    SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_ImageElement_AppIcon_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_AppIcon::ImageElement_AppIcon((SnippetUI::ImageElement_AppIcon *)&SnippetUI::_ImageElement_AppIcon_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_AppIcon_default_instance_, v4);
}

SnippetUI::ImageElement_AppIcon *SnippetUI::ImageElement_AppIcon::ImageElement_AppIcon(SnippetUI::ImageElement_AppIcon *this)
{
  *(void *)this = &unk_1F211AC88;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 7) = 0;
  if (atomic_load_explicit(scc_info_ImageElement_AppIcon_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_AppIcon_ImageElement_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_1C5D79E08(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_AppIcon::GetMetadata(SnippetUI::ImageElement_AppIcon *this)
{
  return qword_1EA3D8560;
}

uint64_t SnippetUI::ImageElement_AppIcon::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

void SnippetUI::ImageElement_AppIcon::MergeFrom(SnippetUI::ImageElement_AppIcon *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 2087);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::ImageElement_AppIcon::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D79F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_AppIcon::MergeFrom(SnippetUI::ImageElement_AppIcon *this, const SnippetUI::ImageElement_AppIcon *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 2102);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_AppIcon *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  int v8 = *((_DWORD *)a2 + 6);
  if (v8) {
    *((_DWORD *)this + 6) = v8;
  }
}

void sub_1C5D7A01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_AppIcon::CopyFrom(SnippetUI::ImageElement_AppIcon *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_AppIcon::Clear(this);
    SnippetUI::ImageElement_AppIcon::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_AppIcon::Clear(SnippetUI::ImageElement_AppIcon *this)
{
  uint64_t v1 = *((void *)this + 2);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::ImageElement_AppIcon *)((char *)this + 8);
  *((_DWORD *)v2 + 4) = 0;
  if (v3) {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_AppIcon::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_AppIcon *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char v7 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    int v8 = (const char *)*((void *)v7 + 1);
    if (!v8) {
      goto LABEL_7;
    }
    char v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  int v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((unsigned char *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.AppIcon.application_bundle_identifier");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 2), (char *)a2);
  }
LABEL_7:
  unsigned int v9 = *((_DWORD *)this + 6);
  if (v9)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      unsigned int v9 = *((_DWORD *)this + 6);
    }
    *(unsigned char *)a2 = 16;
    if (v9 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v9 | 0x80;
      unint64_t v10 = (unint64_t)(int)v9 >> 7;
      if (v9 >> 14)
      {
        unsigned int v11 = (char *)a2 + 2;
        do
        {
          char v12 = v11;
          *v11++ = v10 | 0x80;
          unint64_t v13 = v10 >> 7;
          unint64_t v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        a2 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
        *unsigned int v11 = v13;
      }
      else
      {
        *((unsigned char *)a2 + 2) = v10;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((unsigned char *)a2 + 1) = v9;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  uint64_t v15 = *((void *)this + 1);
  if ((v15 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v15 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

google::protobuf::internal *SnippetUI::ImageElement_AppIcon::_InternalParse(SnippetUI::ImageElement_AppIcon *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v17 = a2;
  uint64_t v5 = (std::string **)((char *)this + 16);
  uint64_t v6 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23))) {
        return v17;
      }
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v17 + 1);
      unsigned int v9 = (char *)*(unsigned __int8 *)v17;
      if ((*(char *)v17 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      unsigned int v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
        unsigned int v17 = TagFallback;
        goto LABEL_7;
      }
      TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v9);
      unsigned int v17 = TagFallback;
      if (!TagFallback) {
        return TagFallback;
      }
LABEL_7:
      if (v9 >> 3 != 2) {
        break;
      }
      if (v9 != 16) {
        goto LABEL_12;
      }
      unint64_t v13 = (google::protobuf::internal *)((char *)TagFallback + 1);
      LODWORD(v14) = *(unsigned __int8 *)TagFallback;
      if ((*(char *)TagFallback & 0x80000000) == 0) {
        goto LABEL_21;
      }
      int v15 = *(char *)v13;
      unint64_t v14 = v14 + (v15 << 7) - 128;
      if ((v15 & 0x80000000) == 0)
      {
        unint64_t v13 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_21:
        unsigned int v17 = v13;
        goto LABEL_22;
      }
      unsigned int v17 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v14);
      if (!v17) {
        return 0;
      }
LABEL_22:
      *((_DWORD *)this + 6) = v14;
    }
    if (v9 >> 3 == 1 && v9 == 10)
    {
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      }
      char v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(*v5, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.ImageElement.AppIcon.application_bundle_identifier");
      goto LABEL_26;
    }
LABEL_12:
    if (!v9 || (v9 & 7) == 4) {
      break;
    }
    char v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_26:
    unsigned int v17 = (google::protobuf::internal *)v12;
    if (!v12) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v9 - 1;
  return TagFallback;
}

uint64_t SnippetUI::ImageElement_AppIcon::GetCachedSize(SnippetUI::ImageElement_AppIcon *this)
{
  return *((unsigned int *)this + 7);
}

char *SnippetUI::ImageElement_AppIcon::ByteSizeLong(SnippetUI::ImageElement_AppIcon *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(void *)(v1 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    int v4 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v1 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = v2;
  }
  int v4 = (const google::protobuf::UnknownFieldSet *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  int v5 = *((_DWORD *)this + 6);
  if (v5)
  {
    if (v5 < 0) {
      uint64_t v6 = 11;
    }
    else {
      uint64_t v6 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    int v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v6);
  }
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_AppIcon *)((char *)this + 8), v4, (_DWORD *)this + 7);
  }
  *((_DWORD *)this + 7) = v4;
  return (char *)v4;
}

uint64_t SnippetUI::ImageElement_AppIcon::IsInitialized(SnippetUI::ImageElement_AppIcon *this)
{
  return 1;
}

SnippetUI::ImageElement_AppIcon *SnippetUI::ImageElement_AppIcon::New(SnippetUI::ImageElement_AppIcon *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AppIcon>(a2);
}

SnippetUI::ImageElement_AppIcon *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AppIcon>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::ImageElement_AppIcon *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_AppIcon>);
  }
  SnippetUI::ImageElement_AppIcon::ImageElement_AppIcon(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D7A504(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_AppIcon>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::ImageElement_AppIcon *SnippetUI::ImageElement_AppIcon::New(SnippetUI::ImageElement_AppIcon *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AppIcon>(0);
}

void SnippetUI::ImageElement_AppIcon::~ImageElement_AppIcon(SnippetUI::ImageElement_AppIcon *this)
{
  SnippetUI::ImageElement_AppIcon::~ImageElement_AppIcon(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F211AC88;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_ImageElement_Symbol_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Symbol::ImageElement_Symbol((SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Symbol_default_instance_, v4);
  qword_1EB690C18 = (uint64_t)&SnippetUI::_Color_default_instance_;
  unk_1EB690C20 = &SnippetUI::_ImageElement_Symbol_Background_default_instance_;
}

SnippetUI::ImageElement_Symbol *SnippetUI::ImageElement_Symbol::ImageElement_Symbol(SnippetUI::ImageElement_Symbol *this)
{
  *(void *)this = &unk_1F211B048;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  if (atomic_load_explicit(scc_info_ImageElement_Symbol_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Symbol_ImageElement_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  return this;
}

void sub_1C5D7A70C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Symbol::GetMetadata(SnippetUI::ImageElement_Symbol *this)
{
  return qword_1EA3D85B0;
}

uint64_t SnippetUI::ImageElement_Symbol::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

void SnippetUI::ImageElement_Symbol::MergeFrom(SnippetUI::ImageElement_Symbol *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 4365);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::ImageElement_Symbol::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D7A828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Symbol::MergeFrom(SnippetUI::ImageElement_Symbol *this, const SnippetUI::ImageElement_Symbol *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 4380);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Symbol *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  unsigned int v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_)
  {
    unint64_t v10 = (const SnippetUI::Color *)*((void *)a2 + 4);
    if (v10)
    {
      unsigned int v11 = (SnippetUI::Color *)*((void *)this + 4);
      if (!v11)
      {
        unsigned int v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
        *((void *)this + 4) = v11;
        unint64_t v10 = (const SnippetUI::Color *)*((void *)a2 + 4);
      }
      if (v10) {
        char v12 = v10;
      }
      else {
        char v12 = (const SnippetUI::Color *)&SnippetUI::_Color_default_instance_;
      }
      SnippetUI::Color::MergeFrom(v11, v12);
    }
    unint64_t v13 = (const SnippetUI::ImageElement_Symbol_Background *)*((void *)a2 + 5);
    if (v13)
    {
      unint64_t v14 = (SnippetUI::ImageElement_Symbol_Background *)*((void *)this + 5);
      if (!v14)
      {
        unint64_t v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol_Background>(0);
        *((void *)this + 5) = v14;
        unint64_t v13 = (const SnippetUI::ImageElement_Symbol_Background *)*((void *)a2 + 5);
      }
      if (v13) {
        int v15 = v13;
      }
      else {
        int v15 = (const SnippetUI::ImageElement_Symbol_Background *)&SnippetUI::_ImageElement_Symbol_Background_default_instance_;
      }
      SnippetUI::ImageElement_Symbol_Background::MergeFrom(v14, v15);
    }
  }
  int v16 = *((_DWORD *)a2 + 12);
  if (v16) {
    *((_DWORD *)this + 12) = v16;
  }
  int v17 = *((_DWORD *)a2 + 13);
  if (v17) {
    *((_DWORD *)this + 13) = v17;
  }
}

void sub_1C5D7A9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Symbol::CopyFrom(SnippetUI::ImageElement_Symbol *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Symbol::Clear(this);
    SnippetUI::ImageElement_Symbol::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Symbol::Clear(SnippetUI::ImageElement_Symbol *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v6 = (void *)((char *)this + 40);
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 4) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  char v8 = *((unsigned char *)this + 8);
  char v7 = (SnippetUI::ImageElement_Symbol *)((char *)this + 8);
  void *v6 = 0;
  v6[1] = 0;
  if (v8)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v7);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Symbol::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Symbol *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char v7 = (uint64_t *)*((void *)this + 2);
  if ((*((char *)v7 + 23) & 0x80000000) == 0)
  {
    char v8 = (const char *)*((unsigned __int8 *)v7 + 23);
    if (!*((unsigned char *)v7 + 23)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  char v8 = (const char *)v7[1];
  if (v8)
  {
    char v7 = (uint64_t *)*v7;
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v7, v8, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Symbol.name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 2), (char *)a2);
  }
LABEL_7:
  if (this != (SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_)
  {
    unsigned int v9 = (SnippetUI::Color *)*((void *)this + 4);
    if (v9)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        unsigned int v9 = (SnippetUI::Color *)*((void *)this + 4);
      }
      *(unsigned char *)a2 = 18;
      unsigned int v10 = *((_DWORD *)v9 + 6);
      if (v10 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v10 | 0x80;
        unsigned int v12 = v10 >> 7;
        if (v10 >> 14)
        {
          unint64_t v13 = (char *)a2 + 2;
          do
          {
            unint64_t v14 = v13;
            *v13++ = v12 | 0x80;
            unsigned int v15 = v12 >> 7;
            unsigned int v16 = v12 >> 14;
            v12 >>= 7;
          }
          while (v16);
          unsigned int v11 = v14 + 2;
          *unint64_t v13 = v15;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v12;
          unsigned int v11 = (char *)a2 + 3;
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v10;
        unsigned int v11 = (char *)a2 + 2;
      }
      a2 = SnippetUI::Color::InternalSerializeWithCachedSizesToArray(v9, v11, a3, a4);
    }
  }
  unsigned int v17 = *((_DWORD *)this + 12);
  if (v17)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      unsigned int v17 = *((_DWORD *)this + 12);
    }
    *(unsigned char *)a2 = 24;
    if (v17 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v17 | 0x80;
      unint64_t v18 = (unint64_t)(int)v17 >> 7;
      if (v17 >> 14)
      {
        unsigned int v19 = (char *)a2 + 2;
        do
        {
          uint64_t v20 = v19;
          *v19++ = v18 | 0x80;
          unint64_t v21 = v18 >> 7;
          unint64_t v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        a2 = (google::protobuf::UnknownFieldSet *)(v20 + 2);
        *unsigned int v19 = v21;
      }
      else
      {
        *((unsigned char *)a2 + 2) = v18;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((unsigned char *)a2 + 1) = v17;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  unsigned int v23 = *((_DWORD *)this + 13);
  if (v23)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      unsigned int v23 = *((_DWORD *)this + 13);
    }
    *(unsigned char *)a2 = 32;
    if (v23 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v23 | 0x80;
      unint64_t v24 = (unint64_t)(int)v23 >> 7;
      if (v23 >> 14)
      {
        BOOL v25 = (char *)a2 + 2;
        do
        {
          int v26 = v25;
          *v25++ = v24 | 0x80;
          unint64_t v27 = v24 >> 7;
          unint64_t v28 = v24 >> 14;
          v24 >>= 7;
        }
        while (v28);
        a2 = (google::protobuf::UnknownFieldSet *)(v26 + 2);
        *BOOL v25 = v27;
      }
      else
      {
        *((unsigned char *)a2 + 2) = v24;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((unsigned char *)a2 + 1) = v23;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  unsigned int v29 = (uint64_t *)*((void *)this + 3);
  if ((*((char *)v29 + 23) & 0x80000000) == 0)
  {
    int v30 = (const char *)*((unsigned __int8 *)v29 + 23);
    if (!*((unsigned char *)v29 + 23)) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  int v30 = (const char *)v29[1];
  if (v30)
  {
    unsigned int v29 = (uint64_t *)*v29;
LABEL_44:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v29, v30, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Symbol.dark_mode_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((const void ***)this + 3), (char *)a2);
  }
LABEL_45:
  if (this != (SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_)
  {
    int v31 = (SnippetUI::ImageElement_Symbol_Background *)*((void *)this + 5);
    if (v31)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        int v31 = (SnippetUI::ImageElement_Symbol_Background *)*((void *)this + 5);
      }
      *(unsigned char *)a2 = 50;
      unsigned int v32 = *((_DWORD *)v31 + 12);
      if (v32 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v32 | 0x80;
        unsigned int v34 = v32 >> 7;
        if (v32 >> 14)
        {
          unint64_t v35 = (char *)a2 + 2;
          do
          {
            unsigned int v36 = v35;
            *v35++ = v34 | 0x80;
            unsigned int v37 = v34 >> 7;
            unsigned int v38 = v34 >> 14;
            v34 >>= 7;
          }
          while (v38);
          uint64_t v33 = v36 + 2;
          *unint64_t v35 = v37;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v34;
          uint64_t v33 = (char *)a2 + 3;
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v32;
        uint64_t v33 = (char *)a2 + 2;
      }
      a2 = SnippetUI::ImageElement_Symbol_Background::InternalSerializeWithCachedSizesToArray(v31, v33, a3, a4);
    }
  }
  uint64_t v39 = *((void *)this + 1);
  if ((v39 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v39 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

google::protobuf::internal *SnippetUI::ImageElement_Symbol::_InternalParse(SnippetUI::ImageElement_Symbol *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v36 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  char v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v36, *((_DWORD *)a3 + 23))) {
      return v36;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v36 + 1);
    unsigned int v10 = (char *)*(unsigned __int8 *)v36;
    if ((*(char *)v36 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v36 + 2);
LABEL_6:
      unsigned int v36 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v36, v10);
    unsigned int v36 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_38;
        }
        unsigned int v11 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v12 = (std::string::value_type *)TagFallback;
        unint64_t v13 = a3;
        unint64_t v14 = "SnippetUI.ImageElement.Symbol.name";
        goto LABEL_32;
      case 2u:
        if (v10 != 18) {
          goto LABEL_38;
        }
        unsigned int v15 = (SnippetUI::Color *)*((void *)this + 4);
        if (!v15)
        {
          unsigned int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
          *((void *)this + 4) = v15;
          TagFallbacuint64_t k = v36;
        }
        unsigned int v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Color>(a3, v15, TagFallback);
        goto LABEL_43;
      case 3u:
        if (v10 != 24) {
          goto LABEL_38;
        }
        unsigned int v17 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v18) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_20;
        }
        int v19 = *(char *)v17;
        unint64_t v18 = v18 + (v19 << 7) - 128;
        if (v19 < 0)
        {
          unsigned int v36 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v18);
          if (!v36) {
            goto LABEL_56;
          }
        }
        else
        {
          unsigned int v17 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_20:
          unsigned int v36 = v17;
        }
        *((_DWORD *)this + 12) = v18;
        continue;
      case 4u:
        if (v10 != 32) {
          goto LABEL_38;
        }
        uint64_t v20 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v21) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_26;
        }
        int v22 = *(char *)v20;
        unint64_t v21 = v21 + (v22 << 7) - 128;
        if (v22 < 0)
        {
          unsigned int v36 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v21);
          if (!v36) {
            goto LABEL_56;
          }
        }
        else
        {
          uint64_t v20 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_26:
          unsigned int v36 = v20;
        }
        *((_DWORD *)this + 13) = v21;
        continue;
      case 5u:
        if (v10 != 42) {
          goto LABEL_38;
        }
        unsigned int v11 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned int v12 = (std::string::value_type *)TagFallback;
        unint64_t v13 = a3;
        unint64_t v14 = "SnippetUI.ImageElement.Symbol.dark_mode_name";
LABEL_32:
        unsigned int v16 = google::protobuf::internal::InlineGreedyStringParserUTF8(v11, v12, (uint64_t)v13, (google::protobuf::internal *)v14);
        goto LABEL_43;
      case 6u:
        if (v10 != 50) {
          goto LABEL_38;
        }
        unsigned int v23 = (SnippetUI::ImageElement_Symbol_Background *)*((void *)this + 5);
        if (!v23)
        {
          unsigned int v23 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol_Background>(0);
          *((void *)this + 5) = v23;
          TagFallbacuint64_t k = v36;
        }
        unsigned int v24 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallbacuint64_t k = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback) {
            goto LABEL_56;
          }
          BOOL v25 = SizeFallback;
          unsigned int v24 = v28;
        }
        else
        {
          BOOL v25 = (char *)TagFallback + 1;
        }
        int v29 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v25, v24);
        int v30 = *((_DWORD *)a3 + 22);
        BOOL v31 = __OFSUB__(v30--, 1);
        *((_DWORD *)a3 + 22) = v30;
        if (v30 < 0 != v31) {
          goto LABEL_56;
        }
        int v32 = v29;
        uint64_t v33 = SnippetUI::ImageElement_Symbol_Background::_InternalParse(v23, (google::protobuf::internal *)v25, a3);
        if (!v33) {
          goto LABEL_56;
        }
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          goto LABEL_56;
        }
        int v34 = *((_DWORD *)a3 + 7) + v32;
        *((_DWORD *)a3 + 7) = v34;
        *(void *)a3 = *((void *)a3 + 1) + (v34 & (v34 >> 31));
        unsigned int v36 = v33;
        continue;
      default:
LABEL_38:
        if (v10) {
          BOOL v26 = (v10 & 7) == 4;
        }
        else {
          BOOL v26 = 1;
        }
        if (v26)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        unsigned int v16 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_43:
        unsigned int v36 = (google::protobuf::internal *)v16;
        if (v16) {
          continue;
        }
LABEL_56:
        TagFallbacuint64_t k = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::ImageElement_Symbol::GetCachedSize(SnippetUI::ImageElement_Symbol *this)
{
  return *((unsigned int *)this + 14);
}

char *SnippetUI::ImageElement_Symbol::ByteSizeLong(SnippetUI::ImageElement_Symbol *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_)
  {
    unsigned int v9 = (SnippetUI::Color *)*((void *)this + 4);
    if (v9)
    {
      unsigned int v10 = SnippetUI::Color::ByteSizeLong(v9);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v11 = (SnippetUI::ImageElement_Symbol_Background *)*((void *)this + 5);
    if (v11)
    {
      unsigned int v12 = SnippetUI::ImageElement_Symbol_Background::ByteSizeLong(v11);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  int v13 = *((_DWORD *)this + 12);
  if (v13)
  {
    if (v13 < 0) {
      uint64_t v14 = 11;
    }
    else {
      uint64_t v14 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v14);
  }
  int v15 = *((_DWORD *)this + 13);
  if (v15)
  {
    if (v15 < 0) {
      uint64_t v16 = 11;
    }
    else {
      uint64_t v16 = ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v16);
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Symbol *)((char *)this + 8), v5, (_DWORD *)this + 14);
  }
  else
  {
    *((_DWORD *)this + 14) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::ImageElement_Symbol::IsInitialized(SnippetUI::ImageElement_Symbol *this)
{
  return 1;
}

SnippetUI::ImageElement_Symbol *SnippetUI::ImageElement_Symbol::New(SnippetUI::ImageElement_Symbol *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(a2);
}

SnippetUI::ImageElement_Symbol *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::ImageElement_Symbol *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Symbol>);
  }
  SnippetUI::ImageElement_Symbol::ImageElement_Symbol(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D7B4D8(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C405F83DAE1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Symbol>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::ImageElement_Symbol *SnippetUI::ImageElement_Symbol::New(SnippetUI::ImageElement_Symbol *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(0);
}

void SnippetUI::ImageElement_Symbol::~ImageElement_Symbol(SnippetUI::ImageElement_Symbol *this)
{
  SnippetUI::ImageElement_Symbol::~ImageElement_Symbol(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(void *)this = &unk_1F211B048;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_ImageElement_Url_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Url::ImageElement_Url((SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Url_default_instance_, v4);
  qword_1EB690980 = (uint64_t)&SnippetUI::_ImageElement_Data_default_instance_;
  unk_1EB690988 = &SnippetUI::_ImageElement_Bundle_default_instance_;
  qword_1EB690990 = (uint64_t)&SnippetUI::_ImageElement_Symbol_default_instance_;
  qword_1EB690948 = (uint64_t)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
  unk_1EB690950 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1EB690958 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
  unk_1EB690960 = &SnippetUI::_Color_default_instance_;
}

SnippetUI::ImageElement_Url *SnippetUI::ImageElement_Url::ImageElement_Url(SnippetUI::ImageElement_Url *this)
{
  *(void *)this = &unk_1F211AEC8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  if (atomic_load_explicit(scc_info_ImageElement_Url_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Url_ImageElement_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 21) = 0;
  return this;
}

void sub_1C5D7B7BC(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Url::GetMetadata(SnippetUI::ImageElement_Url *this)
{
  return qword_1EA3D8590;
}

uint64_t SnippetUI::ImageElement_Url::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

void SnippetUI::ImageElement_Url::MergeFrom(SnippetUI::ImageElement_Url *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 3600);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::ImageElement_Url::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D7B8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Url::MergeFrom(SnippetUI::ImageElement_Url *this, const SnippetUI::ImageElement_Url *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 3615);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Url *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  unsigned int v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_)
  {
    unsigned int v10 = (const SnippetUI::ImageElement_AspectRatio *)*((void *)a2 + 4);
    if (v10)
    {
      unsigned int v11 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 4);
      if (!v11)
      {
        unsigned int v11 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
        *((void *)this + 4) = v11;
        unsigned int v10 = (const SnippetUI::ImageElement_AspectRatio *)*((void *)a2 + 4);
      }
      if (v10) {
        unsigned int v12 = v10;
      }
      else {
        unsigned int v12 = (const SnippetUI::ImageElement_AspectRatio *)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
      }
      SnippetUI::ImageElement_AspectRatio::MergeFrom(v11, v12);
    }
    int v13 = (const SnippetUI::OptionalBool *)*((void *)a2 + 5);
    if (v13)
    {
      uint64_t v14 = (SnippetUI::OptionalBool *)*((void *)this + 5);
      if (!v14)
      {
        uint64_t v14 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 5) = v14;
        int v13 = (const SnippetUI::OptionalBool *)*((void *)a2 + 5);
      }
      if (v13) {
        int v15 = v13;
      }
      else {
        int v15 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      }
      SnippetUI::OptionalBool::MergeFrom(v14, v15);
    }
    uint64_t v16 = (const SnippetUI::OptionalBool *)*((void *)a2 + 6);
    if (v16)
    {
      unsigned int v17 = (SnippetUI::OptionalBool *)*((void *)this + 6);
      if (!v17)
      {
        unsigned int v17 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 6) = v17;
        uint64_t v16 = (const SnippetUI::OptionalBool *)*((void *)a2 + 6);
      }
      if (v16) {
        unint64_t v18 = v16;
      }
      else {
        unint64_t v18 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      }
      SnippetUI::OptionalBool::MergeFrom(v17, v18);
    }
    int v19 = (const SnippetUI::Color *)*((void *)a2 + 7);
    if (v19)
    {
      uint64_t v20 = (SnippetUI::Color *)*((void *)this + 7);
      if (!v20)
      {
        uint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
        *((void *)this + 7) = v20;
        int v19 = (const SnippetUI::Color *)*((void *)a2 + 7);
      }
      if (v19) {
        unint64_t v21 = v19;
      }
      else {
        unint64_t v21 = (const SnippetUI::Color *)&SnippetUI::_Color_default_instance_;
      }
      SnippetUI::Color::MergeFrom(v20, v21);
    }
  }
  int v22 = *((_DWORD *)a2 + 16);
  if (v22) {
    *((_DWORD *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = v22;
  }
  int v23 = *((_DWORD *)a2 + 17);
  if (v23) {
    *((_DWORD *)this + 17) = v23;
  }
  int v24 = *((_DWORD *)a2 + 21);
  if (v24 == 4)
  {
    if (*((_DWORD *)this + 21) == 4)
    {
      BOOL v26 = (SnippetUI::ImageElement_Symbol *)*((void *)this + 9);
    }
    else
    {
      SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
      *((_DWORD *)this + 21) = 4;
      BOOL v26 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(0);
      *((void *)this + 9) = v26;
      if (*((_DWORD *)a2 + 21) != 4)
      {
        int v29 = (const SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_;
        goto LABEL_72;
      }
    }
    int v29 = (const SnippetUI::ImageElement_Symbol *)*((void *)a2 + 9);
LABEL_72:
    SnippetUI::ImageElement_Symbol::MergeFrom(v26, v29);
    return;
  }
  if (v24 != 3)
  {
    if (v24 != 2) {
      return;
    }
    if (*((_DWORD *)this + 21) == 2)
    {
      BOOL v25 = (SnippetUI::ImageElement_Data *)*((void *)this + 9);
    }
    else
    {
      SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
      *((_DWORD *)this + 21) = 2;
      BOOL v25 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(0);
      *((void *)this + 9) = v25;
      if (*((_DWORD *)a2 + 21) != 2)
      {
        unsigned int v28 = (const SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_;
        goto LABEL_70;
      }
    }
    unsigned int v28 = (const SnippetUI::ImageElement_Data *)*((void *)a2 + 9);
LABEL_70:
    SnippetUI::ImageElement_Data::MergeFrom(v25, v28);
    return;
  }
  if (*((_DWORD *)this + 21) == 3)
  {
    unint64_t v27 = (SnippetUI::ImageElement_Bundle *)*((void *)this + 9);
  }
  else
  {
    SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
    *((_DWORD *)this + 21) = 3;
    unint64_t v27 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(0);
    *((void *)this + 9) = v27;
    if (*((_DWORD *)a2 + 21) != 3)
    {
      int v30 = (const SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_;
      goto LABEL_74;
    }
  }
  int v30 = (const SnippetUI::ImageElement_Bundle *)*((void *)a2 + 9);
LABEL_74:
  SnippetUI::ImageElement_Bundle::MergeFrom(v27, v30);
}

void sub_1C5D7BC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Url::clear_loading_image(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 84);
  if (v2 == 4 || v2 == 3 || v2 == 2)
  {
    this = *(void *)(this + 72);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 84) = 0;
  return this;
}

SnippetUI::ImageElement_Data *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::ImageElement_Data *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Data>);
  }
  SnippetUI::ImageElement_Data::ImageElement_Data(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D7BD24(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40AE67B8E4);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Data::MergeFrom(SnippetUI::ImageElement_Data *this, const SnippetUI::ImageElement_Data *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 2481);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Data *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  unsigned int v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_)
  {
    unsigned int v10 = (const SnippetUI::ImageElement_AspectRatio *)*((void *)a2 + 4);
    if (v10)
    {
      unsigned int v11 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 4);
      if (!v11)
      {
        unsigned int v11 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
        *((void *)this + 4) = v11;
        unsigned int v10 = (const SnippetUI::ImageElement_AspectRatio *)*((void *)a2 + 4);
      }
      if (v10) {
        unsigned int v12 = v10;
      }
      else {
        unsigned int v12 = (const SnippetUI::ImageElement_AspectRatio *)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
      }
      SnippetUI::ImageElement_AspectRatio::MergeFrom(v11, v12);
    }
    int v13 = (const SnippetUI::OptionalBool *)*((void *)a2 + 5);
    if (v13)
    {
      uint64_t v14 = (SnippetUI::OptionalBool *)*((void *)this + 5);
      if (!v14)
      {
        uint64_t v14 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 5) = v14;
        int v13 = (const SnippetUI::OptionalBool *)*((void *)a2 + 5);
      }
      if (v13) {
        int v15 = v13;
      }
      else {
        int v15 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      }
      SnippetUI::OptionalBool::MergeFrom(v14, v15);
    }
    uint64_t v16 = (const SnippetUI::OptionalBool *)*((void *)a2 + 6);
    if (v16)
    {
      unsigned int v17 = (SnippetUI::OptionalBool *)*((void *)this + 6);
      if (!v17)
      {
        unsigned int v17 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 6) = v17;
        uint64_t v16 = (const SnippetUI::OptionalBool *)*((void *)a2 + 6);
      }
      if (v16) {
        unint64_t v18 = v16;
      }
      else {
        unint64_t v18 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      }
      SnippetUI::OptionalBool::MergeFrom(v17, v18);
    }
  }
  int v19 = *((_DWORD *)a2 + 14);
  if (v19) {
    *((_DWORD *)this + 14) = v19;
  }
}

void sub_1C5D7BF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::ImageElement_Bundle *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::ImageElement_Bundle *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Bundle>);
  }
  SnippetUI::ImageElement_Bundle::ImageElement_Bundle(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D7BFC0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C40D311D1CDLL);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Bundle::MergeFrom(SnippetUI::ImageElement_Bundle *this, const SnippetUI::ImageElement_Bundle *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v25, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 2948);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v24, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v25[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Bundle *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  unsigned int v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  uint64_t v10 = *((void *)a2 + 4);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(void *)(v10 + 8)) {
      goto LABEL_29;
    }
  }
  else if (!*(unsigned char *)(v10 + 23))
  {
    goto LABEL_29;
  }
  unsigned int v11 = (uint64_t *)*((void *)this + 4);
  if (v11 != (uint64_t *)v10)
  {
    if (v11 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 32, v10);
    }
    std::string::operator=(*((std::string **)this + 4), (const std::string *)v10);
  }
LABEL_29:
  uint64_t v12 = *((void *)a2 + 5);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(void *)(v12 + 8)) {
      goto LABEL_37;
    }
  }
  else if (!*(unsigned char *)(v12 + 23))
  {
    goto LABEL_37;
  }
  int v13 = (uint64_t *)*((void *)this + 5);
  if (v13 != (uint64_t *)v12)
  {
    if (v13 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, v12);
    }
    std::string::operator=(*((std::string **)this + 5), (const std::string *)v12);
  }
LABEL_37:
  if (a2 != (const SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_)
  {
    uint64_t v14 = (const SnippetUI::ImageElement_AspectRatio *)*((void *)a2 + 6);
    if (v14)
    {
      int v15 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 6);
      if (!v15)
      {
        int v15 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
        *((void *)this + 6) = v15;
        uint64_t v14 = (const SnippetUI::ImageElement_AspectRatio *)*((void *)a2 + 6);
      }
      if (v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = (const SnippetUI::ImageElement_AspectRatio *)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
      }
      SnippetUI::ImageElement_AspectRatio::MergeFrom(v15, v16);
    }
    unsigned int v17 = (const SnippetUI::OptionalBool *)*((void *)a2 + 7);
    if (v17)
    {
      unint64_t v18 = (SnippetUI::OptionalBool *)*((void *)this + 7);
      if (!v18)
      {
        unint64_t v18 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 7) = v18;
        unsigned int v17 = (const SnippetUI::OptionalBool *)*((void *)a2 + 7);
      }
      if (v17) {
        int v19 = v17;
      }
      else {
        int v19 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      }
      SnippetUI::OptionalBool::MergeFrom(v18, v19);
    }
    char v20 = (const SnippetUI::OptionalBool *)*((void *)a2 + 8);
    if (v20)
    {
      unint64_t v21 = (SnippetUI::OptionalBool *)*((void *)this + 8);
      if (!v21)
      {
        unint64_t v21 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 8) = v21;
        char v20 = (const SnippetUI::OptionalBool *)*((void *)a2 + 8);
      }
      if (v20) {
        int v22 = v20;
      }
      else {
        int v22 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      }
      SnippetUI::OptionalBool::MergeFrom(v21, v22);
    }
  }
  int v23 = *((_DWORD *)a2 + 18);
  if (v23) {
    *((_DWORD *)this + 18) = v23;
  }
}

void sub_1C5D7C254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::ImageElement_Bundle *SnippetUI::ImageElement_Bundle::ImageElement_Bundle(SnippetUI::ImageElement_Bundle *this)
{
  *(void *)this = &unk_1F211AE08;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 19) = 0;
  if (atomic_load_explicit(scc_info_ImageElement_Bundle_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Bundle_ImageElement_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 18) = 0;
  return this;
}

void sub_1C5D7C2F4(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Bundle>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t SnippetUI::ImageElement_Bundle::GetMetadata(SnippetUI::ImageElement_Bundle *this)
{
  return qword_1EA3D8580;
}

uint64_t SnippetUI::ImageElement_Bundle::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 76) = a2;
  return this;
}

void SnippetUI::ImageElement_Bundle::MergeFrom(SnippetUI::ImageElement_Bundle *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 2933);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::ImageElement_Bundle::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D7C434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Bundle::CopyFrom(SnippetUI::ImageElement_Bundle *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Bundle::Clear(this);
    SnippetUI::ImageElement_Bundle::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Bundle::Clear(SnippetUI::ImageElement_Bundle *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
  uint64_t v5 = *((void *)this + 5);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 6) = 0;
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 7) = 0;
  uint64_t v8 = *((void *)this + 8);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  char v10 = *((unsigned char *)this + 8);
  unsigned int v9 = (char *)this + 8;
  *((void *)v9 + 7) = 0;
  *((_DWORD *)v9 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = 0;
  if (v10)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v9);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Bundle::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Bundle *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v7 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    uint64_t v8 = (const char *)*((void *)v7 + 1);
    if (!v8) {
      goto LABEL_7;
    }
    uint64_t v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  uint64_t v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((unsigned char *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Bundle.name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 2), (char *)a2);
  }
LABEL_7:
  unsigned int v9 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v9 + 23) < 0)
  {
    char v10 = (const char *)*((void *)v9 + 1);
    if (!v10) {
      goto LABEL_13;
    }
    unsigned int v9 = *(google::protobuf::internal **)v9;
    goto LABEL_12;
  }
  char v10 = (const char *)*((unsigned __int8 *)v9 + 23);
  if (*((unsigned char *)v9 + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v9, v10, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Bundle.bundle_id");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 3), (char *)a2);
  }
LABEL_13:
  unsigned int v11 = *((_DWORD *)this + 18);
  if (v11)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      unsigned int v11 = *((_DWORD *)this + 18);
    }
    *(unsigned char *)a2 = 24;
    if (v11 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v11 | 0x80;
      unint64_t v12 = (unint64_t)(int)v11 >> 7;
      if (v11 >> 14)
      {
        int v13 = (char *)a2 + 2;
        do
        {
          uint64_t v14 = v13;
          *v13++ = v12 | 0x80;
          unint64_t v15 = v12 >> 7;
          unint64_t v16 = v12 >> 14;
          v12 >>= 7;
        }
        while (v16);
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
        *int v13 = v15;
      }
      else
      {
        *((unsigned char *)a2 + 2) = v12;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((unsigned char *)a2 + 1) = v11;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  if (this != (SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_)
  {
    unsigned int v17 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 6);
    if (v17)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        unsigned int v17 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 6);
      }
      *(unsigned char *)a2 = 34;
      unsigned int v18 = *((_DWORD *)v17 + 6);
      if (v18 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v18 | 0x80;
        unsigned int v20 = v18 >> 7;
        if (v18 >> 14)
        {
          unint64_t v21 = (char *)a2 + 2;
          do
          {
            int v22 = v21;
            *v21++ = v20 | 0x80;
            unsigned int v23 = v20 >> 7;
            unsigned int v24 = v20 >> 14;
            v20 >>= 7;
          }
          while (v24);
          int v19 = v22 + 2;
          *unint64_t v21 = v23;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v20;
          int v19 = (char *)a2 + 3;
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v18;
        int v19 = (char *)a2 + 2;
      }
      a2 = SnippetUI::ImageElement_AspectRatio::InternalSerializeWithCachedSizesToArray(v17, v19, a3, a4);
    }
  }
  BOOL v25 = (google::protobuf::internal *)*((void *)this + 4);
  if (*((char *)v25 + 23) < 0)
  {
    BOOL v26 = (const char *)*((void *)v25 + 1);
    if (!v26) {
      goto LABEL_41;
    }
    BOOL v25 = *(google::protobuf::internal **)v25;
    goto LABEL_40;
  }
  BOOL v26 = (const char *)*((unsigned __int8 *)v25 + 23);
  if (*((unsigned char *)v25 + 23))
  {
LABEL_40:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v25, v26, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Bundle.bundle_path");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((const void ***)this + 4), (char *)a2);
  }
LABEL_41:
  if (this == (SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_) {
    goto LABEL_65;
  }
  unint64_t v27 = (SnippetUI::OptionalBool *)*((void *)this + 7);
  if (v27)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      unint64_t v27 = (SnippetUI::OptionalBool *)*((void *)this + 7);
    }
    *(unsigned char *)a2 = 50;
    unsigned int v28 = *((_DWORD *)v27 + 5);
    if (v28 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v28 | 0x80;
      unsigned int v30 = v28 >> 7;
      if (v28 >> 14)
      {
        int v32 = (char *)a2 + 2;
        do
        {
          uint64_t v33 = v32;
          *v32++ = v30 | 0x80;
          unsigned int v34 = v30 >> 7;
          unsigned int v35 = v30 >> 14;
          v30 >>= 7;
        }
        while (v35);
        char v31 = v33 + 2;
        *int v32 = v34;
        goto LABEL_53;
      }
      *((unsigned char *)a2 + 2) = v30;
      uint64_t v29 = 3;
    }
    else
    {
      *((unsigned char *)a2 + 1) = v28;
      uint64_t v29 = 2;
    }
    char v31 = (char *)a2 + v29;
LABEL_53:
    a2 = SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v27, v31, a3, a4);
  }
  unsigned int v36 = (SnippetUI::OptionalBool *)*((void *)this + 8);
  if (v36)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      unsigned int v36 = (SnippetUI::OptionalBool *)*((void *)this + 8);
    }
    *(unsigned char *)a2 = 58;
    unsigned int v37 = *((_DWORD *)v36 + 5);
    if (v37 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v37 | 0x80;
      unsigned int v39 = v37 >> 7;
      if (v37 >> 14)
      {
        unsigned int v40 = (char *)a2 + 2;
        do
        {
          uint64_t v41 = v40;
          *v40++ = v39 | 0x80;
          unsigned int v42 = v39 >> 7;
          unsigned int v43 = v39 >> 14;
          v39 >>= 7;
        }
        while (v43);
        unsigned int v38 = v41 + 2;
        unsigned char *v40 = v42;
      }
      else
      {
        *((unsigned char *)a2 + 2) = v39;
        unsigned int v38 = (char *)a2 + 3;
      }
    }
    else
    {
      *((unsigned char *)a2 + 1) = v37;
      unsigned int v38 = (char *)a2 + 2;
    }
    a2 = SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v36, v38, a3, a4);
  }
LABEL_65:
  uint64_t v44 = (google::protobuf::internal *)*((void *)this + 5);
  if (*((char *)v44 + 23) < 0)
  {
    int v45 = (const char *)*((void *)v44 + 1);
    if (!v45) {
      goto LABEL_71;
    }
    uint64_t v44 = *(google::protobuf::internal **)v44;
    goto LABEL_70;
  }
  int v45 = (const char *)*((unsigned __int8 *)v44 + 23);
  if (*((unsigned char *)v44 + 23))
  {
LABEL_70:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v44, v45, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Bundle.dark_mode_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((const void ***)this + 5), (char *)a2);
  }
LABEL_71:
  uint64_t v46 = *((void *)this + 1);
  if ((v46 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v46 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

google::protobuf::internal *SnippetUI::ImageElement_Bundle::_InternalParse(SnippetUI::ImageElement_Bundle *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  BOOL v25 = a2;
  uint64_t v5 = (std::string **)((char *)this + 40);
  uint64_t v6 = (std::string **)((char *)this + 32);
  uint64_t v7 = (std::string **)((char *)this + 24);
  uint64_t v8 = (std::string **)((char *)this + 16);
  unsigned int v9 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v25, *((_DWORD *)a3 + 23))) {
      return v25;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v25 + 1);
    unint64_t v12 = (char *)*(unsigned __int8 *)v25;
    if ((*(char *)v25 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unint64_t v12 = (char *)(v12 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v25 + 2);
LABEL_6:
      BOOL v25 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v25, v12);
    BOOL v25 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10) {
          goto LABEL_47;
        }
        int v13 = *v8;
        if (*v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v14 = (std::string::value_type *)TagFallback;
        unint64_t v15 = a3;
        unint64_t v16 = "SnippetUI.ImageElement.Bundle.name";
        goto LABEL_44;
      case 2u:
        if (v12 != 18) {
          goto LABEL_47;
        }
        int v13 = *v7;
        if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v14 = (std::string::value_type *)TagFallback;
        unint64_t v15 = a3;
        unint64_t v16 = "SnippetUI.ImageElement.Bundle.bundle_id";
        goto LABEL_44;
      case 3u:
        if (v12 != 24) {
          goto LABEL_47;
        }
        unsigned int v17 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v18) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_22;
        }
        int v19 = *(char *)v17;
        unint64_t v18 = v18 + (v19 << 7) - 128;
        if (v19 < 0)
        {
          BOOL v25 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v18);
          if (!v25) {
            goto LABEL_53;
          }
        }
        else
        {
          unsigned int v17 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_22:
          BOOL v25 = v17;
        }
        *((_DWORD *)this + 18) = v18;
        continue;
      case 4u:
        if (v12 != 34) {
          goto LABEL_47;
        }
        unsigned int v20 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 6);
        if (!v20)
        {
          unsigned int v20 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
          *((void *)this + 6) = v20;
          TagFallbacuint64_t k = v25;
        }
        unint64_t v21 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_AspectRatio>(a3, v20, TagFallback);
        goto LABEL_45;
      case 5u:
        if (v12 != 42) {
          goto LABEL_47;
        }
        int v13 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v14 = (std::string::value_type *)TagFallback;
        unint64_t v15 = a3;
        unint64_t v16 = "SnippetUI.ImageElement.Bundle.bundle_path";
        goto LABEL_44;
      case 6u:
        if (v12 != 50) {
          goto LABEL_47;
        }
        int v22 = (SnippetUI::OptionalBool *)*((void *)this + 7);
        if (v22) {
          goto LABEL_39;
        }
        int v22 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 7) = v22;
        goto LABEL_38;
      case 7u:
        if (v12 != 58) {
          goto LABEL_47;
        }
        int v22 = (SnippetUI::OptionalBool *)*((void *)this + 8);
        if (v22) {
          goto LABEL_39;
        }
        int v22 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 8) = v22;
LABEL_38:
        TagFallbacuint64_t k = v25;
LABEL_39:
        unint64_t v21 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(a3, v22, TagFallback);
        goto LABEL_45;
      case 8u:
        if (v12 != 66) {
          goto LABEL_47;
        }
        int v13 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v14 = (std::string::value_type *)TagFallback;
        unint64_t v15 = a3;
        unint64_t v16 = "SnippetUI.ImageElement.Bundle.dark_mode_name";
LABEL_44:
        unint64_t v21 = google::protobuf::internal::InlineGreedyStringParserUTF8(v13, v14, (uint64_t)v15, (google::protobuf::internal *)v16);
        goto LABEL_45;
      default:
LABEL_47:
        if (v12) {
          BOOL v23 = (v12 & 7) == 4;
        }
        else {
          BOOL v23 = 1;
        }
        if (v23)
        {
          *((_DWORD *)a3 + 20) = v12 - 1;
          return TagFallback;
        }
        unint64_t v21 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, v9, TagFallback, a3, v10);
LABEL_45:
        BOOL v25 = (google::protobuf::internal *)v21;
        if (v21) {
          continue;
        }
LABEL_53:
        TagFallbacuint64_t k = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::ImageElement_Bundle::GetCachedSize(SnippetUI::ImageElement_Bundle *this)
{
  return *((unsigned int *)this + 19);
}

char *SnippetUI::ImageElement_Bundle::ByteSizeLong(SnippetUI::ImageElement_Bundle *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  uint64_t v9 = *((void *)this + 4);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(void *)(v9 + 8)) {
      goto LABEL_18;
    }
  }
  else if (!*(unsigned char *)(v9 + 23))
  {
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)(v9 + 8);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v10;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_18:
  uint64_t v12 = *((void *)this + 5);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(void *)(v12 + 8)) {
      goto LABEL_23;
    }
  }
  else if (!*(unsigned char *)(v12 + 23))
  {
    goto LABEL_23;
  }
  uint64_t v14 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = v13;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_23:
  if (this != (SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_)
  {
    unint64_t v15 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 6);
    if (v15)
    {
      unint64_t v16 = SnippetUI::ImageElement_AspectRatio::ByteSizeLong(v15);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v16[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unsigned int v17 = (SnippetUI::OptionalBool *)*((void *)this + 7);
    if (v17)
    {
      unint64_t v18 = SnippetUI::OptionalBool::ByteSizeLong(v17);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v18[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    int v19 = (SnippetUI::OptionalBool *)*((void *)this + 8);
    if (v19)
    {
      unsigned int v20 = SnippetUI::OptionalBool::ByteSizeLong(v19);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v20[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  int v21 = *((_DWORD *)this + 18);
  if (v21)
  {
    if (v21 < 0) {
      uint64_t v22 = 11;
    }
    else {
      uint64_t v22 = ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v22);
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Bundle *)((char *)this + 8), v5, (_DWORD *)this + 19);
  }
  else
  {
    *((_DWORD *)this + 19) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::ImageElement_Bundle::IsInitialized(SnippetUI::ImageElement_Bundle *this)
{
  return 1;
}

SnippetUI::ImageElement_Bundle *SnippetUI::ImageElement_Bundle::New(SnippetUI::ImageElement_Bundle *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(a2);
}

SnippetUI::ImageElement_Bundle *SnippetUI::ImageElement_Bundle::New(SnippetUI::ImageElement_Bundle *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(0);
}

void SnippetUI::ImageElement_Bundle::~ImageElement_Bundle(SnippetUI::ImageElement_Bundle *this)
{
  SnippetUI::ImageElement_Bundle::~ImageElement_Bundle(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(void *)this = &unk_1F211AE08;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  uint64_t v6 = *((void *)this + 4);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    MEMORY[0x1C8796D70](v6, 0x1012C40EC159624);
  }
  uint64_t v8 = *((void *)this + 5);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    MEMORY[0x1C8796D70](v8, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_)
  {
    uint64_t v10 = *((void *)this + 6);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = *((void *)this + 7);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v12 = *((void *)this + 8);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::ImageElement_Data *SnippetUI::ImageElement_Data::ImageElement_Data(SnippetUI::ImageElement_Data *this)
{
  *(void *)this = &unk_1F211AD48;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 15) = 0;
  if (atomic_load_explicit(scc_info_ImageElement_Data_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Data_ImageElement_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 14) = 0;
  return this;
}

void sub_1C5D7D2D8(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Data>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t SnippetUI::ImageElement_Data::GetMetadata(SnippetUI::ImageElement_Data *this)
{
  return qword_1EA3D8570;
}

uint64_t SnippetUI::ImageElement_Data::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

void SnippetUI::ImageElement_Data::MergeFrom(SnippetUI::ImageElement_Data *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 2466);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::ImageElement_Data::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D7D418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Data::CopyFrom(SnippetUI::ImageElement_Data *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Data::Clear(this);
    SnippetUI::ImageElement_Data::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Data::Clear(SnippetUI::ImageElement_Data *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  char v8 = *((unsigned char *)this + 8);
  char v7 = (char *)this + 8;
  *((void *)v7 + 5) = 0;
  *((_DWORD *)v7 + 12) = 0;
  if (v8)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v7);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Data::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Data *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *((void *)this + 2);
  if ((*(char *)(v6 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v6 + 23)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*(void *)(v6 + 8)) {
LABEL_3:
  }
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, (const void **)v6, a2);
LABEL_4:
  unsigned int v7 = *((_DWORD *)this + 14);
  if (v7)
  {
    if ((unint64_t)v4 >= *(void *)a3)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unsigned int v7 = *((_DWORD *)this + 14);
    }
    *uint64_t v4 = 16;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = (unint64_t)(int)v7 >> 7;
      if (v7 >> 14)
      {
        uint64_t v9 = v4 + 2;
        do
        {
          uint64_t v10 = v9;
          *v9++ = v8 | 0x80;
          unint64_t v11 = v8 >> 7;
          unint64_t v12 = v8 >> 14;
          v8 >>= 7;
        }
        while (v12);
        uint64_t v4 = v10 + 2;
        *uint64_t v9 = v11;
      }
      else
      {
        v4[2] = v8;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v7;
      v4 += 2;
    }
  }
  if (this != (SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_)
  {
    uint64_t v13 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 4);
    if (!v13) {
      goto LABEL_29;
    }
    if ((unint64_t)v4 >= *(void *)a3)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      uint64_t v13 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 4);
    }
    *uint64_t v4 = 26;
    unsigned int v14 = *((_DWORD *)v13 + 6);
    if (v14 > 0x7F)
    {
      v4[1] = v14 | 0x80;
      unsigned int v16 = v14 >> 7;
      if (v14 >> 14)
      {
        unint64_t v18 = v4 + 2;
        do
        {
          int v19 = v18;
          *v18++ = v16 | 0x80;
          unsigned int v20 = v16 >> 7;
          unsigned int v21 = v16 >> 14;
          v16 >>= 7;
        }
        while (v21);
        unsigned int v17 = v19 + 2;
        *unint64_t v18 = v20;
        goto LABEL_28;
      }
      v4[2] = v16;
      uint64_t v15 = 3;
    }
    else
    {
      v4[1] = v14;
      uint64_t v15 = 2;
    }
    unsigned int v17 = &v4[v15];
LABEL_28:
    uint64_t v4 = (char *)SnippetUI::ImageElement_AspectRatio::InternalSerializeWithCachedSizesToArray(v13, v17, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
LABEL_29:
    uint64_t v22 = (SnippetUI::OptionalBool *)*((void *)this + 5);
    if (!v22) {
      goto LABEL_41;
    }
    if ((unint64_t)v4 >= *(void *)a3)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      uint64_t v22 = (SnippetUI::OptionalBool *)*((void *)this + 5);
    }
    *uint64_t v4 = 34;
    unsigned int v23 = *((_DWORD *)v22 + 5);
    if (v23 > 0x7F)
    {
      v4[1] = v23 | 0x80;
      unsigned int v25 = v23 >> 7;
      if (v23 >> 14)
      {
        unint64_t v27 = v4 + 2;
        do
        {
          unsigned int v28 = v27;
          *v27++ = v25 | 0x80;
          unsigned int v29 = v25 >> 7;
          unsigned int v30 = v25 >> 14;
          v25 >>= 7;
        }
        while (v30);
        BOOL v26 = v28 + 2;
        *unint64_t v27 = v29;
        goto LABEL_40;
      }
      v4[2] = v25;
      uint64_t v24 = 3;
    }
    else
    {
      v4[1] = v23;
      uint64_t v24 = 2;
    }
    BOOL v26 = &v4[v24];
LABEL_40:
    uint64_t v4 = (char *)SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v22, v26, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
LABEL_41:
    char v31 = (SnippetUI::OptionalBool *)*((void *)this + 6);
    if (v31)
    {
      if ((unint64_t)v4 >= *(void *)a3)
      {
        uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
        char v31 = (SnippetUI::OptionalBool *)*((void *)this + 6);
      }
      *uint64_t v4 = 42;
      unsigned int v32 = *((_DWORD *)v31 + 5);
      if (v32 > 0x7F)
      {
        v4[1] = v32 | 0x80;
        unsigned int v34 = v32 >> 7;
        if (v32 >> 14)
        {
          unsigned int v35 = v4 + 2;
          do
          {
            unsigned int v36 = v35;
            *v35++ = v34 | 0x80;
            unsigned int v37 = v34 >> 7;
            unsigned int v38 = v34 >> 14;
            v34 >>= 7;
          }
          while (v38);
          uint64_t v33 = v36 + 2;
          *unsigned int v35 = v37;
        }
        else
        {
          v4[2] = v34;
          uint64_t v33 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v32;
        uint64_t v33 = v4 + 2;
      }
      uint64_t v4 = (char *)SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v31, v33, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
    }
  }
  uint64_t v39 = *((void *)this + 3);
  if ((*(char *)(v39 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v39 + 23)) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (*(void *)(v39 + 8)) {
LABEL_54:
  }
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, (const void **)v39, v4);
LABEL_55:
  uint64_t v40 = *((void *)this + 1);
  if ((v40 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v4;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v40 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v4, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
}

google::protobuf::internal *SnippetUI::ImageElement_Data::_InternalParse(SnippetUI::ImageElement_Data *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v20 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  unsigned int v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v20, *((_DWORD *)a3 + 23))) {
      return v20;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v20 + 1);
    uint64_t v10 = (char *)*(unsigned __int8 *)v20;
    if ((*(char *)v20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v20 + 2);
LABEL_6:
      unsigned int v20 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v20, v10);
    unsigned int v20 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_33;
        }
        unint64_t v11 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_32;
      case 2u:
        if (v10 != 16) {
          goto LABEL_33;
        }
        unint64_t v12 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v13) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_15;
        }
        int v14 = *(char *)v12;
        unint64_t v13 = v13 + (v14 << 7) - 128;
        if (v14 < 0)
        {
          unsigned int v20 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v13);
          if (!v20) {
            goto LABEL_43;
          }
        }
        else
        {
          unint64_t v12 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_15:
          unsigned int v20 = v12;
        }
        *((_DWORD *)this + 14) = v13;
        continue;
      case 3u:
        if (v10 != 26) {
          goto LABEL_33;
        }
        uint64_t v15 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 4);
        if (!v15)
        {
          uint64_t v15 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
          *((void *)this + 4) = v15;
          TagFallbacuint64_t k = v20;
        }
        unsigned int v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_AspectRatio>(a3, v15, TagFallback);
        goto LABEL_38;
      case 4u:
        if (v10 != 34) {
          goto LABEL_33;
        }
        unsigned int v17 = (SnippetUI::OptionalBool *)*((void *)this + 5);
        if (v17) {
          goto LABEL_28;
        }
        unsigned int v17 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 5) = v17;
        goto LABEL_27;
      case 5u:
        if (v10 != 42) {
          goto LABEL_33;
        }
        unsigned int v17 = (SnippetUI::OptionalBool *)*((void *)this + 6);
        if (v17) {
          goto LABEL_28;
        }
        unsigned int v17 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 6) = v17;
LABEL_27:
        TagFallbacuint64_t k = v20;
LABEL_28:
        unsigned int v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(a3, v17, TagFallback);
        goto LABEL_38;
      case 6u:
        if (v10 != 50) {
          goto LABEL_33;
        }
        unint64_t v11 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
LABEL_32:
        unsigned int v16 = google::protobuf::internal::InlineGreedyStringParser(v11, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_38;
      default:
LABEL_33:
        if (v10) {
          BOOL v18 = (v10 & 7) == 4;
        }
        else {
          BOOL v18 = 1;
        }
        if (v18)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        unsigned int v16 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_38:
        unsigned int v20 = (google::protobuf::internal *)v16;
        if (v16) {
          continue;
        }
LABEL_43:
        TagFallbacuint64_t k = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::ImageElement_Data::GetCachedSize(SnippetUI::ImageElement_Data *this)
{
  return *((unsigned int *)this + 15);
}

char *SnippetUI::ImageElement_Data::ByteSizeLong(SnippetUI::ImageElement_Data *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_)
  {
    uint64_t v9 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 4);
    if (v9)
    {
      uint64_t v10 = SnippetUI::ImageElement_AspectRatio::ByteSizeLong(v9);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unint64_t v11 = (SnippetUI::OptionalBool *)*((void *)this + 5);
    if (v11)
    {
      unint64_t v12 = SnippetUI::OptionalBool::ByteSizeLong(v11);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    unint64_t v13 = (SnippetUI::OptionalBool *)*((void *)this + 6);
    if (v13)
    {
      int v14 = SnippetUI::OptionalBool::ByteSizeLong(v13);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v14[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  int v15 = *((_DWORD *)this + 14);
  if (v15)
  {
    if (v15 < 0) {
      uint64_t v16 = 11;
    }
    else {
      uint64_t v16 = ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v16);
  }
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Data *)((char *)this + 8), v5, (_DWORD *)this + 15);
  }
  else
  {
    *((_DWORD *)this + 15) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::ImageElement_Data::IsInitialized(SnippetUI::ImageElement_Data *this)
{
  return 1;
}

SnippetUI::ImageElement_Data *SnippetUI::ImageElement_Data::New(SnippetUI::ImageElement_Data *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(a2);
}

SnippetUI::ImageElement_Data *SnippetUI::ImageElement_Data::New(SnippetUI::ImageElement_Data *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(0);
}

void SnippetUI::ImageElement_Data::~ImageElement_Data(SnippetUI::ImageElement_Data *this)
{
  SnippetUI::ImageElement_Data::~ImageElement_Data(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(void *)this = &unk_1F211AD48;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 6);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void SnippetUI::ImageElement_Url::CopyFrom(SnippetUI::ImageElement_Url *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Url::Clear(this);
    SnippetUI::ImageElement_Url::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Url::Clear(SnippetUI::ImageElement_Url *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 6) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
  char v9 = *((unsigned char *)this + 8);
  uint64_t v8 = (SnippetUI::ImageElement_Url *)((char *)this + 8);
  if (v9)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v8);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Url::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Url *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v7 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    uint64_t v8 = (const char *)*((void *)v7 + 1);
    if (!v8) {
      goto LABEL_7;
    }
    uint64_t v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  uint64_t v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((unsigned char *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Url.source");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 2), (char *)a2);
  }
LABEL_7:
  int v9 = *((_DWORD *)this + 21);
  if (v9 == 2)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    uint64_t v10 = (SnippetUI::ImageElement_Data *)*((void *)this + 9);
    *(unsigned char *)a2 = 18;
    unsigned int v11 = *((_DWORD *)v10 + 15);
    if (v11 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v11 | 0x80;
      unsigned int v13 = v11 >> 7;
      if (v11 >> 14)
      {
        int v14 = (char *)a2 + 2;
        do
        {
          int v15 = v14;
          *v14++ = v13 | 0x80;
          unsigned int v16 = v13 >> 7;
          unsigned int v17 = v13 >> 14;
          v13 >>= 7;
        }
        while (v17);
        unint64_t v12 = v15 + 2;
        *int v14 = v16;
      }
      else
      {
        *((unsigned char *)a2 + 2) = v13;
        unint64_t v12 = (char *)a2 + 3;
      }
    }
    else
    {
      *((unsigned char *)a2 + 1) = v11;
      unint64_t v12 = (char *)a2 + 2;
    }
    a2 = SnippetUI::ImageElement_Data::InternalSerializeWithCachedSizesToArray(v10, v12, a3);
    int v9 = *((_DWORD *)this + 21);
  }
  if (v9 == 3)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    BOOL v18 = (SnippetUI::ImageElement_Bundle *)*((void *)this + 9);
    *(unsigned char *)a2 = 26;
    unsigned int v19 = *((_DWORD *)v18 + 19);
    if (v19 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v19 | 0x80;
      unsigned int v21 = v19 >> 7;
      if (v19 >> 14)
      {
        uint64_t v22 = (char *)a2 + 2;
        do
        {
          unsigned int v23 = v22;
          *v22++ = v21 | 0x80;
          unsigned int v24 = v21 >> 7;
          unsigned int v25 = v21 >> 14;
          v21 >>= 7;
        }
        while (v25);
        unsigned int v20 = (google::protobuf::UnknownFieldSet *)(v23 + 2);
        unsigned char *v22 = v24;
      }
      else
      {
        *((unsigned char *)a2 + 2) = v21;
        unsigned int v20 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((unsigned char *)a2 + 1) = v19;
      unsigned int v20 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
    a2 = SnippetUI::ImageElement_Bundle::InternalSerializeWithCachedSizesToArray(v18, v20, a3, a4);
    int v9 = *((_DWORD *)this + 21);
  }
  if (v9 == 4)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    BOOL v26 = (SnippetUI::ImageElement_Symbol *)*((void *)this + 9);
    *(unsigned char *)a2 = 34;
    unsigned int v27 = *((_DWORD *)v26 + 14);
    if (v27 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v27 | 0x80;
      unsigned int v29 = v27 >> 7;
      if (v27 >> 14)
      {
        unsigned int v30 = (char *)a2 + 2;
        do
        {
          char v31 = v30;
          *v30++ = v29 | 0x80;
          unsigned int v32 = v29 >> 7;
          unsigned int v33 = v29 >> 14;
          v29 >>= 7;
        }
        while (v33);
        unsigned int v28 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
        *unsigned int v30 = v32;
      }
      else
      {
        *((unsigned char *)a2 + 2) = v29;
        unsigned int v28 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((unsigned char *)a2 + 1) = v27;
      unsigned int v28 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
    a2 = SnippetUI::ImageElement_Symbol::InternalSerializeWithCachedSizesToArray(v26, v28, a3, a4);
  }
  unsigned int v34 = *((_DWORD *)this + 16);
  if (v34)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      unsigned int v34 = *((_DWORD *)this + 16);
    }
    *(unsigned char *)a2 = 48;
    if (v34 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v34 | 0x80;
      unint64_t v35 = (unint64_t)(int)v34 >> 7;
      if (v34 >> 14)
      {
        unsigned int v36 = (char *)a2 + 2;
        do
        {
          unsigned int v37 = v36;
          *v36++ = v35 | 0x80;
          unint64_t v38 = v35 >> 7;
          unint64_t v39 = v35 >> 14;
          v35 >>= 7;
        }
        while (v39);
        a2 = (google::protobuf::UnknownFieldSet *)(v37 + 2);
        unsigned char *v36 = v38;
      }
      else
      {
        *((unsigned char *)a2 + 2) = v35;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((unsigned char *)a2 + 1) = v34;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  unsigned int v40 = *((_DWORD *)this + 17);
  if (v40)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      unsigned int v40 = *((_DWORD *)this + 17);
    }
    *(unsigned char *)a2 = 56;
    if (v40 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v40 | 0x80;
      unint64_t v41 = (unint64_t)(int)v40 >> 7;
      if (v40 >> 14)
      {
        unsigned int v42 = (char *)a2 + 2;
        do
        {
          unsigned int v43 = v42;
          *v42++ = v41 | 0x80;
          unint64_t v44 = v41 >> 7;
          unint64_t v45 = v41 >> 14;
          v41 >>= 7;
        }
        while (v45);
        a2 = (google::protobuf::UnknownFieldSet *)(v43 + 2);
        unsigned char *v42 = v44;
      }
      else
      {
        *((unsigned char *)a2 + 2) = v41;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((unsigned char *)a2 + 1) = v40;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  if (this != (SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_)
  {
    uint64_t v46 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 4);
    if (!v46) {
      goto LABEL_73;
    }
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v46 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 4);
    }
    *(unsigned char *)a2 = 66;
    unsigned int v47 = *((_DWORD *)v46 + 6);
    if (v47 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v47 | 0x80;
      unsigned int v49 = v47 >> 7;
      if (v47 >> 14)
      {
        uint64_t v51 = (char *)a2 + 2;
        do
        {
          uint64_t v52 = v51;
          *v51++ = v49 | 0x80;
          unsigned int v53 = v49 >> 7;
          unsigned int v54 = v49 >> 14;
          v49 >>= 7;
        }
        while (v54);
        uint64_t v50 = v52 + 2;
        unsigned char *v51 = v53;
        goto LABEL_72;
      }
      *((unsigned char *)a2 + 2) = v49;
      uint64_t v48 = 3;
    }
    else
    {
      *((unsigned char *)a2 + 1) = v47;
      uint64_t v48 = 2;
    }
    uint64_t v50 = (char *)a2 + v48;
LABEL_72:
    a2 = SnippetUI::ImageElement_AspectRatio::InternalSerializeWithCachedSizesToArray(v46, v50, a3, a4);
LABEL_73:
    uint64_t v55 = (SnippetUI::OptionalBool *)*((void *)this + 5);
    if (!v55) {
      goto LABEL_85;
    }
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      uint64_t v55 = (SnippetUI::OptionalBool *)*((void *)this + 5);
    }
    *(unsigned char *)a2 = 74;
    unsigned int v56 = *((_DWORD *)v55 + 5);
    if (v56 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v56 | 0x80;
      unsigned int v58 = v56 >> 7;
      if (v56 >> 14)
      {
        uint64_t v60 = (char *)a2 + 2;
        do
        {
          long long v61 = v60;
          *v60++ = v58 | 0x80;
          unsigned int v62 = v58 >> 7;
          unsigned int v63 = v58 >> 14;
          v58 >>= 7;
        }
        while (v63);
        long long v59 = v61 + 2;
        unsigned char *v60 = v62;
        goto LABEL_84;
      }
      *((unsigned char *)a2 + 2) = v58;
      uint64_t v57 = 3;
    }
    else
    {
      *((unsigned char *)a2 + 1) = v56;
      uint64_t v57 = 2;
    }
    long long v59 = (char *)a2 + v57;
LABEL_84:
    a2 = SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v55, v59, a3, a4);
LABEL_85:
    std::string::size_type v64 = (SnippetUI::OptionalBool *)*((void *)this + 6);
    if (!v64) {
      goto LABEL_97;
    }
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      std::string::size_type v64 = (SnippetUI::OptionalBool *)*((void *)this + 6);
    }
    *(unsigned char *)a2 = 82;
    unsigned int v65 = *((_DWORD *)v64 + 5);
    if (v65 > 0x7F)
    {
      *((unsigned char *)a2 + 1) = v65 | 0x80;
      unsigned int v67 = v65 >> 7;
      if (v65 >> 14)
      {
        std::string::size_type v69 = (char *)a2 + 2;
        do
        {
          id v70 = v69;
          *v69++ = v67 | 0x80;
          unsigned int v71 = v67 >> 7;
          unsigned int v72 = v67 >> 14;
          v67 >>= 7;
        }
        while (v72);
        uint64_t v68 = v70 + 2;
        *std::string::size_type v69 = v71;
        goto LABEL_96;
      }
      *((unsigned char *)a2 + 2) = v67;
      uint64_t v66 = 3;
    }
    else
    {
      *((unsigned char *)a2 + 1) = v65;
      uint64_t v66 = 2;
    }
    uint64_t v68 = (char *)a2 + v66;
LABEL_96:
    a2 = SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v64, v68, a3, a4);
LABEL_97:
    long long v73 = (SnippetUI::Color *)*((void *)this + 7);
    if (v73)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        long long v73 = (SnippetUI::Color *)*((void *)this + 7);
      }
      *(unsigned char *)a2 = 90;
      unsigned int v74 = *((_DWORD *)v73 + 6);
      if (v74 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v74 | 0x80;
        unsigned int v76 = v74 >> 7;
        if (v74 >> 14)
        {
          long long v77 = (char *)a2 + 2;
          do
          {
            long long v78 = v77;
            *v77++ = v76 | 0x80;
            unsigned int v79 = v76 >> 7;
            unsigned int v80 = v76 >> 14;
            v76 >>= 7;
          }
          while (v80);
          long long v75 = v78 + 2;
          unsigned char *v77 = v79;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v76;
          long long v75 = (char *)a2 + 3;
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v74;
        long long v75 = (char *)a2 + 2;
      }
      a2 = SnippetUI::Color::InternalSerializeWithCachedSizesToArray(v73, v75, a3, a4);
    }
  }
  long long v81 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v81 + 23) < 0)
  {
    uint64_t v82 = (const char *)*((void *)v81 + 1);
    if (!v82) {
      goto LABEL_114;
    }
    long long v81 = *(google::protobuf::internal **)v81;
    goto LABEL_113;
  }
  uint64_t v82 = (const char *)*((unsigned __int8 *)v81 + 23);
  if (*((unsigned char *)v81 + 23))
  {
LABEL_113:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v81, v82, 1, (google::protobuf::internal *)"SnippetUI.ImageElement.Url.dark_mode_source");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 12, *((const void ***)this + 3), (char *)a2);
  }
LABEL_114:
  uint64_t v83 = *((void *)this + 1);
  if ((v83 & 1) == 0) {
    return a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v83 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
}

google::protobuf::internal *SnippetUI::ImageElement_Url::_InternalParse(SnippetUI::ImageElement_Url *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v30 = a2;
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  uint64_t v7 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23))) {
      return v30;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v30 + 1);
    uint64_t v10 = (char *)*(unsigned __int8 *)v30;
    if ((*(char *)v30 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v30 + 2);
LABEL_6:
      unsigned int v30 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, v10);
    unsigned int v30 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_56;
        }
        unsigned int v11 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unint64_t v12 = (std::string::value_type *)TagFallback;
        unsigned int v13 = a3;
        int v14 = "SnippetUI.ImageElement.Url.source";
        goto LABEL_55;
      case 2u:
        if (v10 != 18) {
          goto LABEL_56;
        }
        if (*((_DWORD *)this + 21) == 2)
        {
          int v15 = (SnippetUI::ImageElement_Data *)*((void *)this + 9);
        }
        else
        {
          SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
          *((_DWORD *)this + 21) = 2;
          int v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(0);
          *((void *)this + 9) = v15;
          TagFallbacuint64_t k = v30;
        }
        unsigned int v25 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Data>(a3, v15, TagFallback);
        goto LABEL_67;
      case 3u:
        if (v10 != 26) {
          goto LABEL_56;
        }
        if (*((_DWORD *)this + 21) == 3)
        {
          unsigned int v16 = (SnippetUI::ImageElement_Bundle *)*((void *)this + 9);
        }
        else
        {
          SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
          *((_DWORD *)this + 21) = 3;
          unsigned int v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(0);
          *((void *)this + 9) = v16;
          TagFallbacuint64_t k = v30;
        }
        unsigned int v25 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Bundle>(a3, v16, TagFallback);
        goto LABEL_67;
      case 4u:
        if (v10 != 34) {
          goto LABEL_56;
        }
        if (*((_DWORD *)this + 21) == 4)
        {
          unsigned int v17 = (SnippetUI::ImageElement_Symbol *)*((void *)this + 9);
        }
        else
        {
          SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
          *((_DWORD *)this + 21) = 4;
          unsigned int v17 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(0);
          *((void *)this + 9) = v17;
          TagFallbacuint64_t k = v30;
        }
        unsigned int v25 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Symbol>(a3, v17, TagFallback);
        goto LABEL_67;
      case 6u:
        if (v10 != 48) {
          goto LABEL_56;
        }
        BOOL v18 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v19) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_27;
        }
        int v20 = *(char *)v18;
        unint64_t v19 = v19 + (v20 << 7) - 128;
        if (v20 < 0)
        {
          unsigned int v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v19);
          if (!v30) {
            goto LABEL_72;
          }
        }
        else
        {
          BOOL v18 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_27:
          unsigned int v30 = v18;
        }
        *((_DWORD *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = v19;
        continue;
      case 7u:
        if (v10 != 56) {
          goto LABEL_56;
        }
        unsigned int v21 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v22) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_33;
        }
        int v23 = *(char *)v21;
        unint64_t v22 = v22 + (v23 << 7) - 128;
        if (v23 < 0)
        {
          unsigned int v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v22);
          if (!v30) {
            goto LABEL_72;
          }
        }
        else
        {
          unsigned int v21 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_33:
          unsigned int v30 = v21;
        }
        *((_DWORD *)this + 17) = v22;
        continue;
      case 8u:
        if (v10 != 66) {
          goto LABEL_56;
        }
        unsigned int v24 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 4);
        if (!v24)
        {
          unsigned int v24 = (SnippetUI::ImageElement_AspectRatio *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AspectRatio>(0);
          *((void *)this + 4) = v24;
          TagFallbacuint64_t k = v30;
        }
        unsigned int v25 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_AspectRatio>(a3, v24, TagFallback);
        goto LABEL_67;
      case 9u:
        if (v10 != 74) {
          goto LABEL_56;
        }
        BOOL v26 = (SnippetUI::OptionalBool *)*((void *)this + 5);
        if (v26) {
          goto LABEL_46;
        }
        BOOL v26 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 5) = v26;
        goto LABEL_45;
      case 0xAu:
        if (v10 != 82) {
          goto LABEL_56;
        }
        BOOL v26 = (SnippetUI::OptionalBool *)*((void *)this + 6);
        if (v26) {
          goto LABEL_46;
        }
        BOOL v26 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((void *)this + 6) = v26;
LABEL_45:
        TagFallbacuint64_t k = v30;
LABEL_46:
        unsigned int v25 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(a3, v26, TagFallback);
        goto LABEL_67;
      case 0xBu:
        if (v10 != 90) {
          goto LABEL_56;
        }
        unsigned int v27 = (SnippetUI::Color *)*((void *)this + 7);
        if (!v27)
        {
          unsigned int v27 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
          *((void *)this + 7) = v27;
          TagFallbacuint64_t k = v30;
        }
        unsigned int v25 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Color>(a3, v27, TagFallback);
        goto LABEL_67;
      case 0xCu:
        if (v10 != 98) {
          goto LABEL_56;
        }
        unsigned int v11 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unint64_t v12 = (std::string::value_type *)TagFallback;
        unsigned int v13 = a3;
        int v14 = "SnippetUI.ImageElement.Url.dark_mode_source";
LABEL_55:
        unsigned int v25 = google::protobuf::internal::InlineGreedyStringParserUTF8(v11, v12, (uint64_t)v13, (google::protobuf::internal *)v14);
        goto LABEL_67;
      default:
LABEL_56:
        if (v10) {
          BOOL v28 = (v10 & 7) == 4;
        }
        else {
          BOOL v28 = 1;
        }
        if (v28)
        {
          *((_DWORD *)a3 + 20) = v10 - 1;
          return TagFallback;
        }
        unsigned int v25 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_67:
        unsigned int v30 = (google::protobuf::internal *)v25;
        if (v25) {
          continue;
        }
LABEL_72:
        TagFallbacuint64_t k = 0;
        break;
    }
    return TagFallback;
  }
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Data>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::ImageElement_Data *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  uint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    __n128 result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    uint64_t v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  __n128 result = (char *)SnippetUI::ImageElement_Data::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Bundle>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::ImageElement_Bundle *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  uint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    __n128 result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    uint64_t v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  __n128 result = (char *)SnippetUI::ImageElement_Bundle::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Symbol>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::ImageElement_Symbol *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  uint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    __n128 result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    uint64_t v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  __n128 result = (char *)SnippetUI::ImageElement_Symbol::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t SnippetUI::ImageElement_Url::GetCachedSize(SnippetUI::ImageElement_Url *this)
{
  return *((unsigned int *)this + 20);
}

char *SnippetUI::ImageElement_Url::ByteSizeLong(SnippetUI::ImageElement_Url *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_)
  {
    int v9 = (SnippetUI::ImageElement_AspectRatio *)*((void *)this + 4);
    if (v9)
    {
      int v10 = SnippetUI::ImageElement_AspectRatio::ByteSizeLong(v9);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v10[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    int v11 = (SnippetUI::OptionalBool *)*((void *)this + 5);
    if (v11)
    {
      int v12 = SnippetUI::OptionalBool::ByteSizeLong(v11);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v12[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    BOOL v13 = (SnippetUI::OptionalBool *)*((void *)this + 6);
    if (v13)
    {
      int v14 = SnippetUI::OptionalBool::ByteSizeLong(v13);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v14[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    int v15 = (SnippetUI::Color *)*((void *)this + 7);
    if (v15)
    {
      unsigned int v16 = SnippetUI::Color::ByteSizeLong(v15);
      uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v16[(void)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  int v17 = *((_DWORD *)this + 16);
  if (v17)
  {
    if (v17 < 0) {
      uint64_t v18 = 11;
    }
    else {
      uint64_t v18 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v18);
  }
  int v19 = *((_DWORD *)this + 17);
  if (v19)
  {
    if (v19 < 0) {
      uint64_t v20 = 11;
    }
    else {
      uint64_t v20 = ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v20);
  }
  int v21 = *((_DWORD *)this + 21);
  switch(v21)
  {
    case 4:
      unint64_t v22 = SnippetUI::ImageElement_Symbol::ByteSizeLong(*((SnippetUI::ImageElement_Symbol **)this + 9));
      break;
    case 3:
      unint64_t v22 = SnippetUI::ImageElement_Bundle::ByteSizeLong(*((SnippetUI::ImageElement_Bundle **)this + 9));
      break;
    case 2:
      unint64_t v22 = SnippetUI::ImageElement_Data::ByteSizeLong(*((SnippetUI::ImageElement_Data **)this + 9));
      break;
    default:
      goto LABEL_41;
  }
  uint64_t v5 = (const google::protobuf::UnknownFieldSet *)&v22[(void)v5
                                                     + 1
                                                     + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
LABEL_41:
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement_Url *)((char *)this + 8), v5, (_DWORD *)this + 20);
  }
  else
  {
    *((_DWORD *)this + 20) = v5;
    return (char *)v5;
  }
}

uint64_t SnippetUI::ImageElement_Url::IsInitialized(SnippetUI::ImageElement_Url *this)
{
  return 1;
}

SnippetUI::ImageElement_Url *SnippetUI::ImageElement_Url::New(SnippetUI::ImageElement_Url *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Url>(a2);
}

SnippetUI::ImageElement_Url *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Url>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::ImageElement_Url *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Url>);
  }
  SnippetUI::ImageElement_Url::ImageElement_Url(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D7F178(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C409865CCEALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Url>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::ImageElement_Url *SnippetUI::ImageElement_Url::New(SnippetUI::ImageElement_Url *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Url>(0);
}

void SnippetUI::ImageElement_Url::~ImageElement_Url(SnippetUI::ImageElement_Url *this)
{
  SnippetUI::ImageElement_Url::~ImageElement_Url(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(void *)this = &unk_1F211AEC8;
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C8796D70](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x1C8796D70](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 6);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    int v9 = *((void *)this + 7);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  if (*((_DWORD *)this + 21)) {
    SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_ImageElement_Bundle_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Bundle::ImageElement_Bundle((SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Bundle_default_instance_, v4);
  qword_1EB690B88 = (uint64_t)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
  unk_1EB690B90 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1EB690B98 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
}

void InitDefaultsscc_info_ImageElement_Data_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Data::ImageElement_Data((SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Data_default_instance_, v4);
  qword_1EB690B38 = (uint64_t)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
  unk_1EB690B40 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1EB690B48 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
}

void InitDefaultsscc_info_ImageElement_Source_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement_Source::ImageElement_Source((SnippetUI::ImageElement_Source *)&SnippetUI::_ImageElement_Source_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_Source_default_instance_, v4);
  qword_1EB690BC8 = (uint64_t)&SnippetUI::_ImageElement_Data_default_instance_;
  unk_1EB690BD0 = &SnippetUI::_ImageElement_Bundle_default_instance_;
  qword_1EB690BD8 = (uint64_t)&SnippetUI::_ImageElement_Url_default_instance_;
  unk_1EB690BE0 = &SnippetUI::_ImageElement_Symbol_default_instance_;
  qword_1EB690BE8 = (uint64_t)&SnippetUI::_ImageElement_AppIcon_default_instance_;
  unk_1EB690BF0 = &SnippetUI::_ImageElement_Contact_default_instance_;
}

SnippetUI::ImageElement_Source *SnippetUI::ImageElement_Source::ImageElement_Source(SnippetUI::ImageElement_Source *this)
{
  *(void *)this = &unk_1F211A988;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load_explicit(scc_info_ImageElement_Source_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Source_ImageElement_2eproto);
  }
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_1C5D7F59C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Source::GetMetadata(SnippetUI::ImageElement_Source *this)
{
  return file_level_metadata_ImageElement_2eproto;
}

uint64_t SnippetUI::ImageElement_Source::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void SnippetUI::ImageElement_Source::MergeFrom(SnippetUI::ImageElement_Source *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1118);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::ImageElement_Source::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D7F6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement_Source::MergeFrom(SnippetUI::ImageElement_Source *this, const SnippetUI::ImageElement_Source *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 1133);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Source *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*((_DWORD *)this + 7) == 1)
      {
        uint64_t v6 = (SnippetUI::ImageElement_Data *)*((void *)this + 2);
      }
      else
      {
        SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        uint64_t v6 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(0);
        *((void *)this + 2) = v6;
        if (*((_DWORD *)a2 + 7) != 1)
        {
          int v12 = (const SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_;
          goto LABEL_31;
        }
      }
      int v12 = (const SnippetUI::ImageElement_Data *)*((void *)a2 + 2);
LABEL_31:
      SnippetUI::ImageElement_Data::MergeFrom(v6, v12);
      return;
    case 2:
      if (*((_DWORD *)this + 7) == 2)
      {
        char v7 = (SnippetUI::ImageElement_Bundle *)*((void *)this + 2);
LABEL_21:
        BOOL v13 = (const SnippetUI::ImageElement_Bundle *)*((void *)a2 + 2);
        goto LABEL_33;
      }
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      char v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(0);
      *((void *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 2) {
        goto LABEL_21;
      }
      BOOL v13 = (const SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_;
LABEL_33:
      SnippetUI::ImageElement_Bundle::MergeFrom(v7, v13);
      return;
    case 3:
      if (*((_DWORD *)this + 7) == 3)
      {
        uint64_t v8 = (SnippetUI::ImageElement_Url *)*((void *)this + 2);
LABEL_23:
        int v14 = (const SnippetUI::ImageElement_Url *)*((void *)a2 + 2);
        goto LABEL_35;
      }
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      uint64_t v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Url>(0);
      *((void *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) == 3) {
        goto LABEL_23;
      }
      int v14 = (const SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_;
LABEL_35:
      SnippetUI::ImageElement_Url::MergeFrom(v8, v14);
      return;
    case 4:
      if (*((_DWORD *)this + 7) == 4)
      {
        int v9 = (SnippetUI::ImageElement_Symbol *)*((void *)this + 2);
LABEL_25:
        int v15 = (const SnippetUI::ImageElement_Symbol *)*((void *)a2 + 2);
        goto LABEL_37;
      }
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      int v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(0);
      *((void *)this + 2) = v9;
      if (*((_DWORD *)a2 + 7) == 4) {
        goto LABEL_25;
      }
      int v15 = (const SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_;
LABEL_37:
      SnippetUI::ImageElement_Symbol::MergeFrom(v9, v15);
      return;
    case 5:
      if (*((_DWORD *)this + 7) == 5)
      {
        int v10 = (SnippetUI::ImageElement_AppIcon *)*((void *)this + 2);
LABEL_27:
        unsigned int v16 = (const SnippetUI::ImageElement_AppIcon *)*((void *)a2 + 2);
        goto LABEL_39;
      }
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 5;
      int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AppIcon>(0);
      *((void *)this + 2) = v10;
      if (*((_DWORD *)a2 + 7) == 5) {
        goto LABEL_27;
      }
      unsigned int v16 = (const SnippetUI::ImageElement_AppIcon *)&SnippetUI::_ImageElement_AppIcon_default_instance_;
LABEL_39:
      SnippetUI::ImageElement_AppIcon::MergeFrom(v10, v16);
      return;
    case 6:
      if (*((_DWORD *)this + 7) == 6)
      {
        int v11 = (SnippetUI::ImageElement_Contact *)*((void *)this + 2);
LABEL_29:
        int v17 = (const SnippetUI::ImageElement_Contact *)*((void *)a2 + 2);
        goto LABEL_41;
      }
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 6;
      int v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact>(0);
      *((void *)this + 2) = v11;
      if (*((_DWORD *)a2 + 7) == 6) {
        goto LABEL_29;
      }
      int v17 = (const SnippetUI::ImageElement_Contact *)&SnippetUI::_ImageElement_Contact_default_instance_;
LABEL_41:
      SnippetUI::ImageElement_Contact::MergeFrom(v11, v17);
      return;
    default:
      return;
  }
}

void sub_1C5D7F978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement_Source::clear_value(uint64_t this)
{
  uint64_t v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      this = *(void *)(this + 16);
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

void SnippetUI::ImageElement_Source::CopyFrom(SnippetUI::ImageElement_Source *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Source::Clear(this);
    SnippetUI::ImageElement_Source::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Source::Clear(SnippetUI::ImageElement_Source *this)
{
  SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (SnippetUI::ImageElement_Source *)((char *)this + 8);
  if (v3)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement_Source::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement_Source *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6 = *((_DWORD *)this + 7);
  if (v6 == 1)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    char v7 = (SnippetUI::ImageElement_Data *)*((void *)this + 2);
    *a2 = 10;
    unsigned int v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        int v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          int v12 = v11;
          *v11++ = v10 | 0x80;
          unsigned int v13 = v10 >> 7;
          unsigned int v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        int v9 = v12 + 2;
        *int v11 = v13;
      }
      else
      {
        a2[2] = v10;
        int v9 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v8;
      int v9 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_Data::InternalSerializeWithCachedSizesToArray(v7, (char *)v9, a3);
    int v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    int v15 = (SnippetUI::ImageElement_Bundle *)*((void *)this + 2);
    *a2 = 18;
    unsigned int v16 = *((_DWORD *)v15 + 19);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        int v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v20 = v19;
          *v19++ = v18 | 0x80;
          unsigned int v21 = v18 >> 7;
          unsigned int v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        int v17 = v20 + 2;
        *int v19 = v21;
      }
      else
      {
        a2[2] = v18;
        int v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      int v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_Bundle::InternalSerializeWithCachedSizesToArray(v15, (google::protobuf::UnknownFieldSet *)v17, a3, a4);
    int v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 3)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    int v23 = (SnippetUI::ImageElement_Url *)*((void *)this + 2);
    *a2 = 26;
    unsigned int v24 = *((_DWORD *)v23 + 20);
    if (v24 > 0x7F)
    {
      a2[1] = v24 | 0x80;
      unsigned int v26 = v24 >> 7;
      if (v24 >> 14)
      {
        unsigned int v27 = (unsigned __int8 *)(a2 + 2);
        do
        {
          BOOL v28 = v27;
          *v27++ = v26 | 0x80;
          unsigned int v29 = v26 >> 7;
          unsigned int v30 = v26 >> 14;
          v26 >>= 7;
        }
        while (v30);
        unsigned int v25 = v28 + 2;
        *unsigned int v27 = v29;
      }
      else
      {
        a2[2] = v26;
        unsigned int v25 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v24;
      unsigned int v25 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_Url::InternalSerializeWithCachedSizesToArray(v23, (google::protobuf::UnknownFieldSet *)v25, a3, a4);
    int v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 4)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    char v31 = (SnippetUI::ImageElement_Symbol *)*((void *)this + 2);
    *a2 = 34;
    unsigned int v32 = *((_DWORD *)v31 + 14);
    if (v32 > 0x7F)
    {
      a2[1] = v32 | 0x80;
      unsigned int v34 = v32 >> 7;
      if (v32 >> 14)
      {
        unint64_t v35 = (unsigned __int8 *)(a2 + 2);
        do
        {
          unsigned int v36 = v35;
          *v35++ = v34 | 0x80;
          unsigned int v37 = v34 >> 7;
          unsigned int v38 = v34 >> 14;
          v34 >>= 7;
        }
        while (v38);
        unsigned int v33 = v36 + 2;
        *unint64_t v35 = v37;
      }
      else
      {
        a2[2] = v34;
        unsigned int v33 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v32;
      unsigned int v33 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_Symbol::InternalSerializeWithCachedSizesToArray(v31, (google::protobuf::UnknownFieldSet *)v33, a3, a4);
    int v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 5)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    unint64_t v39 = (SnippetUI::ImageElement_AppIcon *)*((void *)this + 2);
    *a2 = 42;
    unsigned int v40 = *((_DWORD *)v39 + 7);
    if (v40 > 0x7F)
    {
      a2[1] = v40 | 0x80;
      unsigned int v42 = v40 >> 7;
      if (v40 >> 14)
      {
        unsigned int v43 = (unsigned __int8 *)(a2 + 2);
        do
        {
          unint64_t v44 = v43;
          *v43++ = v42 | 0x80;
          unsigned int v45 = v42 >> 7;
          unsigned int v46 = v42 >> 14;
          v42 >>= 7;
        }
        while (v46);
        unint64_t v41 = v44 + 2;
        *unsigned int v43 = v45;
      }
      else
      {
        a2[2] = v42;
        unint64_t v41 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v40;
      unint64_t v41 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_AppIcon::InternalSerializeWithCachedSizesToArray(v39, (google::protobuf::UnknownFieldSet *)v41, a3, a4);
    int v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 6)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    unsigned int v47 = (SnippetUI::ImageElement_Contact *)*((void *)this + 2);
    *a2 = 50;
    unsigned int v48 = *((_DWORD *)v47 + 8);
    if (v48 > 0x7F)
    {
      a2[1] = v48 | 0x80;
      unsigned int v50 = v48 >> 7;
      if (v48 >> 14)
      {
        uint64_t v51 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v52 = v51;
          *v51++ = v50 | 0x80;
          unsigned int v53 = v50 >> 7;
          unsigned int v54 = v50 >> 14;
          v50 >>= 7;
        }
        while (v54);
        unsigned int v49 = v52 + 2;
        unsigned __int8 *v51 = v53;
      }
      else
      {
        a2[2] = v50;
        unsigned int v49 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v48;
      unsigned int v49 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement_Contact::InternalSerializeWithCachedSizesToArray(v47, (char *)v49, a3, a4);
  }
  uint64_t v55 = *((void *)this + 1);
  if ((v55 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v55 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::ImageElement_Source::_InternalParse(SnippetUI::ImageElement_Source *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v40 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v40, *((_DWORD *)a3 + 23))) {
      return v40;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v40 + 1);
    unsigned int v8 = (char *)*(unsigned __int8 *)v40;
    if ((*(char *)v40 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v40 + 2);
LABEL_6:
      unsigned int v40 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v40, v8);
    unsigned int v40 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_26;
        }
        if (*((_DWORD *)this + 7) == 1)
        {
          int v9 = (SnippetUI::ImageElement_Data *)*((void *)this + 2);
        }
        else
        {
          SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          int v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(0);
          *((void *)this + 2) = v9;
          TagFallbacuint64_t k = v40;
        }
        unsigned int v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Data>(a3, v9, TagFallback);
        goto LABEL_42;
      case 2u:
        if (v8 != 18) {
          goto LABEL_26;
        }
        if (*((_DWORD *)this + 7) == 2)
        {
          unsigned int v10 = (SnippetUI::ImageElement_Bundle *)*((void *)this + 2);
        }
        else
        {
          SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          unsigned int v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(0);
          *((void *)this + 2) = v10;
          TagFallbacuint64_t k = v40;
        }
        unsigned int v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Bundle>(a3, v10, TagFallback);
        goto LABEL_42;
      case 3u:
        if (v8 != 26) {
          goto LABEL_26;
        }
        if (*((_DWORD *)this + 7) == 3)
        {
          int v11 = (SnippetUI::ImageElement_Url *)*((void *)this + 2);
        }
        else
        {
          SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          int v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Url>(0);
          *((void *)this + 2) = v11;
          TagFallbacuint64_t k = v40;
        }
        unsigned int v17 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallbacuint64_t k = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback) {
            goto LABEL_67;
          }
          unsigned int v18 = SizeFallback;
          unsigned int v17 = v24;
        }
        else
        {
          unsigned int v18 = (char *)TagFallback + 1;
        }
        int v25 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v18, v17);
        int v26 = *((_DWORD *)a3 + 22);
        BOOL v27 = __OFSUB__(v26--, 1);
        *((_DWORD *)a3 + 22) = v26;
        if (v26 < 0 != v27) {
          goto LABEL_67;
        }
        int v28 = v25;
        unsigned int v29 = SnippetUI::ImageElement_Url::_InternalParse(v11, (google::protobuf::internal *)v18, a3);
        if (!v29) {
          goto LABEL_67;
        }
        goto LABEL_64;
      case 4u:
        if (v8 != 34) {
          goto LABEL_26;
        }
        if (*((_DWORD *)this + 7) == 4)
        {
          int v12 = (SnippetUI::ImageElement_Symbol *)*((void *)this + 2);
        }
        else
        {
          SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          int v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(0);
          *((void *)this + 2) = v12;
          TagFallbacuint64_t k = v40;
        }
        unsigned int v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ImageElement_Symbol>(a3, v12, TagFallback);
        goto LABEL_42;
      case 5u:
        if (v8 != 42) {
          goto LABEL_26;
        }
        if (*((_DWORD *)this + 7) == 5)
        {
          unsigned int v13 = (SnippetUI::ImageElement_AppIcon *)*((void *)this + 2);
        }
        else
        {
          SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 5;
          unsigned int v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AppIcon>(0);
          *((void *)this + 2) = v13;
          TagFallbacuint64_t k = v40;
        }
        unsigned int v19 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          unsigned int v30 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v30) {
            goto LABEL_67;
          }
          uint64_t v20 = v30;
          unsigned int v19 = v31;
        }
        else
        {
          uint64_t v20 = (char *)TagFallback + 1;
        }
        int v32 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v20, v19);
        int v33 = *((_DWORD *)a3 + 22);
        BOOL v27 = __OFSUB__(v33--, 1);
        *((_DWORD *)a3 + 22) = v33;
        if (v33 < 0 != v27) {
          goto LABEL_67;
        }
        int v28 = v32;
        unsigned int v29 = SnippetUI::ImageElement_AppIcon::_InternalParse(v13, (google::protobuf::internal *)v20, a3);
        if (!v29) {
          goto LABEL_67;
        }
        goto LABEL_64;
      case 6u:
        if (v8 != 50) {
          goto LABEL_26;
        }
        if (*((_DWORD *)this + 7) == 6)
        {
          unsigned int v14 = (SnippetUI::ImageElement_Contact *)*((void *)this + 2);
        }
        else
        {
          SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 6;
          unsigned int v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact>(0);
          *((void *)this + 2) = v14;
          TagFallbacuint64_t k = v40;
        }
        unsigned int v21 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          unsigned int v34 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v34) {
            goto LABEL_67;
          }
          unsigned int v22 = v34;
          unsigned int v21 = v35;
        }
        else
        {
          unsigned int v22 = (char *)TagFallback + 1;
        }
        int v36 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v22, v21);
        int v37 = *((_DWORD *)a3 + 22);
        BOOL v27 = __OFSUB__(v37--, 1);
        *((_DWORD *)a3 + 22) = v37;
        if (v37 < 0 != v27) {
          goto LABEL_67;
        }
        int v28 = v36;
        unsigned int v29 = SnippetUI::ImageElement_Contact::_InternalParse(v14, (google::protobuf::internal *)v22, a3);
        if (!v29) {
          goto LABEL_67;
        }
LABEL_64:
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20)) {
          goto LABEL_67;
        }
        int v38 = *((_DWORD *)a3 + 7) + v28;
        *((_DWORD *)a3 + 7) = v38;
        *(void *)a3 = *((void *)a3 + 1) + (v38 & (v38 >> 31));
        unsigned int v40 = v29;
        continue;
      default:
LABEL_26:
        if (v8) {
          BOOL v15 = (v8 & 7) == 4;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15)
        {
          *((_DWORD *)a3 + 20) = v8 - 1;
          return TagFallback;
        }
        unsigned int v16 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
LABEL_42:
        unsigned int v40 = (google::protobuf::internal *)v16;
        if (v16) {
          continue;
        }
LABEL_67:
        TagFallbacuint64_t k = 0;
        break;
    }
    return TagFallback;
  }
}

uint64_t SnippetUI::ImageElement_Source::GetCachedSize(SnippetUI::ImageElement_Source *this)
{
  return *((unsigned int *)this + 6);
}

char *SnippetUI::ImageElement_Source::ByteSizeLong(SnippetUI::ImageElement_Data **this)
{
  switch(*((_DWORD *)this + 7))
  {
    case 1:
      uint64_t v2 = SnippetUI::ImageElement_Data::ByteSizeLong(this[2]);
      goto LABEL_9;
    case 2:
      uint64_t v2 = SnippetUI::ImageElement_Bundle::ByteSizeLong(this[2]);
      goto LABEL_9;
    case 3:
      uint64_t v2 = SnippetUI::ImageElement_Url::ByteSizeLong(this[2]);
      goto LABEL_9;
    case 4:
      uint64_t v2 = SnippetUI::ImageElement_Symbol::ByteSizeLong(this[2]);
      goto LABEL_9;
    case 5:
      uint64_t v2 = SnippetUI::ImageElement_AppIcon::ByteSizeLong(this[2]);
      goto LABEL_9;
    case 6:
      uint64_t v2 = SnippetUI::ImageElement_Contact::ByteSizeLong(this[2]);
LABEL_9:
      char v3 = (const google::protobuf::UnknownFieldSet *)&v2[((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1];
      break;
    default:
      char v3 = 0;
      break;
  }
  if ((_BYTE)this[1])
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(this + 1), v3, (_DWORD *)this + 6);
  }
  else
  {
    *((_DWORD *)this + 6) = v3;
    return (char *)v3;
  }
}

uint64_t SnippetUI::ImageElement_Source::IsInitialized(SnippetUI::ImageElement_Source *this)
{
  return 1;
}

SnippetUI::ImageElement_Source *SnippetUI::ImageElement_Source::New(SnippetUI::ImageElement_Source *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Source>(a2);
}

SnippetUI::ImageElement_Source *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Source>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::ImageElement_Source *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Source>);
  }
  SnippetUI::ImageElement_Source::ImageElement_Source(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D80504(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement_Source>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::ImageElement_Source *SnippetUI::ImageElement_Source::New(SnippetUI::ImageElement_Source *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Source>(0);
}

void SnippetUI::ImageElement_Source::~ImageElement_Source(SnippetUI::ImageElement_Source *this)
{
  SnippetUI::ImageElement_Source::~ImageElement_Source(this);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F211A988;
  if (*((_DWORD *)this + 7)) {
    SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void InitDefaultsscc_info_ImageElement_ImageElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", a4);
  SnippetUI::ImageElement::ImageElement((SnippetUI::ImageElement *)&SnippetUI::_ImageElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ImageElement_default_instance_, v4);
}

SnippetUI::ImageElement *SnippetUI::ImageElement::ImageElement(SnippetUI::ImageElement *this)
{
  *(void *)this = &unk_1F211B1C8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (atomic_load_explicit(scc_info_ImageElement_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_ImageElement_2eproto);
  }
  return this;
}

void sub_1C5D806D8(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<int>::~RepeatedField(v2 + 40);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ImageElement::GetMetadata(SnippetUI::ImageElement *this)
{
  return qword_1EA3D85D0;
}

uint64_t SnippetUI::ImageElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

void SnippetUI::ImageElement::MergeFrom(SnippetUI::ImageElement *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 4834);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::ImageElement::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D80808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ImageElement::MergeFrom(SnippetUI::ImageElement *this, const SnippetUI::ImageElement *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ImageElement.pb.cc", 4849);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::ImageElement_Source>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 10, (int *)a2 + 10);
}

void sub_1C5D808BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::ImageElement_Source>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    unsigned int v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      unsigned int v13 = (SnippetUI::ImageElement_Source **)(v6 + 8);
      unsigned int v14 = (SnippetUI::ImageElement_Source **)v7;
      do
      {
        unsigned int v16 = *v13++;
        BOOL v15 = v16;
        unsigned int v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::ImageElement_Source>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      unsigned int v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      unsigned int v21 = (SnippetUI::ImageElement_Source **)((char *)v8 + v20);
      unsigned int v22 = (SnippetUI::ImageElement_Source **)(v20 + v6 + 8);
      do
      {
        int v23 = *v22++;
        unsigned int v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Source>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::ImageElement_Source>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    int v26 = this[2];
    if (*v26 < v25) {
      *int v26 = v25;
    }
  }
}

void sub_1C5D80A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::ImageElement_Source>::Merge(SnippetUI::ImageElement_Source *a1, SnippetUI::ImageElement_Source *this)
{
}

void SnippetUI::ImageElement::CopyFrom(SnippetUI::ImageElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement::Clear(this);
    SnippetUI::ImageElement::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement::Clear(SnippetUI::ImageElement *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    int v5 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  else if (v2)
  {
    char v3 = (SnippetUI::ImageElement_Source **)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v4 = *v3++;
      SnippetUI::ImageElement_Source::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  char v7 = *((unsigned char *)this + 8);
  uint64_t v6 = (SnippetUI::ImageElement *)((char *)this + 8);
  *((_DWORD *)v6 + 8) = 0;
  if (v7)
  {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
  }
}

void sub_1C5D80B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *SnippetUI::ImageElement::InternalSerializeWithCachedSizesToArray(SnippetUI::ImageElement *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    int v8 = 0;
    while ((unint64_t)a2 < *(void *)a3)
    {
      if (v8 < 0) {
        goto LABEL_5;
      }
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        uint64_t v10 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v35, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
      }
      int v11 = *(SnippetUI::ImageElement_Source **)(*((void *)this + 4) + 8 * v8 + 8);
      *(unsigned char *)a2 = 10;
      unsigned int v12 = *((_DWORD *)v11 + 6);
      if (v12 > 0x7F)
      {
        *((unsigned char *)a2 + 1) = v12 | 0x80;
        unsigned int v14 = v12 >> 7;
        if (v12 >> 14)
        {
          BOOL v15 = (char *)a2 + 2;
          do
          {
            unsigned int v16 = v15;
            *v15++ = v14 | 0x80;
            unsigned int v17 = v14 >> 7;
            unsigned int v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          unsigned int v13 = v16 + 2;
          *BOOL v15 = v17;
        }
        else
        {
          *((unsigned char *)a2 + 2) = v14;
          unsigned int v13 = (char *)a2 + 3;
        }
      }
      else
      {
        *((unsigned char *)a2 + 1) = v12;
        unsigned int v13 = (char *)a2 + 2;
      }
      a2 = SnippetUI::ImageElement_Source::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7) {
        goto LABEL_19;
      }
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    uint64_t v9 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v35, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  unsigned int v19 = *((_DWORD *)this + 14);
  if ((int)v19 > 0)
  {
    unint64_t v20 = *(void *)a3;
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      unint64_t v20 = *(void *)a3;
    }
    if (v20 <= (unint64_t)a2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      unsigned int v21 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v35, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
    }
    *(unsigned char *)a2 = 18;
    unsigned int v22 = (char *)a2 + 1;
    if (v19 >= 0x80)
    {
      do
      {
        *v22++ = v19 | 0x80;
        unsigned int v34 = v19 >> 14;
        v19 >>= 7;
      }
      while (v34);
      a2 = (google::protobuf::UnknownFieldSet *)(v22 - 1);
    }
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    unsigned char *v22 = v19;
    int v23 = (int *)*((void *)this + 6);
    unsigned int v24 = &v23[*((int *)this + 10)];
    do
    {
      if ((unint64_t)a2 >= *(void *)a3) {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      }
      unint64_t v26 = *v23++;
      unint64_t v25 = v26;
      if (v26 > 0x7F)
      {
        *(unsigned char *)a2 = v25 | 0x80;
        unint64_t v27 = v25 >> 7;
        if (v25 >> 14)
        {
          int v28 = (char *)a2 + 1;
          do
          {
            unsigned int v29 = v28;
            *v28++ = v27 | 0x80;
            unint64_t v30 = v27 >> 7;
            unint64_t v31 = v27 >> 14;
            v27 >>= 7;
          }
          while (v31);
          a2 = (google::protobuf::UnknownFieldSet *)(v29 + 2);
          *int v28 = v30;
        }
        else
        {
          *((unsigned char *)a2 + 1) = v27;
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        }
      }
      else
      {
        *(unsigned char *)a2 = v25;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
      }
    }
    while (v23 < v24);
  }
  uint64_t v32 = *((void *)this + 1);
  if (v32) {
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v32 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  }
  return a2;
}

void sub_1C5D80E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *SnippetUI::ImageElement::_InternalParse(SnippetUI::ImageElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  char v35 = a2;
  int v5 = (SnippetUI::ImageElement *)((char *)this + 40);
  uint64_t v6 = (unsigned int *)((char *)this + 16);
  int v7 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
LABEL_2:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v35, *((_DWORD *)a3 + 23))) {
        return v35;
      }
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v35 + 1);
      int v11 = (char *)*(unsigned __int8 *)v35;
      if ((*(char *)v35 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      int v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v35 + 2);
LABEL_6:
        char v35 = TagFallback;
        goto LABEL_7;
      }
      TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v35, v11);
      char v35 = TagFallback;
      if (!TagFallback) {
        return TagFallback;
      }
LABEL_7:
      if (v11 >> 3 != 2)
      {
        if (v11 >> 3 != 1 || v11 != 10) {
          goto LABEL_12;
        }
        BOOL v15 = (google::protobuf::internal *)((char *)TagFallback - 1);
        while (1)
        {
          unsigned int v16 = (google::protobuf::internal *)((char *)v15 + 1);
          char v35 = v16;
          unsigned int v17 = (int *)*((void *)this + 4);
          if (!v17) {
            break;
          }
          uint64_t v18 = *((int *)this + 6);
          int v19 = *v17;
          if ((int)v18 < *v17)
          {
            *((_DWORD *)this + 6) = v18 + 1;
            unint64_t v20 = *(SnippetUI::ImageElement_Source **)&v17[2 * v18 + 2];
            goto LABEL_29;
          }
          if (v19 == *((_DWORD *)this + 7)) {
            goto LABEL_27;
          }
LABEL_28:
          *unsigned int v17 = v19 + 1;
          unint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Source>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                            + 2));
          uint64_t v21 = *((void *)this + 4);
          uint64_t v22 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v22 + 1;
          *(void *)(v21 + 8 * v22 + 8) = v20;
          unsigned int v16 = v35;
LABEL_29:
          unsigned int v23 = *(unsigned __int8 *)v16;
          if (*(char *)v16 < 0)
          {
            SizeFallbacuint64_t k = google::protobuf::internal::ReadSizeFallback(v16, (const char *)*(unsigned __int8 *)v16);
            if (!SizeFallback) {
              return 0;
            }
            unsigned int v24 = SizeFallback;
            unsigned int v23 = v26;
          }
          else
          {
            unsigned int v24 = (char *)v16 + 1;
          }
          int v27 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v24, v23);
          int v28 = *((_DWORD *)a3 + 22);
          BOOL v29 = __OFSUB__(v28--, 1);
          *((_DWORD *)a3 + 22) = v28;
          if (v28 < 0 != v29) {
            return 0;
          }
          int v30 = v27;
          BOOL v15 = SnippetUI::ImageElement_Source::_InternalParse(v20, (google::protobuf::internal *)v24, a3);
          if (!v15) {
            return 0;
          }
          ++*((_DWORD *)a3 + 22);
          if (*((_DWORD *)a3 + 20)) {
            return 0;
          }
          int v31 = *((_DWORD *)a3 + 7) + v30;
          *((_DWORD *)a3 + 7) = v31;
          unint64_t v32 = *((void *)a3 + 1) + (v31 & (v31 >> 31));
          *(void *)a3 = v32;
          char v35 = v15;
          if (v32 <= (unint64_t)v15 || *(unsigned char *)v15 != 10) {
            goto LABEL_2;
          }
        }
        int v19 = *((_DWORD *)this + 7);
LABEL_27:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v19 + 1);
        unsigned int v17 = (int *)*((void *)this + 4);
        int v19 = *v17;
        goto LABEL_28;
      }
      if (v11 == 18)
      {
        unsigned int v14 = google::protobuf::internal::PackedInt32Parser(v5, TagFallback, a3, v8);
        goto LABEL_19;
      }
      if (v11 == 16) {
        break;
      }
LABEL_12:
      if (v11) {
        BOOL v13 = (v11 & 7) == 4;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        *((_DWORD *)a3 + 20) = v11 - 1;
        return TagFallback;
      }
      unsigned int v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v7, TagFallback, a3, v9);
LABEL_19:
      char v35 = (google::protobuf::internal *)v14;
      if (!v14) {
        return 0;
      }
    }
    int v33 = google::protobuf::internal::ReadVarint(&v35, (const char **)v11);
    if (!v35) {
      return 0;
    }
    SnippetUI::ImageElement::_internal_add_idioms((uint64_t)this, v33);
  }
}

uint64_t SnippetUI::ImageElement::_internal_add_idioms(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 40);
  uint64_t v4 = (int *)(a1 + 40);
  if (v3 == *(_DWORD *)(a1 + 44)) {
    google::protobuf::RepeatedField<int>::Reserve((int *)(a1 + 40), v3 + 1);
  }
  uint64_t result = google::protobuf::RepeatedField<int>::elements((uint64_t)v4);
  uint64_t v6 = *v4;
  *uint64_t v4 = v6 + 1;
  *(_DWORD *)(result + 4 * v6) = a2;
  return result;
}

uint64_t SnippetUI::ImageElement::GetCachedSize(SnippetUI::ImageElement *this)
{
  return *((unsigned int *)this + 15);
}

char *SnippetUI::ImageElement::ByteSizeLong(SnippetUI::ImageElement *this)
{
  uint64_t v2 = *((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    uint64_t v4 = (SnippetUI::ImageElement_Data ***)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      int v7 = SnippetUI::ImageElement_Source::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v8 = *((_DWORD *)this + 10);
  if (v8)
  {
    int v9 = 0;
    uint64_t v10 = 0;
    do
    {
      int v11 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get((_DWORD *)this + 10, v9);
      if (v11 < 0) {
        uint64_t v12 = 10;
      }
      else {
        uint64_t v12 = (9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6;
      }
      v10 += v12;
      ++v9;
    }
    while (v8 != v9);
    if (v10)
    {
      if ((v10 & 0x80000000) != 0) {
        uint64_t v13 = 11;
      }
      else {
        uint64_t v13 = ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v2 += v13;
      int v14 = v10;
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  int v14 = 0;
LABEL_22:
  *((_DWORD *)this + 14) = v14;
  BOOL v15 = (const google::protobuf::UnknownFieldSet *)(v2 + v10);
  if (*((unsigned char *)this + 8))
  {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ImageElement *)((char *)this + 8), v15, (_DWORD *)this + 15);
  }
  else
  {
    *((_DWORD *)this + 15) = v15;
    return (char *)(v2 + v10);
  }
}

uint64_t SnippetUI::ImageElement::IsInitialized(SnippetUI::ImageElement *this)
{
  return 1;
}

SnippetUI::ImageElement *SnippetUI::ImageElement::New(SnippetUI::ImageElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement>(a2);
}

SnippetUI::ImageElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (SnippetUI::ImageElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement>);
  }
  SnippetUI::ImageElement::ImageElement(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_1C5D813A0(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v1, 0x10A1C408A86EF6ALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ImageElement>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

SnippetUI::ImageElement *SnippetUI::ImageElement::New(SnippetUI::ImageElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement>(0);
}

void SnippetUI::ImageElement::~ImageElement(SnippetUI::ImageElement *this)
{
  SnippetUI::ImageElement::~ImageElement(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t *v2;

  *(void *)this = &unk_1F211B1C8;
  uint64_t v2 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 40);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::ImageElement *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
}

uint64_t SnippetUI::ImageElement_SymbolLayout_descriptor(SnippetUI *this)
{
  return file_level_enum_descriptors_ImageElement_2eproto;
}

BOOL SnippetUI::ImageElement_SymbolLayout_IsValid(SnippetUI *this)
{
  return this < 2;
}

uint64_t SnippetUI::ImageElement_ImageStyle_descriptor(SnippetUI *this)
{
  return qword_1EA3D85E8;
}

BOOL SnippetUI::ImageElement_ImageStyle_IsValid(SnippetUI *this)
{
  return this < 0x19;
}

uint64_t SnippetUI::ImageElement_RenderingMode_descriptor(SnippetUI *this)
{
  return qword_1EA3D85F0;
}

BOOL SnippetUI::ImageElement_RenderingMode_IsValid(SnippetUI *this)
{
  return this < 2;
}

uint64_t SnippetUI::ImageElement_ContentMode_descriptor(SnippetUI *this)
{
  return qword_1EA3D85F8;
}

BOOL SnippetUI::ImageElement_ContentMode_IsValid(SnippetUI *this)
{
  return this < 2;
}

void SnippetUI::ImageElement_Source::InitAsDefaultInstance(SnippetUI::ImageElement_Source *this)
{
  qword_1EB690BC8 = (uint64_t)&SnippetUI::_ImageElement_Data_default_instance_;
  unk_1EB690BD0 = &SnippetUI::_ImageElement_Bundle_default_instance_;
  qword_1EB690BD8 = (uint64_t)&SnippetUI::_ImageElement_Url_default_instance_;
  unk_1EB690BE0 = &SnippetUI::_ImageElement_Symbol_default_instance_;
  qword_1EB690BE8 = (uint64_t)&SnippetUI::_ImageElement_AppIcon_default_instance_;
  unk_1EB690BF0 = &SnippetUI::_ImageElement_Contact_default_instance_;
}

uint64_t SnippetUI::ImageElement_Source::_Internal::data(SnippetUI::ImageElement_Source::_Internal *this, const SnippetUI::ImageElement_Source *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::ImageElement_Source::_Internal::bundle(SnippetUI::ImageElement_Source::_Internal *this, const SnippetUI::ImageElement_Source *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::ImageElement_Source::_Internal::url(SnippetUI::ImageElement_Source::_Internal *this, const SnippetUI::ImageElement_Source *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::ImageElement_Source::_Internal::symbol(SnippetUI::ImageElement_Source::_Internal *this, const SnippetUI::ImageElement_Source *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::ImageElement_Source::_Internal::app_icon(SnippetUI::ImageElement_Source::_Internal *this, const SnippetUI::ImageElement_Source *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::ImageElement_Source::_Internal::contact(SnippetUI::ImageElement_Source::_Internal *this, const SnippetUI::ImageElement_Source *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::ImageElement_Source::set_allocated_data(SnippetUI::ImageElement_Source *this, SnippetUI::ImageElement_Data *a2)
{
  uint64_t result = SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 1;
    *((void *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Source::set_allocated_bundle(SnippetUI::ImageElement_Source *this, SnippetUI::ImageElement_Bundle *a2)
{
  uint64_t result = SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 2;
    *((void *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Source::set_allocated_url(SnippetUI::ImageElement_Source *this, SnippetUI::ImageElement_Url *a2)
{
  uint64_t result = SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 3;
    *((void *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Source::set_allocated_symbol(SnippetUI::ImageElement_Source *this, SnippetUI::ImageElement_Symbol *a2)
{
  uint64_t result = SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 4;
    *((void *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Source::set_allocated_app_icon(SnippetUI::ImageElement_Source *this, SnippetUI::ImageElement_AppIcon *a2)
{
  uint64_t result = SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 5;
    *((void *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Source::set_allocated_contact(SnippetUI::ImageElement_Source *this, SnippetUI::ImageElement_Contact *a2)
{
  uint64_t result = SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 6;
    *((void *)this + 2) = a2;
  }
  return result;
}

SnippetUI::ImageElement_Source *SnippetUI::ImageElement_Source::ImageElement_Source(SnippetUI::ImageElement_Source *this, const SnippetUI::ImageElement_Source *a2)
{
  *(void *)this = &unk_1F211A988;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Source *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((_DWORD *)this + 7) = 0;
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      uint64_t v5 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(0);
      *((void *)this + 2) = v5;
      if (*((_DWORD *)a2 + 7) == 1) {
        uint64_t v6 = (const SnippetUI::ImageElement_Data *)*((void *)a2 + 2);
      }
      else {
        uint64_t v6 = (const SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_;
      }
      SnippetUI::ImageElement_Data::MergeFrom(v5, v6);
      break;
    case 2:
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      int v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(0);
      *((void *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 2) {
        int v8 = (const SnippetUI::ImageElement_Bundle *)*((void *)a2 + 2);
      }
      else {
        int v8 = (const SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_;
      }
      SnippetUI::ImageElement_Bundle::MergeFrom(v7, v8);
      break;
    case 3:
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      int v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Url>(0);
      *((void *)this + 2) = v9;
      if (*((_DWORD *)a2 + 7) == 3) {
        uint64_t v10 = (const SnippetUI::ImageElement_Url *)*((void *)a2 + 2);
      }
      else {
        uint64_t v10 = (const SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_;
      }
      SnippetUI::ImageElement_Url::MergeFrom(v9, v10);
      break;
    case 4:
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      int v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(0);
      *((void *)this + 2) = v11;
      if (*((_DWORD *)a2 + 7) == 4) {
        uint64_t v12 = (const SnippetUI::ImageElement_Symbol *)*((void *)a2 + 2);
      }
      else {
        uint64_t v12 = (const SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_;
      }
      SnippetUI::ImageElement_Symbol::MergeFrom(v11, v12);
      break;
    case 5:
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 5;
      uint64_t v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_AppIcon>(0);
      *((void *)this + 2) = v13;
      if (*((_DWORD *)a2 + 7) == 5) {
        int v14 = (const SnippetUI::ImageElement_AppIcon *)*((void *)a2 + 2);
      }
      else {
        int v14 = (const SnippetUI::ImageElement_AppIcon *)&SnippetUI::_ImageElement_AppIcon_default_instance_;
      }
      SnippetUI::ImageElement_AppIcon::MergeFrom(v13, v14);
      break;
    case 6:
      SnippetUI::ImageElement_Source::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 6;
      BOOL v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact>(0);
      *((void *)this + 2) = v15;
      if (*((_DWORD *)a2 + 7) == 6) {
        unsigned int v16 = (const SnippetUI::ImageElement_Contact *)*((void *)a2 + 2);
      }
      else {
        unsigned int v16 = (const SnippetUI::ImageElement_Contact *)&SnippetUI::_ImageElement_Contact_default_instance_;
      }
      SnippetUI::ImageElement_Contact::MergeFrom(v15, v16);
      break;
    default:
      return this;
  }
  return this;
}

void sub_1C5D81928(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::ImageElement_Source::default_instance(SnippetUI::ImageElement_Source *this)
{
  if (atomic_load_explicit(scc_info_ImageElement_Source_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Source_ImageElement_2eproto);
  }
  return &SnippetUI::_ImageElement_Source_default_instance_;
}

void SnippetUI::ImageElement_Source::CopyFrom(SnippetUI::ImageElement_Source *this, const SnippetUI::ImageElement_Source *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Source::Clear(this);
    SnippetUI::ImageElement_Source::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Source::InternalSwap(SnippetUI::ImageElement_Source *this, SnippetUI::ImageElement_Source *a2)
{
  uint64_t v4 = (SnippetUI::ImageElement_Source *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
}

SnippetUI::ImageElement_Contact_Monogram *SnippetUI::ImageElement_Contact_Monogram::ImageElement_Contact_Monogram(SnippetUI::ImageElement_Contact_Monogram *this, const SnippetUI::ImageElement_Contact_Monogram *a2)
{
  *(void *)this = &unk_1F211AA48;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Contact_Monogram *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  return this;
}

void sub_1C5D81B10(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::ImageElement_Contact_Monogram::default_instance(SnippetUI::ImageElement_Contact_Monogram *this)
{
  if (atomic_load_explicit(scc_info_ImageElement_Contact_Monogram_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Contact_Monogram_ImageElement_2eproto);
  }
  return &SnippetUI::_ImageElement_Contact_Monogram_default_instance_;
}

void SnippetUI::ImageElement_Contact_Monogram::CopyFrom(SnippetUI::ImageElement_Contact_Monogram *this, const SnippetUI::ImageElement_Contact_Monogram *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Contact_Monogram::Clear(this);
    SnippetUI::ImageElement_Contact_Monogram::MergeFrom(this, a2);
  }
}

__n128 SnippetUI::ImageElement_Contact_Monogram::InternalSwap(SnippetUI::ImageElement_Contact_Monogram *this, SnippetUI::ImageElement_Contact_Monogram *a2)
{
  uint64_t v4 = (SnippetUI::ImageElement_Contact_Monogram *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v10 = (uint64_t *)*((void *)this + 2);
  int v8 = (std::string **)((char *)this + 16);
  int v9 = (std::string *)v10;
  int v11 = (std::string **)((char *)a2 + 16);
  if (v10 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      return result;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v8, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v9 = *v8;
  }
  uint64_t v12 = *v11;
  if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v12 = *v11;
  }
  std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
  __n128 result = *(__n128 *)&v9->__r_.__value_.__l.__data_;
  std::string::size_type v14 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v9->__r_.__value_.__r.__words[2] = v14;
  *(__n128 *)&v12->__r_.__value_.__l.__data_ = result;
  v12->__r_.__value_.__r.__words[2] = v13;
  return result;
}

SnippetUI::ImageElement_Contact_Avatar *SnippetUI::ImageElement_Contact_Avatar::ImageElement_Contact_Avatar(SnippetUI::ImageElement_Contact_Avatar *this, const SnippetUI::ImageElement_Contact_Avatar *a2)
{
  *(void *)this = &unk_1F211AB08;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (SnippetUI::ImageElement_Contact_Avatar *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((signed int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 10) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  return this;
}

void sub_1C5D81D28(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::ImageElement_Contact_Avatar::default_instance(SnippetUI::ImageElement_Contact_Avatar *this)
{
  if (atomic_load_explicit(scc_info_ImageElement_Contact_Avatar_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Contact_Avatar_ImageElement_2eproto);
  }
  return &SnippetUI::_ImageElement_Contact_Avatar_default_instance_;
}

void SnippetUI::ImageElement_Contact_Avatar::InternalSwap(SnippetUI::ImageElement_Contact_Avatar *this, SnippetUI::ImageElement_Contact_Avatar *a2)
{
  uint64_t v4 = (SnippetUI::ImageElement_Contact_Avatar *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v7;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::ImageElement_Contact_Avatar *)((char *)this + 16), (SnippetUI::ImageElement_Contact_Avatar *)((char *)a2 + 16));
}

void SnippetUI::ImageElement_Contact::InitAsDefaultInstance(SnippetUI::ImageElement_Contact *this)
{
  qword_1EA3DACD8 = (uint64_t)&SnippetUI::_ImageElement_Contact_Monogram_default_instance_;
  unk_1EA3DACE0 = &SnippetUI::_ImageElement_Contact_Avatar_default_instance_;
}

uint64_t SnippetUI::ImageElement_Contact::_Internal::monogram(SnippetUI::ImageElement_Contact::_Internal *this, const SnippetUI::ImageElement_Contact *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::ImageElement_Contact::_Internal::avatar(SnippetUI::ImageElement_Contact::_Internal *this, const SnippetUI::ImageElement_Contact *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::ImageElement_Contact::set_allocated_monogram(SnippetUI::ImageElement_Contact *this, SnippetUI::ImageElement_Contact_Monogram *a2)
{
  uint64_t result = SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 1;
    *((void *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Contact::set_allocated_avatar(SnippetUI::ImageElement_Contact *this, SnippetUI::ImageElement_Contact_Avatar *a2)
{
  uint64_t result = SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 2;
    *((void *)this + 3) = a2;
  }
  return result;
}

SnippetUI::ImageElement_Contact *SnippetUI::ImageElement_Contact::ImageElement_Contact(SnippetUI::ImageElement_Contact *this, const SnippetUI::ImageElement_Contact *a2)
{
  *(void *)this = &unk_1F211ABC8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Contact *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 9) = 0;
  int v5 = *((_DWORD *)a2 + 9);
  if (v5 == 1)
  {
    SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
    *((_DWORD *)this + 9) = 1;
    int v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Monogram>(0);
    *((void *)this + 3) = v8;
    if (*((_DWORD *)a2 + 9) == 1) {
      int v9 = (const SnippetUI::ImageElement_Contact_Monogram *)*((void *)a2 + 3);
    }
    else {
      int v9 = (const SnippetUI::ImageElement_Contact_Monogram *)&SnippetUI::_ImageElement_Contact_Monogram_default_instance_;
    }
    SnippetUI::ImageElement_Contact_Monogram::MergeFrom(v8, v9);
  }
  else if (v5 == 2)
  {
    SnippetUI::ImageElement_Contact::clear_content((uint64_t)this);
    *((_DWORD *)this + 9) = 2;
    uint64_t v6 = (signed int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Contact_Avatar>(0);
    *((void *)this + 3) = v6;
    if (*((_DWORD *)a2 + 9) == 2) {
      uint64_t v7 = (signed int **)*((void *)a2 + 3);
    }
    else {
      uint64_t v7 = (signed int **)&SnippetUI::_ImageElement_Contact_Avatar_default_instance_;
    }
    SnippetUI::ImageElement_Contact_Avatar::MergeFrom(v6, v7);
  }
  return this;
}

void sub_1C5D82054(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::ImageElement_Contact::default_instance(SnippetUI::ImageElement_Contact *this)
{
  if (atomic_load_explicit(scc_info_ImageElement_Contact_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Contact_ImageElement_2eproto);
  }
  return &SnippetUI::_ImageElement_Contact_default_instance_;
}

void SnippetUI::ImageElement_Contact::CopyFrom(SnippetUI::ImageElement_Contact *this, const SnippetUI::ImageElement_Contact *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Contact::Clear(this);
    SnippetUI::ImageElement_Contact::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Contact::InternalSwap(SnippetUI::ImageElement_Contact *this, SnippetUI::ImageElement_Contact *a2)
{
  uint64_t v4 = (SnippetUI::ImageElement_Contact *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  int v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
}

SnippetUI::ImageElement_AppIcon *SnippetUI::ImageElement_AppIcon::ImageElement_AppIcon(SnippetUI::ImageElement_AppIcon *this, const SnippetUI::ImageElement_AppIcon *a2)
{
  *(void *)this = &unk_1F211AC88;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 7) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_AppIcon *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  return this;
}

void sub_1C5D8223C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::ImageElement_AppIcon::default_instance(SnippetUI::ImageElement_AppIcon *this)
{
  if (atomic_load_explicit(scc_info_ImageElement_AppIcon_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_AppIcon_ImageElement_2eproto);
  }
  return &SnippetUI::_ImageElement_AppIcon_default_instance_;
}

void SnippetUI::ImageElement_AppIcon::CopyFrom(SnippetUI::ImageElement_AppIcon *this, const SnippetUI::ImageElement_AppIcon *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_AppIcon::Clear(this);
    SnippetUI::ImageElement_AppIcon::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_AppIcon::InternalSwap(SnippetUI::ImageElement_AppIcon *this, SnippetUI::ImageElement_AppIcon *a2)
{
  uint64_t v4 = (SnippetUI::ImageElement_AppIcon *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v14;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  int v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v7 = (uint64_t *)*((void *)this + 2);
  }
  int v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)int v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)int v9 = v11;
  std::string v9[2] = v10;
LABEL_13:
  int v13 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v13;
}

void SnippetUI::ImageElement_Data::InitAsDefaultInstance(SnippetUI::ImageElement_Data *this)
{
  qword_1EB690B38 = (uint64_t)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
  unk_1EB690B40 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1EB690B48 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
}

uint64_t SnippetUI::ImageElement_Data::_Internal::aspect_ratio(SnippetUI::ImageElement_Data::_Internal *this, const SnippetUI::ImageElement_Data *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::ImageElement_Data::_Internal::fixed_height(SnippetUI::ImageElement_Data::_Internal *this, const SnippetUI::ImageElement_Data *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::ImageElement_Data::_Internal::fixed_width(SnippetUI::ImageElement_Data::_Internal *this, const SnippetUI::ImageElement_Data *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::ImageElement_Data::clear_fixed_height(SnippetUI::ImageElement_Data *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::ImageElement_Data::clear_fixed_width(SnippetUI::ImageElement_Data *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

SnippetUI::ImageElement_Data *SnippetUI::ImageElement_Data::ImageElement_Data(SnippetUI::ImageElement_Data *this, const SnippetUI::ImageElement_Data *a2)
{
  *(void *)this = &unk_1F211AD48;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 15) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Data *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (a2 == (const SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_)
  {
    *((void *)this + 4) = 0;
    *((void *)this + 5) = 0;
  }
  else
  {
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
  }
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  return this;
}

void sub_1C5D82664(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x1081C40B60F2DE8);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

SnippetUI::ImageElement_AspectRatio *SnippetUI::ImageElement_AspectRatio::ImageElement_AspectRatio(SnippetUI::ImageElement_AspectRatio *this, const SnippetUI::ImageElement_AspectRatio *a2)
{
  *(void *)this = &unk_1F211B108;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_AspectRatio *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = *((void *)a2 + 2);
  return this;
}

void sub_1C5D82724(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::ImageElement_Data::default_instance(SnippetUI::ImageElement_Data *this)
{
  if (atomic_load_explicit(scc_info_ImageElement_Data_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Data_ImageElement_2eproto);
  }
  return &SnippetUI::_ImageElement_Data_default_instance_;
}

void SnippetUI::ImageElement_Data::CopyFrom(SnippetUI::ImageElement_Data *this, const SnippetUI::ImageElement_Data *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Data::Clear(this);
    SnippetUI::ImageElement_Data::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Data::InternalSwap(SnippetUI::ImageElement_Data *this, SnippetUI::ImageElement_Data *a2)
{
  uint64_t v4 = (SnippetUI::ImageElement_Data *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v22;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  int v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)int v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  std::string v9[2] = v10;
LABEL_13:
  int v13 = (uint64_t *)*((void *)this + 3);
  std::string::size_type v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v13 = (uint64_t *)*((void *)this + 3);
  }
  BOOL v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    BOOL v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)int v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)BOOL v15 = v17;
  void v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  uint64_t v21 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v21;
  LODWORD(v21) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v21;
}

void SnippetUI::ImageElement_Bundle::InitAsDefaultInstance(SnippetUI::ImageElement_Bundle *this)
{
  qword_1EB690B88 = (uint64_t)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
  unk_1EB690B90 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1EB690B98 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
}

uint64_t SnippetUI::ImageElement_Bundle::_Internal::aspect_ratio(SnippetUI::ImageElement_Bundle::_Internal *this, const SnippetUI::ImageElement_Bundle *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::ImageElement_Bundle::_Internal::fixed_height(SnippetUI::ImageElement_Bundle::_Internal *this, const SnippetUI::ImageElement_Bundle *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::ImageElement_Bundle::_Internal::fixed_width(SnippetUI::ImageElement_Bundle::_Internal *this, const SnippetUI::ImageElement_Bundle *a2)
{
  return *((void *)this + 8);
}

uint64_t SnippetUI::ImageElement_Bundle::clear_fixed_height(SnippetUI::ImageElement_Bundle *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::ImageElement_Bundle::clear_fixed_width(SnippetUI::ImageElement_Bundle *this)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 8) = 0;
  return result;
}

SnippetUI::ImageElement_Bundle *SnippetUI::ImageElement_Bundle::ImageElement_Bundle(SnippetUI::ImageElement_Bundle *this, const SnippetUI::ImageElement_Bundle *a2)
{
  *(void *)this = &unk_1F211AE08;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 19) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Bundle *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  *((void *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v10 = *((void *)a2 + 4);
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  }
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v11) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 32, v10);
  }
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v12 = *((void *)a2 + 5);
  if (*(char *)(v12 + 23) < 0) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  }
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v13) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, v12);
  }
  if (a2 == (const SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_)
  {
    *((void *)this + 6) = 0;
    *((void *)this + 7) = 0;
  }
  else
  {
    if (*((void *)a2 + 6)) {
      operator new();
    }
    *((void *)this + 6) = 0;
    if (*((void *)a2 + 7)) {
      operator new();
    }
    *((void *)this + 7) = 0;
    if (*((void *)a2 + 8)) {
      operator new();
    }
  }
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1C5D82C5C(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x1081C40B60F2DE8);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::ImageElement_Bundle::default_instance(SnippetUI::ImageElement_Bundle *this)
{
  if (atomic_load_explicit(scc_info_ImageElement_Bundle_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Bundle_ImageElement_2eproto);
  }
  return &SnippetUI::_ImageElement_Bundle_default_instance_;
}

void SnippetUI::ImageElement_Bundle::CopyFrom(SnippetUI::ImageElement_Bundle *this, const SnippetUI::ImageElement_Bundle *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Bundle::Clear(this);
    SnippetUI::ImageElement_Bundle::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Bundle::InternalSwap(SnippetUI::ImageElement_Bundle *this, SnippetUI::ImageElement_Bundle *a2)
{
  uint64_t v4 = (SnippetUI::ImageElement_Bundle *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v34;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  int v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)int v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  std::string v9[2] = v10;
LABEL_13:
  uint64_t v13 = (uint64_t *)*((void *)this + 3);
  std::string::size_type v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v13 = (uint64_t *)*((void *)this + 3);
  }
  BOOL v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    BOOL v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)BOOL v15 = v17;
  void v15[2] = v16;
LABEL_19:
  uint64_t v19 = (uint64_t *)*((void *)this + 4);
  uint64_t v20 = (uint64_t **)((char *)a2 + 32);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_25;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v19 = (uint64_t *)*((void *)this + 4);
  }
  uint64_t v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v21 = *v20;
  }
  uint64_t v22 = v19[2];
  long long v23 = *(_OWORD *)v19;
  uint64_t v24 = v21[2];
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v21;
  std::string v19[2] = v24;
  *(_OWORD *)uint64_t v21 = v23;
  std::string v21[2] = v22;
LABEL_25:
  unint64_t v25 = (uint64_t *)*((void *)this + 5);
  unsigned int v26 = (uint64_t **)((char *)a2 + 40);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_31;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    unint64_t v25 = (uint64_t *)*((void *)this + 5);
  }
  int v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v27 = *v26;
  }
  uint64_t v28 = v25[2];
  long long v29 = *(_OWORD *)v25;
  uint64_t v30 = v27[2];
  *(_OWORD *)unint64_t v25 = *(_OWORD *)v27;
  std::string v25[2] = v30;
  *(_OWORD *)int v27 = v29;
  v27[2] = v28;
LABEL_31:
  uint64_t v31 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v31;
  uint64_t v32 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v32;
  uint64_t v33 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v33;
  LODWORD(v33) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v33;
}

void SnippetUI::ImageElement_Url::InitAsDefaultInstance(SnippetUI::ImageElement_Url *this)
{
  qword_1EB690980 = (uint64_t)&SnippetUI::_ImageElement_Data_default_instance_;
  unk_1EB690988 = &SnippetUI::_ImageElement_Bundle_default_instance_;
  qword_1EB690990 = (uint64_t)&SnippetUI::_ImageElement_Symbol_default_instance_;
  qword_1EB690948 = (uint64_t)&SnippetUI::_ImageElement_AspectRatio_default_instance_;
  unk_1EB690950 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1EB690958 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
  unk_1EB690960 = &SnippetUI::_Color_default_instance_;
}

uint64_t SnippetUI::ImageElement_Url::_Internal::data_loading_image(SnippetUI::ImageElement_Url::_Internal *this, const SnippetUI::ImageElement_Url *a2)
{
  return *((void *)this + 9);
}

uint64_t SnippetUI::ImageElement_Url::_Internal::bundle_loading_image(SnippetUI::ImageElement_Url::_Internal *this, const SnippetUI::ImageElement_Url *a2)
{
  return *((void *)this + 9);
}

uint64_t SnippetUI::ImageElement_Url::_Internal::symbol_loading_image(SnippetUI::ImageElement_Url::_Internal *this, const SnippetUI::ImageElement_Url *a2)
{
  return *((void *)this + 9);
}

uint64_t SnippetUI::ImageElement_Url::_Internal::aspect_ratio(SnippetUI::ImageElement_Url::_Internal *this, const SnippetUI::ImageElement_Url *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::ImageElement_Url::_Internal::fixed_height(SnippetUI::ImageElement_Url::_Internal *this, const SnippetUI::ImageElement_Url *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::ImageElement_Url::_Internal::fixed_width(SnippetUI::ImageElement_Url::_Internal *this, const SnippetUI::ImageElement_Url *a2)
{
  return *((void *)this + 6);
}

uint64_t SnippetUI::ImageElement_Url::_Internal::background_color(SnippetUI::ImageElement_Url::_Internal *this, const SnippetUI::ImageElement_Url *a2)
{
  return *((void *)this + 7);
}

uint64_t SnippetUI::ImageElement_Url::set_allocated_data_loading_image(SnippetUI::ImageElement_Url *this, SnippetUI::ImageElement_Data *a2)
{
  uint64_t result = SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 21) = 2;
    *((void *)this + 9) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Url::set_allocated_bundle_loading_image(SnippetUI::ImageElement_Url *this, SnippetUI::ImageElement_Bundle *a2)
{
  uint64_t result = SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 21) = 3;
    *((void *)this + 9) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Url::set_allocated_symbol_loading_image(SnippetUI::ImageElement_Url *this, SnippetUI::ImageElement_Symbol *a2)
{
  uint64_t result = SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 21) = 4;
    *((void *)this + 9) = a2;
  }
  return result;
}

uint64_t SnippetUI::ImageElement_Url::clear_fixed_height(SnippetUI::ImageElement_Url *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::ImageElement_Url::clear_fixed_width(SnippetUI::ImageElement_Url *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::ImageElement_Url::clear_background_color(SnippetUI::ImageElement_Url *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 7) = 0;
  return result;
}

SnippetUI::ImageElement_Url *SnippetUI::ImageElement_Url::ImageElement_Url(SnippetUI::ImageElement_Url *this, const SnippetUI::ImageElement_Url *a2)
{
  *(void *)this = &unk_1F211AEC8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Url *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (a2 == (const SnippetUI::ImageElement_Url *)&SnippetUI::_ImageElement_Url_default_instance_)
  {
    *((void *)this + 4) = 0;
    *((void *)this + 5) = 0;
    *((void *)this + 6) = 0;
  }
  else
  {
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
    *((void *)this + 5) = 0;
    if (*((void *)a2 + 6)) {
      operator new();
    }
    *((void *)this + 6) = 0;
    if (*((void *)a2 + 7)) {
      operator new();
    }
  }
  *((void *)this + 7) = 0;
  *((void *)this + 8) = *((void *)a2 + 8);
  *((_DWORD *)this + 21) = 0;
  int v10 = *((_DWORD *)a2 + 21);
  switch(v10)
  {
    case 4:
      SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
      *((_DWORD *)this + 21) = 4;
      uint64_t v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Symbol>(0);
      *((void *)this + 9) = v13;
      if (*((_DWORD *)a2 + 21) == 4) {
        std::string::size_type v14 = (const SnippetUI::ImageElement_Symbol *)*((void *)a2 + 9);
      }
      else {
        std::string::size_type v14 = (const SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_;
      }
      SnippetUI::ImageElement_Symbol::MergeFrom(v13, v14);
      break;
    case 3:
      SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
      *((_DWORD *)this + 21) = 3;
      BOOL v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Bundle>(0);
      *((void *)this + 9) = v15;
      if (*((_DWORD *)a2 + 21) == 3) {
        uint64_t v16 = (const SnippetUI::ImageElement_Bundle *)*((void *)a2 + 9);
      }
      else {
        uint64_t v16 = (const SnippetUI::ImageElement_Bundle *)&SnippetUI::_ImageElement_Bundle_default_instance_;
      }
      SnippetUI::ImageElement_Bundle::MergeFrom(v15, v16);
      break;
    case 2:
      SnippetUI::ImageElement_Url::clear_loading_image((uint64_t)this);
      *((_DWORD *)this + 21) = 2;
      long long v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement_Data>(0);
      *((void *)this + 9) = v11;
      if (*((_DWORD *)a2 + 21) == 2) {
        uint64_t v12 = (const SnippetUI::ImageElement_Data *)*((void *)a2 + 9);
      }
      else {
        uint64_t v12 = (const SnippetUI::ImageElement_Data *)&SnippetUI::_ImageElement_Data_default_instance_;
      }
      SnippetUI::ImageElement_Data::MergeFrom(v11, v12);
      break;
  }
  return this;
}

void sub_1C5D834AC(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A3C407A2727C4);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::ImageElement_Url::default_instance(SnippetUI::ImageElement_Url *this)
{
  if (atomic_load_explicit(scc_info_ImageElement_Url_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Url_ImageElement_2eproto);
  }
  return &SnippetUI::_ImageElement_Url_default_instance_;
}

void SnippetUI::ImageElement_Url::CopyFrom(SnippetUI::ImageElement_Url *this, const SnippetUI::ImageElement_Url *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Url::Clear(this);
    SnippetUI::ImageElement_Url::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Url::InternalSwap(SnippetUI::ImageElement_Url *this, SnippetUI::ImageElement_Url *a2)
{
  uint64_t v4 = (SnippetUI::ImageElement_Url *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v24;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  int v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)int v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  std::string v9[2] = v10;
LABEL_13:
  uint64_t v13 = (uint64_t *)*((void *)this + 3);
  std::string::size_type v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v13 = (uint64_t *)*((void *)this + 3);
  }
  BOOL v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    BOOL v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)BOOL v15 = v17;
  void v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  uint64_t v21 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v21;
  uint64_t v22 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v22;
  LODWORD(v22) = *((_DWORD *)this + 16);
  *((_DWORD *)this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = v22;
  LODWORD(v22) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v22;
  uint64_t v23 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v23;
  LODWORD(v23) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v23;
}

void SnippetUI::ImageElement_Symbol_Background::InitAsDefaultInstance(SnippetUI::ImageElement_Symbol_Background *this)
{
  qword_1EA3DACF8 = (uint64_t)&SnippetUI::_Color_default_instance_;
  unk_1EA3DAD00 = &SnippetUI::_ImageElement_AspectRatio_default_instance_;
  qword_1EA3DAD08 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
  unk_1EA3DAD10 = &SnippetUI::_OptionalBool_default_instance_;
}

uint64_t SnippetUI::ImageElement_Symbol_Background::_Internal::color(SnippetUI::ImageElement_Symbol_Background::_Internal *this, const SnippetUI::ImageElement_Symbol_Background *a2)
{
  return *((void *)this + 2);
}

uint64_t SnippetUI::ImageElement_Symbol_Background::_Internal::aspect_ratio(SnippetUI::ImageElement_Symbol_Background::_Internal *this, const SnippetUI::ImageElement_Symbol_Background *a2)
{
  return *((void *)this + 3);
}

uint64_t SnippetUI::ImageElement_Symbol_Background::_Internal::fixed_height(SnippetUI::ImageElement_Symbol_Background::_Internal *this, const SnippetUI::ImageElement_Symbol_Background *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::ImageElement_Symbol_Background::_Internal::fixed_width(SnippetUI::ImageElement_Symbol_Background::_Internal *this, const SnippetUI::ImageElement_Symbol_Background *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::ImageElement_Symbol_Background::clear_color(SnippetUI::ImageElement_Symbol_Background *this)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 2) = 0;
  return result;
}

uint64_t SnippetUI::ImageElement_Symbol_Background::clear_fixed_height(SnippetUI::ImageElement_Symbol_Background *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::ImageElement_Symbol_Background::clear_fixed_width(SnippetUI::ImageElement_Symbol_Background *this)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

SnippetUI::ImageElement_Symbol_Background *SnippetUI::ImageElement_Symbol_Background::ImageElement_Symbol_Background(SnippetUI::ImageElement_Symbol_Background *this, const SnippetUI::ImageElement_Symbol_Background *a2)
{
  *(void *)this = &unk_1F211AF88;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Symbol_Background *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (a2 == (const SnippetUI::ImageElement_Symbol_Background *)&SnippetUI::_ImageElement_Symbol_Background_default_instance_)
  {
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
  }
  else
  {
    if (*((void *)a2 + 2)) {
      operator new();
    }
    *((void *)this + 2) = 0;
    if (*((void *)a2 + 3)) {
      operator new();
    }
    *((void *)this + 3) = 0;
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
  }
  *((void *)this + 5) = 0;
  return this;
}

void sub_1C5D83A40(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x1081C40B60F2DE8);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::ImageElement_Symbol_Background::default_instance(SnippetUI::ImageElement_Symbol_Background *this)
{
  if (atomic_load_explicit(scc_info_ImageElement_Symbol_Background_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Symbol_Background_ImageElement_2eproto);
  }
  return &SnippetUI::_ImageElement_Symbol_Background_default_instance_;
}

void SnippetUI::ImageElement_Symbol_Background::CopyFrom(SnippetUI::ImageElement_Symbol_Background *this, const SnippetUI::ImageElement_Symbol_Background *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Symbol_Background::Clear(this);
    SnippetUI::ImageElement_Symbol_Background::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Symbol_Background::InternalSwap(SnippetUI::ImageElement_Symbol_Background *this, SnippetUI::ImageElement_Symbol_Background *a2)
{
  uint64_t v4 = (SnippetUI::ImageElement_Symbol_Background *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v11;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
}

void SnippetUI::ImageElement_Symbol::InitAsDefaultInstance(SnippetUI::ImageElement_Symbol *this)
{
  qword_1EB690C18 = (uint64_t)&SnippetUI::_Color_default_instance_;
  unk_1EB690C20 = &SnippetUI::_ImageElement_Symbol_Background_default_instance_;
}

uint64_t SnippetUI::ImageElement_Symbol::_Internal::tint_color(SnippetUI::ImageElement_Symbol::_Internal *this, const SnippetUI::ImageElement_Symbol *a2)
{
  return *((void *)this + 4);
}

uint64_t SnippetUI::ImageElement_Symbol::_Internal::background(SnippetUI::ImageElement_Symbol::_Internal *this, const SnippetUI::ImageElement_Symbol *a2)
{
  return *((void *)this + 5);
}

uint64_t SnippetUI::ImageElement_Symbol::clear_tint_color(SnippetUI::ImageElement_Symbol *this)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

SnippetUI::ImageElement_Symbol *SnippetUI::ImageElement_Symbol::ImageElement_Symbol(SnippetUI::ImageElement_Symbol *this, const SnippetUI::ImageElement_Symbol *a2)
{
  *(void *)this = &unk_1F211B048;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ImageElement_Symbol *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v5);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
  }
  if (a2 == (const SnippetUI::ImageElement_Symbol *)&SnippetUI::_ImageElement_Symbol_default_instance_)
  {
    *((void *)this + 4) = 0;
  }
  else
  {
    if (*((void *)a2 + 4)) {
      operator new();
    }
    *((void *)this + 4) = 0;
    if (*((void *)a2 + 5)) {
      operator new();
    }
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = *((void *)a2 + 6);
  return this;
}

void sub_1C5D83DC4(_Unwind_Exception *a1)
{
  MEMORY[0x1C8796D70](v2, 0x10A1C40668C0A6DLL);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::ImageElement_Symbol::default_instance(SnippetUI::ImageElement_Symbol *this)
{
  if (atomic_load_explicit(scc_info_ImageElement_Symbol_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_Symbol_ImageElement_2eproto);
  }
  return &SnippetUI::_ImageElement_Symbol_default_instance_;
}

void SnippetUI::ImageElement_Symbol::CopyFrom(SnippetUI::ImageElement_Symbol *this, const SnippetUI::ImageElement_Symbol *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement_Symbol::Clear(this);
    SnippetUI::ImageElement_Symbol::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement_Symbol::InternalSwap(SnippetUI::ImageElement_Symbol *this, SnippetUI::ImageElement_Symbol *a2)
{
  uint64_t v4 = (SnippetUI::ImageElement_Symbol *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      uint64_t v6 = v21;
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v7 = (uint64_t *)*((void *)this + 2);
  uint64_t v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_13;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v7 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v9 = *v8;
  }
  uint64_t v10 = v7[2];
  long long v11 = *(_OWORD *)v7;
  uint64_t v12 = v9[2];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  std::string v7[2] = v12;
  *(_OWORD *)uint64_t v9 = v11;
  std::string v9[2] = v10;
LABEL_13:
  uint64_t v13 = (uint64_t *)*((void *)this + 3);
  std::string::size_type v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_19;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v13 = (uint64_t *)*((void *)this + 3);
  }
  BOOL v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    BOOL v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)BOOL v15 = v17;
  void v15[2] = v16;
LABEL_19:
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  LODWORD(v20) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v20;
  LODWORD(v20) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v20;
}

uint64_t SnippetUI::ImageElement_AspectRatio::ImageElement_AspectRatio(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)this = &unk_1F211B108;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)(this + 8) = 0;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)this = &unk_1F211B108;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t *SnippetUI::ImageElement_AspectRatio::default_instance(SnippetUI::ImageElement_AspectRatio *this)
{
  if (atomic_load_explicit(scc_info_ImageElement_AspectRatio_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_AspectRatio_ImageElement_2eproto);
  }
  return &SnippetUI::_ImageElement_AspectRatio_default_instance_;
}

void SnippetUI::ImageElement_AspectRatio::CopyFrom(SnippetUI::ImageElement_AspectRatio *this, const SnippetUI::ImageElement_AspectRatio *a2)
{
  if (a2 != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (SnippetUI::ImageElement_AspectRatio *)((char *)this + 8);
    *((void *)v5 + 1) = 0;
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
    }
    SnippetUI::ImageElement_AspectRatio::MergeFrom(this, a2);
  }
}

float SnippetUI::ImageElement_AspectRatio::InternalSwap(SnippetUI::ImageElement_AspectRatio *this, SnippetUI::ImageElement_AspectRatio *a2)
{
  uint64_t v4 = (SnippetUI::ImageElement_AspectRatio *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      char v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  int v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

SnippetUI::ImageElement *SnippetUI::ImageElement::ImageElement(SnippetUI::ImageElement *this, const SnippetUI::ImageElement *a2)
{
  *(void *)this = &unk_1F211B1C8;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (SnippetUI::ImageElement *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::ImageElement_Source>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 40, (int *)a2 + 10);
  *((_DWORD *)this + 15) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  return this;
}

void sub_1C5D842A4(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<int>::~RepeatedField(v3);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *SnippetUI::ImageElement::default_instance(SnippetUI::ImageElement *this)
{
  if (atomic_load_explicit(scc_info_ImageElement_ImageElement_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ImageElement_ImageElement_2eproto);
  }
  return &SnippetUI::_ImageElement_default_instance_;
}

void SnippetUI::ImageElement::CopyFrom(SnippetUI::ImageElement *this, const SnippetUI::ImageElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::ImageElement::Clear(this);
    SnippetUI::ImageElement::MergeFrom(this, a2);
  }
}

void SnippetUI::ImageElement::InternalSwap(SnippetUI::ImageElement *this, SnippetUI::ImageElement *a2)
{
  uint64_t v4 = (SnippetUI::ImageElement *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      char v6 = v7;
      goto LABEL_6;
    }
LABEL_5:
    char v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::ImageElement *)((char *)this + 16), (SnippetUI::ImageElement *)((char *)a2 + 16));
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 40, (uint64_t)a2 + 40);
}

void siri::dialogengine::ParseGzippedFile()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(char *)(v0 + 23) < 0) {
    uint64_t v0 = *(void *)v0;
  }
  gzFile v4 = gzopen((const char *)v0, "r");
  if (v4)
  {
    uint64_t v5 = v4;
    memset(&v14, 0, sizeof(v14));
    while (1)
    {
      while (1)
      {
        if (gzeof(v5))
        {
          gzclose(v5);
          *uint64_t v3 = v14;
          return;
        }
        int v6 = gzread(v5, buf, 0x2000u);
        if (v6 < 1) {
          break;
        }
        std::string::append(&v14, buf, v6);
      }
      if (v6 < 0)
      {
        int errnum = 0;
        int v7 = gzerror(v5, &errnum);
        if (errnum) {
          break;
        }
      }
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error while reading: %s (%d)", v8, v7, errnum);
    gzclose(v5);
    std::string::basic_string[abi:ne180100]<0>(v3, "");
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (*(char *)(v1 + 23) >= 0) {
      uint64_t v9 = v1;
    }
    else {
      uint64_t v9 = *(void *)v1;
    }
    uint64_t v10 = __error();
    long long v11 = strerror(*v10);
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to open file for reading: '%s' : %s", v12, v9, v11);
    std::string::basic_string[abi:ne180100]<0>(v3, "");
  }
}

void sub_1C5D845BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::WriteGzippedFile(std::string *a1, const void **a2)
{
  siri::dialogengine::DirName(a1, (uint64_t)&__p);
  siri::dialogengine::CreateDir(&__p, 504);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    gzFile v4 = (const char *)a1;
  }
  else {
    gzFile v4 = (const char *)a1->__r_.__value_.__r.__words[0];
  }
  uint64_t v5 = gzopen(v4, "w");
  if (v5)
  {
    int v6 = v5;
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = (const void *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v9 = a2[1];
    }
    int v10 = gzwrite(v5, v8, v9);
    BOOL v12 = v9 == (const void *)v10;
    if (v9 != (const void *)v10) {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Write error.  Expected %zu bytes, wrote %zu", v11, v9, v10);
    }
    gzclose(v6);
  }
  else
  {
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = (uint64_t *)a1;
    }
    else {
      uint64_t v13 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
    }
    std::string v14 = __error();
    BOOL v15 = strerror(*v14);
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to open file for writing: '%s' : %s", v16, v13, v15);
    return 0;
  }
  return v12;
}

void sub_1C5D846E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5D8488C(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void sub_1C5D84A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D84BBC(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D84CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::VariableObject>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableObject>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2123A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableObject>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2123A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C5D84E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D84EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

siri::dialogengine::VariableObject *_ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine14VariableObjectENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(siri::dialogengine::VariableObject **a1)
{
  uint64_t v2 = operator new(0x78uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_1F2123A90;
  float result = siri::dialogengine::VariableObject::VariableObject((siri::dialogengine::VariableObject *)(v2 + 3));
  *a1 = result;
  a1[1] = (siri::dialogengine::VariableObject *)v2;
  return result;
}

void sub_1C5D84F74(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_Separators_Separators_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Separators.pb.cc", a4);
  qword_1EA3DB350 = 0;
  unk_1EA3DB358 = 0;
  SnippetUI::_Separators_default_instance_ = (uint64_t)&unk_1F211B390;
  dword_1EA3DB360 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Separators_default_instance_, v4);
}

uint64_t SnippetUI::Separators::GetMetadata(SnippetUI::Separators *this)
{
  return file_level_metadata_Separators_2eproto;
}

uint64_t SnippetUI::Separators::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void SnippetUI::Separators::MergeFrom(SnippetUI::Separators *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Separators.pb.cc", 264);
    gzFile v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::Separators::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D85110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Separators::MergeFrom(SnippetUI::Separators *this, const SnippetUI::Separators *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Separators.pb.cc", 279);
    gzFile v4 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Separators *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  int v6 = *((_DWORD *)a2 + 4);
  if (v6) {
    *((_DWORD *)this + 4) = v6;
  }
  int v7 = *((_DWORD *)a2 + 5);
  if (v7) {
    *((_DWORD *)this + 5) = v7;
  }
}

void sub_1C5D851C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Separators::CopyFrom(SnippetUI::Separators *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (SnippetUI::Separators *)((char *)this + 8);
    *((void *)v5 + 1) = 0;
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
    }
    SnippetUI::Separators::MergeFrom(this, lpsrc);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Separators::InternalSerializeWithCachedSizesToArray(SnippetUI::Separators *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned int v6 = *((_DWORD *)this + 4);
    }
    *a2 = 8;
    if (v6 > 0x7F)
    {
      a2[1] = v6 | 0x80;
      unint64_t v7 = (unint64_t)(int)v6 >> 7;
      if (v6 >> 14)
      {
        char v8 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v9 = v8;
          *v8++ = v7 | 0x80;
          unint64_t v10 = v7 >> 7;
          unint64_t v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
        a2 = (char *)(v9 + 2);
        *char v8 = v10;
      }
      else
      {
        a2[2] = v7;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v6;
      a2 += 2;
    }
  }
  unsigned int v12 = *((_DWORD *)this + 5);
  if (v12)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned int v12 = *((_DWORD *)this + 5);
    }
    *a2 = 16;
    if (v12 > 0x7F)
    {
      a2[1] = v12 | 0x80;
      unint64_t v13 = (unint64_t)(int)v12 >> 7;
      if (v12 >> 14)
      {
        std::string v14 = (unsigned __int8 *)(a2 + 2);
        do
        {
          BOOL v15 = v14;
          *v14++ = v13 | 0x80;
          unint64_t v16 = v13 >> 7;
          unint64_t v17 = v13 >> 14;
          v13 >>= 7;
        }
        while (v17);
        a2 = (char *)(v15 + 2);
        *std::string v14 = v16;
      }
      else
      {
        a2[2] = v13;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v12;
      a2 += 2;
    }
  }
  uint64_t v18 = *((void *)this + 1);
  if ((v18 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v18 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::Separators::_InternalParse(SnippetUI::Separators *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v18 = a2;
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23)))return v18; {
        TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v18 + 1);
        }
        char v8 = (char *)*(unsigned __int8 *)v18;
        if ((*(char *)v18 & 0x80000000) == 0) {
          goto LABEL_6;
        }
        char v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
          uint64_t v18 = TagFallback;
          goto LABEL_7;
        }
        TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v8);
        uint64_t v18 = TagFallback;
        if (!TagFallback) {
          return TagFallback;
        }
LABEL_7:
        if (v8 >> 3 != 2) {
          break;
        }
        if (v8 != 16) {
          goto LABEL_12;
        }
        unint64_t v11 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v12) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_22;
        }
        int v13 = *(char *)v11;
        unint64_t v12 = v12 + (v13 << 7) - 128;
        if ((v13 & 0x80000000) == 0)
        {
          unint64_t v11 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_22:
          uint64_t v18 = v11;
          goto LABEL_23;
        }
        uint64_t v18 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v12);
        if (!v18) {
          return 0;
        }
LABEL_23:
        *((_DWORD *)this + 5) = v12;
      }
      if (v8 >> 3 != 1 || v8 != 8) {
        break;
      }
      std::string v14 = (google::protobuf::internal *)((char *)TagFallback + 1);
      LODWORD(v15) = *(unsigned __int8 *)TagFallback;
      if ((*(char *)TagFallback & 0x80000000) == 0) {
        goto LABEL_27;
      }
      int v16 = *(char *)v14;
      unint64_t v15 = v15 + (v16 << 7) - 128;
      if ((v16 & 0x80000000) == 0)
      {
        std::string v14 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_27:
        uint64_t v18 = v14;
        goto LABEL_28;
      }
      uint64_t v18 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v15);
      if (!v18) {
        return 0;
      }
LABEL_28:
      *((_DWORD *)this + 4) = v15;
    }
LABEL_12:
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    uint64_t v18 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
    if (!v18) {
      return 0;
    }
  }
  *((_DWORD *)a3 + 20) = v8 - 1;
  return TagFallback;
}

uint64_t SnippetUI::Separators::GetCachedSize(SnippetUI::Separators *this)
{
  return *((unsigned int *)this + 6);
}

char *SnippetUI::Separators::ByteSizeLong(SnippetUI::Separators *this)
{
  int v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0) {
      uint64_t v2 = 11;
    }
    else {
      uint64_t v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v3 = *((_DWORD *)this + 5);
  if (v3)
  {
    if (v3 < 0) {
      uint64_t v4 = 11;
    }
    else {
      uint64_t v4 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v2 += v4;
  }
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Separators *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v2, (_DWORD *)this + 6);
  }
  *((_DWORD *)this + 6) = v2;
  return (char *)v2;
}

uint64_t SnippetUI::Separators::IsInitialized(SnippetUI::Separators *this)
{
  return 1;
}

void SnippetUI::Separators::Clear(SnippetUI::Separators *this)
{
  char v2 = *((unsigned char *)this + 8);
  int v1 = (SnippetUI::Separators *)((char *)this + 8);
  *((void *)v1 + 1) = 0;
  if (v2) {
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
  }
}

void *SnippetUI::Separators::New(SnippetUI::Separators *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Separators>(a2);
}

void *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Separators>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  float result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Separators>);
  }
  result[1] = 0;
  result[2] = 0;
  *float result = &unk_1F211B390;
  *((_DWORD *)result + 6) = 0;
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Separators>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *SnippetUI::Separators::New(SnippetUI::Separators *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Separators>(0);
}

void SnippetUI::Separators::~Separators(SnippetUI::Separators *this)
{
  *(void *)this = &unk_1F211B390;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C8796D70);
}

{
  *(void *)this = &unk_1F211B390;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(void *)this = &unk_1F211B390;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::SeparatorStyle_descriptor(SnippetUI *this)
{
  return file_level_enum_descriptors_Separators_2eproto;
}

BOOL SnippetUI::SeparatorStyle_IsValid(SnippetUI *this)
{
  return this < 7;
}

uint64_t SnippetUI::Separators::Separators(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)this = &unk_1F211B390;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)(this + 8) = 0;
  *(void *)(this + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)this = &unk_1F211B390;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

SnippetUI::Separators *SnippetUI::Separators::Separators(SnippetUI::Separators *this, const SnippetUI::Separators *a2)
{
  *(void *)this = &unk_1F211B390;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Separators *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  }
  *((void *)this + 2) = *((void *)a2 + 2);
  return this;
}

void sub_1C5D85868(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *SnippetUI::Separators::default_instance(SnippetUI::Separators *this)
{
  if (atomic_load_explicit(scc_info_Separators_Separators_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_Separators_Separators_2eproto);
  }
  return &SnippetUI::_Separators_default_instance_;
}

void SnippetUI::Separators::CopyFrom(SnippetUI::Separators *this, const SnippetUI::Separators *a2)
{
  if (a2 != this)
  {
    char v6 = *((unsigned char *)this + 8);
    uint64_t v5 = (SnippetUI::Separators *)((char *)this + 8);
    *((void *)v5 + 1) = 0;
    if (v6) {
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
    }
    SnippetUI::Separators::MergeFrom(this, a2);
  }
}

void SnippetUI::Separators::InternalSwap(SnippetUI::Separators *this, SnippetUI::Separators *a2)
{
  uint64_t v4 = (SnippetUI::Separators *)((char *)this + 8);
  uint64_t v5 = *((void *)a2 + 1);
  if (*((unsigned char *)this + 8))
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      char v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  char v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  int v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  int v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
}

void siri::dialogengine::VariableArray::ToString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  memset(&v45, 0, sizeof(v45));
  memset(&v44, 0, sizeof(v44));
  uint64_t v4 = *(uint64_t **)(a1 + 72);
  uint64_t v5 = *(uint64_t **)(a1 + 80);
  if (v4 != v5)
  {
    while (1)
    {
      uint64_t v9 = *v4;
      int v8 = (std::__shared_weak_count *)v4[1];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::dialogengine::GetArrayElementType(a3, (std::string *)&__v);
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::__split_buffer<std::string> *))(*(void *)v9 + 56))(&v32, v9, a2, &__v);
      if (SHIBYTE(__v.__end_) < 0) {
        operator delete(__v.__first_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v31, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      }
      else {
        std::string v31 = v32;
      }
      std::vector<std::string>::pointer end = v45.__end_;
      if (v45.__end_ >= v45.__end_cap_.__value_)
      {
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v45.__end_ - (char *)v45.__begin_) >> 3);
        unint64_t v13 = v12 + 1;
        if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v45.__end_cap_.__value_ - (char *)v45.__begin_) >> 3) > v13) {
          unint64_t v13 = 0x5555555555555556 * (((char *)v45.__end_cap_.__value_ - (char *)v45.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v45.__end_cap_.__value_ - (char *)v45.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v13;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v45.__end_cap_;
        if (v14) {
          unint64_t v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v45.__end_cap_, v14);
        }
        else {
          unint64_t v15 = 0;
        }
        int v16 = v15 + v12;
        __v.__first_ = v15;
        __v.__begin_ = v16;
        __v.__end_cap_.__value_ = &v15[v14];
        long long v17 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
        v16->__r_.__value_.__r.__words[2] = v31.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
        memset(&v31, 0, sizeof(v31));
        __v.__end_ = v16 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v45, &__v);
        uint64_t v18 = v45.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v45.__end_ = v18;
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v11 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
        v45.__end_->__r_.__value_.__r.__words[2] = v31.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
        v45.__end_ = end + 1;
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v31, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
      }
      else {
        std::string v31 = v33;
      }
      std::vector<std::string>::pointer v19 = v44.__end_;
      if (v44.__end_ >= v44.__end_cap_.__value_)
      {
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_ - (char *)v44.__begin_) >> 3);
        unint64_t v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) > v22) {
          unint64_t v22 = 0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v23 = v22;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v44.__end_cap_;
        if (v23) {
          uint64_t v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v44.__end_cap_, v23);
        }
        else {
          uint64_t v24 = 0;
        }
        unint64_t v25 = v24 + v21;
        __v.__first_ = v24;
        __v.__begin_ = v25;
        __v.__end_cap_.__value_ = &v24[v23];
        long long v26 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
        v25->__r_.__value_.__r.__words[2] = v31.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
        memset(&v31, 0, sizeof(v31));
        __v.__end_ = v25 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v44, &__v);
        int v27 = v44.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v44.__end_ = v27;
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v20 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
        v44.__end_->__r_.__value_.__r.__words[2] = v31.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
        v44.__end_ = v19 + 1;
      }
      if (v43 < 0) {
        operator delete(__p);
      }
      if (v41 < 0) {
        operator delete(v40);
      }
      if (v39 < 0) {
        operator delete(v38);
      }
      if (v37 < 0) {
        operator delete(v36);
      }
      if (v35 < 0) {
        operator delete(v34);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v8) {
        goto LABEL_52;
      }
LABEL_53:
      v4 += 2;
      if (v4 == v5) {
        goto LABEL_57;
      }
    }
    operator delete(v32.__r_.__value_.__l.__data_);
    if (!v8) {
      goto LABEL_53;
    }
LABEL_52:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    goto LABEL_53;
  }
LABEL_57:
  std::string::basic_string[abi:ne180100]<0>(&__v, ", ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v32, (uint64_t)v45.__begin_, (uint64_t)v45.__end_, (uint64_t)&__v);
  std::string::basic_string[abi:ne180100]<0>(v29, ", ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v31, (uint64_t)v44.__begin_, (uint64_t)v44.__end_, (uint64_t)v29);
  siri::dialogengine::SpeakableString::SpeakableString(a4, &v32, &v31);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
}

void sub_1C5D85E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 105) < 0) {
    operator delete(*(void **)(v29 - 128));
  }
  a24 = (void *)(v29 - 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = (void *)(v29 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableArray::ToString(siri::dialogengine::VariableArray *this@<X0>, uint64_t a2@<X8>)
{
  memset(&v41, 0, sizeof(v41));
  memset(&v40, 0, sizeof(v40));
  uint64_t v2 = (uint64_t *)*((void *)this + 9);
  int v3 = (uint64_t *)*((void *)this + 10);
  if (v2 != v3)
  {
    while (1)
    {
      uint64_t v4 = *v2;
      uint64_t v5 = (std::__shared_weak_count *)v2[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)v4 + 48))(&v28);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v27, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      }
      else {
        std::string v27 = v28;
      }
      std::vector<std::string>::pointer end = v41.__end_;
      if (v41.__end_ >= v41.__end_cap_.__value_)
      {
        unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v41.__end_ - (char *)v41.__begin_) >> 3);
        unint64_t v9 = v8 + 1;
        if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 3) > v9) {
          unint64_t v9 = 0x5555555555555556 * (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v10 = v9;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v41.__end_cap_;
        if (v10) {
          long long v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v41.__end_cap_, v10);
        }
        else {
          long long v11 = 0;
        }
        unint64_t v12 = v11 + v8;
        __v.__first_ = v11;
        __v.__begin_ = v12;
        __v.__end_cap_.__value_ = &v11[v10];
        long long v13 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
        v12->__r_.__value_.__r.__words[2] = v27.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        memset(&v27, 0, sizeof(v27));
        __v.__end_ = v12 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v41, &__v);
        unint64_t v14 = v41.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v41.__end_ = v14;
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v7 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
        v41.__end_->__r_.__value_.__r.__words[2] = v27.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
        v41.__end_ = end + 1;
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v27, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      }
      else {
        std::string v27 = v29;
      }
      std::vector<std::string>::pointer v15 = v40.__end_;
      if (v40.__end_ >= v40.__end_cap_.__value_)
      {
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v40.__end_ - (char *)v40.__begin_) >> 3);
        unint64_t v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v40.__end_cap_.__value_ - (char *)v40.__begin_) >> 3) > v18) {
          unint64_t v18 = 0x5555555555555556 * (((char *)v40.__end_cap_.__value_ - (char *)v40.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v40.__end_cap_.__value_ - (char *)v40.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v19 = v18;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v40.__end_cap_;
        if (v19) {
          long long v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v40.__end_cap_, v19);
        }
        else {
          long long v20 = 0;
        }
        unint64_t v21 = v20 + v17;
        __v.__first_ = v20;
        __v.__begin_ = v21;
        __v.__end_cap_.__value_ = &v20[v19];
        long long v22 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
        v21->__r_.__value_.__r.__words[2] = v27.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
        memset(&v27, 0, sizeof(v27));
        __v.__end_ = v21 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v40, &__v);
        unint64_t v23 = v40.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v40.__end_ = v23;
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v16 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
        v40.__end_->__r_.__value_.__r.__words[2] = v27.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        v40.__end_ = v15 + 1;
      }
      if (v39 < 0) {
        operator delete(__p);
      }
      if (v37 < 0) {
        operator delete(v36);
      }
      if (v35 < 0) {
        operator delete(v34);
      }
      if (v33 < 0) {
        operator delete(v32);
      }
      if (v31 < 0) {
        operator delete(v30);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v5) {
        goto LABEL_50;
      }
LABEL_51:
      v2 += 2;
      if (v2 == v3) {
        goto LABEL_55;
      }
    }
    operator delete(v28.__r_.__value_.__l.__data_);
    if (!v5) {
      goto LABEL_51;
    }
LABEL_50:
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    goto LABEL_51;
  }
LABEL_55:
  std::string::basic_string[abi:ne180100]<0>(&__v, ", ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v28, (uint64_t)v41.__begin_, (uint64_t)v41.__end_, (uint64_t)&__v);
  std::string::basic_string[abi:ne180100]<0>(v25, ", ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v27, (uint64_t)v40.__begin_, (uint64_t)v40.__end_, (uint64_t)v25);
  siri::dialogengine::SpeakableString::SpeakableString(a2, &v28, &v27);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
}

void sub_1C5D86374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 - 105) < 0) {
    operator delete(*(void **)(v27 - 128));
  }
  a22 = (void *)(v27 - 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = (void *)(v27 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void sub_1C5D86458()
{
  if (!v0) {
    JUMPOUT(0x1C5D86430);
  }
  JUMPOUT(0x1C5D86428);
}

BOOL siri::dialogengine::VariableArray::IsEmpty(siri::dialogengine::VariableArray *this)
{
  return *((void *)this + 9) == *((void *)this + 10);
}

uint64_t siri::dialogengine::VariableArray::Accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
}

void siri::dialogengine::VariableArray::~VariableArray(siri::dialogengine::VariableArray *this)
{
  siri::dialogengine::VariableArray::~VariableArray(this);
  JUMPOUT(0x1C8796D70);
}

{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_1F211B468;
  uint64_t v2 = *((void *)this + 9);
  int v3 = *((void *)this + 10);
  while (v2 != v3)
  {
    if (*(siri::dialogengine::VariableArray **)(*(void *)v2 + 56) == this) {
      *(void *)(*(void *)v2 + 56) = 0;
    }
    v2 += 16;
  }
  uint64_t v4 = (void **)((char *)this + 72);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v4);
  siri::dialogengine::Variable::~Variable((void **)this);
}

siri::dialogengine::VariableArray *siri::dialogengine::VariableArray::VariableArray(siri::dialogengine::VariableArray *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)siri::dialogengine::TYPE_ARRAY);
  siri::dialogengine::Variable::Variable((uint64_t)this, &v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_1F211B468;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  return this;
}

void sub_1C5D86614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *siri::dialogengine::VariableArray::VariableArray(void *a1, const std::string *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)siri::dialogengine::TYPE_ARRAY);
  siri::dialogengine::Variable::Variable((uint64_t)a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_1F211B468;
  a1[10] = 0;
  a1[11] = 0;
  a1[9] = 0;
  return a1;
}

void sub_1C5D866D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *siri::dialogengine::VariableArray::AddItem(void *result, void *a2)
{
  if (*a2)
  {
    int v3 = result;
    std::string v4 = result + 11;
    unint64_t v5 = result[11];
    char v6 = (void *)result[10];
    if ((unint64_t)v6 >= v5)
    {
      unint64_t v9 = result + 9;
      uint64_t v10 = result[9];
      uint64_t v11 = ((uint64_t)v6 - v10) >> 4;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60) {
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v5 - v10;
      if (v13 >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      v19[4] = v4;
      std::vector<std::string>::pointer v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v14);
      long long v16 = &v15[16 * v11];
      v19[0] = v15;
      v19[1] = v16;
      void v19[3] = &v15[16 * v17];
      long long v18 = *(_OWORD *)a2;
      *(_OWORD *)long long v16 = *(_OWORD *)a2;
      if (*((void *)&v18 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      std::string v19[2] = v16 + 16;
      std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__swap_out_circular_buffer(v9, v19);
      unint64_t v8 = (void *)v3[10];
      float result = (void *)std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)v19);
    }
    else
    {
      void *v6 = *a2;
      uint64_t v7 = a2[1];
      v6[1] = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v8 = v6 + 2;
    }
    v3[10] = v8;
    *(void *)(*a2 + 56) = v3;
  }
  return result;
}

void siri::dialogengine::VariableArray::SetItems(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  std::string v4 = a1 + 9;
  while (v5 != v6)
  {
    if (*(void **)(*(void *)v5 + 56) == a1) {
      *(void *)(*(void *)v5 + 56) = 0;
    }
    v5 += 16;
  }
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__clear[abi:ne180100](v4);
  uint64_t v7 = *(void **)a2;
  unint64_t v8 = *(void **)(a2 + 8);
  if (*(void **)a2 != v8)
  {
    do
    {
      unint64_t v9 = (std::__shared_weak_count *)v7[1];
      v10[0] = *v7;
      v10[1] = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::dialogengine::VariableArray::AddItem(a1, v10);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      v7 += 2;
    }
    while (v7 != v8);
  }
}

void sub_1C5D868B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::VariableArray::GetItem@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(this + 72);
  if (a2 >= (*(void *)(this + 80) - v3) >> 4)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    long long v4 = *(_OWORD *)(v3 + 16 * a2);
    *(_OWORD *)a3 = v4;
    if (*((void *)&v4 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 1uLL, memory_order_relaxed);
    }
  }
  return this;
}

uint64_t siri::dialogengine::VariableArray::GetLength(siri::dialogengine::VariableArray *this)
{
  return (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 4;
}

void siri::dialogengine::VariableArray::GetConcreteType(siri::dialogengine::VariableArray *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>((void *)a3, siri::dialogengine::TYPE_UNKNOWN);
  if (a2)
  {
    uint64_t v7 = *((void *)a2 + 63);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 64);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v7) {
      goto LABEL_19;
    }
    if (*((char *)this + 31) < 0) {
      std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else {
      std::string v11 = *(std::string *)((char *)this + 8);
    }
    uint64_t Parameter = siri::dialogengine::File::GetParameter(v7, (unsigned __int8 **)&v11);
    uint64_t v9 = Parameter;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v11.__r_.__value_.__l.__data_);
      if (!v9) {
        goto LABEL_19;
      }
    }
    else if (!Parameter)
    {
LABEL_19:
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      return;
    }
    if (*(char *)(v9 + 55) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 32), *(void *)(v9 + 40));
    }
    else {
      std::string __p = *(std::string *)(v9 + 32);
    }
    siri::dialogengine::GetArrayElementType((uint64_t)&__p, &v11);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(std::string *)a3 = v11;
    *((unsigned char *)&v11.__r_.__value_.__s + 23) = 0;
    v11.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_19;
  }
}

void sub_1C5D86A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::VariableArray::SemanticConceptsToVariableArray@<X0>(uint64_t this@<X0>, siri::dialogengine::Context *a2@<X1>, siri::dialogengine::FormatAttributes *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  long long v4 = *(uint64_t **)(this + 72);
  if (*(uint64_t **)(this + 80) != v4)
  {
    uint64_t v7 = (std::string *)((char *)a3 + 296);
    uint64_t v10 = (unsigned __int8 *)a3 + 320;
    uint64_t v9 = *v4;
    unint64_t v8 = (std::__shared_weak_count *)v4[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, siri::dialogengine::TYPE_STRING);
    (*(void (**)(std::string *__return_ptr, uint64_t, siri::dialogengine::Context *, std::string *))(*(void *)v9 + 56))(&v13, v9, a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v8)
      {
LABEL_7:
        memset(&v12, 0, sizeof(v12));
        if (!*((unsigned char *)a3 + 72))
        {
          siri::dialogengine::SemanticFeatureConstraint::FromString((uint64_t)a2, v10, &__p);
          std::vector<siri::dialogengine::SemanticFeatureConstraint>::__vdeallocate((void **)&v12.__r_.__value_.__l.__data_);
          std::string v12 = __p;
          memset(&__p, 0, sizeof(__p));
          v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
        }
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
        }
        else {
          std::string v14 = v13;
        }
        siri::dialogengine::ApplySemanticConcept(a2, v7, &v14, (long long **)&v12, &__p);
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v14.__r_.__value_.__l.__data_);
        }
        operator new();
      }
    }
    else if (!v8)
    {
      goto LABEL_7;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    goto LABEL_7;
  }
  return this;
}

void sub_1C5D86E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  a21 = &a46;
  std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a49);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  _Unwind_Resume(a1);
}

void std::vector<siri::dialogengine::SemanticFeatureConstraint>::__vdeallocate(void **a1)
{
  int v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v3);
      }
      while ((void *)v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void siri::dialogengine::VariableArray::IterateWithFormatPhrase(siri::dialogengine::VariableArray *this@<X0>, siri::dialogengine::Context *a2@<X1>, siri::dialogengine::FormatAttributes *a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  uint64_t v9 = (siri::dialogengine::File *)*((void *)a2 + 63);
  unint64_t v8 = (std::__shared_weak_count *)*((void *)a2 + 64);
  unsigned int v63 = v9;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      return;
    }
  }
  else if (!v9)
  {
    return;
  }
  uint64_t v60 = v8;
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else {
    std::string __str = *(std::string *)a3;
  }
  if (*((char *)a3 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v119, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
  }
  else {
    std::string v119 = *(std::string *)((unsigned char *)a3 + 2);
  }
  if (*((char *)a3 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v118, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else {
    std::string v118 = *(std::string *)((unsigned char *)a3 + 1);
  }
  std::string::size_type v64 = a4;
  memset(&v78, 0, sizeof(v78));
  std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(&v78, *((void *)v63 + 22), *((void *)v63 + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)v63 + 23) - *((void *)v63 + 22)) >> 4));
  std::string::size_type size = v78.__r_.__value_.__l.__size_;
  for (std::string::size_type i = v78.__r_.__value_.__r.__words[0]; i != size; i += 336)
  {
    if (*(char *)(i + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)(i + 8), *(void *)(i + 16));
    }
    else
    {
      long long v12 = *(_OWORD *)(i + 8);
      v101.__r_.__value_.__r.__words[2] = *(void *)(i + 24);
      *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v12;
    }
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = v101.__r_.__value_.__l.__size_;
    }
    std::string::size_type v14 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v14 = __str.__r_.__value_.__l.__size_;
    }
    if (v13 == v14)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&v101.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        long long v20 = (void *)v101.__r_.__value_.__r.__words[0];
        int v21 = memcmp(v101.__r_.__value_.__l.__data_, p_str, v101.__r_.__value_.__l.__size_);
        operator delete(v20);
        if (!v21) {
          goto LABEL_188;
        }
      }
      else
      {
        if (!*((unsigned char *)&v101.__r_.__value_.__s + 23)) {
          goto LABEL_188;
        }
        uint64_t v16 = 0;
        do
        {
          int v17 = v101.__r_.__value_.__s.__data_[v16];
          int v18 = p_str->__r_.__value_.__s.__data_[v16];
        }
        while (v17 == v18 && HIBYTE(v101.__r_.__value_.__r.__words[2]) - 1 != v16++);
        if (v17 == v18)
        {
LABEL_188:
          std::operator+<char>();
          unsigned int v58 = std::string::append(&v121, "' has already been defined as a variable");
          long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v101.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v101, 3u);
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v101.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v121.__r_.__value_.__l.__data_);
          }
          v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
          std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
          goto LABEL_193;
        }
      }
    }
    else if ((*((unsigned char *)&v101.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
  }
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  long long v110 = 0u;
  long long v109 = 0u;
  long long v108 = 0u;
  long long v107 = 0u;
  long long v106 = 0u;
  long long v105 = 0u;
  long long v104 = 0u;
  long long v103 = 0u;
  long long v102 = 0u;
  *(_OWORD *)&v101.__r_.__value_.__r.__words[1] = 0u;
  v113[1] = 0;
  v113[0] = 0;
  uint64_t v111 = 0;
  long long v112 = v113;
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F211EA48;
  long long v114 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  char v117 = 0;
  siri::dialogengine::ChunkPhrase::SetName((uint64_t)&v101, &v119);
  memset(v100, 0, sizeof(v100));
  long long v22 = v63;
  std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(v100, *((void *)v63 + 22), *((void *)v63 + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)v63 + 23) - *((void *)v63 + 22)) >> 4));
  std::map<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>::map[abi:ne180100]((uint64_t)v99, (const void ***)a2 + 83);
  if (*((void *)this + 10) != *((void *)this + 9))
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    unsigned int v62 = this;
    long long v61 = (char *)a3 + 392;
    do
    {
      siri::dialogengine::VariableArray::GetConcreteType(this, a2, (uint64_t)&__p);
      std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
      }
      if (!v25)
      {
        siri::dialogengine::GetArrayElementType((uint64_t)v61, &v78);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = v78;
      }
      uint64_t v26 = *((void *)this + 9);
      if (v24 >= (*((void *)this + 10) - v26) >> 4)
      {
        uint64_t v28 = 0;
        std::string v29 = 0;
      }
      else
      {
        uint64_t v27 = (uint64_t *)(v26 + v23);
        uint64_t v28 = *v27;
        std::string v29 = (std::__shared_weak_count *)v27[1];
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      std::string::operator=((std::string *)(v28 + 8), &__str);
      std::string::operator=((std::string *)(v28 + 32), &__p);
      *(unsigned char *)(v28 + 64) = 1;
      size_t v30 = strlen(siri::dialogengine::TYPE_STRING);
      size_t v31 = v30;
      size_t v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        size_t v34 = __p.__r_.__value_.__l.__size_;
        if (v30 != __p.__r_.__value_.__l.__size_)
        {
          char v35 = siri::dialogengine::TYPE_NUMBER;
          size_t v36 = strlen(siri::dialogengine::TYPE_NUMBER);
          goto LABEL_69;
        }
        if (v30 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        char v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (v30 != HIBYTE(__p.__r_.__value_.__r.__words[2]))
        {
          char v35 = siri::dialogengine::TYPE_NUMBER;
          size_t v36 = strlen(siri::dialogengine::TYPE_NUMBER);
LABEL_65:
          if (v36 != v32)
          {
            int v38 = siri::dialogengine::TYPE_BOOLEAN;
            size_t v39 = strlen(siri::dialogengine::TYPE_BOOLEAN);
LABEL_74:
            if (v39 != v32) {
              goto LABEL_90;
            }
            p_p = &__p;
            goto LABEL_89;
          }
          char v37 = &__p;
          size_t v34 = v32;
          goto LABEL_72;
        }
        char v33 = &__p;
      }
      if (!memcmp(v33, siri::dialogengine::TYPE_STRING, v31))
      {
        if (v41 && v29)
        {
          char v42 = 0;
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v96 = v41;
          unint64_t v97 = v29;
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          char v43 = v29;
        }
        else
        {
          char v43 = 0;
          uint64_t v96 = v41;
          unint64_t v97 = 0;
          char v42 = 1;
        }
        siri::dialogengine::Context::AddVariable((uint64_t)a2, &v96);
        goto LABEL_166;
      }
      char v35 = siri::dialogengine::TYPE_NUMBER;
      size_t v36 = strlen(siri::dialogengine::TYPE_NUMBER);
      if ((v32 & 0x80) == 0) {
        goto LABEL_65;
      }
      size_t v34 = __p.__r_.__value_.__l.__size_;
LABEL_69:
      if (v36 != v34)
      {
        int v38 = siri::dialogengine::TYPE_BOOLEAN;
        size_t v39 = strlen(siri::dialogengine::TYPE_BOOLEAN);
        goto LABEL_86;
      }
      if (v34 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      char v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_72:
      if (!memcmp(v37, v35, v34))
      {
        if (v44 && v29)
        {
          char v42 = 0;
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v94 = v44;
          long long v95 = v29;
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          char v43 = v29;
        }
        else
        {
          char v43 = 0;
          long long v94 = v44;
          long long v95 = 0;
          char v42 = 1;
        }
        siri::dialogengine::Context::AddVariable((uint64_t)a2, &v94);
        goto LABEL_166;
      }
      int v38 = siri::dialogengine::TYPE_BOOLEAN;
      size_t v39 = strlen(siri::dialogengine::TYPE_BOOLEAN);
      if ((v32 & 0x80) == 0) {
        goto LABEL_74;
      }
      size_t v34 = __p.__r_.__value_.__l.__size_;
LABEL_86:
      if (v39 != v34) {
        goto LABEL_90;
      }
      if (v34 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      size_t v32 = v34;
LABEL_89:
      if (memcmp(p_p, v38, v32))
      {
LABEL_90:
        unsigned int v46 = v45;
        if (v45 && v29)
        {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          char v43 = v29;
        }
        else
        {
          char v43 = 0;
        }
        if (v45[55] < 0) {
          std::string::__init_copy_ctor_external(&v121, *((const std::string::value_type **)v45 + 4), *((void *)v45 + 5));
        }
        else {
          std::string v121 = *(std::string *)(v45 + 32);
        }
        std::string::basic_string[abi:ne180100]<0>(&v77, "");
        std::string::basic_string[abi:ne180100]<0>(&v76, "");
        std::string::basic_string[abi:ne180100]<0>(&v75, "");
        std::string::basic_string[abi:ne180100]<0>(&v74, "");
        std::string::basic_string[abi:ne180100]<0>(&v73, "");
        std::string::basic_string[abi:ne180100]<0>(&v72, "");
        siri::dialogengine::Parameter::Parameter((uint64_t)&v78, &__str, &v121, &v77, &v76, &v75, &v74, &v73, &v72, 1, 0, 0, 1);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v72.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v121.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::File::AddParameter(v22, (const siri::dialogengine::Parameter *)&v78);
        std::string::basic_string[abi:ne180100]<0>(&v121, (char *)siri::dialogengine::TYPE_OBJECT);
        std::string::operator=((std::string *)(v46 + 32), &v121);
        if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v121.__r_.__value_.__l.__data_);
        }
        id v70 = v46;
        unsigned int v71 = v43;
        if (v43) {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        siri::dialogengine::Context::AddVariable((uint64_t)a2, &v70);
        if (v71) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v71);
        }
        v91[8] = &unk_1F21271E8;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v91[10]);
        siri::dialogengine::LineNumberBase::~LineNumberBase(v91);
        siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&v78.__r_.__value_.__l.__data_);
        if (!v43) {
          goto LABEL_119;
        }
        goto LABEL_118;
      }
      if (v57 && v29)
      {
        char v42 = 0;
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        long long v92 = v57;
        long long v93 = v29;
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        char v43 = v29;
      }
      else
      {
        char v43 = 0;
        long long v92 = v57;
        long long v93 = 0;
        char v42 = 1;
      }
      siri::dialogengine::Context::AddVariable((uint64_t)a2, &v92);
LABEL_166:
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      if (v42) {
        goto LABEL_119;
      }
LABEL_118:
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
LABEL_119:
      std::string::size_type v47 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v47 = v118.__r_.__value_.__l.__size_;
      }
      if (v47) {
        operator new();
      }
      v69[0] = 0;
      v69[1] = 0;
      uint64_t v68 = v69;
      siri::dialogengine::Context::SetRandomMatches(a2, &v68);
      std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(v69[0]);
      siri::dialogengine::ChunkPhrase::Expand((siri::dialogengine::ChunkPhrase *)&v101, a2, (uint64_t)&v78);
      std::string::size_type v49 = v64->__r_.__value_.__l.__size_;
      unint64_t v48 = v64->__r_.__value_.__r.__words[2];
      if (v49 >= v48)
      {
        unint64_t v52 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v49 - v64->__r_.__value_.__r.__words[0]) >> 3);
        unint64_t v53 = v52 + 1;
        if (v52 + 1 > 0x186186186186186) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v54 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v48 - v64->__r_.__value_.__r.__words[0]) >> 3);
        if (2 * v54 > v53) {
          unint64_t v53 = 2 * v54;
        }
        if (v54 >= 0xC30C30C30C30C3) {
          unint64_t v55 = 0x186186186186186;
        }
        else {
          unint64_t v55 = v53;
        }
        uint64_t v123 = &v64->__r_.__value_.__r.__words[2];
        if (v55) {
          unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v55);
        }
        else {
          uint64_t v56 = 0;
        }
        v121.__r_.__value_.__r.__words[0] = v55;
        v121.__r_.__value_.__l.__size_ = v55 + 168 * v52;
        v121.__r_.__value_.__r.__words[2] = v121.__r_.__value_.__l.__size_;
        unint64_t v122 = v55 + 168 * v56;
        uint64_t v51 = v64;
        siri::dialogengine::SpeakableString::SpeakableString((std::string *)v121.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v78);
        v121.__r_.__value_.__r.__words[2] += 168;
        std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(v64, &v121);
        std::string::size_type v50 = v64->__r_.__value_.__l.__size_;
        std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v121);
      }
      else
      {
        siri::dialogengine::SpeakableString::SpeakableString((std::string *)v64->__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v78);
        std::string::size_type v50 = v49 + 168;
        uint64_t v51 = v64;
        v64->__r_.__value_.__l.__size_ = v50;
      }
      v51->__r_.__value_.__l.__size_ = v50;
      if (v90 < 0) {
        operator delete(v89);
      }
      long long v22 = v63;
      if (v88 < 0) {
        operator delete(v87);
      }
      if (v86 < 0) {
        operator delete(v85);
      }
      if (v84 < 0) {
        operator delete(v83);
      }
      if (v82 < 0) {
        operator delete(v81);
      }
      if (v80 < 0) {
        operator delete(v79);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      v67[0] = v28;
      v67[1] = (uint64_t)v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::dialogengine::Context::RemoveVariable((uint64_t)a2, v67);
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      v66[0] = 0;
      v66[1] = 0;
      siri::dialogengine::Context::RemoveVariable((uint64_t)a2, v66);
      this = v62;
      siri::dialogengine::File::SetParameters(v63, v100);
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v24;
      v23 += 16;
    }
    while (v24 < (uint64_t)(*((void *)v62 + 10) - *((void *)v62 + 9)) >> 4);
  }
  std::map<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>::map[abi:ne180100]((uint64_t)v65, v99);
  siri::dialogengine::Context::SetRandomMatches(a2, v65);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy((void *)v65[1]);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(v99[1]);
  v78.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F211EA48;
  if (SHIBYTE(v116) < 0) {
    operator delete(*((void **)&v115 + 1));
  }
  if (SBYTE7(v115) < 0) {
    operator delete((void *)v114);
  }
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F21244A0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v113[0]);
  if (SHIBYTE(v111) < 0) {
    operator delete((void *)v110);
  }
  if (SHIBYTE(v109) < 0) {
    operator delete(*((void **)&v108 + 1));
  }
  if (SBYTE7(v108) < 0) {
    operator delete((void *)v107);
  }
  if (SHIBYTE(v106) < 0) {
    operator delete(*((void **)&v105 + 1));
  }
  if (SBYTE7(v105) < 0) {
    operator delete((void *)v104);
  }
  if (SHIBYTE(v103) < 0) {
    operator delete(*((void **)&v102 + 1));
  }
  if (SBYTE7(v102) < 0) {
    operator delete((void *)v101.__r_.__value_.__l.__size_);
  }
LABEL_193:
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v118.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v119.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
}

void sub_1C5D87E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  if (*(char *)(v55 - 121) < 0) {
    operator delete(*(void **)(v55 - 144));
  }
  STACK[0x340] = (unint64_t)&a55;
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x340]);
  if (*(char *)(v55 - 217) < 0) {
    operator delete(*(void **)(v55 - 240));
  }
  if (*(char *)(v55 - 185) < 0) {
    operator delete(*(void **)(v55 - 208));
  }
  if (*(char *)(v55 - 153) < 0) {
    operator delete(*(void **)(v55 - 176));
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  STACK[0x340] = a22;
  std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x340]);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (*(uint64_t ***)a1 == v3) {
        break;
      }
      uint64_t v7 = v3;
      if (v6)
      {
        do
        {
          uint64_t v8 = v6;
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v8 = (uint64_t)v7[2];
          BOOL v9 = *(void *)v8 == (void)v7;
          uint64_t v7 = (uint64_t **)v8;
        }
        while (v9);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v8 + 32), v5 + 4))
      {
        if (!*v3) {
          goto LABEL_9;
        }
LABEL_11:
        std::vector<std::string>::pointer v15 = (void *)v8;
        uint64_t v10 = (uint64_t **)(v8 + 8);
        goto LABEL_13;
      }
      uint64_t v10 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, &v15, v5 + 4);
LABEL_13:
      if (!*v10) {
        goto LABEL_14;
      }
LABEL_15:
      std::string v11 = (const void **)v5[1];
      if (v11)
      {
        do
        {
          long long v12 = (const void ***)v11;
          std::string v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          long long v12 = (const void ***)v5[2];
          BOOL v9 = *v12 == v5;
          uint64_t v5 = (const void **)v12;
        }
        while (!v9);
      }
      uint64_t v5 = (const void **)v12;
      if (v12 == v4) {
        return a1;
      }
    }
    uint64_t v8 = (uint64_t)v3;
    if (!v6)
    {
LABEL_9:
      std::vector<std::string>::pointer v15 = v3;
      uint64_t v10 = v3;
LABEL_14:
      std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<siri::dialogengine::Node>>> const&>((uint64_t)v14, a1, (uint64_t)(v5 + 4));
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v10, v14[0]);
      v14[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_1C5D882B8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Parameter::~Parameter(siri::dialogengine::Parameter *this)
{
  *((void *)this + 38) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 40));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this + 30);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)this);
}

{
  uint64_t vars8;

  *((void *)this + 38) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 40));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this + 30);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)this);
}

{
  uint64_t vars8;

  *((void *)this + 38) = &unk_1F21271E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 40));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this + 30);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)this);
  JUMPOUT(0x1C8796D70);
}

void std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void siri::dialogengine::ChunkPhrase::~ChunkPhrase(void **this)
{
  *this = &unk_1F211EA48;
  if (*((char *)this + 247) < 0) {
    operator delete(this[28]);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  *this = &unk_1F21244A0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(this[23]);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_1F211EA48;
  if (*((char *)this + 247) < 0) {
    operator delete(this[28]);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  *this = &unk_1F21244A0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(this[23]);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 1);
  JUMPOUT(0x1C8796D70);
}

void std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        siri::dialogengine::SpeakableString::~SpeakableString(v4 - 21);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(unint64_t a1)
{
  if (a1 >= 0x186186186186187) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(168 * a1);
}

std::string *std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(std::string *result, void *a2)
{
  uint64_t v3 = (std::string::__raw *)result;
  std::string::size_type v5 = result->__r_.__value_.__r.__words[0];
  std::string::size_type size = result->__r_.__value_.__l.__size_;
  uint64_t v6 = a2[1];
  for (uint64_t i = 168; ; i -= 168)
  {
    uint64_t v8 = v6 + i;
    if (size + i - 168 == v5) {
      break;
    }
    BOOL v9 = (const siri::dialogengine::SpeakableString *)(size + i - 336);
    float result = siri::dialogengine::SpeakableString::SpeakableString((std::string *)(v8 - 336), v9);
  }
  std::string::size_type v10 = v8 - 168;
  a2[1] = v10;
  std::string::size_type v11 = v3->__words[0];
  v3->__words[0] = v10;
  a2[1] = v11;
  std::string::size_type v12 = v3->__words[1];
  v3->__words[1] = a2[2];
  a2[2] = v12;
  std::string::size_type v13 = v3->__words[2];
  v3->__words[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = i - 168;
    siri::dialogengine::SpeakableString::~SpeakableString((void **)(i - 168));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<siri::dialogengine::Node>>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  uint64_t v7 = v6;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 32), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  v7[7] = 0;
  v7[8] = 0;
  v7[9] = 0;
  float result = std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(v7 + 7, *(void **)(a3 + 24), *(void **)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 4);
  *(unsigned char *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = 1;
  return result;
}

void sub_1C5D886FC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void *std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](result, a4);
    float result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::ConditionEntry>>,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C5D887E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void siri::dialogengine::VariableArray::IterateWithFormatMarkup(siri::dialogengine::VariableArray *this@<X0>, uint64_t **a2@<X1>, siri::dialogengine::FormatAttributes *a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  LOBYTE(v35) = 0;
  char v36 = 0;
  if (*((void *)this + 10) != *((void *)this + 9))
  {
    unint64_t v7 = 0;
    unint64_t v19 = (const void **)((char *)a3 + 368);
    long long v20 = (char *)a3 + 272;
    int v17 = (char *)a3 + 344;
    int v18 = (char *)a3 + 392;
    std::string::size_type v16 = (std::string::size_type)&a4->__r_.__value_.__r.__words[2];
    do
    {
      siri::dialogengine::FormatArrayItem(a2, (uint64_t)this, v7, (uint64_t)v20, v19, (uint64_t)v18, (uint64_t)&v28);
      siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)&v28, (siri::dialogengine *)a2, (uint64_t)v17, &__str);
      std::string::operator=(&v28, &__str);
      std::string::operator=(&v29, &v22);
      std::string::operator=(&v30, &v23);
      std::string::operator=(&v31, &v24);
      std::string::operator=(&v32, &v25);
      std::string::operator=(&v33, &v26);
      std::string::operator=(&v34, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      unint64_t size = a4->__r_.__value_.__l.__size_;
      unint64_t v8 = a4->__r_.__value_.__r.__words[2];
      if (size >= v8)
      {
        unint64_t v11 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(size - a4->__r_.__value_.__r.__words[0]) >> 3);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0x186186186186186) {
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v8 - a4->__r_.__value_.__r.__words[0]) >> 3);
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0xC30C30C30C30C3) {
          unint64_t v14 = 0x186186186186186;
        }
        else {
          unint64_t v14 = v12;
        }
        v22.__r_.__value_.__l.__size_ = v16;
        if (v14) {
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v14;
        __str.__r_.__value_.__l.__size_ = v14 + 168 * v11;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        v22.__r_.__value_.__r.__words[0] = v14 + 168 * v15;
        siri::dialogengine::SpeakableString::SpeakableString((std::string *)__str.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v28);
        __str.__r_.__value_.__r.__words[2] += 168;
        std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(a4, &__str);
        unint64_t v10 = a4->__r_.__value_.__l.__size_;
        std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        siri::dialogengine::SpeakableString::SpeakableString((std::string *)a4->__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v28);
        unint64_t v10 = size + 168;
        a4->__r_.__value_.__l.__size_ = v10;
      }
      a4->__r_.__value_.__l.__size_ = v10;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      ++v7;
    }
    while (v7 < (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 4);
    if (v36) {
      siri::dialogengine::ObjectProperty::~ObjectProperty(&v35);
    }
  }
}

void sub_1C5D88B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (LOBYTE(STACK[0x2A0])) {
    siri::dialogengine::ObjectProperty::~ObjectProperty(&a63);
  }
  std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableArray::Iterate(siri::dialogengine::VariableArray *this@<X0>, siri::dialogengine::Context *a2@<X1>, siri::dialogengine::FormatAttributes *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = 0;
  memset(v11, 0, sizeof(v11));
  std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v11, *((void **)this + 9), *((void **)this + 10), (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 4);
  uint64_t v8 = *((unsigned __int8 *)a3 + 319);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)a3 + 38);
  }
  if (v8)
  {
    siri::dialogengine::VariableArray::SemanticConceptsToVariableArray((uint64_t)this, a2, a3, &v10);
    siri::dialogengine::VariableArray::SetItems(this, (uint64_t)&v10);
    unint64_t v12 = &v10;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  }
  if (!*((unsigned char *)a3 + 72)
    || (siri::dialogengine::VariableArray::IterateWithFormatPhrase(this, a2, a3, &v10),
        std::vector<siri::dialogengine::SpeakableString>::__vdeallocate((void **)a4),
        long long v9 = *(_OWORD *)&v10.__r_.__value_.__l.__data_,
        *(std::string *)a4 = v10,
        memset(&v10, 0, sizeof(v10)),
        unint64_t v12 = &v10,
        std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12),
        (void)v9 == *((void *)&v9 + 1)))
  {
    siri::dialogengine::VariableArray::IterateWithFormatMarkup(this, (uint64_t **)a2, a3, &v10);
    std::vector<siri::dialogengine::SpeakableString>::__vdeallocate((void **)a4);
    *(std::string *)a4 = v10;
    memset(&v10, 0, sizeof(v10));
    unint64_t v12 = &v10;
    std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  }
  siri::dialogengine::VariableArray::SetItems(this, (uint64_t)v11);
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
}

void sub_1C5D88D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy((va_list)v4, va1);
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = result;
    float result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(a4);
    void *v6 = result;
    v6[1] = result;
    for (void v6[2] = &result[2 * v7]; a2 != a3; a2 += 2)
    {
      *float result = *a2;
      uint64_t v8 = a2[1];
      result[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      result += 2;
    }
    v6[1] = result;
  }
  return result;
}

void sub_1C5D88E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<siri::dialogengine::SpeakableString>::__vdeallocate(void **a1)
{
  uint64_t v1 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        siri::dialogengine::SpeakableString::~SpeakableString(v3 - 21);
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

BOOL siri::dialogengine::VariableArray::Contains(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::ValidateTargetType(&v14, a2, this, v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    memset(v13, 0, sizeof(v13));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v13, *((void **)this + 9), *((void **)this + 10), (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 4);
    long long v9 = (const void *)*a3;
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v14;
    }
    BOOL ArrayItemAny = siri::dialogengine::FindArrayItemAny(v13, v9, v8, (const void **)&__p.__r_.__value_.__l.__data_, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    uint64_t v15 = (void **)v13;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v15);
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    BOOL ArrayItemAny = 0;
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_20:
    }
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  return ArrayItemAny;
}

void sub_1C5D88FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::ValidateTargetType(std::string *a1, siri::dialogengine::Context *a2, siri::dialogengine::VariableArray *this, uint64_t a4)
{
  if (a2 && a4)
  {
    if (*(char *)(a4 + 55) < 0) {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(a4 + 32), *(void *)(a4 + 40));
    }
    else {
      std::string v20 = *(std::string *)(a4 + 32);
    }
    siri::dialogengine::VariableArray::GetConcreteType(this, a2, (uint64_t)__p);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v20.__r_.__value_.__l.__size_;
    }
    unint64_t v9 = v19;
    int v10 = (char)v19;
    if ((v19 & 0x80u) != 0) {
      unint64_t v9 = (unint64_t)__p[1];
    }
    if (size != v9)
    {
      BOOL v16 = 1;
      if (((char)v19 & 0x80000000) == 0) {
        goto LABEL_31;
      }
      goto LABEL_34;
    }
    if ((v19 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((*((unsigned char *)&v20.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      BOOL v16 = memcmp(v20.__r_.__value_.__l.__data_, v7, v20.__r_.__value_.__l.__size_) != 0;
    }
    else
    {
      if (!*((unsigned char *)&v20.__r_.__value_.__s + 23))
      {
        BOOL v16 = 0;
        if (((char)v19 & 0x80000000) == 0)
        {
LABEL_31:
          if (v16)
          {
LABEL_32:
            siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Target type and concrete type of dialog.Array do not match!", (const char *)v7);
            std::string::basic_string[abi:ne180100]<0>(a1, "");
LABEL_38:
            if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v20.__r_.__value_.__l.__data_);
            }
            return;
          }
LABEL_35:
          if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            *a1 = v20;
            return;
          }
          std::string::__init_copy_ctor_external(a1, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
          goto LABEL_38;
        }
LABEL_34:
        operator delete(__p[0]);
        if (v16) {
          goto LABEL_32;
        }
        goto LABEL_35;
      }
      uint64_t v11 = HIBYTE(v20.__r_.__value_.__r.__words[2]) - 1;
      unint64_t v12 = &v20;
      do
      {
        int v14 = v12->__r_.__value_.__s.__data_[0];
        unint64_t v12 = (std::string *)((char *)v12 + 1);
        int v13 = v14;
        int v15 = *(unsigned __int8 *)v7;
        uint64_t v7 = (void **)((char *)v7 + 1);
        BOOL v16 = v13 != v15;
      }
      while (v13 == v15 && v11-- != 0);
    }
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_34;
  }
  std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void sub_1C5D891D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::FindArrayItemAny(void *a1, const void *a2, std::__shared_weak_count *a3, const void **a4, int a5)
{
  size_t v10 = strlen(siri::dialogengine::TYPE_STRING);
  size_t v11 = v10;
  size_t v12 = *((unsigned __int8 *)a4 + 23);
  if (*((char *)a4 + 23) < 0)
  {
    size_t v16 = (size_t)a4[1];
    if (v10 != v16)
    {
      int v14 = siri::dialogengine::TYPE_NUMBER;
      size_t v15 = strlen(siri::dialogengine::TYPE_NUMBER);
      goto LABEL_19;
    }
    if (v10 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    int v13 = (const void **)*a4;
  }
  else
  {
    int v13 = a4;
    if (v11 != v12)
    {
      int v14 = siri::dialogengine::TYPE_NUMBER;
      size_t v15 = strlen(siri::dialogengine::TYPE_NUMBER);
      goto LABEL_9;
    }
  }
  if (!memcmp(v13, siri::dialogengine::TYPE_STRING, v11))
  {
    if (a2
    {
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v20[95] < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v20 + 9), *((void *)v20 + 10));
      }
      else {
        std::string __p = *(std::string *)(v20 + 3);
      }
    }
    else
    {
      a3 = 0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
    }
    uint64_t v23 = *a1;
    uint64_t v24 = a1[1];
    char v82 = a1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v85, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v85 = __p;
    }
    int v86 = a5;
    unsigned __int8 v87 = 1;
    if (v23 != v24)
    {
      do
      {
        std::string::size_type v47 = *(const void **)v23;
        unint64_t v48 = *(std::__shared_weak_count **)(v23 + 8);
        if (v48) {
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v47)
        {
          if (v49)
          {
            if (v48) {
              atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v49[95] < 0) {
              std::string::__init_copy_ctor_external(&v91, *((const std::string::value_type **)v49 + 9), *((void *)v49 + 10));
            }
            else {
              std::string v91 = *(std::string *)(v49 + 3);
            }
            switch(v86)
            {
              case 0:
                char v50 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
                if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v91.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v91.__r_.__value_.__l.__size_;
                }
                std::string::size_type v52 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
                if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v52 = v85.__r_.__value_.__l.__size_;
                }
                if (size != v52)
                {
                  BOOL v62 = 0;
                  if ((*((unsigned char *)&v91.__r_.__value_.__s + 23) & 0x80) == 0) {
                    goto LABEL_233;
                  }
                  goto LABEL_231;
                }
                if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unint64_t v53 = &v85;
                }
                else {
                  unint64_t v53 = (std::string *)v85.__r_.__value_.__r.__words[0];
                }
                if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                {
                  char v80 = (void *)v91.__r_.__value_.__r.__words[0];
                  BOOL v62 = memcmp(v91.__r_.__value_.__l.__data_, v53, v91.__r_.__value_.__l.__size_) == 0;
                  goto LABEL_232;
                }
                if (*((unsigned char *)&v91.__r_.__value_.__s + 23))
                {
                  uint64_t v54 = HIBYTE(v91.__r_.__value_.__r.__words[2]) - 1;
                  uint64_t v55 = &v91;
                  do
                  {
                    int v57 = v55->__r_.__value_.__s.__data_[0];
                    uint64_t v55 = (std::string *)((char *)v55 + 1);
                    int v56 = v57;
                    int v59 = v53->__r_.__value_.__s.__data_[0];
                    unint64_t v53 = (std::string *)((char *)v53 + 1);
                    int v58 = v59;
                    BOOL v61 = v54-- != 0;
                    BOOL v62 = v56 == v58;
                  }
                  while (v56 == v58 && v61);
                  goto LABEL_230;
                }
                if (v48)
                {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v48);
                  std::__shared_weak_count::__release_shared[abi:ne180100](v48);
                }
                goto LABEL_241;
              case 1:
                char v66 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
                if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v67 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v67 = v85.__r_.__value_.__l.__size_;
                }
                if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v68 = &v85;
                }
                else {
                  uint64_t v68 = (std::string *)v85.__r_.__value_.__r.__words[0];
                }
                if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v69 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v69 = v91.__r_.__value_.__l.__size_;
                }
                if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  id v70 = &v91;
                }
                else {
                  id v70 = (std::string *)v91.__r_.__value_.__r.__words[0];
                }
                goto LABEL_192;
              case 2:
                char v66 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
                if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v67 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v67 = v91.__r_.__value_.__l.__size_;
                }
                if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v68 = &v91;
                }
                else {
                  uint64_t v68 = (std::string *)v91.__r_.__value_.__r.__words[0];
                }
                if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v69 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v69 = v85.__r_.__value_.__l.__size_;
                }
                if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  id v70 = &v85;
                }
                else {
                  id v70 = (std::string *)v85.__r_.__value_.__r.__words[0];
                }
LABEL_192:
                if (v69 >= v67) {
                  size_t v72 = v67;
                }
                else {
                  size_t v72 = v69;
                }
                int v73 = memcmp(v68, v70, v72);
                if (v73) {
                  BOOL v62 = v73 < 0;
                }
                else {
                  BOOL v62 = v67 < v69;
                }
                if (v66 < 0) {
                  goto LABEL_231;
                }
                goto LABEL_233;
              case 3:
                char v50 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
                if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v74 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v74 = v91.__r_.__value_.__l.__size_;
                }
                if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string v75 = &v91;
                }
                else {
                  std::string v75 = (std::string *)v91.__r_.__value_.__r.__words[0];
                }
                if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v76 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v76 = v85.__r_.__value_.__l.__size_;
                }
                if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string v77 = &v85;
                }
                else {
                  std::string v77 = (std::string *)v85.__r_.__value_.__r.__words[0];
                }
                goto LABEL_224;
              case 4:
                char v50 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
                if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v74 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v74 = v85.__r_.__value_.__l.__size_;
                }
                if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string v75 = &v85;
                }
                else {
                  std::string v75 = (std::string *)v85.__r_.__value_.__r.__words[0];
                }
                if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v76 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v76 = v91.__r_.__value_.__l.__size_;
                }
                if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string v77 = &v91;
                }
                else {
                  std::string v77 = (std::string *)v91.__r_.__value_.__r.__words[0];
                }
LABEL_224:
                if (v76 >= v74) {
                  size_t v78 = v74;
                }
                else {
                  size_t v78 = v76;
                }
                int v79 = memcmp(v75, v77, v78);
                if (v79) {
                  BOOL v62 = v79 >= 0;
                }
                else {
                  BOOL v62 = v74 >= v76;
                }
LABEL_230:
                if (v50 < 0) {
                  goto LABEL_231;
                }
                goto LABEL_233;
              case 7:
                std::string::size_type v65 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
                if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v65 = v91.__r_.__value_.__l.__size_;
                }
                BOOL v62 = v65 == 0;
                if ((*((unsigned char *)&v91.__r_.__value_.__s + 23) & 0x80) != 0) {
                  goto LABEL_231;
                }
                goto LABEL_233;
              case 8:
                std::string::size_type v71 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
                if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v71 = v91.__r_.__value_.__l.__size_;
                }
                BOOL v62 = v71 != 0;
                if ((*((unsigned char *)&v91.__r_.__value_.__s + 23) & 0x80) != 0) {
                  goto LABEL_231;
                }
                goto LABEL_233;
              default:
                siri::dialogengine::ArrayComparatorToString(&v89, v86, v87);
                unsigned int v63 = std::string::insert(&v89, 0, "Unkown comparator type: ");
                long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
                v90.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v64;
                v63->__r_.__value_.__l.__size_ = 0;
                v63->__r_.__value_.__r.__words[2] = 0;
                v63->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Log::Debug((siri::dialogengine *)&v90);
                if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v90.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v89.__r_.__value_.__l.__data_);
                }
                BOOL v62 = 0;
                if ((*((unsigned char *)&v91.__r_.__value_.__s + 23) & 0x80) != 0)
                {
LABEL_231:
                  char v80 = (void *)v91.__r_.__value_.__r.__words[0];
LABEL_232:
                  operator delete(v80);
                }
LABEL_233:
                if (v48)
                {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v48);
                  std::__shared_weak_count::__release_shared[abi:ne180100](v48);
                }
                if (!v62) {
                  goto LABEL_236;
                }
                goto LABEL_241;
            }
          }
        }
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
LABEL_236:
        v23 += 16;
      }
      while (v23 != v24);
      uint64_t v23 = v24;
    }
LABEL_241:
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    BOOL v25 = v23 != v82[1];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_250;
  }
  int v14 = siri::dialogengine::TYPE_NUMBER;
  size_t v15 = strlen(siri::dialogengine::TYPE_NUMBER);
  if ((v12 & 0x80) == 0)
  {
LABEL_9:
    size_t v16 = v12;
    int v17 = a4;
    if (v15 != v12)
    {
      int v18 = siri::dialogengine::TYPE_BOOLEAN;
      size_t v19 = strlen(siri::dialogengine::TYPE_BOOLEAN);
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  size_t v16 = (size_t)a4[1];
LABEL_19:
  if (v15 != v16)
  {
    int v18 = siri::dialogengine::TYPE_BOOLEAN;
    size_t v19 = strlen(siri::dialogengine::TYPE_BOOLEAN);
    goto LABEL_36;
  }
  if (v16 == -1) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  int v17 = *a4;
LABEL_22:
  if (memcmp(v17, v14, v16))
  {
    int v18 = siri::dialogengine::TYPE_BOOLEAN;
    size_t v19 = strlen(siri::dialogengine::TYPE_BOOLEAN);
    if ((v12 & 0x80) == 0)
    {
LABEL_24:
      size_t v16 = v12;
      if (v19 != v12) {
        return 0;
      }
LABEL_39:
      if (memcmp(a4, v18, v16)) {
        return 0;
      }
      if (a2
      {
        if (a3) {
          atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v84 = a3;
        BOOL v27 = v26[66] != 0;
      }
      else
      {
        char v84 = 0;
        BOOL v27 = 0;
      }
      uint64_t v29 = *a1;
      uint64_t v38 = a1[1];
      uint64_t v83 = a1;
      if (*a1 == v38)
      {
        uint64_t v46 = *a1;
      }
      else
      {
        do
        {
          size_t v39 = *(const void **)v29;
          std::vector<std::string> v40 = *(std::__shared_weak_count **)(v29 + 8);
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v39)
          {
            if (v41)
            {
              if (v40) {
                atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v42 = v41[66];
              char v43 = v41[66] != 0;
              switch(a5)
              {
                case 0:
                  char v43 = v27 ^ (v42 != 0) ^ 1;
                  if (!v40) {
                    goto LABEL_116;
                  }
                  goto LABEL_115;
                case 1:
                  if (v41[66]) {
                    char v43 = !v27;
                  }
                  else {
                    char v43 = 0;
                  }
                  if (!v40) {
                    goto LABEL_116;
                  }
                  goto LABEL_115;
                case 2:
                  if (v41[66]) {
                    char v43 = 0;
                  }
                  else {
                    char v43 = v27;
                  }
                  if (!v40) {
                    goto LABEL_116;
                  }
                  goto LABEL_115;
                case 3:
                  if (v41[66]) {
                    char v43 = 1;
                  }
                  else {
                    char v43 = !v27;
                  }
                  if (!v40) {
                    goto LABEL_116;
                  }
                  goto LABEL_115;
                case 4:
                  if (v41[66]) {
                    char v43 = v27;
                  }
                  else {
                    char v43 = 1;
                  }
                  goto LABEL_114;
                case 5:
LABEL_114:
                  if (v40) {
                    goto LABEL_115;
                  }
                  goto LABEL_116;
                case 6:
                  char v43 = v42 == 0;
                  if (!v40) {
                    goto LABEL_116;
                  }
LABEL_115:
                  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
                  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
LABEL_116:
                  if ((v43 & 1) == 0) {
                    goto LABEL_117;
                  }
                  goto LABEL_245;
                default:
                  siri::dialogengine::ArrayComparatorToString(&v90, a5, 1);
                  std::vector<std::string> v44 = std::string::insert(&v90, 0, "Unkown comparator type: ");
                  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
                  v91.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v45;
                  v44->__r_.__value_.__l.__size_ = 0;
                  v44->__r_.__value_.__r.__words[2] = 0;
                  v44->__r_.__value_.__r.__words[0] = 0;
                  siri::dialogengine::Log::Debug((siri::dialogengine *)&v91);
                  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v91.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v90.__r_.__value_.__l.__data_);
                  }
                  if (!v40) {
                    goto LABEL_117;
                  }
                  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
                  goto LABEL_89;
              }
            }
          }
          if (v40) {
LABEL_89:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v40);
LABEL_117:
          v29 += 16;
        }
        while (v29 != v38);
        uint64_t v29 = v38;
LABEL_245:
        uint64_t v46 = v29;
        uint64_t v29 = v83[1];
      }
      goto LABEL_248;
    }
    size_t v16 = (size_t)a4[1];
LABEL_36:
    if (v19 != v16) {
      return 0;
    }
    if (v16 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    a4 = (const void **)*a4;
    goto LABEL_39;
  }
  double v21 = 0.0;
  if (a2
  {
    if (a3) {
      atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v21 = v22[9];
  }
  else
  {
    a3 = 0;
  }
  uint64_t v29 = *a1;
  uint64_t v28 = a1[1];
  if (*a1 != v28)
  {
    std::string v30 = a1;
    char v84 = a3;
    do
    {
      std::string v31 = *(const void **)v29;
      std::string v32 = *(std::__shared_weak_count **)(v29 + 8);
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v31)
      {
        if (v33)
        {
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          double v34 = v33[9];
          switch(a5)
          {
            case 0:
              BOOL v35 = v34 == v21;
              if (!v32) {
                goto LABEL_62;
              }
              goto LABEL_61;
            case 1:
              BOOL v35 = v34 > v21;
              if (!v32) {
                goto LABEL_62;
              }
              goto LABEL_61;
            case 2:
              BOOL v35 = v34 < v21;
              if (!v32) {
                goto LABEL_62;
              }
              goto LABEL_61;
            case 3:
              BOOL v35 = v34 >= v21;
              if (!v32) {
                goto LABEL_62;
              }
              goto LABEL_61;
            case 4:
              BOOL v35 = v34 <= v21;
              if (v32)
              {
LABEL_61:
                std::__shared_weak_count::__release_shared[abi:ne180100](v32);
                std::__shared_weak_count::__release_shared[abi:ne180100](v32);
              }
LABEL_62:
              if (!v35) {
                goto LABEL_63;
              }
              goto LABEL_121;
            default:
              siri::dialogengine::ArrayComparatorToString(&v90, a5, 1);
              char v36 = std::string::insert(&v90, 0, "Unkown comparator type: ");
              long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
              v91.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v37;
              v36->__r_.__value_.__l.__size_ = 0;
              v36->__r_.__value_.__r.__words[2] = 0;
              v36->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Log::Debug((siri::dialogengine *)&v91);
              if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v91.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v90.__r_.__value_.__l.__data_);
              }
              if (!v32) {
                goto LABEL_63;
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v32);
              goto LABEL_59;
          }
        }
      }
      if (v32) {
LABEL_59:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
LABEL_63:
      v29 += 16;
    }
    while (v29 != v28);
    uint64_t v29 = v28;
LABEL_121:
    uint64_t v46 = v29;
    uint64_t v29 = v30[1];
LABEL_248:
    a3 = v84;
    goto LABEL_249;
  }
  uint64_t v46 = *a1;
LABEL_249:
  BOOL v25 = v46 != v29;
LABEL_250:
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  return v25;
}

void sub_1C5D89D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  _Unwind_Resume(exception_object);
}

void *siri::dialogengine::ArrayComparatorToString(void *a1, int a2, int a3)
{
  switch(a2)
  {
    case 0:
      uint64_t v3 = "all_eq";
      uint64_t v4 = "contains";
      goto LABEL_13;
    case 1:
      uint64_t v3 = "all_gt";
      uint64_t v4 = "any_gt";
      goto LABEL_13;
    case 2:
      uint64_t v3 = "all_lt";
      uint64_t v4 = "any_lt";
      goto LABEL_13;
    case 3:
      uint64_t v3 = "all_gte";
      uint64_t v4 = "any_gte";
      goto LABEL_13;
    case 4:
      uint64_t v3 = "all_lte";
      uint64_t v4 = "any_lte";
      goto LABEL_13;
    case 5:
      uint64_t v3 = "all_set";
      uint64_t v4 = "any_set";
      goto LABEL_13;
    case 6:
      uint64_t v3 = "all_unset";
      uint64_t v4 = "any_unset";
      goto LABEL_13;
    case 7:
      uint64_t v3 = "all_empty";
      uint64_t v4 = "any_empty";
      goto LABEL_13;
    case 8:
      uint64_t v3 = "all_nonempty";
      uint64_t v4 = "any_nonempty";
LABEL_13:
      if (a3) {
        uint64_t v5 = (char *)v4;
      }
      else {
        uint64_t v5 = (char *)v3;
      }
      break;
    default:
      uint64_t v5 = "unknown";
      break;
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, v5);
}

uint64_t siri::dialogengine::VariableArray::AllEqual(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::ValidateTargetType(&v14, a2, this, v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    memset(v13, 0, sizeof(v13));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v13, *((void **)this + 9), *((void **)this + 10), (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 4);
    unint64_t v9 = (const void *)*a3;
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v14;
    }
    uint64_t ArrayItemAll = siri::dialogengine::FindArrayItemAll(v13, v9, v8, (const void **)&__p.__r_.__value_.__l.__data_, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    size_t v15 = (void **)v13;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v15);
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t ArrayItemAll = 0;
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_20:
    }
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  return ArrayItemAll;
}

void sub_1C5D8A0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::FindArrayItemAll(uint64_t *a1, const void *a2, std::__shared_weak_count *a3, const void **a4, int a5)
{
  size_t v10 = strlen(siri::dialogengine::TYPE_STRING);
  size_t v11 = v10;
  size_t v12 = *((unsigned __int8 *)a4 + 23);
  if (*((char *)a4 + 23) < 0)
  {
    size_t v16 = (size_t)a4[1];
    if (v10 != v16)
    {
      std::string v14 = siri::dialogengine::TYPE_NUMBER;
      size_t v15 = strlen(siri::dialogengine::TYPE_NUMBER);
      goto LABEL_19;
    }
    if (v10 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    int v13 = (const void **)*a4;
  }
  else
  {
    int v13 = a4;
    if (v11 != v12)
    {
      std::string v14 = siri::dialogengine::TYPE_NUMBER;
      size_t v15 = strlen(siri::dialogengine::TYPE_NUMBER);
      goto LABEL_9;
    }
  }
  if (!memcmp(v13, siri::dialogengine::TYPE_STRING, v11))
  {
    if (a2
    {
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v20[95] < 0) {
        std::string::__init_copy_ctor_external(&v83, *((const std::string::value_type **)v20 + 9), *((void *)v20 + 10));
      }
      else {
        std::string v83 = *(std::string *)(v20 + 3);
      }
    }
    else
    {
      a3 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v83, "");
    }
    uint64_t v23 = *a1;
    uint64_t v24 = a1[1];
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v80, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
    }
    else {
      std::string v80 = v83;
    }
    int v81 = a5;
    unsigned __int8 v82 = 0;
    if (v23 == v24)
    {
      uint64_t v25 = 1;
    }
    else
    {
      while (2)
      {
        std::vector<std::string> v41 = *(const void **)v23;
        uint64_t v25 = *(void *)(v23 + 8);
        if (v25) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
        }
        if (v41
        {
          if (v25) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
          }
          if (v42[95] < 0) {
            std::string::__init_copy_ctor_external(&v86, *((const std::string::value_type **)v42 + 9), *((void *)v42 + 10));
          }
          else {
            std::string v86 = *(std::string *)(v42 + 3);
          }
          switch(v81)
          {
            case 0:
              char v43 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
              if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v86.__r_.__value_.__l.__size_;
              }
              std::string::size_type v45 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
              if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v45 = v80.__r_.__value_.__l.__size_;
              }
              if (size != v45)
              {
                BOOL v55 = 0;
                if ((*((unsigned char *)&v86.__r_.__value_.__s + 23) & 0x80) == 0) {
                  goto LABEL_220;
                }
                goto LABEL_218;
              }
              if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v46 = &v80;
              }
              else {
                uint64_t v46 = (std::string *)v80.__r_.__value_.__r.__words[0];
              }
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
              {
                int v73 = (void *)v86.__r_.__value_.__r.__words[0];
                BOOL v55 = memcmp(v86.__r_.__value_.__l.__data_, v46, v86.__r_.__value_.__l.__size_) == 0;
                goto LABEL_219;
              }
              if (*((unsigned char *)&v86.__r_.__value_.__s + 23))
              {
                uint64_t v47 = HIBYTE(v86.__r_.__value_.__r.__words[2]) - 1;
                unint64_t v48 = &v86;
                do
                {
                  int v50 = v48->__r_.__value_.__s.__data_[0];
                  unint64_t v48 = (std::string *)((char *)v48 + 1);
                  int v49 = v50;
                  int v52 = v46->__r_.__value_.__s.__data_[0];
                  uint64_t v46 = (std::string *)((char *)v46 + 1);
                  int v51 = v52;
                  BOOL v54 = v47-- != 0;
                  BOOL v55 = v49 == v51;
                }
                while (v49 == v51 && v54);
                goto LABEL_217;
              }
              if (v25)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v25);
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v25);
              }
              goto LABEL_223;
            case 1:
              char v59 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
              if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v60 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v60 = v80.__r_.__value_.__l.__size_;
              }
              if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                BOOL v61 = &v80;
              }
              else {
                BOOL v61 = (std::string *)v80.__r_.__value_.__r.__words[0];
              }
              if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v62 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v62 = v86.__r_.__value_.__l.__size_;
              }
              if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unsigned int v63 = &v86;
              }
              else {
                unsigned int v63 = (std::string *)v86.__r_.__value_.__r.__words[0];
              }
              goto LABEL_179;
            case 2:
              char v59 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
              if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v60 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v60 = v86.__r_.__value_.__l.__size_;
              }
              if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                BOOL v61 = &v86;
              }
              else {
                BOOL v61 = (std::string *)v86.__r_.__value_.__r.__words[0];
              }
              if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v62 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v62 = v80.__r_.__value_.__l.__size_;
              }
              if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unsigned int v63 = &v80;
              }
              else {
                unsigned int v63 = (std::string *)v80.__r_.__value_.__r.__words[0];
              }
LABEL_179:
              if (v62 >= v60) {
                size_t v65 = v60;
              }
              else {
                size_t v65 = v62;
              }
              int v66 = memcmp(v61, v63, v65);
              if (v66) {
                BOOL v55 = v66 < 0;
              }
              else {
                BOOL v55 = v60 < v62;
              }
              if (v59 < 0) {
                goto LABEL_218;
              }
              goto LABEL_220;
            case 3:
              char v43 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
              if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v67 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v67 = v86.__r_.__value_.__l.__size_;
              }
              if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v68 = &v86;
              }
              else {
                uint64_t v68 = (std::string *)v86.__r_.__value_.__r.__words[0];
              }
              if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v69 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v69 = v80.__r_.__value_.__l.__size_;
              }
              if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                id v70 = &v80;
              }
              else {
                id v70 = (std::string *)v80.__r_.__value_.__r.__words[0];
              }
              goto LABEL_211;
            case 4:
              char v43 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
              if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v67 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v67 = v80.__r_.__value_.__l.__size_;
              }
              if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v68 = &v80;
              }
              else {
                uint64_t v68 = (std::string *)v80.__r_.__value_.__r.__words[0];
              }
              if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v69 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v69 = v86.__r_.__value_.__l.__size_;
              }
              if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                id v70 = &v86;
              }
              else {
                id v70 = (std::string *)v86.__r_.__value_.__r.__words[0];
              }
LABEL_211:
              if (v69 >= v67) {
                size_t v71 = v67;
              }
              else {
                size_t v71 = v69;
              }
              int v72 = memcmp(v68, v70, v71);
              if (v72) {
                BOOL v55 = v72 >= 0;
              }
              else {
                BOOL v55 = v67 >= v69;
              }
LABEL_217:
              if (v43 < 0) {
                goto LABEL_218;
              }
              goto LABEL_220;
            case 7:
              std::string::size_type v58 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
              if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v58 = v86.__r_.__value_.__l.__size_;
              }
              BOOL v55 = v58 == 0;
              if ((*((unsigned char *)&v86.__r_.__value_.__s + 23) & 0x80) != 0) {
                goto LABEL_218;
              }
              goto LABEL_220;
            case 8:
              std::string::size_type v64 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
              if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v64 = v86.__r_.__value_.__l.__size_;
              }
              BOOL v55 = v64 != 0;
              if ((*((unsigned char *)&v86.__r_.__value_.__s + 23) & 0x80) != 0) {
                goto LABEL_218;
              }
              goto LABEL_220;
            default:
              siri::dialogengine::ArrayComparatorToString(&v84, v81, v82);
              int v56 = std::string::insert(&v84, 0, "Unkown comparator type: ");
              long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v57;
              v56->__r_.__value_.__l.__size_ = 0;
              v56->__r_.__value_.__r.__words[2] = 0;
              v56->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v84.__r_.__value_.__l.__data_);
              }
              BOOL v55 = 0;
              if ((*((unsigned char *)&v86.__r_.__value_.__s + 23) & 0x80) != 0)
              {
LABEL_218:
                int v73 = (void *)v86.__r_.__value_.__r.__words[0];
LABEL_219:
                operator delete(v73);
              }
LABEL_220:
              if (v25)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v25);
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v25);
              }
              if (!v55) {
                goto LABEL_233;
              }
LABEL_223:
              v23 += 16;
              if (v23 != v24) {
                continue;
              }
              uint64_t v25 = 1;
              break;
          }
        }
        else if (v25)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v25);
LABEL_233:
          uint64_t v25 = 0;
        }
        break;
      }
    }
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    if (a3) {
      goto LABEL_239;
    }
    return v25;
  }
  std::string v14 = siri::dialogengine::TYPE_NUMBER;
  size_t v15 = strlen(siri::dialogengine::TYPE_NUMBER);
  if ((v12 & 0x80) == 0)
  {
LABEL_9:
    size_t v16 = v12;
    int v17 = a4;
    if (v15 != v12)
    {
      int v18 = siri::dialogengine::TYPE_BOOLEAN;
      size_t v19 = strlen(siri::dialogengine::TYPE_BOOLEAN);
LABEL_24:
      size_t v16 = v12;
      if (v19 != v12) {
        return 0;
      }
      goto LABEL_39;
    }
    goto LABEL_22;
  }
  size_t v16 = (size_t)a4[1];
LABEL_19:
  if (v15 != v16)
  {
    int v18 = siri::dialogengine::TYPE_BOOLEAN;
    size_t v19 = strlen(siri::dialogengine::TYPE_BOOLEAN);
    goto LABEL_36;
  }
  if (v16 == -1) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  int v17 = *a4;
LABEL_22:
  if (!memcmp(v17, v14, v16))
  {
    double v21 = 0.0;
    if (a2
    {
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v21 = v22[9];
    }
    else
    {
      a3 = 0;
    }
    uint64_t v28 = *a1;
    uint64_t v29 = a1[1];
    if (*a1 != v29)
    {
      while (2)
      {
        std::string v30 = *(const void **)v28;
        std::string v31 = *(std::__shared_weak_count **)(v28 + 8);
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v30)
        {
          if (v32)
          {
            if (v31) {
              atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            double v33 = v32[9];
            switch(a5)
            {
              case 0:
                BOOL v34 = v33 == v21;
                if (!v31) {
                  goto LABEL_59;
                }
                goto LABEL_58;
              case 1:
                BOOL v34 = v33 > v21;
                if (!v31) {
                  goto LABEL_59;
                }
                goto LABEL_58;
              case 2:
                BOOL v34 = v33 < v21;
                if (!v31) {
                  goto LABEL_59;
                }
                goto LABEL_58;
              case 3:
                BOOL v34 = v33 >= v21;
                if (!v31) {
                  goto LABEL_59;
                }
                goto LABEL_58;
              case 4:
                BOOL v34 = v33 <= v21;
                if (v31)
                {
LABEL_58:
                  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
                  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
                }
LABEL_59:
                if (!v34) {
                  goto LABEL_109;
                }
                v28 += 16;
                if (v28 == v29) {
                  goto LABEL_105;
                }
                continue;
              default:
                siri::dialogengine::ArrayComparatorToString(&__p, a5, 0);
                std::string v75 = std::string::insert(&__p, 0, "Unkown comparator type: ");
                long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
                v86.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v76;
                v75->__r_.__value_.__l.__size_ = 0;
                v75->__r_.__value_.__r.__words[2] = 0;
                v75->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Log::Debug((siri::dialogengine *)&v86);
LABEL_246:
                if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v86.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (!v31) {
                  goto LABEL_109;
                }
                std::__shared_weak_count::__release_shared[abi:ne180100](v31);
                goto LABEL_108;
            }
          }
        }
        break;
      }
LABEL_107:
      if (v31) {
LABEL_108:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
LABEL_109:
      uint64_t v25 = 0;
      if (a3) {
        goto LABEL_239;
      }
      return v25;
    }
    goto LABEL_105;
  }
  int v18 = siri::dialogengine::TYPE_BOOLEAN;
  size_t v19 = strlen(siri::dialogengine::TYPE_BOOLEAN);
  if ((v12 & 0x80) == 0) {
    goto LABEL_24;
  }
  size_t v16 = (size_t)a4[1];
LABEL_36:
  if (v19 != v16) {
    return 0;
  }
  if (v16 == -1) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  a4 = (const void **)*a4;
LABEL_39:
  if (memcmp(a4, v18, v16)) {
    return 0;
  }
  if (a2
  {
    if (a3) {
      atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v27 = v26[66] != 0;
  }
  else
  {
    a3 = 0;
    BOOL v27 = 0;
  }
  uint64_t v35 = *a1;
  uint64_t v36 = a1[1];
  if (*a1 == v36)
  {
LABEL_105:
    uint64_t v25 = 1;
    if (a3) {
      goto LABEL_239;
    }
    return v25;
  }
  int v79 = a3;
  while (2)
  {
    long long v37 = *(const void **)v35;
    std::string v31 = *(std::__shared_weak_count **)(v35 + 8);
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v37) {
      goto LABEL_107;
    }
    if (!v38) {
      goto LABEL_107;
    }
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v39 = v38[66];
    char v40 = v38[66] != 0;
    switch(a5)
    {
      case 0:
        char v40 = v27 ^ (v39 != 0) ^ 1;
        if (!v31) {
          goto LABEL_84;
        }
        goto LABEL_100;
      case 1:
        if (v38[66]) {
          char v40 = !v27;
        }
        else {
          char v40 = 0;
        }
        if (!v31) {
          goto LABEL_84;
        }
        goto LABEL_100;
      case 2:
        if (v38[66]) {
          char v40 = 0;
        }
        else {
          char v40 = v27;
        }
        if (!v31) {
          goto LABEL_84;
        }
        goto LABEL_100;
      case 3:
        if (v38[66]) {
          char v40 = 1;
        }
        else {
          char v40 = !v27;
        }
        if (!v31) {
          goto LABEL_84;
        }
        goto LABEL_100;
      case 4:
        if (v38[66]) {
          char v40 = v27;
        }
        else {
          char v40 = 1;
        }
        goto LABEL_99;
      case 5:
LABEL_99:
        if (v31) {
          goto LABEL_100;
        }
        goto LABEL_84;
      case 6:
        char v40 = v39 == 0;
        if (!v31)
        {
LABEL_84:
          if ((v40 & 1) == 0) {
            goto LABEL_242;
          }
          goto LABEL_101;
        }
LABEL_100:
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        if (v40)
        {
LABEL_101:
          v35 += 16;
          a3 = v79;
          if (v35 == v36) {
            goto LABEL_105;
          }
          continue;
        }
LABEL_242:
        uint64_t v25 = 0;
        a3 = v79;
        if (!v79) {
          return v25;
        }
LABEL_239:
        std::__shared_weak_count::__release_shared[abi:ne180100](a3);
        return v25;
      default:
        siri::dialogengine::ArrayComparatorToString(&__p, a5, 0);
        a3 = v79;
        std::string v77 = std::string::insert(&__p, 0, "Unkown comparator type: ");
        long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v86.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::Debug((siri::dialogengine *)&v86);
        goto LABEL_246;
    }
  }
}

void sub_1C5D8AC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (v42)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::VariableArray::AllGreaterThan(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::ValidateTargetType(&v14, a2, this, v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    memset(v13, 0, sizeof(v13));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v13, *((void **)this + 9), *((void **)this + 10), (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 4);
    unint64_t v9 = (const void *)*a3;
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v14;
    }
    uint64_t ArrayItemAll = siri::dialogengine::FindArrayItemAll(v13, v9, v8, (const void **)&__p.__r_.__value_.__l.__data_, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    size_t v15 = (void **)v13;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v15);
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t ArrayItemAll = 0;
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_20:
    }
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  return ArrayItemAll;
}

void sub_1C5D8AEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableArray::AllLessThan(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::ValidateTargetType(&v14, a2, this, v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    memset(v13, 0, sizeof(v13));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v13, *((void **)this + 9), *((void **)this + 10), (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 4);
    unint64_t v9 = (const void *)*a3;
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v14;
    }
    uint64_t ArrayItemAll = siri::dialogengine::FindArrayItemAll(v13, v9, v8, (const void **)&__p.__r_.__value_.__l.__data_, 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    size_t v15 = (void **)v13;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v15);
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t ArrayItemAll = 0;
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_20:
    }
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  return ArrayItemAll;
}

void sub_1C5D8B088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableArray::AllGreaterThanOrEqual(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::ValidateTargetType(&v14, a2, this, v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    memset(v13, 0, sizeof(v13));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v13, *((void **)this + 9), *((void **)this + 10), (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 4);
    unint64_t v9 = (const void *)*a3;
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v14;
    }
    uint64_t ArrayItemAll = siri::dialogengine::FindArrayItemAll(v13, v9, v8, (const void **)&__p.__r_.__value_.__l.__data_, 3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    size_t v15 = (void **)v13;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v15);
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t ArrayItemAll = 0;
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_20:
    }
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  return ArrayItemAll;
}

void sub_1C5D8B22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableArray::AllLessThanOrEqual(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::ValidateTargetType(&v14, a2, this, v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    memset(v13, 0, sizeof(v13));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v13, *((void **)this + 9), *((void **)this + 10), (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 4);
    unint64_t v9 = (const void *)*a3;
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v14;
    }
    uint64_t ArrayItemAll = siri::dialogengine::FindArrayItemAll(v13, v9, v8, (const void **)&__p.__r_.__value_.__l.__data_, 4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    size_t v15 = (void **)v13;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v15);
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t ArrayItemAll = 0;
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_20:
    }
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  return ArrayItemAll;
}

void sub_1C5D8B3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnyGreaterThan(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::ValidateTargetType(&v14, a2, this, v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    memset(v13, 0, sizeof(v13));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v13, *((void **)this + 9), *((void **)this + 10), (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 4);
    unint64_t v9 = (const void *)*a3;
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v14;
    }
    BOOL ArrayItemAny = siri::dialogengine::FindArrayItemAny(v13, v9, v8, (const void **)&__p.__r_.__value_.__l.__data_, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    size_t v15 = (void **)v13;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v15);
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    BOOL ArrayItemAny = 0;
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_20:
    }
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  return ArrayItemAny;
}

void sub_1C5D8B574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnyLessThan(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::ValidateTargetType(&v14, a2, this, v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    memset(v13, 0, sizeof(v13));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v13, *((void **)this + 9), *((void **)this + 10), (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 4);
    unint64_t v9 = (const void *)*a3;
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v14;
    }
    BOOL ArrayItemAny = siri::dialogengine::FindArrayItemAny(v13, v9, v8, (const void **)&__p.__r_.__value_.__l.__data_, 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    size_t v15 = (void **)v13;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v15);
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    BOOL ArrayItemAny = 0;
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_20:
    }
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  return ArrayItemAny;
}

void sub_1C5D8B718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnyGreaterThanOrEqual(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::ValidateTargetType(&v14, a2, this, v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    memset(v13, 0, sizeof(v13));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v13, *((void **)this + 9), *((void **)this + 10), (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 4);
    unint64_t v9 = (const void *)*a3;
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v14;
    }
    BOOL ArrayItemAny = siri::dialogengine::FindArrayItemAny(v13, v9, v8, (const void **)&__p.__r_.__value_.__l.__data_, 3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    size_t v15 = (void **)v13;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v15);
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    BOOL ArrayItemAny = 0;
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_20:
    }
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  return ArrayItemAny;
}

void sub_1C5D8B8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnyLessThanOrEqual(siri::dialogengine::VariableArray *this, siri::dialogengine::Context *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::dialogengine::ValidateTargetType(&v14, a2, this, v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    memset(v13, 0, sizeof(v13));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v13, *((void **)this + 9), *((void **)this + 10), (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 4);
    unint64_t v9 = (const void *)*a3;
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v14;
    }
    BOOL ArrayItemAny = siri::dialogengine::FindArrayItemAny(v13, v9, v8, (const void **)&__p.__r_.__value_.__l.__data_, 4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    size_t v15 = (void **)v13;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v15);
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    BOOL ArrayItemAny = 0;
    if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_20:
    }
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  return ArrayItemAny;
}

void sub_1C5D8BA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableArray::AllSet(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  size_t v5 = strlen(siri::dialogengine::TYPE_BOOLEAN);
  size_t v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
    if (v5 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2])) {
      goto LABEL_10;
    }
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_BOOLEAN, v7))
  {
    memset(v14, 0, sizeof(v14));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v14, *((void **)a1 + 9), *((void **)a1 + 10), (uint64_t)(*((void *)a1 + 10) - *((void *)a1 + 9)) >> 4);
    size_t v12 = *(const void **)a3;
    size_t v11 = *(std::__shared_weak_count **)(a3 + 8);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = __s1;
    }
    uint64_t ArrayItemAll = siri::dialogengine::FindArrayItemAll(v14, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    size_t v16 = (void **)v14;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v16);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'all_set' for use with dialog.Boolean[] only!", v6);
  uint64_t ArrayItemAll = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return ArrayItemAll;
}

void sub_1C5D8BC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnySet(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  size_t v5 = strlen(siri::dialogengine::TYPE_BOOLEAN);
  size_t v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
    if (v5 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2])) {
      goto LABEL_10;
    }
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_BOOLEAN, v7))
  {
    memset(v14, 0, sizeof(v14));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v14, *((void **)a1 + 9), *((void **)a1 + 10), (uint64_t)(*((void *)a1 + 10) - *((void *)a1 + 9)) >> 4);
    size_t v12 = *(const void **)a3;
    size_t v11 = *(std::__shared_weak_count **)(a3 + 8);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = __s1;
    }
    BOOL ArrayItemAny = siri::dialogengine::FindArrayItemAny(v14, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    size_t v16 = (void **)v14;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v16);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'any_set' for use with dialog.Boolean[] only!", v6);
  BOOL ArrayItemAny = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return ArrayItemAny;
}

void sub_1C5D8BE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AllUnset(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  size_t v5 = strlen(siri::dialogengine::TYPE_BOOLEAN);
  size_t v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
    if (v5 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2])) {
      goto LABEL_10;
    }
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_BOOLEAN, v7))
  {
    memset(v14, 0, sizeof(v14));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v14, *((void **)a1 + 9), *((void **)a1 + 10), (uint64_t)(*((void *)a1 + 10) - *((void *)a1 + 9)) >> 4);
    size_t v12 = *(const void **)a3;
    size_t v11 = *(std::__shared_weak_count **)(a3 + 8);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = __s1;
    }
    BOOL ArrayItemAny = siri::dialogengine::FindArrayItemAny(v14, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    size_t v16 = (void **)v14;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v16);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'all_unset' for use with dialog.Boolean[] only!", v6);
  BOOL ArrayItemAny = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return ArrayItemAny;
}

void sub_1C5D8BFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnyUnset(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  size_t v5 = strlen(siri::dialogengine::TYPE_BOOLEAN);
  size_t v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
    if (v5 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2])) {
      goto LABEL_10;
    }
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_BOOLEAN, v7))
  {
    memset(v14, 0, sizeof(v14));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v14, *((void **)a1 + 9), *((void **)a1 + 10), (uint64_t)(*((void *)a1 + 10) - *((void *)a1 + 9)) >> 4);
    size_t v12 = *(const void **)a3;
    size_t v11 = *(std::__shared_weak_count **)(a3 + 8);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = __s1;
    }
    BOOL ArrayItemAny = siri::dialogengine::FindArrayItemAny(v14, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    size_t v16 = (void **)v14;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v16);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'any_unset' for use with dialog.Boolean[] only!", v6);
  BOOL ArrayItemAny = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return ArrayItemAny;
}

void sub_1C5D8C1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableArray::AllEmpty(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  size_t v5 = strlen(siri::dialogengine::TYPE_STRING);
  size_t v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
    if (v5 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2])) {
      goto LABEL_10;
    }
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_STRING, v7))
  {
    memset(v14, 0, sizeof(v14));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v14, *((void **)a1 + 9), *((void **)a1 + 10), (uint64_t)(*((void *)a1 + 10) - *((void *)a1 + 9)) >> 4);
    size_t v12 = *(const void **)a3;
    size_t v11 = *(std::__shared_weak_count **)(a3 + 8);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = __s1;
    }
    uint64_t ArrayItemAll = siri::dialogengine::FindArrayItemAll(v14, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    size_t v16 = (void **)v14;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v16);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'all_empty' for use with dialog.String[] only!", v6);
  uint64_t ArrayItemAll = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return ArrayItemAll;
}

void sub_1C5D8C36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnyEmpty(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  size_t v5 = strlen(siri::dialogengine::TYPE_STRING);
  size_t v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
    if (v5 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2])) {
      goto LABEL_10;
    }
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_STRING, v7))
  {
    memset(v14, 0, sizeof(v14));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v14, *((void **)a1 + 9), *((void **)a1 + 10), (uint64_t)(*((void *)a1 + 10) - *((void *)a1 + 9)) >> 4);
    size_t v12 = *(const void **)a3;
    size_t v11 = *(std::__shared_weak_count **)(a3 + 8);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = __s1;
    }
    BOOL ArrayItemAny = siri::dialogengine::FindArrayItemAny(v14, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    size_t v16 = (void **)v14;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v16);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'any_empty' for use with dialog.String[] only!", v6);
  BOOL ArrayItemAny = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return ArrayItemAny;
}

void sub_1C5D8C538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableArray::AllNonEmpty(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  size_t v5 = strlen(siri::dialogengine::TYPE_STRING);
  size_t v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
    if (v5 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2])) {
      goto LABEL_10;
    }
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_STRING, v7))
  {
    memset(v14, 0, sizeof(v14));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v14, *((void **)a1 + 9), *((void **)a1 + 10), (uint64_t)(*((void *)a1 + 10) - *((void *)a1 + 9)) >> 4);
    size_t v12 = *(const void **)a3;
    size_t v11 = *(std::__shared_weak_count **)(a3 + 8);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = __s1;
    }
    uint64_t ArrayItemAll = siri::dialogengine::FindArrayItemAll(v14, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    size_t v16 = (void **)v14;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v16);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'all_nonempty' for use with dialog.String[] only!", v6);
  uint64_t ArrayItemAll = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return ArrayItemAll;
}

void sub_1C5D8C704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VariableArray::AnyNonEmpty(siri::dialogengine::VariableArray *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  siri::dialogengine::VariableArray::GetConcreteType(a1, a2, (uint64_t)&__s1);
  size_t v5 = strlen(siri::dialogengine::TYPE_STRING);
  size_t v7 = v5;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v5 != __s1.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
    if (v5 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v5 != HIBYTE(__s1.__r_.__value_.__r.__words[2])) {
      goto LABEL_10;
    }
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_STRING, v7))
  {
    memset(v14, 0, sizeof(v14));
    std::vector<std::shared_ptr<siri::dialogengine::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Variable>*,std::shared_ptr<siri::dialogengine::Variable>*>(v14, *((void **)a1 + 9), *((void **)a1 + 10), (uint64_t)(*((void *)a1 + 10) - *((void *)a1 + 9)) >> 4);
    size_t v12 = *(const void **)a3;
    size_t v11 = *(std::__shared_weak_count **)(a3 + 8);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = __s1;
    }
    BOOL ArrayItemAny = siri::dialogengine::FindArrayItemAny(v14, v12, v11, (const void **)&__p.__r_.__value_.__l.__data_, 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    size_t v16 = (void **)v14;
    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100](&v16);
    goto LABEL_11;
  }
LABEL_10:
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Comparator 'any_nonempty' for use with dialog.String[] only!", v6);
  BOOL ArrayItemAny = 0;
LABEL_11:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return ArrayItemAny;
}

void sub_1C5D8C8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v24 - 40) = &a15;
  std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1C5D8CA24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5D8CDA4(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *a8, void *a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, std::string *a16, long long __p, int a18, __int16 a19, char a20,char a21,std::__shared_weak_count *a22,uint64_t a23,void *a24)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a24);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }

  _Unwind_Resume(a1);
}

void sub_1C5D8CFA4()
{
}

void sub_1C5D8CFB0()
{
}

void sub_1C5D8D02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::IsTypeAnExtensionOfBaseType(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  if (!v5) {
    return 0;
  }
  uint64_t v6 = (uint64_t)a2;
  uint64_t v7 = a2[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (!v7) {
    return 0;
  }
  if (v5 == v7)
  {
    if (v8 < 0) {
      a2 = *(unsigned __int8 **)a2;
    }
    if ((v4 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a1, a2, *(void *)(a1 + 8))) {
        goto LABEL_18;
      }
    }
    else if (*(unsigned char *)(a1 + 23))
    {
      for (uint64_t i = (unsigned __int8 *)a1; *i == *a2; ++i)
      {
        ++a2;
        if (!--v4) {
          return 0;
        }
      }
      goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  int IsArrayType = siri::dialogengine::IsArrayType((std::string *)a1);
  int v12 = siri::dialogengine::IsArrayType((std::string *)v6);
  if (IsArrayType != v12) {
    return 0;
  }
  if ((IsArrayType & v12) == 1)
  {
    siri::dialogengine::GetArrayElementType(a1, &v29);
    siri::dialogengine::GetArrayElementType(v6, &__p);
    uint64_t IsTypeAnExtensionOfBaseType = siri::dialogengine::IsTypeAnExtensionOfBaseType(&v29, &__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    return IsTypeAnExtensionOfBaseType;
  }
  siri::dialogengine::ObjectRegistry::GetObject(a3, (const std::string::value_type **)a1, (uint64_t *)&__p);
  if (!__p.__r_.__value_.__r.__words[0])
  {
    uint64_t IsTypeAnExtensionOfBaseType = 0;
    goto LABEL_56;
  }
  if (*(char *)(__p.__r_.__value_.__r.__words[0] + 95) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(__p.__r_.__value_.__r.__words[0] + 72), *(void *)(__p.__r_.__value_.__r.__words[0] + 80));
  }
  else {
    std::string v29 = *(std::string *)(__p.__r_.__value_.__r.__words[0] + 72);
  }
  char v15 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v29.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    uint64_t IsTypeAnExtensionOfBaseType = 0;
    goto LABEL_54;
  }
  uint64_t v17 = *(unsigned __int8 *)(v6 + 23);
  int v18 = (char)v17;
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *(void *)(v6 + 8);
  }
  if (size != v17)
  {
LABEL_53:
    uint64_t IsTypeAnExtensionOfBaseType = siri::dialogengine::IsTypeAnExtensionOfBaseType(&v29, v6, a3);
    char v15 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
LABEL_54:
    if ((v15 & 0x80) == 0) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v18 >= 0) {
    size_t v19 = (unsigned __int8 *)v6;
  }
  else {
    size_t v19 = *(unsigned __int8 **)v6;
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!memcmp(v29.__r_.__value_.__l.__data_, v19, v29.__r_.__value_.__l.__size_))
    {
      uint64_t IsTypeAnExtensionOfBaseType = 1;
LABEL_55:
      operator delete(v29.__r_.__value_.__l.__data_);
      goto LABEL_56;
    }
    goto LABEL_53;
  }
  if (*((unsigned char *)&v29.__r_.__value_.__s + 23))
  {
    uint64_t v20 = HIBYTE(v29.__r_.__value_.__r.__words[2]) - 1;
    double v21 = &v29;
    do
    {
      int v23 = v21->__r_.__value_.__s.__data_[0];
      double v21 = (std::string *)((char *)v21 + 1);
      int v22 = v23;
      int v25 = *v19++;
      int v24 = v25;
      BOOL v27 = v20-- != 0;
    }
    while (v22 == v24 && v27);
    if (v22 == v24)
    {
      uint64_t IsTypeAnExtensionOfBaseType = 1;
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  uint64_t IsTypeAnExtensionOfBaseType = 1;
LABEL_56:
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  return IsTypeAnExtensionOfBaseType;
}

void sub_1C5D8D290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

double YAML::Directives::Directives(YAML::Directives *this)
{
  *(unsigned char *)this = 1;
  *(void *)&double result = 0x200000001;
  *(void *)((char *)this + 4) = 0x200000001;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
  return result;
}

{
  double result;

  *(unsigned char *)this = 1;
  *(void *)&double result = 0x200000001;
  *(void *)((char *)this + 4) = 0x200000001;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
  return result;
}

void YAML::Directives::TranslateTagHandle(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6 = std::__tree<std::string>::find<std::string>(a1 + 16, (const void **)a2);
  if (a1 + 24 != v6)
  {
    if ((*(char *)(v6 + 79) & 0x80000000) == 0)
    {
      long long v7 = *(_OWORD *)(v6 + 56);
      a3->__r_.__value_.__r.__words[2] = *(void *)(v6 + 72);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
      return;
    }
    unint64_t v9 = *(const std::string::value_type **)(v6 + 56);
    std::string::size_type v10 = *(void *)(v6 + 64);
    goto LABEL_12;
  }
  int v8 = *(char *)(a2 + 23);
  if (v8 < 0)
  {
    unint64_t v9 = *(const std::string::value_type **)a2;
    std::string::size_type v10 = *(void *)(a2 + 8);
    if (v10 != 2)
    {
LABEL_12:
      size_t v11 = a3;
      goto LABEL_13;
    }
    if (*(_WORD *)v9 != 8481)
    {
      size_t v11 = a3;
      std::string::size_type v10 = 2;
LABEL_13:
      std::string::__init_copy_ctor_external(v11, v9, v10);
      return;
    }
  }
  else if (v8 != 2 || *(_WORD *)a2 != 8481)
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "tag:yaml.org,2002:");
}

void *siri::dialogengine::DialogMetadataBytesParser::Source@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "<BYTES>");
}

void siri::dialogengine::DialogMetadataBytesParser::Parse(siri::dialogengine::DialogMetadataBytesParser *this@<X0>, const char *a2@<X1>, siri::dialogengine::DialogMetadata::File *a3@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    if (*((void *)this + 2)) {
      goto LABEL_3;
    }
LABEL_6:
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"No metadata data to parse", a2);
    *(unsigned char *)a3 = 0;
    *((unsigned char *)a3 + 56) = 0;
    return;
  }
  if (!*((unsigned char *)this + 31)) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v4 = (char *)this + 8;
  siri::dialogengine::DialogMetadata::File::File((siri::dialogengine::DialogMetadata::File *)&v7);
  if (google::protobuf::MessageLite::ParseFromString(&v7, v4))
  {
    siri::dialogengine::DialogMetadata::File::File(a3, (siri::dialogengine::DialogMetadata::File *)&v7);
    char v6 = 1;
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to parse metadata", v5);
    char v6 = 0;
    *(unsigned char *)a3 = 0;
  }
  *((unsigned char *)a3 + 56) = v6;
  long long v7 = &unk_1F2119120;
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)&v9);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v8);
}

void sub_1C5D8D534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  siri::dialogengine::DialogMetadata::File::~File((siri::dialogengine::DialogMetadata::File *)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::DialogMetadata::File *siri::dialogengine::DialogMetadata::File::File(siri::dialogengine::DialogMetadata::File *a1, siri::dialogengine::DialogMetadata::File *a2)
{
  if (a1 != a2) {
    siri::dialogengine::DialogMetadata::File::InternalSwap(a1, a2);
  }
  return a1;
}

void siri::dialogengine::DialogMetadataBytesParser::~DialogMetadataBytesParser(void **this)
{
  *this = &unk_1F211DF98;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C8796D70);
}

{
  *this = &unk_1F211DF98;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void siri::dialogengine::DialogMetadataFileParser::Source(siri::dialogengine::DialogMetadataFileParser *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

void siri::dialogengine::DialogMetadataFileParser::Parse(siri::dialogengine::DialogMetadata::File *a1@<X8>)
{
  siri::dialogengine::ParseGzippedFile();
  unint64_t v3 = v12;
  if ((v12 & 0x80u) != 0) {
    unint64_t v3 = (unint64_t)v11[1];
  }
  if (v3)
  {
    siri::dialogengine::DialogMetadata::File::File((siri::dialogengine::DialogMetadata::File *)&__p);
    if (google::protobuf::MessageLite::ParseFromString(&__p, v11))
    {
      siri::dialogengine::DialogMetadata::File::File(a1, (siri::dialogengine::DialogMetadata::File *)&__p);
      char v4 = 1;
    }
    else
    {
      std::operator+<char>();
      siri::dialogengine::Log::LogWithLevel((uint64_t)&v5, 3u);
      if (v6 < 0) {
        operator delete(v5);
      }
      char v4 = 0;
      *(unsigned char *)a1 = 0;
    }
    *((unsigned char *)a1 + 56) = v4;
    std::string __p = &unk_1F2119120;
    google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)&v10);
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v8);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (v9 < 0) {
      operator delete(__p);
    }
    *(unsigned char *)a1 = 0;
    *((unsigned char *)a1 + 56) = 0;
  }
  if ((char)v12 < 0) {
    operator delete(v11[0]);
  }
}

void sub_1C5D8D7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  siri::dialogengine::DialogMetadata::File::~File((siri::dialogengine::DialogMetadata::File *)&a16);
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogMetadataFileParser::~DialogMetadataFileParser(void **this)
{
  *this = &unk_1F211EAE0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C8796D70);
}

{
  *this = &unk_1F211EAE0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

__n128 siri::dialogengine::DialogMetadataBytesParser::DialogMetadataBytesParser(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = &unk_1F211DF98;
  __n128 result = *a2;
  *(void *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  *(void *)a1 = &unk_1F211DF98;
  __n128 result = *a2;
  *(void *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

__n128 siri::dialogengine::DialogMetadataFileParser::DialogMetadataFileParser(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = &unk_1F211EAE0;
  __n128 result = *a2;
  *(void *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  *(void *)a1 = &unk_1F211EAE0;
  __n128 result = *a2;
  *(void *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

BOOL siri::dialogengine::ObjectInput::operator==(uint64_t a1, const void *a2)
{
  BOOL result = siri::dialogengine::PropertyBase::operator==(a1, (uint64_t)a2);
  if (result)
  {
    return !v5 || *(_DWORD *)(a1 + 156) == v5[39];
  }
  return result;
}

void siri::dialogengine::ObjectInput::~ObjectInput(void **this)
{
  siri::dialogengine::PropertyBase::~PropertyBase(this);
  JUMPOUT(0x1C8796D70);
}

uint64_t siri::dialogengine::ObjectInput::GetAccessMode(siri::dialogengine::ObjectInput *this)
{
  return *((unsigned int *)this + 39);
}

uint64_t siri::dialogengine::ObjectInput::SetAccessMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 156) = a2;
  return result;
}

void siri::dialogengine::TestCase::TestCase(std::string *this, unsigned int *a2, long long *a3, long long *a4, long long *a5, long long *a6, long long *a7, std::string::value_type a8)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v15 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v15;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v16 = *a4;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v16;
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v17 = *a5;
    this[2].__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v17;
  }
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *(const std::string::value_type **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v18 = *a6;
    this[3].__r_.__value_.__r.__words[2] = *((void *)a6 + 2);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v18;
  }
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *(const std::string::value_type **)a7, *((void *)a7 + 1));
  }
  else
  {
    long long v19 = *a7;
    this[4].__r_.__value_.__r.__words[2] = *((void *)a7 + 2);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v19;
  }
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = 0u;
  this[5].__r_.__value_.__s.__data_[0] = a8;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[2] = 0u;
  LOWORD(this[9].__r_.__value_.__r.__words[1]) = 1;
  this[9].__r_.__value_.__r.__words[2] = 0;
  this[10].__r_.__value_.__r.__words[0] = 0;
  this[10].__r_.__value_.__l.__size_ = 0;
  if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a2, "name")&& (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "name")+ 22) & 0x400) != 0)
  {
    uint64_t v29 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "name");
    uint64_t String = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v29);
    MEMORY[0x1C8796900](&this[5].__r_.__value_.__r.__words[1], String);
  }
  else
  {
    std::operator+<char>();
    uint64_t v20 = std::string::append(&v38, " (");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    int v22 = *((char *)a7 + 23);
    if (v22 >= 0) {
      int v23 = (const std::string::value_type *)a7;
    }
    else {
      int v23 = *(const std::string::value_type **)a7;
    }
    if (v22 >= 0) {
      std::string::size_type v24 = *((unsigned __int8 *)a7 + 23);
    }
    else {
      std::string::size_type v24 = *((void *)a7 + 1);
    }
    int v25 = std::string::append(&v37, v23, v24);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    BOOL v27 = std::string::append(&v39, ")");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    std::string::size_type v41 = v27->__r_.__value_.__r.__words[2];
    long long v40 = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v40, 1u);
    if (SHIBYTE(v41) < 0) {
      operator delete((void *)v40);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    MEMORY[0x1C8796900](&this[5].__r_.__value_.__r.__words[1], "<Unnamed Test>");
  }
  if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a2, "description")&& (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "description")+ 22) & 0x400) != 0)
  {
    uint64_t v31 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "description");
    uint64_t v32 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v31);
    MEMORY[0x1C8796900](&this[6].__r_.__value_.__r.__words[1], v32);
  }
  if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a2, "enabled")&& (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "enabled")+ 22) & 8) != 0)
  {
    int v34 = *(unsigned __int16 *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "enabled")+ 22);
    if ((v34 & 8) == 0) {
      goto LABEL_48;
    }
    BOOL v33 = v34 == 10;
  }
  else
  {
    BOOL v33 = 1;
  }
  this[9].__r_.__value_.__s.__data_[8] = v33;
  if (!rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a2, "skip_if_no_morphun")|| (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "skip_if_no_morphun")+ 22) & 8) == 0)
  {
    BOOL v35 = 0;
    goto LABEL_47;
  }
  int v36 = *(unsigned __int16 *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, "skip_if_no_morphun")+ 22);
  if ((v36 & 8) != 0)
  {
    BOOL v35 = v36 == 10;
LABEL_47:
    this[9].__r_.__value_.__s.__data_[9] = v35;
    rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)&v40);
  }
LABEL_48:
  __assert_rtn("GetBool", "document.h", 1078, "IsBool()");
}

void sub_1C5D8F12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void **a11, uint64_t a12, void **a13, void **a14, void **a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__split_buffer<std::string> *a39,uint64_t a40,uint64_t a41,void *__pa,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a50);
  if (a47 < 0) {
    operator delete(__pa);
  }
  if (SHIBYTE(a19) < 0) {
    operator delete(a17);
  }
  std::unique_ptr<rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>::reset[abi:ne180100](&a41);
  va_list __pa = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  if (SHIBYTE(a35) < 0) {
    operator delete(a33);
  }
  std::unique_ptr<rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>::reset[abi:ne180100](&a36);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(v54 - 256);
  *(void *)(v54 - 256) = a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v54 - 256));
  *(void *)(v54 - 256) = a16;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v54 - 256));
  if (*(char *)(v50 + 199) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(v50 + 175) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v50 + 151) < 0) {
    operator delete(*v52);
  }
  if (*(char *)(v50 + 119) < 0) {
    operator delete(*v51);
  }
  if (*(char *)(v50 + 95) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v50 + 71) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v50 + 47) < 0) {
    operator delete(*v53);
  }
  if (*(char *)(v50 + 23) < 0) {
    operator delete(*(void **)v50);
  }
  _Unwind_Resume(a1);
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<0u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v20 = a1;
  uint64_t v21 = v4;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v24 = 256;
  int v26 = 2;
  LODWORD(v25) = 0;
  *((void *)&v25 + 1) = 0;
  for (uint64_t i = *(unsigned __int8 **)a2; ; ++i)
  {
    unsigned int v6 = *i;
    BOOL v7 = v6 > 0x20;
    uint64_t v8 = (1 << v6) & 0x100002600;
    if (v7 || v8 == 0) {
      break;
    }
  }
  *(void *)a2 = i;
  if (!*i)
  {
    int v18 = 1;
LABEL_26:
    long long v19 = &i[-*(void *)(a2 + 8)];
    LODWORD(v25) = v18;
    *((void *)&v25 + 1) = v19;
    goto LABEL_16;
  }
  rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>((uint64_t)&v21, (unsigned __int8 **)a2, a1);
  if (!v25)
  {
    for (uint64_t i = *(unsigned __int8 **)a2; ; ++i)
    {
      unsigned int v10 = *i;
      BOOL v7 = v10 > 0x20;
      uint64_t v11 = (1 << v10) & 0x100002600;
      if (v7 || v11 == 0) {
        break;
      }
    }
    *(void *)a2 = i;
    if (*i)
    {
      int v18 = 2;
      goto LABEL_26;
    }
  }
LABEL_16:
  *(void *)&long long v23 = *((void *)&v22 + 1);
  int v13 = v25;
  *(_OWORD *)(a1 + 88) = v25;
  if (v13) {
    std::string v14 = 0;
  }
  else {
    std::string v14 = rapidjson::ParseResult::IsError;
  }
  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 64);
    if (v15 - *(void *)(a1 + 56) != 24) {
      __assert_rtn("ParseStream", "document.h", 2259, "stack_.GetSize() == sizeof(ValueType)");
    }
    *(void *)(a1 + 64) = v15 - 24;
    if (v15 - 24 != a1)
    {
      long long v16 = *(_OWORD *)(v15 - 24);
      *(void *)(a1 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = *(void *)(v15 - 8);
      *(_OWORD *)a1 = v16;
      *(_WORD *)(v15 - 2) = 0;
    }
  }
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ClearStackOnExit::~ClearStackOnExit((uint64_t)&v20);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&v21);
  return a1;
}

void sub_1C5D8F780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a13 = a12;
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ClearStackOnExit::~ClearStackOnExit((uint64_t)&a9);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(result);
    JUMPOUT(0x1C8796D70);
  }
  return result;
}

BOOL rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(unsigned int *a1, uint64_t *a2)
{
  __int16 v2 = *((_WORD *)a1 + 11);
  switch(v2 & 7)
  {
    case 0:
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)a2, 0);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteNull(a2);
      return 1;
    case 1:
      uint64_t v5 = 1;
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)a2, 1);
      unsigned int v6 = a2;
      int v7 = 0;
      goto LABEL_5;
    case 2:
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)a2, 2);
      uint64_t v5 = 1;
      unsigned int v6 = a2;
      int v7 = 1;
LABEL_5:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool(v6, v7);
      return v5;
    case 3:
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((void **)a2);
      if (*((_WORD *)a1 + 11) != 3) {
        __assert_rtn("MemberBegin", "document.h", 1155, "IsObject()");
      }
      uint64_t v8 = *((void *)a1 + 1);
      while (2)
      {
        if (v8 == *((void *)a1 + 1) + 48 * *a1)
        {
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((void **)a2);
          return 1;
        }
        if ((*(_WORD *)(v8 + 22) & 0x400) == 0) {
          __assert_rtn("Accept", "document.h", 1872, "m->name.IsString()");
        }
        uint64_t String = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v8);
        unsigned int StringLength = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetStringLength((unsigned int *)v8);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a2, String, StringLength);
        uint64_t v11 = v8 + 24;
        if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(v11, a2))
        {
          uint64_t v8 = v11 + 24;
          if (*((_WORD *)a1 + 11) != 3) {
            __assert_rtn("MemberEnd", "document.h", 1158, "IsObject()");
          }
          continue;
        }
        break;
      }
      return 0;
    case 4:
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((void **)a2);
      if (*((_WORD *)a1 + 11) != 4) {
        __assert_rtn("Begin", "document.h", 1591, "IsArray()");
      }
      uint64_t v12 = *((void *)a1 + 1);
      while (2)
      {
        if (v12 == *((void *)a1 + 1) + 24 * *a1)
        {
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((void **)a2);
          return 1;
        }
        if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(v12, a2))
        {
          v12 += 24;
          if (*((_WORD *)a1 + 11) != 4) {
            __assert_rtn("End", "document.h", 1594, "IsArray()");
          }
          continue;
        }
        break;
      }
      return 0;
    case 5:
      uint64_t v13 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)a1);
      unsigned int v14 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetStringLength(a1);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a2, v13, v14);
      return 1;
    case 6:
      if ((*((_WORD *)a1 + 11) & 0x200) != 0)
      {
        double v16 = *(double *)a1;
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((void **)a2, 6);
        return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteDouble((uint64_t)a2, v16);
      }
      else
      {
        if ((v2 & 0x20) != 0)
        {
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int((void **)a2, (rapidjson::internal *)*a1);
        }
        else if ((v2 & 0x40) != 0)
        {
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint((void **)a2, (rapidjson::internal *)*a1);
        }
        else
        {
          unint64_t v15 = *(void *)a1;
          if ((v2 & 0x80) != 0) {
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64((void **)a2, v15);
          }
          else {
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint64((void **)a2, v15);
          }
        }
        return 1;
      }
    default:
      __assert_rtn("Accept", "document.h", 1892, "GetType() == kNumberType");
  }
}

uint64_t siri::dialogengine::GetConditions(void *a1, unsigned int *a2, const char *a3)
{
  uint64_t result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a2, a3);
  if (result)
  {
    uint64_t result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a2, a3);
    if (*(_WORD *)(result + 22) == 4) {
      operator new();
    }
  }
  *a1 = 0;
  a1[1] = 0;
  return result;
}

void sub_1C5D8FDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<siri::dialogengine::ConditionEntry>::shared_ptr[abi:ne180100]<siri::dialogengine::ConditionEntry,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5D8FEB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ParseCondition(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 22) == 4)
  {
    if (*(_DWORD *)a2
      && (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](a2, 0)+ 22) & 0x400) != 0)
    {
      uint64_t v4 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](a2, 0);
      uint64_t String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v4);
    }
    else
    {
      uint64_t String = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v11, String);
    if (*(_WORD *)(a2 + 22) == 4)
    {
      if (*(_DWORD *)a2 >= 2u
        && (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](a2, 1u)+ 22) & 0x400) != 0)
      {
        uint64_t v6 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](a2, 1u);
        uint64_t v5 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v6);
      }
      else
      {
        uint64_t v5 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&v10, v5);
      if (*(_WORD *)(a2 + 22) == 4)
      {
        if (*(_DWORD *)a2 >= 3u
          && (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](a2, 2u)+ 22) & 0x400) != 0)
        {
          uint64_t v8 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](a2, 2u);
          int v7 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v8);
        }
        else
        {
          int v7 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, v7);
        operator new();
      }
      __assert_rtn("Size", "document.h", 1557, "IsArray()");
    }
    __assert_rtn("Size", "document.h", 1557, "IsArray()");
  }
}

void sub_1C5D900D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ConditionEntry *,std::shared_ptr<siri::dialogengine::ConditionEntry>::__shared_ptr_default_delete<siri::dialogengine::ConditionEntry,siri::dialogengine::ConditionEntry>,std::allocator<siri::dialogengine::ConditionEntry>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ConditionEntry *,std::shared_ptr<siri::dialogengine::ConditionEntry>::__shared_ptr_default_delete<siri::dialogengine::ConditionEntry,siri::dialogengine::ConditionEntry>,std::allocator<siri::dialogengine::ConditionEntry>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::ConditionEntry *,std::shared_ptr<siri::dialogengine::ConditionEntry>::__shared_ptr_default_delete<siri::dialogengine::ConditionEntry,siri::dialogengine::ConditionEntry>,std::allocator<siri::dialogengine::ConditionEntry>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C8796D70);
}

unsigned char *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteNull(uint64_t *a1)
{
  __int16 v2 = (void *)*a1;
  if ((uint64_t)(v2[4] - v2[3]) <= 3)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v2, 4);
    __int16 v2 = (void *)*a1;
  }
  *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>((uint64_t)v2, 1) = 110;
  *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = 117;
  *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = 108;
  uint64_t result = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1);
  *uint64_t result = 108;
  return result;
}

unsigned char *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint64(void **a1, unint64_t a2)
{
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1, 6);
  uint64_t v4 = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 20);
  uint64_t result = rapidjson::internal::u64toa(a2, v4, v5);
  uint64_t v7 = (*a1)[3];
  if (v7 - (*a1)[2] < (unint64_t)(v4 - result + 20)) {
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  }
  (*a1)[3] = v7 - (v4 - result) - 20;
  return result;
}

void rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t v6 = (char *)*a2;
  int v7 = (char)**a2;
  int v8 = **a2;
  if (v7 > 109)
  {
    if (v7 != 123)
    {
      if (v7 == 116)
      {
        if (v8 != 116) {
          __assert_rtn("ParseTrue", "reader.h", 868, "is.Peek() == 't'");
        }
        char v9 = v6 + 1;
        *a2 = (unsigned __int8 *)(v6 + 1);
        if (v6[1] == 114)
        {
          char v9 = v6 + 2;
          *a2 = (unsigned __int8 *)(v6 + 2);
          if (v6[2] == 117)
          {
            char v9 = v6 + 3;
            *a2 = (unsigned __int8 *)(v6 + 3);
            if (v6[3] == 101)
            {
              *a2 = (unsigned __int8 *)(v6 + 4);
              uint64_t v10 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)(a3 + 40));
              *(void *)(v10 + 8) = 0;
              *(void *)(v10 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = 0;
              *(void *)uint64_t v10 = 0;
              __int16 v11 = 10;
              goto LABEL_55;
            }
          }
        }
        if (*(_DWORD *)(a1 + 48)) {
          __assert_rtn("ParseTrue", "reader.h", 876, "!HasParseError()");
        }
        goto LABEL_149;
      }
      if (v7 == 110)
      {
        if (v8 != 110) {
          __assert_rtn("ParseNull", "reader.h", 855, "is.Peek() == 'n'");
        }
        char v9 = v6 + 1;
        *a2 = (unsigned __int8 *)(v6 + 1);
        if (v6[1] == 117)
        {
          char v9 = v6 + 2;
          *a2 = (unsigned __int8 *)(v6 + 2);
          if (v6[2] == 108)
          {
            char v9 = v6 + 3;
            *a2 = (unsigned __int8 *)(v6 + 3);
            if (v6[3] == 108)
            {
              *a2 = (unsigned __int8 *)(v6 + 4);
              uint64_t v12 = (void *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)(a3 + 40));
              v12[1] = 0;
              void v12[2] = 0;
              *uint64_t v12 = 0;
              return;
            }
          }
        }
        if (*(_DWORD *)(a1 + 48)) {
          __assert_rtn("ParseNull", "reader.h", 863, "!HasParseError()");
        }
LABEL_149:
        int64_t v61 = v9 - a2[1];
        int v62 = 3;
LABEL_150:
        *(_DWORD *)(a1 + 48) = v62;
        *(void *)(a1 + 56) = v61;
        return;
      }
LABEL_29:
      int v18 = (char *)a2[1];
      if (v8 == 45)
      {
        uint64_t v20 = (unsigned __int8 *)(v6 + 1);
        int v19 = v6[1];
      }
      else
      {
        int v19 = **a2;
        uint64_t v20 = *a2;
      }
      LODWORD(v21) = v19 - 48;
      if (v19 == 48)
      {
        int v39 = 0;
        LODWORD(v26) = 0;
        unint64_t v40 = 0;
        int v41 = 0;
        double v25 = 0.0;
        unsigned int v22 = v20[1];
        uint64_t v23 = (uint64_t)(v20 + 1);
      }
      else
      {
        if ((v19 - 49) > 8)
        {
          if (*(_DWORD *)(a1 + 48)) {
            __assert_rtn("ParseNumber", "reader.h", 1532, "!HasParseError()");
          }
          unsigned int v63 = (unsigned __int8 *)(v20 - (unsigned __int8 *)v18);
          int v64 = 3;
          goto LABEL_215;
        }
        uint64_t v23 = (uint64_t)(v20 + 1);
        unsigned int v22 = v20[1];
        unsigned int v24 = v22 - 48;
        double v25 = 0.0;
        if (v8 == 45)
        {
          if (v24 <= 9)
          {
            uint64_t v26 = 0;
            while (1)
            {
              if (v21 > 0xCCCCCCB)
              {
                if (v21 != 214748364) {
                  goto LABEL_42;
                }
                if (v22 > 0x38) {
                  break;
                }
              }
              LODWORD(v21) = v22 + 10 * v21 - 48;
              unsigned int v22 = v20[v26++ + 2];
              if (v22 - 48 >= 0xA)
              {
                int v39 = 0;
                unint64_t v40 = 0;
                int v41 = 0;
                uint64_t v23 = (uint64_t)&v20[v26 + 1];
                goto LABEL_94;
              }
            }
            unsigned int v22 = 57;
            LODWORD(v21) = 214748364;
LABEL_42:
            uint64_t v23 = (uint64_t)&v20[v26 + 1];
LABEL_77:
            unint64_t v40 = v21;
            if (v8 == 45)
            {
              while (v40 <= 0xCCCCCCCCCCCCCCBLL || v40 == 0xCCCCCCCCCCCCCCCLL && v22 <= 0x38)
              {
                unsigned int v38 = *(unsigned __int8 *)++v23;
                unint64_t v40 = v22 - 48 + 10 * v40;
                LODWORD(v26) = v26 + 1;
                unsigned int v22 = v38;
                if (v38 - 48 >= 0xA) {
                  goto LABEL_92;
                }
              }
            }
            else
            {
              while (v40 <= 0x1999999999999998 || v40 == 0x1999999999999999 && v22 <= 0x35)
              {
                unsigned int v42 = *(unsigned __int8 *)++v23;
                unint64_t v40 = v22 - 48 + 10 * v40;
                LODWORD(v26) = v26 + 1;
                unsigned int v22 = v42;
                if (v42 - 48 >= 0xA)
                {
LABEL_92:
                  int v39 = 0;
                  double v25 = 0.0;
                  goto LABEL_93;
                }
              }
            }
            double v25 = (double)v40;
            do
            {
              unsigned int v43 = *(unsigned __int8 *)++v23;
              double v25 = (double)(int)(v22 - 48) + v25 * 10.0;
              unsigned int v22 = v43;
            }
            while (v43 - 48 < 0xA);
            int v39 = 1;
LABEL_93:
            int v41 = 1;
            goto LABEL_94;
          }
        }
        else if (v24 <= 9)
        {
          uint64_t v26 = 0;
          while (1)
          {
            if (v21 > 0x19999998)
            {
              if (v21 != 429496729) {
                goto LABEL_76;
              }
              if (v22 > 0x35) {
                break;
              }
            }
            LODWORD(v21) = v22 + 10 * v21 - 48;
            unsigned int v22 = v20[v26++ + 2];
            if (v22 - 48 >= 0xA)
            {
              int v39 = 0;
              unint64_t v40 = 0;
              int v41 = 0;
              uint64_t v23 = (uint64_t)&v20[v26 + 1];
              goto LABEL_94;
            }
          }
          LODWORD(v21) = 429496729;
LABEL_76:
          uint64_t v23 = (uint64_t)&v20[v26 + 1];
          goto LABEL_77;
        }
        int v39 = 0;
        LODWORD(v26) = 0;
        unint64_t v40 = 0;
        int v41 = 0;
      }
LABEL_94:
      std::vector<std::string> v44 = (unsigned char *)(v6 - v18);
      if (v22 == 46)
      {
        unsigned int v46 = *(unsigned __int8 *)(v23 + 1);
        std::string::size_type v45 = (unsigned __int8 *)(v23 + 1);
        unsigned int v22 = v46;
        if (v46 - 48 >= 0xA)
        {
          if (*(_DWORD *)(a1 + 48)) {
            __assert_rtn("ParseNumber", "reader.h", 1575, "!HasParseError()");
          }
          *(_DWORD *)(a1 + 48) = 14;
          *(void *)(a1 + 56) = v45 - (unsigned __int8 *)v18;
          uint64_t v20 = v45;
          goto LABEL_142;
        }
        int v47 = 0;
        if ((v39 & 1) == 0)
        {
          if (!v41) {
            unint64_t v40 = v21;
          }
          while (v22 <= 0x39 && !(v40 >> 53))
          {
            int v49 = (char)*++v45;
            int v48 = v49;
            unint64_t v40 = v22 - 48 + 10 * v40;
            --v47;
            if (v40) {
              LODWORD(v26) = v26 + 1;
            }
            unsigned int v22 = v48;
            if (v48 <= 47)
            {
              int v50 = 0;
              double v25 = (double)v40;
              uint64_t v20 = v45;
              goto LABEL_113;
            }
          }
          double v25 = (double)v40;
        }
        uint64_t v20 = v45;
        while (v22 <= 0x39)
        {
          if ((int)v26 <= 16)
          {
            double v25 = (double)(int)(v22 - 48) + v25 * 10.0;
            --v47;
            if (v25 > 0.0) {
              LODWORD(v26) = v26 + 1;
            }
          }
          int v51 = (char)*++v20;
          unsigned int v22 = v51;
          if (v51 <= 47) {
            goto LABEL_112;
          }
        }
        int v39 = 1;
      }
      else
      {
        int v47 = 0;
        uint64_t v20 = (unsigned __int8 *)v23;
      }
      if (v22 != 101 && v22 != 69)
      {
        if ((v39 & 1) == 0)
        {
          if (v41)
          {
            if (v8 == 45) {
              rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64(a3, -(uint64_t)v40);
            }
            else {
              rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64(a3, v40);
            }
            goto LABEL_142;
          }
          int v99 = v21;
          uint64_t v58 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)(a3 + 40));
          *(void *)(v58 + 8) = 0;
          *(void *)(v58 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = 0;
          if (v8 == 45)
          {
            *(void *)uint64_t v58 = -v99;
            BOOL v100 = -v99 < 0;
            __int16 v60 = 182;
          }
          else
          {
            *(void *)uint64_t v58 = v99;
            BOOL v100 = v99 < 0;
            __int16 v60 = 470;
          }
          if (!v100) {
            __int16 v60 = 502;
          }
          goto LABEL_141;
        }
LABEL_112:
        int v50 = 0;
LABEL_113:
        int v52 = v47 + v50;
        if (v52 > -309)
        {
          if ((v52 & 0x80000000) == 0)
          {
            if (v52 >= 0x135)
            {
              long long v94 = "n >= 0 && n <= 308";
              int v95 = 48;
              uint64_t v96 = "pow10.h";
              unint64_t v97 = "Pow10";
              goto LABEL_233;
            }
            double v53 = v25 * rapidjson::internal::Pow10(int)::e[v52];
            goto LABEL_135;
          }
          int v54 = -v52;
        }
        else
        {
          double v53 = 0.0;
          if (v52 < 0xFFFFFD98) {
            goto LABEL_138;
          }
          double v25 = v25 / 1.0e308;
          int v54 = -308 - v52;
        }
        double v53 = v25 / rapidjson::internal::Pow10(int)::e[v54];
LABEL_135:
        if (v53 > 1.79769313e308)
        {
          if (!*(_DWORD *)(a1 + 48))
          {
LABEL_137:
            *(_DWORD *)(a1 + 48) = 13;
            *(void *)(a1 + 56) = v44;
LABEL_142:
            *a2 = v20;
            a2[1] = (unsigned __int8 *)v18;
            return;
          }
          long long v94 = "!HasParseError()";
          int v95 = 1707;
          uint64_t v96 = "reader.h";
          unint64_t v97 = "ParseNumber";
LABEL_233:
          __assert_rtn(v97, v96, v95, v94);
        }
LABEL_138:
        uint64_t v58 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)(a3 + 40));
        double v59 = -v53;
        if (v8 != 45) {
          double v59 = v53;
        }
        *(void *)(v58 + 8) = 0;
        *(void *)(v58 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = 0;
        *(double *)uint64_t v58 = v59;
        __int16 v60 = 534;
LABEL_141:
        *(_WORD *)(v58 + 22) = v60;
        goto LABEL_142;
      }
      int v55 = v20[1];
      unint64_t v21 = v21;
      if (v41) {
        unint64_t v21 = v40;
      }
      if (!v39) {
        double v25 = (double)v21;
      }
      if (v55 == 43)
      {
        int v55 = v20[2];
        if ((v55 - 48) < 0xA)
        {
          uint64_t v56 = 3;
          goto LABEL_125;
        }
        v20 += 2;
      }
      else if (v55 == 45)
      {
        int v91 = v20[2] - 48;
        if (v91 < 0xA)
        {
          v20 += 3;
          if (v47 >= 1) {
            __assert_rtn("ParseNumber", "reader.h", 1639, "expFrac <= 0");
          }
          int v92 = *v20;
          if ((v92 - 48) <= 9)
          {
            while (1)
            {
              int v91 = v92 + 10 * v91 - 48;
              if (v91 > (v47 + 2147483639) / 10) {
                break;
              }
              int v93 = *++v20;
              int v92 = v93;
              if ((v93 - 48) >= 0xA) {
                goto LABEL_231;
              }
            }
            do
              int v98 = *++v20;
            while ((v98 - 48) < 0xA);
          }
LABEL_231:
          int v50 = -v91;
          goto LABEL_113;
        }
        v20 += 2;
      }
      else
      {
        if ((v55 - 48) < 0xA)
        {
          uint64_t v56 = 2;
LABEL_125:
          v20 += v56;
          int v50 = v55 - 48;
          do
          {
            int v57 = *v20;
            if ((v57 - 48) > 9) {
              goto LABEL_113;
            }
            ++v20;
            int v50 = v57 + 10 * v50 - 48;
          }
          while (v50 <= 308 - v47);
          if (*(_DWORD *)(a1 + 48)) {
            __assert_rtn("ParseNumber", "reader.h", 1655, "!HasParseError()");
          }
          goto LABEL_137;
        }
        ++v20;
      }
      if (*(_DWORD *)(a1 + 48)) {
        __assert_rtn("ParseNumber", "reader.h", 1660, "!HasParseError()");
      }
      unsigned int v63 = (unsigned __int8 *)(v20 - (unsigned __int8 *)v18);
      int v64 = 15;
LABEL_215:
      *(_DWORD *)(a1 + 48) = v64;
      *(void *)(a1 + 56) = v63;
      goto LABEL_142;
    }
    if (v8 != 123) {
      __assert_rtn("ParseObject", "reader.h", 739, "is.Peek() == '{'");
    }
    *a2 = (unsigned __int8 *)(v6 + 1);
    uint64_t v13 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)(a3 + 40));
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = 0;
    *(void *)uint64_t v13 = 0;
    *(_WORD *)(v13 + 22) = 3;
    for (uint64_t i = *a2; ; ++i)
    {
      unsigned int v15 = *i;
      BOOL v100 = v15 > 0x20;
      uint64_t v16 = (1 << v15) & 0x100002600;
      if (v100 || v16 == 0) {
        break;
      }
    }
    *a2 = i;
    if (!*(_DWORD *)(a1 + 48))
    {
      int v33 = *i;
      if (v33 == 125)
      {
        *a2 = i + 1;
        int v34 = (void *)a3;
        unsigned int v35 = 0;
LABEL_59:
        rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject(v34, v35);
      }
      else
      {
        if (v33 != 34)
        {
LABEL_195:
          int v62 = 4;
LABEL_228:
          int64_t v61 = i - a2[1];
          goto LABEL_150;
        }
        unsigned int v65 = 0;
        while (1)
        {
          v66.n128_f64[0] = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3);
          if (*(_DWORD *)(a1 + 48)) {
            break;
          }
          for (uint64_t i = *a2; ; ++i)
          {
            unsigned int v67 = *i;
            BOOL v100 = v67 > 0x20;
            uint64_t v68 = (1 << v67) & 0x100002600;
            if (v100 || v68 == 0) {
              break;
            }
          }
          *a2 = i;
          if (*i != 58)
          {
            int v62 = 5;
            goto LABEL_228;
          }
          id v70 = i + 1;
          *a2 = v70;
          while (1)
          {
            unsigned int v71 = *v70;
            BOOL v100 = v71 > 0x20;
            uint64_t v72 = (1 << v71) & 0x100002600;
            if (v100 || v72 == 0) {
              break;
            }
            ++v70;
          }
          *a2 = v70;
          rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3, v66);
          if (*(_DWORD *)(a1 + 48)) {
            return;
          }
          for (uint64_t i = *a2; ; ++i)
          {
            unsigned int v74 = *i;
            BOOL v100 = v74 > 0x20;
            uint64_t v75 = (1 << v74) & 0x100002600;
            if (v100 || v75 == 0) {
              break;
            }
          }
          *a2 = i;
          ++v65;
          int v77 = (char)*i;
          if (v77 != 44)
          {
            if (v77 == 125)
            {
              *a2 = i + 1;
              int v34 = (void *)a3;
              unsigned int v35 = v65;
              goto LABEL_59;
            }
            int v62 = 6;
            goto LABEL_228;
          }
          *a2 = ++i;
          while (1)
          {
            unsigned int v78 = *i;
            BOOL v100 = v78 > 0x20;
            uint64_t v79 = (1 << v78) & 0x100002600;
            if (v100 || v79 == 0) {
              break;
            }
            ++i;
          }
          *a2 = i;
          if (*i != 34) {
            goto LABEL_195;
          }
        }
      }
    }
  }
  else
  {
    switch(v7)
    {
      case '""':
        rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3);
        break;
      case '[':
        if (v8 != 91) {
          __assert_rtn("ParseArray", "reader.h", 807, "is.Peek() == '['");
        }
        *a2 = (unsigned __int8 *)(v6 + 1);
        uint64_t v27 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)(a3 + 40));
        *(void *)(v27 + 8) = 0;
        *(void *)(v27 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = 0;
        *(void *)uint64_t v27 = 0;
        *(_WORD *)(v27 + 22) = 4;
        for (uint64_t j = *a2; ; ++j)
        {
          unsigned int v30 = *j;
          BOOL v100 = v30 > 0x20;
          uint64_t v31 = (1 << v30) & 0x100002600;
          if (v100 || v31 == 0) {
            break;
          }
        }
        *a2 = j;
        if (!*(_DWORD *)(a1 + 48))
        {
          if (*j == 93)
          {
            *a2 = j + 1;
            int v36 = (void *)a3;
            unsigned int v37 = 0;
LABEL_65:
            rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray(v36, v37);
          }
          else
          {
            unsigned int v81 = 0;
            while (1)
            {
              rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3, v28);
              if (*(_DWORD *)(a1 + 48)) {
                break;
              }
              for (uint64_t k = *a2; ; ++k)
              {
                unsigned int v83 = *k;
                BOOL v100 = v83 > 0x20;
                uint64_t v84 = (1 << v83) & 0x100002600;
                if (v100 || v84 == 0) {
                  break;
                }
              }
              ++v81;
              *a2 = k;
              int v86 = *k;
              if (v86 != 44)
              {
                if (v86 == 93)
                {
                  *a2 = k + 1;
                  int v36 = (void *)a3;
                  unsigned int v37 = v81;
                  goto LABEL_65;
                }
                int64_t v61 = k - a2[1];
                int v62 = 7;
                goto LABEL_150;
              }
              unsigned __int8 v87 = k + 1;
              *a2 = v87;
              while (1)
              {
                unsigned int v88 = *v87;
                BOOL v100 = v88 > 0x20;
                uint64_t v89 = (1 << v88) & 0x100002600;
                if (v100 || v89 == 0) {
                  break;
                }
                ++v87;
              }
              *a2 = v87;
            }
          }
        }
        break;
      case 'f':
        if (v8 != 102) {
          __assert_rtn("ParseFalse", "reader.h", 881, "is.Peek() == 'f'");
        }
        char v9 = v6 + 1;
        *a2 = (unsigned __int8 *)(v6 + 1);
        if (v6[1] == 97)
        {
          char v9 = v6 + 2;
          *a2 = (unsigned __int8 *)(v6 + 2);
          if (v6[2] == 108)
          {
            char v9 = v6 + 3;
            *a2 = (unsigned __int8 *)(v6 + 3);
            if (v6[3] == 115)
            {
              char v9 = v6 + 4;
              *a2 = (unsigned __int8 *)(v6 + 4);
              if (v6[4] == 101)
              {
                *a2 = (unsigned __int8 *)(v6 + 5);
                uint64_t v10 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)(a3 + 40));
                *(void *)(v10 + 8) = 0;
                *(void *)(v10 + google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextProperty>::TypeHandler>((uint64_t)this + 16) = 0;
                *(void *)uint64_t v10 = 0;
                __int16 v11 = 9;
LABEL_55:
                *(_WORD *)(v10 + 22) = v11;
                return;
              }
            }
          }
        }
        if (*(_DWORD *)(a1 + 48)) {
          __assert_rtn("ParseFalse", "reader.h", 889, "!HasParseError()");
        }
        goto LABEL_149;
      default:
        goto LABEL_29;
    }
  }
}

void sub_1C5D910E4(_Unwind_Exception *a1)
{
  *uint64_t v1 = v3;
  v1[1] = v2;
  _Unwind_Resume(a1);
}

double rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  long long v25 = *a2;
  uint64_t v26 = a2;
  if (*(unsigned char *)v25 != 34) {
    __assert_rtn("ParseString", "reader.h", 961, "s.Peek() == '\\\"'");
  }
  uint64_t v5 = (unsigned __int8 *)(v25 + 1);
  *(void *)&long long v25 = v25 + 1;
  *(void *)uint64_t v23 = a1;
  unsigned int v24 = 0;
  while (1)
  {
    while (1)
    {
      unsigned int v6 = *v5;
      if (v6 == 92) {
        break;
      }
      if (v6 == 34)
      {
        *(void *)&long long v25 = v5 + 1;
        *(unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(void **)v23, 1) = 0;
        ++v24;
        if (!*(_DWORD *)(a1 + 48))
        {
          unsigned int v15 = v24;
          uint64_t v16 = (const char *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>::Pop(*(uint64_t *)v23, v24);
          rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::String(a3, v16, v15 - 1);
        }
        goto LABEL_27;
      }
      if (v6 <= 0x1F)
      {
        int v17 = *(_DWORD *)(a1 + 48);
        if (*v5)
        {
          if (!v17)
          {
            int v18 = &v5[-*((void *)&v25 + 1)];
            int v19 = 12;
            goto LABEL_26;
          }
          int v21 = 1044;
        }
        else
        {
          if (!v17)
          {
            int v18 = &v5[-*((void *)&v25 + 1)];
            int v19 = 11;
            goto LABEL_26;
          }
          int v21 = 1042;
        }
        goto LABEL_31;
      }
      *(void *)&long long v25 = ++v5;
      int v7 = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(void **)v23, 1);
LABEL_7:
      *int v7 = v6;
      ++v24;
    }
    uint64_t v8 = v5[1];
    *(void *)&long long v25 = v5 + 1;
    LOBYTE(v6) = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseStringToStream<0u,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(rapidjson::GenericStringStream<rapidjson::UTF8<char>> &,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char> &)::escape[v8];
    if ((_BYTE)v6)
    {
      v5 += 2;
      *(void *)&long long v25 = v5;
      int v7 = (unsigned char *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(void **)v23, 1);
      goto LABEL_7;
    }
    if (v8 != 117)
    {
      if (!*(_DWORD *)(a1 + 48))
      {
        int v19 = 10;
        int v18 = &v5[-*((void *)&v25 + 1)];
        goto LABEL_26;
      }
      int v21 = 1033;
LABEL_31:
      __assert_rtn("ParseStringToStream", "reader.h", v21, "!HasParseError()");
    }
    *(void *)&long long v25 = v5 + 2;
    uint64_t v22 = (uint64_t)&v5[-*((void *)&v25 + 1)];
    unsigned int v9 = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(a1, (uint64_t *)&v25, (uint64_t)&v5[-*((void *)&v25 + 1)]);
    unsigned int v10 = v9;
    if (*(_DWORD *)(a1 + 48)) {
      goto LABEL_27;
    }
    if (v9 >> 10 == 54) {
      break;
    }
LABEL_13:
    rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>((void **)v23, v10);
    uint64_t v5 = (unsigned __int8 *)v25;
  }
  uint64_t v11 = v25;
  if (*(unsigned char *)v25 == 92)
  {
    int v12 = *(unsigned __int8 *)(v25 + 1);
    *(void *)&long long v25 = v25 + 1;
    if (v12 == 117)
    {
      unsigned int v13 = v9;
      *(void *)&long long v25 = v11 + 2;
      int v14 = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(a1, (uint64_t *)&v25, v22);
      if (*(_DWORD *)(a1 + 48)) {
        goto LABEL_27;
      }
      if ((v14 - 57344) >= 0xFFFFFC00)
      {
        unsigned int v10 = ((v14 - 56320) | ((v13 << 10) - 56623104)) + 0x10000;
        goto LABEL_13;
      }
    }
  }
  int v19 = 9;
  int v18 = (unsigned __int8 *)v22;
LABEL_26:
  *(_DWORD *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v18;
LABEL_27:
  double result = *(double *)&v25;
  *uint64_t v26 = v25;
  return result;
}

void sub_1C5D913B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, _OWORD *a14)
{
  *a14 = a13;
  _Unwind_Resume(a1);
}

void siri::dialogengine::TestCase::GetTemplateDir(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void siri::dialogengine::TestCase::GetRelativePath(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
}

void siri::dialogengine::TestCase::GetCatId(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((void *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 8);
  }
}

void siri::dialogengine::TestCase::GetPatternId(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((void *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 11);
  }
}

void siri::dialogengine::TestCase::GetLocale(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 12), *((void *)this + 13));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 14);
  }
}

uint64_t siri::dialogengine::TestCase::IsDebug(siri::dialogengine::TestCase *this)
{
  return *((unsigned __int8 *)this + 120);
}

void siri::dialogengine::TestCase::GetName(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 151) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 16), *((void *)this + 17));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 18);
  }
}

void siri::dialogengine::TestCase::GetDescription(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 175) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 19), *((void *)this + 20));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 152);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 21);
  }
}

uint64_t siri::dialogengine::TestCase::IsEnabled(siri::dialogengine::TestCase *this)
{
  return *((unsigned __int8 *)this + 224);
}

uint64_t siri::dialogengine::TestCase::GetSkipIfNoMorphun(siri::dialogengine::TestCase *this)
{
  return *((unsigned __int8 *)this + 225);
}

BOOL siri::dialogengine::TestCase::ShouldSkip(const std::string *this)
{
  siri::dialogengine::TestCase::GetSkipReason(this, v3);
  if ((v4 & 0x80000000) == 0) {
    return v4 != 0;
  }
  BOOL v1 = v3[1] != 0;
  operator delete(v3[0]);
  return v1;
}

void *siri::dialogengine::TestCase::GetSkipReason@<X0>(const std::string *this@<X0>, void *a2@<X8>)
{
  if (this[9].__r_.__value_.__s.__data_[8])
  {
    if (this[9].__r_.__value_.__s.__data_[9] && !siri::dialogengine::AreMorphunAssetsAvailable(this + 4)) {
      uint64_t v3 = "morphun assets not available";
    }
    else {
      uint64_t v3 = "";
    }
  }
  else
  {
    uint64_t v3 = "test is disabled";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void siri::dialogengine::TestCase::ToString(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0) {
    uint64_t v4 = *((void *)this + 7);
  }
  else {
    uint64_t v4 = *((unsigned __int8 *)this + 71);
  }
  if (v4) {
    uint64_t v5 = 48;
  }
  else {
    uint64_t v5 = 72;
  }
  if (v4) {
    unsigned int v6 = (char *)this + 48;
  }
  else {
    unsigned int v6 = (char *)this + 72;
  }
  if (v6[23] >= 0) {
    size_t v7 = v6[23];
  }
  else {
    size_t v7 = *((void *)v6 + 1);
  }
  uint64_t v8 = &v24;
  std::string::basic_string[abi:ne180100]((uint64_t)&v24, v7 + 2);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v8 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if (v6[23] >= 0) {
      unsigned int v9 = v6;
    }
    else {
      unsigned int v9 = *(const void **)((char *)this + v5);
    }
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, " (");
  int v10 = *((char *)this + 119);
  if (v10 >= 0) {
    uint64_t v11 = (char *)this + 96;
  }
  else {
    uint64_t v11 = (const std::string::value_type *)*((void *)this + 12);
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *((unsigned __int8 *)this + 119);
  }
  else {
    std::string::size_type v12 = *((void *)this + 13);
  }
  unsigned int v13 = std::string::append(&v24, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  unsigned int v15 = std::string::append(&v25, "): ");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  int v19 = (const std::string::value_type *)*((void *)this + 16);
  int v18 = (char *)this + 128;
  int v17 = v19;
  int v20 = v18[23];
  if (v20 >= 0) {
    int v21 = v18;
  }
  else {
    int v21 = v17;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = v18[23];
  }
  else {
    std::string::size_type v22 = *((void *)v18 + 1);
  }
  uint64_t v23 = std::string::append(&v26, v21, v22);
  *a2 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1C5D9178C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::TestCase::GetJSONRequest(siri::dialogengine::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 199) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 22), *((void *)this + 23));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 11);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 24);
  }
}

void *siri::dialogengine::TestCase::GetExpectedConditions@<X0>(siri::dialogengine::TestCase *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::Condition>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Condition>*,std::shared_ptr<siri::dialogengine::Condition>*>(a2, *((void **)this + 25), *((void **)this + 26), (uint64_t)(*((void *)this + 26) - *((void *)this + 25)) >> 4);
}

void *std::vector<std::shared_ptr<siri::dialogengine::Condition>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Condition>*,std::shared_ptr<siri::dialogengine::Condition>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v6 = result;
    double result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(a4);
    void *v6 = result;
    v6[1] = result;
    for (void v6[2] = &result[2 * v7]; a2 != a3; a2 += 2)
    {
      *double result = *a2;
      uint64_t v8 = a2[1];
      result[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      result += 2;
    }
    v6[1] = result;
  }
  return result;
}

void sub_1C5D918C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

BOOL siri::dialogengine::TestCase::HasErrors(siri::dialogengine::TestCase *this)
{
  return *((void *)this + 29) != *((void *)this + 30);
}

std::string *siri::dialogengine::TestCase::GetErrors@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[29], this[30], 0xAAAAAAAAAAAAAAABLL * (((char *)this[30] - (char *)this[29]) >> 3));
}

void InitDefaultsscc_info_CustomCanvas_CustomCanvas_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CustomCanvas.pb.cc", a4);
  SnippetUI::CustomCanvas::CustomCanvas((SnippetUI::CustomCanvas *)&SnippetUI::_CustomCanvas_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_CustomCanvas_default_instance_, v4);
}

SnippetUI::CustomCanvas *SnippetUI::CustomCanvas::CustomCanvas(SnippetUI::CustomCanvas *this)
{
  *(void *)this = &unk_1F211B5F0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 13) = 0;
  if (atomic_load_explicit(scc_info_CustomCanvas_CustomCanvas_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_CustomCanvas_CustomCanvas_2eproto);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_WORD *)this + 24) = 0;
  *((unsigned char *)this + 50) = 0;
  return this;
}

void sub_1C5D91A00(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::CustomCanvas::GetMetadata(SnippetUI::CustomCanvas *this)
{
  return file_level_metadata_CustomCanvas_2eproto;
}

uint64_t SnippetUI::CustomCanvas::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 52) = a2;
  return this;
}

void SnippetUI::CustomCanvas::MergeFrom(SnippetUI::CustomCanvas *this, const google::protobuf::Message *lpsrc)
{
  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CustomCanvas.pb.cc", 383);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    SnippetUI::CustomCanvas::MergeFrom(this, v5);
  }
  else {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
  }
}

void sub_1C5D91B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::CustomCanvas::MergeFrom(SnippetUI::CustomCanvas *this, const SnippetUI::CustomCanvas *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CustomCanvas.pb.cc", 398);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::CustomCanvas *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  char v7 = (uint64_t *)*((void *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 16, v6);
    }
    std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_21;
  }
  unsigned int v9 = (uint64_t *)*((void *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, v8);
    }
    std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  uint64_t v10 = *((void *)a2 + 4);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(void *)(v10 + 8)) {
      goto LABEL_29;
    }
  }
  else if (!*(unsigned char *)(v10 + 23))
  {
    goto LABEL_29;
  }
  uint64_t v11 = (uint64_t *)*((void *)this + 4);
  if (v11 != (uint64_t *)v10)
  {
    if (v11 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 32, v10);
    }
    std::string::operator=(*((std::string **)this + 4), (const std::string *)v10);
  }
LABEL_29:
  uint64_t v12 = *((void *)a2 + 5);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(void *)(v12 + 8)) {
      goto LABEL_37;
    }
  }
  else if (!*(unsigned char *)(v12 + 23))
  {
    goto LABEL_37;
  }
  unsigned int v13 = (uint64_t *)*((void *)this + 5);
  if (v13 != (uint64_t *)v12)
  {
    if (v13 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 40, v12);
    }
    std::string::operator=(*((std::string **)this + 5), (const std::string *)v12);
  }
LABEL_37:
  if (*((unsigned char *)a2 + 48)) {
    *((unsigned char *)this + 48) = 1;
  }
  if (*((unsigned char *)a2 + 49)) {
    *((unsigned char *)this + 49) = 1;
  }
  if (*((unsigned char *)a2 + 50)) {
    *((unsigned char *)this + 50) = 1;
  }
}

void sub_1C5D91D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::CustomCanvas::CopyFrom(SnippetUI::CustomCanvas *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::CustomCanvas::Clear(this);
    SnippetUI::CustomCanvas::MergeFrom(this, a2);
  }
}

void SnippetUI::CustomCanvas::Clear(SnippetUI::CustomCanvas *this)
{
  uint64_t v1 = *((void *)this + 2);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  uint64_t v2 = *((void *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 4);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 5);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
  char v6 = *((unsigned char *)this + 8);
  uint64_t v5 = (char *)this + 8;
  v5[42] = 0;
  *((_WORD *)v5 + 20) = 0;
  if (v6) {
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v5);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::CustomCanvas::InternalSerializeWithCachedSizesToArray(SnippetUI::CustomCanvas *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char v7 = (google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    uint64_t v8 = (const char *)*((void *)v7 + 1);
    if (!v8) {
      goto LABEL_7;
    }
    char v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  uint64_t v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((unsigned char *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.CustomCanvas.bundle_name");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 2), a2);
  }
LABEL_7:
  unsigned int v9 = (google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v9 + 23) < 0)
  {
    uint64_t v10 = (const char *)*((void *)v9 + 1);
    if (!v10) {
      goto LABEL_13;
    }
    unsigned int v9 = *(google::protobuf::internal **)v9;
    goto LABEL_12;
  }
  uint64_t v10 = (const char *)*((unsigned __int8 *)v9 + 23);
  if (*((unsigned char *)v9 + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v9, v10, 1, (google::protobuf::internal *)"SnippetUI.CustomCanvas.view_id");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((const void ***)this + 3), a2);
  }
LABEL_13:
  uint64_t v11 = *((void *)this + 4);
  if ((*(char *)(v11 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v11 + 23)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (*(void *)(v11 + 8)) {
LABEL_15:
  }
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, (const void **)v11, a2);
LABEL_16:
  uint64_t v12 = (google::protobuf::internal *)*((void *)this + 5);
  if (*((char *)v12 + 23) < 0)
  {
    unsigned int v13 = (const char *)*((void *)v12 + 1);
    if (!v13) {
      goto LABEL_24;
    }
    uint64_t v12 = *(google::protobuf::internal **)v12;
    goto LABEL_23;
  }
  unsigned int v13 = (const char *)*((unsigned __int8 *)v12 + 23);
  if (*((unsigned char *)v12 + 23))
  {
LABEL_23:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, v13, 1, (google::protobuf::internal *)"SnippetUI.CustomCanvas.component_name");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((const void ***)this + 5), a2);
  }
LABEL_24:
  if (*((unsigned char *)this + 48))
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned __int8 v14 = *((unsigned char *)this + 48);
    }
    else
    {
      unsigned __int8 v14 = 1;
    }
    *a2 = 48;
    a2[1] = v14;
    a2 += 2;
  }
  if (*((unsigned char *)this + 49))
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned __int8 v15 = *((unsigned char *)this + 49);
    }
    else
    {
      unsigned __int8 v15 = 1;
    }
    *a2 = 56;
    a2[1] = v15;
    a2 += 2;
  }
  if (*((unsigned char *)this + 50))
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      unsigned __int8 v16 = *((unsigned char *)this + 50);
    }
    else
    {
      unsigned __int8 v16 = 1;
    }
    *a2 = 64;
    a2[1] = v16;
    a2 += 2;
  }
  uint64_t v17 = *((void *)this + 1);
  if ((v17 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)a2;
  }
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v17 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

google::protobuf::internal *SnippetUI::CustomCanvas::_InternalParse(SnippetUI::CustomCanvas *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int v35 = a2;
  uint64_t v5 = (std::string **)((char *)this + 40);
  char v6 = (std::string **)((char *)this + 32);
  char v7 = (std::string **)((char *)this + 24);
  uint64_t v8 = (std::string **)((char *)this + 16);
  unsigned int v9 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v35, *((_DWORD *)a3 + 23))) {
      return v35;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v35 + 1);
    uint64_t v12 = (char *)*(unsigned __int8 *)v35;
    if ((*(char *)v35 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v12 = (char *)(v12 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = (google::protobuf::internal *)((char *)v35 + 2);
LABEL_6:
      unsigned int v35 = TagFallback;
      goto LABEL_7;
    }
    TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v35, v12);
    unsigned int v35 = TagFallback;
    if (!TagFallback) {
      return TagFallback;
    }
LABEL_7:
    switch(v12 >> 3)
    {
      case 2u:
        if (v12 != 18) {
          goto LABEL_42;
        }
        unsigned int v13 = *v8;
        if (*v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned __int8 v14 = (std::string::value_type *)TagFallback;
        unsigned __int8 v15 = a3;
        unsigned __int8 v16 = "SnippetUI.CustomCanvas.bundle_name";
        goto LABEL_26;
      case 3u:
        if (v12 != 26) {
          goto LABEL_42;
        }
        unsigned int v13 = *v7;
        if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned __int8 v14 = (std::string::value_type *)TagFallback;
        unsigned __int8 v15 = a3;
        unsigned __int8 v16 = "SnippetUI.CustomCanvas.view_id";
        goto LABEL_26;
      case 4u:
        if (v12 != 34) {
          goto LABEL_42;
        }
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        uint64_t v17 = google::protobuf::internal::InlineGreedyStringParser(*v6, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_47;
      case 5u:
        if (v12 != 42) {
          goto LABEL_42;
        }
        unsigned int v13 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        unsigned __int8 v14 = (std::string::value_type *)TagFallback;
        unsigned __int8 v15 = a3;
        unsigned __int8 v16 = "SnippetUI.CustomCanvas.component_name";
LABEL_26:
        uint64_t v17 = google::protobuf::internal::InlineGreedyStringParserUTF8(v13, v14, (uint64_t)v15, (google::protobuf::internal *)v16);
        goto LABEL_47;
      case 6u:
        if (v12 != 48) {
          goto LABEL_42;
        }
        int v18 = (google::protobuf::internal *)((char *)TagFallback + 1);
        unint64_t v19 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_31;
        }
        int v20 = *(char *)v18;
        unint64_t v19 = v19 + (v20 << 7) - 128;
        if (v20 < 0)
        {
          __n128 v28 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v19);
          unsigned int v35 = v28;
          *((unsigned char *)this + 48) = v29 != 0;
          if (!v28) {
            goto LABEL_54;
          }
        }
        else
        {
          int v18 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_31:
          unsigned int v35 = v18;
          *((unsigned char *)this + 48) = v19 != 0;
        }
        continue;
      case 7u:
        if (v12 != 56) {
          goto LABEL_42;
        }
        int v21 = (google::protobuf::internal *)((char *)TagFallback + 1);
        unint64_t v22 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_36;
        }
        int v23 = *(char *)v21;
        unint64_t v22 = v22 + (v23 << 7) - 128;
        if (v23 < 0)
        {
          unsigned int v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v22);
          unsigned int v35 = v30;
          *((unsigned char *)this + 49) = v31 != 0;
          if (!v30) {
            goto LABEL_54;
          }
        }
        else
        {
          int v21 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_36:
          unsigned int v35 = v21;
          *((unsigned char *)this + 49) = v22 != 0;
        }
        continue;
      case 8u:
        if (v12 != 64) {
          goto LABEL_42;
        }
        std::string v24 = (google::protobuf::internal *)((char *)TagFallback + 1);
        unint64_t v25 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_41;
        }
        int v26 = *(char *)v24;
        unint64_t v25 = v25 + (v26 << 7) - 128;
        if (v26 < 0)
        {
          uint64_t v32 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v25);
          unsigned int v35 = v32;
          *((unsigned char *)this + 50) = v33 != 0;
          if (!v32) {
            goto LABEL_54;
          }
        }
        else
        {
          std::string v24 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_41:
          unsigned int v35 = v24;
          *((unsigned char *)this + 50) = v25 != 0;
        }
        continue;
      default:
LABEL_42:
        if (v12) {
          BOOL v27 = (v12 & 7) == 4;
        }
        else {
          BOOL v27 = 1;
        }
        if (v27)
        {
          *((_DWORD *)a3 + 20) = v12 - 1;
          return TagFallback;
        }
        uint64_t v17 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, v9, TagFallback, a3, v10);
LABEL_47:
        unsigned int v35 = (google::protobuf::internal *)v17;
        if (v17) {
          continue;
        }
LABEL_54:
        TagFallbacuint64_t k = 0;
        break;
    }
    return TagFallback;
  }
}