id sub_2289507D8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  objc_class *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t vars8;

  v5 = (objc_class *)MEMORY[0x263EFFA40];
  v6 = a4;
  v7 = a3;
  v8 = (void *)[[v5 alloc] _initWithSuiteName:v7 container:v6];

  return v8;
}

void type metadata accessor for __BFMResourceType(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for MCatalogServiceConfig(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  id v4 = v3;
  return a1;
}

void destroy for MCatalogServiceConfig(uint64_t a1)
{
}

uint64_t assignWithCopy for MCatalogServiceConfig(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  v3 = *(void **)(a1 + 8);
  id v4 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  id v5 = v4;

  return a1;
}

__n128 initializeWithTake for MCatalogServiceConfig(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for MCatalogServiceConfig(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for MCatalogServiceConfig(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MCatalogServiceConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MCatalogRequestHandler()
{
  return &type metadata for MCatalogRequestHandler;
}

__n128 sub_2289509E4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_2289509FC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_228950A1C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

void type metadata accessor for Decimal(uint64_t a1)
{
}

unint64_t sub_228950A5C(char a1)
{
  unint64_t result = 0xD000000000000028;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000034;
      break;
    case 2:
      unint64_t result = 0xD00000000000007FLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000029;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_228950AE4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t _s14BookFoundation11ContentKindO9hashValueSivg_0()
{
  return sub_2289DF590();
}

uint64_t sub_228950B40()
{
  return sub_2289DF570();
}

uint64_t sub_228950B6C()
{
  return sub_2289DF590();
}

unint64_t sub_228950BC0()
{
  return sub_228950A5C(*v0);
}

uint64_t sub_228950BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 48) = a3;
  *(void *)(v7 + 56) = a4;
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  *(unsigned char *)(v7 + 104) = *(unsigned char *)v6;
  uint64_t v8 = *(void *)(v6 + 8);
  *(void *)(v7 + 64) = a6;
  *(void *)(v7 + 72) = v8;
  return MEMORY[0x270FA2498](sub_228950BFC, 0, 0);
}

uint64_t sub_228950BFC()
{
  uint64_t v1 = *(void *)(v0 + 72);
  *(unsigned char *)(v0 + 16) = *(unsigned char *)(v0 + 104);
  *(void *)(v0 + 24) = v1;
  id v2 = objc_msgSend(self, sel_defaultBag);
  *(void *)(v0 + 80) = v2;
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 88) = v3;
  *(void *)uint64_t v3 = v0;
  *(void *)(v3 + 8) = sub_228950D18;
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 32);
  long long v7 = *(_OWORD *)(v0 + 40);
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 160) = v4;
  *(void *)(v3 + 136) = v2;
  *(void *)(v3 + 144) = &unk_268283FC0;
  *(void *)(v3 + 128) = v5;
  *(_OWORD *)(v3 + 112) = v7;
  *(void *)(v3 + 104) = v6;
  *(unsigned char *)(v3 + 320) = *(unsigned char *)(v0 + 16);
  *(void *)(v3 + 168) = *(void *)(v0 + 24);
  return MEMORY[0x270FA2498](sub_2289511C4, 0, 0);
}

uint64_t sub_228950D18(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 96) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](sub_228950E70, 0, 0);
  }
  else
  {

    uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
    return v6(a1);
  }
}

uint64_t sub_228950E70()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_228950ED4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(unsigned char *)(a1 + 56);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  uint64_t v5 = *(void *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 32) = v4;
  *(_OWORD *)(v1 + 48) = v6;
  *(void *)(v1 + 64) = v2;
  *(unsigned char *)(v1 + 72) = v3;
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(a1 + 64);
  *(void *)(v1 + 96) = v5;
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 104) = v7;
  *long long v7 = v1;
  v7[1] = sub_228950F98;
  return MCatalogRequest.fetch()();
}

uint64_t sub_228950F98(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_228951170;
  }
  else
  {
    *(void *)(v4 + 120) = a1;
    uint64_t v5 = sub_2289510C0;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_2289510C0()
{
  uint64_t v1 = *(void **)(v0 + 120);
  id v2 = objc_msgSend(v1, sel_responseDataItems);

  if (v2)
  {
    sub_228952BB0(&qword_268284000);
    uint64_t v3 = sub_2289DEE20();
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

uint64_t sub_228951170()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_228951188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 152) = a7;
  *(void *)(v9 + 160) = a8;
  *(void *)(v9 + 136) = a5;
  *(void *)(v9 + 144) = a6;
  *(void *)(v9 + 120) = a3;
  *(void *)(v9 + 128) = a4;
  *(void *)(v9 + 104) = a1;
  *(void *)(v9 + 112) = a2;
  *(unsigned char *)(v9 + 320) = *(unsigned char *)v8;
  *(void *)(v9 + 168) = *(void *)(v8 + 8);
  return MEMORY[0x270FA2498](sub_2289511C4, 0, 0);
}

uint64_t sub_2289511C4()
{
  uint64_t v56 = v0;
  char v1 = *(unsigned char *)(v0 + 320);
  unint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void **)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  unint64_t v6 = sub_228951A1C(*(void *)(v0 + 104));
  LOBYTE(v47) = v1;
  swift_bridgeObjectRetain();
  id v7 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2289B57AC(v6, v5, v4, v2, 0, 0, v7, (char *)&v47, (uint64_t)&v36);
  uint64_t v8 = *(void **)(v0 + 168);
  char v9 = *(unsigned char *)(v0 + 320);
  v10 = *(int **)(v0 + 144);
  uint64_t v11 = v36;
  uint64_t v12 = v37;
  *(void *)(v0 + 176) = v36;
  *(void *)(v0 + 184) = v12;
  uint64_t v13 = v38;
  uint64_t v14 = v39;
  *(void *)(v0 + 192) = v38;
  *(void *)(v0 + 200) = v14;
  v15 = v40;
  char v16 = v41;
  uint64_t v17 = v42;
  uint64_t v18 = v43;
  *(void *)(v0 + 208) = v40;
  *(void *)(v0 + 216) = v18;
  *(void *)&long long v47 = v11;
  *((void *)&v47 + 1) = v12;
  uint64_t v48 = v13;
  uint64_t v49 = v14;
  v50 = v15;
  char v51 = v16;
  uint64_t v52 = v17;
  uint64_t v53 = v18;
  v54[0] = v9;
  v55 = v8;
  v19 = self;
  id v20 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v21 = v15;
  swift_bridgeObjectRetain();
  MCatalogRequest.init(with:config:bag:)(&v47, (uint64_t)v54, objc_msgSend(v19, sel_defaultBag), (uint64_t)&v36);
  uint64_t v22 = v36;
  uint64_t v23 = v37;
  *(void *)(v0 + 224) = v36;
  *(void *)(v0 + 232) = v23;
  uint64_t v24 = v38;
  uint64_t v25 = v39;
  *(void *)(v0 + 240) = v38;
  *(void *)(v0 + 248) = v25;
  v26 = v40;
  uint64_t v27 = v41;
  *(void *)(v0 + 256) = v40;
  *(void *)(v0 + 264) = v27;
  uint64_t v28 = v42;
  char v29 = v43;
  uint64_t v30 = v44;
  uint64_t v31 = v45;
  *(void *)(v0 + 272) = v42;
  *(void *)(v0 + 280) = v31;
  uint64_t v32 = v46;
  *(void *)(v0 + 288) = v46;
  *(void *)(v0 + 16) = v22;
  *(void *)(v0 + 24) = v23;
  *(void *)(v0 + 32) = v24;
  *(void *)(v0 + 40) = v25;
  *(void *)(v0 + 48) = v26;
  *(void *)(v0 + 56) = v27;
  *(void *)(v0 + 64) = v28;
  *(unsigned char *)(v0 + 72) = v29;
  *(void *)(v0 + 80) = v30;
  *(void *)(v0 + 88) = v31;
  *(void *)(v0 + 96) = v32;
  v35 = (uint64_t (*)(uint64_t))((char *)v10 + *v10);
  v33 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v33;
  void *v33 = v0;
  v33[1] = sub_228951470;
  return v35(v0 + 16);
}

uint64_t sub_228951470(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 304) = a1;
  *(void *)(v3 + 312) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_228951908;
  }
  else {
    uint64_t v4 = sub_228951584;
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t sub_228951584()
{
  uint64_t v31 = v0;
  uint64_t v1 = *(void *)(v0 + 304);
  if (v1)
  {
    uint64_t v2 = sub_2289DEA60();
    uint64_t v29 = v2;
    uint64_t v3 = *(void *)(v1 + 16);
    if (v3)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = 0;
      do
      {
        uint64_t v6 = *(void *)(v0 + 160);
        uint64_t v5 = *(void **)(v0 + 168);
        uint64_t v7 = *(void *)(v1 + 8 * v4++ + 32);
        int v8 = *(unsigned __int8 *)(v0 + 320);
        uint64_t v30 = v7;
        swift_bridgeObjectRetain();
        sub_228951C50(&v30, v8, v5, (uint64_t)&v29, v6);
        swift_bridgeObjectRelease();
      }
      while (v3 != v4);
      uint64_t v27 = *(void **)(v0 + 288);
      v10 = *(void **)(v0 + 224);
      char v9 = *(void **)(v0 + 232);
      uint64_t v11 = *(void **)(v0 + 208);
      uint64_t v24 = *(void **)(v0 + 272);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v12 = v29;
    }
    else
    {
      uint64_t v12 = v2;
      uint64_t v28 = *(void **)(v0 + 288);
      v19 = *(void **)(v0 + 224);
      uint64_t v18 = *(void **)(v0 + 232);
      id v20 = *(void **)(v0 + 208);
      v26 = *(void **)(v0 + 272);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    id v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v21(v12);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 232);
    uint64_t v14 = *(void **)(v0 + 224);
    uint64_t v25 = *(void **)(v0 + 208);
    uint64_t v23 = *(void **)(v0 + 288);
    uint64_t v22 = *(void **)(v0 + 272);
    sub_22895259C();
    swift_allocError();
    unsigned char *v15 = 1;
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
}

uint64_t sub_228951908()
{
  uint64_t v7 = (void *)v0[36];
  uint64_t v1 = (void *)v0[28];
  uint64_t v2 = (void *)v0[29];
  uint64_t v3 = (void *)v0[26];
  uint64_t v6 = (void *)v0[34];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_228951A1C(uint64_t a1)
{
  uint64_t v1 = sub_228952194(a1);
  uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  uint64_t v30 = (void *)MEMORY[0x263F8EE80];
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = (unsigned __int8 *)(v1 + 48);
    while (1)
    {
      uint64_t v6 = *((void *)v4 - 2);
      uint64_t v7 = *((void *)v4 - 1);
      unsigned __int8 v8 = *v4;
      unint64_t v9 = sub_2289D7000(*v4);
      uint64_t v11 = v2[2];
      BOOL v12 = (v10 & 1) == 0;
      uint64_t v13 = v11 + v12;
      if (__OFADD__(v11, v12)) {
        break;
      }
      unint64_t v14 = v9;
      char v15 = v10;
      uint64_t v16 = v2[3];
      swift_bridgeObjectRetain();
      if (v16 < v13)
      {
        sub_228996924(v13, 1);
        uint64_t v2 = v30;
        unint64_t v17 = sub_2289D7000(v8);
        if ((v15 & 1) != (v18 & 1)) {
          goto LABEL_19;
        }
        unint64_t v14 = v17;
      }
      if (v15)
      {
        uint64_t v19 = v2[7];
        id v20 = *(void **)(v19 + 8 * v14);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v19 + 8 * v14) = v20;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          id v20 = sub_22896BD6C(0, v20[2] + 1, 1, v20);
          *(void *)(v19 + 8 * v14) = v20;
        }
        unint64_t v23 = v20[2];
        unint64_t v22 = v20[3];
        if (v23 >= v22 >> 1)
        {
          id v20 = sub_22896BD6C((void *)(v22 > 1), v23 + 1, 1, v20);
          *(void *)(v19 + 8 * v14) = v20;
        }
        v20[2] = v23 + 1;
        uint64_t v5 = &v20[3 * v23];
        v5[4] = v6;
        v5[5] = v7;
        *((unsigned char *)v5 + 48) = v8;
      }
      else
      {
        sub_228952BB0(&qword_268283FE0);
        uint64_t v24 = swift_allocObject();
        *(_OWORD *)(v24 + 16) = xmmword_2289E0340;
        *(void *)(v24 + 32) = v6;
        *(void *)(v24 + 40) = v7;
        *(unsigned char *)(v24 + 48) = v8;
        v2[(v14 >> 6) + 8] |= 1 << v14;
        *(unsigned char *)(v2[6] + v14) = v8;
        *(void *)(v2[7] + 8 * v14) = v24;
        uint64_t v25 = v2[2];
        BOOL v26 = __OFADD__(v25, 1);
        uint64_t v27 = v25 + 1;
        if (v26) {
          goto LABEL_18;
        }
        v2[2] = v27;
      }
      v4 += 24;
      if (!--v3) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    sub_228952BB0(&qword_268283FE8);
    uint64_t result = sub_2289DF500();
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v28 = sub_228952C88((uint64_t)v2);
    swift_release();
    return v28;
  }
  return result;
}

void sub_228951C50(uint64_t *a1, int a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v49 = a3;
  LODWORD(v42) = a2;
  uint64_t v9 = sub_2289DF130();
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v10 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  BOOL v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  char v15 = (char *)v39 - v14;
  uint64_t v41 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a1;
  uint64_t v43 = 1701869940;
  uint64_t v44 = 0xE400000000000000;
  sub_2289DF200();
  if (*(void *)(v18 + 16) && (unint64_t v19 = sub_2289D7160((uint64_t)&v45), (v20 & 1) != 0))
  {
    sub_228952C2C(*(void *)(v18 + 56) + 32 * v19, (uint64_t)&v47);
  }
  else
  {
    long long v47 = 0u;
    long long v48 = 0u;
  }
  sub_228952AFC((uint64_t)&v45);
  if (*((void *)&v48 + 1))
  {
    if (swift_dynamicCast())
    {
      v39[1] = a4;
      uint64_t v21 = static MResourceType.classType(for:)(v43, v44);
      swift_bridgeObjectRelease();
      if (v21)
      {
        LOBYTE(v45) = v42;
        id v46 = v49;
        uint64_t v42 = v5;
        unint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t *))(v21 + 128);
        id v23 = v49;
        uint64_t v24 = swift_bridgeObjectRetain();
        uint64_t v25 = v22(v24, &v45);
        if (v25)
        {
          BOOL v26 = (void *)v25;
          uint64_t v27 = *(void **)(v25 + OBJC_IVAR____TtC14BookFoundation9MResource_id + 8);
          id v49 = *(id *)(v25 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
          uint64_t v45 = v25;
          type metadata accessor for MResource();
          swift_bridgeObjectRetain();
          id v28 = v26;
          char v29 = swift_dynamicCast();
          uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
          if (v29)
          {
            uint64_t v31 = v41;
            v30(v15, 0, 1, a5);
            (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v17, v15, a5);
            (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v12, v17, a5);
            v30(v12, 0, 1, a5);
            uint64_t v45 = (uint64_t)v49;
            id v46 = v27;
            sub_2289DEAC0();
            sub_2289DEAF0();

            (*(void (**)(char *, uint64_t))(v31 + 8))(v17, a5);
          }
          else
          {
            v30(v15, 1, 1, a5);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v9);
            if (qword_268283E78 != -1) {
              swift_once();
            }
            uint64_t v32 = sub_2289DEA10();
            sub_228952BF4(v32, (uint64_t)qword_2682841A0);
            v33 = sub_2289DE9F0();
            os_log_type_t v34 = sub_2289DF0A0();
            if (os_log_type_enabled(v33, v34))
            {
              v35 = (uint8_t *)swift_slowAlloc();
              uint64_t v36 = swift_slowAlloc();
              uint64_t v45 = v36;
              *(_DWORD *)v35 = 136315138;
              swift_getMetatypeMetadata();
              uint64_t v37 = sub_2289DF620();
              *(void *)&long long v47 = sub_22897ACBC(v37, v38, &v45);
              sub_2289DF150();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_22894E000, v33, v34, "Failed to cast dataItem response to expected Resource type of: %s", v35, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x22A6A29E0](v36, -1, -1);
              MEMORY[0x22A6A29E0](v35, -1, -1);
            }
            else
            {
            }
          }
        }
      }
    }
  }
  else
  {
    sub_228952B50((uint64_t)&v47);
  }
}

uint64_t sub_228952194(uint64_t a1)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v21 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  uint64_t v7 = (void *)MEMORY[0x263F8EE78];
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v8 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v6 << 6))
  {
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    char v16 = *(unsigned char *)(*(void *)(a1 + 56) + i);
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_22896BD6C(0, v7[2] + 1, 1, v7);
      uint64_t v7 = (void *)result;
    }
    unint64_t v18 = v7[2];
    unint64_t v17 = v7[3];
    if (v18 >= v17 >> 1)
    {
      uint64_t result = (uint64_t)sub_22896BD6C((void *)(v17 > 1), v18 + 1, 1, v7);
      uint64_t v7 = (void *)result;
    }
    v7[2] = v18 + 1;
    unint64_t v19 = &v7[3 * v18];
    v19[4] = v15;
    v19[5] = v14;
    *((unsigned char *)v19 + 48) = v16;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v21) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v20 + 8 * v10);
    ++v6;
    if (!v11)
    {
      int64_t v6 = v10 + 1;
      if (v10 + 1 >= v21) {
        goto LABEL_27;
      }
      unint64_t v11 = *(void *)(v20 + 8 * v6);
      if (!v11)
      {
        int64_t v6 = v10 + 2;
        if (v10 + 2 >= v21) {
          goto LABEL_27;
        }
        unint64_t v11 = *(void *)(v20 + 8 * v6);
        if (!v11)
        {
          int64_t v6 = v10 + 3;
          if (v10 + 3 >= v21) {
            goto LABEL_27;
          }
          unint64_t v11 = *(void *)(v20 + 8 * v6);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v4 = (v11 - 1) & v11;
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v21)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v7;
  }
  unint64_t v11 = *(void *)(v20 + 8 * v12);
  if (v11)
  {
    int64_t v6 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v6 >= v21) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v20 + 8 * v6);
    ++v12;
    if (v11) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_2289523BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = swift_task_alloc();
  *(void *)(v7 + 16) = v13;
  *(void *)uint64_t v13 = v7;
  *(void *)(v13 + 8) = sub_22895249C;
  *(void *)(v13 + 48) = a3;
  *(void *)(v13 + 56) = a4;
  *(void *)(v13 + 32) = a1;
  *(void *)(v13 + 40) = a2;
  *(unsigned char *)(v13 + 104) = *(unsigned char *)v6;
  uint64_t v14 = *(void *)(v6 + 8);
  *(void *)(v13 + 64) = a6;
  *(void *)(v13 + 72) = v14;
  return MEMORY[0x270FA2498](sub_228950BFC, 0, 0);
}

uint64_t sub_22895249C(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

unint64_t sub_22895259C()
{
  unint64_t result = qword_268283FD0;
  if (!qword_268283FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268283FD0);
  }
  return result;
}

uint64_t sub_2289525F0(uint64_t a1, uint64_t a2)
{
  return sub_228952960(a1, a2, MEMORY[0x263F07B58]);
}

uint64_t sub_228952614(uint64_t a1, id *a2)
{
  uint64_t result = sub_2289DEBA0();
  *a2 = 0;
  return result;
}

uint64_t sub_22895268C(uint64_t a1, id *a2)
{
  char v3 = sub_2289DEBB0();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_22895270C@<X0>(uint64_t *a1@<X8>)
{
  sub_2289DEBC0();
  uint64_t v2 = sub_2289DEB90();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_228952754(uint64_t a1)
{
  uint64_t v2 = sub_2289546B4(&qword_268284068, type metadata accessor for MCatalogRequestRelationship);
  uint64_t v3 = sub_2289546B4((unint64_t *)&unk_268284070, type metadata accessor for MCatalogRequestRelationship);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_228952810@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_2289DEB90();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_228952858@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_2289DEBC0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_228952884(uint64_t a1)
{
  uint64_t v2 = sub_2289546B4(&qword_268284058, type metadata accessor for MCatalogRequestView);
  uint64_t v3 = sub_2289546B4(&qword_268284060, type metadata accessor for MCatalogRequestView);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_228952948(uint64_t a1, uint64_t a2)
{
  return sub_228952960(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t sub_228952960(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_2289DEBC0();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_2289529A4()
{
  sub_2289DEBC0();
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2289529F8()
{
  sub_2289DEBC0();
  sub_2289DF560();
  sub_2289DEC40();
  uint64_t v0 = sub_2289DF590();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_228952A70()
{
  uint64_t v0 = sub_2289DEBC0();
  uint64_t v2 = v1;
  if (v0 == sub_2289DEBC0() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_2289DF480();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_228952AFC(uint64_t a1)
{
  return a1;
}

uint64_t sub_228952B50(uint64_t a1)
{
  uint64_t v2 = sub_228952BB0(&qword_26AECF7D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_228952BB0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_228952BF4(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_228952C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_228952C88(uint64_t a1)
{
  sub_228952BB0(&qword_268283FF0);
  uint64_t result = sub_2289DF390();
  uint64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v40 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v37 = v6;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v39 = result + 64;
  uint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t v36 = (void *)result;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v12 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    char v17 = *(unsigned char *)(*(void *)(v40 + 48) + i);
    uint64_t v18 = *(void *)(*(void *)(v40 + 56) + 8 * i);
    int64_t v19 = *(void *)(v18 + 16);
    if (v19)
    {
      char v41 = *(unsigned char *)(*(void *)(v40 + 48) + i);
      unint64_t v42 = v10;
      int64_t v43 = v4;
      uint64_t v44 = v11;
      swift_bridgeObjectRetain();
      sub_22896C428(0, v19, 0);
      uint64_t v20 = v44;
      int64_t v21 = (uint64_t *)(v18 + 40);
      do
      {
        uint64_t v22 = *(v21 - 1);
        uint64_t v23 = *v21;
        uint64_t v44 = v20;
        unint64_t v25 = *(void *)(v20 + 16);
        unint64_t v24 = *(void *)(v20 + 24);
        unint64_t v26 = v25 + 1;
        swift_bridgeObjectRetain();
        if (v25 >= v24 >> 1)
        {
          sub_22896C428(v24 > 1, v25 + 1, 1);
          uint64_t v20 = v44;
        }
        v21 += 3;
        *(void *)(v20 + 16) = v26;
        uint64_t v27 = v20 + 16 * v25;
        *(void *)(v27 + 32) = v22;
        *(void *)(v27 + 40) = v23;
        --v19;
      }
      while (v19);
      uint64_t v45 = sub_2289DEF90();
      uint64_t v3 = v36;
      uint64_t v11 = MEMORY[0x263F8EE78];
    }
    else
    {
      swift_bridgeObjectRetain();
      unint64_t v26 = *(void *)(v11 + 16);
      uint64_t v28 = sub_2289DEF90();
      uint64_t v45 = v28;
      if (!v26)
      {
        uint64_t v32 = v28;
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      char v41 = v17;
      unint64_t v42 = v10;
      int64_t v43 = v4;
      uint64_t v20 = v11;
    }
    char v29 = (uint64_t *)(v20 + 40);
    do
    {
      uint64_t v30 = *(v29 - 1);
      uint64_t v31 = *v29;
      swift_bridgeObjectRetain();
      sub_228952FEC(&v44, v30, v31);
      swift_bridgeObjectRelease();
      v29 += 2;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v32 = v45;
    unint64_t v10 = v42;
    int64_t v4 = v43;
    char v17 = v41;
LABEL_30:
    *(void *)(v39 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(unsigned char *)(v3[6] + i) = v17;
    *(void *)(v3[7] + 8 * i) = v32;
    uint64_t v33 = v3[2];
    BOOL v34 = __OFADD__(v33, 1);
    uint64_t v35 = v33 + 1;
    if (v34)
    {
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v3[2] = v35;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v38) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v37 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v38) {
        return (uint64_t)v3;
      }
      unint64_t v15 = *(void *)(v37 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v38) {
          return (uint64_t)v3;
        }
        unint64_t v15 = *(void *)(v37 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v10 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v38) {
    return (uint64_t)v3;
  }
  unint64_t v15 = *(void *)(v37 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v38) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v37 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_228952FEC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_2289DF560();
  swift_bridgeObjectRetain();
  sub_2289DEC40();
  uint64_t v8 = sub_2289DF590();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_2289DF480() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_2289DF480() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_228953848(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_22895319C(unsigned char *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  sub_2289DF560();
  sub_2289DF570();
  uint64_t v6 = sub_2289DF590();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_2289539E4(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  uint64_t result = 0;
  LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_2289532BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_228952BB0(&qword_268283FF8);
  uint64_t v3 = sub_2289DF220();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_2289DF560();
      sub_2289DEC40();
      uint64_t result = sub_2289DF590();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *uint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_22895359C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_228952BB0(&qword_268284008);
  uint64_t result = sub_2289DF220();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
      sub_2289DF560();
      sub_2289DF570();
      uint64_t result = sub_2289DF590();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_228953848(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  int64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_2289532BC();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_228953B34();
      goto LABEL_22;
    }
    sub_228953E7C();
  }
  uint64_t v11 = *v4;
  sub_2289DF560();
  sub_2289DEC40();
  uint64_t result = sub_2289DF590();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    int64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_2289DF480(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_2289DF4F0();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        char v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_2289DF480();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *unint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_2289539E4(uint64_t result, unint64_t a2, char a3)
{
  int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_22895359C();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_228953CE8();
      goto LABEL_14;
    }
    sub_22895412C();
  }
  uint64_t v8 = *v3;
  sub_2289DF560();
  sub_2289DF570();
  uint64_t result = sub_2289DF590();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == v5)
    {
LABEL_13:
      uint64_t result = sub_2289DF4F0();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v10 + a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v12 + 48) + a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void *sub_228953B34()
{
  uint64_t v1 = v0;
  sub_228952BB0(&qword_268283FF8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2289DF210();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_228953CE8()
{
  uint64_t v1 = v0;
  sub_228952BB0(&qword_268284008);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2289DF210();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_228953E7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_228952BB0(&qword_268283FF8);
  uint64_t v3 = sub_2289DF220();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_2289DF560();
    swift_bridgeObjectRetain();
    sub_2289DEC40();
    uint64_t result = sub_2289DF590();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_22895412C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_228952BB0(&qword_268284008);
  uint64_t result = sub_2289DF220();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
    sub_2289DF560();
    sub_2289DF570();
    uint64_t result = sub_2289DF590();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void type metadata accessor for MCatalogRequestView(uint64_t a1)
{
}

void type metadata accessor for MCatalogRequestRelationship(uint64_t a1)
{
}

void sub_2289543D0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

unsigned char *initializeBufferWithCopyOfBuffer for MClientIdentifier(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MCatalogRequestHandler.FetchError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MCatalogRequestHandler.FetchError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228954580);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_2289545A8(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_2289545B4(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MCatalogRequestHandler.FetchError()
{
  return &type metadata for MCatalogRequestHandler.FetchError;
}

unint64_t sub_2289545D0()
{
  unint64_t result = qword_268284020;
  if (!qword_268284020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284020);
  }
  return result;
}

uint64_t sub_228954624()
{
  return sub_2289546B4(&qword_268284028, type metadata accessor for MCatalogRequestRelationship);
}

uint64_t sub_22895466C()
{
  return sub_2289546B4(&qword_268284030, type metadata accessor for MCatalogRequestRelationship);
}

uint64_t sub_2289546B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2289546FC()
{
  return sub_2289546B4(&qword_268284038, type metadata accessor for MCatalogRequestRelationship);
}

uint64_t sub_228954744()
{
  return sub_2289546B4(&qword_268284040, type metadata accessor for MCatalogRequestView);
}

uint64_t sub_22895478C()
{
  return sub_2289546B4(&qword_268284048, type metadata accessor for MCatalogRequestView);
}

uint64_t sub_2289547D4()
{
  return sub_2289546B4(&qword_268284050, type metadata accessor for MCatalogRequestView);
}

double sub_22895482C(double a1)
{
  return ceil(a1);
}

double sub_228954838(double a1)
{
  return floor(a1);
}

double sub_228954844(double a1)
{
  return round(a1);
}

double CGFloat.rounded(decimalPlaces:)(uint64_t a1, double a2)
{
  float v3 = __exp10f((float)a1);
  return round(v3 * a2) / v3;
}

uint64_t Optional<A>.int32Value.getter(uint64_t result, char a2)
{
  if (a2)
  {
    uint64_t v2 = 0;
    return v2 | ((unint64_t)(a2 & 1) << 32);
  }
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    uint64_t v2 = result;
    return v2 | ((unint64_t)(a2 & 1) << 32);
  }
  __break(1u);
  return result;
}

uint64_t static String.random(length:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_228954E84(0, result, 0xD00000000000003ELL, 0x80000002289E53D0);
    sub_228952BB0(&qword_26AECF7B0);
    sub_22895504C();
    return sub_2289DED20();
  }
  return result;
}

Swift::String_optional __swiftcall String.urlQueryEscaped(excludingCharacters:)(Swift::String_optional excludingCharacters)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  object = excludingCharacters.value._object;
  uint64_t v6 = sub_2289DE640();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2289DE620();
  if (object) {
    sub_2289DE630();
  }
  v16[0] = v4;
  v16[1] = v3;
  sub_2289550F0();
  uint64_t v10 = sub_2289DF170();
  unint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v13 = v10;
  unint64_t v14 = v12;
  result.value._object = v14;
  result.value._countAndFlagsBits = v13;
  return result;
}

Swift::String __swiftcall String.urlFragmentRemoved()()
{
  sub_228954B5C(35, 0xE100000000000000, v0, v1);
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_2289DED40();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t v9 = MEMORY[0x22A6A1800](v2, v4, v6, v8);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = v9;
  uint64_t v13 = v11;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

unint64_t sub_228954B5C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15;
  while (sub_2289DED10() != a1 || v9 != a2)
  {
    char v10 = sub_2289DF480();
    swift_bridgeObjectRelease();
    if (v10) {
      return v8;
    }
    unint64_t v8 = sub_2289DEC60();
    if (v7 == v8 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v8;
}

Swift::String __swiftcall String.leadingSlashesRemoved()()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_2289DED30();
  uint64_t v2 = v1;
  uint64_t v11 = v1;
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  while (1)
  {
    uint64_t v8 = sub_2289DECA0();
    if (!v9) {
      break;
    }
    if (v8 == 47 && v9 == 0xE100000000000000)
    {
      uint64_t v5 = swift_bridgeObjectRelease();
    }
    else
    {
      char v4 = sub_2289DF480();
      uint64_t v5 = swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        break;
      }
    }
    if (__OFADD__(v3++, 1))
    {
      __break(1u);
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease();
  if (v3 >= 1)
  {
    sub_228954D6C(v3);
    uint64_t v2 = v11;
  }
  uint64_t v5 = v0;
  uint64_t v6 = v2;
LABEL_12:
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t sub_228954D6C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      Swift::String result = sub_2289DEC70();
      if ((v1 & 1) == 0)
      {
        uint64_t v2 = result;
        Swift::String result = 15;
        uint64_t v1 = v2;
        return MEMORY[0x270F9D650](result, v1);
      }
    }
    __break(1u);
    return MEMORY[0x270F9D650](result, v1);
  }
  return result;
}

Swift::String __swiftcall String.append(pathComponent:)(Swift::String pathComponent)
{
  uint64_t v1 = (void *)sub_2289DEB90();
  uint64_t v2 = (void *)sub_2289DEB90();
  id v3 = objc_msgSend(v1, sel_stringByAppendingPathComponent_, v2);

  uint64_t v4 = sub_2289DEBC0();
  uint64_t v6 = v5;

  uint64_t v7 = v4;
  uint64_t v8 = v6;
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

uint64_t sub_228954E84(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (!v4) {
    return v5;
  }
  uint64_t v9 = result;
  uint64_t v22 = MEMORY[0x263F8EE78];
  Swift::String result = sub_22896C448(0, v4 & ~(v4 >> 63), 0);
  if (a2 >= v9 && (v4 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = 0;
    uint64_t v5 = v22;
    uint64_t v11 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0) {
      uint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v20 = v11;
    while (v10 != v4)
    {
      if (!v20) {
        goto LABEL_24;
      }
      Swift::String result = sub_2289DEC50();
      if (result < 0) {
        goto LABEL_20;
      }
      unint64_t v12 = result;
      if (!result) {
        goto LABEL_21;
      }
      uint64_t v21 = 0;
      MEMORY[0x22A6A29F0](&v21, 8);
      if (v12 > v21 * v12)
      {
        unint64_t v13 = -(uint64_t)v12 % v12;
        while (v13 > v21 * v12)
        {
          uint64_t v21 = 0;
          MEMORY[0x22A6A29F0](&v21, 8);
        }
      }
      sub_2289DEC80();
      Swift::String result = sub_2289DED10();
      uint64_t v14 = result;
      uint64_t v16 = v15;
      uint64_t v22 = v5;
      unint64_t v18 = *(void *)(v5 + 16);
      unint64_t v17 = *(void *)(v5 + 24);
      if (v18 >= v17 >> 1)
      {
        Swift::String result = sub_22896C448(v17 > 1, v18 + 1, 1);
        uint64_t v5 = v22;
      }
      ++v10;
      *(void *)(v5 + 16) = v18 + 1;
      uint64_t v19 = v5 + 16 * v18;
      *(void *)(v19 + 32) = v14;
      *(void *)(v19 + 40) = v16;
      if (v10 == v4) {
        return v5;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

unint64_t sub_22895504C()
{
  unint64_t result = qword_26AECF7B8;
  if (!qword_26AECF7B8)
  {
    sub_2289550A8(&qword_26AECF7B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AECF7B8);
  }
  return result;
}

uint64_t sub_2289550A8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_2289550F0()
{
  unint64_t result = qword_268284140;
  if (!qword_268284140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284140);
  }
  return result;
}

uint64_t SeriesListSortOrder.index.getter()
{
  return qword_2289E08F0[*v0];
}

void *SeriesListSortOrder.sortedAssets(for:)(void *a1)
{
  switch(*v1)
  {
    case 1:
      uint64_t v10 = a1[2];
      if (v10)
      {
        uint64_t v11 = (uint64_t)(a1 + 4);
        swift_bridgeObjectRetain();
        while (1)
        {
          sub_228955928(v11, (uint64_t)v17);
          uint64_t v12 = v18;
          uint64_t v13 = v19;
          sub_22895598C(v17, v18);
          AssetInfo.sequenceNumber.getter(v12, v13);
          uint64_t v15 = v14;
          sub_2289559D0((uint64_t)v17);
          if ((v15 & 0x100000000) != 0) {
            break;
          }
          v11 += 40;
          if (!--v10)
          {
            swift_bridgeObjectRelease();
            goto LABEL_16;
          }
        }
        swift_bridgeObjectRelease();
        v17[0] = a1;
        swift_bridgeObjectRetain();
        uint64_t v9 = sub_228959108;
      }
      else
      {
LABEL_16:
        v17[0] = a1;
        swift_bridgeObjectRetain();
        uint64_t v9 = sub_2289587A0;
      }
      break;
    case 2:
      v17[0] = a1;
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_228957638;
      break;
    case 3:
      v17[0] = a1;
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_228956570;
      break;
    case 4:
      v17[0] = a1;
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_228955C0C;
      break;
    default:
      uint64_t v3 = a1[2];
      if (v3)
      {
        uint64_t v4 = (uint64_t)(a1 + 4);
        swift_bridgeObjectRetain();
        while (1)
        {
          sub_228955928(v4, (uint64_t)v17);
          uint64_t v5 = v18;
          uint64_t v6 = v19;
          sub_22895598C(v17, v18);
          AssetInfo.sequenceNumber.getter(v5, v6);
          uint64_t v8 = v7;
          sub_2289559D0((uint64_t)v17);
          if ((v8 & 0x100000000) != 0) {
            break;
          }
          v4 += 40;
          if (!--v3)
          {
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
        }
        swift_bridgeObjectRelease();
        v17[0] = a1;
        swift_bridgeObjectRetain();
        uint64_t v9 = sub_22895AB78;
      }
      else
      {
LABEL_7:
        v17[0] = a1;
        swift_bridgeObjectRetain();
        uint64_t v9 = sub_22895A1C8;
      }
      break;
  }
  sub_2289558B4(v17, v9);
  return v17[0];
}

BookFoundation::SeriesListSortOrder_optional __swiftcall SeriesListSortOrder.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_2289DF3F0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 5;
  if (v3 < 5) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t SeriesListSortOrder.rawValue.getter()
{
  uint64_t result = 0x6E69646E65637361;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x69646E6563736564;
      break;
    case 2:
      uint64_t result = 0x44657361656C6572;
      break;
    case 3:
      uint64_t result = 0x72616C75706F70;
      break;
    case 4:
      uint64_t result = 0x656C746974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2289554B8(unsigned __int8 *a1, char *a2)
{
  return sub_228966558(*a1, *a2);
}

uint64_t sub_2289554C4()
{
  return sub_2289DF590();
}

uint64_t sub_2289555C8()
{
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2289556B4()
{
  return sub_2289DF590();
}

BookFoundation::SeriesListSortOrder_optional sub_2289557B4(Swift::String *a1)
{
  return SeriesListSortOrder.init(rawValue:)(*a1);
}

void sub_2289557C0(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000067;
  uint64_t v3 = 0x6E69646E65637361;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEA0000000000676ELL;
      uint64_t v3 = 0x69646E6563736564;
      goto LABEL_3;
    case 2:
      *a1 = 0x44657361656C6572;
      a1[1] = 0xEB00000000657461;
      break;
    case 3:
      *a1 = 0x72616C75706F70;
      a1[1] = 0xE700000000000000;
      break;
    case 4:
      *a1 = 0x656C746974;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_228955888(void **a1)
{
  return sub_2289558B4(a1, sub_228956570);
}

uint64_t sub_2289558B4(void **a1, uint64_t (*a2)(void *))
{
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = (void *)sub_2289BA764(v4);
  }
  uint64_t v5 = v4[2];
  v7[0] = v4 + 4;
  v7[1] = v5;
  uint64_t result = a2(v7);
  *a1 = v4;
  return result;
}

uint64_t sub_228955928(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *sub_22895598C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_2289559D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_228955A24()
{
  unint64_t result = qword_268284148;
  if (!qword_268284148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284148);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MClientIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SeriesListSortOrder(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228955BD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SeriesListSortOrder()
{
  return &type metadata for SeriesListSortOrder;
}

uint64_t sub_228955C0C(uint64_t *a1)
{
  int v2 = a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_2289DF450();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_135;
    }
    if (v3) {
      return sub_22895BC3C(0, v3, 1, v2);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_143;
  }
  uint64_t v110 = result;
  uint64_t v127 = v1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
LABEL_100:
      uint64_t v108 = v8;
      if (v11 >= 2)
      {
        uint64_t v101 = *v2;
        do
        {
          unint64_t v102 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_130;
          }
          if (!v101) {
            goto LABEL_142;
          }
          uint64_t v103 = *(void *)&v10[16 * v102 + 32];
          uint64_t v104 = *(void *)&v10[16 * v11 + 24];
          uint64_t v105 = v127;
          sub_22895D344((char *)(v101 + 40 * v103), (char *)(v101 + 40 * *(void *)&v10[16 * v11 + 16]), v101 + 40 * v104, __dst);
          uint64_t v127 = v105;
          if (v105) {
            break;
          }
          if (v104 < v103) {
            goto LABEL_131;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v10 = sub_2289BA3EC((uint64_t)v10);
          }
          if (v102 >= *((void *)v10 + 2)) {
            goto LABEL_132;
          }
          v106 = &v10[16 * v102 + 32];
          *(void *)v106 = v103;
          *((void *)v106 + 1) = v104;
          unint64_t v107 = *((void *)v10 + 2);
          if (v11 > v107) {
            goto LABEL_133;
          }
          memmove(&v10[16 * v11 + 16], &v10[16 * v11 + 32], 16 * (v107 - v11));
          *((void *)v10 + 2) = v107 - 1;
          unint64_t v11 = v107 - 1;
        }
        while (v107 > 2);
      }
LABEL_111:
      swift_bridgeObjectRelease();
      *(void *)(v108 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v108 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    sub_228952BB0(&qword_268284150);
    uint64_t v7 = sub_2289DEE70();
    *(void *)(v7 + 16) = v6;
    uint64_t v108 = v7;
    __dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v12 = v9;
    uint64_t v13 = v9 + 1;
    if (v9 + 1 < v3)
    {
      uint64_t v14 = *v2;
      sub_228955928(*v2 + 40 * v13, (uint64_t)&v124);
      uint64_t v109 = v14;
      sub_228955928(v14 + 40 * v12, (uint64_t)v121);
      uint64_t v15 = v125;
      uint64_t v16 = v126;
      sub_22895598C(&v124, v125);
      AssetInfo.title.getter(v15, v16);
      uint64_t v17 = v122;
      uint64_t v18 = v123;
      sub_22895598C(v121, v122);
      uint64_t v118 = v3;
      AssetInfo.title.getter(v17, v18);
      sub_2289550F0();
      uint64_t v115 = sub_2289DF180();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2289559D0((uint64_t)v121);
      sub_2289559D0((uint64_t)&v124);
      uint64_t v19 = v12 + 2;
      if (v12 + 2 >= v3)
      {
        uint64_t v13 = v12 + 2;
      }
      else
      {
        v111 = v10;
        uint64_t v20 = v109 + 40 * v12 + 40;
        while (1)
        {
          uint64_t v21 = v20 + 40;
          sub_228955928(v20 + 40, (uint64_t)&v124);
          sub_228955928(v20, (uint64_t)v121);
          uint64_t v22 = v125;
          uint64_t v23 = v126;
          sub_22895598C(&v124, v125);
          AssetInfo.title.getter(v22, v23);
          uint64_t v24 = v122;
          uint64_t v25 = v123;
          sub_22895598C(v121, v122);
          AssetInfo.title.getter(v24, v25);
          uint64_t v26 = sub_2289DF180();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_2289559D0((uint64_t)v121);
          sub_2289559D0((uint64_t)&v124);
          if ((v115 == -1) == (v26 != -1)) {
            break;
          }
          uint64_t v20 = v21;
          ++v19;
          uint64_t v3 = v118;
          if (v118 == v19)
          {
            uint64_t v13 = v118;
            uint64_t v10 = v111;
            goto LABEL_24;
          }
        }
        uint64_t v13 = v19;
        uint64_t v10 = v111;
        uint64_t v3 = v118;
      }
LABEL_24:
      if (v115 == -1)
      {
        if (v13 < v12) {
          goto LABEL_138;
        }
        if (v12 < v13)
        {
          v112 = v10;
          uint64_t v27 = 40 * v13 - 40;
          uint64_t v28 = v12;
          uint64_t v29 = 40 * v12;
          uint64_t v116 = v13;
          uint64_t v30 = v28;
          do
          {
            if (v28 != --v13)
            {
              if (!v109) {
                goto LABEL_141;
              }
              uint64_t v31 = v109 + v29;
              sub_2289605CC((long long *)(v109 + v29), (uint64_t)&v124);
              uint64_t v32 = *(void *)(v109 + v27 + 32);
              long long v33 = *(_OWORD *)(v109 + v27 + 16);
              *(_OWORD *)uint64_t v31 = *(_OWORD *)(v109 + v27);
              *(_OWORD *)(v31 + 16) = v33;
              *(void *)(v31 + 32) = v32;
              sub_2289605CC(&v124, v109 + v27);
            }
            ++v28;
            v27 -= 40;
            v29 += 40;
          }
          while (v28 < v13);
          uint64_t v13 = v116;
          uint64_t v3 = v118;
          uint64_t v10 = v112;
          uint64_t v12 = v30;
        }
      }
    }
    if (v13 >= v3) {
      goto LABEL_51;
    }
    if (__OFSUB__(v13, v12)) {
      goto LABEL_134;
    }
    if (v13 - v12 >= v110) {
      goto LABEL_51;
    }
    if (__OFADD__(v12, v110)) {
      goto LABEL_136;
    }
    uint64_t v34 = v12 + v110 >= v3 ? v3 : v12 + v110;
    if (v34 < v12) {
      break;
    }
    if (v13 != v34)
    {
      v113 = v10;
      uint64_t v114 = v12;
      uint64_t v35 = 40 * v13 - 40;
      uint64_t v119 = v34;
      do
      {
        uint64_t v36 = v13;
        uint64_t v37 = v114;
        uint64_t v38 = v35;
        do
        {
          uint64_t v39 = *v2 + v38;
          sub_228955928(v39 + 40, (uint64_t)&v124);
          sub_228955928(v39, (uint64_t)v121);
          uint64_t v40 = v125;
          uint64_t v41 = v126;
          sub_22895598C(&v124, v125);
          AssetInfo.title.getter(v40, v41);
          uint64_t v42 = v122;
          uint64_t v43 = v123;
          sub_22895598C(v121, v122);
          AssetInfo.title.getter(v42, v43);
          sub_2289550F0();
          uint64_t v44 = sub_2289DF180();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_2289559D0((uint64_t)v121);
          sub_2289559D0((uint64_t)&v124);
          if (v44 != -1) {
            break;
          }
          uint64_t v45 = *v2;
          if (!*v2) {
            goto LABEL_139;
          }
          uint64_t v46 = v45 + v38;
          sub_2289605CC((long long *)(v45 + v38 + 40), (uint64_t)&v124);
          long long v47 = *(_OWORD *)(v46 + 16);
          *(_OWORD *)(v46 + 40) = *(_OWORD *)v46;
          *(_OWORD *)(v46 + 56) = v47;
          *(void *)(v46 + 72) = *(void *)(v46 + 32);
          sub_2289605CC(&v124, v46);
          v38 -= 40;
          ++v37;
        }
        while (v36 != v37);
        uint64_t v13 = v36 + 1;
        v35 += 40;
      }
      while (v36 + 1 != v119);
      uint64_t v13 = v119;
      uint64_t v10 = v113;
      uint64_t v12 = v114;
    }
LABEL_51:
    if (v13 < v12) {
      goto LABEL_129;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_2289B9F84(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v49 = *((void *)v10 + 2);
    unint64_t v48 = *((void *)v10 + 3);
    unint64_t v11 = v49 + 1;
    if (v49 >= v48 >> 1) {
      uint64_t v10 = sub_2289B9F84((char *)(v48 > 1), v49 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v11;
    v50 = v10 + 32;
    char v51 = &v10[16 * v49 + 32];
    *(void *)char v51 = v12;
    *((void *)v51 + 1) = v13;
    uint64_t v117 = v13;
    if (v49)
    {
      while (1)
      {
        unint64_t v52 = v11 - 1;
        if (v11 >= 4)
        {
          uint64_t v57 = &v50[16 * v11];
          uint64_t v58 = *((void *)v57 - 8);
          uint64_t v59 = *((void *)v57 - 7);
          BOOL v63 = __OFSUB__(v59, v58);
          uint64_t v60 = v59 - v58;
          if (v63) {
            goto LABEL_118;
          }
          uint64_t v62 = *((void *)v57 - 6);
          uint64_t v61 = *((void *)v57 - 5);
          BOOL v63 = __OFSUB__(v61, v62);
          uint64_t v55 = v61 - v62;
          char v56 = v63;
          if (v63) {
            goto LABEL_119;
          }
          unint64_t v64 = v11 - 2;
          v65 = &v50[16 * v11 - 32];
          uint64_t v67 = *(void *)v65;
          uint64_t v66 = *((void *)v65 + 1);
          BOOL v63 = __OFSUB__(v66, v67);
          uint64_t v68 = v66 - v67;
          if (v63) {
            goto LABEL_121;
          }
          BOOL v63 = __OFADD__(v55, v68);
          uint64_t v69 = v55 + v68;
          if (v63) {
            goto LABEL_124;
          }
          if (v69 >= v60)
          {
            v87 = &v50[16 * v52];
            uint64_t v89 = *(void *)v87;
            uint64_t v88 = *((void *)v87 + 1);
            BOOL v63 = __OFSUB__(v88, v89);
            uint64_t v90 = v88 - v89;
            if (v63) {
              goto LABEL_128;
            }
            BOOL v80 = v55 < v90;
            goto LABEL_88;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v81 = *((void *)v10 + 4);
            uint64_t v82 = *((void *)v10 + 5);
            BOOL v63 = __OFSUB__(v82, v81);
            uint64_t v74 = v82 - v81;
            char v75 = v63;
            goto LABEL_82;
          }
          uint64_t v54 = *((void *)v10 + 4);
          uint64_t v53 = *((void *)v10 + 5);
          BOOL v63 = __OFSUB__(v53, v54);
          uint64_t v55 = v53 - v54;
          char v56 = v63;
        }
        if (v56) {
          goto LABEL_120;
        }
        unint64_t v64 = v11 - 2;
        v70 = &v50[16 * v11 - 32];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        BOOL v73 = __OFSUB__(v71, v72);
        uint64_t v74 = v71 - v72;
        char v75 = v73;
        if (v73) {
          goto LABEL_123;
        }
        v76 = &v50[16 * v52];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        BOOL v63 = __OFSUB__(v77, v78);
        uint64_t v79 = v77 - v78;
        if (v63) {
          goto LABEL_126;
        }
        if (__OFADD__(v74, v79)) {
          goto LABEL_127;
        }
        if (v74 + v79 >= v55)
        {
          BOOL v80 = v55 < v79;
LABEL_88:
          if (v80) {
            unint64_t v52 = v64;
          }
          goto LABEL_90;
        }
LABEL_82:
        if (v75) {
          goto LABEL_122;
        }
        v83 = &v50[16 * v52];
        uint64_t v85 = *(void *)v83;
        uint64_t v84 = *((void *)v83 + 1);
        BOOL v63 = __OFSUB__(v84, v85);
        uint64_t v86 = v84 - v85;
        if (v63) {
          goto LABEL_125;
        }
        if (v86 < v74) {
          goto LABEL_15;
        }
LABEL_90:
        unint64_t v91 = v52 - 1;
        if (v52 - 1 >= v11)
        {
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        v92 = v2;
        uint64_t v93 = *v2;
        if (!*v2) {
          goto LABEL_140;
        }
        v94 = v10;
        v95 = &v50[16 * v91];
        uint64_t v96 = *(void *)v95;
        v97 = &v50[16 * v52];
        uint64_t v98 = *((void *)v97 + 1);
        uint64_t v99 = v127;
        sub_22895D344((char *)(v93 + 40 * *(void *)v95), (char *)(v93 + 40 * *(void *)v97), v93 + 40 * v98, __dst);
        uint64_t v127 = v99;
        if (v99) {
          goto LABEL_111;
        }
        if (v98 < v96) {
          goto LABEL_115;
        }
        if (v52 > *((void *)v94 + 2)) {
          goto LABEL_116;
        }
        *(void *)v95 = v96;
        *(void *)&v50[16 * v91 + 8] = v98;
        unint64_t v100 = *((void *)v94 + 2);
        if (v52 >= v100) {
          goto LABEL_117;
        }
        uint64_t v10 = v94;
        unint64_t v11 = v100 - 1;
        memmove(&v50[16 * v52], v97 + 16, 16 * (v100 - 1 - v52));
        *((void *)v94 + 2) = v100 - 1;
        int v2 = v92;
        if (v100 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_15:
    uint64_t v3 = v2[1];
    uint64_t v9 = v117;
    if (v117 >= v3)
    {
      uint64_t v8 = v108;
      goto LABEL_100;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  uint64_t result = sub_2289DF330();
  __break(1u);
  return result;
}

uint64_t sub_228956570(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_228952BB0(&qword_26AECF7E0);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  v232 = (char *)&v210 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v210 - v8;
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v220 = (uint64_t)&v210 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v219 = (uint64_t)&v210 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v210 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v210 - v17;
  uint64_t v231 = sub_2289DE910();
  uint64_t v19 = *(void *)(v231 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v231);
  v228 = (char *)&v210 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  v233 = (char *)&v210 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  v218 = (char *)&v210 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  v221 = (char *)&v210 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v210 - v29;
  MEMORY[0x270FA5388](v28);
  uint64_t v32 = (char *)&v210 - v31;
  v241 = a1;
  uint64_t v33 = a1[1];
  uint64_t result = sub_2289DF450();
  if (result >= v33)
  {
    if (v33 < 0) {
      goto LABEL_182;
    }
    if (v33) {
      return sub_22895BDE8(0, v33, 1, v241);
    }
    return result;
  }
  if (v33 >= 0) {
    uint64_t v35 = v33;
  }
  else {
    uint64_t v35 = v33 + 1;
  }
  if (v33 < -1) {
    goto LABEL_190;
  }
  v213 = v16;
  v227 = v9;
  uint64_t v215 = result;
  v212 = v32;
  if (v33 < 2)
  {
    uint64_t v38 = MEMORY[0x263F8EE78];
    v225 = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v33 != 1)
    {
      unint64_t v42 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v40 = (char *)MEMORY[0x263F8EE78];
LABEL_146:
      uint64_t v214 = v38;
      if (v42 >= 2)
      {
        uint64_t v203 = *v241;
        do
        {
          unint64_t v204 = v42 - 2;
          if (v42 < 2) {
            goto LABEL_177;
          }
          if (!v203) {
            goto LABEL_189;
          }
          v205 = v40;
          uint64_t v206 = *(void *)&v40[16 * v204 + 32];
          uint64_t v207 = *(void *)&v40[16 * v42 + 24];
          sub_22895D78C((char *)(v203 + 40 * v206), (char *)(v203 + 40 * *(void *)&v40[16 * v42 + 16]), v203 + 40 * v207, v225);
          if (v2) {
            goto LABEL_144;
          }
          if (v207 < v206) {
            goto LABEL_178;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v205 = sub_2289BA3EC((uint64_t)v205);
          }
          if (v204 >= *((void *)v205 + 2)) {
            goto LABEL_179;
          }
          v208 = &v205[16 * v204 + 32];
          *(void *)v208 = v206;
          *((void *)v208 + 1) = v207;
          unint64_t v209 = *((void *)v205 + 2);
          if (v42 > v209) {
            goto LABEL_180;
          }
          memmove(&v205[16 * v42 + 16], &v205[16 * v42 + 32], 16 * (v209 - v42));
          uint64_t v40 = v205;
          *((void *)v205 + 2) = v209 - 1;
          unint64_t v42 = v209 - 1;
        }
        while (v209 > 2);
      }
      swift_bridgeObjectRelease();
      *(void *)(v214 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v210 = v30;
    v211 = v18;
    uint64_t v214 = MEMORY[0x263F8EE78];
    uint64_t v226 = v1;
  }
  else
  {
    v210 = v30;
    v211 = v18;
    uint64_t v226 = v1;
    uint64_t v36 = v35 >> 1;
    sub_228952BB0(&qword_268284150);
    uint64_t v37 = sub_2289DEE70();
    *(void *)(v37 + 16) = v36;
    uint64_t v214 = v37;
    v225 = (char *)(v37 + 32);
  }
  uint64_t v39 = 0;
  v234 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  v229 = (void (**)(char *, uint64_t))(v19 + 8);
  v230 = (void (**)(char *, uint64_t, uint64_t))(v19 + 32);
  uint64_t v40 = (char *)MEMORY[0x263F8EE78];
  uint64_t v41 = (uint64_t)v232;
  while (1)
  {
    uint64_t v43 = v39++;
    v223 = v40;
    uint64_t v224 = v43;
    if (v39 < v33)
    {
      uint64_t v44 = *v241;
      sub_228955928(*v241 + 40 * v39, (uint64_t)&v238);
      uint64_t v222 = v44;
      sub_228955928(v44 + 40 * v43, (uint64_t)v235);
      uint64_t v45 = v239;
      uint64_t v46 = v240;
      sub_22895598C(&v238, v239);
      AssetInfo.seriesSortKey.getter(v45, v46);
      uint64_t v217 = v33;
      if ((v47 & 1) != 0
        && (uint64_t v48 = v236, v49 = v237, sub_22895598C(v235, v236), AssetInfo.seriesSortKey.getter(v48, v49), (v50 & 1) != 0))
      {
        uint64_t v62 = v239;
        uint64_t v63 = v240;
        sub_22895598C(&v238, v239);
        uint64_t v64 = (uint64_t)v211;
        AssetInfo.releaseDate.getter(v62, v63, (uint64_t)v211);
        v65 = *v234;
        uint64_t v66 = v231;
        unsigned int v67 = (*v234)(v64, 1, v231);
        uint64_t v68 = v210;
        uint64_t v69 = v212;
        if (v67 == 1)
        {
          sub_2289DE8B0();
          sub_2289605E4(v64);
        }
        else
        {
          (*v230)(v212, v64, v66);
        }
        uint64_t v70 = (uint64_t)v213;
        uint64_t v71 = v236;
        uint64_t v72 = v237;
        sub_22895598C(v235, v236);
        AssetInfo.releaseDate.getter(v71, v72, v70);
        if (v65(v70, 1, v66) == 1)
        {
          sub_2289DE8B0();
          sub_2289605E4(v70);
        }
        else
        {
          (*v230)(v68, v70, v66);
        }
        int v73 = sub_2289DE8E0();
        uint64_t v74 = *v229;
        (*v229)(v68, v66);
        char v75 = v69;
        BOOL v61 = v73;
        v74(v75, v66);
        uint64_t v43 = v224;
        uint64_t v33 = v217;
      }
      else
      {
        uint64_t v51 = v239;
        uint64_t v52 = v240;
        sub_22895598C(&v238, v239);
        uint64_t v53 = AssetInfo.seriesSortKey.getter(v51, v52);
        if (v54) {
          uint64_t v55 = 0;
        }
        else {
          uint64_t v55 = v53;
        }
        uint64_t v56 = v236;
        uint64_t v57 = v237;
        sub_22895598C(v235, v236);
        uint64_t v58 = AssetInfo.seriesSortKey.getter(v56, v57);
        if (v59) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = v58;
        }
        BOOL v61 = v55 < v60;
      }
      sub_2289559D0((uint64_t)v235);
      sub_2289559D0((uint64_t)&v238);
      uint64_t v39 = v43 + 2;
      if (v43 + 2 < v33)
      {
        uint64_t v76 = v222 + 40 * v43 + 40;
        BOOL v216 = v61;
        while (1)
        {
          sub_228955928(v76 + 40, (uint64_t)&v238);
          sub_228955928(v76, (uint64_t)v235);
          uint64_t v77 = v239;
          uint64_t v78 = v240;
          sub_22895598C(&v238, v239);
          AssetInfo.seriesSortKey.getter(v77, v78);
          if ((v79 & 1) == 0) {
            goto LABEL_37;
          }
          uint64_t v80 = v236;
          uint64_t v81 = v237;
          sub_22895598C(v235, v236);
          AssetInfo.seriesSortKey.getter(v80, v81);
          if (v82)
          {
            uint64_t v94 = v239;
            uint64_t v95 = v240;
            sub_22895598C(&v238, v239);
            uint64_t v96 = v219;
            AssetInfo.releaseDate.getter(v94, v95, v219);
            uint64_t v97 = v96;
            uint64_t v98 = *v234;
            uint64_t v99 = v231;
            if ((*v234)(v97, 1, v231) == 1)
            {
              sub_2289DE8B0();
              sub_2289605E4(v97);
            }
            else
            {
              (*v230)(v221, v97, v99);
            }
            uint64_t v100 = v236;
            uint64_t v101 = v237;
            sub_22895598C(v235, v236);
            uint64_t v102 = v220;
            AssetInfo.releaseDate.getter(v100, v101, v220);
            if (v98(v102, 1, v99) == 1)
            {
              uint64_t v103 = v218;
              sub_2289DE8B0();
              sub_2289605E4(v102);
            }
            else
            {
              uint64_t v103 = v218;
              (*v230)(v218, v102, v99);
            }
            uint64_t v43 = v224;
            uint64_t v104 = v221;
            int v93 = sub_2289DE8E0();
            uint64_t v105 = *v229;
            (*v229)(v103, v99);
            v105(v104, v99);
            uint64_t v33 = v217;
            BOOL v61 = v216;
          }
          else
          {
LABEL_37:
            uint64_t v83 = v239;
            uint64_t v84 = v240;
            sub_22895598C(&v238, v239);
            uint64_t v85 = AssetInfo.seriesSortKey.getter(v83, v84);
            uint64_t v87 = (v86 & 1) != 0 ? 0 : v85;
            uint64_t v88 = v236;
            uint64_t v89 = v237;
            sub_22895598C(v235, v236);
            uint64_t v90 = AssetInfo.seriesSortKey.getter(v88, v89);
            uint64_t v92 = (v91 & 1) != 0 ? 0 : v90;
            int v93 = v87 < v92;
          }
          sub_2289559D0((uint64_t)v235);
          sub_2289559D0((uint64_t)&v238);
          if ((v61 ^ v93)) {
            break;
          }
          ++v39;
          v76 += 40;
          if (v33 == v39)
          {
            uint64_t v39 = v33;
            break;
          }
        }
      }
      if (v61)
      {
        if (v39 < v43) {
          goto LABEL_183;
        }
        if (v43 < v39)
        {
          uint64_t v106 = 40 * v39 - 40;
          uint64_t v107 = 40 * v43;
          uint64_t v108 = v43;
          uint64_t v109 = v39;
          do
          {
            if (v108 != --v109)
            {
              if (!v222) {
                goto LABEL_188;
              }
              uint64_t v110 = v222 + v107;
              uint64_t v111 = v222 + v106;
              sub_2289605CC((long long *)(v222 + v107), (uint64_t)&v238);
              uint64_t v112 = *(void *)(v111 + 32);
              long long v113 = *(_OWORD *)(v111 + 16);
              *(_OWORD *)uint64_t v110 = *(_OWORD *)v111;
              *(_OWORD *)(v110 + 16) = v113;
              *(void *)(v110 + 32) = v112;
              sub_2289605CC(&v238, v111);
            }
            ++v108;
            v106 -= 40;
            v107 += 40;
          }
          while (v108 < v109);
          uint64_t v43 = v224;
        }
      }
    }
    if (v39 >= v33) {
      goto LABEL_96;
    }
    if (__OFSUB__(v39, v43)) {
      goto LABEL_181;
    }
    if (v39 - v43 >= v215) {
      goto LABEL_96;
    }
    if (__OFADD__(v43, v215)) {
      goto LABEL_184;
    }
    uint64_t v114 = v43 + v215 >= v33 ? v33 : v43 + v215;
    if (v114 < v43) {
      break;
    }
    if (v39 != v114)
    {
      uint64_t v115 = 40 * v39 - 40;
      uint64_t v222 = v114;
      do
      {
        uint64_t v116 = v115;
        do
        {
          uint64_t v117 = *v241 + v116;
          sub_228955928(v117 + 40, (uint64_t)&v238);
          sub_228955928(v117, (uint64_t)v235);
          uint64_t v118 = v239;
          uint64_t v119 = v240;
          sub_22895598C(&v238, v239);
          AssetInfo.seriesSortKey.getter(v118, v119);
          if ((v120 & 1) != 0
            && (uint64_t v121 = v236,
                uint64_t v122 = v237,
                sub_22895598C(v235, v236),
                AssetInfo.seriesSortKey.getter(v121, v122),
                (v123 & 1) != 0))
          {
            uint64_t v135 = v239;
            uint64_t v136 = v240;
            sub_22895598C(&v238, v239);
            uint64_t v137 = (uint64_t)v227;
            AssetInfo.releaseDate.getter(v135, v136, (uint64_t)v227);
            uint64_t v138 = v137;
            v139 = *v234;
            uint64_t v140 = v231;
            if ((*v234)(v138, 1, v231) == 1)
            {
              sub_2289DE8B0();
              sub_2289605E4(v138);
            }
            else
            {
              (*v230)(v233, v138, v140);
            }
            uint64_t v141 = v236;
            uint64_t v142 = v237;
            sub_22895598C(v235, v236);
            AssetInfo.releaseDate.getter(v141, v142, v41);
            if (v139(v41, 1, v140) == 1)
            {
              v143 = v228;
              sub_2289DE8B0();
              sub_2289605E4(v41);
            }
            else
            {
              v143 = v228;
              (*v230)(v228, v41, v140);
            }
            v144 = v233;
            char v145 = sub_2289DE8E0();
            v146 = v143;
            BOOL v134 = v145;
            v147 = *v229;
            (*v229)(v146, v140);
            v147(v144, v140);
            uint64_t v41 = (uint64_t)v232;
          }
          else
          {
            uint64_t v124 = v239;
            uint64_t v125 = v240;
            sub_22895598C(&v238, v239);
            uint64_t v126 = AssetInfo.seriesSortKey.getter(v124, v125);
            if (v127) {
              uint64_t v128 = 0;
            }
            else {
              uint64_t v128 = v126;
            }
            uint64_t v129 = v236;
            uint64_t v130 = v237;
            sub_22895598C(v235, v236);
            uint64_t v131 = AssetInfo.seriesSortKey.getter(v129, v130);
            if (v132) {
              uint64_t v133 = 0;
            }
            else {
              uint64_t v133 = v131;
            }
            BOOL v134 = v128 < v133;
          }
          sub_2289559D0((uint64_t)v235);
          sub_2289559D0((uint64_t)&v238);
          if (!v134) {
            break;
          }
          uint64_t v148 = *v241;
          if (!*v241) {
            goto LABEL_186;
          }
          uint64_t v149 = v148 + v116;
          sub_2289605CC((long long *)(v148 + v116 + 40), (uint64_t)&v238);
          long long v150 = *(_OWORD *)(v149 + 16);
          *(_OWORD *)(v149 + 40) = *(_OWORD *)v149;
          *(_OWORD *)(v149 + 56) = v150;
          *(void *)(v149 + 72) = *(void *)(v149 + 32);
          sub_2289605CC(&v238, v149);
          v116 -= 40;
          ++v43;
        }
        while (v39 != v43);
        ++v39;
        v115 += 40;
        uint64_t v43 = v224;
      }
      while (v39 != v222);
      uint64_t v39 = v222;
    }
LABEL_96:
    if (v39 < v43) {
      goto LABEL_176;
    }
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v40 = v223;
    }
    else {
      uint64_t v40 = sub_2289B9F84(0, *((void *)v223 + 2) + 1, 1, v223);
    }
    unint64_t v152 = *((void *)v40 + 2);
    unint64_t v151 = *((void *)v40 + 3);
    unint64_t v42 = v152 + 1;
    if (v152 >= v151 >> 1) {
      uint64_t v40 = sub_2289B9F84((char *)(v151 > 1), v152 + 1, 1, v40);
    }
    *((void *)v40 + 2) = v42;
    v153 = v40 + 32;
    v154 = &v40[16 * v152 + 32];
    *(void *)v154 = v43;
    *((void *)v154 + 1) = v39;
    if (v152)
    {
      while (1)
      {
        unint64_t v155 = v42 - 1;
        if (v42 >= 4)
        {
          v160 = &v153[16 * v42];
          uint64_t v161 = *((void *)v160 - 8);
          uint64_t v162 = *((void *)v160 - 7);
          BOOL v166 = __OFSUB__(v162, v161);
          uint64_t v163 = v162 - v161;
          if (v166) {
            goto LABEL_165;
          }
          uint64_t v165 = *((void *)v160 - 6);
          uint64_t v164 = *((void *)v160 - 5);
          BOOL v166 = __OFSUB__(v164, v165);
          uint64_t v158 = v164 - v165;
          char v159 = v166;
          if (v166) {
            goto LABEL_166;
          }
          unint64_t v167 = v42 - 2;
          v168 = &v153[16 * v42 - 32];
          uint64_t v170 = *(void *)v168;
          uint64_t v169 = *((void *)v168 + 1);
          BOOL v166 = __OFSUB__(v169, v170);
          uint64_t v171 = v169 - v170;
          if (v166) {
            goto LABEL_168;
          }
          BOOL v166 = __OFADD__(v158, v171);
          uint64_t v172 = v158 + v171;
          if (v166) {
            goto LABEL_171;
          }
          if (v172 >= v163)
          {
            v190 = &v153[16 * v155];
            uint64_t v192 = *(void *)v190;
            uint64_t v191 = *((void *)v190 + 1);
            BOOL v166 = __OFSUB__(v191, v192);
            uint64_t v193 = v191 - v192;
            if (v166) {
              goto LABEL_175;
            }
            BOOL v183 = v158 < v193;
            goto LABEL_133;
          }
        }
        else
        {
          if (v42 != 3)
          {
            uint64_t v184 = *((void *)v40 + 4);
            uint64_t v185 = *((void *)v40 + 5);
            BOOL v166 = __OFSUB__(v185, v184);
            uint64_t v177 = v185 - v184;
            char v178 = v166;
            goto LABEL_127;
          }
          uint64_t v157 = *((void *)v40 + 4);
          uint64_t v156 = *((void *)v40 + 5);
          BOOL v166 = __OFSUB__(v156, v157);
          uint64_t v158 = v156 - v157;
          char v159 = v166;
        }
        if (v159) {
          goto LABEL_167;
        }
        unint64_t v167 = v42 - 2;
        v173 = &v153[16 * v42 - 32];
        uint64_t v175 = *(void *)v173;
        uint64_t v174 = *((void *)v173 + 1);
        BOOL v176 = __OFSUB__(v174, v175);
        uint64_t v177 = v174 - v175;
        char v178 = v176;
        if (v176) {
          goto LABEL_170;
        }
        v179 = &v153[16 * v155];
        uint64_t v181 = *(void *)v179;
        uint64_t v180 = *((void *)v179 + 1);
        BOOL v166 = __OFSUB__(v180, v181);
        uint64_t v182 = v180 - v181;
        if (v166) {
          goto LABEL_173;
        }
        if (__OFADD__(v177, v182)) {
          goto LABEL_174;
        }
        if (v177 + v182 >= v158)
        {
          BOOL v183 = v158 < v182;
LABEL_133:
          if (v183) {
            unint64_t v155 = v167;
          }
          goto LABEL_135;
        }
LABEL_127:
        if (v178) {
          goto LABEL_169;
        }
        v186 = &v153[16 * v155];
        uint64_t v188 = *(void *)v186;
        uint64_t v187 = *((void *)v186 + 1);
        BOOL v166 = __OFSUB__(v187, v188);
        uint64_t v189 = v187 - v188;
        if (v166) {
          goto LABEL_172;
        }
        if (v189 < v177) {
          goto LABEL_15;
        }
LABEL_135:
        unint64_t v194 = v155 - 1;
        if (v155 - 1 >= v42)
        {
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
          goto LABEL_185;
        }
        if (!*v241) {
          goto LABEL_187;
        }
        v195 = v40;
        v196 = &v153[16 * v194];
        uint64_t v197 = *(void *)v196;
        v198 = &v153[16 * v155];
        uint64_t v199 = *((void *)v198 + 1);
        uint64_t v200 = v226;
        sub_22895D78C((char *)(*v241 + 40 * *(void *)v196), (char *)(*v241 + 40 * *(void *)v198), *v241 + 40 * v199, v225);
        uint64_t v226 = v200;
        if (v200)
        {
LABEL_144:
          uint64_t v202 = v214;
          swift_bridgeObjectRelease();
          *(void *)(v202 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        if (v199 < v197) {
          goto LABEL_162;
        }
        if (v155 > *((void *)v195 + 2)) {
          goto LABEL_163;
        }
        *(void *)v196 = v197;
        *(void *)&v153[16 * v194 + 8] = v199;
        unint64_t v201 = *((void *)v195 + 2);
        if (v155 >= v201) {
          goto LABEL_164;
        }
        unint64_t v42 = v201 - 1;
        memmove(&v153[16 * v155], v198 + 16, 16 * (v201 - 1 - v155));
        uint64_t v40 = v195;
        *((void *)v195 + 2) = v201 - 1;
        uint64_t v41 = (uint64_t)v232;
        if (v201 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v42 = 1;
LABEL_15:
    uint64_t v33 = v241[1];
    if (v39 >= v33)
    {
      uint64_t v2 = v226;
      uint64_t v38 = v214;
      goto LABEL_146;
    }
  }
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  uint64_t result = sub_2289DF330();
  __break(1u);
  return result;
}

uint64_t sub_228957638(uint64_t *a1)
{
  uint64_t v2 = sub_228952BB0(&qword_26AECF7E0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v209 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v3);
  uint64_t v8 = (char *)&v209 - v7;
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v222 = (char *)&v209 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v209 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v214 = (uint64_t)&v209 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v213 = (uint64_t)&v209 - v16;
  uint64_t v237 = sub_2289DE910();
  uint64_t v17 = *(void *)(v237 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v237);
  uint64_t v20 = (char *)&v209 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v236 = (char *)&v209 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v221 = (char *)&v209 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v226 = (char *)&v209 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  v212 = (char *)&v209 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v215 = (char *)&v209 - v29;
  uint64_t v30 = a1[1];
  uint64_t result = sub_2289DF450();
  if (result >= v30)
  {
    if (v30 < 0) {
      goto LABEL_182;
    }
    if (v30) {
      return sub_22895C24C(0, v30, 1, a1);
    }
    return result;
  }
  if (v30 >= 0) {
    uint64_t v32 = v30;
  }
  else {
    uint64_t v32 = v30 + 1;
  }
  if (v30 < -1) {
    goto LABEL_190;
  }
  uint64_t v219 = v13;
  uint64_t v211 = result;
  if (v30 < 2)
  {
    v225 = (char *)(MEMORY[0x263F8EE78] + 32);
    uint64_t v210 = MEMORY[0x263F8EE78];
    if (v30 != 1)
    {
      v195 = a1;
      unint64_t v37 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v36 = (char *)MEMORY[0x263F8EE78];
LABEL_146:
      uint64_t v196 = v227;
      if (v37 >= 2)
      {
        uint64_t v197 = *v195;
        do
        {
          unint64_t v198 = v37 - 2;
          if (v37 < 2) {
            goto LABEL_177;
          }
          if (!v197) {
            goto LABEL_189;
          }
          unint64_t v199 = v37 - 1;
          v228 = v36;
          uint64_t v200 = *(void *)&v36[16 * v198 + 32];
          uint64_t v201 = *(void *)&v36[16 * v37 + 24];
          sub_22895E0B4((char *)(v197 + 40 * v200), (char *)(v197 + 40 * *(void *)&v36[16 * v37 + 16]), v197 + 40 * v201, v225);
          if (v196) {
            break;
          }
          if (v201 < v200) {
            goto LABEL_178;
          }
          if (swift_isUniquelyReferenced_nonNull_native()) {
            uint64_t v202 = v228;
          }
          else {
            uint64_t v202 = sub_2289BA3EC((uint64_t)v228);
          }
          if (v198 >= *((void *)v202 + 2)) {
            goto LABEL_179;
          }
          uint64_t v203 = v202 + 32;
          unint64_t v204 = &v202[16 * v198 + 32];
          *(void *)unint64_t v204 = v200;
          *((void *)v204 + 1) = v201;
          unint64_t v205 = *((void *)v202 + 2);
          if (v37 > v205) {
            goto LABEL_180;
          }
          uint64_t v206 = &v203[16 * v37];
          size_t v207 = 16 * (v205 - v37);
          v208 = v202;
          memmove(&v203[16 * v199], v206, v207);
          uint64_t v36 = v208;
          *((void *)v208 + 2) = v205 - 1;
          unint64_t v37 = v205 - 1;
        }
        while (v205 > 2);
      }
LABEL_159:
      swift_bridgeObjectRelease();
      *(void *)(v210 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v33 = v32 >> 1;
    sub_228952BB0(&qword_268284150);
    uint64_t v34 = sub_2289DEE70();
    *(void *)(v34 + 16) = v33;
    uint64_t v210 = v34;
    v225 = (char *)(v34 + 32);
  }
  uint64_t v35 = 0;
  v244 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v233 = (char **)(v17 + 8);
  v234 = (void (**)(char *, uint64_t, uint64_t))(v17 + 32);
  uint64_t v36 = (char *)MEMORY[0x263F8EE78];
  v229 = v8;
  v232 = v20;
  while (1)
  {
    uint64_t v38 = (uint64_t)v35;
    uint64_t v39 = (uint64_t)(v35 + 1);
    v228 = v36;
    uint64_t v224 = (uint64_t)v35;
    if ((uint64_t)(v35 + 1) < v30)
    {
      uint64_t v40 = *a1;
      uint64_t v41 = v35;
      sub_228955928(*a1 + 40 * v39, (uint64_t)&v241);
      uint64_t v216 = v40;
      sub_228955928(v40 + 40 * (void)v41, (uint64_t)v238);
      uint64_t v42 = v242;
      uint64_t v43 = v243;
      sub_22895598C(&v241, v242);
      uint64_t v44 = v42;
      uint64_t v45 = v213;
      AssetInfo.releaseDate.getter(v44, v43, v213);
      uint64_t v46 = v237;
      v235 = (char *)*v244;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v235)(v45, 1, v237) == 1)
      {
        sub_2289DE8B0();
        sub_2289605E4(v45);
      }
      else
      {
        (*v234)(v215, v45, v46);
      }
      uint64_t v47 = v239;
      uint64_t v48 = v240;
      sub_22895598C(v238, v239);
      uint64_t v49 = v47;
      uint64_t v50 = v214;
      AssetInfo.releaseDate.getter(v49, v48, v214);
      uint64_t v51 = v46;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v235)(v50, 1, v46) == 1)
      {
        uint64_t v52 = v212;
        sub_2289DE8B0();
        sub_2289605E4(v50);
      }
      else
      {
        uint64_t v52 = v212;
        (*v234)(v212, v50, v51);
      }
      uint64_t v53 = v215;
      char v54 = sub_2289DE8F0();
      uint64_t v223 = v30;
      if (v54)
      {
        uint64_t v55 = v51;
        uint64_t v56 = v242;
        uint64_t v57 = v243;
        sub_22895598C(&v241, v242);
        uint64_t v58 = AssetInfo.seriesSortKey.getter(v56, v57);
        uint64_t v60 = v52;
        if (v59) {
          uint64_t v61 = 0;
        }
        else {
          uint64_t v61 = v58;
        }
        uint64_t v231 = (char *)v61;
        uint64_t v62 = v239;
        uint64_t v63 = v240;
        sub_22895598C(v238, v239);
        uint64_t v64 = AssetInfo.seriesSortKey.getter(v62, v63);
        LOBYTE(v63) = v65;
        uint64_t v66 = *v233;
        unsigned int v67 = v60;
        uint64_t v30 = v223;
        ((void (*)(char *, uint64_t))*v233)(v67, v55);
        uint64_t v220 = v66;
        ((void (*)(char *, uint64_t))v66)(v215, v55);
        if (v63) {
          uint64_t v68 = 0;
        }
        else {
          uint64_t v68 = v64;
        }
        LODWORD(v231) = v68 < (uint64_t)v231;
      }
      else
      {
        LODWORD(v231) = sub_2289DE8D0();
        uint64_t v69 = *v233;
        ((void (*)(char *, uint64_t))*v233)(v52, v51);
        uint64_t v220 = v69;
        ((void (*)(char *, uint64_t))v69)(v53, v51);
      }
      sub_2289559D0((uint64_t)v238);
      sub_2289559D0((uint64_t)&v241);
      uint64_t v38 = v224;
      uint64_t v39 = v224 + 2;
      if (v224 + 2 < v30)
      {
        uint64_t v70 = v216 + 40 * v224 + 40;
        while (1)
        {
          sub_228955928(v70 + 40, (uint64_t)&v241);
          sub_228955928(v70, (uint64_t)v238);
          uint64_t v71 = v242;
          uint64_t v72 = v243;
          sub_22895598C(&v241, v242);
          uint64_t v73 = (uint64_t)v219;
          AssetInfo.releaseDate.getter(v71, v72, (uint64_t)v219);
          uint64_t v74 = v73;
          uint64_t v75 = v73;
          uint64_t v76 = v237;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v235)(v75, 1, v237) == 1)
          {
            sub_2289DE8B0();
            sub_2289605E4(v74);
          }
          else
          {
            (*v234)(v226, v74, v76);
          }
          uint64_t v77 = (uint64_t)v222;
          uint64_t v78 = v239;
          uint64_t v79 = v240;
          sub_22895598C(v238, v239);
          AssetInfo.releaseDate.getter(v78, v79, v77);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v235)(v77, 1, v76) == 1)
          {
            uint64_t v80 = v221;
            sub_2289DE8B0();
            sub_2289605E4(v77);
          }
          else
          {
            uint64_t v81 = v76;
            uint64_t v80 = v221;
            (*v234)(v221, v77, v81);
          }
          if (sub_2289DE8F0())
          {
            uint64_t v82 = v242;
            uint64_t v83 = v243;
            sub_22895598C(&v241, v242);
            uint64_t v84 = AssetInfo.seriesSortKey.getter(v82, v83);
            if (v85) {
              uint64_t v86 = 0;
            }
            else {
              uint64_t v86 = v84;
            }
            uint64_t v218 = v86;
            uint64_t v87 = v239;
            uint64_t v88 = v240;
            sub_22895598C(v238, v239);
            uint64_t v217 = AssetInfo.seriesSortKey.getter(v87, v88);
            LOBYTE(v88) = v89;
            uint64_t v90 = v237;
            char v91 = v220;
            ((void (*)(char *, uint64_t))v220)(v80, v237);
            ((void (*)(char *, uint64_t))v91)(v226, v90);
            uint64_t v92 = v217;
            if (v88) {
              uint64_t v92 = 0;
            }
            int v93 = v92 < v218;
          }
          else
          {
            int v93 = sub_2289DE8D0();
            uint64_t v94 = v80;
            uint64_t v95 = v237;
            uint64_t v96 = v220;
            ((void (*)(char *, uint64_t))v220)(v94, v237);
            ((void (*)(char *, uint64_t))v96)(v226, v95);
          }
          sub_2289559D0((uint64_t)v238);
          sub_2289559D0((uint64_t)&v241);
          uint64_t v30 = v223;
          if ((v231 ^ v93)) {
            break;
          }
          ++v39;
          v70 += 40;
          if (v223 == v39)
          {
            uint64_t v39 = v223;
            break;
          }
        }
        uint64_t v38 = v224;
      }
      if (v231)
      {
        if (v39 < v38) {
          goto LABEL_183;
        }
        if (v38 < v39)
        {
          uint64_t v97 = 40 * v39 - 40;
          uint64_t v98 = v39;
          uint64_t v99 = 40 * v38;
          uint64_t v100 = v98;
          uint64_t v101 = v38;
          do
          {
            if (v101 != --v98)
            {
              if (!v216) {
                goto LABEL_188;
              }
              uint64_t v102 = v216 + v99;
              uint64_t v103 = v216 + v97;
              sub_2289605CC((long long *)(v216 + v99), (uint64_t)&v241);
              uint64_t v104 = *(void *)(v103 + 32);
              long long v105 = *(_OWORD *)(v103 + 16);
              *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
              *(_OWORD *)(v102 + 16) = v105;
              *(void *)(v102 + 32) = v104;
              sub_2289605CC(&v241, v103);
              uint64_t v38 = v224;
            }
            ++v101;
            v97 -= 40;
            v99 += 40;
          }
          while (v101 < v98);
          uint64_t v8 = v229;
          uint64_t v39 = v100;
          uint64_t v30 = v223;
        }
      }
    }
    if (v39 >= v30) {
      goto LABEL_94;
    }
    if (__OFSUB__(v39, v38)) {
      goto LABEL_181;
    }
    if (v39 - v38 >= v211) {
      goto LABEL_94;
    }
    if (__OFADD__(v38, v211)) {
      goto LABEL_184;
    }
    uint64_t v106 = (char *)(v38 + v211 >= v30 ? v30 : v38 + v211);
    if ((uint64_t)v106 < v38) {
      break;
    }
    if ((char *)v39 != v106)
    {
      uint64_t v107 = 40 * v39 - 40;
      v230 = a1;
      uint64_t v231 = v5;
      uint64_t v220 = v106;
      do
      {
        v235 = (char *)v39;
        uint64_t v108 = v38;
        uint64_t v223 = v107;
        uint64_t v109 = v107;
        while (1)
        {
          uint64_t v110 = *a1 + v109;
          sub_228955928(v110 + 40, (uint64_t)&v241);
          sub_228955928(v110, (uint64_t)v238);
          uint64_t v111 = v242;
          uint64_t v112 = v243;
          sub_22895598C(&v241, v242);
          AssetInfo.releaseDate.getter(v111, v112, (uint64_t)v8);
          long long v113 = *v244;
          uint64_t v114 = v237;
          if ((*v244)(v8, 1, v237) == 1)
          {
            sub_2289DE8B0();
            sub_2289605E4((uint64_t)v8);
          }
          else
          {
            (*v234)(v236, (uint64_t)v8, v114);
          }
          uint64_t v115 = v239;
          uint64_t v116 = v240;
          sub_22895598C(v238, v239);
          AssetInfo.releaseDate.getter(v115, v116, (uint64_t)v5);
          if (v113(v5, 1, v114) == 1)
          {
            uint64_t v117 = v232;
            sub_2289DE8B0();
            sub_2289605E4((uint64_t)v5);
          }
          else
          {
            uint64_t v118 = v114;
            uint64_t v117 = v232;
            (*v234)(v232, (uint64_t)v5, v118);
          }
          uint64_t v119 = v236;
          if (sub_2289DE8F0())
          {
            uint64_t v120 = v242;
            uint64_t v121 = v243;
            sub_22895598C(&v241, v242);
            uint64_t v122 = AssetInfo.seriesSortKey.getter(v120, v121);
            uint64_t v124 = (v123 & 1) != 0 ? 0 : v122;
            uint64_t v125 = v239;
            uint64_t v126 = v240;
            sub_22895598C(v238, v239);
            uint64_t v127 = AssetInfo.seriesSortKey.getter(v125, v126);
            LOBYTE(v126) = v128;
            uint64_t v129 = *v233;
            uint64_t v130 = v117;
            uint64_t v131 = v237;
            ((void (*)(char *, uint64_t))*v233)(v130, v237);
            ((void (*)(char *, uint64_t))v129)(v119, v131);
            uint64_t v8 = v229;
            uint64_t v132 = (v126 & 1) != 0 ? 0 : v127;
            char v133 = v132 < v124;
          }
          else
          {
            char v133 = sub_2289DE8D0();
            BOOL v134 = *v233;
            uint64_t v135 = v237;
            ((void (*)(char *, uint64_t))*v233)(v117, v237);
            ((void (*)(char *, uint64_t))v134)(v119, v135);
          }
          sub_2289559D0((uint64_t)v238);
          sub_2289559D0((uint64_t)&v241);
          a1 = v230;
          if ((v133 & 1) == 0) {
            break;
          }
          uint64_t v136 = *v230;
          uint64_t v5 = v231;
          if (!*v230) {
            goto LABEL_186;
          }
          uint64_t v137 = v136 + v109;
          sub_2289605CC((long long *)(v136 + v109 + 40), (uint64_t)&v241);
          long long v138 = *(_OWORD *)(v137 + 16);
          *(_OWORD *)(v137 + 40) = *(_OWORD *)v137;
          *(_OWORD *)(v137 + 56) = v138;
          *(void *)(v137 + 72) = *(void *)(v137 + 32);
          sub_2289605CC(&v241, v137);
          v109 -= 40;
          if (v235 == (char *)++v108) {
            goto LABEL_72;
          }
        }
        uint64_t v5 = v231;
LABEL_72:
        uint64_t v39 = (uint64_t)(v235 + 1);
        uint64_t v107 = v223 + 40;
        uint64_t v38 = v224;
      }
      while (v235 + 1 != v220);
      uint64_t v39 = (uint64_t)v220;
    }
LABEL_94:
    if (v39 < v38) {
      goto LABEL_176;
    }
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v36 = v228;
    }
    else {
      uint64_t v36 = sub_2289B9F84(0, *((void *)v228 + 2) + 1, 1, v228);
    }
    unint64_t v140 = *((void *)v36 + 2);
    unint64_t v139 = *((void *)v36 + 3);
    unint64_t v37 = v140 + 1;
    if (v140 >= v139 >> 1) {
      uint64_t v36 = sub_2289B9F84((char *)(v139 > 1), v140 + 1, 1, v36);
    }
    *((void *)v36 + 2) = v37;
    uint64_t v141 = v36 + 32;
    uint64_t v142 = &v36[16 * v140 + 32];
    *(void *)uint64_t v142 = v224;
    *((void *)v142 + 1) = v39;
    v235 = (char *)v39;
    if (v140)
    {
      v228 = v36;
      while (1)
      {
        unint64_t v143 = v37 - 1;
        if (v37 >= 4)
        {
          uint64_t v148 = &v141[16 * v37];
          uint64_t v149 = *((void *)v148 - 8);
          uint64_t v150 = *((void *)v148 - 7);
          BOOL v154 = __OFSUB__(v150, v149);
          uint64_t v151 = v150 - v149;
          if (v154) {
            goto LABEL_165;
          }
          uint64_t v153 = *((void *)v148 - 6);
          uint64_t v152 = *((void *)v148 - 5);
          BOOL v154 = __OFSUB__(v152, v153);
          uint64_t v146 = v152 - v153;
          char v147 = v154;
          if (v154) {
            goto LABEL_166;
          }
          unint64_t v155 = v37 - 2;
          uint64_t v156 = &v141[16 * v37 - 32];
          uint64_t v158 = *(void *)v156;
          uint64_t v157 = *((void *)v156 + 1);
          BOOL v154 = __OFSUB__(v157, v158);
          uint64_t v159 = v157 - v158;
          if (v154) {
            goto LABEL_168;
          }
          BOOL v154 = __OFADD__(v146, v159);
          uint64_t v160 = v146 + v159;
          if (v154) {
            goto LABEL_171;
          }
          if (v160 >= v151)
          {
            char v178 = &v141[16 * v143];
            uint64_t v180 = *(void *)v178;
            uint64_t v179 = *((void *)v178 + 1);
            BOOL v154 = __OFSUB__(v179, v180);
            uint64_t v181 = v179 - v180;
            if (v154) {
              goto LABEL_175;
            }
            BOOL v171 = v146 < v181;
            goto LABEL_132;
          }
        }
        else
        {
          if (v37 != 3)
          {
            uint64_t v172 = *((void *)v36 + 4);
            uint64_t v173 = *((void *)v36 + 5);
            BOOL v154 = __OFSUB__(v173, v172);
            uint64_t v165 = v173 - v172;
            char v166 = v154;
            goto LABEL_126;
          }
          uint64_t v145 = *((void *)v36 + 4);
          uint64_t v144 = *((void *)v36 + 5);
          BOOL v154 = __OFSUB__(v144, v145);
          uint64_t v146 = v144 - v145;
          char v147 = v154;
        }
        if (v147) {
          goto LABEL_167;
        }
        unint64_t v155 = v37 - 2;
        uint64_t v161 = &v141[16 * v37 - 32];
        uint64_t v163 = *(void *)v161;
        uint64_t v162 = *((void *)v161 + 1);
        BOOL v164 = __OFSUB__(v162, v163);
        uint64_t v165 = v162 - v163;
        char v166 = v164;
        if (v164) {
          goto LABEL_170;
        }
        unint64_t v167 = &v141[16 * v143];
        uint64_t v169 = *(void *)v167;
        uint64_t v168 = *((void *)v167 + 1);
        BOOL v154 = __OFSUB__(v168, v169);
        uint64_t v170 = v168 - v169;
        if (v154) {
          goto LABEL_173;
        }
        if (__OFADD__(v165, v170)) {
          goto LABEL_174;
        }
        if (v165 + v170 >= v146)
        {
          BOOL v171 = v146 < v170;
LABEL_132:
          if (v171) {
            unint64_t v143 = v155;
          }
          goto LABEL_134;
        }
LABEL_126:
        if (v166) {
          goto LABEL_169;
        }
        uint64_t v174 = &v141[16 * v143];
        uint64_t v176 = *(void *)v174;
        uint64_t v175 = *((void *)v174 + 1);
        BOOL v154 = __OFSUB__(v175, v176);
        uint64_t v177 = v175 - v176;
        if (v154) {
          goto LABEL_172;
        }
        if (v177 < v165) {
          goto LABEL_14;
        }
LABEL_134:
        unint64_t v182 = v143 - 1;
        if (v143 - 1 >= v37)
        {
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
          goto LABEL_185;
        }
        uint64_t v183 = *a1;
        if (!*a1) {
          goto LABEL_187;
        }
        uint64_t v184 = v5;
        uint64_t v185 = a1;
        v186 = &v141[16 * v182];
        uint64_t v187 = *(void *)v186;
        uint64_t v188 = v141;
        unint64_t v189 = v143;
        v190 = &v141[16 * v143];
        uint64_t v191 = *((void *)v190 + 1);
        uint64_t v192 = v227;
        sub_22895E0B4((char *)(v183 + 40 * *(void *)v186), (char *)(v183 + 40 * *(void *)v190), v183 + 40 * v191, v225);
        uint64_t v227 = v192;
        if (v192) {
          goto LABEL_159;
        }
        if (v191 < v187) {
          goto LABEL_162;
        }
        uint64_t v193 = v228;
        if (v189 > *((void *)v228 + 2)) {
          goto LABEL_163;
        }
        *(void *)v186 = v187;
        *(void *)&v188[16 * v182 + 8] = v191;
        unint64_t v194 = *((void *)v193 + 2);
        if (v189 >= v194) {
          goto LABEL_164;
        }
        unint64_t v37 = v194 - 1;
        memmove(v190, v190 + 16, 16 * (v194 - 1 - v189));
        uint64_t v141 = v188;
        uint64_t v36 = v228;
        uint64_t v8 = v229;
        *((void *)v228 + 2) = v194 - 1;
        a1 = v185;
        uint64_t v5 = v184;
        if (v194 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v37 = 1;
LABEL_14:
    uint64_t v30 = a1[1];
    uint64_t v35 = v235;
    if ((uint64_t)v235 >= v30)
    {
      v195 = a1;
      goto LABEL_146;
    }
  }
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  uint64_t result = sub_2289DF330();
  __break(1u);
  return result;
}

uint64_t sub_2289587A0(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v124 = a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_2289DF450();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_146;
    }
    if (v3) {
      return sub_22895C6B4(0, v3, 1, v124);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_154;
  }
  uint64_t v108 = result;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t v115 = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
LABEL_111:
      uint64_t v117 = v2;
      uint64_t v107 = v8;
      if (v11 >= 2)
      {
        uint64_t v100 = *v124;
        do
        {
          unint64_t v101 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_141;
          }
          if (!v100) {
            goto LABEL_153;
          }
          uint64_t v102 = v10;
          uint64_t v103 = *(void *)&v10[16 * v101 + 32];
          uint64_t v104 = *(void *)&v10[16 * v11 + 24];
          sub_22895EA20((char *)(v100 + 40 * v103), (char *)(v100 + 40 * *(void *)&v10[16 * v11 + 16]), v100 + 40 * v104, v115);
          if (v117) {
            break;
          }
          if (v104 < v103) {
            goto LABEL_142;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v102 = sub_2289BA3EC((uint64_t)v102);
          }
          if (v101 >= *((void *)v102 + 2)) {
            goto LABEL_143;
          }
          long long v105 = &v102[16 * v101 + 32];
          *(void *)long long v105 = v103;
          *((void *)v105 + 1) = v104;
          unint64_t v106 = *((void *)v102 + 2);
          if (v11 > v106) {
            goto LABEL_144;
          }
          memmove(&v102[16 * v11 + 16], &v102[16 * v11 + 32], 16 * (v106 - v11));
          uint64_t v10 = v102;
          *((void *)v102 + 2) = v106 - 1;
          unint64_t v11 = v106 - 1;
        }
        while (v106 > 2);
      }
LABEL_122:
      swift_bridgeObjectRelease();
      *(void *)(v107 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v116 = v1;
    uint64_t v107 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v116 = v1;
    uint64_t v6 = v5 >> 1;
    sub_228952BB0(&qword_268284150);
    uint64_t v7 = sub_2289DEE70();
    *(void *)(v7 + 16) = v6;
    uint64_t v107 = v7;
    uint64_t v115 = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v12 = v9++;
    uint64_t v111 = v10;
    uint64_t v112 = v12;
    if (v9 < v3)
    {
      uint64_t v13 = *v124;
      sub_228955928(*v124 + 40 * v9, (uint64_t)&v121);
      uint64_t v109 = v13;
      sub_228955928(v13 + 40 * v12, (uint64_t)v118);
      uint64_t v14 = v122;
      uint64_t v15 = v123;
      sub_22895598C(&v121, v122);
      AssetInfo.sequenceNumber.getter(v14, v15);
      if ((v16 & 0x100000000) != 0) {
        sub_2289DF0F0();
      }
      uint64_t v17 = v119;
      uint64_t v18 = v120;
      sub_22895598C(v118, v119);
      AssetInfo.sequenceNumber.getter(v17, v18);
      if ((v19 & 0x100000000) != 0) {
        sub_2289DF0F0();
      }
      int v113 = sub_2289DF110();
      sub_2289559D0((uint64_t)v118);
      sub_2289559D0((uint64_t)&v121);
      uint64_t v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        uint64_t v20 = v109 + 40 * v12 + 40;
        while (1)
        {
          sub_228955928(v20 + 40, (uint64_t)&v121);
          sub_228955928(v20, (uint64_t)v118);
          uint64_t v21 = v122;
          uint64_t v22 = v123;
          sub_22895598C(&v121, v122);
          AssetInfo.sequenceNumber.getter(v21, v22);
          if ((v23 & 0x100000000) != 0) {
            sub_2289DF0F0();
          }
          uint64_t v24 = v119;
          uint64_t v25 = v120;
          sub_22895598C(v118, v119);
          AssetInfo.sequenceNumber.getter(v24, v25);
          if ((v26 & 0x100000000) != 0) {
            sub_2289DF0F0();
          }
          int v27 = sub_2289DF110();
          sub_2289559D0((uint64_t)v118);
          sub_2289559D0((uint64_t)&v121);
          if ((v113 ^ v27)) {
            break;
          }
          ++v9;
          v20 += 40;
          if (v3 == v9)
          {
            uint64_t v9 = v3;
            break;
          }
        }
        uint64_t v12 = v112;
      }
      if (v113)
      {
        if (v9 < v12) {
          goto LABEL_147;
        }
        if (v12 < v9)
        {
          uint64_t v28 = v3;
          uint64_t v29 = 40 * v9 - 40;
          uint64_t v30 = 40 * v12;
          uint64_t v31 = v9;
          uint64_t v32 = v12;
          do
          {
            if (v32 != --v31)
            {
              if (!v109) {
                goto LABEL_152;
              }
              uint64_t v33 = v109 + v30;
              sub_2289605CC((long long *)(v109 + v30), (uint64_t)&v121);
              uint64_t v34 = *(void *)(v109 + v29 + 32);
              long long v35 = *(_OWORD *)(v109 + v29 + 16);
              *(_OWORD *)uint64_t v33 = *(_OWORD *)(v109 + v29);
              *(_OWORD *)(v33 + 16) = v35;
              *(void *)(v33 + 32) = v34;
              sub_2289605CC(&v121, v109 + v29);
            }
            ++v32;
            v29 -= 40;
            v30 += 40;
          }
          while (v32 < v31);
          uint64_t v3 = v28;
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_61;
    }
    if (__OFSUB__(v9, v12)) {
      goto LABEL_145;
    }
    if (v9 - v12 >= v108) {
      goto LABEL_61;
    }
    if (__OFADD__(v12, v108)) {
      goto LABEL_148;
    }
    uint64_t v36 = v12 + v108 >= v3 ? v3 : v12 + v108;
    if (v36 < v12) {
      break;
    }
    if (v9 != v36)
    {
      uint64_t v37 = 40 * v9 - 40;
      uint64_t v110 = v36;
      do
      {
        uint64_t v38 = v12;
        uint64_t v114 = v37;
        do
        {
          uint64_t v39 = *v124 + v37;
          sub_228955928(v39 + 40, (uint64_t)&v121);
          sub_228955928(v39, (uint64_t)v118);
          uint64_t v40 = v122;
          uint64_t v41 = v123;
          sub_22895598C(&v121, v122);
          AssetInfo.sequenceNumber.getter(v40, v41);
          if ((v42 & 0x100000000) != 0) {
            sub_2289DF0F0();
          }
          uint64_t v43 = v119;
          uint64_t v44 = v120;
          sub_22895598C(v118, v119);
          AssetInfo.sequenceNumber.getter(v43, v44);
          if ((v45 & 0x100000000) != 0) {
            sub_2289DF0F0();
          }
          char v46 = sub_2289DF110();
          sub_2289559D0((uint64_t)v118);
          sub_2289559D0((uint64_t)&v121);
          if ((v46 & 1) == 0) {
            break;
          }
          uint64_t v47 = *v124;
          if (!*v124) {
            goto LABEL_150;
          }
          uint64_t v48 = v47 + v37;
          sub_2289605CC((long long *)(v47 + v37 + 40), (uint64_t)&v121);
          long long v49 = *(_OWORD *)(v48 + 16);
          *(_OWORD *)(v48 + 40) = *(_OWORD *)v48;
          *(_OWORD *)(v48 + 56) = v49;
          *(void *)(v48 + 72) = *(void *)(v48 + 32);
          sub_2289605CC(&v121, v48);
          v37 -= 40;
          ++v38;
        }
        while (v9 != v38);
        ++v9;
        uint64_t v12 = v112;
        uint64_t v37 = v114 + 40;
      }
      while (v9 != v110);
      uint64_t v9 = v110;
    }
LABEL_61:
    if (v9 < v12) {
      goto LABEL_140;
    }
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v10 = v111;
    }
    else {
      uint64_t v10 = sub_2289B9F84(0, *((void *)v111 + 2) + 1, 1, v111);
    }
    unint64_t v51 = *((void *)v10 + 2);
    unint64_t v50 = *((void *)v10 + 3);
    unint64_t v11 = v51 + 1;
    if (v51 >= v50 >> 1) {
      uint64_t v10 = sub_2289B9F84((char *)(v50 > 1), v51 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v11;
    uint64_t v52 = v10 + 32;
    uint64_t v53 = &v10[16 * v51 + 32];
    *(void *)uint64_t v53 = v12;
    *((void *)v53 + 1) = v9;
    if (v51)
    {
      while (1)
      {
        unint64_t v54 = v11 - 1;
        if (v11 >= 4)
        {
          char v59 = &v52[16 * v11];
          uint64_t v60 = *((void *)v59 - 8);
          uint64_t v61 = *((void *)v59 - 7);
          BOOL v65 = __OFSUB__(v61, v60);
          uint64_t v62 = v61 - v60;
          if (v65) {
            goto LABEL_129;
          }
          uint64_t v64 = *((void *)v59 - 6);
          uint64_t v63 = *((void *)v59 - 5);
          BOOL v65 = __OFSUB__(v63, v64);
          uint64_t v57 = v63 - v64;
          char v58 = v65;
          if (v65) {
            goto LABEL_130;
          }
          unint64_t v66 = v11 - 2;
          unsigned int v67 = &v52[16 * v11 - 32];
          uint64_t v69 = *(void *)v67;
          uint64_t v68 = *((void *)v67 + 1);
          BOOL v65 = __OFSUB__(v68, v69);
          uint64_t v70 = v68 - v69;
          if (v65) {
            goto LABEL_132;
          }
          BOOL v65 = __OFADD__(v57, v70);
          uint64_t v71 = v57 + v70;
          if (v65) {
            goto LABEL_135;
          }
          if (v71 >= v62)
          {
            char v89 = &v52[16 * v54];
            uint64_t v91 = *(void *)v89;
            uint64_t v90 = *((void *)v89 + 1);
            BOOL v65 = __OFSUB__(v90, v91);
            uint64_t v92 = v90 - v91;
            if (v65) {
              goto LABEL_139;
            }
            BOOL v82 = v57 < v92;
            goto LABEL_98;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v83 = *((void *)v10 + 4);
            uint64_t v84 = *((void *)v10 + 5);
            BOOL v65 = __OFSUB__(v84, v83);
            uint64_t v76 = v84 - v83;
            char v77 = v65;
            goto LABEL_92;
          }
          uint64_t v56 = *((void *)v10 + 4);
          uint64_t v55 = *((void *)v10 + 5);
          BOOL v65 = __OFSUB__(v55, v56);
          uint64_t v57 = v55 - v56;
          char v58 = v65;
        }
        if (v58) {
          goto LABEL_131;
        }
        unint64_t v66 = v11 - 2;
        uint64_t v72 = &v52[16 * v11 - 32];
        uint64_t v74 = *(void *)v72;
        uint64_t v73 = *((void *)v72 + 1);
        BOOL v75 = __OFSUB__(v73, v74);
        uint64_t v76 = v73 - v74;
        char v77 = v75;
        if (v75) {
          goto LABEL_134;
        }
        uint64_t v78 = &v52[16 * v54];
        uint64_t v80 = *(void *)v78;
        uint64_t v79 = *((void *)v78 + 1);
        BOOL v65 = __OFSUB__(v79, v80);
        uint64_t v81 = v79 - v80;
        if (v65) {
          goto LABEL_137;
        }
        if (__OFADD__(v76, v81)) {
          goto LABEL_138;
        }
        if (v76 + v81 >= v57)
        {
          BOOL v82 = v57 < v81;
LABEL_98:
          if (v82) {
            unint64_t v54 = v66;
          }
          goto LABEL_100;
        }
LABEL_92:
        if (v77) {
          goto LABEL_133;
        }
        char v85 = &v52[16 * v54];
        uint64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        BOOL v65 = __OFSUB__(v86, v87);
        uint64_t v88 = v86 - v87;
        if (v65) {
          goto LABEL_136;
        }
        if (v88 < v76) {
          goto LABEL_15;
        }
LABEL_100:
        unint64_t v93 = v54 - 1;
        if (v54 - 1 >= v11)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        if (!*v124) {
          goto LABEL_151;
        }
        uint64_t v94 = v10;
        uint64_t v95 = &v52[16 * v93];
        uint64_t v96 = *(void *)v95;
        uint64_t v97 = &v52[16 * v54];
        uint64_t v98 = *((void *)v97 + 1);
        sub_22895EA20((char *)(*v124 + 40 * *(void *)v95), (char *)(*v124 + 40 * *(void *)v97), *v124 + 40 * v98, v115);
        if (v116) {
          goto LABEL_122;
        }
        if (v98 < v96) {
          goto LABEL_126;
        }
        if (v54 > *((void *)v94 + 2)) {
          goto LABEL_127;
        }
        *(void *)uint64_t v95 = v96;
        *(void *)&v52[16 * v93 + 8] = v98;
        unint64_t v99 = *((void *)v94 + 2);
        if (v54 >= v99) {
          goto LABEL_128;
        }
        unint64_t v11 = v99 - 1;
        memmove(&v52[16 * v54], v97 + 16, 16 * (v99 - 1 - v54));
        uint64_t v10 = v94;
        *((void *)v94 + 2) = v99 - 1;
        if (v99 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_15:
    uint64_t v3 = v124[1];
    if (v9 >= v3)
    {
      uint64_t v8 = v107;
      uint64_t v2 = v116;
      goto LABEL_111;
    }
  }
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  uint64_t result = sub_2289DF330();
  __break(1u);
  return result;
}

uint64_t sub_228959108(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_228952BB0(&qword_26AECF7E0);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  v229 = (char *)&v210 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v210 - v8;
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v220 = (uint64_t)&v210 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v219 = (uint64_t)&v210 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v210 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v210 - v17;
  uint64_t v232 = sub_2289DE910();
  uint64_t v19 = *(void *)(v232 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v232);
  v228 = (char *)&v210 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  v233 = (char *)&v210 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v218 = (char *)&v210 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  v221 = (char *)&v210 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v210 - v29;
  MEMORY[0x270FA5388](v28);
  uint64_t v32 = (char *)&v210 - v31;
  long long v241 = a1;
  uint64_t v33 = a1[1];
  uint64_t result = sub_2289DF450();
  if (result >= v33)
  {
    if (v33 < 0) {
      goto LABEL_188;
    }
    if (v33) {
      return sub_22895C888(0, v33, 1, v241);
    }
    return result;
  }
  if (v33 >= 0) {
    uint64_t v35 = v33;
  }
  else {
    uint64_t v35 = v33 + 1;
  }
  if (v33 < -1) {
    goto LABEL_196;
  }
  uint64_t v213 = v16;
  uint64_t v227 = v9;
  uint64_t v215 = result;
  v212 = v32;
  if (v33 < 2)
  {
    uint64_t v38 = MEMORY[0x263F8EE78];
    v225 = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v33 != 1)
    {
      unint64_t v41 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v40 = (char *)MEMORY[0x263F8EE78];
LABEL_152:
      uint64_t v214 = v38;
      if (v41 >= 2)
      {
        uint64_t v203 = *v241;
        do
        {
          unint64_t v204 = v41 - 2;
          if (v41 < 2) {
            goto LABEL_183;
          }
          if (!v203) {
            goto LABEL_195;
          }
          unint64_t v205 = v40;
          uint64_t v206 = *(void *)&v40[16 * v204 + 32];
          uint64_t v207 = *(void *)&v40[16 * v41 + 24];
          sub_22895EE9C((char *)(v203 + 40 * v206), (char *)(v203 + 40 * *(void *)&v40[16 * v41 + 16]), v203 + 40 * v207, v225);
          if (v2) {
            goto LABEL_150;
          }
          if (v207 < v206) {
            goto LABEL_184;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v205 = sub_2289BA3EC((uint64_t)v205);
          }
          if (v204 >= *((void *)v205 + 2)) {
            goto LABEL_185;
          }
          v208 = &v205[16 * v204 + 32];
          *(void *)v208 = v206;
          *((void *)v208 + 1) = v207;
          unint64_t v209 = *((void *)v205 + 2);
          if (v41 > v209) {
            goto LABEL_186;
          }
          memmove(&v205[16 * v41 + 16], &v205[16 * v41 + 32], 16 * (v209 - v41));
          uint64_t v40 = v205;
          *((void *)v205 + 2) = v209 - 1;
          unint64_t v41 = v209 - 1;
        }
        while (v209 > 2);
      }
      swift_bridgeObjectRelease();
      *(void *)(v214 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v210 = v30;
    uint64_t v211 = v18;
    uint64_t v214 = MEMORY[0x263F8EE78];
    uint64_t v226 = v1;
  }
  else
  {
    uint64_t v210 = v30;
    uint64_t v211 = v18;
    uint64_t v226 = v1;
    uint64_t v36 = v35 >> 1;
    sub_228952BB0(&qword_268284150);
    uint64_t v37 = sub_2289DEE70();
    *(void *)(v37 + 16) = v36;
    uint64_t v214 = v37;
    v225 = (char *)(v37 + 32);
  }
  uint64_t v39 = 0;
  v234 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  v230 = (void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v231 = (void (**)(char *, uint64_t, uint64_t))(v19 + 32);
  uint64_t v40 = (char *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v42 = v39++;
    uint64_t v223 = v40;
    uint64_t v224 = v42;
    if (v39 < v33)
    {
      uint64_t v43 = *v241;
      sub_228955928(*v241 + 40 * v39, (uint64_t)&v238);
      uint64_t v222 = v43;
      sub_228955928(v43 + 40 * v42, (uint64_t)v235);
      uint64_t v44 = v239;
      uint64_t v45 = v240;
      sub_22895598C(&v238, v239);
      AssetInfo.seriesSortKey.getter(v44, v45);
      uint64_t v217 = v33;
      if ((v46 & 1) != 0
        && (uint64_t v47 = v236, v48 = v237, sub_22895598C(v235, v236), AssetInfo.seriesSortKey.getter(v47, v48), (v49 & 1) != 0))
      {
        uint64_t v61 = v239;
        uint64_t v62 = v240;
        sub_22895598C(&v238, v239);
        uint64_t v63 = (uint64_t)v211;
        AssetInfo.releaseDate.getter(v61, v62, (uint64_t)v211);
        uint64_t v64 = *v234;
        uint64_t v65 = v232;
        unsigned int v66 = (*v234)(v63, 1, v232);
        unsigned int v67 = v210;
        uint64_t v68 = v212;
        if (v66 == 1)
        {
          sub_2289DE8B0();
          sub_2289605E4(v63);
        }
        else
        {
          (*v231)(v212, v63, v65);
        }
        uint64_t v69 = (uint64_t)v213;
        uint64_t v70 = v236;
        uint64_t v71 = v237;
        sub_22895598C(v235, v236);
        AssetInfo.releaseDate.getter(v70, v71, v69);
        if (v64(v69, 1, v65) == 1)
        {
          sub_2289DE8B0();
          sub_2289605E4(v69);
        }
        else
        {
          (*v231)(v67, v69, v65);
        }
        int v72 = sub_2289DE8D0();
        uint64_t v73 = *v230;
        (*v230)(v67, v65);
        uint64_t v74 = v68;
        BOOL v60 = v72;
        v73(v74, v65);
        uint64_t v42 = v224;
        uint64_t v33 = v217;
      }
      else
      {
        uint64_t v50 = v239;
        uint64_t v51 = v240;
        sub_22895598C(&v238, v239);
        uint64_t v52 = AssetInfo.seriesSortKey.getter(v50, v51);
        if (v53) {
          uint64_t v54 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v54 = v52;
        }
        uint64_t v55 = v236;
        uint64_t v56 = v237;
        sub_22895598C(v235, v236);
        uint64_t v57 = AssetInfo.seriesSortKey.getter(v55, v56);
        BOOL v60 = (v58 & 1) == 0 && v57 < v54;
      }
      sub_2289559D0((uint64_t)v235);
      sub_2289559D0((uint64_t)&v238);
      uint64_t v39 = v42 + 2;
      if (v42 + 2 < v33)
      {
        uint64_t v75 = v222 + 40 * v42 + 40;
        BOOL v216 = v60;
        while (1)
        {
          sub_228955928(v75 + 40, (uint64_t)&v238);
          sub_228955928(v75, (uint64_t)v235);
          uint64_t v76 = v239;
          uint64_t v77 = v240;
          sub_22895598C(&v238, v239);
          AssetInfo.seriesSortKey.getter(v76, v77);
          if ((v78 & 1) == 0) {
            goto LABEL_39;
          }
          uint64_t v79 = v236;
          uint64_t v80 = v237;
          sub_22895598C(v235, v236);
          AssetInfo.seriesSortKey.getter(v79, v80);
          if (v81)
          {
            uint64_t v93 = v239;
            uint64_t v94 = v240;
            sub_22895598C(&v238, v239);
            uint64_t v95 = v219;
            AssetInfo.releaseDate.getter(v93, v94, v219);
            uint64_t v96 = v95;
            uint64_t v97 = *v234;
            uint64_t v98 = v232;
            if ((*v234)(v96, 1, v232) == 1)
            {
              sub_2289DE8B0();
              sub_2289605E4(v96);
            }
            else
            {
              (*v231)(v221, v96, v98);
            }
            uint64_t v99 = v236;
            uint64_t v100 = v237;
            sub_22895598C(v235, v236);
            uint64_t v101 = v220;
            AssetInfo.releaseDate.getter(v99, v100, v220);
            if (v97(v101, 1, v98) == 1)
            {
              uint64_t v102 = v218;
              sub_2289DE8B0();
              sub_2289605E4(v101);
            }
            else
            {
              uint64_t v102 = v218;
              (*v231)(v218, v101, v98);
            }
            uint64_t v42 = v224;
            uint64_t v103 = v221;
            int v92 = sub_2289DE8D0();
            uint64_t v104 = *v230;
            (*v230)(v102, v98);
            v104(v103, v98);
            uint64_t v33 = v217;
            BOOL v60 = v216;
          }
          else
          {
LABEL_39:
            uint64_t v82 = v239;
            uint64_t v83 = v240;
            sub_22895598C(&v238, v239);
            uint64_t v84 = AssetInfo.seriesSortKey.getter(v82, v83);
            uint64_t v86 = (v85 & 1) != 0 ? 0x7FFFFFFFFFFFFFFFLL : v84;
            uint64_t v87 = v236;
            uint64_t v88 = v237;
            sub_22895598C(v235, v236);
            uint64_t v89 = AssetInfo.seriesSortKey.getter(v87, v88);
            BOOL v91 = (v90 & 1) == 0 && v89 < v86;
            int v92 = v91;
          }
          sub_2289559D0((uint64_t)v235);
          sub_2289559D0((uint64_t)&v238);
          if ((v60 ^ v92)) {
            break;
          }
          ++v39;
          v75 += 40;
          if (v33 == v39)
          {
            uint64_t v39 = v33;
            break;
          }
        }
      }
      if (v60)
      {
        if (v39 < v42) {
          goto LABEL_189;
        }
        if (v42 < v39)
        {
          uint64_t v105 = 40 * v39 - 40;
          uint64_t v106 = 40 * v42;
          uint64_t v107 = v42;
          uint64_t v108 = v39;
          do
          {
            if (v107 != --v108)
            {
              if (!v222) {
                goto LABEL_194;
              }
              uint64_t v109 = v222 + v106;
              uint64_t v110 = v222 + v105;
              sub_2289605CC((long long *)(v222 + v106), (uint64_t)&v238);
              uint64_t v111 = *(void *)(v110 + 32);
              long long v112 = *(_OWORD *)(v110 + 16);
              *(_OWORD *)uint64_t v109 = *(_OWORD *)v110;
              *(_OWORD *)(v109 + 16) = v112;
              *(void *)(v109 + 32) = v111;
              sub_2289605CC(&v238, v110);
            }
            ++v107;
            v105 -= 40;
            v106 += 40;
          }
          while (v107 < v108);
          uint64_t v42 = v224;
        }
      }
    }
    if (v39 >= v33) {
      goto LABEL_102;
    }
    if (__OFSUB__(v39, v42)) {
      goto LABEL_187;
    }
    if (v39 - v42 >= v215) {
      goto LABEL_102;
    }
    if (__OFADD__(v42, v215)) {
      goto LABEL_190;
    }
    uint64_t v113 = v42 + v215 >= v33 ? v33 : v42 + v215;
    if (v113 < v42) {
      break;
    }
    if (v39 != v113)
    {
      uint64_t v114 = 40 * v39 - 40;
      uint64_t v222 = v113;
      do
      {
        uint64_t v115 = v114;
        do
        {
          uint64_t v116 = *v241 + v115;
          sub_228955928(v116 + 40, (uint64_t)&v238);
          sub_228955928(v116, (uint64_t)v235);
          uint64_t v117 = v239;
          uint64_t v118 = v240;
          sub_22895598C(&v238, v239);
          AssetInfo.seriesSortKey.getter(v117, v118);
          if ((v119 & 1) != 0
            && (uint64_t v120 = v236,
                uint64_t v121 = v237,
                sub_22895598C(v235, v236),
                AssetInfo.seriesSortKey.getter(v120, v121),
                (v122 & 1) != 0))
          {
            uint64_t v134 = v239;
            uint64_t v135 = v240;
            sub_22895598C(&v238, v239);
            uint64_t v136 = (uint64_t)v227;
            AssetInfo.releaseDate.getter(v134, v135, (uint64_t)v227);
            uint64_t v137 = v136;
            long long v138 = *v234;
            uint64_t v139 = v232;
            if ((*v234)(v137, 1, v232) == 1)
            {
              sub_2289DE8B0();
              sub_2289605E4(v137);
            }
            else
            {
              (*v231)(v233, v137, v139);
            }
            uint64_t v140 = (uint64_t)v229;
            uint64_t v141 = v236;
            uint64_t v142 = v237;
            sub_22895598C(v235, v236);
            AssetInfo.releaseDate.getter(v141, v142, v140);
            if (v138(v140, 1, v139) == 1)
            {
              unint64_t v143 = v228;
              sub_2289DE8B0();
              sub_2289605E4(v140);
            }
            else
            {
              unint64_t v143 = v228;
              (*v231)(v228, v140, v139);
            }
            uint64_t v144 = v233;
            char v145 = sub_2289DE8D0();
            uint64_t v146 = v143;
            BOOL v133 = v145;
            char v147 = *v230;
            (*v230)(v146, v139);
            v147(v144, v139);
          }
          else
          {
            uint64_t v123 = v239;
            uint64_t v124 = v240;
            sub_22895598C(&v238, v239);
            uint64_t v125 = AssetInfo.seriesSortKey.getter(v123, v124);
            if (v126) {
              uint64_t v127 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v127 = v125;
            }
            uint64_t v128 = v236;
            uint64_t v129 = v237;
            sub_22895598C(v235, v236);
            uint64_t v130 = AssetInfo.seriesSortKey.getter(v128, v129);
            BOOL v133 = (v131 & 1) == 0 && v130 < v127;
          }
          sub_2289559D0((uint64_t)v235);
          sub_2289559D0((uint64_t)&v238);
          if (!v133) {
            break;
          }
          uint64_t v148 = *v241;
          if (!*v241) {
            goto LABEL_192;
          }
          uint64_t v149 = v148 + v115;
          sub_2289605CC((long long *)(v148 + v115 + 40), (uint64_t)&v238);
          long long v150 = *(_OWORD *)(v149 + 16);
          *(_OWORD *)(v149 + 40) = *(_OWORD *)v149;
          *(_OWORD *)(v149 + 56) = v150;
          *(void *)(v149 + 72) = *(void *)(v149 + 32);
          sub_2289605CC(&v238, v149);
          v115 -= 40;
          ++v42;
        }
        while (v39 != v42);
        ++v39;
        v114 += 40;
        uint64_t v42 = v224;
      }
      while (v39 != v222);
      uint64_t v39 = v222;
    }
LABEL_102:
    if (v39 < v42) {
      goto LABEL_182;
    }
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v40 = v223;
    }
    else {
      uint64_t v40 = sub_2289B9F84(0, *((void *)v223 + 2) + 1, 1, v223);
    }
    unint64_t v152 = *((void *)v40 + 2);
    unint64_t v151 = *((void *)v40 + 3);
    unint64_t v41 = v152 + 1;
    if (v152 >= v151 >> 1) {
      uint64_t v40 = sub_2289B9F84((char *)(v151 > 1), v152 + 1, 1, v40);
    }
    *((void *)v40 + 2) = v41;
    uint64_t v153 = v40 + 32;
    BOOL v154 = &v40[16 * v152 + 32];
    *(void *)BOOL v154 = v42;
    *((void *)v154 + 1) = v39;
    if (v152)
    {
      while (1)
      {
        unint64_t v155 = v41 - 1;
        if (v41 >= 4)
        {
          uint64_t v160 = &v153[16 * v41];
          uint64_t v161 = *((void *)v160 - 8);
          uint64_t v162 = *((void *)v160 - 7);
          BOOL v166 = __OFSUB__(v162, v161);
          uint64_t v163 = v162 - v161;
          if (v166) {
            goto LABEL_171;
          }
          uint64_t v165 = *((void *)v160 - 6);
          uint64_t v164 = *((void *)v160 - 5);
          BOOL v166 = __OFSUB__(v164, v165);
          uint64_t v158 = v164 - v165;
          char v159 = v166;
          if (v166) {
            goto LABEL_172;
          }
          unint64_t v167 = v41 - 2;
          uint64_t v168 = &v153[16 * v41 - 32];
          uint64_t v170 = *(void *)v168;
          uint64_t v169 = *((void *)v168 + 1);
          BOOL v166 = __OFSUB__(v169, v170);
          uint64_t v171 = v169 - v170;
          if (v166) {
            goto LABEL_174;
          }
          BOOL v166 = __OFADD__(v158, v171);
          uint64_t v172 = v158 + v171;
          if (v166) {
            goto LABEL_177;
          }
          if (v172 >= v163)
          {
            v190 = &v153[16 * v155];
            uint64_t v192 = *(void *)v190;
            uint64_t v191 = *((void *)v190 + 1);
            BOOL v166 = __OFSUB__(v191, v192);
            uint64_t v193 = v191 - v192;
            if (v166) {
              goto LABEL_181;
            }
            BOOL v183 = v158 < v193;
            goto LABEL_139;
          }
        }
        else
        {
          if (v41 != 3)
          {
            uint64_t v184 = *((void *)v40 + 4);
            uint64_t v185 = *((void *)v40 + 5);
            BOOL v166 = __OFSUB__(v185, v184);
            uint64_t v177 = v185 - v184;
            char v178 = v166;
            goto LABEL_133;
          }
          uint64_t v157 = *((void *)v40 + 4);
          uint64_t v156 = *((void *)v40 + 5);
          BOOL v166 = __OFSUB__(v156, v157);
          uint64_t v158 = v156 - v157;
          char v159 = v166;
        }
        if (v159) {
          goto LABEL_173;
        }
        unint64_t v167 = v41 - 2;
        uint64_t v173 = &v153[16 * v41 - 32];
        uint64_t v175 = *(void *)v173;
        uint64_t v174 = *((void *)v173 + 1);
        BOOL v176 = __OFSUB__(v174, v175);
        uint64_t v177 = v174 - v175;
        char v178 = v176;
        if (v176) {
          goto LABEL_176;
        }
        uint64_t v179 = &v153[16 * v155];
        uint64_t v181 = *(void *)v179;
        uint64_t v180 = *((void *)v179 + 1);
        BOOL v166 = __OFSUB__(v180, v181);
        uint64_t v182 = v180 - v181;
        if (v166) {
          goto LABEL_179;
        }
        if (__OFADD__(v177, v182)) {
          goto LABEL_180;
        }
        if (v177 + v182 >= v158)
        {
          BOOL v183 = v158 < v182;
LABEL_139:
          if (v183) {
            unint64_t v155 = v167;
          }
          goto LABEL_141;
        }
LABEL_133:
        if (v178) {
          goto LABEL_175;
        }
        v186 = &v153[16 * v155];
        uint64_t v188 = *(void *)v186;
        uint64_t v187 = *((void *)v186 + 1);
        BOOL v166 = __OFSUB__(v187, v188);
        uint64_t v189 = v187 - v188;
        if (v166) {
          goto LABEL_178;
        }
        if (v189 < v177) {
          goto LABEL_15;
        }
LABEL_141:
        unint64_t v194 = v155 - 1;
        if (v155 - 1 >= v41)
        {
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
          goto LABEL_191;
        }
        if (!*v241) {
          goto LABEL_193;
        }
        v195 = v40;
        uint64_t v196 = &v153[16 * v194];
        uint64_t v197 = *(void *)v196;
        unint64_t v198 = &v153[16 * v155];
        uint64_t v199 = *((void *)v198 + 1);
        uint64_t v200 = v226;
        sub_22895EE9C((char *)(*v241 + 40 * *(void *)v196), (char *)(*v241 + 40 * *(void *)v198), *v241 + 40 * v199, v225);
        uint64_t v226 = v200;
        if (v200)
        {
LABEL_150:
          uint64_t v202 = v214;
          swift_bridgeObjectRelease();
          *(void *)(v202 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        if (v199 < v197) {
          goto LABEL_168;
        }
        if (v155 > *((void *)v195 + 2)) {
          goto LABEL_169;
        }
        *(void *)uint64_t v196 = v197;
        *(void *)&v153[16 * v194 + 8] = v199;
        unint64_t v201 = *((void *)v195 + 2);
        if (v155 >= v201) {
          goto LABEL_170;
        }
        unint64_t v41 = v201 - 1;
        memmove(&v153[16 * v155], v198 + 16, 16 * (v201 - 1 - v155));
        uint64_t v40 = v195;
        *((void *)v195 + 2) = v201 - 1;
        if (v201 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v41 = 1;
LABEL_15:
    uint64_t v33 = v241[1];
    if (v39 >= v33)
    {
      uint64_t v2 = v226;
      uint64_t v38 = v214;
      goto LABEL_152;
    }
  }
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  uint64_t result = sub_2289DF330();
  __break(1u);
  return result;
}

uint64_t sub_22895A1C8(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v124 = a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_2289DF450();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_146;
    }
    if (v3) {
      return sub_22895CCEC(0, v3, 1, v124);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_154;
  }
  uint64_t v108 = result;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t v115 = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
LABEL_111:
      uint64_t v117 = v2;
      uint64_t v107 = v8;
      if (v11 >= 2)
      {
        uint64_t v100 = *v124;
        do
        {
          unint64_t v101 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_141;
          }
          if (!v100) {
            goto LABEL_153;
          }
          uint64_t v102 = v10;
          uint64_t v103 = *(void *)&v10[16 * v101 + 32];
          uint64_t v104 = *(void *)&v10[16 * v11 + 24];
          sub_22895F7C4((char *)(v100 + 40 * v103), (char *)(v100 + 40 * *(void *)&v10[16 * v11 + 16]), v100 + 40 * v104, v115);
          if (v117) {
            break;
          }
          if (v104 < v103) {
            goto LABEL_142;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v102 = sub_2289BA3EC((uint64_t)v102);
          }
          if (v101 >= *((void *)v102 + 2)) {
            goto LABEL_143;
          }
          uint64_t v105 = &v102[16 * v101 + 32];
          *(void *)uint64_t v105 = v103;
          *((void *)v105 + 1) = v104;
          unint64_t v106 = *((void *)v102 + 2);
          if (v11 > v106) {
            goto LABEL_144;
          }
          memmove(&v102[16 * v11 + 16], &v102[16 * v11 + 32], 16 * (v106 - v11));
          uint64_t v10 = v102;
          *((void *)v102 + 2) = v106 - 1;
          unint64_t v11 = v106 - 1;
        }
        while (v106 > 2);
      }
LABEL_122:
      swift_bridgeObjectRelease();
      *(void *)(v107 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v116 = v1;
    uint64_t v107 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v116 = v1;
    uint64_t v6 = v5 >> 1;
    sub_228952BB0(&qword_268284150);
    uint64_t v7 = sub_2289DEE70();
    *(void *)(v7 + 16) = v6;
    uint64_t v107 = v7;
    uint64_t v115 = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v12 = v9++;
    uint64_t v111 = v10;
    uint64_t v112 = v12;
    if (v9 < v3)
    {
      uint64_t v13 = *v124;
      sub_228955928(*v124 + 40 * v9, (uint64_t)&v121);
      uint64_t v109 = v13;
      sub_228955928(v13 + 40 * v12, (uint64_t)v118);
      uint64_t v14 = v122;
      uint64_t v15 = v123;
      sub_22895598C(&v121, v122);
      AssetInfo.sequenceNumber.getter(v14, v15);
      if ((v16 & 0x100000000) != 0) {
        sub_2289DF0F0();
      }
      uint64_t v17 = v119;
      uint64_t v18 = v120;
      sub_22895598C(v118, v119);
      AssetInfo.sequenceNumber.getter(v17, v18);
      if ((v19 & 0x100000000) != 0) {
        sub_2289DF0F0();
      }
      int v113 = sub_2289DF110();
      sub_2289559D0((uint64_t)v118);
      sub_2289559D0((uint64_t)&v121);
      uint64_t v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        uint64_t v20 = v109 + 40 * v12 + 40;
        while (1)
        {
          sub_228955928(v20 + 40, (uint64_t)&v121);
          sub_228955928(v20, (uint64_t)v118);
          uint64_t v21 = v122;
          uint64_t v22 = v123;
          sub_22895598C(&v121, v122);
          AssetInfo.sequenceNumber.getter(v21, v22);
          if ((v23 & 0x100000000) != 0) {
            sub_2289DF0F0();
          }
          uint64_t v24 = v119;
          uint64_t v25 = v120;
          sub_22895598C(v118, v119);
          AssetInfo.sequenceNumber.getter(v24, v25);
          if ((v26 & 0x100000000) != 0) {
            sub_2289DF0F0();
          }
          int v27 = sub_2289DF110();
          sub_2289559D0((uint64_t)v118);
          sub_2289559D0((uint64_t)&v121);
          if ((v113 ^ v27)) {
            break;
          }
          ++v9;
          v20 += 40;
          if (v3 == v9)
          {
            uint64_t v9 = v3;
            break;
          }
        }
        uint64_t v12 = v112;
      }
      if (v113)
      {
        if (v9 < v12) {
          goto LABEL_147;
        }
        if (v12 < v9)
        {
          uint64_t v28 = v3;
          uint64_t v29 = 40 * v9 - 40;
          uint64_t v30 = 40 * v12;
          uint64_t v31 = v9;
          uint64_t v32 = v12;
          do
          {
            if (v32 != --v31)
            {
              if (!v109) {
                goto LABEL_152;
              }
              uint64_t v33 = v109 + v30;
              sub_2289605CC((long long *)(v109 + v30), (uint64_t)&v121);
              uint64_t v34 = *(void *)(v109 + v29 + 32);
              long long v35 = *(_OWORD *)(v109 + v29 + 16);
              *(_OWORD *)uint64_t v33 = *(_OWORD *)(v109 + v29);
              *(_OWORD *)(v33 + 16) = v35;
              *(void *)(v33 + 32) = v34;
              sub_2289605CC(&v121, v109 + v29);
            }
            ++v32;
            v29 -= 40;
            v30 += 40;
          }
          while (v32 < v31);
          uint64_t v3 = v28;
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_61;
    }
    if (__OFSUB__(v9, v12)) {
      goto LABEL_145;
    }
    if (v9 - v12 >= v108) {
      goto LABEL_61;
    }
    if (__OFADD__(v12, v108)) {
      goto LABEL_148;
    }
    uint64_t v36 = v12 + v108 >= v3 ? v3 : v12 + v108;
    if (v36 < v12) {
      break;
    }
    if (v9 != v36)
    {
      uint64_t v37 = 40 * v9 - 40;
      uint64_t v110 = v36;
      do
      {
        uint64_t v38 = v12;
        uint64_t v114 = v37;
        do
        {
          uint64_t v39 = *v124 + v37;
          sub_228955928(v39 + 40, (uint64_t)&v121);
          sub_228955928(v39, (uint64_t)v118);
          uint64_t v40 = v122;
          uint64_t v41 = v123;
          sub_22895598C(&v121, v122);
          AssetInfo.sequenceNumber.getter(v40, v41);
          if ((v42 & 0x100000000) != 0) {
            sub_2289DF0F0();
          }
          uint64_t v43 = v119;
          uint64_t v44 = v120;
          sub_22895598C(v118, v119);
          AssetInfo.sequenceNumber.getter(v43, v44);
          if ((v45 & 0x100000000) != 0) {
            sub_2289DF0F0();
          }
          char v46 = sub_2289DF110();
          sub_2289559D0((uint64_t)v118);
          sub_2289559D0((uint64_t)&v121);
          if ((v46 & 1) == 0) {
            break;
          }
          uint64_t v47 = *v124;
          if (!*v124) {
            goto LABEL_150;
          }
          uint64_t v48 = v47 + v37;
          sub_2289605CC((long long *)(v47 + v37 + 40), (uint64_t)&v121);
          long long v49 = *(_OWORD *)(v48 + 16);
          *(_OWORD *)(v48 + 40) = *(_OWORD *)v48;
          *(_OWORD *)(v48 + 56) = v49;
          *(void *)(v48 + 72) = *(void *)(v48 + 32);
          sub_2289605CC(&v121, v48);
          v37 -= 40;
          ++v38;
        }
        while (v9 != v38);
        ++v9;
        uint64_t v12 = v112;
        uint64_t v37 = v114 + 40;
      }
      while (v9 != v110);
      uint64_t v9 = v110;
    }
LABEL_61:
    if (v9 < v12) {
      goto LABEL_140;
    }
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v10 = v111;
    }
    else {
      uint64_t v10 = sub_2289B9F84(0, *((void *)v111 + 2) + 1, 1, v111);
    }
    unint64_t v51 = *((void *)v10 + 2);
    unint64_t v50 = *((void *)v10 + 3);
    unint64_t v11 = v51 + 1;
    if (v51 >= v50 >> 1) {
      uint64_t v10 = sub_2289B9F84((char *)(v50 > 1), v51 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v11;
    uint64_t v52 = v10 + 32;
    char v53 = &v10[16 * v51 + 32];
    *(void *)char v53 = v12;
    *((void *)v53 + 1) = v9;
    if (v51)
    {
      while (1)
      {
        unint64_t v54 = v11 - 1;
        if (v11 >= 4)
        {
          char v59 = &v52[16 * v11];
          uint64_t v60 = *((void *)v59 - 8);
          uint64_t v61 = *((void *)v59 - 7);
          BOOL v65 = __OFSUB__(v61, v60);
          uint64_t v62 = v61 - v60;
          if (v65) {
            goto LABEL_129;
          }
          uint64_t v64 = *((void *)v59 - 6);
          uint64_t v63 = *((void *)v59 - 5);
          BOOL v65 = __OFSUB__(v63, v64);
          uint64_t v57 = v63 - v64;
          char v58 = v65;
          if (v65) {
            goto LABEL_130;
          }
          unint64_t v66 = v11 - 2;
          unsigned int v67 = &v52[16 * v11 - 32];
          uint64_t v69 = *(void *)v67;
          uint64_t v68 = *((void *)v67 + 1);
          BOOL v65 = __OFSUB__(v68, v69);
          uint64_t v70 = v68 - v69;
          if (v65) {
            goto LABEL_132;
          }
          BOOL v65 = __OFADD__(v57, v70);
          uint64_t v71 = v57 + v70;
          if (v65) {
            goto LABEL_135;
          }
          if (v71 >= v62)
          {
            uint64_t v89 = &v52[16 * v54];
            uint64_t v91 = *(void *)v89;
            uint64_t v90 = *((void *)v89 + 1);
            BOOL v65 = __OFSUB__(v90, v91);
            uint64_t v92 = v90 - v91;
            if (v65) {
              goto LABEL_139;
            }
            BOOL v82 = v57 < v92;
            goto LABEL_98;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v83 = *((void *)v10 + 4);
            uint64_t v84 = *((void *)v10 + 5);
            BOOL v65 = __OFSUB__(v84, v83);
            uint64_t v76 = v84 - v83;
            char v77 = v65;
            goto LABEL_92;
          }
          uint64_t v56 = *((void *)v10 + 4);
          uint64_t v55 = *((void *)v10 + 5);
          BOOL v65 = __OFSUB__(v55, v56);
          uint64_t v57 = v55 - v56;
          char v58 = v65;
        }
        if (v58) {
          goto LABEL_131;
        }
        unint64_t v66 = v11 - 2;
        int v72 = &v52[16 * v11 - 32];
        uint64_t v74 = *(void *)v72;
        uint64_t v73 = *((void *)v72 + 1);
        BOOL v75 = __OFSUB__(v73, v74);
        uint64_t v76 = v73 - v74;
        char v77 = v75;
        if (v75) {
          goto LABEL_134;
        }
        char v78 = &v52[16 * v54];
        uint64_t v80 = *(void *)v78;
        uint64_t v79 = *((void *)v78 + 1);
        BOOL v65 = __OFSUB__(v79, v80);
        uint64_t v81 = v79 - v80;
        if (v65) {
          goto LABEL_137;
        }
        if (__OFADD__(v76, v81)) {
          goto LABEL_138;
        }
        if (v76 + v81 >= v57)
        {
          BOOL v82 = v57 < v81;
LABEL_98:
          if (v82) {
            unint64_t v54 = v66;
          }
          goto LABEL_100;
        }
LABEL_92:
        if (v77) {
          goto LABEL_133;
        }
        char v85 = &v52[16 * v54];
        uint64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        BOOL v65 = __OFSUB__(v86, v87);
        uint64_t v88 = v86 - v87;
        if (v65) {
          goto LABEL_136;
        }
        if (v88 < v76) {
          goto LABEL_15;
        }
LABEL_100:
        unint64_t v93 = v54 - 1;
        if (v54 - 1 >= v11)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        if (!*v124) {
          goto LABEL_151;
        }
        uint64_t v94 = v10;
        uint64_t v95 = &v52[16 * v93];
        uint64_t v96 = *(void *)v95;
        uint64_t v97 = &v52[16 * v54];
        uint64_t v98 = *((void *)v97 + 1);
        sub_22895F7C4((char *)(*v124 + 40 * *(void *)v95), (char *)(*v124 + 40 * *(void *)v97), *v124 + 40 * v98, v115);
        if (v116) {
          goto LABEL_122;
        }
        if (v98 < v96) {
          goto LABEL_126;
        }
        if (v54 > *((void *)v94 + 2)) {
          goto LABEL_127;
        }
        *(void *)uint64_t v95 = v96;
        *(void *)&v52[16 * v93 + 8] = v98;
        unint64_t v99 = *((void *)v94 + 2);
        if (v54 >= v99) {
          goto LABEL_128;
        }
        unint64_t v11 = v99 - 1;
        memmove(&v52[16 * v54], v97 + 16, 16 * (v99 - 1 - v54));
        uint64_t v10 = v94;
        *((void *)v94 + 2) = v99 - 1;
        if (v99 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_15:
    uint64_t v3 = v124[1];
    if (v9 >= v3)
    {
      uint64_t v8 = v107;
      uint64_t v2 = v116;
      goto LABEL_111;
    }
  }
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  uint64_t result = sub_2289DF330();
  __break(1u);
  return result;
}

uint64_t sub_22895AB78(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_228952BB0(&qword_26AECF7E0);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v214 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v232 = (uint64_t)&v214 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v221 = (uint64_t)&v214 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v220 = (uint64_t)&v214 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v214 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v214 - v17;
  uint64_t v19 = sub_2289DE910();
  v233 = *(void (***)(char *, uint64_t))(v19 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v231 = (char *)&v214 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v236 = (char *)&v214 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v219 = (char *)&v214 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v222 = (char *)&v214 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v214 - v29;
  MEMORY[0x270FA5388](v28);
  uint64_t v32 = (char *)&v214 - v31;
  uint64_t v33 = a1[1];
  uint64_t result = sub_2289DF450();
  if (result >= v33)
  {
    if (v33 < 0) {
      goto LABEL_187;
    }
    if (v33) {
      return sub_22895CED8(0, v33, 1, a1);
    }
    return result;
  }
  if (v33 >= 0) {
    uint64_t v35 = v33;
  }
  else {
    uint64_t v35 = v33 + 1;
  }
  if (v33 < -1) {
    goto LABEL_195;
  }
  uint64_t v217 = v16;
  v230 = v7;
  uint64_t v235 = v19;
  uint64_t v223 = result;
  uint64_t v36 = v33;
  BOOL v216 = v32;
  if (v33 < 2)
  {
    uint64_t v39 = MEMORY[0x263F8EE78];
    uint64_t v227 = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v33 != 1)
    {
      unint64_t v43 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v228 = MEMORY[0x263F8EE78];
LABEL_151:
      uint64_t v218 = v39;
      if (v43 >= 2)
      {
        uint64_t v206 = *a1;
        do
        {
          unint64_t v207 = v43 - 2;
          if (v43 < 2) {
            goto LABEL_182;
          }
          if (!v206) {
            goto LABEL_194;
          }
          uint64_t v208 = *(void *)(v228 + 32 + 16 * v207);
          uint64_t v209 = *(void *)(v228 + 32 + 16 * (v43 - 1) + 8);
          sub_22895FC70((char *)(v206 + 40 * v208), (char *)(v206 + 40 * *(void *)(v228 + 32 + 16 * (v43 - 1))), v206 + 40 * v209, v227);
          if (v2) {
            goto LABEL_149;
          }
          if (v209 < v208) {
            goto LABEL_183;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v228 = (uint64_t)sub_2289BA3EC(v228);
          }
          uint64_t v210 = v228;
          if (v207 >= *(void *)(v228 + 16)) {
            goto LABEL_184;
          }
          uint64_t v211 = v228 + 32;
          v212 = (void *)(v228 + 32 + 16 * v207);
          void *v212 = v208;
          v212[1] = v209;
          unint64_t v213 = *(void *)(v210 + 16);
          if (v43 > v213) {
            goto LABEL_185;
          }
          memmove((void *)(v211 + 16 * (v43 - 1)), (const void *)(v211 + 16 * v43), 16 * (v213 - v43));
          *(void *)(v210 + 16) = v213 - 1;
          unint64_t v43 = v213 - 1;
        }
        while (v213 > 2);
      }
      swift_bridgeObjectRelease();
      *(void *)(v218 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v214 = v30;
    uint64_t v215 = v18;
    uint64_t v218 = MEMORY[0x263F8EE78];
    uint64_t v229 = v1;
  }
  else
  {
    uint64_t v214 = v30;
    uint64_t v215 = v18;
    uint64_t v229 = v1;
    uint64_t v37 = v35 >> 1;
    sub_228952BB0(&qword_268284150);
    uint64_t v38 = sub_2289DEE70();
    *(void *)(v38 + 16) = v37;
    uint64_t v218 = v38;
    uint64_t v227 = (char *)(v38 + 32);
  }
  uint64_t v40 = 0;
  uint64_t v41 = v233;
  uint64_t v243 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v233 + 6);
  ++v233;
  v234 = (void (**)(char *, uint64_t, uint64_t))(v41 + 4);
  uint64_t v42 = (char *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v44 = v40++;
    uint64_t v225 = v44;
    if (v40 >= v36)
    {
      uint64_t v64 = v223;
    }
    else
    {
      uint64_t v45 = *a1;
      sub_228955928(*a1 + 40 * v40, (uint64_t)&v240);
      uint64_t v224 = v45;
      sub_228955928(v45 + 40 * v44, (uint64_t)v237);
      uint64_t v46 = v241;
      uint64_t v47 = v242;
      sub_22895598C(&v240, v241);
      AssetInfo.seriesSortKey.getter(v46, v47);
      uint64_t v226 = v36;
      if ((v48 & 1) != 0
        && (uint64_t v49 = v238, v50 = v239, sub_22895598C(v237, v238), AssetInfo.seriesSortKey.getter(v49, v50), (v51 & 1) != 0))
      {
        uint64_t v65 = v241;
        uint64_t v66 = v242;
        sub_22895598C(&v240, v241);
        uint64_t v67 = (uint64_t)v215;
        AssetInfo.releaseDate.getter(v65, v66, (uint64_t)v215);
        uint64_t v68 = *v243;
        uint64_t v69 = v235;
        unsigned int v70 = (*v243)(v67, 1, v235);
        uint64_t v71 = v214;
        int v72 = v216;
        if (v70 == 1)
        {
          sub_2289DE8B0();
          sub_2289605E4(v67);
        }
        else
        {
          (*v234)(v216, v67, v69);
        }
        uint64_t v73 = (uint64_t)v217;
        uint64_t v74 = v238;
        uint64_t v75 = v239;
        sub_22895598C(v237, v238);
        AssetInfo.releaseDate.getter(v74, v75, v73);
        if (v68(v73, 1, v69) == 1)
        {
          sub_2289DE8B0();
          sub_2289605E4(v73);
        }
        else
        {
          (*v234)(v71, v73, v69);
        }
        uint64_t v36 = v226;
        LODWORD(v228) = sub_2289DE8E0();
        uint64_t v76 = *v233;
        (*v233)(v71, v69);
        v76(v72, v69);
        uint64_t v44 = v225;
      }
      else
      {
        uint64_t v52 = v241;
        uint64_t v53 = v242;
        sub_22895598C(&v240, v241);
        uint64_t v54 = AssetInfo.seriesSortKey.getter(v52, v53);
        char v56 = v55;
        uint64_t v58 = v238;
        uint64_t v57 = v239;
        sub_22895598C(v237, v238);
        uint64_t v59 = AssetInfo.seriesSortKey.getter(v58, v57);
        uint64_t v61 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v60 & 1) == 0) {
          uint64_t v61 = v59;
        }
        BOOL v63 = (v56 & 1) == 0 && v54 < v61;
        LODWORD(v228) = v63;
      }
      sub_2289559D0((uint64_t)v237);
      sub_2289559D0((uint64_t)&v240);
      uint64_t v40 = v44 + 2;
      if (v44 + 2 < v36)
      {
        uint64_t v77 = v224 + 40 * v44 + 40;
        while (1)
        {
          sub_228955928(v77 + 40, (uint64_t)&v240);
          sub_228955928(v77, (uint64_t)v237);
          uint64_t v78 = v241;
          uint64_t v79 = v242;
          sub_22895598C(&v240, v241);
          AssetInfo.seriesSortKey.getter(v78, v79);
          if ((v80 & 1) == 0) {
            goto LABEL_40;
          }
          uint64_t v81 = v238;
          uint64_t v82 = v239;
          sub_22895598C(v237, v238);
          AssetInfo.seriesSortKey.getter(v81, v82);
          if (v83)
          {
            uint64_t v96 = v241;
            uint64_t v97 = v242;
            sub_22895598C(&v240, v241);
            uint64_t v98 = v220;
            AssetInfo.releaseDate.getter(v96, v97, v220);
            uint64_t v99 = v98;
            uint64_t v100 = *v243;
            uint64_t v101 = v235;
            if ((*v243)(v99, 1, v235) == 1)
            {
              sub_2289DE8B0();
              sub_2289605E4(v99);
            }
            else
            {
              (*v234)(v222, v99, v101);
            }
            uint64_t v102 = v238;
            uint64_t v103 = v239;
            sub_22895598C(v237, v238);
            uint64_t v104 = v221;
            AssetInfo.releaseDate.getter(v102, v103, v221);
            if (v100(v104, 1, v101) == 1)
            {
              uint64_t v105 = v219;
              sub_2289DE8B0();
              sub_2289605E4(v104);
            }
            else
            {
              uint64_t v105 = v219;
              (*v234)(v219, v104, v101);
            }
            unint64_t v106 = v222;
            int v95 = sub_2289DE8E0();
            uint64_t v107 = v105;
            uint64_t v108 = *v233;
            (*v233)(v107, v101);
            v108(v106, v101);
            uint64_t v44 = v225;
          }
          else
          {
LABEL_40:
            uint64_t v84 = v241;
            uint64_t v85 = v242;
            sub_22895598C(&v240, v241);
            uint64_t v86 = AssetInfo.seriesSortKey.getter(v84, v85);
            char v88 = v87;
            uint64_t v89 = v238;
            uint64_t v90 = v239;
            sub_22895598C(v237, v238);
            uint64_t v91 = AssetInfo.seriesSortKey.getter(v89, v90);
            uint64_t v93 = 0x7FFFFFFFFFFFFFFFLL;
            if ((v92 & 1) == 0) {
              uint64_t v93 = v91;
            }
            BOOL v94 = (v88 & 1) == 0 && v86 < v93;
            int v95 = v94;
          }
          sub_2289559D0((uint64_t)v237);
          sub_2289559D0((uint64_t)&v240);
          uint64_t v36 = v226;
          if ((v228 ^ v95)) {
            break;
          }
          ++v40;
          v77 += 40;
          if (v226 == v40)
          {
            uint64_t v40 = v226;
            break;
          }
        }
      }
      uint64_t v64 = v223;
      if (v228)
      {
        if (v40 < v44) {
          goto LABEL_188;
        }
        if (v44 < v40)
        {
          uint64_t v109 = 40 * v40 - 40;
          uint64_t v110 = 40 * v44;
          uint64_t v111 = v44;
          uint64_t v112 = v40;
          do
          {
            if (v111 != --v112)
            {
              if (!v224) {
                goto LABEL_193;
              }
              uint64_t v113 = v224 + v110;
              uint64_t v114 = v224 + v109;
              sub_2289605CC((long long *)(v224 + v110), (uint64_t)&v240);
              uint64_t v115 = *(void *)(v114 + 32);
              long long v116 = *(_OWORD *)(v114 + 16);
              *(_OWORD *)uint64_t v113 = *(_OWORD *)v114;
              *(_OWORD *)(v113 + 16) = v116;
              *(void *)(v113 + 32) = v115;
              sub_2289605CC(&v240, v114);
              uint64_t v64 = v223;
            }
            ++v111;
            v109 -= 40;
            v110 += 40;
          }
          while (v111 < v112);
          uint64_t v44 = v225;
          uint64_t v36 = v226;
        }
      }
    }
    if (v40 >= v36) {
      goto LABEL_102;
    }
    if (__OFSUB__(v40, v44)) {
      goto LABEL_186;
    }
    if (v40 - v44 >= v64) {
      goto LABEL_102;
    }
    if (__OFADD__(v44, v64)) {
      goto LABEL_189;
    }
    uint64_t v117 = v44 + v64 >= v36 ? v36 : v44 + v64;
    if (v117 < v44) {
      break;
    }
    if (v40 != v117)
    {
      uint64_t v228 = (uint64_t)v42;
      uint64_t v118 = 40 * v40 - 40;
      uint64_t v224 = v117;
      do
      {
        uint64_t v226 = v118;
        do
        {
          uint64_t v119 = *a1 + v118;
          sub_228955928(v119 + 40, (uint64_t)&v240);
          sub_228955928(v119, (uint64_t)v237);
          uint64_t v120 = v241;
          uint64_t v121 = v242;
          sub_22895598C(&v240, v241);
          AssetInfo.seriesSortKey.getter(v120, v121);
          if ((v122 & 1) != 0
            && (uint64_t v123 = v238,
                uint64_t v124 = v239,
                sub_22895598C(v237, v238),
                AssetInfo.seriesSortKey.getter(v123, v124),
                (v125 & 1) != 0))
          {
            uint64_t v138 = v241;
            uint64_t v139 = v242;
            sub_22895598C(&v240, v241);
            uint64_t v140 = v138;
            uint64_t v141 = v232;
            AssetInfo.releaseDate.getter(v140, v139, v232);
            uint64_t v142 = *v243;
            uint64_t v143 = v235;
            if ((*v243)(v141, 1, v235) == 1)
            {
              sub_2289DE8B0();
              sub_2289605E4(v141);
            }
            else
            {
              (*v234)(v236, v141, v143);
            }
            uint64_t v144 = v238;
            uint64_t v145 = v239;
            sub_22895598C(v237, v238);
            uint64_t v146 = (uint64_t)v230;
            AssetInfo.releaseDate.getter(v144, v145, (uint64_t)v230);
            if (v142(v146, 1, v143) == 1)
            {
              char v147 = v231;
              sub_2289DE8B0();
              sub_2289605E4(v146);
            }
            else
            {
              char v147 = v231;
              (*v234)(v231, v146, v143);
            }
            uint64_t v148 = v236;
            char v137 = sub_2289DE8E0();
            uint64_t v149 = v147;
            long long v150 = *v233;
            (*v233)(v149, v143);
            v150(v148, v143);
          }
          else
          {
            uint64_t v126 = v241;
            uint64_t v127 = v242;
            sub_22895598C(&v240, v241);
            uint64_t v128 = AssetInfo.seriesSortKey.getter(v126, v127);
            char v130 = v129;
            uint64_t v131 = v238;
            uint64_t v132 = v239;
            sub_22895598C(v237, v238);
            uint64_t v133 = AssetInfo.seriesSortKey.getter(v131, v132);
            if (v134) {
              uint64_t v135 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v135 = v133;
            }
            char v137 = (v130 & 1) == 0 && v128 < v135;
          }
          sub_2289559D0((uint64_t)v237);
          sub_2289559D0((uint64_t)&v240);
          if ((v137 & 1) == 0) {
            break;
          }
          uint64_t v151 = *a1;
          if (!*a1) {
            goto LABEL_191;
          }
          uint64_t v152 = v151 + v118;
          sub_2289605CC((long long *)(v151 + v118 + 40), (uint64_t)&v240);
          long long v153 = *(_OWORD *)(v152 + 16);
          *(_OWORD *)(v152 + 40) = *(_OWORD *)v152;
          *(_OWORD *)(v152 + 56) = v153;
          *(void *)(v152 + 72) = *(void *)(v152 + 32);
          sub_2289605CC(&v240, v152);
          v118 -= 40;
          ++v44;
        }
        while (v40 != v44);
        ++v40;
        uint64_t v118 = v226 + 40;
        uint64_t v44 = v225;
      }
      while (v40 != v224);
      uint64_t v40 = v224;
      uint64_t v42 = (char *)v228;
    }
LABEL_102:
    if (v40 < v44) {
      goto LABEL_181;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v42 = sub_2289B9F84(0, *((void *)v42 + 2) + 1, 1, v42);
    }
    unint64_t v155 = *((void *)v42 + 2);
    unint64_t v154 = *((void *)v42 + 3);
    unint64_t v43 = v155 + 1;
    if (v155 >= v154 >> 1) {
      uint64_t v42 = sub_2289B9F84((char *)(v154 > 1), v155 + 1, 1, v42);
    }
    *((void *)v42 + 2) = v43;
    uint64_t v156 = v42 + 32;
    uint64_t v157 = &v42[16 * v155 + 32];
    *(void *)uint64_t v157 = v44;
    *((void *)v157 + 1) = v40;
    uint64_t v228 = (uint64_t)v42;
    if (v155)
    {
      while (1)
      {
        unint64_t v158 = v43 - 1;
        if (v43 >= 4)
        {
          uint64_t v163 = &v156[16 * v43];
          uint64_t v164 = *((void *)v163 - 8);
          uint64_t v165 = *((void *)v163 - 7);
          BOOL v169 = __OFSUB__(v165, v164);
          uint64_t v166 = v165 - v164;
          if (v169) {
            goto LABEL_170;
          }
          uint64_t v168 = *((void *)v163 - 6);
          uint64_t v167 = *((void *)v163 - 5);
          BOOL v169 = __OFSUB__(v167, v168);
          uint64_t v161 = v167 - v168;
          char v162 = v169;
          if (v169) {
            goto LABEL_171;
          }
          unint64_t v170 = v43 - 2;
          uint64_t v171 = &v156[16 * v43 - 32];
          uint64_t v173 = *(void *)v171;
          uint64_t v172 = *((void *)v171 + 1);
          BOOL v169 = __OFSUB__(v172, v173);
          uint64_t v174 = v172 - v173;
          if (v169) {
            goto LABEL_173;
          }
          BOOL v169 = __OFADD__(v161, v174);
          uint64_t v175 = v161 + v174;
          if (v169) {
            goto LABEL_176;
          }
          if (v175 >= v166)
          {
            uint64_t v193 = &v156[16 * v158];
            uint64_t v195 = *(void *)v193;
            uint64_t v194 = *((void *)v193 + 1);
            BOOL v169 = __OFSUB__(v194, v195);
            uint64_t v196 = v194 - v195;
            if (v169) {
              goto LABEL_180;
            }
            BOOL v186 = v161 < v196;
            goto LABEL_139;
          }
        }
        else
        {
          if (v43 != 3)
          {
            uint64_t v187 = *((void *)v42 + 4);
            uint64_t v188 = *((void *)v42 + 5);
            BOOL v169 = __OFSUB__(v188, v187);
            uint64_t v180 = v188 - v187;
            char v181 = v169;
            goto LABEL_133;
          }
          uint64_t v160 = *((void *)v42 + 4);
          uint64_t v159 = *((void *)v42 + 5);
          BOOL v169 = __OFSUB__(v159, v160);
          uint64_t v161 = v159 - v160;
          char v162 = v169;
        }
        if (v162) {
          goto LABEL_172;
        }
        unint64_t v170 = v43 - 2;
        BOOL v176 = &v156[16 * v43 - 32];
        uint64_t v178 = *(void *)v176;
        uint64_t v177 = *((void *)v176 + 1);
        BOOL v179 = __OFSUB__(v177, v178);
        uint64_t v180 = v177 - v178;
        char v181 = v179;
        if (v179) {
          goto LABEL_175;
        }
        uint64_t v182 = &v156[16 * v158];
        uint64_t v184 = *(void *)v182;
        uint64_t v183 = *((void *)v182 + 1);
        BOOL v169 = __OFSUB__(v183, v184);
        uint64_t v185 = v183 - v184;
        if (v169) {
          goto LABEL_178;
        }
        if (__OFADD__(v180, v185)) {
          goto LABEL_179;
        }
        if (v180 + v185 >= v161)
        {
          BOOL v186 = v161 < v185;
LABEL_139:
          if (v186) {
            unint64_t v158 = v170;
          }
          goto LABEL_141;
        }
LABEL_133:
        if (v181) {
          goto LABEL_174;
        }
        uint64_t v189 = &v156[16 * v158];
        uint64_t v191 = *(void *)v189;
        uint64_t v190 = *((void *)v189 + 1);
        BOOL v169 = __OFSUB__(v190, v191);
        uint64_t v192 = v190 - v191;
        if (v169) {
          goto LABEL_177;
        }
        if (v192 < v180) {
          goto LABEL_15;
        }
LABEL_141:
        unint64_t v197 = v158 - 1;
        if (v158 - 1 >= v43)
        {
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
          goto LABEL_190;
        }
        if (!*a1) {
          goto LABEL_192;
        }
        unint64_t v198 = &v156[16 * v197];
        uint64_t v199 = *(void *)v198;
        uint64_t v200 = &v156[16 * v158];
        uint64_t v201 = *((void *)v200 + 1);
        uint64_t v202 = v229;
        sub_22895FC70((char *)(*a1 + 40 * *(void *)v198), (char *)(*a1 + 40 * *(void *)v200), *a1 + 40 * v201, v227);
        uint64_t v229 = v202;
        if (v202)
        {
LABEL_149:
          uint64_t v205 = v218;
          swift_bridgeObjectRelease();
          *(void *)(v205 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        if (v201 < v199) {
          goto LABEL_167;
        }
        uint64_t v203 = v228;
        if (v158 > *(void *)(v228 + 16)) {
          goto LABEL_168;
        }
        *(void *)unint64_t v198 = v199;
        *(void *)&v156[16 * v197 + 8] = v201;
        unint64_t v204 = *(void *)(v203 + 16);
        if (v158 >= v204) {
          goto LABEL_169;
        }
        uint64_t v42 = (char *)v203;
        unint64_t v43 = v204 - 1;
        memmove(&v156[16 * v158], v200 + 16, 16 * (v204 - 1 - v158));
        *((void *)v42 + 2) = v204 - 1;
        if (v204 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v43 = 1;
LABEL_15:
    uint64_t v36 = a1[1];
    if (v40 >= v36)
    {
      uint64_t v2 = v229;
      uint64_t v39 = v218;
      goto LABEL_151;
    }
  }
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  uint64_t result = sub_2289DF330();
  __break(1u);
  return result;
}

uint64_t sub_22895BC3C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v25 = result;
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    uint64_t v6 = 40 * a3 - 40;
LABEL_5:
    uint64_t v7 = v25;
    uint64_t v8 = v6;
    while (1)
    {
      uint64_t v9 = *a4 + v8;
      sub_228955928(v9 + 40, (uint64_t)&v22);
      sub_228955928(v9, (uint64_t)v19);
      uint64_t v10 = v23;
      uint64_t v11 = v24;
      sub_22895598C(&v22, v23);
      AssetInfo.title.getter(v10, v11);
      uint64_t v12 = v20;
      uint64_t v13 = v21;
      sub_22895598C(v19, v20);
      AssetInfo.title.getter(v12, v13);
      sub_2289550F0();
      uint64_t v14 = sub_2289DF180();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2289559D0((uint64_t)v19);
      uint64_t result = sub_2289559D0((uint64_t)&v22);
      if (v14 != -1)
      {
LABEL_4:
        ++v5;
        v6 += 40;
        if (v5 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v15 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v16 = v15 + v8;
      sub_2289605CC((long long *)(v15 + v8 + 40), (uint64_t)&v22);
      long long v17 = *(_OWORD *)(v16 + 16);
      *(_OWORD *)(v16 + 40) = *(_OWORD *)v16;
      *(_OWORD *)(v16 + 56) = v17;
      *(void *)(v16 + 72) = *(void *)(v16 + 32);
      uint64_t result = sub_2289605CC(&v22, v16);
      v8 -= 40;
      if (v5 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_22895BDE8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v52 = a1;
  uint64_t v7 = sub_228952BB0(&qword_26AECF7E0);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v59 = (uint64_t)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v50 - v10;
  uint64_t v12 = sub_2289DE910();
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v58 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v13);
  uint64_t v67 = (char *)&v50 - v17;
  uint64_t v51 = a2;
  if (a3 != a2)
  {
    char v60 = (unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    char v55 = (void (**)(char *, uint64_t))(v16 + 8);
    char v56 = (void (**)(char *, char *, uint64_t))(v16 + 32);
    uint64_t v18 = 40 * a3 - 40;
    uint64_t v57 = v11;
    uint64_t v54 = a4;
LABEL_5:
    uint64_t v19 = v52;
    uint64_t v53 = v18;
    while (1)
    {
      uint64_t v20 = *a4 + v18;
      sub_228955928(v20 + 40, (uint64_t)&v64);
      sub_228955928(v20, (uint64_t)v61);
      uint64_t v21 = v65;
      uint64_t v22 = v66;
      sub_22895598C(&v64, v65);
      AssetInfo.seriesSortKey.getter(v21, v22);
      if ((v23 & 1) != 0
        && (uint64_t v24 = v62, v25 = v63, sub_22895598C(v61, v62), AssetInfo.seriesSortKey.getter(v24, v25), (v26 & 1) != 0))
      {
        uint64_t v38 = v65;
        uint64_t v39 = v66;
        sub_22895598C(&v64, v65);
        AssetInfo.releaseDate.getter(v38, v39, (uint64_t)v11);
        uint64_t v40 = *v60;
        if ((*v60)(v11, 1, v12) == 1)
        {
          sub_2289DE8B0();
          sub_2289605E4((uint64_t)v11);
        }
        else
        {
          (*v56)(v67, v11, v12);
        }
        uint64_t v41 = v62;
        uint64_t v42 = v63;
        sub_22895598C(v61, v62);
        uint64_t v43 = v59;
        AssetInfo.releaseDate.getter(v41, v42, v59);
        if (v40((char *)v43, 1, v12) == 1)
        {
          uint64_t v44 = v58;
          sub_2289DE8B0();
          sub_2289605E4(v43);
        }
        else
        {
          uint64_t v44 = v58;
          (*v56)(v58, (char *)v43, v12);
        }
        uint64_t v45 = v67;
        char v37 = sub_2289DE8E0();
        uint64_t v46 = *v55;
        (*v55)(v44, v12);
        v46(v45, v12);
        uint64_t v11 = v57;
        a4 = v54;
      }
      else
      {
        uint64_t v27 = v65;
        uint64_t v28 = v66;
        sub_22895598C(&v64, v65);
        uint64_t v29 = AssetInfo.seriesSortKey.getter(v27, v28);
        if (v30) {
          uint64_t v31 = 0;
        }
        else {
          uint64_t v31 = v29;
        }
        uint64_t v32 = v62;
        uint64_t v33 = v63;
        sub_22895598C(v61, v62);
        uint64_t v34 = AssetInfo.seriesSortKey.getter(v32, v33);
        if (v35) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = v34;
        }
        char v37 = v31 < v36;
      }
      sub_2289559D0((uint64_t)v61);
      uint64_t result = sub_2289559D0((uint64_t)&v64);
      if ((v37 & 1) == 0)
      {
LABEL_4:
        ++a3;
        uint64_t v18 = v53 + 40;
        if (a3 == v51) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v47 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v48 = v47 + v18;
      sub_2289605CC((long long *)(v47 + v18 + 40), (uint64_t)&v64);
      long long v49 = *(_OWORD *)(v48 + 16);
      *(_OWORD *)(v48 + 40) = *(_OWORD *)v48;
      *(_OWORD *)(v48 + 56) = v49;
      *(void *)(v48 + 72) = *(void *)(v48 + 32);
      uint64_t result = sub_2289605CC(&v64, v48);
      v18 -= 40;
      if (a3 == ++v19) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_22895C24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v57 = a4;
  uint64_t v48 = a1;
  uint64_t v6 = sub_228952BB0(&qword_26AECF7E0);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = &v46[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = &v46[-v10];
  uint64_t v12 = sub_2289DE910();
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  char v55 = &v46[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t result = MEMORY[0x270FA5388](v13);
  uint64_t v18 = &v46[-v17];
  uint64_t v56 = a3;
  uint64_t v47 = a2;
  if (a3 != a2)
  {
    uint64_t v19 = (uint64_t)v9;
    uint64_t v20 = (uint64_t)v11;
    long long v64 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    uint64_t v51 = (void (**)(unsigned char *, uint64_t))(v16 + 8);
    uint64_t v52 = (void (**)(unsigned char *, uint64_t, uint64_t))(v16 + 32);
    uint64_t v21 = 40 * v56 - 40;
    uint64_t v53 = v19;
    uint64_t v54 = v11;
LABEL_5:
    uint64_t v22 = v48;
    uint64_t v49 = v21;
    while (1)
    {
      uint64_t v23 = *v57 + v21;
      sub_228955928(v23 + 40, (uint64_t)&v61);
      sub_228955928(v23, (uint64_t)v58);
      uint64_t v24 = v62;
      uint64_t v25 = v63;
      sub_22895598C(&v61, v62);
      AssetInfo.releaseDate.getter(v24, v25, v20);
      char v26 = *v64;
      if ((*v64)(v20, 1, v12) == 1)
      {
        sub_2289DE8B0();
        sub_2289605E4(v20);
      }
      else
      {
        (*v52)(v18, v20, v12);
      }
      uint64_t v27 = v59;
      uint64_t v28 = v60;
      sub_22895598C(v58, v59);
      AssetInfo.releaseDate.getter(v27, v28, v19);
      if (v26(v19, 1, v12) == 1)
      {
        uint64_t v29 = v55;
        sub_2289DE8B0();
        sub_2289605E4(v19);
      }
      else
      {
        uint64_t v29 = v55;
        (*v52)(v55, v19, v12);
      }
      if (sub_2289DE8F0())
      {
        uint64_t v30 = v62;
        uint64_t v31 = v63;
        sub_22895598C(&v61, v62);
        uint64_t v32 = AssetInfo.seriesSortKey.getter(v30, v31);
        if (v33) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = v32;
        }
        uint64_t v50 = v34;
        uint64_t v35 = v59;
        uint64_t v36 = v60;
        sub_22895598C(v58, v59);
        uint64_t v37 = AssetInfo.seriesSortKey.getter(v35, v36);
        LOBYTE(v36) = v38;
        uint64_t v39 = *v51;
        (*v51)(v29, v12);
        v39(v18, v12);
        if (v36) {
          uint64_t v40 = 0;
        }
        else {
          uint64_t v40 = v37;
        }
        char v41 = v40 < v50;
      }
      else
      {
        char v41 = sub_2289DE8D0();
        uint64_t v42 = *v51;
        (*v51)(v29, v12);
        v42(v18, v12);
      }
      sub_2289559D0((uint64_t)v58);
      uint64_t result = sub_2289559D0((uint64_t)&v61);
      uint64_t v19 = v53;
      uint64_t v20 = (uint64_t)v54;
      if ((v41 & 1) == 0)
      {
LABEL_4:
        uint64_t v21 = v49 + 40;
        if (++v56 == v47) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v43 = *v57;
      if (!*v57) {
        break;
      }
      uint64_t v44 = v43 + v21;
      sub_2289605CC((long long *)(v43 + v21 + 40), (uint64_t)&v61);
      long long v45 = *(_OWORD *)(v44 + 16);
      *(_OWORD *)(v44 + 40) = *(_OWORD *)v44;
      *(_OWORD *)(v44 + 56) = v45;
      *(void *)(v44 + 72) = *(void *)(v44 + 32);
      uint64_t result = sub_2289605CC(&v61, v44);
      v21 -= 40;
      if (v56 == ++v22) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_22895C6B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v19 = result;
  uint64_t v27 = a3;
  if (a3 != a2)
  {
    uint64_t v5 = 40 * v27 - 40;
LABEL_5:
    uint64_t v6 = v19;
    uint64_t v20 = v5;
    while (1)
    {
      uint64_t v7 = *a4 + v5;
      sub_228955928(v7 + 40, (uint64_t)&v24);
      sub_228955928(v7, (uint64_t)v21);
      uint64_t v8 = v25;
      uint64_t v9 = v26;
      sub_22895598C(&v24, v25);
      AssetInfo.sequenceNumber.getter(v8, v9);
      if ((v10 & 0x100000000) != 0) {
        sub_2289DF0F0();
      }
      uint64_t v12 = v22;
      uint64_t v11 = v23;
      sub_22895598C(v21, v22);
      AssetInfo.sequenceNumber.getter(v12, v11);
      if ((v13 & 0x100000000) != 0) {
        sub_2289DF0F0();
      }
      char v14 = sub_2289DF110();
      sub_2289559D0((uint64_t)v21);
      uint64_t result = sub_2289559D0((uint64_t)&v24);
      if ((v14 & 1) == 0)
      {
LABEL_4:
        uint64_t v5 = v20 + 40;
        if (++v27 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v15 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v16 = v15 + v5;
      sub_2289605CC((long long *)(v15 + v5 + 40), (uint64_t)&v24);
      long long v17 = *(_OWORD *)(v16 + 16);
      *(_OWORD *)(v16 + 40) = *(_OWORD *)v16;
      *(_OWORD *)(v16 + 56) = v17;
      *(void *)(v16 + 72) = *(void *)(v16 + 32);
      uint64_t result = sub_2289605CC(&v24, v16);
      v5 -= 40;
      if (v27 == ++v6) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_22895C888(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v52 = a1;
  uint64_t v7 = sub_228952BB0(&qword_26AECF7E0);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v59 = (uint64_t)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v50 - v10;
  uint64_t v12 = sub_2289DE910();
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v58 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v13);
  uint64_t v67 = (char *)&v50 - v17;
  uint64_t v51 = a2;
  if (a3 != a2)
  {
    uint64_t v60 = (unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    char v55 = (void (**)(char *, uint64_t))(v16 + 8);
    uint64_t v56 = (void (**)(char *, char *, uint64_t))(v16 + 32);
    uint64_t v18 = 40 * a3 - 40;
    uint64_t v57 = v11;
    uint64_t v54 = a4;
LABEL_5:
    uint64_t v19 = v52;
    uint64_t v53 = v18;
    while (1)
    {
      uint64_t v20 = *a4 + v18;
      sub_228955928(v20 + 40, (uint64_t)&v64);
      sub_228955928(v20, (uint64_t)v61);
      uint64_t v21 = v65;
      uint64_t v22 = v66;
      sub_22895598C(&v64, v65);
      AssetInfo.seriesSortKey.getter(v21, v22);
      if ((v23 & 1) != 0
        && (uint64_t v24 = v62, v25 = v63, sub_22895598C(v61, v62), AssetInfo.seriesSortKey.getter(v24, v25), (v26 & 1) != 0))
      {
        uint64_t v38 = v65;
        uint64_t v39 = v66;
        sub_22895598C(&v64, v65);
        AssetInfo.releaseDate.getter(v38, v39, (uint64_t)v11);
        uint64_t v40 = *v60;
        if ((*v60)(v11, 1, v12) == 1)
        {
          sub_2289DE8B0();
          sub_2289605E4((uint64_t)v11);
        }
        else
        {
          (*v56)(v67, v11, v12);
        }
        uint64_t v41 = v62;
        uint64_t v42 = v63;
        sub_22895598C(v61, v62);
        uint64_t v43 = v59;
        AssetInfo.releaseDate.getter(v41, v42, v59);
        if (v40((char *)v43, 1, v12) == 1)
        {
          uint64_t v44 = v58;
          sub_2289DE8B0();
          sub_2289605E4(v43);
        }
        else
        {
          uint64_t v44 = v58;
          (*v56)(v58, (char *)v43, v12);
        }
        long long v45 = v67;
        char v37 = sub_2289DE8D0();
        uint64_t v46 = *v55;
        (*v55)(v44, v12);
        v46(v45, v12);
        uint64_t v11 = v57;
        a4 = v54;
      }
      else
      {
        uint64_t v27 = v65;
        uint64_t v28 = v66;
        sub_22895598C(&v64, v65);
        uint64_t v29 = AssetInfo.seriesSortKey.getter(v27, v28);
        if (v30) {
          uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v31 = v29;
        }
        uint64_t v32 = v62;
        uint64_t v33 = v63;
        sub_22895598C(v61, v62);
        uint64_t v34 = AssetInfo.seriesSortKey.getter(v32, v33);
        char v37 = (v35 & 1) == 0 && v34 < v31;
      }
      sub_2289559D0((uint64_t)v61);
      uint64_t result = sub_2289559D0((uint64_t)&v64);
      if ((v37 & 1) == 0)
      {
LABEL_4:
        ++a3;
        uint64_t v18 = v53 + 40;
        if (a3 == v51) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v47 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v48 = v47 + v18;
      sub_2289605CC((long long *)(v47 + v18 + 40), (uint64_t)&v64);
      long long v49 = *(_OWORD *)(v48 + 16);
      *(_OWORD *)(v48 + 40) = *(_OWORD *)v48;
      *(_OWORD *)(v48 + 56) = v49;
      *(void *)(v48 + 72) = *(void *)(v48 + 32);
      uint64_t result = sub_2289605CC(&v64, v48);
      v18 -= 40;
      if (a3 == ++v19) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_22895CCEC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v19 = result;
  uint64_t v27 = a3;
  if (a3 != a2)
  {
    uint64_t v5 = 40 * v27 - 40;
LABEL_5:
    uint64_t v6 = v19;
    uint64_t v20 = v5;
    while (1)
    {
      uint64_t v7 = *a4 + v5;
      sub_228955928(v7 + 40, (uint64_t)&v24);
      sub_228955928(v7, (uint64_t)v21);
      uint64_t v8 = v25;
      uint64_t v9 = v26;
      sub_22895598C(&v24, v25);
      AssetInfo.sequenceNumber.getter(v8, v9);
      if ((v10 & 0x100000000) != 0) {
        sub_2289DF0F0();
      }
      uint64_t v12 = v22;
      uint64_t v11 = v23;
      sub_22895598C(v21, v22);
      AssetInfo.sequenceNumber.getter(v12, v11);
      if ((v13 & 0x100000000) != 0) {
        sub_2289DF0F0();
      }
      char v14 = sub_2289DF110();
      sub_2289559D0((uint64_t)v21);
      uint64_t result = sub_2289559D0((uint64_t)&v24);
      if ((v14 & 1) == 0)
      {
LABEL_4:
        uint64_t v5 = v20 + 40;
        if (++v27 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v15 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v16 = v15 + v5;
      sub_2289605CC((long long *)(v15 + v5 + 40), (uint64_t)&v24);
      long long v17 = *(_OWORD *)(v16 + 16);
      *(_OWORD *)(v16 + 40) = *(_OWORD *)v16;
      *(_OWORD *)(v16 + 56) = v17;
      *(void *)(v16 + 72) = *(void *)(v16 + 32);
      uint64_t result = sub_2289605CC(&v24, v16);
      v5 -= 40;
      if (v27 == ++v6) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_22895CED8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v54 = a1;
  uint64_t v7 = sub_228952BB0(&qword_26AECF7E0);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v61 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v60 = (uint64_t)&v52 - v10;
  uint64_t v11 = sub_2289DE910();
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t result = MEMORY[0x270FA5388](v12);
  uint64_t v69 = (char *)&v52 - v16;
  uint64_t v53 = a2;
  if (a3 != a2)
  {
    uint64_t v62 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    uint64_t v57 = (void (**)(uint64_t, uint64_t))(v14 + 8);
    uint64_t v58 = (void (**)(char *, uint64_t, uint64_t))(v14 + 32);
    uint64_t v17 = 40 * a3 - 40;
    uint64_t v59 = v15;
    uint64_t v56 = a4;
LABEL_5:
    uint64_t v18 = v54;
    uint64_t v55 = v17;
    while (1)
    {
      uint64_t v19 = *a4 + v17;
      sub_228955928(v19 + 40, (uint64_t)&v66);
      sub_228955928(v19, (uint64_t)v63);
      uint64_t v20 = v67;
      uint64_t v21 = v68;
      sub_22895598C(&v66, v67);
      AssetInfo.seriesSortKey.getter(v20, v21);
      if ((v22 & 1) != 0
        && (uint64_t v23 = v64, v24 = v65, sub_22895598C(v63, v64), AssetInfo.seriesSortKey.getter(v23, v24), (v25 & 1) != 0))
      {
        uint64_t v38 = v67;
        uint64_t v39 = v68;
        sub_22895598C(&v66, v67);
        uint64_t v40 = v60;
        AssetInfo.releaseDate.getter(v38, v39, v60);
        uint64_t v41 = v40;
        uint64_t v42 = *v62;
        if ((*v62)(v41, 1, v11) == 1)
        {
          sub_2289DE8B0();
          sub_2289605E4(v41);
        }
        else
        {
          (*v58)(v69, v41, v11);
        }
        uint64_t v43 = v64;
        uint64_t v44 = v65;
        sub_22895598C(v63, v64);
        uint64_t v45 = v61;
        AssetInfo.releaseDate.getter(v43, v44, v61);
        if (v42(v45, 1, v11) == 1)
        {
          uint64_t v46 = (uint64_t)v59;
          sub_2289DE8B0();
          sub_2289605E4(v45);
        }
        else
        {
          uint64_t v46 = (uint64_t)v59;
          (*v58)(v59, v45, v11);
        }
        uint64_t v47 = v69;
        char v37 = sub_2289DE8E0();
        uint64_t v48 = *v57;
        (*v57)(v46, v11);
        v48((uint64_t)v47, v11);
        a4 = v56;
      }
      else
      {
        uint64_t v26 = v67;
        uint64_t v27 = v68;
        sub_22895598C(&v66, v67);
        uint64_t v28 = AssetInfo.seriesSortKey.getter(v26, v27);
        char v30 = v29;
        uint64_t v31 = v64;
        uint64_t v32 = v65;
        sub_22895598C(v63, v64);
        uint64_t v33 = AssetInfo.seriesSortKey.getter(v31, v32);
        uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v34 & 1) == 0) {
          uint64_t v35 = v33;
        }
        char v37 = (v30 & 1) == 0 && v28 < v35;
      }
      sub_2289559D0((uint64_t)v63);
      uint64_t result = sub_2289559D0((uint64_t)&v66);
      if ((v37 & 1) == 0)
      {
LABEL_4:
        ++a3;
        uint64_t v17 = v55 + 40;
        if (a3 == v53) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v49 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v50 = v49 + v17;
      sub_2289605CC((long long *)(v49 + v17 + 40), (uint64_t)&v66);
      long long v51 = *(_OWORD *)(v50 + 16);
      *(_OWORD *)(v50 + 40) = *(_OWORD *)v50;
      *(_OWORD *)(v50 + 56) = v51;
      *(void *)(v50 + 72) = *(void *)(v50 + 32);
      uint64_t result = sub_2289605CC(&v66, v50);
      v17 -= 40;
      if (a3 == ++v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_22895D344(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 40;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 40;
  uint64_t v48 = __src;
  uint64_t v47 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -39)
    {
      if (__dst != a2 || &a2[40 * v11] <= __dst) {
        memmove(__dst, a2, 40 * v11);
      }
      char v25 = &v4[40 * v11];
      uint64_t v46 = v25;
      uint64_t v48 = v6;
      if (__src < v6 && v10 >= 40)
      {
        unint64_t v26 = a3 - 40;
        while (1)
        {
          char v29 = (char *)(v26 + 40);
          sub_228955928((uint64_t)(v25 - 40), (uint64_t)v43);
          char v30 = v6 - 40;
          sub_228955928((uint64_t)(v6 - 40), (uint64_t)v40);
          uint64_t v31 = v44;
          uint64_t v32 = v45;
          sub_22895598C(v43, v44);
          AssetInfo.title.getter(v31, v32);
          uint64_t v33 = v41;
          uint64_t v34 = v42;
          sub_22895598C(v40, v41);
          AssetInfo.title.getter(v33, v34);
          sub_2289550F0();
          uint64_t v35 = sub_2289DF180();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_2289559D0((uint64_t)v40);
          sub_2289559D0((uint64_t)v43);
          if (v35 == -1)
          {
            if (v29 != v6 || v26 >= (unint64_t)v6)
            {
              long long v27 = *(_OWORD *)v30;
              long long v28 = *(_OWORD *)(v6 - 24);
              *(void *)(v26 + 32) = *((void *)v6 - 1);
              *(_OWORD *)unint64_t v26 = v27;
              *(_OWORD *)(v26 + 16) = v28;
            }
            v48 -= 40;
            char v25 = v46;
            if (v46 <= v4) {
              goto LABEL_41;
            }
          }
          else
          {
            uint64_t v36 = v46;
            char v25 = v46 - 40;
            v46 -= 40;
            if (v29 < v36 || v26 >= (unint64_t)v36 || v29 != v36)
            {
              long long v37 = *(_OWORD *)v25;
              long long v38 = *(_OWORD *)(v36 - 24);
              *(void *)(v26 + 32) = *((void *)v36 - 1);
              *(_OWORD *)unint64_t v26 = v37;
              *(_OWORD *)(v26 + 16) = v38;
            }
            char v30 = v6;
            if (v25 <= v4) {
              goto LABEL_41;
            }
          }
          v26 -= 40;
          uint64_t v6 = v30;
          if (v30 <= __src) {
            goto LABEL_41;
          }
        }
      }
      goto LABEL_41;
    }
  }
  else if (v8 >= -39)
  {
    if (__dst != __src || &__src[40 * v9] <= __dst) {
      memmove(__dst, __src, 40 * v9);
    }
    unint64_t v12 = (unint64_t)&v4[40 * v9];
    uint64_t v46 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      do
      {
        sub_228955928((uint64_t)v6, (uint64_t)v43);
        sub_228955928((uint64_t)v4, (uint64_t)v40);
        uint64_t v13 = v44;
        uint64_t v14 = v45;
        sub_22895598C(v43, v44);
        AssetInfo.title.getter(v13, v14);
        uint64_t v15 = v41;
        uint64_t v16 = v42;
        sub_22895598C(v40, v41);
        AssetInfo.title.getter(v15, v16);
        sub_2289550F0();
        uint64_t v17 = sub_2289DF180();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2289559D0((uint64_t)v40);
        sub_2289559D0((uint64_t)v43);
        uint64_t v18 = v48;
        if (v17 == -1)
        {
          unint64_t v22 = (unint64_t)(v6 + 40);
          if (v48 >= v6 && (unint64_t)v48 < v22 && v48 == v6)
          {
            uint64_t v18 = v6;
          }
          else
          {
            long long v23 = *(_OWORD *)v6;
            long long v24 = *((_OWORD *)v6 + 1);
            *((void *)v48 + 4) = *((void *)v6 + 4);
            *uint64_t v18 = v23;
            v18[1] = v24;
          }
        }
        else
        {
          uint64_t v19 = v47 + 40;
          if (v48 != v47 || v48 >= v19)
          {
            long long v20 = *(_OWORD *)v47;
            long long v21 = *((_OWORD *)v47 + 1);
            *((void *)v48 + 4) = *((void *)v47 + 4);
            *uint64_t v18 = v20;
            v18[1] = v21;
          }
          uint64_t v47 = v19;
          unint64_t v22 = (unint64_t)v6;
        }
        uint64_t v48 = (char *)v18 + 40;
        uint64_t v4 = v47;
        if ((unint64_t)v47 >= v12) {
          break;
        }
        uint64_t v6 = (char *)v22;
      }
      while (v22 < a3);
    }
LABEL_41:
    sub_2289BA320((void **)&v48, (const void **)&v47, &v46);
    return 1;
  }
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22895D78C(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v8 = sub_228952BB0(&qword_26AECF7E0);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v113 = (void (**)(char *, uint64_t, uint64_t))((char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v112 = (uint64_t *)((char *)&v108 - v12);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v114 = (char *)&v108 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v109 = (char *)&v108 - v15;
  uint64_t v16 = sub_2289DE910();
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v111 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  long long v116 = (char *)&v108 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v110 = (char *)&v108 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v115 = (char *)&v108 - v24;
  uint64_t v25 = a2 - a1;
  uint64_t v26 = (a2 - a1) / 40;
  unint64_t v27 = a3;
  uint64_t v28 = a3 - (void)a2;
  uint64_t v29 = v28 / 40;
  char v125 = a1;
  uint64_t v124 = a4;
  if (v26 >= v28 / 40)
  {
    if (v28 >= -39)
    {
      if (a4 != a2 || &a2[40 * v29] <= a4)
      {
        uint64_t v69 = v23;
        memmove(a4, a2, 40 * v29);
        long long v23 = v69;
      }
      unsigned int v70 = &a4[40 * v29];
      uint64_t v123 = v70;
      char v125 = a2;
      if (v28 >= 40 && a1 < a2)
      {
        uint64_t v114 = a1;
        uint64_t v115 = v23 + 48;
        uint64_t v109 = v23 + 8;
        uint64_t v110 = v23 + 32;
        unint64_t v71 = v27 - 40;
        while (1)
        {
          sub_228955928((uint64_t)(v70 - 40), (uint64_t)v120);
          uint64_t v74 = a2 - 40;
          sub_228955928((uint64_t)(a2 - 40), (uint64_t)v117);
          uint64_t v75 = v121;
          uint64_t v76 = v122;
          sub_22895598C(v120, v121);
          AssetInfo.seriesSortKey.getter(v75, v76);
          if ((v77 & 1) != 0
            && (uint64_t v78 = v118,
                uint64_t v79 = v119,
                sub_22895598C(v117, v118),
                AssetInfo.seriesSortKey.getter(v78, v79),
                (v80 & 1) != 0))
          {
            uint64_t v92 = v121;
            uint64_t v93 = v122;
            sub_22895598C(v120, v121);
            BOOL v94 = v112;
            AssetInfo.releaseDate.getter(v92, v93, (uint64_t)v112);
            int v95 = *(unsigned int (**)(void, uint64_t, uint64_t))v115;
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))v115)(v94, 1, v16) == 1)
            {
              sub_2289DE8B0();
              sub_2289605E4((uint64_t)v94);
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))v110)(v116, v94, v16);
            }
            uint64_t v96 = v118;
            uint64_t v97 = v119;
            sub_22895598C(v117, v118);
            uint64_t v98 = v113;
            AssetInfo.releaseDate.getter(v96, v97, (uint64_t)v113);
            if (v95(v98, 1, v16) == 1)
            {
              uint64_t v99 = v111;
              sub_2289DE8B0();
              sub_2289605E4((uint64_t)v98);
            }
            else
            {
              uint64_t v99 = v111;
              (*(void (**)(char *, void, uint64_t))v110)(v111, v98, v16);
            }
            uint64_t v100 = v116;
            char v91 = sub_2289DE8E0();
            uint64_t v101 = v99;
            uint64_t v102 = *(void (**)(char *, uint64_t))v109;
            (*(void (**)(char *, uint64_t))v109)(v101, v16);
            v102(v100, v16);
            a1 = v114;
          }
          else
          {
            uint64_t v81 = v121;
            uint64_t v82 = v122;
            sub_22895598C(v120, v121);
            uint64_t v83 = AssetInfo.seriesSortKey.getter(v81, v82);
            if (v84) {
              uint64_t v85 = 0;
            }
            else {
              uint64_t v85 = v83;
            }
            uint64_t v86 = v118;
            uint64_t v87 = v119;
            sub_22895598C(v117, v118);
            uint64_t v88 = AssetInfo.seriesSortKey.getter(v86, v87);
            if (v89) {
              uint64_t v90 = 0;
            }
            else {
              uint64_t v90 = v88;
            }
            char v91 = v85 < v90;
          }
          uint64_t v103 = (char *)(v71 + 40);
          sub_2289559D0((uint64_t)v117);
          sub_2289559D0((uint64_t)v120);
          if (v91)
          {
            if (v103 != a2 || v71 >= (unint64_t)a2)
            {
              long long v72 = *(_OWORD *)v74;
              long long v73 = *(_OWORD *)(a2 - 24);
              *(void *)(v71 + 32) = *((void *)a2 - 1);
              *(_OWORD *)unint64_t v71 = v72;
              *(_OWORD *)(v71 + 16) = v73;
            }
            v125 -= 40;
            unsigned int v70 = v123;
            if (v123 <= a4) {
              goto LABEL_73;
            }
          }
          else
          {
            uint64_t v104 = v123;
            unsigned int v70 = v123 - 40;
            v123 -= 40;
            if (v103 < v104 || v71 >= (unint64_t)v104 || v103 != v104)
            {
              long long v105 = *(_OWORD *)v70;
              long long v106 = *(_OWORD *)(v104 - 24);
              *(void *)(v71 + 32) = *((void *)v104 - 1);
              *(_OWORD *)unint64_t v71 = v105;
              *(_OWORD *)(v71 + 16) = v106;
            }
            uint64_t v74 = a2;
            if (v70 <= a4) {
              goto LABEL_73;
            }
          }
          v71 -= 40;
          a2 = v74;
          if (v74 <= a1) {
            goto LABEL_73;
          }
        }
      }
      goto LABEL_73;
    }
  }
  else if (v25 >= -39)
  {
    uint64_t v30 = (uint64_t)v114;
    if (a4 != a1 || &a1[40 * v26] <= a4)
    {
      uint64_t v31 = v23;
      memmove(a4, a1, 40 * v26);
      long long v23 = v31;
    }
    unint64_t v32 = (unint64_t)&a4[40 * v26];
    uint64_t v123 = (char *)v32;
    unint64_t v33 = v27;
    uint64_t v34 = (uint64_t)v109;
    if (v25 >= 40 && (unint64_t)a2 < v33)
    {
      long long v116 = v23 + 48;
      uint64_t v112 = v23 + 8;
      uint64_t v113 = (void (**)(char *, uint64_t, uint64_t))(v23 + 32);
      do
      {
        sub_228955928((uint64_t)a2, (uint64_t)v120);
        sub_228955928((uint64_t)a4, (uint64_t)v117);
        uint64_t v35 = v121;
        uint64_t v36 = v122;
        sub_22895598C(v120, v121);
        AssetInfo.seriesSortKey.getter(v35, v36);
        if ((v37 & 1) != 0
          && (uint64_t v38 = v118, v39 = v119,
                          sub_22895598C(v117, v118),
                          AssetInfo.seriesSortKey.getter(v38, v39),
                          (v40 & 1) != 0))
        {
          uint64_t v52 = v121;
          uint64_t v53 = v122;
          sub_22895598C(v120, v121);
          AssetInfo.releaseDate.getter(v52, v53, v34);
          uint64_t v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))v116;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v116)(v34, 1, v16) == 1)
          {
            sub_2289DE8B0();
            sub_2289605E4(v34);
          }
          else
          {
            (*v113)(v115, v34, v16);
          }
          uint64_t v55 = v118;
          uint64_t v56 = v119;
          sub_22895598C(v117, v118);
          AssetInfo.releaseDate.getter(v55, v56, v30);
          if (v54(v30, 1, v16) == 1)
          {
            uint64_t v57 = v110;
            sub_2289DE8B0();
            sub_2289605E4(v30);
          }
          else
          {
            uint64_t v57 = v110;
            (*v113)(v110, v30, v16);
          }
          uint64_t v58 = v115;
          char v59 = sub_2289DE8E0();
          uint64_t v60 = v57;
          BOOL v51 = v59;
          uint64_t v61 = (void (*)(char *, uint64_t))*v112;
          ((void (*)(char *, uint64_t))*v112)(v60, v16);
          v61(v58, v16);
          uint64_t v30 = (uint64_t)v114;
        }
        else
        {
          uint64_t v41 = v121;
          uint64_t v42 = v122;
          sub_22895598C(v120, v121);
          uint64_t v43 = AssetInfo.seriesSortKey.getter(v41, v42);
          if (v44) {
            uint64_t v45 = 0;
          }
          else {
            uint64_t v45 = v43;
          }
          uint64_t v46 = v118;
          uint64_t v47 = v119;
          sub_22895598C(v117, v118);
          uint64_t v48 = AssetInfo.seriesSortKey.getter(v46, v47);
          if (v49) {
            uint64_t v50 = 0;
          }
          else {
            uint64_t v50 = v48;
          }
          BOOL v51 = v45 < v50;
        }
        sub_2289559D0((uint64_t)v117);
        sub_2289559D0((uint64_t)v120);
        uint64_t v62 = v125;
        if (v51)
        {
          unint64_t v63 = (unint64_t)(a2 + 40);
          if (v125 >= a2 && (unint64_t)v125 < v63 && v125 == a2)
          {
            uint64_t v62 = a2;
          }
          else
          {
            long long v64 = *(_OWORD *)a2;
            long long v65 = *((_OWORD *)a2 + 1);
            *((void *)v125 + 4) = *((void *)a2 + 4);
            *uint64_t v62 = v64;
            v62[1] = v65;
          }
        }
        else
        {
          long long v66 = v124 + 40;
          if (v125 != v124 || v125 >= v66)
          {
            long long v67 = *(_OWORD *)v124;
            long long v68 = *((_OWORD *)v124 + 1);
            *((void *)v125 + 4) = *((void *)v124 + 4);
            *uint64_t v62 = v67;
            v62[1] = v68;
          }
          uint64_t v124 = v66;
          unint64_t v63 = (unint64_t)a2;
        }
        char v125 = (char *)v62 + 40;
        a4 = v124;
        if ((unint64_t)v124 >= v32) {
          break;
        }
        a2 = (char *)v63;
      }
      while (v63 < v33);
    }
LABEL_73:
    sub_2289BA320((void **)&v125, (const void **)&v124, &v123);
    return 1;
  }
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22895E0B4(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v8 = sub_228952BB0(&qword_26AECF7E0);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v110 = (void (**)(char *, uint64_t, uint64_t))((char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v109 = (uint64_t *)((char *)&v102 - v12);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  long long v106 = (char *)&v102 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v112 = (uint64_t *)((char *)&v102 - v15);
  uint64_t v114 = sub_2289DE910();
  uint64_t v16 = *(void *)(v114 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v114);
  uint64_t v108 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v113 = (char *)&v102 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  long long v23 = (char *)&v102 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v102 - v24;
  uint64_t v26 = a1;
  uint64_t v27 = a2 - a1;
  uint64_t v28 = (a2 - a1) / 40;
  uint64_t v29 = a3 - (void)a2;
  uint64_t v30 = (uint64_t)(a3 - (void)a2) / 40;
  uint64_t v31 = v26;
  uint64_t v123 = v26;
  uint64_t v122 = a4;
  if (v28 >= v30)
  {
    if (v29 >= -39)
    {
      if (a4 != a2 || &a2[40 * v30] <= a4)
      {
        long long v64 = v26;
        memmove(a4, a2, 40 * v30);
        uint64_t v31 = v64;
      }
      long long v65 = &a4[40 * v30];
      uint64_t v121 = v65;
      uint64_t v123 = a2;
      if (v29 >= 40 && v31 < a2)
      {
        uint64_t v112 = (void *)(v16 + 48);
        long long v106 = (char *)(v16 + 32);
        long long v105 = (void (**)(char *, uint64_t))(v16 + 8);
        unint64_t v66 = a3 - 40;
        uint64_t v107 = v31;
        uint64_t v103 = a4;
        do
        {
          sub_228955928((uint64_t)(v65 - 40), (uint64_t)v118);
          unint64_t v111 = (unint64_t)(a2 - 40);
          sub_228955928((uint64_t)(a2 - 40), (uint64_t)v115);
          uint64_t v67 = v119;
          uint64_t v68 = v120;
          sub_22895598C(v118, v119);
          uint64_t v69 = v109;
          AssetInfo.releaseDate.getter(v67, v68, (uint64_t)v109);
          unsigned int v70 = (unsigned int (*)(void *, uint64_t, uint64_t))*v112;
          if (((unsigned int (*)(void *, uint64_t, uint64_t))*v112)(v69, 1, v114) == 1)
          {
            sub_2289DE8B0();
            sub_2289605E4((uint64_t)v69);
          }
          else
          {
            (*(void (**)(char *, void *, uint64_t))v106)(v113, v69, v114);
          }
          uint64_t v71 = (uint64_t)v110;
          uint64_t v72 = v116;
          uint64_t v73 = v117;
          sub_22895598C(v115, v116);
          AssetInfo.releaseDate.getter(v72, v73, v71);
          if (v70((void *)v71, 1, v114) == 1)
          {
            uint64_t v74 = v108;
            sub_2289DE8B0();
            sub_2289605E4(v71);
          }
          else
          {
            uint64_t v74 = v108;
            (*(void (**)(char *, uint64_t, uint64_t))v106)(v108, v71, v114);
          }
          uint64_t v75 = v113;
          if (sub_2289DE8F0())
          {
            uint64_t v76 = v119;
            uint64_t v77 = v120;
            sub_22895598C(v118, v119);
            uint64_t v78 = AssetInfo.seriesSortKey.getter(v76, v77);
            uint64_t v80 = v114;
            if (v79) {
              uint64_t v81 = 0;
            }
            else {
              uint64_t v81 = v78;
            }
            uint64_t v104 = v81;
            uint64_t v82 = v116;
            uint64_t v83 = v117;
            sub_22895598C(v115, v116);
            uint64_t v84 = AssetInfo.seriesSortKey.getter(v82, v83);
            LOBYTE(v83) = v85;
            uint64_t v86 = a2;
            uint64_t v87 = v75;
            uint64_t v88 = *v105;
            (*v105)(v74, v80);
            char v89 = v87;
            a2 = v86;
            v88(v89, v80);
            if (v83) {
              uint64_t v90 = 0;
            }
            else {
              uint64_t v90 = v84;
            }
            a4 = v103;
            char v91 = v90 < v104;
          }
          else
          {
            char v91 = sub_2289DE8D0();
            uint64_t v92 = *v105;
            uint64_t v93 = v114;
            (*v105)(v74, v114);
            v92(v75, v93);
          }
          BOOL v94 = (char *)(v66 + 40);
          sub_2289559D0((uint64_t)v115);
          sub_2289559D0((uint64_t)v118);
          if (v91)
          {
            int v95 = (char *)v111;
            if (v94 != a2 || v66 >= (unint64_t)a2)
            {
              long long v96 = *(_OWORD *)v111;
              long long v97 = *(_OWORD *)(v111 + 16);
              *(void *)(v66 + 32) = *(void *)(v111 + 32);
              *(_OWORD *)unint64_t v66 = v96;
              *(_OWORD *)(v66 + 16) = v97;
            }
            v123 -= 40;
            long long v65 = v121;
          }
          else
          {
            uint64_t v98 = v121;
            long long v65 = v121 - 40;
            v121 -= 40;
            if (v94 < v98 || v66 >= (unint64_t)v98 || v94 != v98)
            {
              long long v99 = *(_OWORD *)v65;
              long long v100 = *(_OWORD *)(v98 - 24);
              *(void *)(v66 + 32) = *((void *)v98 - 1);
              *(_OWORD *)unint64_t v66 = v99;
              *(_OWORD *)(v66 + 16) = v100;
            }
            int v95 = a2;
          }
          if (v65 <= a4) {
            break;
          }
          v66 -= 40;
          a2 = v95;
        }
        while (v95 > v107);
      }
      goto LABEL_71;
    }
  }
  else if (v27 >= -39)
  {
    uint64_t v32 = (uint64_t)v106;
    if (a4 != v26 || &v26[40 * v28] <= a4)
    {
      uint64_t v33 = v27;
      memmove(a4, v26, 40 * v28);
      uint64_t v27 = v33;
    }
    unint64_t v111 = (unint64_t)&a4[40 * v28];
    uint64_t v121 = (char *)v111;
    if (v27 >= 40 && (unint64_t)a2 < a3)
    {
      uint64_t v113 = (char *)(v16 + 48);
      uint64_t v109 = (void *)(v16 + 8);
      uint64_t v110 = (void (**)(char *, uint64_t, uint64_t))(v16 + 32);
      do
      {
        sub_228955928((uint64_t)a2, (uint64_t)v118);
        sub_228955928((uint64_t)a4, (uint64_t)v115);
        uint64_t v34 = v119;
        uint64_t v35 = v120;
        sub_22895598C(v118, v119);
        uint64_t v36 = v112;
        AssetInfo.releaseDate.getter(v34, v35, (uint64_t)v112);
        uint64_t v37 = (uint64_t)v36;
        uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))v113;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v113)(v37, 1, v114) == 1)
        {
          sub_2289DE8B0();
          sub_2289605E4(v37);
        }
        else
        {
          (*v110)(v25, v37, v114);
        }
        uint64_t v39 = v116;
        uint64_t v40 = v117;
        sub_22895598C(v115, v116);
        AssetInfo.releaseDate.getter(v39, v40, v32);
        if (v38(v32, 1, v114) == 1)
        {
          sub_2289DE8B0();
          sub_2289605E4(v32);
        }
        else
        {
          (*v110)(v23, v32, v114);
        }
        if (sub_2289DE8F0())
        {
          uint64_t v41 = v119;
          uint64_t v42 = v120;
          sub_22895598C(v118, v119);
          uint64_t v43 = AssetInfo.seriesSortKey.getter(v41, v42);
          if (v44) {
            uint64_t v45 = 0;
          }
          else {
            uint64_t v45 = (char *)v43;
          }
          uint64_t v108 = v45;
          uint64_t v46 = v116;
          uint64_t v47 = v117;
          sub_22895598C(v115, v116);
          uint64_t v48 = AssetInfo.seriesSortKey.getter(v46, v47);
          LOBYTE(v47) = v49;
          unint64_t v50 = a3;
          BOOL v51 = (void (*)(char *, uint64_t))*v109;
          uint64_t v52 = v114;
          ((void (*)(char *, uint64_t))*v109)(v23, v114);
          v51(v25, v52);
          a3 = v50;
          uint64_t v32 = (uint64_t)v106;
          if (v47) {
            uint64_t v53 = 0;
          }
          else {
            uint64_t v53 = v48;
          }
          char v54 = v53 < (uint64_t)v108;
        }
        else
        {
          char v54 = sub_2289DE8D0();
          uint64_t v55 = (void (*)(char *, uint64_t))*v109;
          uint64_t v56 = v114;
          ((void (*)(char *, uint64_t))*v109)(v23, v114);
          v55(v25, v56);
        }
        sub_2289559D0((uint64_t)v115);
        sub_2289559D0((uint64_t)v118);
        uint64_t v57 = v123;
        if (v54)
        {
          unint64_t v58 = (unint64_t)(a2 + 40);
          if (v123 >= a2 && (unint64_t)v123 < v58 && v123 == a2)
          {
            uint64_t v57 = a2;
          }
          else
          {
            long long v59 = *(_OWORD *)a2;
            long long v60 = *((_OWORD *)a2 + 1);
            *((void *)v123 + 4) = *((void *)a2 + 4);
            *uint64_t v57 = v59;
            v57[1] = v60;
          }
        }
        else
        {
          uint64_t v61 = v122 + 40;
          if (v123 != v122 || v123 >= v61)
          {
            long long v62 = *(_OWORD *)v122;
            long long v63 = *((_OWORD *)v122 + 1);
            *((void *)v123 + 4) = *((void *)v122 + 4);
            *uint64_t v57 = v62;
            v57[1] = v63;
          }
          uint64_t v122 = v61;
          unint64_t v58 = (unint64_t)a2;
        }
        uint64_t v123 = (char *)v57 + 40;
        a4 = v122;
        if ((unint64_t)v122 >= v111) {
          break;
        }
        a2 = (char *)v58;
      }
      while (v58 < a3);
    }
LABEL_71:
    sub_2289BA320((void **)&v123, (const void **)&v122, &v121);
    return 1;
  }
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22895EA20(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 40;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 40;
  uint64_t v55 = __src;
  char v54 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -39)
    {
      if (__dst != a2 || &a2[40 * v11] <= __dst) {
        memmove(__dst, a2, 40 * v11);
      }
      uint64_t v27 = &v4[40 * v11];
      uint64_t v53 = v27;
      uint64_t v55 = v6;
      if (__src < v6 && v10 >= 40)
      {
        unint64_t v28 = a3 - 40;
        uint64_t v45 = __src;
        uint64_t v46 = v4;
        while (1)
        {
          sub_228955928((uint64_t)(v27 - 40), (uint64_t)v50);
          uint64_t v31 = v6 - 40;
          sub_228955928((uint64_t)(v6 - 40), (uint64_t)v47);
          uint64_t v32 = v51;
          uint64_t v33 = v52;
          sub_22895598C(v50, v51);
          AssetInfo.sequenceNumber.getter(v32, v33);
          if ((v34 & 0x100000000) != 0) {
            sub_2289DF0F0();
          }
          uint64_t v36 = v48;
          uint64_t v35 = v49;
          sub_22895598C(v47, v48);
          AssetInfo.sequenceNumber.getter(v36, v35);
          if ((v37 & 0x100000000) != 0) {
            sub_2289DF0F0();
          }
          uint64_t v38 = (char *)(v28 + 40);
          char v39 = sub_2289DF110();
          sub_2289559D0((uint64_t)v47);
          sub_2289559D0((uint64_t)v50);
          if (v39)
          {
            uint64_t v40 = v45;
            if (v38 != v6 || v28 >= (unint64_t)v6)
            {
              long long v29 = *(_OWORD *)v31;
              long long v30 = *(_OWORD *)(v6 - 24);
              *(void *)(v28 + 32) = *((void *)v6 - 1);
              *(_OWORD *)unint64_t v28 = v29;
              *(_OWORD *)(v28 + 16) = v30;
            }
            v55 -= 40;
            uint64_t v27 = v53;
            if (v53 <= v46) {
              goto LABEL_48;
            }
          }
          else
          {
            uint64_t v41 = v53;
            uint64_t v27 = v53 - 40;
            v53 -= 40;
            uint64_t v40 = v45;
            if (v38 < v41 || v28 >= (unint64_t)v41 || v38 != v41)
            {
              long long v42 = *(_OWORD *)v27;
              long long v43 = *(_OWORD *)(v41 - 24);
              *(void *)(v28 + 32) = *((void *)v41 - 1);
              *(_OWORD *)unint64_t v28 = v42;
              *(_OWORD *)(v28 + 16) = v43;
            }
            uint64_t v31 = v6;
            if (v27 <= v46) {
              goto LABEL_48;
            }
          }
          v28 -= 40;
          uint64_t v6 = v31;
          if (v31 <= v40) {
            goto LABEL_48;
          }
        }
      }
      goto LABEL_48;
    }
  }
  else if (v8 >= -39)
  {
    if (__dst != __src || &__src[40 * v9] <= __dst) {
      memmove(__dst, __src, 40 * v9);
    }
    unint64_t v12 = (unint64_t)&v4[40 * v9];
    uint64_t v53 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      do
      {
        sub_228955928((uint64_t)v6, (uint64_t)v50);
        sub_228955928((uint64_t)v4, (uint64_t)v47);
        uint64_t v13 = v51;
        uint64_t v14 = v52;
        sub_22895598C(v50, v51);
        AssetInfo.sequenceNumber.getter(v13, v14);
        if ((v15 & 0x100000000) != 0) {
          sub_2289DF0F0();
        }
        uint64_t v16 = v48;
        uint64_t v17 = v49;
        sub_22895598C(v47, v48);
        AssetInfo.sequenceNumber.getter(v16, v17);
        if ((v18 & 0x100000000) != 0) {
          sub_2289DF0F0();
        }
        char v19 = sub_2289DF110();
        sub_2289559D0((uint64_t)v47);
        sub_2289559D0((uint64_t)v50);
        uint64_t v20 = v55;
        if (v19)
        {
          unint64_t v21 = (unint64_t)(v6 + 40);
          if (v55 >= v6 && (unint64_t)v55 < v21 && v55 == v6)
          {
            uint64_t v20 = v6;
          }
          else
          {
            long long v22 = *(_OWORD *)v6;
            long long v23 = *((_OWORD *)v6 + 1);
            *((void *)v55 + 4) = *((void *)v6 + 4);
            *uint64_t v20 = v22;
            v20[1] = v23;
          }
        }
        else
        {
          uint64_t v24 = v54 + 40;
          if (v55 != v54 || v55 >= v24)
          {
            long long v25 = *(_OWORD *)v54;
            long long v26 = *((_OWORD *)v54 + 1);
            *((void *)v55 + 4) = *((void *)v54 + 4);
            *uint64_t v20 = v25;
            v20[1] = v26;
          }
          char v54 = v24;
          unint64_t v21 = (unint64_t)v6;
        }
        uint64_t v55 = (char *)v20 + 40;
        uint64_t v4 = v54;
        if ((unint64_t)v54 >= v12) {
          break;
        }
        uint64_t v6 = (char *)v21;
      }
      while (v21 < a3);
    }
LABEL_48:
    sub_2289BA320((void **)&v55, (const void **)&v54, &v53);
    return 1;
  }
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22895EE9C(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v8 = sub_228952BB0(&qword_26AECF7E0);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v113 = (void (**)(char *, uint64_t, uint64_t))((char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v112 = (uint64_t *)((char *)&v108 - v12);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v114 = (char *)&v108 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v109 = (char *)&v108 - v15;
  uint64_t v16 = sub_2289DE910();
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  unint64_t v111 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v116 = (char *)&v108 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v110 = (char *)&v108 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v115 = (char *)&v108 - v24;
  uint64_t v25 = a2 - a1;
  uint64_t v26 = (a2 - a1) / 40;
  unint64_t v27 = a3;
  uint64_t v28 = a3 - (void)a2;
  uint64_t v29 = v28 / 40;
  char v125 = a1;
  uint64_t v124 = a4;
  if (v26 >= v28 / 40)
  {
    if (v28 >= -39)
    {
      if (a4 != a2 || &a2[40 * v29] <= a4)
      {
        uint64_t v69 = v23;
        memmove(a4, a2, 40 * v29);
        long long v23 = v69;
      }
      unsigned int v70 = &a4[40 * v29];
      uint64_t v123 = v70;
      char v125 = a2;
      if (v28 >= 40 && a1 < a2)
      {
        uint64_t v114 = a1;
        uint64_t v115 = v23 + 48;
        uint64_t v109 = v23 + 8;
        uint64_t v110 = v23 + 32;
        unint64_t v71 = v27 - 40;
        while (1)
        {
          sub_228955928((uint64_t)(v70 - 40), (uint64_t)v120);
          uint64_t v74 = a2 - 40;
          sub_228955928((uint64_t)(a2 - 40), (uint64_t)v117);
          uint64_t v75 = v121;
          uint64_t v76 = v122;
          sub_22895598C(v120, v121);
          AssetInfo.seriesSortKey.getter(v75, v76);
          if ((v77 & 1) != 0
            && (uint64_t v78 = v118,
                uint64_t v79 = v119,
                sub_22895598C(v117, v118),
                AssetInfo.seriesSortKey.getter(v78, v79),
                (v80 & 1) != 0))
          {
            uint64_t v92 = v121;
            uint64_t v93 = v122;
            sub_22895598C(v120, v121);
            BOOL v94 = v112;
            AssetInfo.releaseDate.getter(v92, v93, (uint64_t)v112);
            int v95 = *(unsigned int (**)(void, uint64_t, uint64_t))v115;
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))v115)(v94, 1, v16) == 1)
            {
              sub_2289DE8B0();
              sub_2289605E4((uint64_t)v94);
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))v110)(v116, v94, v16);
            }
            uint64_t v96 = v118;
            uint64_t v97 = v119;
            sub_22895598C(v117, v118);
            uint64_t v98 = v113;
            AssetInfo.releaseDate.getter(v96, v97, (uint64_t)v113);
            if (v95(v98, 1, v16) == 1)
            {
              long long v99 = v111;
              sub_2289DE8B0();
              sub_2289605E4((uint64_t)v98);
            }
            else
            {
              long long v99 = v111;
              (*(void (**)(char *, void, uint64_t))v110)(v111, v98, v16);
            }
            long long v100 = v116;
            char v91 = sub_2289DE8D0();
            uint64_t v101 = v99;
            uint64_t v102 = *(void (**)(char *, uint64_t))v109;
            (*(void (**)(char *, uint64_t))v109)(v101, v16);
            v102(v100, v16);
            a1 = v114;
          }
          else
          {
            uint64_t v81 = v121;
            uint64_t v82 = v122;
            sub_22895598C(v120, v121);
            uint64_t v83 = AssetInfo.seriesSortKey.getter(v81, v82);
            if (v84) {
              uint64_t v85 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v85 = v83;
            }
            uint64_t v86 = v118;
            uint64_t v87 = v119;
            sub_22895598C(v117, v118);
            uint64_t v88 = AssetInfo.seriesSortKey.getter(v86, v87);
            char v91 = (v89 & 1) == 0 && v88 < v85;
          }
          uint64_t v103 = (char *)(v71 + 40);
          sub_2289559D0((uint64_t)v117);
          sub_2289559D0((uint64_t)v120);
          if (v91)
          {
            if (v103 != a2 || v71 >= (unint64_t)a2)
            {
              long long v72 = *(_OWORD *)v74;
              long long v73 = *(_OWORD *)(a2 - 24);
              *(void *)(v71 + 32) = *((void *)a2 - 1);
              *(_OWORD *)unint64_t v71 = v72;
              *(_OWORD *)(v71 + 16) = v73;
            }
            v125 -= 40;
            unsigned int v70 = v123;
            if (v123 <= a4) {
              goto LABEL_77;
            }
          }
          else
          {
            uint64_t v104 = v123;
            unsigned int v70 = v123 - 40;
            v123 -= 40;
            if (v103 < v104 || v71 >= (unint64_t)v104 || v103 != v104)
            {
              long long v105 = *(_OWORD *)v70;
              long long v106 = *(_OWORD *)(v104 - 24);
              *(void *)(v71 + 32) = *((void *)v104 - 1);
              *(_OWORD *)unint64_t v71 = v105;
              *(_OWORD *)(v71 + 16) = v106;
            }
            uint64_t v74 = a2;
            if (v70 <= a4) {
              goto LABEL_77;
            }
          }
          v71 -= 40;
          a2 = v74;
          if (v74 <= a1) {
            goto LABEL_77;
          }
        }
      }
      goto LABEL_77;
    }
  }
  else if (v25 >= -39)
  {
    uint64_t v30 = (uint64_t)v114;
    if (a4 != a1 || &a1[40 * v26] <= a4)
    {
      uint64_t v31 = v23;
      memmove(a4, a1, 40 * v26);
      long long v23 = v31;
    }
    unint64_t v32 = (unint64_t)&a4[40 * v26];
    uint64_t v123 = (char *)v32;
    unint64_t v33 = v27;
    uint64_t v34 = (uint64_t)v109;
    if (v25 >= 40 && (unint64_t)a2 < v33)
    {
      uint64_t v116 = v23 + 48;
      uint64_t v112 = v23 + 8;
      uint64_t v113 = (void (**)(char *, uint64_t, uint64_t))(v23 + 32);
      do
      {
        sub_228955928((uint64_t)a2, (uint64_t)v120);
        sub_228955928((uint64_t)a4, (uint64_t)v117);
        uint64_t v35 = v121;
        uint64_t v36 = v122;
        sub_22895598C(v120, v121);
        AssetInfo.seriesSortKey.getter(v35, v36);
        if ((v37 & 1) != 0
          && (uint64_t v38 = v118, v39 = v119,
                          sub_22895598C(v117, v118),
                          AssetInfo.seriesSortKey.getter(v38, v39),
                          (v40 & 1) != 0))
        {
          uint64_t v52 = v121;
          uint64_t v53 = v122;
          sub_22895598C(v120, v121);
          AssetInfo.releaseDate.getter(v52, v53, v34);
          char v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))v116;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v116)(v34, 1, v16) == 1)
          {
            sub_2289DE8B0();
            sub_2289605E4(v34);
          }
          else
          {
            (*v113)(v115, v34, v16);
          }
          uint64_t v55 = v118;
          uint64_t v56 = v119;
          sub_22895598C(v117, v118);
          AssetInfo.releaseDate.getter(v55, v56, v30);
          if (v54(v30, 1, v16) == 1)
          {
            uint64_t v57 = v110;
            sub_2289DE8B0();
            sub_2289605E4(v30);
          }
          else
          {
            uint64_t v57 = v110;
            (*v113)(v110, v30, v16);
          }
          unint64_t v58 = v115;
          char v59 = sub_2289DE8D0();
          long long v60 = v57;
          BOOL v51 = v59;
          uint64_t v61 = (void (*)(char *, uint64_t))*v112;
          ((void (*)(char *, uint64_t))*v112)(v60, v16);
          v61(v58, v16);
          uint64_t v30 = (uint64_t)v114;
        }
        else
        {
          uint64_t v41 = v121;
          uint64_t v42 = v122;
          sub_22895598C(v120, v121);
          uint64_t v43 = AssetInfo.seriesSortKey.getter(v41, v42);
          if (v44) {
            uint64_t v45 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v45 = v43;
          }
          uint64_t v46 = v118;
          uint64_t v47 = v119;
          sub_22895598C(v117, v118);
          uint64_t v48 = AssetInfo.seriesSortKey.getter(v46, v47);
          BOOL v51 = (v49 & 1) == 0 && v48 < v45;
        }
        sub_2289559D0((uint64_t)v117);
        sub_2289559D0((uint64_t)v120);
        long long v62 = v125;
        if (v51)
        {
          unint64_t v63 = (unint64_t)(a2 + 40);
          if (v125 >= a2 && (unint64_t)v125 < v63 && v125 == a2)
          {
            long long v62 = a2;
          }
          else
          {
            long long v64 = *(_OWORD *)a2;
            long long v65 = *((_OWORD *)a2 + 1);
            *((void *)v125 + 4) = *((void *)a2 + 4);
            *long long v62 = v64;
            v62[1] = v65;
          }
        }
        else
        {
          unint64_t v66 = v124 + 40;
          if (v125 != v124 || v125 >= v66)
          {
            long long v67 = *(_OWORD *)v124;
            long long v68 = *((_OWORD *)v124 + 1);
            *((void *)v125 + 4) = *((void *)v124 + 4);
            *long long v62 = v67;
            v62[1] = v68;
          }
          uint64_t v124 = v66;
          unint64_t v63 = (unint64_t)a2;
        }
        char v125 = (char *)v62 + 40;
        a4 = v124;
        if ((unint64_t)v124 >= v32) {
          break;
        }
        a2 = (char *)v63;
      }
      while (v63 < v33);
    }
LABEL_77:
    sub_2289BA320((void **)&v125, (const void **)&v124, &v123);
    return 1;
  }
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22895F7C4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 40;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 40;
  uint64_t v55 = __src;
  char v54 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -39)
    {
      if (__dst != a2 || &a2[40 * v11] <= __dst) {
        memmove(__dst, a2, 40 * v11);
      }
      unint64_t v27 = &v4[40 * v11];
      uint64_t v53 = v27;
      uint64_t v55 = v6;
      if (__src < v6 && v10 >= 40)
      {
        unint64_t v28 = a3 - 40;
        uint64_t v45 = __src;
        uint64_t v46 = v4;
        while (1)
        {
          sub_228955928((uint64_t)(v27 - 40), (uint64_t)v50);
          uint64_t v31 = v6 - 40;
          sub_228955928((uint64_t)(v6 - 40), (uint64_t)v47);
          uint64_t v32 = v51;
          uint64_t v33 = v52;
          sub_22895598C(v50, v51);
          AssetInfo.sequenceNumber.getter(v32, v33);
          if ((v34 & 0x100000000) != 0) {
            sub_2289DF0F0();
          }
          uint64_t v36 = v48;
          uint64_t v35 = v49;
          sub_22895598C(v47, v48);
          AssetInfo.sequenceNumber.getter(v36, v35);
          if ((v37 & 0x100000000) != 0) {
            sub_2289DF0F0();
          }
          uint64_t v38 = (char *)(v28 + 40);
          char v39 = sub_2289DF110();
          sub_2289559D0((uint64_t)v47);
          sub_2289559D0((uint64_t)v50);
          if (v39)
          {
            char v40 = v45;
            if (v38 != v6 || v28 >= (unint64_t)v6)
            {
              long long v29 = *(_OWORD *)v31;
              long long v30 = *(_OWORD *)(v6 - 24);
              *(void *)(v28 + 32) = *((void *)v6 - 1);
              *(_OWORD *)unint64_t v28 = v29;
              *(_OWORD *)(v28 + 16) = v30;
            }
            v55 -= 40;
            unint64_t v27 = v53;
            if (v53 <= v46) {
              goto LABEL_48;
            }
          }
          else
          {
            uint64_t v41 = v53;
            unint64_t v27 = v53 - 40;
            v53 -= 40;
            char v40 = v45;
            if (v38 < v41 || v28 >= (unint64_t)v41 || v38 != v41)
            {
              long long v42 = *(_OWORD *)v27;
              long long v43 = *(_OWORD *)(v41 - 24);
              *(void *)(v28 + 32) = *((void *)v41 - 1);
              *(_OWORD *)unint64_t v28 = v42;
              *(_OWORD *)(v28 + 16) = v43;
            }
            uint64_t v31 = v6;
            if (v27 <= v46) {
              goto LABEL_48;
            }
          }
          v28 -= 40;
          uint64_t v6 = v31;
          if (v31 <= v40) {
            goto LABEL_48;
          }
        }
      }
      goto LABEL_48;
    }
  }
  else if (v8 >= -39)
  {
    if (__dst != __src || &__src[40 * v9] <= __dst) {
      memmove(__dst, __src, 40 * v9);
    }
    unint64_t v12 = (unint64_t)&v4[40 * v9];
    uint64_t v53 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      do
      {
        sub_228955928((uint64_t)v6, (uint64_t)v50);
        sub_228955928((uint64_t)v4, (uint64_t)v47);
        uint64_t v13 = v51;
        uint64_t v14 = v52;
        sub_22895598C(v50, v51);
        AssetInfo.sequenceNumber.getter(v13, v14);
        if ((v15 & 0x100000000) != 0) {
          sub_2289DF0F0();
        }
        uint64_t v16 = v48;
        uint64_t v17 = v49;
        sub_22895598C(v47, v48);
        AssetInfo.sequenceNumber.getter(v16, v17);
        if ((v18 & 0x100000000) != 0) {
          sub_2289DF0F0();
        }
        char v19 = sub_2289DF110();
        sub_2289559D0((uint64_t)v47);
        sub_2289559D0((uint64_t)v50);
        uint64_t v20 = v55;
        if (v19)
        {
          unint64_t v21 = (unint64_t)(v6 + 40);
          if (v55 >= v6 && (unint64_t)v55 < v21 && v55 == v6)
          {
            uint64_t v20 = v6;
          }
          else
          {
            long long v22 = *(_OWORD *)v6;
            long long v23 = *((_OWORD *)v6 + 1);
            *((void *)v55 + 4) = *((void *)v6 + 4);
            *uint64_t v20 = v22;
            v20[1] = v23;
          }
        }
        else
        {
          uint64_t v24 = v54 + 40;
          if (v55 != v54 || v55 >= v24)
          {
            long long v25 = *(_OWORD *)v54;
            long long v26 = *((_OWORD *)v54 + 1);
            *((void *)v55 + 4) = *((void *)v54 + 4);
            *uint64_t v20 = v25;
            v20[1] = v26;
          }
          char v54 = v24;
          unint64_t v21 = (unint64_t)v6;
        }
        uint64_t v55 = (char *)v20 + 40;
        uint64_t v4 = v54;
        if ((unint64_t)v54 >= v12) {
          break;
        }
        uint64_t v6 = (char *)v21;
      }
      while (v21 < a3);
    }
LABEL_48:
    sub_2289BA320((void **)&v55, (const void **)&v54, &v53);
    return 1;
  }
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22895FC70(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v8 = sub_228952BB0(&qword_26AECF7E0);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v122 = (void *)((char *)v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v121 = (uint64_t)v117 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  v117[0] = (char *)v117 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v120 = (void (**)(char *, uint64_t, uint64_t))((char *)v117 - v15);
  uint64_t v125 = sub_2289DE910();
  uint64_t v16 = MEMORY[0x270FA5388](v125);
  uint64_t v119 = (char *)v117 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v124 = (char *)v117 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v118 = (char *)v117 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v123 = (char *)v117 - v23;
  uint64_t v24 = a2 - a1;
  uint64_t v25 = (a2 - a1) / 40;
  unint64_t v26 = a3;
  uint64_t v27 = a3 - (void)a2;
  uint64_t v28 = (uint64_t)(a3 - (void)a2) / 40;
  long long v29 = a1;
  uint64_t v135 = a1;
  char v134 = a4;
  if (v25 >= v28)
  {
    if (v27 >= -39)
    {
      uint64_t v71 = v125;
      if (a4 != a2 || &a2[40 * v28] <= a4)
      {
        long long v72 = v29;
        uint64_t v73 = v22;
        memmove(a4, a2, 40 * v28);
        uint64_t v22 = v73;
        long long v29 = v72;
      }
      uint64_t v74 = &a4[40 * v28];
      uint64_t v133 = v74;
      uint64_t v135 = a2;
      if (v27 >= 40 && v29 < a2)
      {
        uint64_t v123 = (char *)(v22 + 48);
        uint64_t v120 = (void (**)(char *, uint64_t, uint64_t))(v22 + 32);
        uint64_t v118 = (char *)(v22 + 8);
        unint64_t v75 = v26 - 40;
        uint64_t v126 = v29;
        do
        {
          sub_228955928((uint64_t)(v74 - 40), (uint64_t)v130);
          uint64_t v76 = a2 - 40;
          sub_228955928((uint64_t)(a2 - 40), (uint64_t)v127);
          uint64_t v77 = v131;
          uint64_t v78 = v132;
          sub_22895598C(v130, v131);
          AssetInfo.seriesSortKey.getter(v77, v78);
          if ((v79 & 1) != 0
            && (uint64_t v80 = v128,
                uint64_t v81 = v129,
                sub_22895598C(v127, v128),
                AssetInfo.seriesSortKey.getter(v80, v81),
                (v82 & 1) != 0))
          {
            uint64_t v96 = v131;
            uint64_t v97 = v132;
            sub_22895598C(v130, v131);
            uint64_t v98 = v96;
            uint64_t v99 = v121;
            AssetInfo.releaseDate.getter(v98, v97, v121);
            long long v100 = *(unsigned int (**)(void *, uint64_t, uint64_t))v123;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v123)(v99, 1, v71) == 1)
            {
              sub_2289DE8B0();
              sub_2289605E4(v99);
            }
            else
            {
              (*v120)(v124, v99, v71);
            }
            uint64_t v101 = v128;
            uint64_t v102 = v129;
            sub_22895598C(v127, v128);
            uint64_t v103 = v101;
            uint64_t v104 = v122;
            AssetInfo.releaseDate.getter(v103, v102, (uint64_t)v122);
            if (v100(v104, 1, v71) == 1)
            {
              long long v105 = v119;
              sub_2289DE8B0();
              sub_2289605E4((uint64_t)v104);
            }
            else
            {
              long long v105 = v119;
              (*v120)(v119, (uint64_t)v104, v71);
            }
            long long v106 = v124;
            char v107 = sub_2289DE8E0();
            uint64_t v108 = v105;
            char v95 = v107;
            uint64_t v109 = *(void (**)(char *, uint64_t))v118;
            (*(void (**)(char *, uint64_t))v118)(v108, v71);
            v109(v106, v71);
          }
          else
          {
            uint64_t v83 = v131;
            uint64_t v84 = v132;
            sub_22895598C(v130, v131);
            uint64_t v85 = AssetInfo.seriesSortKey.getter(v83, v84);
            char v87 = v86;
            uint64_t v89 = v128;
            uint64_t v88 = v129;
            sub_22895598C(v127, v128);
            uint64_t v90 = AssetInfo.seriesSortKey.getter(v89, v88);
            if (v91) {
              uint64_t v92 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v92 = v90;
            }
            BOOL v93 = (v87 & 1) == 0;
            uint64_t v71 = v125;
            char v95 = v93 && v85 < v92;
          }
          uint64_t v110 = (char *)(v75 + 40);
          sub_2289559D0((uint64_t)v127);
          sub_2289559D0((uint64_t)v130);
          if (v95)
          {
            if (v110 != a2 || v75 >= (unint64_t)a2)
            {
              long long v111 = *(_OWORD *)v76;
              long long v112 = *(_OWORD *)(a2 - 24);
              *(void *)(v75 + 32) = *((void *)a2 - 1);
              *(_OWORD *)unint64_t v75 = v111;
              *(_OWORD *)(v75 + 16) = v112;
            }
            v135 -= 40;
            uint64_t v74 = v133;
          }
          else
          {
            uint64_t v113 = v133;
            uint64_t v74 = v133 - 40;
            v133 -= 40;
            if (v110 < v113 || v75 >= (unint64_t)v113 || v110 != v113)
            {
              long long v114 = *(_OWORD *)v74;
              long long v115 = *(_OWORD *)(v113 - 24);
              *(void *)(v75 + 32) = *((void *)v113 - 1);
              *(_OWORD *)unint64_t v75 = v114;
              *(_OWORD *)(v75 + 16) = v115;
            }
            uint64_t v76 = a2;
          }
          if (v74 <= a4) {
            break;
          }
          v75 -= 40;
          a2 = v76;
        }
        while (v76 > v126);
      }
      goto LABEL_76;
    }
  }
  else if (v24 >= -39)
  {
    uint64_t v30 = v125;
    uint64_t v31 = v117[0];
    if (a4 != v29 || &v29[40 * v25] <= a4)
    {
      uint64_t v32 = v22;
      memmove(a4, v29, 40 * v25);
      uint64_t v22 = v32;
    }
    unint64_t v33 = (unint64_t)&a4[40 * v25];
    uint64_t v133 = (char *)v33;
    if (v24 >= 40 && (unint64_t)a2 < v26)
    {
      uint64_t v126 = (char *)(v22 + 48);
      uint64_t v124 = (char *)(v22 + 32);
      uint64_t v122 = (void *)(v22 + 8);
      do
      {
        sub_228955928((uint64_t)a2, (uint64_t)v130);
        sub_228955928((uint64_t)a4, (uint64_t)v127);
        uint64_t v34 = v131;
        uint64_t v35 = v132;
        sub_22895598C(v130, v131);
        AssetInfo.seriesSortKey.getter(v34, v35);
        if ((v36 & 1) != 0
          && (uint64_t v37 = v128, v38 = v129,
                          sub_22895598C(v127, v128),
                          AssetInfo.seriesSortKey.getter(v37, v38),
                          (v39 & 1) != 0))
        {
          uint64_t v52 = v131;
          uint64_t v53 = v132;
          sub_22895598C(v130, v131);
          uint64_t v54 = v52;
          uint64_t v55 = v120;
          AssetInfo.releaseDate.getter(v54, v53, (uint64_t)v120);
          uint64_t v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))v126;
          if ((*(unsigned int (**)(void, uint64_t, uint64_t))v126)(v55, 1, v30) == 1)
          {
            sub_2289DE8B0();
            sub_2289605E4((uint64_t)v55);
          }
          else
          {
            (*(void (**)(char *, void, uint64_t))v124)(v123, v55, v30);
          }
          uint64_t v57 = v128;
          uint64_t v58 = v129;
          sub_22895598C(v127, v128);
          AssetInfo.releaseDate.getter(v57, v58, v31);
          if (v56(v31, 1, v30) == 1)
          {
            char v59 = v118;
            sub_2289DE8B0();
            sub_2289605E4(v31);
          }
          else
          {
            char v59 = v118;
            (*(void (**)(char *, uint64_t, uint64_t))v124)(v118, v31, v30);
          }
          long long v60 = v123;
          char v61 = sub_2289DE8E0();
          long long v62 = v59;
          BOOL v51 = v61;
          unint64_t v63 = (void (*)(char *, uint64_t))*v122;
          ((void (*)(char *, uint64_t))*v122)(v62, v30);
          v63(v60, v30);
        }
        else
        {
          uint64_t v40 = v131;
          uint64_t v41 = v132;
          sub_22895598C(v130, v131);
          uint64_t v42 = AssetInfo.seriesSortKey.getter(v40, v41);
          char v44 = v43;
          uint64_t v45 = v128;
          uint64_t v46 = v129;
          sub_22895598C(v127, v128);
          uint64_t v47 = AssetInfo.seriesSortKey.getter(v45, v46);
          uint64_t v49 = 0x7FFFFFFFFFFFFFFFLL;
          if ((v48 & 1) == 0) {
            uint64_t v49 = v47;
          }
          BOOL v51 = (v44 & 1) == 0 && v42 < v49;
        }
        sub_2289559D0((uint64_t)v127);
        sub_2289559D0((uint64_t)v130);
        long long v64 = v135;
        if (v51)
        {
          unint64_t v65 = (unint64_t)(a2 + 40);
          if (v135 >= a2 && (unint64_t)v135 < v65 && v135 == a2)
          {
            long long v64 = a2;
          }
          else
          {
            long long v66 = *(_OWORD *)a2;
            long long v67 = *((_OWORD *)a2 + 1);
            *((void *)v135 + 4) = *((void *)a2 + 4);
            *long long v64 = v66;
            v64[1] = v67;
          }
        }
        else
        {
          long long v68 = v134 + 40;
          if (v135 != v134 || v135 >= v68)
          {
            long long v69 = *(_OWORD *)v134;
            long long v70 = *((_OWORD *)v134 + 1);
            *((void *)v135 + 4) = *((void *)v134 + 4);
            *long long v64 = v69;
            v64[1] = v70;
          }
          char v134 = v68;
          unint64_t v65 = (unint64_t)a2;
        }
        uint64_t v135 = (char *)v64 + 40;
        a4 = v134;
        if ((unint64_t)v134 >= v33) {
          break;
        }
        a2 = (char *)v65;
      }
      while (v65 < v26);
    }
LABEL_76:
    sub_2289BA320((void **)&v135, (const void **)&v134, &v133);
    return 1;
  }
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_2289605CC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_2289605E4(uint64_t a1)
{
  uint64_t v2 = sub_228952BB0(&qword_26AECF7E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_228960644@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = a3;
  uint64_t v31 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_2289DF130();
  uint64_t v28 = *(void *)(v5 - 8);
  uint64_t v29 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v28 - v7;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v6);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v30 = (char *)&v28 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v28 - v15;
  if (a2 < 1) {
    sub_2289DEFD0();
  }
  else {
    sub_2289DF010();
  }
  sub_2289DEFC0();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v29);
LABEL_8:
    uint64_t v20 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v32, 1, 1, v20);
  }
  uint64_t v17 = v30;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v8, AssociatedTypeWitness);
  sub_2289DF010();
  swift_getAssociatedConformanceWitness();
  char v18 = sub_2289DEB80();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v12, AssociatedTypeWitness);
  if (v18)
  {
    v19(v17, AssociatedTypeWitness);
    v19(v16, AssociatedTypeWitness);
    goto LABEL_8;
  }
  uint64_t v22 = (void (*)(char *, void))sub_2289DF080();
  uint64_t v24 = v23;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = v32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v32, v24, v25);
  v22(v33, 0);
  v19(v17, AssociatedTypeWitness);
  v19(v16, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v27, 0, 1, v25);
}

uint64_t RandomAccessCollection.element(_:equatedBy:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v23 = a4;
  uint64_t v24 = a1;
  uint64_t v25 = a3;
  uint64_t v26 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = sub_2289DF130();
  uint64_t v12 = *(void *)(v22 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v22);
  uint64_t v15 = (char *)&v21 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v13);
  char v18 = (char *)&v21 - v17;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a2;
  uint64_t v30 = v25;
  uint64_t v31 = v24;
  uint64_t v25 = v7;
  sub_2289DF030();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v22);
    uint64_t v19 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v26, 1, 1, v19);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, AssociatedTypeWitness);
    sub_228960644((uint64_t)v18, v23, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  }
}

uint64_t sub_228960D30(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 32))(a1, *(void *)(v1 + 48)) & 1;
}

uint64_t RandomAccessCollection.firstAndLast.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v25 = *(void *)(a1 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_2289DF130();
  uint64_t v26 = *(void *)(v3 - 8);
  uint64_t v27 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v7);
  uint64_t v24 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v23 - v13;
  sub_2289DF040();
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v15(v9, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v6 = v9;
LABEL_5:
    (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v27);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v28, 1, 1, TupleTypeMetadata2);
  }
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v23(v14, v9, AssociatedTypeWitness);
  sub_2289DEB20();
  if (v15(v6, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, AssociatedTypeWitness);
    goto LABEL_5;
  }
  uint64_t v19 = (void (*)(uint64_t, char *, uint64_t))v23;
  char v18 = v24;
  v23(v24, v6, AssociatedTypeWitness);
  uint64_t v20 = swift_getTupleTypeMetadata2();
  uint64_t v21 = v28;
  uint64_t v22 = v28 + *(int *)(v20 + 48);
  v19(v28, v14, AssociatedTypeWitness);
  v19(v22, v18, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v21, 0, 1, v20);
}

uint64_t RandomAccessCollection<>.element(_:offsetBy:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  v15[2] = a3;
  uint64_t v16 = a4;
  v15[0] = a1;
  v15[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_2289DF130();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v15 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)v15 - v11;
  sub_2289DF070();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t v13 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v16, 1, 1, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, AssociatedTypeWitness);
    sub_228960644((uint64_t)v12, v15[0], v16);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  }
}

BOOL CGRect.isLandscape.getter(double a1, double a2, double a3, double a4)
{
  return a4 < a3;
}

double static CGRect.from(size:)()
{
  return 0.0;
}

CGRect __swiftcall CGRect.center(in:)(CGRect in)
{
  CGFloat v5 = v4;
  CGFloat v6 = v3;
  CGFloat v7 = v2;
  CGFloat v8 = v1;
  CGFloat rect = in.size.height;
  CGFloat width = in.size.width;
  CGFloat y = in.origin.y;
  CGFloat x = in.origin.x;
  double MaxX = CGRectGetMaxX(in);
  v22.origin.CGFloat x = v8;
  v22.origin.CGFloat y = v7;
  v22.size.CGFloat width = v6;
  v22.size.height = v5;
  double v13 = (MaxX - CGRectGetMaxX(v22)) * 0.5;
  v23.origin.CGFloat x = v8;
  v23.origin.CGFloat y = v7;
  v23.size.CGFloat width = v6;
  v23.size.height = v5;
  CGFloat v14 = CGRectGetMinX(v23) + v13;
  v24.origin.CGFloat x = x;
  v24.origin.CGFloat y = y;
  v24.size.CGFloat width = width;
  v24.size.height = rect;
  double MaxY = CGRectGetMaxY(v24);
  v25.origin.CGFloat x = v8;
  v25.origin.CGFloat y = v7;
  v25.size.CGFloat width = v6;
  v25.size.height = v5;
  double v16 = (MaxY - CGRectGetMaxY(v25)) * 0.5;
  v26.origin.CGFloat x = v8;
  v26.origin.CGFloat y = v7;
  v26.size.CGFloat width = v6;
  v26.size.height = v5;
  double v17 = CGRectGetMinY(v26) + v16;
  double v18 = v14;
  double v19 = v6;
  double v20 = v5;
  result.size.height = v20;
  result.size.CGFloat width = v19;
  result.origin.CGFloat y = v17;
  result.origin.CGFloat x = v18;
  return result;
}

CGSize __swiftcall CGRect.scaledToFit(in:times:horizontally:)(CGSize in, Swift::Int times, Swift::Bool horizontally)
{
  CGFloat v7 = v6;
  CGFloat v8 = v5;
  CGFloat v9 = v4;
  CGFloat v10 = v3;
  if (horizontally)
  {
    double width = in.width;
    v20.origin.CGFloat x = v3;
    v20.origin.CGFloat y = v4;
    v20.size.double width = v5;
    v20.size.CGFloat height = v6;
    double v13 = CGRectGetWidth(v20);
  }
  else
  {
    CGFloat height = in.height;
    v21.origin.CGFloat x = v3;
    v21.origin.CGFloat y = v4;
    v21.size.double width = v5;
    v21.size.CGFloat height = v6;
    double v13 = CGRectGetHeight(v21);
    double width = height;
  }
  double v15 = width / (v13 * (double)times);
  v22.origin.CGFloat x = v10;
  v22.origin.CGFloat y = v9;
  v22.size.double width = v8;
  v22.size.CGFloat height = v7;
  double v16 = floor(v15 * CGRectGetWidth(v22));
  v23.origin.CGFloat x = v10;
  v23.origin.CGFloat y = v9;
  v23.size.double width = v8;
  v23.size.CGFloat height = v7;
  double v17 = floor(v15 * CGRectGetHeight(v23));
  double v18 = v16;
  result.CGFloat height = v17;
  result.double width = v18;
  return result;
}

CGFloat CGRect.inset(by:)(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  v12.origin.CGFloat x = a2;
  v12.origin.CGFloat y = a3;
  v12.size.double width = a4;
  v12.size.CGFloat height = a5;
  CGFloat v10 = CGRectGetWidth(v12) - a1;
  v13.origin.CGFloat x = a2;
  v13.origin.CGFloat y = a3;
  v13.size.double width = a4;
  v13.size.CGFloat height = a5;
  CGRectGetHeight(v13);
  return v10;
}

CGSize __swiftcall CGRect.inset(by:)(Swift::Double by)
{
  CGFloat v5 = v4;
  CGFloat v6 = v3;
  CGFloat v7 = v2;
  CGFloat v8 = v1;
  v14.origin.CGFloat x = v1;
  v14.origin.CGFloat y = v2;
  v14.size.double width = v3;
  v14.size.CGFloat height = v4;
  CGFloat v10 = CGRectGetWidth(v14) - by;
  v15.origin.CGFloat x = v8;
  v15.origin.CGFloat y = v7;
  v15.size.double width = v6;
  v15.size.CGFloat height = v5;
  double v11 = CGRectGetHeight(v15) - by;
  double v12 = v10;
  result.CGFloat height = v11;
  result.double width = v12;
  return result;
}

uint64_t sub_2289615F8(uint64_t a1)
{
  return sub_2289616F4(a1, qword_268284158);
}

uint64_t static Logger.assetInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2289617B8(&qword_268283E60, (uint64_t)qword_268284158, a1);
}

uint64_t sub_228961640(uint64_t a1)
{
  return sub_2289616F4(a1, qword_268284170);
}

uint64_t static Logger.contentInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2289617B8(&qword_268283E68, (uint64_t)qword_268284170, a1);
}

uint64_t sub_228961688(uint64_t a1)
{
  return sub_2289616F4(a1, qword_268284188);
}

uint64_t static Logger.mapiModel.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2289617B8(&qword_268283E70, (uint64_t)qword_268284188, a1);
}

uint64_t sub_2289616D0(uint64_t a1)
{
  return sub_2289616F4(a1, qword_2682841A0);
}

uint64_t sub_2289616F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_2289DEA10();
  sub_228961850(v3, a2);
  sub_228952BF4(v3, (uint64_t)a2);
  sub_2289DF250();
  swift_bridgeObjectRelease();
  return sub_2289DEA00();
}

uint64_t static Logger.mCatalogRequestHandler.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2289617B8(&qword_268283E78, (uint64_t)qword_2682841A0, a1);
}

uint64_t sub_2289617B8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_2289DEA10();
  uint64_t v6 = sub_228952BF4(v5, a2);
  CGFloat v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t *sub_228961850(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t LibraryAudiobookInfo.commonInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2289618C0(v1, a1);
}

uint64_t sub_2289618C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t LibraryAudiobookInfo.commonInfo.setter(uint64_t a1)
{
  return sub_22896192C(a1, v1);
}

uint64_t sub_22896192C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*LibraryAudiobookInfo.commonInfo.modify())()
{
  return nullsub_1;
}

uint64_t LibraryAudiobookInfo.seriesInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for LibraryAudiobookInfo() + 20);

  return sub_228961A40(v3, a1);
}

uint64_t type metadata accessor for LibraryAudiobookInfo()
{
  uint64_t result = qword_2682841E8;
  if (!qword_2682841E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_228961A40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_2682841B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t LibraryAudiobookInfo.seriesInfo.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for LibraryAudiobookInfo() + 20);

  return sub_228961AEC(a1, v3);
}

uint64_t sub_228961AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_2682841B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*LibraryAudiobookInfo.seriesInfo.modify())()
{
  return nullsub_1;
}

uint64_t LibraryAudiobookInfo.isSG.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for LibraryAudiobookInfo() + 24));
}

uint64_t LibraryAudiobookInfo.supplementalContents.getter()
{
  type metadata accessor for LibraryAudiobookInfo();

  return swift_bridgeObjectRetain();
}

uint64_t LibraryAudiobookInfo.init(commonInfo:seriesInfo:isSG:supplementalContents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  CGFloat v10 = (int *)type metadata accessor for LibraryAudiobookInfo();
  uint64_t v11 = a5 + v10[5];
  *(void *)(v11 + 32) = 0;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  sub_228961C84(a1, a5);
  uint64_t result = sub_228961AEC(a2, v11);
  *(unsigned char *)(a5 + v10[6]) = a3;
  *(void *)(a5 + v10[7]) = a4;
  return result;
}

uint64_t sub_228961C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_228961CE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_228961A40(v2 + *(int *)(a1 + 20), a2);
}

uint64_t sub_228961CF8(uint64_t a1, uint64_t a2)
{
  return sub_228961AEC(a1, v2 + *(int *)(a2 + 20));
}

uint64_t (*sub_228961D04())()
{
  return nullsub_1;
}

uint64_t sub_228961D28(uint64_t a1)
{
  uint64_t result = sub_228961E44(&qword_2682841C0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228961D6C@<X0>(uint64_t a1@<X8>)
{
  return sub_2289618C0(v1, a1);
}

uint64_t sub_228961D78(uint64_t a1)
{
  uint64_t result = sub_228961E44(&qword_2682841C8);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228961DBC(uint64_t a1)
{
  uint64_t result = sub_228961E44(&qword_2682841D0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228961E00(uint64_t a1)
{
  uint64_t result = sub_228961E44(&qword_2682841D8);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228961E44(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LibraryAudiobookInfo();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for LibraryAudiobookInfo(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    uint64_t v9 = a2[7];
    a1[6] = a2[6];
    a1[7] = v9;
    uint64_t v10 = a2[9];
    a1[8] = a2[8];
    a1[9] = v10;
    a1[10] = a2[10];
    uint64_t v11 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    uint64_t v12 = v11[10];
    __dst = (char *)v4 + v12;
    uint64_t v81 = (char *)a2 + v12;
    uint64_t v13 = sub_2289DE880();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v80(v81, 1, v13))
    {
      uint64_t v15 = sub_228952BB0(&qword_2682841E0);
      memcpy(__dst, v81, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v81, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v17 = v11[11];
    double v18 = (void *)((char *)v4 + v17);
    double v19 = (void *)((char *)a2 + v17);
    uint64_t v20 = v19[1];
    *double v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = v11[12];
    CGRect v22 = (char *)v4 + v21;
    CGRect v23 = (char *)a2 + v21;
    v22[8] = v23[8];
    *(void *)CGRect v22 = *(void *)v23;
    uint64_t v24 = v11[13];
    CGRect v25 = (void *)((char *)v4 + v24);
    CGRect v26 = (void *)((char *)a2 + v24);
    uint64_t v27 = v26[1];
    *CGRect v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = v11[14];
    char v82 = (char *)v4 + v28;
    uint64_t v29 = (char *)a2 + v28;
    uint64_t v30 = sub_2289DE910();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __dsta = (void (**)(void *, const void *, uint64_t))v31;
    if (v32(v29, 1, v30))
    {
      uint64_t v33 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v82, v29, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v82, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v82, 0, 1, v30);
    }
    uint64_t v34 = v11[15];
    uint64_t v35 = (void *)((char *)v4 + v34);
    char v36 = (void *)((char *)a2 + v34);
    uint64_t v37 = v36[1];
    void *v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = v11[16];
    char v39 = (void *)((char *)v4 + v38);
    uint64_t v40 = (void *)((char *)a2 + v38);
    uint64_t v41 = v40[1];
    *char v39 = *v40;
    v39[1] = v41;
    *((unsigned char *)v4 + v11[17]) = *((unsigned char *)a2 + v11[17]);
    *(void *)((char *)v4 + v11[18]) = *(void *)((char *)a2 + v11[18]);
    *((unsigned char *)v4 + v11[19]) = *((unsigned char *)a2 + v11[19]);
    *((unsigned char *)v4 + v11[20]) = *((unsigned char *)a2 + v11[20]);
    *((unsigned char *)v4 + v11[21]) = *((unsigned char *)a2 + v11[21]);
    *((unsigned char *)v4 + v11[22]) = *((unsigned char *)a2 + v11[22]);
    *((unsigned char *)v4 + v11[23]) = *((unsigned char *)a2 + v11[23]);
    *((unsigned char *)v4 + v11[24]) = *((unsigned char *)a2 + v11[24]);
    *((unsigned char *)v4 + v11[25]) = *((unsigned char *)a2 + v11[25]);
    *((unsigned char *)v4 + v11[26]) = *((unsigned char *)a2 + v11[26]);
    *((unsigned char *)v4 + v11[27]) = *((unsigned char *)a2 + v11[27]);
    *((unsigned char *)v4 + v11[28]) = *((unsigned char *)a2 + v11[28]);
    *((unsigned char *)v4 + v11[29]) = *((unsigned char *)a2 + v11[29]);
    uint64_t v42 = v11[30];
    char v43 = (void *)((char *)v4 + v42);
    char v44 = (void *)((char *)a2 + v42);
    uint64_t v45 = v44[1];
    *char v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = v11[31];
    uint64_t v47 = (char *)v4 + v46;
    char v48 = (char *)a2 + v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32(v48, 1, v30))
    {
      uint64_t v49 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
      BOOL v51 = __dsta;
      unint64_t v50 = a3;
    }
    else
    {
      BOOL v51 = __dsta;
      __dsta[2](v47, v48, v30);
      ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v47, 0, 1, v30);
      unint64_t v50 = a3;
    }
    uint64_t v52 = v11[32];
    uint64_t v53 = (char *)v4 + v52;
    uint64_t v54 = (char *)a2 + v52;
    *(void *)uint64_t v53 = *(void *)v54;
    v53[8] = v54[8];
    *(void *)((char *)v4 + v11[33]) = *(void *)((char *)a2 + v11[33]);
    uint64_t v55 = v11[34];
    uint64_t v56 = (char *)v4 + v55;
    uint64_t v57 = (char *)a2 + v55;
    if (v32((char *)a2 + v55, 1, v30))
    {
      uint64_t v58 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
    }
    else
    {
      v51[2](v56, v57, v30);
      ((void (*)(char *, void, uint64_t, uint64_t))v51[7])(v56, 0, 1, v30);
    }
    uint64_t v59 = v11[35];
    long long v60 = (void *)((char *)v4 + v59);
    char v61 = (void *)((char *)a2 + v59);
    uint64_t v62 = v61[1];
    *long long v60 = *v61;
    v60[1] = v62;
    uint64_t v63 = v11[36];
    long long v64 = (char *)v4 + v63;
    unint64_t v65 = (char *)a2 + v63;
    *(void *)(v64 + 13) = *(void *)(v65 + 13);
    *(_OWORD *)long long v64 = *(_OWORD *)v65;
    uint64_t v66 = v11[37];
    long long v67 = (char *)v4 + v66;
    long long v68 = (char *)a2 + v66;
    v67[8] = v68[8];
    *(void *)long long v67 = *(void *)v68;
    uint64_t v69 = v11[38];
    long long v70 = (char *)v4 + v69;
    uint64_t v71 = (char *)a2 + v69;
    v70[4] = v71[4];
    *(_DWORD *)long long v70 = *(_DWORD *)v71;
    uint64_t v72 = v50[5];
    uint64_t v73 = (char *)v4 + v72;
    uint64_t v74 = (char *)a2 + v72;
    uint64_t v75 = *(void *)((char *)a2 + v72 + 24);
    swift_bridgeObjectRetain();
    if (v75)
    {
      uint64_t v76 = *((void *)v74 + 4);
      *((void *)v73 + 3) = v75;
      *((void *)v73 + 4) = v76;
      (**(void (***)(char *, char *, uint64_t))(v75 - 8))(v73, v74, v75);
    }
    else
    {
      long long v77 = *((_OWORD *)v74 + 1);
      *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
      *((_OWORD *)v73 + 1) = v77;
      *((void *)v73 + 4) = *((void *)v74 + 4);
    }
    uint64_t v78 = v50[7];
    *((unsigned char *)v4 + v50[6]) = *((unsigned char *)a2 + v50[6]);
    *(void *)((char *)v4 + v78) = *(void *)((char *)a2 + v78);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for LibraryAudiobookInfo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = a1 + v4[10];
  uint64_t v6 = sub_2289DE880();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + v4[14];
  uint64_t v9 = sub_2289DE910();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = a1 + v4[31];
  if (!v11(v12, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v13 = a1 + v4[34];
  if (!v11(v13, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = a1 + *(int *)(a2 + 20);
  if (*(void *)(v14 + 24)) {
    sub_2289559D0(v14);
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for LibraryAudiobookInfo(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  uint64_t v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  uint64_t v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  a1[10] = a2[10];
  uint64_t v10 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v11 = v10[10];
  __dst = (char *)a1 + v11;
  char v79 = (char *)a2 + v11;
  uint64_t v12 = sub_2289DE880();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v78 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v78(v79, 1, v12))
  {
    uint64_t v14 = sub_228952BB0(&qword_2682841E0);
    memcpy(__dst, v79, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v79, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  uint64_t v15 = v10[11];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = v10[12];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = v10[13];
  CGRect v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  uint64_t v25 = v24[1];
  *CGRect v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = v10[14];
  uint64_t v80 = (char *)a1 + v26;
  uint64_t v27 = (char *)a2 + v26;
  uint64_t v28 = sub_2289DE910();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __dsta = (void (**)(void *, const void *, uint64_t))v29;
  if (v30(v27, 1, v28))
  {
    uint64_t v31 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v80, v27, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v80, v27, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v80, 0, 1, v28);
  }
  uint64_t v32 = v10[15];
  uint64_t v33 = (void *)((char *)a1 + v32);
  uint64_t v34 = (void *)((char *)a2 + v32);
  uint64_t v35 = v34[1];
  void *v33 = *v34;
  v33[1] = v35;
  uint64_t v36 = v10[16];
  uint64_t v37 = (void *)((char *)a1 + v36);
  uint64_t v38 = (void *)((char *)a2 + v36);
  uint64_t v39 = v38[1];
  *uint64_t v37 = *v38;
  v37[1] = v39;
  *((unsigned char *)a1 + v10[17]) = *((unsigned char *)a2 + v10[17]);
  *(void *)((char *)a1 + v10[18]) = *(void *)((char *)a2 + v10[18]);
  *((unsigned char *)a1 + v10[19]) = *((unsigned char *)a2 + v10[19]);
  *((unsigned char *)a1 + v10[20]) = *((unsigned char *)a2 + v10[20]);
  *((unsigned char *)a1 + v10[21]) = *((unsigned char *)a2 + v10[21]);
  *((unsigned char *)a1 + v10[22]) = *((unsigned char *)a2 + v10[22]);
  *((unsigned char *)a1 + v10[23]) = *((unsigned char *)a2 + v10[23]);
  *((unsigned char *)a1 + v10[24]) = *((unsigned char *)a2 + v10[24]);
  *((unsigned char *)a1 + v10[25]) = *((unsigned char *)a2 + v10[25]);
  *((unsigned char *)a1 + v10[26]) = *((unsigned char *)a2 + v10[26]);
  *((unsigned char *)a1 + v10[27]) = *((unsigned char *)a2 + v10[27]);
  *((unsigned char *)a1 + v10[28]) = *((unsigned char *)a2 + v10[28]);
  *((unsigned char *)a1 + v10[29]) = *((unsigned char *)a2 + v10[29]);
  uint64_t v40 = v10[30];
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  uint64_t v43 = v42[1];
  *uint64_t v41 = *v42;
  v41[1] = v43;
  uint64_t v44 = v10[31];
  uint64_t v45 = (char *)a1 + v44;
  uint64_t v46 = (char *)a2 + v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v30(v46, 1, v28))
  {
    uint64_t v47 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    uint64_t v49 = __dsta;
    char v48 = a3;
  }
  else
  {
    uint64_t v49 = __dsta;
    __dsta[2](v45, v46, v28);
    ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v45, 0, 1, v28);
    char v48 = a3;
  }
  uint64_t v50 = v10[32];
  BOOL v51 = (char *)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  *(void *)BOOL v51 = *(void *)v52;
  v51[8] = v52[8];
  *(void *)((char *)a1 + v10[33]) = *(void *)((char *)a2 + v10[33]);
  uint64_t v53 = v10[34];
  uint64_t v54 = (char *)a1 + v53;
  uint64_t v55 = (char *)a2 + v53;
  if (v30((char *)a2 + v53, 1, v28))
  {
    uint64_t v56 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    v49[2](v54, v55, v28);
    ((void (*)(char *, void, uint64_t, uint64_t))v49[7])(v54, 0, 1, v28);
  }
  uint64_t v57 = v10[35];
  uint64_t v58 = (void *)((char *)a1 + v57);
  uint64_t v59 = (void *)((char *)a2 + v57);
  uint64_t v60 = v59[1];
  *uint64_t v58 = *v59;
  v58[1] = v60;
  uint64_t v61 = v10[36];
  uint64_t v62 = (char *)a1 + v61;
  uint64_t v63 = (char *)a2 + v61;
  *(void *)(v62 + 13) = *(void *)(v63 + 13);
  *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
  uint64_t v64 = v10[37];
  unint64_t v65 = (char *)a1 + v64;
  uint64_t v66 = (char *)a2 + v64;
  v65[8] = v66[8];
  *(void *)unint64_t v65 = *(void *)v66;
  uint64_t v67 = v10[38];
  long long v68 = (char *)a1 + v67;
  uint64_t v69 = (char *)a2 + v67;
  v68[4] = v69[4];
  *(_DWORD *)long long v68 = *(_DWORD *)v69;
  uint64_t v70 = v48[5];
  uint64_t v71 = (char *)a1 + v70;
  uint64_t v72 = (char *)a2 + v70;
  uint64_t v73 = *(void *)((char *)a2 + v70 + 24);
  swift_bridgeObjectRetain();
  if (v73)
  {
    uint64_t v74 = *((void *)v72 + 4);
    *((void *)v71 + 3) = v73;
    *((void *)v71 + 4) = v74;
    (**(void (***)(char *, char *, uint64_t))(v73 - 8))(v71, v72, v73);
  }
  else
  {
    long long v75 = *((_OWORD *)v72 + 1);
    *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
    *((_OWORD *)v71 + 1) = v75;
    *((void *)v71 + 4) = *((void *)v72 + 4);
  }
  uint64_t v76 = v48[7];
  *((unsigned char *)a1 + v48[6]) = *((unsigned char *)a2 + v48[6]);
  *(void *)((char *)a1 + v76) = *(void *)((char *)a2 + v76);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LibraryAudiobookInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v6 = v5[10];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2289DE880();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_228952BB0(&qword_2682841E0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[11];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = v5[12];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  uint64_t v22 = v5[13];
  CGRect v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  *CGRect v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = v5[14];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = sub_2289DE910();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
LABEL_12:
    uint64_t v33 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v26, v27, v28);
LABEL_13:
  uint64_t v34 = v5[15];
  uint64_t v35 = (void *)((char *)a1 + v34);
  uint64_t v36 = (void *)((char *)a2 + v34);
  void *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = v5[16];
  uint64_t v38 = (void *)((char *)a1 + v37);
  uint64_t v39 = (void *)((char *)a2 + v37);
  *uint64_t v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v5[17]) = *((unsigned char *)a2 + v5[17]);
  *(void *)((char *)a1 + v5[18]) = *(void *)((char *)a2 + v5[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v5[19]) = *((unsigned char *)a2 + v5[19]);
  *((unsigned char *)a1 + v5[20]) = *((unsigned char *)a2 + v5[20]);
  *((unsigned char *)a1 + v5[21]) = *((unsigned char *)a2 + v5[21]);
  *((unsigned char *)a1 + v5[22]) = *((unsigned char *)a2 + v5[22]);
  *((unsigned char *)a1 + v5[23]) = *((unsigned char *)a2 + v5[23]);
  *((unsigned char *)a1 + v5[24]) = *((unsigned char *)a2 + v5[24]);
  *((unsigned char *)a1 + v5[25]) = *((unsigned char *)a2 + v5[25]);
  *((unsigned char *)a1 + v5[26]) = *((unsigned char *)a2 + v5[26]);
  *((unsigned char *)a1 + v5[27]) = *((unsigned char *)a2 + v5[27]);
  *((unsigned char *)a1 + v5[28]) = *((unsigned char *)a2 + v5[28]);
  *((unsigned char *)a1 + v5[29]) = *((unsigned char *)a2 + v5[29]);
  uint64_t v40 = v5[30];
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  *uint64_t v41 = *v42;
  v41[1] = v42[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = v5[31];
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = (char *)a2 + v43;
  int v46 = v30((char *)a1 + v43, 1, v28);
  int v47 = v30(v45, 1, v28);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v44, v45, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v44, 0, 1, v28);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v44, v28);
LABEL_18:
    uint64_t v48 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v44, v45, v28);
LABEL_19:
  uint64_t v49 = v5[32];
  uint64_t v50 = (char *)a1 + v49;
  BOOL v51 = (char *)a2 + v49;
  uint64_t v52 = *(void *)v51;
  v50[8] = v51[8];
  *(void *)uint64_t v50 = v52;
  *(void *)((char *)a1 + v5[33]) = *(void *)((char *)a2 + v5[33]);
  uint64_t v53 = v5[34];
  uint64_t v54 = (char *)a1 + v53;
  uint64_t v55 = (char *)a2 + v53;
  int v56 = v30((char *)a1 + v53, 1, v28);
  int v57 = v30(v55, 1, v28);
  if (v56)
  {
    uint64_t v58 = a3;
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v54, v55, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v58 = a3;
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v54, v28);
LABEL_24:
    uint64_t v59 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v54, v55, *(void *)(*(void *)(v59 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v54, v55, v28);
LABEL_25:
  uint64_t v60 = v5[35];
  uint64_t v61 = (void *)((char *)a1 + v60);
  uint64_t v62 = (void *)((char *)a2 + v60);
  *uint64_t v61 = *v62;
  v61[1] = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = v5[36];
  uint64_t v64 = (char *)a1 + v63;
  unint64_t v65 = (char *)a2 + v63;
  long long v66 = *(_OWORD *)v65;
  *(void *)(v64 + 13) = *(void *)(v65 + 13);
  *(_OWORD *)uint64_t v64 = v66;
  uint64_t v67 = v5[37];
  long long v68 = (char *)a1 + v67;
  uint64_t v69 = (char *)a2 + v67;
  char v70 = v69[8];
  *(void *)long long v68 = *(void *)v69;
  v68[8] = v70;
  uint64_t v71 = v5[38];
  uint64_t v72 = (char *)a1 + v71;
  uint64_t v73 = (char *)a2 + v71;
  char v74 = v73[4];
  *(_DWORD *)uint64_t v72 = *(_DWORD *)v73;
  v72[4] = v74;
  uint64_t v75 = v58[5];
  uint64_t v76 = (uint64_t)a1 + v75;
  long long v77 = (char *)a2 + v75;
  uint64_t v78 = *(void *)((char *)a2 + v75 + 24);
  if (!*(void *)((char *)a1 + v75 + 24))
  {
    if (v78)
    {
      *(void *)(v76 + 24) = v78;
      *(void *)(v76 + 32) = *((void *)v77 + 4);
      (**(void (***)(uint64_t, char *))(v78 - 8))(v76, v77);
      goto LABEL_32;
    }
LABEL_31:
    long long v79 = *(_OWORD *)v77;
    long long v80 = *((_OWORD *)v77 + 1);
    *(void *)(v76 + 32) = *((void *)v77 + 4);
    *(_OWORD *)uint64_t v76 = v79;
    *(_OWORD *)(v76 + 16) = v80;
    goto LABEL_32;
  }
  if (!v78)
  {
    sub_2289559D0(v76);
    goto LABEL_31;
  }
  sub_228963660((uint64_t *)v76, (uint64_t *)v77);
LABEL_32:
  *((unsigned char *)a1 + v58[6]) = *((unsigned char *)a2 + v58[6]);
  *(void *)((char *)a1 + v58[7]) = *(void *)((char *)a2 + v58[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_228963660(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithTake for LibraryAudiobookInfo(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v6 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v7 = v6[10];
  uint64_t v8 = (void *)(a1 + v7);
  int v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_2289DE880();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_228952BB0(&qword_2682841E0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)(a1 + v6[11]) = *(_OWORD *)(a2 + v6[11]);
  uint64_t v13 = v6[12];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(void *)uint64_t v14 = *(void *)v15;
  *(_OWORD *)(a1 + v6[13]) = *(_OWORD *)(a2 + v6[13]);
  uint64_t v16 = v6[14];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_2289DE910();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
  if (v21(v18, 1, v19))
  {
    uint64_t v22 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  *(_OWORD *)(a1 + v6[15]) = *(_OWORD *)(a2 + v6[15]);
  *(_OWORD *)(a1 + v6[16]) = *(_OWORD *)(a2 + v6[16]);
  *(unsigned char *)(a1 + v6[17]) = *(unsigned char *)(a2 + v6[17]);
  *(void *)(a1 + v6[18]) = *(void *)(a2 + v6[18]);
  *(unsigned char *)(a1 + v6[19]) = *(unsigned char *)(a2 + v6[19]);
  *(unsigned char *)(a1 + v6[20]) = *(unsigned char *)(a2 + v6[20]);
  *(unsigned char *)(a1 + v6[21]) = *(unsigned char *)(a2 + v6[21]);
  *(unsigned char *)(a1 + v6[22]) = *(unsigned char *)(a2 + v6[22]);
  *(unsigned char *)(a1 + v6[23]) = *(unsigned char *)(a2 + v6[23]);
  *(unsigned char *)(a1 + v6[24]) = *(unsigned char *)(a2 + v6[24]);
  *(unsigned char *)(a1 + v6[25]) = *(unsigned char *)(a2 + v6[25]);
  *(unsigned char *)(a1 + v6[26]) = *(unsigned char *)(a2 + v6[26]);
  *(unsigned char *)(a1 + v6[27]) = *(unsigned char *)(a2 + v6[27]);
  *(unsigned char *)(a1 + v6[28]) = *(unsigned char *)(a2 + v6[28]);
  *(unsigned char *)(a1 + v6[29]) = *(unsigned char *)(a2 + v6[29]);
  *(_OWORD *)(a1 + v6[30]) = *(_OWORD *)(a2 + v6[30]);
  uint64_t v23 = v6[31];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (const void *)(a2 + v23);
  if (v21((const void *)(a2 + v23), 1, v19))
  {
    uint64_t v26 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v24, v25, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v24, 0, 1, v19);
  }
  uint64_t v27 = v6[32];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  *(void *)uint64_t v28 = *(void *)v29;
  *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
  *(void *)(a1 + v6[33]) = *(void *)(a2 + v6[33]);
  uint64_t v30 = v6[34];
  int v31 = (void *)(a1 + v30);
  int v32 = (const void *)(a2 + v30);
  if (v21((const void *)(a2 + v30), 1, v19))
  {
    uint64_t v33 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v31, v32, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v31, 0, 1, v19);
  }
  *(_OWORD *)(a1 + v6[35]) = *(_OWORD *)(a2 + v6[35]);
  uint64_t v34 = v6[36];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(void *)(v35 + 13) = *(void *)(v36 + 13);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  uint64_t v37 = v6[37];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  *(void *)uint64_t v38 = *(void *)v39;
  *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
  uint64_t v40 = v6[38];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = a2 + v40;
  *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
  *(unsigned char *)(v41 + 4) = *(unsigned char *)(v42 + 4);
  uint64_t v43 = a3[5];
  uint64_t v44 = a3[6];
  uint64_t v45 = a1 + v43;
  uint64_t v46 = a2 + v43;
  long long v47 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v47;
  *(void *)(v45 + 32) = *(void *)(v46 + 32);
  *(unsigned char *)(a1 + v44) = *(unsigned char *)(a2 + v44);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

void *assignWithTake for LibraryAudiobookInfo(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  a1[3] = a2[3];
  a1[4] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  a1[5] = a2[5];
  a1[6] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[10];
  a1[9] = a2[9];
  a1[10] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v11 = v10[10];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_2289DE880();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    uint64_t v19 = sub_228952BB0(&qword_2682841E0);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_7:
  uint64_t v20 = v10[11];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = v10[12];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  uint64_t v28 = v10[13];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *uint64_t v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = v10[14];
  uint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = sub_2289DE910();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v36);
LABEL_12:
    uint64_t v41 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v34, v35, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v34, v35, v36);
LABEL_13:
  uint64_t v42 = v10[15];
  uint64_t v43 = (void *)((char *)a1 + v42);
  uint64_t v44 = (void *)((char *)a2 + v42);
  uint64_t v46 = *v44;
  uint64_t v45 = v44[1];
  *uint64_t v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease();
  uint64_t v47 = v10[16];
  uint64_t v48 = (void *)((char *)a1 + v47);
  uint64_t v49 = (void *)((char *)a2 + v47);
  uint64_t v51 = *v49;
  uint64_t v50 = v49[1];
  *uint64_t v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v10[17]) = *((unsigned char *)a2 + v10[17]);
  *(void *)((char *)a1 + v10[18]) = *(void *)((char *)a2 + v10[18]);
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v10[19]) = *((unsigned char *)a2 + v10[19]);
  *((unsigned char *)a1 + v10[20]) = *((unsigned char *)a2 + v10[20]);
  *((unsigned char *)a1 + v10[21]) = *((unsigned char *)a2 + v10[21]);
  *((unsigned char *)a1 + v10[22]) = *((unsigned char *)a2 + v10[22]);
  *((unsigned char *)a1 + v10[23]) = *((unsigned char *)a2 + v10[23]);
  *((unsigned char *)a1 + v10[24]) = *((unsigned char *)a2 + v10[24]);
  *((unsigned char *)a1 + v10[25]) = *((unsigned char *)a2 + v10[25]);
  *((unsigned char *)a1 + v10[26]) = *((unsigned char *)a2 + v10[26]);
  *((unsigned char *)a1 + v10[27]) = *((unsigned char *)a2 + v10[27]);
  *((unsigned char *)a1 + v10[28]) = *((unsigned char *)a2 + v10[28]);
  *((unsigned char *)a1 + v10[29]) = *((unsigned char *)a2 + v10[29]);
  uint64_t v52 = v10[30];
  uint64_t v53 = (void *)((char *)a1 + v52);
  uint64_t v54 = (void *)((char *)a2 + v52);
  uint64_t v56 = *v54;
  uint64_t v55 = v54[1];
  *uint64_t v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease();
  uint64_t v57 = v10[31];
  uint64_t v58 = (char *)a1 + v57;
  uint64_t v59 = (char *)a2 + v57;
  int v60 = v38((char *)a1 + v57, 1, v36);
  int v61 = v38(v59, 1, v36);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v58, v59, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v58, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v58, v36);
LABEL_18:
    uint64_t v62 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v58, v59, v36);
LABEL_19:
  uint64_t v63 = v10[32];
  uint64_t v64 = (char *)a1 + v63;
  unint64_t v65 = (char *)a2 + v63;
  *(void *)uint64_t v64 = *(void *)v65;
  v64[8] = v65[8];
  *(void *)((char *)a1 + v10[33]) = *(void *)((char *)a2 + v10[33]);
  uint64_t v66 = v10[34];
  uint64_t v67 = (char *)a1 + v66;
  long long v68 = (char *)a2 + v66;
  int v69 = v38((char *)a1 + v66, 1, v36);
  int v70 = v38(v68, 1, v36);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v67, v68, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v67, 0, 1, v36);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v67, v36);
LABEL_24:
    uint64_t v71 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v67, v68, v36);
LABEL_25:
  uint64_t v72 = v10[35];
  uint64_t v73 = (void *)((char *)a1 + v72);
  char v74 = (void *)((char *)a2 + v72);
  uint64_t v76 = *v74;
  uint64_t v75 = v74[1];
  *uint64_t v73 = v76;
  v73[1] = v75;
  swift_bridgeObjectRelease();
  uint64_t v77 = v10[36];
  uint64_t v78 = (char *)a1 + v77;
  long long v79 = (char *)a2 + v77;
  *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
  *(void *)(v78 + 13) = *(void *)(v79 + 13);
  uint64_t v80 = v10[37];
  uint64_t v81 = (char *)a1 + v80;
  char v82 = (char *)a2 + v80;
  v81[8] = v82[8];
  *(void *)uint64_t v81 = *(void *)v82;
  uint64_t v83 = v10[38];
  uint64_t v84 = (char *)a1 + v83;
  uint64_t v85 = (char *)a2 + v83;
  v84[4] = v85[4];
  *(_DWORD *)uint64_t v84 = *(_DWORD *)v85;
  uint64_t v86 = a3[5];
  char v87 = (char *)a1 + v86;
  if (*(void *)((char *)a1 + v86 + 24)) {
    sub_2289559D0((uint64_t)a1 + v86);
  }
  long long v88 = *(_OWORD *)((char *)a2 + v86 + 16);
  *(_OWORD *)char v87 = *(_OWORD *)((char *)a2 + v86);
  *((_OWORD *)v87 + 1) = v88;
  *((void *)v87 + 4) = *(void *)((char *)a2 + v86 + 32);
  uint64_t v89 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(void *)((char *)a1 + v89) = *(void *)((char *)a2 + v89);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryAudiobookInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228964510);
}

uint64_t sub_228964510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for LibraryAudiobookInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2289645F4);
}

uint64_t sub_2289645F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = a2;
  }
  return result;
}

uint64_t sub_2289646B4()
{
  uint64_t result = type metadata accessor for CommonLibraryAssetInfo();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL static SeriesArtistInfo.ArtistPlurality.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SeriesArtistInfo.ArtistPlurality.hash(into:)()
{
  return sub_2289DF570();
}

uint64_t SeriesArtistInfo.ArtistPlurality.hashValue.getter()
{
  return sub_2289DF590();
}

BOOL static SeriesArtistInfo.ArtistType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t SeriesArtistInfo.ArtistType.hash(into:)()
{
  return sub_2289DF570();
}

uint64_t SeriesArtistInfo.ArtistType.hashValue.getter()
{
  return sub_2289DF590();
}

BOOL sub_228964870(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SeriesArtistInfo.artistType.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void SeriesArtistInfo.artistPlurality.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

uint64_t SeriesArtistInfo.totalArtistCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t SeriesArtistInfo.names.getter()
{
  return swift_bridgeObjectRetain();
}

void SeriesArtistInfo.init(hasUniqueArtists:count:names:artistType:)(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t *a6@<X8>)
{
  if (a1)
  {
    uint64_t v12 = 0;
    unsigned int v13 = a3 & 1;
    goto LABEL_8;
  }
  if ((a3 & 1) == 0)
  {
    if (a4)
    {
      uint64_t v14 = *(void *)(a4 + 16);
      if (v14)
      {
        if (v14 > a2)
        {
          swift_bridgeObjectRelease();
          if (qword_268283E70 != -1) {
            swift_once();
          }
          uint64_t v15 = sub_2289DEA10();
          sub_228952BF4(v15, (uint64_t)qword_268284188);
          uint64_t v8 = sub_2289DE9F0();
          os_log_type_t v9 = sub_2289DF0A0();
          if (!os_log_type_enabled(v8, v9)) {
            goto LABEL_22;
          }
          unint64_t v10 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v10 = 0;
          int v11 = "Invalid data in authorDisplayInfo or narratorDisplayInfo values. Count provided was less than number of "
                "names provided. Cannot construct a valid SeriesArtistInfo.";
          goto LABEL_21;
        }
        uint64_t v12 = 256;
        uint64_t v17 = 1024;
        if (a2 == 2) {
          uint64_t v17 = 512;
        }
        if (a2 == 3) {
          uint64_t v17 = 768;
        }
        unsigned int v13 = 0;
        if (a2 != 1) {
          uint64_t v12 = v17;
        }
LABEL_8:
        *a6 = v12 | *a5;
        a6[1] = a2;
        a6[2] = v13;
        a6[3] = a4;
        return;
      }
      swift_bridgeObjectRelease();
    }
    if (qword_268283E70 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_2289DEA10();
    sub_228952BF4(v16, (uint64_t)qword_268284188);
    uint64_t v8 = sub_2289DE9F0();
    os_log_type_t v9 = sub_2289DF0A0();
    if (!os_log_type_enabled(v8, v9)) {
      goto LABEL_22;
    }
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v10 = 0;
    int v11 = "Missing names data in authorDisplayInfo or narratorDisplayInfo values. Cannot construct a valid SeriesArtistInfo.";
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  if (qword_268283E70 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_2289DEA10();
  sub_228952BF4(v7, (uint64_t)qword_268284188);
  uint64_t v8 = sub_2289DE9F0();
  os_log_type_t v9 = sub_2289DF0A0();
  if (!os_log_type_enabled(v8, v9)) {
    goto LABEL_22;
  }
  unint64_t v10 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)unint64_t v10 = 0;
  int v11 = "Missing count data in authorDisplayInfo or narratorDisplayInfo values. Cannot construct a valid SeriesArtistInfo.";
LABEL_21:
  _os_log_impl(&dword_22894E000, v8, v9, v11, v10, 2u);
  MEMORY[0x22A6A29E0](v10, -1, -1);
LABEL_22:

  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  a6[3] = 1;
}

unint64_t sub_228964B4C()
{
  unint64_t result = qword_2682841F8;
  if (!qword_2682841F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682841F8);
  }
  return result;
}

unint64_t sub_228964BA4()
{
  unint64_t result = qword_268284200;
  if (!qword_268284200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284200);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SeriesArtistInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for SeriesArtistInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SeriesArtistInfo(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SeriesArtistInfo(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SeriesArtistInfo(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for SeriesArtistInfo(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesArtistInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SeriesArtistInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SeriesArtistInfo()
{
  return &type metadata for SeriesArtistInfo;
}

unsigned char *storeEnumTagSinglePayload for SeriesArtistInfo.ArtistPlurality(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228964ECCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SeriesArtistInfo.ArtistPlurality()
{
  return &type metadata for SeriesArtistInfo.ArtistPlurality;
}

uint64_t getEnumTagSinglePayload for FinishedDateKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SeriesArtistInfo.ArtistType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228965060);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_228965088(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesArtistInfo.ArtistType()
{
  return &type metadata for SeriesArtistInfo.ArtistType;
}

uint64_t sub_2289650A4(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  int v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v26 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = sub_2289DEFE0();
  if (!v20) {
    return sub_2289DEE60();
  }
  uint64_t v21 = v20;
  uint64_t v27 = v15;
  uint64_t v43 = sub_2289DF2E0();
  uint64_t v35 = sub_2289DF2F0();
  sub_2289DF2C0();
  uint64_t v41 = v19;
  uint64_t result = sub_2289DEFD0();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    uint64_t v37 = v23;
    uint64_t v24 = v27;
    while (1)
    {
      uint64_t v25 = (void (*)(char *, void))sub_2289DF080();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      sub_2289DF2D0();
      sub_2289DF020();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

uint64_t sub_2289654A0(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA00000000007365;
  uint64_t v3 = 0x7475626972747461;
  uint64_t v4 = a1;
  unint64_t v5 = 0x7475626972747461;
  unint64_t v6 = 0xEA00000000007365;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6E6F6974616C6572;
      unint64_t v6 = 0xED00007370696873;
      break;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      unint64_t v5 = 0x7377656976;
      break;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      unint64_t v5 = 1635018093;
      break;
    case 4:
      unint64_t v6 = 0xE400000000000000;
      unint64_t v5 = 1701869940;
      break;
    case 5:
      unint64_t v6 = 0xE200000000000000;
      unint64_t v5 = 25705;
      break;
    case 6:
      unint64_t v6 = 0xE400000000000000;
      unint64_t v5 = 1717924456;
      break;
    case 7:
      unint64_t v6 = 0x80000002289E5110;
      unint64_t v5 = 0xD000000000000011;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xED00007370696873;
      if (v5 == 0x6E6F6974616C6572) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      unint64_t v2 = 0xE500000000000000;
      if (v5 != 0x7377656976) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v2 = 0xE400000000000000;
      if (v5 != 1635018093) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      unint64_t v2 = 0xE400000000000000;
      if (v5 != 1701869940) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5:
      unint64_t v2 = 0xE200000000000000;
      if (v5 != 25705) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1717924456;
      goto LABEL_21;
    case 7:
      unint64_t v2 = 0x80000002289E5110;
      if (v5 != 0xD000000000000011) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
LABEL_21:
      if (v5 != v3) {
        goto LABEL_25;
      }
LABEL_22:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_25:
      }
        char v7 = sub_2289DF480();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_228965708(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000011;
  unint64_t v4 = 0x80000002289E5210;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 0x80000002289E5230;
      unint64_t v3 = 0xD000000000000010;
      break;
    case 2:
      unint64_t v3 = 0x52746E65746E6F63;
      unint64_t v4 = 0xED0000676E697461;
      break;
    case 3:
      unint64_t v3 = 0x65726564724F7369;
      unint64_t v4 = 0xE900000000000064;
      break;
    case 4:
      unint64_t v3 = 0xD000000000000013;
      unint64_t v5 = "itemCountForDisplay";
      goto LABEL_8;
    case 5:
      unint64_t v4 = 0xE400000000000000;
      unint64_t v3 = 1684957547;
      break;
    case 6:
      unint64_t v3 = 0xD00000000000001ALL;
      unint64_t v5 = "itemMinimumCountForDisplay";
LABEL_8:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      break;
    case 7:
      unint64_t v4 = 0xE400000000000000;
      unint64_t v3 = 1701667182;
      break;
    case 8:
      unint64_t v4 = 0xE300000000000000;
      unint64_t v3 = 7107189;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xD000000000000011;
  unint64_t v7 = 0x80000002289E5210;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0x80000002289E5230;
      if (v3 == 0xD000000000000010) {
        goto LABEL_26;
      }
      goto LABEL_29;
    case 2:
      unint64_t v7 = 0xED0000676E697461;
      if (v3 != 0x52746E65746E6F63) {
        goto LABEL_29;
      }
      goto LABEL_26;
    case 3:
      unint64_t v7 = 0xE900000000000064;
      if (v3 != 0x65726564724F7369) {
        goto LABEL_29;
      }
      goto LABEL_26;
    case 4:
      unint64_t v8 = 0xD000000000000013;
      uint64_t v9 = "itemCountForDisplay";
      goto LABEL_22;
    case 5:
      unint64_t v7 = 0xE400000000000000;
      if (v3 != 1684957547) {
        goto LABEL_29;
      }
      goto LABEL_26;
    case 6:
      unint64_t v8 = 0xD00000000000001ALL;
      uint64_t v9 = "itemMinimumCountForDisplay";
LABEL_22:
      unint64_t v7 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      if (v3 != v8) {
        goto LABEL_29;
      }
      goto LABEL_26;
    case 7:
      unint64_t v7 = 0xE400000000000000;
      unint64_t v6 = 1701667182;
      goto LABEL_25;
    case 8:
      unint64_t v7 = 0xE300000000000000;
      if (v3 != 7107189) {
        goto LABEL_29;
      }
      goto LABEL_26;
    default:
LABEL_25:
      if (v3 != v6) {
        goto LABEL_29;
      }
LABEL_26:
      if (v4 == v7) {
        char v10 = 1;
      }
      else {
LABEL_29:
      }
        char v10 = sub_2289DF480();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

uint64_t sub_2289659B4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 7107189;
  }
  else {
    uint64_t v3 = 1701667182;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE300000000000000;
  }
  if (a2) {
    uint64_t v5 = 7107189;
  }
  else {
    uint64_t v5 = 1701667182;
  }
  if (a2) {
    unint64_t v6 = 0xE300000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_2289DF480();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_228965A4C(char a1, char a2)
{
  unint64_t v3 = 0xE200000000000000;
  uint64_t v4 = 25705;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1701667182;
      break;
    case 2:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v4 = 0x6449746E65726170;
      break;
    case 3:
      uint64_t v4 = 0x614E746E65726170;
      unint64_t v3 = 0xEA0000000000656DLL;
      break;
    case 4:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 7107189;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE200000000000000;
  uint64_t v6 = 25705;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE400000000000000;
      if (v4 == 1701667182) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v5 = 0xE800000000000000;
      if (v4 != 0x6449746E65726170) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v6 = 0x614E746E65726170;
      unint64_t v5 = 0xEA0000000000656DLL;
      goto LABEL_12;
    case 4:
      unint64_t v5 = 0xE300000000000000;
      if (v4 != 7107189) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v4 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = sub_2289DF480();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_228965BEC(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 7959906;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 7959906;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 7628135;
      break;
    case 2:
      uint64_t v5 = 0x6F6C6E776F646572;
      unint64_t v3 = 0xEA00000000006461;
      break;
    case 3:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x726564726F657270;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 7628135) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = 0x6F6C6E776F646572;
      unint64_t v6 = 0xEA00000000006461;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE800000000000000;
      if (v5 == 0x726564726F657270) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_2289DF480();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_228965D5C(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x737465737361;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x737465737361;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0x80000002289E50A0;
      unint64_t v5 = 0xD000000000000013;
      break;
    case 2:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x6E6F697461727564;
      break;
    case 3:
      unint64_t v5 = 0x726F466563697270;
      unint64_t v3 = 0xEE0064657474616DLL;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x6563697270;
      break;
    case 5:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1702521203;
      break;
    case 6:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1701869940;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0x80000002289E50A0;
      if (v5 == 0xD000000000000013) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x6E6F697461727564) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0xEE0064657474616DLL;
      if (v5 != 0x726F466563697270) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x6563697270) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1702521203;
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1701869940) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = sub_2289DF480();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_228965F98(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1701667182;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1701667182;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x647261646E617473;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x74726F6873;
      break;
    case 3:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x656E696C676174;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE800000000000000;
      if (v5 == 0x647261646E617473) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x74726F6873;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      if (v5 == 0x656E696C676174) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_2289DF480();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_228966110(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6F43676E69746172;
  }
  else {
    uint64_t v3 = 0x65756C6176;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xEB00000000746E75;
  }
  if (a2) {
    uint64_t v5 = 0x6F43676E69746172;
  }
  else {
    uint64_t v5 = 0x65756C6176;
  }
  if (a2) {
    unint64_t v6 = 0xEB00000000746E75;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_2289DF480();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2289661BC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEA0000000000656DLL;
  unint64_t v3 = 0x614E736569726573;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x65636E6575716573;
    }
    else {
      unint64_t v5 = 0xD000000000000014;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEE007265626D754ELL;
    }
    else {
      unint64_t v6 = 0x80000002289E4EC0;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0x614E736569726573;
  unint64_t v6 = 0xEA0000000000656DLL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v3 = 0x65636E6575716573;
    }
    else {
      unint64_t v3 = 0xD000000000000014;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xEE007265626D754ELL;
    }
    else {
      unint64_t v2 = 0x80000002289E4EC0;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = sub_2289DF480();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_2289662F0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 7107189;
    }
    else {
      uint64_t v3 = 0x6874646977;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE300000000000000;
    }
    else {
      unint64_t v4 = 0xE500000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 7107189;
      }
      else {
        uint64_t v6 = 0x6874646977;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE300000000000000;
      }
      else {
        unint64_t v7 = 0xE500000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE600000000000000;
    uint64_t v3 = 0x746867696568;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE600000000000000;
  if (v3 != 0x746867696568)
  {
LABEL_21:
    char v8 = sub_2289DF480();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_2289663EC()
{
  uint64_t v0 = sub_2289DF270();
  uint64_t v2 = v1;
  if (v0 == sub_2289DF270() && v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = sub_2289DF480();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_228966558(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000067;
  uint64_t v3 = 0x6E69646E65637361;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6E69646E65637361;
  unint64_t v6 = 0xE900000000000067;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x69646E6563736564;
      unint64_t v6 = 0xEA0000000000676ELL;
      break;
    case 2:
      uint64_t v5 = 0x44657361656C6572;
      unint64_t v6 = 0xEB00000000657461;
      break;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x72616C75706F70;
      break;
    case 4:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v5 = 0x656C746974;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEA0000000000676ELL;
      if (v5 == 0x69646E6563736564) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v2 = 0xEB00000000657461;
      if (v5 != 0x44657361656C6572) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x72616C75706F70;
      goto LABEL_12;
    case 4:
      unint64_t v2 = 0xE500000000000000;
      if (v5 != 0x656C746974) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v3) {
        goto LABEL_16;
      }
LABEL_13:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = sub_2289DF480();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_22896673C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x736B6F6F6269;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x736B6F6F6269;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0x80000002289E5140;
      unint64_t v5 = 0xD000000000000011;
      break;
    case 2:
      unint64_t v5 = 0xD000000000000016;
      unint64_t v6 = "com.apple.iBooksWidget";
      goto LABEL_6;
    case 3:
      unint64_t v5 = 0xD00000000000001ELL;
      unint64_t v6 = "com.apple.iBooks.PriceTracking";
      goto LABEL_6;
    case 4:
      unint64_t v5 = 0xD000000000000015;
      unint64_t v6 = "com.apple.iBooks.xros";
LABEL_6:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0x80000002289E5140;
      unint64_t v2 = 0xD000000000000011;
      break;
    case 2:
      unint64_t v2 = 0xD000000000000016;
      char v8 = "com.apple.iBooksWidget";
      goto LABEL_12;
    case 3:
      unint64_t v2 = 0xD00000000000001ELL;
      char v8 = "com.apple.iBooks.PriceTracking";
      goto LABEL_12;
    case 4:
      unint64_t v2 = 0xD000000000000015;
      char v8 = "com.apple.iBooks.xros";
LABEL_12:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = sub_2289DF480();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_2289668DC(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 0x73656D616ELL;
  }
  else {
    uint64_t v2 = 0x746E756F63;
  }
  if (a2) {
    uint64_t v3 = 0x73656D616ELL;
  }
  else {
    uint64_t v3 = 0x746E756F63;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = sub_2289DF480();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_228966954(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000013;
  }
  else {
    unint64_t v3 = 0xD000000000000012;
  }
  if (v2) {
    unint64_t v4 = 0x80000002289E51C0;
  }
  else {
    unint64_t v4 = 0x80000002289E51E0;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000013;
  }
  else {
    unint64_t v5 = 0xD000000000000012;
  }
  if (a2) {
    unint64_t v6 = 0x80000002289E51E0;
  }
  else {
    unint64_t v6 = 0x80000002289E51C0;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_2289DF480();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_228966A00(char a1, char a2)
{
  char v12 = a1;
  char v11 = a2;
  BooksFeatureFlag.rawValue.getter(&v10);
  BooksFeatureFlag.rawValue.getter(&v9);
  uint64_t v2 = sub_2289DF270();
  uint64_t v4 = v3;
  if (v2 == sub_2289DF270() && v4 == v5) {
    char v7 = 1;
  }
  else {
    char v7 = sub_2289DF480();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_228966ACC(char a1, char a2)
{
  if (*(void *)&aData_3[8 * a1] == *(void *)&aData_3[8 * a2]) {
    char v2 = 1;
  }
  else {
    char v2 = sub_2289DF480();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_228966B34(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 1802465122;
  }
  else {
    uint64_t v3 = 0x6F6F626F69647561;
  }
  if (v2) {
    unint64_t v4 = 0xE90000000000006BLL;
  }
  else {
    unint64_t v4 = 0xE400000000000000;
  }
  if (a2) {
    uint64_t v5 = 1802465122;
  }
  else {
    uint64_t v5 = 0x6F6F626F69647561;
  }
  if (a2) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE90000000000006BLL;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_2289DF480();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

BookFoundation::SeriesType_optional __swiftcall SeriesType.init(rawValue:)(Swift::String rawValue)
{
  BOOL v2 = v1;
  uint64_t v3 = sub_2289DF3F0();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *BOOL v2 = v5;
  return result;
}

uint64_t SeriesType.rawValue.getter()
{
  if (*v0) {
    return 1802465122;
  }
  else {
    return 0x6F6F626F69647561;
  }
}

uint64_t sub_228966C74(char *a1, char *a2)
{
  return sub_228966B34(*a1, *a2);
}

uint64_t sub_228966C80()
{
  return sub_2289DF590();
}

uint64_t sub_228966D00()
{
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_228966D6C()
{
  return sub_2289DF590();
}

BookFoundation::SeriesType_optional sub_228966DE8(Swift::String *a1)
{
  return SeriesType.init(rawValue:)(*a1);
}

void sub_228966DF4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1802465122;
  if (!*v1) {
    uint64_t v2 = 0x6F6F626F69647561;
  }
  unint64_t v3 = 0xE90000000000006BLL;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_228966E30()
{
  return sub_2289DEDF0();
}

uint64_t sub_228966E90()
{
  return sub_2289DEDB0();
}

uint64_t MappedSeriesInfo.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void MappedSeriesInfo.contentKind.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

BookFoundation::MappedSeriesInfo __swiftcall MappedSeriesInfo.init(id:contentKind:)(Swift::String id, BookFoundation::ContentKind contentKind)
{
  char v3 = *(unsigned char *)contentKind;
  *(Swift::String *)uint64_t v2 = id;
  *(unsigned char *)(v2 + 16) = v3;
  result.id = id;
  result.contentKind = contentKind;
  return result;
}

uint64_t SeriesInfo.assets.getter(id *a1, uint64_t a2)
{
  uint64_t v6 = sub_2289672F4(a1, a2);
  if (v2) {
    return v3;
  }
  uint64_t v3 = v6;
  unint64_t v8 = (*(uint64_t (**)(id *, uint64_t))(a2 + 56))(a1, a2);
  if (!v8) {
    return v3;
  }
  unint64_t v42 = v8;
  if (!(v8 >> 62))
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_6;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    return v3;
  }
  swift_bridgeObjectRetain();
  uint64_t v36 = sub_2289DF380();
  swift_bridgeObjectRelease();
  if (!v36) {
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_2289DF380();
  swift_bridgeObjectRelease();
  if (!v9)
  {
    uint64_t v39 = 0;
    uint64_t v40 = a2;
    uint64_t v41 = a1;
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
LABEL_6:
  uint64_t v43 = MEMORY[0x263F8EE78];
  sub_22896C468(0, v9 & ~(v9 >> 63), 0);
  if (v9 < 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v39 = 0;
  uint64_t v40 = a2;
  uint64_t v41 = a1;
  uint64_t v38 = v3;
  uint64_t v10 = v43;
  unint64_t v11 = v42;
  if ((v42 & 0xC000000000000001) != 0)
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = MEMORY[0x22A6A1E70](v12, v11);
      uint64_t v15 = *(void *)(v13 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
      uint64_t v14 = *(void *)(v13 + OBJC_IVAR____TtC14BookFoundation9MResource_id + 8);
      uint64_t v43 = v10;
      unint64_t v17 = *(void *)(v10 + 16);
      unint64_t v16 = *(void *)(v10 + 24);
      swift_bridgeObjectRetain();
      if (v17 >= v16 >> 1)
      {
        sub_22896C468(v16 > 1, v17 + 1, 1);
        unint64_t v11 = v42;
        uint64_t v10 = v43;
      }
      ++v12;
      *(void *)(v10 + 16) = v17 + 1;
      uint64_t v18 = (void *)(v10 + 24 * v17);
      v18[4] = v15;
      v18[5] = v14;
      v18[6] = v13;
    }
    while (v9 != v12);
  }
  else
  {
    uint64_t v19 = (void **)(v42 + 32);
    do
    {
      uint64_t v20 = *v19;
      uint64_t v21 = (uint64_t *)((char *)*v19 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v43 = v10;
      unint64_t v25 = *(void *)(v10 + 16);
      unint64_t v24 = *(void *)(v10 + 24);
      id v26 = v20;
      swift_bridgeObjectRetain();
      if (v25 >= v24 >> 1)
      {
        sub_22896C468(v24 > 1, v25 + 1, 1);
        uint64_t v10 = v43;
      }
      *(void *)(v10 + 16) = v25 + 1;
      uint64_t v27 = (void *)(v10 + 24 * v25);
      v27[4] = v23;
      v27[5] = v22;
      v27[6] = v26;
      ++v19;
      --v9;
    }
    while (v9);
  }
  swift_bridgeObjectRelease();
  uint64_t v3 = v38;
LABEL_18:
  if (*(void *)(v10 + 16))
  {
    sub_228952BB0(&qword_268284208);
    uint64_t v28 = sub_2289DF3B0();
  }
  else
  {
    uint64_t v28 = MEMORY[0x263F8EE80];
  }
  uint64_t v43 = v28;
  sub_22896DB94(v10, 1, &v43);
  if (!v39)
  {
    uint64_t v29 = swift_bridgeObjectRelease();
    uint64_t v30 = v43;
    uint64_t v43 = v3;
    MEMORY[0x270FA5388](v29);
    v37[2] = v41;
    v37[3] = v40;
    v37[4] = v30;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v32 = sub_2289DEEA0();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v35 = sub_2289650A4((void (*)(char *, char *))sub_22896DE58, (uint64_t)v37, v32, AssociatedTypeWitness, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v34);
    swift_bridgeObjectRelease();
    swift_release();
    return v35;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_2289672F4(id *a1, uint64_t a2)
{
  uint64_t v103 = a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v101 = (id *)((char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v86 - v9;
  uint64_t v96 = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for ContentDataSource();
  uint64_t v97 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v99 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (id *)((char *)&v86 - v14);
  unint64_t v16 = *(void (**)(id *, uint64_t))(v4 + 40);
  long long v100 = v2;
  uint64_t v104 = a1;
  uint64_t v98 = v16;
  v16(a1, v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      id v37 = *v15;
      uint64_t v38 = MSeries.assetsResourceSet.getter();
      uint64_t v39 = v102;
      if (v38 && (unint64_t v40 = sub_2289D4810(), swift_release(), v40))
      {
        id v41 = v37;
        unint64_t v42 = (void *)sub_2289D7D6C(v40);
        uint64_t v43 = v39;
        swift_bridgeObjectRelease();

        long long v106 = v42;
        MEMORY[0x270FA5388](v44);
        uint64_t v45 = v103;
        *(&v86 - 4) = (uint64_t)v104;
        *(&v86 - 3) = v45;
        *(&v86 - 2) = (uint64_t)v41;
        sub_228952BB0(&qword_268284320);
        swift_getAssociatedTypeWitness();
        sub_22896EB8C();
        uint64_t v46 = sub_2289DED70();
        if (!v43) {
          uint64_t v15 = (id *)v46;
        }
        swift_bridgeObjectRelease();
      }
      else
      {

        sub_22896EB18();
        swift_allocError();
        *uint64_t v51 = 0;
        v51[1] = 0;
        swift_willThrow();
      }
      return (uint64_t)v15;
    }
    (*(void (**)(id *, uint64_t))(v97 + 8))(v15, v11);
    uint64_t v18 = v102;
LABEL_16:
    uint64_t v48 = v99;
    uint64_t v15 = v104;
    v98(v104, v4);
    int v49 = swift_getEnumCaseMultiPayload();
    if (v49)
    {
      uint64_t v50 = v101;
      if (v49 != 1)
      {
        swift_getAssociatedTypeWitness();
        uint64_t v15 = (id *)sub_2289DEE60();
        (*(void (**)(char *, uint64_t))(v97 + 8))(v48, v11);
        return (uint64_t)v15;
      }
    }
    else
    {

      uint64_t v50 = v101;
    }
    (*(void (**)(id *, char *, uint64_t))(v6 + 32))(v50, v48, AssociatedTypeWitness);
    uint64_t v52 = v103;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v54 = (void *)sub_22898F664(AssociatedTypeWitness, AssociatedConformanceWitness);
    if (v54)
    {
      uint64_t v55 = v6;
      uint64_t v102 = &v86;
      long long v106 = v54;
      MEMORY[0x270FA5388](v54);
      *(&v86 - 4) = (uint64_t)v15;
      *(&v86 - 3) = v52;
      *(&v86 - 2) = (uint64_t)v50;
      swift_getAssociatedTypeWitness();
      sub_2289DEEA0();
      uint64_t v15 = (id *)AssociatedTypeWitness;
      swift_getAssociatedTypeWitness();
      swift_getWitnessTable();
      sub_2289DED70();
      if (v18)
      {
        (*(void (**)(id *, uint64_t))(v6 + 8))(v101, AssociatedTypeWitness);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v58 = v101;
        char v59 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(AssociatedTypeWitness, AssociatedConformanceWitness);
        (*(void (**)(id *, uint64_t))(v55 + 8))(v58, AssociatedTypeWitness);
        if (v59)
        {
          LOBYTE(v105) = 0;
          sub_228952BB0(&qword_268284150);
          int v60 = (void *)sub_2289DF310();
          swift_bridgeObjectRelease();
          SeriesListSortOrder.sortedAssets(for:)(v60);
          swift_bridgeObjectRelease();
          uint64_t v15 = (id *)sub_2289DF310();
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_228952BB0(&qword_268284150);
          uint64_t v63 = (void *)sub_2289DF310();
          swift_bridgeObjectRelease();
          long long v105 = v63;
          swift_bridgeObjectRetain();
          sub_228955888(&v105);
          swift_bridgeObjectRelease();
          uint64_t v15 = (id *)sub_2289DF310();
          swift_release();
        }
      }
    }
    else
    {
      (*(void (**)(id *, uint64_t))(v6 + 8))(v50, AssociatedTypeWitness);
      sub_22896EB18();
      swift_allocError();
      *uint64_t v56 = 0;
      v56[1] = 0;
      swift_willThrow();
    }
    return (uint64_t)v15;
  }
  id v91 = *(id *)((char *)v15 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  (*(void (**)(char *, id *, uint64_t))(v6 + 32))(v10, v15, AssociatedTypeWitness);
  uint64_t v19 = v104;
  uint64_t v20 = swift_getAssociatedConformanceWitness();
  uint64_t v21 = (void *)sub_22898F664(AssociatedTypeWitness, v20);
  BOOL v93 = v10;
  uint64_t v94 = v6;
  if (!v21)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v21 = (void *)sub_2289DEE60();
  }
  uint64_t v90 = &v86;
  uint64_t v92 = v21;
  long long v106 = v21;
  MEMORY[0x270FA5388](v21);
  uint64_t v22 = v103;
  *(&v86 - 2) = (uint64_t)v19;
  *(&v86 - 1) = v22;
  uint64_t v87 = v20;
  uint64_t v95 = v23;
  swift_getAssociatedTypeWitness();
  uint64_t v24 = sub_2289DEEA0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v89 = v24;
  id v26 = v102;
  long long v106 = (void *)sub_2289650A4((void (*)(char *, char *))sub_22896EBE8, (uint64_t)(&v86 - 4), v24, TupleTypeMetadata2, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v27);
  MEMORY[0x270FA5388](v106);
  *(&v86 - 2) = (uint64_t)v104;
  *(&v86 - 1) = v22;
  sub_2289DEEA0();
  swift_getWitnessTable();
  uint64_t v28 = sub_2289DEAD0();
  uint64_t v15 = (id *)v91;
  if (!MSeries.assetsResourceSet.getter() || (unint64_t v29 = sub_2289D4810(), swift_release(), !v29))
  {

    uint64_t v47 = v94;
    uint64_t AssociatedTypeWitness = v95;
    (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v95);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v18 = v26;
    uint64_t v6 = v47;
    goto LABEL_16;
  }
  uint64_t v30 = v15;
  unint64_t v31 = sub_2289D7D6C(v29);
  uint64_t v32 = v30;
  swift_bridgeObjectRelease();

  uint64_t v101 = (id *)&v86;
  long long v106 = (void *)v31;
  MEMORY[0x270FA5388](v33);
  uint64_t v34 = v103;
  *(&v86 - 4) = (uint64_t)v104;
  *(&v86 - 3) = v34;
  *(&v86 - 2) = (uint64_t)v30;
  *(&v86 - 1) = v28;
  sub_228952BB0(&qword_268284320);
  uint64_t v35 = swift_getAssociatedTypeWitness();
  sub_22896EB8C();
  uint64_t v36 = sub_2289DED70();
  uint64_t v102 = v26;
  if (v26)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v95);
    swift_bridgeObjectRelease();
    return (uint64_t)v15;
  }
  uint64_t v15 = (id *)v36;
  uint64_t v99 = (char *)v35;
  long long v100 = v32;
  swift_bridgeObjectRelease();
  long long v106 = v92;
  char v61 = sub_2289DF060();
  uint64_t v62 = v95;
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v95);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v15;
  }
  if (!(v31 >> 62))
  {
    uint64_t v64 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v64) {
      goto LABEL_33;
    }
LABEL_43:
    swift_bridgeObjectRelease();
    uint64_t v66 = (void *)MEMORY[0x263F8EE78];
LABEL_44:
    uint64_t v76 = sub_22897B668((uint64_t)v66);
    uint64_t v77 = swift_bridgeObjectRelease();
    uint64_t v101 = (id *)&v86;
    long long v106 = v92;
    MEMORY[0x270FA5388](v77);
    uint64_t v79 = v103;
    uint64_t v78 = v104;
    *(&v86 - 4) = (uint64_t)v104;
    *(&v86 - 3) = v79;
    *(&v86 - 2) = v76;
    swift_getWitnessTable();
    uint64_t v80 = v102;
    uint64_t v81 = (void *)sub_2289DF2B0();
    uint64_t v82 = swift_bridgeObjectRelease();
    uint64_t v102 = &v86;
    long long v106 = v81;
    MEMORY[0x270FA5388](v82);
    *(&v86 - 4) = (uint64_t)v78;
    *(&v86 - 3) = v79;
    uint64_t v83 = v93;
    *(&v86 - 2) = (uint64_t)v93;
    swift_getWitnessTable();
    sub_2289DED70();
    if (v80)
    {
      swift_bridgeObjectRelease();

      (*(void (**)(char *, uint64_t))(v94 + 8))(v83, v62);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_2289DEE50();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((*(uint64_t (**)(uint64_t))(v87 + 72))(v62))
      {
        LOBYTE(v106) = 0;
        sub_228952BB0(&qword_268284150);
        uint64_t v84 = (void *)sub_2289DF310();
        swift_bridgeObjectRelease();
        SeriesListSortOrder.sortedAssets(for:)(v84);
        swift_bridgeObjectRelease();
        uint64_t v15 = (id *)sub_2289DF310();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_228952BB0(&qword_268284150);
        uint64_t v85 = (void *)sub_2289DF310();
        swift_bridgeObjectRelease();
        long long v106 = v85;
        swift_bridgeObjectRetain();
        sub_228955888(&v106);
        swift_bridgeObjectRelease();
        uint64_t v15 = (id *)sub_2289DF310();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v94 + 8))(v83, v62);
    }
    return (uint64_t)v15;
  }
  swift_bridgeObjectRetain();
  uint64_t v64 = sub_2289DF380();
  swift_bridgeObjectRelease();
  if (!v64) {
    goto LABEL_43;
  }
LABEL_33:
  uint64_t v101 = v15;
  long long v106 = (void *)MEMORY[0x263F8EE78];
  sub_22896C428(0, v64 & ~(v64 >> 63), 0);
  if ((v64 & 0x8000000000000000) == 0)
  {
    uint64_t v65 = 0;
    uint64_t v66 = v106;
    unint64_t v67 = v31 & 0xC000000000000001;
    unint64_t v68 = v31;
    do
    {
      if (v67) {
        int v69 = (char *)MEMORY[0x22A6A1E70](v65, v31);
      }
      else {
        int v69 = (char *)*(id *)(v31 + 8 * v65 + 32);
      }
      int v70 = v69;
      uint64_t v71 = *(void *)&v69[OBJC_IVAR____TtC14BookFoundation9MResource_id];
      uint64_t v72 = *(void *)&v69[OBJC_IVAR____TtC14BookFoundation9MResource_id + 8];
      swift_bridgeObjectRetain();

      long long v106 = v66;
      unint64_t v74 = v66[2];
      unint64_t v73 = v66[3];
      if (v74 >= v73 >> 1)
      {
        sub_22896C428(v73 > 1, v74 + 1, 1);
        uint64_t v66 = v106;
      }
      ++v65;
      v66[2] = v74 + 1;
      uint64_t v75 = &v66[2 * v74];
      v75[4] = v71;
      v75[5] = v72;
      uint64_t v62 = v95;
      unint64_t v31 = v68;
    }
    while (v64 != v65);
    swift_bridgeObjectRelease();
    uint64_t v15 = v101;
    goto LABEL_44;
  }
  __break(1u);
  swift_release();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_2289682F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v39 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_2289DF130();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = a1;
  uint64_t v12 = swift_checkMetadataState();
  uint64_t v13 = (void *)ContentInfo.storeData.getter(v12, v5);

  uint64_t v14 = v39;
  if (!v13)
  {
    uint64_t v30 = v10;
    uint64_t v27 = v7;
    uint64_t v28 = AssociatedConformanceWitness;
    uint64_t v29 = v8;
    uint64_t v15 = v39;
    uint64_t v31 = v11;
    uint64_t v16 = ContentInfo.id.getter(v12, v5);
    if (*(void *)(v32 + 16) && (unint64_t v18 = sub_2289D7094(v16, v17), (v19 & 1) != 0))
    {
      id v20 = *(id *)(*(void *)(v32 + 56) + 8 * v18);
      swift_bridgeObjectRelease();
      uint64_t v21 = v30;
      uint64_t v11 = v31;
      ContentInfo.libraryData.getter(v12, v5, v30);
      uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, AssociatedTypeWitness) == 1)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v27);
        uint64_t v35 = 0;
        long long v33 = 0u;
        long long v34 = 0u;
      }
      else
      {
        *((void *)&v34 + 1) = AssociatedTypeWitness;
        uint64_t v35 = swift_getAssociatedConformanceWitness();
        uint64_t v24 = sub_22896EC88((uint64_t *)&v33);
        (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(v24, v21, AssociatedTypeWitness);
      }
      id v25 = v20;
      static ContentInfoUtilities.assetInfo(libraryAssetInfo:storeAsset:)((uint64_t)&v33, v20, (uint64_t)&v36);

      sub_22896EABC((uint64_t)&v33, &qword_268284300);
      if (v37)
      {
        sub_2289605CC(&v36, (uint64_t)v38);
        sub_2289605CC(v38, (uint64_t)&v36);
        sub_228952BB0(&qword_268284150);
        return swift_dynamicCast();
      }
      sub_22896EABC((uint64_t)&v36, &qword_268284210);
      uint64_t v14 = v15;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v14 = v15;
      uint64_t v11 = v31;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v14, v11, v12);
}

uint64_t SeriesInfo.assetCount.getter(uint64_t a1, uint64_t a2)
{
  KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v5 = swift_getKeyPath();
  sub_2289937C8(KeyPath, v5, a1, *(void *)(a2 + 8), (uint64_t)&v7);
  swift_release();
  swift_release();
  return v7;
}

uint64_t sub_228968708@<X0>(uint64_t *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result;
  return result;
}

uint64_t sub_2289687B4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = MEMORY[0x22A6A1A80](v3, AssociatedTypeWitness);
  *a2 = result;
  return result;
}

uint64_t SeriesInfo.assetMinimumCount.getter(uint64_t a1, uint64_t a2)
{
  KeyPath = (uint64_t *)swift_getKeyPath();
  sub_228993C7C(KeyPath, a1, *(void *)(a2 + 8), (uint64_t)&v6);
  swift_release();
  return v6;
}

void SeriesInfo.authorInfo.getter(id *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v42 - v11;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for ContentDataSource();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (void **)((char *)&v42 - v14);
  uint64_t v16 = *(void (**)(id *, uint64_t))(v5 + 40);
  uint64_t v44 = v3;
  v16(a1, v5);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, void **, uint64_t))(v7 + 32))(v12, v15, AssociatedTypeWitness);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      char v19 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
      uint64_t v20 = v19(AssociatedTypeWitness, AssociatedConformanceWitness);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, AssociatedTypeWitness);
      uint64_t v43 = v19;
      if (v20)
      {
        uint64_t v21 = v10;
        uint64_t v22 = *(void (**)(char *, uint64_t))(v7 + 8);
        v22(v21, AssociatedTypeWitness);
        char v23 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
      }
      else
      {
        long long v34 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
        char v35 = v34(AssociatedTypeWitness, AssociatedConformanceWitness);
        long long v36 = v10;
        uint64_t v22 = *(void (**)(char *, uint64_t))(v7 + 8);
        v22(v36, AssociatedTypeWitness);
        if ((v35 & 1) == 0)
        {
          sub_228968D64(a1, v45, v46);
          v22(v12, AssociatedTypeWitness);
          return;
        }
        char v23 = v34(AssociatedTypeWitness, AssociatedConformanceWitness);
      }
      char v37 = v23;
      uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
      char v40 = v39 & 1;
      uint64_t v41 = v43(AssociatedTypeWitness, AssociatedConformanceWitness);
      unsigned __int8 v48 = 0;
      SeriesArtistInfo.init(hasUniqueArtists:count:names:artistType:)(v37, v38, v40, v41, &v48, v46);
      v22(v12, AssociatedTypeWitness);
      return;
    }
    uint64_t v24 = *v15;
  }
  else
  {
    uint64_t v24 = *(void **)((char *)v15 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(v7 + 8))(v15, AssociatedTypeWitness);
  }
  id v25 = objc_msgSend(v24, sel_authorNames);
  if (v25)
  {

    char v26 = *((unsigned char *)v24 + OBJC_IVAR____TtC14BookFoundation7MSeries_hasUniqueAuthors);
  }
  else
  {
    if (*((unsigned char *)v24 + OBJC_IVAR____TtC14BookFoundation7MSeries_hasUniqueAuthors) != 1)
    {

      sub_228968D64(a1, v45, v46);
      return;
    }
    char v26 = 1;
  }
  id v27 = v24;
  id v28 = MSeries.authorCount.getter();
  char v30 = v29;

  char v31 = v30 & 1;
  id v32 = objc_msgSend(v27, sel_authorNames);

  if (v32)
  {
    uint64_t v33 = sub_2289DEE20();
  }
  else
  {
    uint64_t v33 = 0;
  }
  unsigned __int8 v47 = 0;
  SeriesArtistInfo.init(hasUniqueArtists:count:names:artistType:)(v26, (uint64_t)v28, v31, v33, &v47, v46);
}

void sub_228968D64(id *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *(void *)uint64_t v17 = SeriesInfo.assets.getter(a1, a2);
  MEMORY[0x270FA5388](*(void *)v17);
  void v16[2] = a1;
  v16[3] = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_2289DEEA0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = sub_2289650A4((void (*)(char *, char *))sub_22896EA9C, (uint64_t)v16, v6, MEMORY[0x263F8D310], MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v8);
  swift_bridgeObjectRelease();
  *(void *)uint64_t v17 = MEMORY[0x263F8EE80];
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_22896E6F4(v10, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v12 = *(void *)(v9 + 16);
  if (v12 >= 5) {
    unint64_t v12 = 5;
  }
  uint64_t v13 = sub_22897B938(v9 + 32, 0, (2 * v12) | 1);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(v13 + 16);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v11 + 16);
  v17[0] = 0;
  SeriesArtistInfo.init(hasUniqueArtists:count:names:artistType:)(v14 == 5, v15, 0, v11, v17, a3);
}

uint64_t SeriesInfo.contentsForArtwork.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)v36 - v7;
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for ContentDataSource();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (void **)((char *)v36 - v10);
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(a1, v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, void **, uint64_t))(v6 + 32))(v8, v11, AssociatedTypeWitness);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
      if (v14)
      {
        v36[1] = v36;
        *(void *)&long long v40 = v14;
        MEMORY[0x270FA5388](v14);
        v36[-2] = a1;
        v36[-1] = a2;
        swift_getAssociatedTypeWitness();
        sub_2289DEEA0();
        swift_getWitnessTable();
        uint64_t v15 = sub_2289DED80();
        swift_bridgeObjectRelease();
        *(void *)&long long v37 = v15;
        swift_getWitnessTable();
        uint64_t v16 = sub_2289DF050();
        long long v37 = v40;
        long long v38 = v41;
        MEMORY[0x270FA5388](v16);
        v36[-2] = a1;
        v36[-1] = a2;
        sub_2289DF1B0();
        sub_228952BB0(&qword_268284150);
        swift_getWitnessTable();
        uint64_t v17 = (void *)sub_2289DED70();
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
        return (uint64_t)v17;
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
      return 0;
    }
    unint64_t v18 = *v11;
  }
  else
  {
    unint64_t v18 = *(void **)((char *)v11 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(v6 + 8))(v11, AssociatedTypeWitness);
  }
  unint64_t v19 = sub_22896BAF8(@"contents-for-artwork", (uint64_t (*)(uint64_t))sub_2289D4810);

  if (!v19) {
    return 0;
  }
  if (!(v19 >> 62))
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_10;
    }
LABEL_32:
    uint64_t v17 = (void *)MEMORY[0x263F8EE78];
LABEL_33:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v17;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_2289DF380();
  uint64_t v20 = result;
  if (!result) {
    goto LABEL_32;
  }
LABEL_10:
  if (v20 >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v17 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      id v23 = (v19 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x22A6A1E70](v22, v19)
          : *(id *)(v19 + 8 * v22 + 32);
      uint64_t v24 = v23;
      type metadata accessor for MBook();
      uint64_t v25 = swift_dynamicCastClass();
      if (v25) {
        break;
      }
      type metadata accessor for MAudiobook();
      uint64_t v30 = swift_dynamicCastClass();
      if (v30)
      {
        uint64_t v31 = v30;
        uint64_t v32 = type metadata accessor for AudiobookInfo();
        *((void *)&v38 + 1) = v32;
        uint64_t v39 = sub_22896DF88(&qword_268284218, (void (*)(uint64_t))type metadata accessor for AudiobookInfo);
        id v28 = sub_22896EC88((uint64_t *)&v37);
        *id v28 = v31;
        sub_228952BB0(&qword_268284220);
        swift_storeEnumTagMultiPayload();
        *((unsigned char *)v28 + *(int *)(v32 + 20)) = 0;
        char v29 = (int *)(v32 + 24);
        goto LABEL_19;
      }
      *((void *)&v41 + 1) = type metadata accessor for MAsset();
      *(void *)&long long v40 = v24;
      sub_228952BB0(&qword_268284150);
      id v35 = v24;
      sub_22898A418((uint64_t)&v40);
      sub_2289559D0((uint64_t)&v40);
      long long v37 = 0u;
      long long v38 = 0u;
      uint64_t v39 = 0;

      if (*((void *)&v38 + 1)) {
        goto LABEL_20;
      }
      sub_22896EABC((uint64_t)&v37, &qword_268284210);
LABEL_25:
      if (v20 == ++v22) {
        goto LABEL_33;
      }
    }
    uint64_t v26 = v25;
    uint64_t v27 = type metadata accessor for BookInfo();
    *((void *)&v38 + 1) = v27;
    uint64_t v39 = sub_22896DF88(&qword_268284228, (void (*)(uint64_t))type metadata accessor for BookInfo);
    id v28 = sub_22896EC88((uint64_t *)&v37);
    *id v28 = v26;
    sub_228952BB0(&qword_268284230);
    swift_storeEnumTagMultiPayload();
    char v29 = (int *)(v27 + 20);
LABEL_19:
    *((unsigned char *)v28 + *v29) = 1;
LABEL_20:
    sub_2289605CC(&v37, (uint64_t)&v40);
    sub_2289605CC(&v40, (uint64_t)&v37);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v17 = sub_22896C208(0, v17[2] + 1, 1, v17);
    }
    unint64_t v34 = v17[2];
    unint64_t v33 = v17[3];
    if (v34 >= v33 >> 1) {
      uint64_t v17 = sub_22896C208((void *)(v33 > 1), v34 + 1, 1, v17);
    }
    v17[2] = v34 + 1;
    sub_2289605CC(&v37, (uint64_t)&v17[5 * v34 + 4]);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

BOOL sub_2289697A0()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 240);
  uint64_t v2 = swift_checkMetadataState();
  uint64_t v3 = v1(v2, AssociatedConformanceWitness);
  if (v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v3;
  }
  uint64_t v6 = v1(v2, AssociatedConformanceWitness);
  if (v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v6;
  }
  return v5 < v8;
}

uint64_t sub_2289698DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  v7[4] = swift_getAssociatedConformanceWitness();
  uint64_t v5 = sub_22896EC88(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v5, a1, AssociatedTypeWitness);
  static ContentInfoUtilities.assetInfo(libraryAssetInfo:)(v7, a2);
  return sub_2289559D0((uint64_t)v7);
}

uint64_t SeriesInfo.mappedSeriesInfo.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v7 = (void *)swift_getKeyPath();
  sub_228993EB8(KeyPath, v7, a1, *(void *)(a2 + 8), a3);
  swift_release();
  return swift_release();
}

unint64_t sub_228969AA8@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = sub_2289D4FAC(@"mapped-series");
  if (!result) {
    goto LABEL_13;
  }
  unint64_t v3 = result;
  uint64_t v4 = result & 0xFFFFFFFFFFFFFF8;
  if (!(result >> 62))
  {
    unint64_t result = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  unint64_t result = sub_2289DF380();
  if (!result)
  {
LABEL_12:
    unint64_t result = swift_bridgeObjectRelease();
LABEL_13:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    return result;
  }
LABEL_4:
  if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = MEMORY[0x22A6A1E70](0, v3);
  }
  else
  {
    if (!*(void *)(v4 + 16))
    {
      __break(1u);
      return result;
    }
    uint64_t v5 = *(void *)(v3 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v5 + 40);
  uint64_t v6 = *(void *)(v5 + 48);
  int v8 = *(unsigned __int8 *)(v5 + 56);
  swift_bridgeObjectRetain();
  unint64_t result = swift_release();
  if (v8 == 1) {
    char v9 = 1;
  }
  else {
    char v9 = 2;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v9;
  return result;
}

double sub_228969B90@<D0>(uint64_t a1@<X8>)
{
  void (*v3)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  char v5;
  double result;
  long long v7;
  char v8;

  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v3 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 104);
  uint64_t v4 = swift_checkMetadataState();
  v3(&v7, v4, AssociatedConformanceWitness);
  uint64_t v5 = v8;
  unint64_t result = *(double *)&v7;
  *(_OWORD *)a1 = v7;
  *(unsigned char *)(a1 + 16) = v5;
  return result;
}

uint64_t SeriesInfo.nextHref.getter(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  sub_228993C7C(KeyPath, a1, *(void *)(a2 + 8), (uint64_t)&v6);
  swift_release();
  return v6;
}

BookFoundation::SeriesListSortOrder_optional SeriesInfo.currentSortOrder.getter@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  sub_228993C7C(KeyPath, a1, *(void *)(a2 + 8), (uint64_t)&rawValue);
  swift_release();
  object = rawValue._object;
  if (!rawValue._object
    || (uint64_t countAndFlagsBits = rawValue._countAndFlagsBits,
        result.value = SeriesListSortOrder.init(rawValue:)(*(Swift::String *)(&object - 1)).value,
        char v10 = rawValue._countAndFlagsBits,
        LOBYTE(rawValue._countAndFlagsBits) == 5))
  {
    result.value = SeriesInfo.isOrdered.getter(a1, a2);
    if (result.value) {
      char v10 = 0;
    }
    else {
      char v10 = 3;
    }
  }
  *a3 = v10;
  return result;
}

uint64_t SeriesInfo.isOrdered.getter(uint64_t a1, uint64_t a2)
{
  return sub_22896A22C(a1, a2);
}

uint64_t sub_228969D7C@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t SeriesInfo.url.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v19 = a3;
  uint64_t v5 = sub_228952BB0(&qword_2682841E0);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  int v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  char v10 = (char *)&v18 - v9;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  unint64_t v12 = (void *)swift_getKeyPath();
  uint64_t v13 = *(void *)(a2 + 8);
  sub_228994100(KeyPath, v12, a1, v13, (uint64_t)v10);
  swift_release();
  swift_release();
  uint64_t v14 = sub_2289DE880();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v10, 1, v14) != 1)
  {
    int v8 = v10;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v19, v8, v14);
  }
  unint64_t v18 = (uint64_t (*)(char *, uint64_t, uint64_t))v16;
  sub_22896EABC((uint64_t)v10, &qword_2682841E0);
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 40))(&v24, a1, a2);
  if (v24) {
    sub_2289DF480();
  }
  swift_bridgeObjectRelease();
  unint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  sub_2289DF250();
  swift_bridgeObjectRelease();
  unint64_t v24 = 0xD000000000000018;
  unint64_t v25 = 0x80000002289E5580;
  sub_2289DEC90();
  swift_bridgeObjectRelease();
  sub_2289DEC90();
  ContentInfo.id.getter(a1, v13);
  sub_2289DEC90();
  swift_bridgeObjectRelease();
  sub_2289DE860();
  swift_bridgeObjectRelease();
  uint64_t result = v18(v8, 1, v14);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v19, v8, v14);
  }
  __break(1u);
  return result;
}

uint64_t sub_22896A168()
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  uint64_t v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness);
}

uint64_t SeriesInfo.isExplicit.getter(uint64_t a1, uint64_t a2)
{
  return sub_22896A22C(a1, a2);
}

uint64_t sub_22896A22C(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = (void *)swift_getKeyPath();
  sub_228993EB8(KeyPath, v5, a1, *(void *)(a2 + 8), (uint64_t)&v7);
  swift_release();
  swift_release();
  return v7;
}

uint64_t sub_22896A2C0@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t sub_22896A370@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = AssetInfo.author.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t sub_22896A414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_22896A528(a1, a2, a3, a4, a5, a6);
  if (qword_26AECF788 != -1) {
    swift_once();
  }
  swift_beginAccess();
  if ((byte_26AECF780 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 56))(a7, 1, 1, a6);
  }
  sub_22896EB18();
  swift_allocError();
  *uint64_t v11 = a2;
  v11[1] = a3;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

void sub_22896A528(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v31 = a6;
  uint64_t v11 = sub_2289DF5D0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228952C2C(a1, (uint64_t)v33);
  sub_2289DF5A0();
  sub_2289DF5B0();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (a3) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = 0x6E776F6E6B6E753CLL;
  }
  if (a3) {
    unint64_t v16 = a3;
  }
  else {
    unint64_t v16 = 0xE90000000000003ELL;
  }
  if (a5) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = 0x6E776F6E6B6E753CLL;
  }
  if (a5) {
    unint64_t v18 = a5;
  }
  else {
    unint64_t v18 = 0xE90000000000003ELL;
  }
  uint64_t v19 = qword_268283E68;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_2289DEA10();
  sub_228952BF4(v20, (uint64_t)qword_268284170);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_2289DE9F0();
  os_log_type_t v22 = sub_2289DF0B0();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    v33[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315906;
    uint64_t v25 = sub_2289DF620();
    uint64_t v30 = v17;
    uint64_t v32 = sub_22897ACBC(v25, v26, v33);
    sub_2289DF150();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_22897ACBC(v15, v16, v33);
    sub_2289DF150();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_22897ACBC(v30, v18, v33);
    sub_2289DF150();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 32) = 2082;
    uint64_t v27 = sub_2289DF620();
    uint64_t v32 = sub_22897ACBC(v27, v28, v33);
    sub_2289DF150();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22894E000, v21, v22, "%s '%{public}s' in series '%{public}s' is expected to be %{public}s", (uint8_t *)v23, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x22A6A29E0](v24, -1, -1);
    MEMORY[0x22A6A29E0](v23, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_22896A8B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = (char *)a2 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 32))(AssociatedTypeWitness);
  a2[1] = v7;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v5, a1, AssociatedTypeWitness);
}

uint64_t sub_22896AA08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
}

uint64_t sub_22896AAE0@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v56 = a3;
  uint64_t v54 = a2;
  int v60 = a1;
  uint64_t v61 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v59 = v5;
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v57 = type metadata accessor for ContentDataSource();
  MEMORY[0x270FA5388](v57);
  uint64_t v58 = (uint64_t *)((char *)&v46 - v8);
  uint64_t v9 = sub_2289DF130();
  uint64_t v47 = *(void *)(v9 - 8);
  uint64_t v48 = v9;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v52 = (char *)&v46 - v11;
  uint64_t v53 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v10);
  int v49 = (char *)&v46 - v12;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = sub_2289DF130();
  uint64_t v51 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v46 - v16;
  uint64_t v18 = *(void *)(v13 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v15);
  uint64_t v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v55 = (char *)&v46 - v22;
  uint64_t v23 = (char *)*v60;
  uint64_t v50 = v7;
  uint64_t v24 = swift_dynamicCastClass();
  if (!v24)
  {
    v62[3] = type metadata accessor for MAsset();
    v62[0] = v23;
    uint64_t v28 = *(void *)&v23[OBJC_IVAR____TtC14BookFoundation9MResource_id];
    unint64_t v29 = *(void *)&v23[OBJC_IVAR____TtC14BookFoundation9MResource_id + 8];
    uint64_t v30 = *(void *)(v54 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
    unint64_t v31 = *(void *)(v54 + OBJC_IVAR____TtC14BookFoundation9MResource_id + 8);
    uint64_t v32 = v23;
    uint64_t v33 = swift_checkMetadataState();
    sub_22896A414((uint64_t)v62, v28, v29, v30, v31, v33, v61);
    return sub_2289559D0((uint64_t)v62);
  }
  uint64_t v54 = v24;
  int v60 = (void **)AssociatedTypeWitness;
  uint64_t v25 = *(void *)&v23[OBJC_IVAR____TtC14BookFoundation9MResource_id + 8];
  v62[0] = *(void *)&v23[OBJC_IVAR____TtC14BookFoundation9MResource_id];
  v62[1] = v25;
  unint64_t v26 = v23;
  swift_bridgeObjectRetain();
  MEMORY[0x22A6A16D0](v62, v56, MEMORY[0x263F8D310], v13, MEMORY[0x263F8D320]);
  swift_bridgeObjectRelease();
  uint64_t v27 = v18;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v17, v14);
LABEL_8:
    uint64_t v44 = v61;
    uint64_t v41 = swift_checkMetadataState();
    uint64_t v45 = v58;
    *uint64_t v58 = v54;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, uint64_t))(v59 + 48))(v45, v41);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v44, 0, 1, v41);
  }
  id v35 = v55;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v55, v17, v13);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v35, v13);
  long long v36 = v52;
  char v37 = swift_dynamicCast();
  uint64_t v38 = v53;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56);
  if ((v37 & 1) == 0)
  {
    v39(v36, 1, 1, v6);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v35, v13);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v36, v48);
    goto LABEL_8;
  }
  v39(v36, 0, 1, v6);
  long long v40 = v49;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v49, v36, v6);
  uint64_t v41 = swift_checkMetadataState();
  uint64_t v42 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v43 = v58;
  (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(v58, v40, v6);
  *(uint64_t *)((char *)v43 + v42) = v54;
  swift_storeEnumTagMultiPayload();
  uint64_t v44 = v61;
  (*(void (**)(uint64_t *, uint64_t))(v59 + 48))(v43, v41);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v6);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v55, v13);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v44, 0, 1, v41);
}

BOOL sub_22896B1E4(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 32);
  uint64_t v5 = swift_checkMetadataState();
  uint64_t v6 = v4(v5, v3);
  LOBYTE(a2) = sub_2289BC444(v6, v7, a2);
  swift_bridgeObjectRelease();
  return (a2 & 1) == 0;
}

uint64_t sub_22896B304@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for ContentDataSource();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (void *)((char *)v24 - v8);
  uint64_t v10 = (char *)*a1;
  uint64_t v11 = swift_dynamicCastClass();
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = swift_checkMetadataState();
    *uint64_t v9 = v12;
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v15 = v10;
    v14(v9, v13, v6);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a3, 0, 1, v13);
  }
  else
  {
    v24[3] = type metadata accessor for MAsset();
    v24[0] = v10;
    uint64_t v17 = *(void *)&v10[OBJC_IVAR____TtC14BookFoundation9MResource_id];
    unint64_t v18 = *(void *)&v10[OBJC_IVAR____TtC14BookFoundation9MResource_id + 8];
    uint64_t v19 = a2 + OBJC_IVAR____TtC14BookFoundation9MResource_id;
    uint64_t v20 = *(void *)(a2 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
    unint64_t v21 = *(void *)(v19 + 8);
    uint64_t v22 = v10;
    uint64_t v23 = swift_checkMetadataState();
    sub_22896A414((uint64_t)v24, v17, v18, v20, v21, v23, a3);
    return sub_2289559D0((uint64_t)v24);
  }
}

uint64_t sub_22896B548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v51 = a5;
  uint64_t v49 = a2;
  uint64_t v53 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v47 = v8;
  uint64_t v50 = AssociatedTypeWitness;
  swift_getAssociatedTypeWitness();
  uint64_t v46 = type metadata accessor for ContentDataSource();
  MEMORY[0x270FA5388](v46);
  uint64_t v45 = (char *)&AssociatedConformanceWitness - v10;
  uint64_t v11 = sub_2289DF130();
  uint64_t v42 = *(void *)(v11 - 8);
  uint64_t v43 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&AssociatedConformanceWitness - v12;
  uint64_t v44 = *(void *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v48 = a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  unint64_t v18 = (char *)&AssociatedConformanceWitness - v17;
  uint64_t v19 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v16);
  unint64_t v21 = (char *)&AssociatedConformanceWitness - v20;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v22(v18, v53, v14);
  char v23 = swift_dynamicCast();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  if (v23)
  {
    v24(v13, 0, 1, v9);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v13, v9);
    uint64_t v25 = swift_checkMetadataState();
    unint64_t v26 = v45;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v45, v21, v9);
    swift_storeEnumTagMultiPayload();
    uint64_t v27 = v51;
    (*(void (**)(char *, uint64_t))(v47 + 48))(v26, v25);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v9);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v27, 0, 1, v25);
  }
  else
  {
    v24(v13, 1, 1, v9);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v43);
    v52[3] = v14;
    unint64_t v29 = sub_22896EC88(v52);
    v22((char *)v29, v53, v14);
    uint64_t v30 = swift_getAssociatedConformanceWitness();
    uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)(v30 + 8) + 32))(v14);
    unint64_t v33 = v32;
    uint64_t v34 = swift_getAssociatedConformanceWitness();
    id v35 = *(uint64_t (**)(uint64_t, uint64_t))(v34 + 32);
    uint64_t v36 = swift_checkMetadataState();
    uint64_t v37 = v35(v36, v34);
    unint64_t v39 = v38;
    uint64_t v40 = swift_checkMetadataState();
    sub_22896A414((uint64_t)v52, v31, v33, v37, v39, v40, v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_2289559D0((uint64_t)v52);
  }
}

uint64_t sub_22896BAB0(void *a1)
{
  return sub_22896BAF8(a1, (uint64_t (*)(uint64_t))sub_2289D4810);
}

uint64_t sub_22896BAC8(void *a1)
{
  return sub_22896BAF8(a1, (uint64_t (*)(uint64_t))sub_2289D4828);
}

uint64_t sub_22896BAE0(void *a1)
{
  return sub_22896BAF8(a1, (uint64_t (*)(uint64_t))sub_2289D4840);
}

uint64_t sub_22896BAF8(void *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = sub_22898B564();
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = sub_2289DEBC0();
    if (*(void *)(v6 + 16))
    {
      sub_2289D7094(v7, v8);
      if (v9)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v10 = swift_bridgeObjectRelease();
        uint64_t v11 = a2(v10);
        swift_release();
        return v11;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (qword_268283E70 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_2289DEA10();
  sub_228952BF4(v13, (uint64_t)qword_268284188);
  id v14 = a1;
  uint64_t v15 = sub_2289DE9F0();
  os_log_type_t v16 = sub_2289DF0A0();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v23 = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v19 = sub_2289DEBC0();
    sub_22897ACBC(v19, v20, &v23);
    sub_2289DF150();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    unint64_t v21 = sub_22898C79C(ObjectType);
    sub_22897ACBC(v21, v22, &v23);
    sub_2289DF150();
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    MEMORY[0x22A6A29E0](v18, -1, -1);
    MEMORY[0x22A6A29E0](v17, -1, -1);
  }
  else
  {
  }
  return 0;
}

void *sub_22896BD6C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_228952BB0(&qword_268283FE0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_22896D750(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_22896BE90(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  sub_228952BB0(&qword_2682842C0);
  uint64_t v10 = *(void *)(sub_2289DE6C0() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = sub_2289DF330();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_2289DE6C0() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_22896D860(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

void *sub_22896C0F8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_228952BB0(&qword_268284248);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22896D9B8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_22896C208(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_228952BB0(&qword_2682842F0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_22896E98C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_22896C32C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_228952BB0(&qword_2682842A8);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_22896DAAC(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_22896C428(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_22896C608(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_22896C448(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_22896CB04(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_22896C468(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_22896CE14(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_22896C488(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_22896D5B0(a1, a2, a3, (void *)*v3, &qword_2682842E0, &qword_2682842E8);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_22896C4B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_22896CFBC(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_22896C4D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_22896D128(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_22896C4F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_22896D294(a1, a2, a3, (void *)*v3, &qword_268284288, &qword_268284290);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_22896C528(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_22896D294(a1, a2, a3, (void *)*v3, &qword_268284298, &qword_2682842A0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_22896C558(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_22896D5B0(a1, a2, a3, (void *)*v3, &qword_268284278, &qword_268284280);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_22896C588(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_22896D5B0(a1, a2, a3, (void *)*v3, &qword_2682842B0, &qword_2682842B8);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_22896C5B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_22896D424(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_22896C5D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_22896D5B0(a1, a2, a3, (void *)*v3, &qword_268284258, &qword_268284260);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_22896C608(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_228952BB0(&qword_268284248);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22896C774(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  sub_228952BB0(&qword_2682842C0);
  uint64_t v10 = *(void *)(sub_2289DE6C0() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_2289DE6C0() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  unint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22896C9B4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_228952BB0(&qword_2682842C8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22896CB04(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_228952BB0((uint64_t *)&unk_26AECF7C8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22896CC70(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_228952BB0(&qword_2682842F0);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_228952BB0(&qword_268284150);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22896CE14(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_228952BB0(&qword_268284308);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_228952BB0(&qword_268284310);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22896CFBC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_228952BB0(&qword_2682842D8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22896D128(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_228952BB0(&qword_2682842D0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22896D294(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_228952BB0(a5);
    unint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    unint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    sub_228952BB0(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22896D424(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_228952BB0(&qword_268284268);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_228952BB0(&qword_268284270);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22896D5B0(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_228952BB0(a5);
    unint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
  }
  else
  {
    unint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v15 = v13 + 4;
  unint64_t v16 = a4 + 4;
  size_t v17 = 3 * v11;
  if (a1)
  {
    if (v13 != a4 || v15 >= &v16[v17]) {
      memmove(v13 + 4, a4 + 4, v17 * 8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= &v15[v17] || v15 >= &v16[v17])
  {
    sub_228952BB0(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22896D750(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_228952BB0(&qword_268284240);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22896D860(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_2289DE6C0() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22896D9B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

char *sub_22896DAAC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22896DB94(uint64_t result, char a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = result;
    int64_t v7 = (void *)swift_bridgeObjectRetain();
    uint64_t v9 = v7[4];
    uint64_t v8 = v7[5];
    uint64_t v10 = (void *)v7[6];
    unint64_t v11 = (void *)*a3;
    swift_bridgeObjectRetain();
    id v48 = v10;
    unint64_t v13 = sub_2289D7094(v9, v8);
    uint64_t v14 = v11[2];
    BOOL v15 = (v12 & 1) == 0;
    uint64_t v16 = v14 + v15;
    if (__OFADD__(v14, v15))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    char v17 = v12;
    if (v11[3] < v16)
    {
      sub_228996C14(v16, a2 & 1);
      unint64_t v18 = sub_2289D7094(v9, v8);
      if ((v17 & 1) != (v19 & 1))
      {
LABEL_27:
        uint64_t result = sub_2289DF500();
        __break(1u);
        return result;
      }
      unint64_t v13 = v18;
      uint64_t v20 = (void *)*a3;
      if ((v17 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_9:
      id v21 = *(id *)(v20[7] + 8 * v13);
      swift_bridgeObjectRelease();

      uint64_t v22 = v20[7];
      *(void *)(v22 + 8 * v13) = v21;
      uint64_t v23 = v3 - 1;
      if (v3 == 1) {
        return swift_bridgeObjectRelease();
      }
LABEL_16:
      for (unint64_t i = (void **)(v6 + 72); ; i += 3)
      {
        uint64_t v33 = (uint64_t)*(i - 2);
        uint64_t v32 = (uint64_t)*(i - 1);
        uint64_t v34 = *i;
        id v35 = (void *)*a3;
        swift_bridgeObjectRetain();
        id v36 = v34;
        unint64_t v37 = sub_2289D7094(v33, v32);
        uint64_t v39 = v35[2];
        BOOL v40 = (v38 & 1) == 0;
        BOOL v26 = __OFADD__(v39, v40);
        uint64_t v41 = v39 + v40;
        if (v26) {
          break;
        }
        char v42 = v38;
        if (v35[3] < v41)
        {
          sub_228996C14(v41, 1);
          unint64_t v37 = sub_2289D7094(v33, v32);
          if ((v42 & 1) != (v43 & 1)) {
            goto LABEL_27;
          }
        }
        uint64_t v44 = (void *)*a3;
        if (v42)
        {
          uint64_t v29 = 8 * v37;
          id v30 = *(id *)(v44[7] + 8 * v37);
          swift_bridgeObjectRelease();

          uint64_t v31 = v44[7];
          *(void *)(v31 + v29) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          uint64_t v45 = (uint64_t *)(v44[6] + 16 * v37);
          *uint64_t v45 = v33;
          v45[1] = v32;
          *(void *)(v44[7] + 8 * v37) = v36;
          uint64_t v46 = v44[2];
          BOOL v26 = __OFADD__(v46, 1);
          uint64_t v47 = v46 + 1;
          if (v26) {
            goto LABEL_26;
          }
          v44[2] = v47;
        }
        if (!--v23) {
          return swift_bridgeObjectRelease();
        }
      }
      goto LABEL_25;
    }
    if (a2)
    {
      uint64_t v20 = (void *)*a3;
      if (v12) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_228998520();
      uint64_t v20 = (void *)*a3;
      if (v17) {
        goto LABEL_9;
      }
    }
LABEL_12:
    v20[(v13 >> 6) + 8] |= 1 << v13;
    uint64_t v24 = (uint64_t *)(v20[6] + 16 * v13);
    *uint64_t v24 = v9;
    v24[1] = v8;
    *(void *)(v20[7] + 8 * v13) = v48;
    uint64_t v25 = v20[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v20[2] = v27;
    uint64_t v23 = v3 - 1;
    if (v3 == 1) {
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_22896DE58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2289682F0(a1, *(void *)(v2 + 32), a2);
}

uint64_t sub_22896DE80()
{
  return 16;
}

__n128 sub_22896DE8C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22896DE9C()
{
  return 16;
}

__n128 sub_22896DEA8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22896DEB4@<X0>(uint64_t a1@<X8>)
{
  return sub_22896DEFC(MSeries.itemCountForDisplay.getter, a1);
}

uint64_t sub_22896DECC()
{
  return 16;
}

__n128 sub_22896DED8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22896DEE4@<X0>(uint64_t a1@<X8>)
{
  return sub_22896DEFC(MSeries.itemMinimumCountForDisplay.getter, a1);
}

uint64_t sub_22896DEFC@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_22896DF34()
{
  return 16;
}

__n128 sub_22896DF40(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

BOOL sub_22896DF4C()
{
  return sub_2289697A0();
}

uint64_t sub_22896DF6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2289698DC(a1, a2);
}

uint64_t sub_22896DF88(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_22896DFD0@<D0>(uint64_t a1@<X8>)
{
  sub_228969AA8((uint64_t)&v4);
  char v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_22896E014()
{
  return 16;
}

__n128 sub_22896E020(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22896E030()
{
  return 16;
}

__n128 sub_22896E03C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22896E048@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MSeries.assetsResourceSet.getter();
  *a1 = result;
  return result;
}

uint64_t sub_22896E074()
{
  return 16;
}

__n128 sub_22896E080(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22896E08C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 40);
  uint64_t v2 = *(void *)(*(void *)a1 + 48);
  *a2 = v3;
  a2[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22896E09C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 48) = v2;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_22896E0E0()
{
  return 16;
}

__n128 sub_22896E0EC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22896E0F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MSeries.currentSort.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_22896E124()
{
  return 16;
}

__n128 sub_22896E130(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22896E140()
{
  return 16;
}

__n128 sub_22896E14C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22896E15C()
{
  return 16;
}

__n128 sub_22896E168(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_22896E174()
{
  return sel_isExplicit;
}

id sub_22896E180@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_isExplicit);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_22896E1B4()
{
  return 16;
}

__n128 sub_22896E1C0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22896E1D0()
{
  return 16;
}

__n128 sub_22896E1DC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_22896E1EC()
{
  unint64_t result = qword_268284238;
  if (!qword_268284238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284238);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for SeriesError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SeriesError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for SeriesError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for SeriesError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SeriesError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t sub_22896E394(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_22896E3AC(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SeriesError()
{
  return &type metadata for SeriesError;
}

unsigned char *storeEnumTagSinglePayload for SeriesType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22896E4A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SeriesType()
{
  return &type metadata for SeriesType;
}

uint64_t sub_22896E4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MappedSeriesInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for MappedSeriesInfo(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MappedSeriesInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MappedSeriesInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MappedSeriesInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MappedSeriesInfo()
{
  return &type metadata for MappedSeriesInfo;
}

uint64_t dispatch thunk of SeriesInfo.seriesType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SeriesInfo.contentKind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SeriesInfo.additionalStoreAssetsForEnrichment.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

unint64_t sub_22896E6A0()
{
  unint64_t result = qword_268284250;
  if (!qword_268284250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284250);
  }
  return result;
}

uint64_t sub_22896E6F4(uint64_t a1, void *a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a1 + 40;
    uint64_t v33 = -(uint64_t)v2;
    uint64_t v32 = MEMORY[0x263F8EE78];
    uint64_t v30 = a1 + 40;
    unint64_t v31 = *(void *)(a1 + 16);
    while (1)
    {
      if (v4 <= v2) {
        unint64_t v6 = v2;
      }
      else {
        unint64_t v6 = v4;
      }
      uint64_t v34 = -(uint64_t)v6;
      for (unint64_t i = (uint64_t *)(v5 + 16 * v4++); ; i += 2)
      {
        if (v34 + v4 == 1)
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          uint64_t result = sub_2289DF500();
          __break(1u);
          return result;
        }
        uint64_t v9 = *(i - 1);
        uint64_t v8 = *i;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v11 = (void *)*a2;
        id v35 = (void *)*a2;
        *a2 = 0x8000000000000000;
        unint64_t v13 = sub_2289D7094(v9, v8);
        uint64_t v14 = v11[2];
        BOOL v15 = (v12 & 1) == 0;
        uint64_t v16 = v14 + v15;
        if (__OFADD__(v14, v15)) {
          goto LABEL_28;
        }
        char v17 = v12;
        if (v11[3] < v16) {
          break;
        }
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v20 = v35;
          if ((v12 & 1) == 0) {
            goto LABEL_18;
          }
        }
        else
        {
          sub_22899852C();
          uint64_t v20 = v35;
          if ((v17 & 1) == 0) {
            goto LABEL_18;
          }
        }
LABEL_15:
        *(unsigned char *)(v20[7] + v13) = 1;
        *a2 = v20;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v4;
        if (v33 + v4 == 1) {
          return v32;
        }
      }
      sub_228996C20(v16, isUniquelyReferenced_nonNull_native);
      unint64_t v18 = sub_2289D7094(v9, v8);
      if ((v17 & 1) != (v19 & 1)) {
        goto LABEL_30;
      }
      unint64_t v13 = v18;
      uint64_t v20 = v35;
      if (v17) {
        goto LABEL_15;
      }
LABEL_18:
      v20[(v13 >> 6) + 8] |= 1 << v13;
      id v21 = (uint64_t *)(v20[6] + 16 * v13);
      *id v21 = v9;
      v21[1] = v8;
      *(unsigned char *)(v20[7] + v13) = 1;
      uint64_t v22 = v20[2];
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23) {
        goto LABEL_29;
      }
      v20[2] = v24;
      *a2 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v25 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22896C428(0, *(void *)(v32 + 16) + 1, 1);
        uint64_t v25 = v32;
      }
      unint64_t v27 = *(void *)(v25 + 16);
      unint64_t v26 = *(void *)(v25 + 24);
      if (v27 >= v26 >> 1)
      {
        sub_22896C428(v26 > 1, v27 + 1, 1);
        uint64_t v25 = v32;
      }
      *(void *)(v25 + 16) = v27 + 1;
      uint64_t v32 = v25;
      uint64_t v28 = v25 + 16 * v27;
      *(void *)(v28 + 32) = v9;
      *(void *)(v28 + 40) = v8;
      uint64_t v5 = v30;
      unint64_t v2 = v31;
      if (!(v33 + v4)) {
        return v32;
      }
    }
  }
  return MEMORY[0x263F8EE78];
}

uint64_t sub_22896E98C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_228952BB0(&qword_268284150);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_22896EA9C@<X0>(uint64_t *a1@<X8>)
{
  return sub_22896A370(a1);
}

uint64_t sub_22896EABC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_228952BB0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_22896EB18()
{
  unint64_t result = qword_268284318;
  if (!qword_268284318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284318);
  }
  return result;
}

uint64_t sub_22896EB6C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22896B304(a1, *(void *)(v2 + 32), a2);
}

unint64_t sub_22896EB8C()
{
  unint64_t result = qword_268284328;
  if (!qword_268284328)
  {
    sub_2289550A8(&qword_268284320);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284328);
  }
  return result;
}

uint64_t sub_22896EBE8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_22896A8B8(a1, a2);
}

uint64_t sub_22896EC08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22896AA08(a1, a2);
}

uint64_t sub_22896EC24@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22896AAE0(a1, *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

BOOL sub_22896EC44(uint64_t a1)
{
  return sub_22896B1E4(a1, *(void *)(v1 + 32));
}

uint64_t sub_22896EC68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22896B548(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t *sub_22896EC88(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_22896ECF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22896EC68(a1, a2);
}

uint64_t LibraryBookInfo.commonInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2289618C0(v1, a1);
}

uint64_t LibraryBookInfo.commonInfo.setter(uint64_t a1)
{
  return sub_22896192C(a1, v1);
}

uint64_t (*LibraryBookInfo.commonInfo.modify())()
{
  return nullsub_1;
}

uint64_t LibraryBookInfo.seriesInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for LibraryBookInfo() + 20);

  return sub_228961A40(v3, a1);
}

uint64_t type metadata accessor for LibraryBookInfo()
{
  uint64_t result = qword_268284358;
  if (!qword_268284358) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t LibraryBookInfo.seriesInfo.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for LibraryBookInfo() + 20);

  return sub_228961AEC(a1, v3);
}

uint64_t (*LibraryBookInfo.seriesInfo.modify())()
{
  return nullsub_1;
}

uint64_t LibraryBookInfo.kind.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for LibraryBookInfo();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t LibraryBookInfo.type.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for LibraryBookInfo() + 28));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;

  return sub_22896EED8(v4, v5);
}

uint64_t sub_22896EED8(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t LibraryBookInfo.init(commonInfo:seriesInfo:kind:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  char v8 = *a3;
  uint64_t v9 = *a4;
  uint64_t v10 = a4[1];
  unint64_t v11 = (int *)type metadata accessor for LibraryBookInfo();
  uint64_t v12 = a5 + v11[5];
  *(void *)(v12 + 32) = 0;
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  sub_228961C84(a1, a5);
  uint64_t result = sub_228961AEC(a2, v12);
  *(unsigned char *)(a5 + v11[6]) = v8;
  uint64_t v14 = (void *)(a5 + v11[7]);
  *uint64_t v14 = v9;
  v14[1] = v10;
  return result;
}

uint64_t sub_22896EF84(uint64_t a1)
{
  uint64_t result = sub_22896F094(&qword_268284330);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_22896EFC8(uint64_t a1)
{
  uint64_t result = sub_22896F094(&qword_268284338);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_22896F00C(uint64_t a1)
{
  uint64_t result = sub_22896F094(&qword_268284340);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_22896F050(uint64_t a1)
{
  uint64_t result = sub_22896F094(&qword_268284348);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_22896F094(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LibraryBookInfo();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for LibraryBookInfo(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    uint64_t v9 = a2[7];
    a1[6] = a2[6];
    a1[7] = v9;
    uint64_t v10 = a2[9];
    a1[8] = a2[8];
    a1[9] = v10;
    a1[10] = a2[10];
    unint64_t v11 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    uint64_t v12 = v11[10];
    __dst = (char *)v4 + v12;
    uint64_t v84 = (char *)a2 + v12;
    uint64_t v13 = sub_2289DE880();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v83 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v83(v84, 1, v13))
    {
      uint64_t v15 = sub_228952BB0(&qword_2682841E0);
      memcpy(__dst, v84, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v84, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v17 = v11[11];
    unint64_t v18 = (void *)((char *)v4 + v17);
    char v19 = (void *)((char *)a2 + v17);
    uint64_t v20 = v19[1];
    *unint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = v11[12];
    uint64_t v22 = (char *)v4 + v21;
    BOOL v23 = (char *)a2 + v21;
    v22[8] = v23[8];
    *(void *)uint64_t v22 = *(void *)v23;
    uint64_t v24 = v11[13];
    uint64_t v25 = (void *)((char *)v4 + v24);
    unint64_t v26 = (void *)((char *)a2 + v24);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = v11[14];
    uint64_t v85 = (char *)v4 + v28;
    uint64_t v29 = (char *)a2 + v28;
    uint64_t v30 = sub_2289DE910();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __dsta = (void (**)(void *, const void *, uint64_t))v31;
    if (v32(v29, 1, v30))
    {
      uint64_t v33 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v85, v29, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v85, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v85, 0, 1, v30);
    }
    uint64_t v34 = v11[15];
    id v35 = (void *)((char *)v4 + v34);
    id v36 = (void *)((char *)a2 + v34);
    uint64_t v37 = v36[1];
    void *v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = v11[16];
    uint64_t v39 = (void *)((char *)v4 + v38);
    BOOL v40 = (void *)((char *)a2 + v38);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v41;
    *((unsigned char *)v4 + v11[17]) = *((unsigned char *)a2 + v11[17]);
    *(void *)((char *)v4 + v11[18]) = *(void *)((char *)a2 + v11[18]);
    *((unsigned char *)v4 + v11[19]) = *((unsigned char *)a2 + v11[19]);
    *((unsigned char *)v4 + v11[20]) = *((unsigned char *)a2 + v11[20]);
    *((unsigned char *)v4 + v11[21]) = *((unsigned char *)a2 + v11[21]);
    *((unsigned char *)v4 + v11[22]) = *((unsigned char *)a2 + v11[22]);
    *((unsigned char *)v4 + v11[23]) = *((unsigned char *)a2 + v11[23]);
    *((unsigned char *)v4 + v11[24]) = *((unsigned char *)a2 + v11[24]);
    *((unsigned char *)v4 + v11[25]) = *((unsigned char *)a2 + v11[25]);
    *((unsigned char *)v4 + v11[26]) = *((unsigned char *)a2 + v11[26]);
    *((unsigned char *)v4 + v11[27]) = *((unsigned char *)a2 + v11[27]);
    *((unsigned char *)v4 + v11[28]) = *((unsigned char *)a2 + v11[28]);
    *((unsigned char *)v4 + v11[29]) = *((unsigned char *)a2 + v11[29]);
    uint64_t v42 = v11[30];
    char v43 = (void *)((char *)v4 + v42);
    uint64_t v44 = (void *)((char *)a2 + v42);
    uint64_t v45 = v44[1];
    *char v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = v11[31];
    uint64_t v47 = (char *)v4 + v46;
    id v48 = (char *)a2 + v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32(v48, 1, v30))
    {
      uint64_t v49 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
      uint64_t v51 = __dsta;
      uint64_t v50 = a3;
    }
    else
    {
      uint64_t v51 = __dsta;
      __dsta[2](v47, v48, v30);
      ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v47, 0, 1, v30);
      uint64_t v50 = a3;
    }
    uint64_t v52 = v11[32];
    uint64_t v53 = (char *)v4 + v52;
    uint64_t v54 = (char *)a2 + v52;
    *(void *)uint64_t v53 = *(void *)v54;
    v53[8] = v54[8];
    *(void *)((char *)v4 + v11[33]) = *(void *)((char *)a2 + v11[33]);
    uint64_t v55 = v11[34];
    uint64_t v56 = (char *)v4 + v55;
    uint64_t v57 = (char *)a2 + v55;
    if (v32((char *)a2 + v55, 1, v30))
    {
      uint64_t v58 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
    }
    else
    {
      v51[2](v56, v57, v30);
      ((void (*)(char *, void, uint64_t, uint64_t))v51[7])(v56, 0, 1, v30);
    }
    uint64_t v59 = v11[35];
    int v60 = (void *)((char *)v4 + v59);
    uint64_t v61 = (void *)((char *)a2 + v59);
    uint64_t v62 = v61[1];
    *int v60 = *v61;
    v60[1] = v62;
    uint64_t v63 = v11[36];
    uint64_t v64 = (char *)v4 + v63;
    uint64_t v65 = (char *)a2 + v63;
    *(void *)(v64 + 13) = *(void *)(v65 + 13);
    *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
    uint64_t v66 = v11[37];
    unint64_t v67 = (char *)v4 + v66;
    unint64_t v68 = (char *)a2 + v66;
    v67[8] = v68[8];
    *(void *)unint64_t v67 = *(void *)v68;
    uint64_t v69 = v11[38];
    int v70 = (char *)v4 + v69;
    uint64_t v71 = (char *)a2 + v69;
    v70[4] = v71[4];
    *(_DWORD *)int v70 = *(_DWORD *)v71;
    uint64_t v72 = v50[5];
    unint64_t v73 = (char *)v4 + v72;
    unint64_t v74 = (char *)a2 + v72;
    uint64_t v75 = *(void *)((char *)a2 + v72 + 24);
    swift_bridgeObjectRetain();
    if (v75)
    {
      uint64_t v76 = *((void *)v74 + 4);
      *((void *)v73 + 3) = v75;
      *((void *)v73 + 4) = v76;
      (**(void (***)(char *, char *, uint64_t))(v75 - 8))(v73, v74, v75);
    }
    else
    {
      long long v77 = *((_OWORD *)v74 + 1);
      *(_OWORD *)unint64_t v73 = *(_OWORD *)v74;
      *((_OWORD *)v73 + 1) = v77;
      *((void *)v73 + 4) = *((void *)v74 + 4);
    }
    uint64_t v78 = v50[7];
    *((unsigned char *)v4 + v50[6]) = *((unsigned char *)a2 + v50[6]);
    uint64_t v79 = (void *)((char *)v4 + v78);
    uint64_t v80 = (void *)((char *)a2 + v78);
    uint64_t v81 = v80[1];
    if ((unint64_t)(v81 - 1) >= 2)
    {
      *uint64_t v79 = *v80;
      v79[1] = v81;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
    }
  }
  return v4;
}

uint64_t destroy for LibraryBookInfo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = a1 + v4[10];
  uint64_t v6 = sub_2289DE880();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + v4[14];
  uint64_t v9 = sub_2289DE910();
  uint64_t v10 = *(void *)(v9 - 8);
  unint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = a1 + v4[31];
  if (!v11(v12, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v13 = a1 + v4[34];
  if (!v11(v13, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = a1 + *(int *)(a2 + 20);
  if (*(void *)(v14 + 24)) {
    sub_2289559D0(v14);
  }
  uint64_t result = *(void *)(a1 + *(int *)(a2 + 28) + 8);
  if ((unint64_t)(result - 1) >= 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for LibraryBookInfo(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  uint64_t v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  uint64_t v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  a1[10] = a2[10];
  uint64_t v10 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v11 = v10[10];
  __dst = (char *)a1 + v11;
  uint64_t v82 = (char *)a2 + v11;
  uint64_t v12 = sub_2289DE880();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v81 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v81(v82, 1, v12))
  {
    uint64_t v14 = sub_228952BB0(&qword_2682841E0);
    memcpy(__dst, v82, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v82, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  uint64_t v15 = v10[11];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = v10[12];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = v10[13];
  BOOL v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  uint64_t v25 = v24[1];
  *BOOL v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = v10[14];
  uint64_t v83 = (char *)a1 + v26;
  uint64_t v27 = (char *)a2 + v26;
  uint64_t v28 = sub_2289DE910();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __dsta = (void (**)(void *, const void *, uint64_t))v29;
  if (v30(v27, 1, v28))
  {
    uint64_t v31 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v83, v27, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v83, v27, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v83, 0, 1, v28);
  }
  uint64_t v32 = v10[15];
  uint64_t v33 = (void *)((char *)a1 + v32);
  uint64_t v34 = (void *)((char *)a2 + v32);
  uint64_t v35 = v34[1];
  void *v33 = *v34;
  v33[1] = v35;
  uint64_t v36 = v10[16];
  uint64_t v37 = (void *)((char *)a1 + v36);
  uint64_t v38 = (void *)((char *)a2 + v36);
  uint64_t v39 = v38[1];
  *uint64_t v37 = *v38;
  v37[1] = v39;
  *((unsigned char *)a1 + v10[17]) = *((unsigned char *)a2 + v10[17]);
  *(void *)((char *)a1 + v10[18]) = *(void *)((char *)a2 + v10[18]);
  *((unsigned char *)a1 + v10[19]) = *((unsigned char *)a2 + v10[19]);
  *((unsigned char *)a1 + v10[20]) = *((unsigned char *)a2 + v10[20]);
  *((unsigned char *)a1 + v10[21]) = *((unsigned char *)a2 + v10[21]);
  *((unsigned char *)a1 + v10[22]) = *((unsigned char *)a2 + v10[22]);
  *((unsigned char *)a1 + v10[23]) = *((unsigned char *)a2 + v10[23]);
  *((unsigned char *)a1 + v10[24]) = *((unsigned char *)a2 + v10[24]);
  *((unsigned char *)a1 + v10[25]) = *((unsigned char *)a2 + v10[25]);
  *((unsigned char *)a1 + v10[26]) = *((unsigned char *)a2 + v10[26]);
  *((unsigned char *)a1 + v10[27]) = *((unsigned char *)a2 + v10[27]);
  *((unsigned char *)a1 + v10[28]) = *((unsigned char *)a2 + v10[28]);
  *((unsigned char *)a1 + v10[29]) = *((unsigned char *)a2 + v10[29]);
  uint64_t v40 = v10[30];
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  uint64_t v43 = v42[1];
  *uint64_t v41 = *v42;
  v41[1] = v43;
  uint64_t v44 = v10[31];
  uint64_t v45 = (char *)a1 + v44;
  uint64_t v46 = (char *)a2 + v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v30(v46, 1, v28))
  {
    uint64_t v47 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    uint64_t v49 = __dsta;
    id v48 = a3;
  }
  else
  {
    uint64_t v49 = __dsta;
    __dsta[2](v45, v46, v28);
    ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v45, 0, 1, v28);
    id v48 = a3;
  }
  uint64_t v50 = v10[32];
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  *(void *)uint64_t v51 = *(void *)v52;
  v51[8] = v52[8];
  *(void *)((char *)a1 + v10[33]) = *(void *)((char *)a2 + v10[33]);
  uint64_t v53 = v10[34];
  uint64_t v54 = (char *)a1 + v53;
  uint64_t v55 = (char *)a2 + v53;
  if (v30((char *)a2 + v53, 1, v28))
  {
    uint64_t v56 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    v49[2](v54, v55, v28);
    ((void (*)(char *, void, uint64_t, uint64_t))v49[7])(v54, 0, 1, v28);
  }
  uint64_t v57 = v10[35];
  uint64_t v58 = (void *)((char *)a1 + v57);
  uint64_t v59 = (void *)((char *)a2 + v57);
  uint64_t v60 = v59[1];
  *uint64_t v58 = *v59;
  v58[1] = v60;
  uint64_t v61 = v10[36];
  uint64_t v62 = (char *)a1 + v61;
  uint64_t v63 = (char *)a2 + v61;
  *(void *)(v62 + 13) = *(void *)(v63 + 13);
  *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
  uint64_t v64 = v10[37];
  uint64_t v65 = (char *)a1 + v64;
  uint64_t v66 = (char *)a2 + v64;
  v65[8] = v66[8];
  *(void *)uint64_t v65 = *(void *)v66;
  uint64_t v67 = v10[38];
  unint64_t v68 = (char *)a1 + v67;
  uint64_t v69 = (char *)a2 + v67;
  v68[4] = v69[4];
  *(_DWORD *)unint64_t v68 = *(_DWORD *)v69;
  uint64_t v70 = v48[5];
  uint64_t v71 = (char *)a1 + v70;
  uint64_t v72 = (char *)a2 + v70;
  uint64_t v73 = *(void *)((char *)a2 + v70 + 24);
  swift_bridgeObjectRetain();
  if (v73)
  {
    uint64_t v74 = *((void *)v72 + 4);
    *((void *)v71 + 3) = v73;
    *((void *)v71 + 4) = v74;
    (**(void (***)(char *, char *, uint64_t))(v73 - 8))(v71, v72, v73);
  }
  else
  {
    long long v75 = *((_OWORD *)v72 + 1);
    *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
    *((_OWORD *)v71 + 1) = v75;
    *((void *)v71 + 4) = *((void *)v72 + 4);
  }
  uint64_t v76 = v48[7];
  *((unsigned char *)a1 + v48[6]) = *((unsigned char *)a2 + v48[6]);
  long long v77 = (void *)((char *)a1 + v76);
  uint64_t v78 = (void *)((char *)a2 + v76);
  uint64_t v79 = v78[1];
  if ((unint64_t)(v79 - 1) >= 2)
  {
    *long long v77 = *v78;
    v77[1] = v79;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)long long v77 = *(_OWORD *)v78;
  }
  return a1;
}

void *assignWithCopy for LibraryBookInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v6 = v5[10];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2289DE880();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_228952BB0(&qword_2682841E0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[11];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = v5[12];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  uint64_t v22 = v5[13];
  BOOL v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  *BOOL v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = v5[14];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = sub_2289DE910();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
LABEL_12:
    uint64_t v33 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v26, v27, v28);
LABEL_13:
  uint64_t v34 = v5[15];
  uint64_t v35 = (void *)((char *)a1 + v34);
  uint64_t v36 = (void *)((char *)a2 + v34);
  void *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = v5[16];
  uint64_t v38 = (void *)((char *)a1 + v37);
  uint64_t v39 = (void *)((char *)a2 + v37);
  *uint64_t v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v5[17]) = *((unsigned char *)a2 + v5[17]);
  *(void *)((char *)a1 + v5[18]) = *(void *)((char *)a2 + v5[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v5[19]) = *((unsigned char *)a2 + v5[19]);
  *((unsigned char *)a1 + v5[20]) = *((unsigned char *)a2 + v5[20]);
  *((unsigned char *)a1 + v5[21]) = *((unsigned char *)a2 + v5[21]);
  *((unsigned char *)a1 + v5[22]) = *((unsigned char *)a2 + v5[22]);
  *((unsigned char *)a1 + v5[23]) = *((unsigned char *)a2 + v5[23]);
  *((unsigned char *)a1 + v5[24]) = *((unsigned char *)a2 + v5[24]);
  *((unsigned char *)a1 + v5[25]) = *((unsigned char *)a2 + v5[25]);
  *((unsigned char *)a1 + v5[26]) = *((unsigned char *)a2 + v5[26]);
  *((unsigned char *)a1 + v5[27]) = *((unsigned char *)a2 + v5[27]);
  *((unsigned char *)a1 + v5[28]) = *((unsigned char *)a2 + v5[28]);
  *((unsigned char *)a1 + v5[29]) = *((unsigned char *)a2 + v5[29]);
  uint64_t v40 = v5[30];
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  *uint64_t v41 = *v42;
  v41[1] = v42[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = v5[31];
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = (char *)a2 + v43;
  int v46 = v30((char *)a1 + v43, 1, v28);
  int v47 = v30(v45, 1, v28);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v44, v45, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v44, 0, 1, v28);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v44, v28);
LABEL_18:
    uint64_t v48 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v44, v45, v28);
LABEL_19:
  uint64_t v49 = v5[32];
  uint64_t v50 = (char *)a1 + v49;
  uint64_t v51 = (char *)a2 + v49;
  uint64_t v52 = *(void *)v51;
  v50[8] = v51[8];
  *(void *)uint64_t v50 = v52;
  *(void *)((char *)a1 + v5[33]) = *(void *)((char *)a2 + v5[33]);
  uint64_t v53 = v5[34];
  uint64_t v54 = (char *)a1 + v53;
  uint64_t v55 = (char *)a2 + v53;
  int v56 = v30((char *)a1 + v53, 1, v28);
  int v57 = v30(v55, 1, v28);
  if (v56)
  {
    uint64_t v58 = a3;
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v54, v55, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v58 = a3;
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v54, v28);
LABEL_24:
    uint64_t v59 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v54, v55, *(void *)(*(void *)(v59 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v54, v55, v28);
LABEL_25:
  uint64_t v60 = v5[35];
  uint64_t v61 = (void *)((char *)a1 + v60);
  uint64_t v62 = (void *)((char *)a2 + v60);
  *uint64_t v61 = *v62;
  v61[1] = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = v5[36];
  uint64_t v64 = (char *)a1 + v63;
  uint64_t v65 = (char *)a2 + v63;
  long long v66 = *(_OWORD *)v65;
  *(void *)(v64 + 13) = *(void *)(v65 + 13);
  *(_OWORD *)uint64_t v64 = v66;
  uint64_t v67 = v5[37];
  unint64_t v68 = (char *)a1 + v67;
  uint64_t v69 = (char *)a2 + v67;
  char v70 = v69[8];
  *(void *)unint64_t v68 = *(void *)v69;
  v68[8] = v70;
  uint64_t v71 = v5[38];
  uint64_t v72 = (char *)a1 + v71;
  uint64_t v73 = (char *)a2 + v71;
  char v74 = v73[4];
  *(_DWORD *)uint64_t v72 = *(_DWORD *)v73;
  v72[4] = v74;
  uint64_t v75 = v58[5];
  uint64_t v76 = (uint64_t)a1 + v75;
  long long v77 = (void *)((char *)a2 + v75);
  uint64_t v78 = *(void *)((char *)a2 + v75 + 24);
  if (*(void *)((char *)a1 + v75 + 24))
  {
    if (v78)
    {
      sub_228963660((uint64_t *)v76, v77);
      goto LABEL_32;
    }
    sub_2289559D0(v76);
  }
  else if (v78)
  {
    *(void *)(v76 + 24) = v78;
    *(void *)(v76 + 32) = v77[4];
    (**(void (***)(uint64_t, char *))(v78 - 8))(v76, (char *)v77);
    goto LABEL_32;
  }
  long long v79 = *(_OWORD *)v77;
  long long v80 = *((_OWORD *)v77 + 1);
  *(void *)(v76 + 32) = v77[4];
  *(_OWORD *)uint64_t v76 = v79;
  *(_OWORD *)(v76 + 16) = v80;
LABEL_32:
  *((unsigned char *)a1 + v58[6]) = *((unsigned char *)a2 + v58[6]);
  uint64_t v81 = v58[7];
  uint64_t v82 = (void *)((char *)a1 + v81);
  uint64_t v83 = (void *)((char *)a2 + v81);
  uint64_t v84 = *(void *)((char *)a1 + v81 + 8);
  unint64_t v85 = v83[1] - 1;
  if ((unint64_t)(v84 - 1) >= 2)
  {
    if (v85 >= 2)
    {
      *uint64_t v82 = *v83;
      v82[1] = v83[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_228970980((uint64_t)v82);
    goto LABEL_37;
  }
  if (v85 < 2)
  {
LABEL_37:
    *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
    return a1;
  }
  *uint64_t v82 = *v83;
  v82[1] = v83[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_228970980(uint64_t a1)
{
  uint64_t v2 = sub_228952BB0(&qword_268284350);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for LibraryBookInfo(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v6 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v7 = v6[10];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_2289DE880();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_228952BB0(&qword_2682841E0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)(a1 + v6[11]) = *(_OWORD *)(a2 + v6[11]);
  uint64_t v13 = v6[12];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(void *)uint64_t v14 = *(void *)v15;
  *(_OWORD *)(a1 + v6[13]) = *(_OWORD *)(a2 + v6[13]);
  uint64_t v16 = v6[14];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_2289DE910();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
  if (v21(v18, 1, v19))
  {
    uint64_t v22 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  *(_OWORD *)(a1 + v6[15]) = *(_OWORD *)(a2 + v6[15]);
  *(_OWORD *)(a1 + v6[16]) = *(_OWORD *)(a2 + v6[16]);
  *(unsigned char *)(a1 + v6[17]) = *(unsigned char *)(a2 + v6[17]);
  *(void *)(a1 + v6[18]) = *(void *)(a2 + v6[18]);
  *(unsigned char *)(a1 + v6[19]) = *(unsigned char *)(a2 + v6[19]);
  *(unsigned char *)(a1 + v6[20]) = *(unsigned char *)(a2 + v6[20]);
  *(unsigned char *)(a1 + v6[21]) = *(unsigned char *)(a2 + v6[21]);
  *(unsigned char *)(a1 + v6[22]) = *(unsigned char *)(a2 + v6[22]);
  *(unsigned char *)(a1 + v6[23]) = *(unsigned char *)(a2 + v6[23]);
  *(unsigned char *)(a1 + v6[24]) = *(unsigned char *)(a2 + v6[24]);
  *(unsigned char *)(a1 + v6[25]) = *(unsigned char *)(a2 + v6[25]);
  *(unsigned char *)(a1 + v6[26]) = *(unsigned char *)(a2 + v6[26]);
  *(unsigned char *)(a1 + v6[27]) = *(unsigned char *)(a2 + v6[27]);
  *(unsigned char *)(a1 + v6[28]) = *(unsigned char *)(a2 + v6[28]);
  *(unsigned char *)(a1 + v6[29]) = *(unsigned char *)(a2 + v6[29]);
  *(_OWORD *)(a1 + v6[30]) = *(_OWORD *)(a2 + v6[30]);
  uint64_t v23 = v6[31];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (const void *)(a2 + v23);
  if (v21((const void *)(a2 + v23), 1, v19))
  {
    uint64_t v26 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v24, v25, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v24, 0, 1, v19);
  }
  uint64_t v27 = v6[32];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  *(void *)uint64_t v28 = *(void *)v29;
  *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
  *(void *)(a1 + v6[33]) = *(void *)(a2 + v6[33]);
  uint64_t v30 = v6[34];
  int v31 = (void *)(a1 + v30);
  int v32 = (const void *)(a2 + v30);
  if (v21((const void *)(a2 + v30), 1, v19))
  {
    uint64_t v33 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v31, v32, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v31, 0, 1, v19);
  }
  *(_OWORD *)(a1 + v6[35]) = *(_OWORD *)(a2 + v6[35]);
  uint64_t v34 = v6[36];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(void *)(v35 + 13) = *(void *)(v36 + 13);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  uint64_t v37 = v6[37];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  *(void *)uint64_t v38 = *(void *)v39;
  *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
  uint64_t v40 = v6[38];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = a2 + v40;
  *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
  *(unsigned char *)(v41 + 4) = *(unsigned char *)(v42 + 4);
  uint64_t v43 = a3[5];
  uint64_t v44 = a3[6];
  uint64_t v45 = a1 + v43;
  uint64_t v46 = a2 + v43;
  long long v47 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v47;
  *(void *)(v45 + 32) = *(void *)(v46 + 32);
  *(unsigned char *)(a1 + v44) = *(unsigned char *)(a2 + v44);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

void *assignWithTake for LibraryBookInfo(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  a1[3] = a2[3];
  a1[4] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  a1[5] = a2[5];
  a1[6] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[10];
  a1[9] = a2[9];
  a1[10] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v11 = v10[10];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_2289DE880();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    uint64_t v19 = sub_228952BB0(&qword_2682841E0);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_7:
  uint64_t v20 = v10[11];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = v10[12];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  uint64_t v28 = v10[13];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *uint64_t v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = v10[14];
  uint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = sub_2289DE910();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v36);
LABEL_12:
    uint64_t v41 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v34, v35, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v34, v35, v36);
LABEL_13:
  uint64_t v42 = v10[15];
  uint64_t v43 = (void *)((char *)a1 + v42);
  uint64_t v44 = (void *)((char *)a2 + v42);
  uint64_t v46 = *v44;
  uint64_t v45 = v44[1];
  *uint64_t v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease();
  uint64_t v47 = v10[16];
  uint64_t v48 = (void *)((char *)a1 + v47);
  uint64_t v49 = (void *)((char *)a2 + v47);
  uint64_t v51 = *v49;
  uint64_t v50 = v49[1];
  *uint64_t v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v10[17]) = *((unsigned char *)a2 + v10[17]);
  *(void *)((char *)a1 + v10[18]) = *(void *)((char *)a2 + v10[18]);
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v10[19]) = *((unsigned char *)a2 + v10[19]);
  *((unsigned char *)a1 + v10[20]) = *((unsigned char *)a2 + v10[20]);
  *((unsigned char *)a1 + v10[21]) = *((unsigned char *)a2 + v10[21]);
  *((unsigned char *)a1 + v10[22]) = *((unsigned char *)a2 + v10[22]);
  *((unsigned char *)a1 + v10[23]) = *((unsigned char *)a2 + v10[23]);
  *((unsigned char *)a1 + v10[24]) = *((unsigned char *)a2 + v10[24]);
  *((unsigned char *)a1 + v10[25]) = *((unsigned char *)a2 + v10[25]);
  *((unsigned char *)a1 + v10[26]) = *((unsigned char *)a2 + v10[26]);
  *((unsigned char *)a1 + v10[27]) = *((unsigned char *)a2 + v10[27]);
  *((unsigned char *)a1 + v10[28]) = *((unsigned char *)a2 + v10[28]);
  *((unsigned char *)a1 + v10[29]) = *((unsigned char *)a2 + v10[29]);
  uint64_t v52 = v10[30];
  uint64_t v53 = (void *)((char *)a1 + v52);
  uint64_t v54 = (void *)((char *)a2 + v52);
  uint64_t v56 = *v54;
  uint64_t v55 = v54[1];
  *uint64_t v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease();
  uint64_t v57 = v10[31];
  uint64_t v58 = (char *)a1 + v57;
  uint64_t v59 = (char *)a2 + v57;
  int v60 = v38((char *)a1 + v57, 1, v36);
  int v61 = v38(v59, 1, v36);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v58, v59, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v58, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v58, v36);
LABEL_18:
    uint64_t v62 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v58, v59, v36);
LABEL_19:
  uint64_t v63 = v10[32];
  uint64_t v64 = (char *)a1 + v63;
  uint64_t v65 = (char *)a2 + v63;
  *(void *)uint64_t v64 = *(void *)v65;
  v64[8] = v65[8];
  *(void *)((char *)a1 + v10[33]) = *(void *)((char *)a2 + v10[33]);
  uint64_t v66 = v10[34];
  uint64_t v67 = (char *)a1 + v66;
  unint64_t v68 = (char *)a2 + v66;
  int v69 = v38((char *)a1 + v66, 1, v36);
  int v70 = v38(v68, 1, v36);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v67, v68, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v67, 0, 1, v36);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v67, v36);
LABEL_24:
    uint64_t v71 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v67, v68, v36);
LABEL_25:
  uint64_t v72 = v10[35];
  uint64_t v73 = (void *)((char *)a1 + v72);
  char v74 = (void *)((char *)a2 + v72);
  uint64_t v76 = *v74;
  uint64_t v75 = v74[1];
  *uint64_t v73 = v76;
  v73[1] = v75;
  swift_bridgeObjectRelease();
  uint64_t v77 = v10[36];
  uint64_t v78 = (char *)a1 + v77;
  long long v79 = (char *)a2 + v77;
  *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
  *(void *)(v78 + 13) = *(void *)(v79 + 13);
  uint64_t v80 = v10[37];
  uint64_t v81 = (char *)a1 + v80;
  uint64_t v82 = (char *)a2 + v80;
  v81[8] = v82[8];
  *(void *)uint64_t v81 = *(void *)v82;
  uint64_t v83 = v10[38];
  uint64_t v84 = (char *)a1 + v83;
  unint64_t v85 = (char *)a2 + v83;
  v84[4] = v85[4];
  *(_DWORD *)uint64_t v84 = *(_DWORD *)v85;
  uint64_t v86 = a3[5];
  uint64_t v87 = (uint64_t)a1 + v86;
  long long v88 = (char *)a2 + v86;
  if (*(void *)((char *)a1 + v86 + 24)) {
    sub_2289559D0(v87);
  }
  long long v89 = *((_OWORD *)v88 + 1);
  *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
  *(_OWORD *)(v87 + 16) = v89;
  *(void *)(v87 + 32) = *((void *)v88 + 4);
  uint64_t v90 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  id v91 = (void *)((char *)a1 + v90);
  uint64_t v92 = (void *)((char *)a2 + v90);
  if ((unint64_t)(*(void *)((char *)a1 + v90 + 8) - 1) >= 2)
  {
    uint64_t v93 = v92[1];
    if ((unint64_t)(v93 - 1) >= 2)
    {
      *id v91 = *v92;
      v91[1] = v93;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_228970980((uint64_t)v91);
  }
  *(_OWORD *)id v91 = *(_OWORD *)v92;
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryBookInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228971698);
}

uint64_t sub_228971698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for LibraryBookInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22897177C);
}

uint64_t sub_22897177C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = a2;
  }
  return result;
}

uint64_t sub_22897183C()
{
  uint64_t result = type metadata accessor for CommonLibraryAssetInfo();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t destroy for LibraryBookInfo.BookType(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *_s14BookFoundation15LibraryBookInfoV8BookTypeOwCP_0(void *a1, void *a2)
{
  unint64_t v3 = a2[1];
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = a2[1];
  }
  if ((int)v4 - 1 < 0)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

void *assignWithCopy for LibraryBookInfo.BookType(void *a1, void *a2)
{
  LODWORD(v4) = -1;
  if (a1[1] >= 0xFFFFFFFFuLL) {
    LODWORD(v5) = -1;
  }
  else {
    uint64_t v5 = a1[1];
  }
  int v6 = v5 - 1;
  if (a2[1] < 0xFFFFFFFFuLL) {
    uint64_t v4 = a2[1];
  }
  int v7 = v4 - 1;
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if ((v7 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithTake for LibraryBookInfo.BookType(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if (v5 - 1 < 0)
  {
    unint64_t v6 = a2[1];
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF) {
      uint64_t v7 = a2[1];
    }
    if ((int)v7 - 1 < 0)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryBookInfo.BookType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  unsigned int v5 = v4 + 1;
  unsigned int v6 = v4 - 1;
  if (v5 >= 3) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LibraryBookInfo.BookType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_228971B30(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *sub_228971B54(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *unint64_t result = a2 - 0x7FFFFFFF;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LibraryBookInfo.BookType()
{
  return &type metadata for LibraryBookInfo.BookType;
}

uint64_t MResourceSet.__allocating_init(with:config:)(uint64_t a1, char *a2)
{
  uint64_t v4 = swift_allocObject();
  MResourceSet.init(with:config:)(a1, a2);
  return v4;
}

uint64_t MResourceSet.init(with:config:)(uint64_t a1, char *a2)
{
  char v4 = *a2;
  uint64_t v5 = *((void *)a2 + 1);
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 1;
  *(void *)(v2 + 16) = a1;
  *(unsigned char *)(v2 + 24) = v4;
  *(void *)(v2 + 32) = v5;
  *(void *)(v2 + 40) = 0;
  sub_228971CBC();
  swift_bridgeObjectRetain();
  sub_2289B3B60(a1, MEMORY[0x263F8D310], (uint64_t)&v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v2 + 40) = v7;
  swift_bridgeObjectRelease();
  return v2;
}

unint64_t sub_228971CBC()
{
  unint64_t result = qword_268284380;
  if (!qword_268284380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284380);
  }
  return result;
}

uint64_t sub_228971D10()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_2289735EC(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_228971D5C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_228952BB0(&qword_268284000);
  sub_228971CBC();
  sub_2289B3B60(v1, v2, (uint64_t)&v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_228971E14()
{
  uint64_t v0 = sub_2289732E4();
  if (!v0) {
    return 0;
  }
  MEMORY[0x270FA5388](v0);
  sub_228952BB0(&qword_268284388);
  sub_228974030((unint64_t *)&unk_268284390, &qword_268284388);
  uint64_t v1 = sub_2289DED70();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_228971EF0()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](sub_228971F10, 0, 0);
}

uint64_t sub_228971F10()
{
  id v1 = objc_msgSend(self, sel_defaultBag);
  v0[3] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[4] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_228972020;
  unint64_t v3 = (void *)v0[2];
  v2[25] = 0;
  v2[26] = v3;
  v2[23] = v1;
  v2[24] = &unk_2682843A0;
  v2[27] = *v3;
  return MEMORY[0x270FA2498](sub_2289724B4, 0, 0);
}

uint64_t sub_228972020()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_22897215C, 0, 0);
  }
  else
  {

    unint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_22897215C()
{
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_2289721C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(unsigned char *)(a1 + 56);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  uint64_t v5 = *(void *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 32) = v4;
  *(_OWORD *)(v1 + 48) = v6;
  *(void *)(v1 + 64) = v2;
  *(unsigned char *)(v1 + 72) = v3;
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(a1 + 64);
  *(void *)(v1 + 96) = v5;
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 104) = v7;
  *long long v7 = v1;
  v7[1] = sub_228972284;
  return MCatalogRequest.fetch()();
}

uint64_t sub_228972284(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_228951170;
  }
  else
  {
    *(void *)(v4 + 120) = a1;
    uint64_t v5 = sub_2289723AC;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_2289723AC()
{
  uint64_t v1 = *(void **)(v0 + 120);
  id v2 = objc_msgSend(v1, sel_responseDictionary);

  if (v2)
  {
    uint64_t v3 = sub_2289DEA80();
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

uint64_t sub_228972468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[25] = a3;
  v4[26] = v3;
  v4[23] = a1;
  v4[24] = a2;
  v4[27] = *v3;
  return MEMORY[0x270FA2498](sub_2289724B4, 0, 0);
}

uint64_t sub_2289724B4()
{
  uint64_t v66 = v0;
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_2289732E4();
    swift_bridgeObjectRelease();
    if (v4)
    {
      uint64_t v5 = *(void *)(v0 + 208);
      uint64_t v6 = *(void **)(v0 + 184);
      unint64_t v7 = sub_22898A910((uint64_t)&unk_26DD0A428);
      LOBYTE(v57) = *(unsigned char *)(v5 + 24);
      sub_2289B57AC(0, 0, 0, v7, v2, v3, v6, (char *)&v57, (uint64_t)&v46);
      uint64_t v17 = *(void *)(v0 + 208);
      int v18 = *(int **)(v0 + 192);
      uint64_t v19 = v46;
      uint64_t v20 = v47;
      *(void *)(v0 + 224) = v46;
      *(void *)(v0 + 232) = v20;
      uint64_t v21 = v48;
      uint64_t v22 = v49;
      *(void *)(v0 + 240) = v48;
      *(void *)(v0 + 248) = v22;
      uint64_t v23 = v50;
      char v24 = v51;
      uint64_t v25 = v52;
      uint64_t v26 = v53;
      *(void *)(v0 + 256) = v50;
      *(void *)(v0 + 264) = v26;
      *(void *)&long long v57 = v19;
      *((void *)&v57 + 1) = v20;
      uint64_t v58 = v21;
      uint64_t v59 = v22;
      int v60 = v23;
      char v61 = v24;
      uint64_t v62 = v25;
      uint64_t v63 = v26;
      uint64_t v27 = *(void **)(v17 + 32);
      v64[0] = *(unsigned char *)(v5 + 24);
      uint64_t v65 = v27;
      uint64_t v28 = self;
      id v29 = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v30 = v23;
      swift_bridgeObjectRetain();
      MCatalogRequest.init(with:config:bag:)(&v57, (uint64_t)v64, objc_msgSend(v28, sel_defaultBag), (uint64_t)&v46);
      uint64_t v31 = v46;
      uint64_t v32 = v47;
      *(void *)(v0 + 272) = v46;
      *(void *)(v0 + 280) = v32;
      uint64_t v33 = v48;
      uint64_t v34 = v49;
      *(void *)(v0 + 288) = v48;
      *(void *)(v0 + 296) = v34;
      uint64_t v35 = v50;
      uint64_t v36 = v51;
      *(void *)(v0 + 304) = v50;
      *(void *)(v0 + 312) = v36;
      uint64_t v37 = v52;
      char v38 = v53;
      uint64_t v39 = v54;
      uint64_t v40 = v55;
      *(void *)(v0 + 320) = v52;
      *(void *)(v0 + 328) = v40;
      uint64_t v41 = v56;
      *(void *)(v0 + 336) = v56;
      *(void *)(v0 + 16) = v31;
      *(void *)(v0 + 24) = v32;
      *(void *)(v0 + 32) = v33;
      *(void *)(v0 + 40) = v34;
      *(void *)(v0 + 48) = v35;
      *(void *)(v0 + 56) = v36;
      *(void *)(v0 + 64) = v37;
      *(unsigned char *)(v0 + 72) = v38;
      *(void *)(v0 + 80) = v39;
      *(void *)(v0 + 88) = v40;
      *(void *)(v0 + 96) = v41;
      uint64_t v45 = (uint64_t (*)(uint64_t))((char *)v18 + *v18);
      uint64_t v42 = (void *)swift_task_alloc();
      *(void *)(v0 + 344) = v42;
      *uint64_t v42 = v0;
      v42[1] = sub_22897294C;
      return v45(v0 + 16);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = sub_2289732E4();
  swift_bridgeObjectRelease();
  if (!v8)
  {
    if (qword_268283E80 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_2289DEA10();
    sub_228952BF4(v9, (uint64_t)qword_268284368);
    swift_retain_n();
    unint64_t v10 = sub_2289DE9F0();
    os_log_type_t v11 = sub_2289DF0A0();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v46 = v13;
      uint64_t v14 = *(void *)(v1 + 48);
      *(void *)(v0 + 136) = *(void *)(v1 + 40);
      *(void *)(v0 + 144) = v14;
      swift_bridgeObjectRetain();
      sub_228952BB0(&qword_2682843D0);
      uint64_t v15 = sub_2289DEBE0();
      *(void *)(v0 + 176) = sub_22897ACBC(v15, v16, &v46);
      sub_2289DF150();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22894E000, v10, v11, "Tried to fetchNext with empty resources for href: %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A6A29E0](v13, -1, -1);
      MEMORY[0x22A6A29E0](v12, -1, -1);
    }
    else
    {

      swift_release_n();
    }
  }
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  swift_bridgeObjectRelease();
  uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
  return v44();
}

uint64_t sub_22897294C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 352) = a1;
  *(void *)(v3 + 360) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_228972DC8;
  }
  else {
    uint64_t v4 = sub_228972A60;
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t sub_228972A60()
{
  uint64_t v1 = *(void *)(v0 + 352);
  if (v1)
  {
    *(unsigned char *)(v0 + 369) = 0;
    uint64_t v2 = sub_228952BB0(&qword_2682843E0);
    sub_228971CBC();
    sub_2289B3B60(v1, v2, v0 + 168);
    uint64_t v3 = *(void *)(v0 + 168);
    if (v3)
    {
      uint64_t v4 = *(void *)(v0 + 208);
      swift_retain();
      unint64_t v5 = sub_228973E28(v3, v4);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v6 = sub_228973448((uint64_t *)(v0 + 104));
      if (*v7) {
        sub_2289B4818(v5);
      }
      else {
        swift_bridgeObjectRelease();
      }
      v6((void *)(v0 + 104), 0);
    }
    uint64_t v12 = *(void *)(v0 + 352);
    int v18 = *(void **)(v0 + 336);
    uint64_t v20 = *(void **)(v0 + 320);
    uint64_t v22 = *(void **)(v0 + 280);
    char v24 = *(void **)(v0 + 272);
    uint64_t v13 = *(void **)(v0 + 256);
    uint64_t v14 = *(void *)(v0 + 208);
    *(unsigned char *)(v0 + 368) = 2;
    sub_2289B3B60(v12, MEMORY[0x263F8D310], v0 + 152);
    swift_bridgeObjectRelease();
    *(_OWORD *)(v14 + 40) = *(_OWORD *)(v0 + 152);
    swift_bridgeObjectRelease();
    uint64_t v15 = sub_2289732E4();
    uint64_t v16 = *(void *)(v14 + 56);
    *(void *)(v14 + 56) = v15;
    sub_228973854(v16);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    os_log_type_t v11 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v8 = *(void **)(v0 + 336);
    uint64_t v19 = *(void **)(v0 + 320);
    uint64_t v21 = *(void **)(v0 + 280);
    uint64_t v23 = *(void **)(v0 + 272);
    uint64_t v9 = *(void **)(v0 + 256);
    sub_228973FB0();
    swift_allocError();
    unsigned char *v10 = 6;
    swift_willThrow();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    os_log_type_t v11 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v11();
}

uint64_t sub_228972DC8()
{
  unint64_t v7 = (void *)v0[42];
  uint64_t v1 = (void *)v0[34];
  uint64_t v2 = (void *)v0[35];
  uint64_t v3 = (void *)v0[32];
  uint64_t v6 = (void *)v0[40];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_228972EDC()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](sub_228972EFC, 0, 0);
}

uint64_t sub_228972EFC()
{
  if (*(void *)(v0[2] + 48))
  {
    id v1 = objc_msgSend(self, sel_defaultBag);
    v0[3] = v1;
    uint64_t v2 = (void *)swift_task_alloc();
    v0[4] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_22897304C;
    uint64_t v3 = (void *)v0[2];
    v2[25] = 0;
    v2[26] = v3;
    v2[23] = v1;
    v2[24] = &unk_2682843A0;
    v2[27] = *v3;
    return MEMORY[0x270FA2498](sub_2289724B4, 0, 0);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_22897304C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_22897215C;
  }
  else
  {

    uint64_t v3 = sub_228972EFC;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_228973168()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_228973198(char *a1, char *a2)
{
  return sub_228966ACC(*a1, *a2);
}

uint64_t sub_2289731A4()
{
  return sub_2289DF590();
}

uint64_t sub_228973200()
{
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_228973240()
{
  return sub_2289DF590();
}

uint64_t sub_228973298@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_228973F64();
  *a1 = result;
  return result;
}

void sub_2289732C8(void *a1@<X8>)
{
  *a1 = *(void *)&aData_4[8 * *v1];
  a1[1] = 0xE400000000000000;
}

uint64_t sub_2289732E4()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = v1;
  if (v1 == 1)
  {
    uint64_t v2 = sub_228973344(v0);
    uint64_t v3 = *(void *)(v0 + 56);
    *(void *)(v0 + 56) = v2;
    swift_bridgeObjectRetain();
    sub_228973854(v3);
  }
  sub_228974004(v1);
  return v2;
}

uint64_t sub_228973344(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_228952BB0(&qword_2682843E0);
  sub_228971CBC();
  sub_2289B3B60(v2, v3, (uint64_t)&v7);
  uint64_t v4 = v7;
  if (v7)
  {
    swift_retain();
    uint64_t v5 = sub_228973E28(v4, a1);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v5;
}

uint64_t (*sub_228973448(uint64_t *a1))(void *a1, char a2)
{
  a1[1] = v1;
  *a1 = sub_2289732E4();
  return sub_228973490;
}

uint64_t sub_228973490(void *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *(void *)(v2 + 56);
  *(void *)(v2 + 56) = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_228973854(v3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return sub_228973854(v3);
  }
}

uint64_t sub_228973500@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  sub_228971CBC();
  sub_2289B3B60(v5, MEMORY[0x263F8D310], (uint64_t)&v12);
  if (v13 && (uint64_t v6 = static MResourceType.classType(for:)(v12, v13), swift_bridgeObjectRelease(), v6))
  {
    uint64_t v7 = *(void **)(a2 + 32);
    LOBYTE(v12) = *(unsigned char *)(a2 + 24);
    uint64_t v13 = (uint64_t)v7;
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t *))(v6 + 128);
    id v9 = v7;
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t result = v8(v10, &v12);
  }
  else
  {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t sub_2289735EC(uint64_t a1)
{
  uint64_t v2 = sub_228952BB0(&qword_2682843E0);
  sub_228971CBC();
  uint64_t v3 = sub_2289B3B60(a1, v2, (uint64_t)&v6);
  if (!v6) {
    return 0;
  }
  MEMORY[0x270FA5388](v3);
  type metadata accessor for MSparseResource();
  sub_228974030(&qword_2682843E8, &qword_2682843E0);
  uint64_t v4 = sub_2289DED70();
  swift_bridgeObjectRelease();
  return v4;
}

id sub_228973748@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id result = (id)swift_dynamicCastClass();
  id v5 = result;
  if (result) {
    id result = v3;
  }
  *a2 = v5;
  return result;
}

uint64_t sub_228973798@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  type metadata accessor for MSparseResource();
  uint64_t v4 = *(void **)(a1 + 32);
  v8[0] = *(unsigned char *)(a1 + 24);
  id v9 = v4;
  id v5 = v4;
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t result = sub_2289AEC50(v6, v8);
  *a2 = result;
  return result;
}

uint64_t MResourceSet.deinit()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_228973854(*(void *)(v0 + 56));
  return v0;
}

uint64_t sub_228973854(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t MResourceSet.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_228973854(*(void *)(v0 + 56));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MResourceSet()
{
  return self;
}

uint64_t method lookup function for MResourceSet(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MResourceSet);
}

uint64_t dispatch thunk of MResourceSet.__allocating_init(with:config:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of MResourceSet.sparseResources<A>()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MResourceSet.meta.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MResourceSet.resources<A>()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MResourceSet.fetchNext()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 200) + **(int **)(*(void *)v0 + 200));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_228974080;
  return v4();
}

uint64_t dispatch thunk of MResourceSet.fetchAll()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 216) + **(int **)(*(void *)v0 + 216));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_228973B58;
  return v4();
}

uint64_t sub_228973B58()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unsigned char *storeEnumTagSinglePayload for MResourceSet.Keys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228973D18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MResourceSet.Keys()
{
  return &type metadata for MResourceSet.Keys;
}

unint64_t sub_228973D54()
{
  unint64_t result = qword_2682843C8;
  if (!qword_2682843C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682843C8);
  }
  return result;
}

uint64_t sub_228973DA8()
{
  uint64_t v0 = sub_2289DEA10();
  sub_228961850(v0, qword_268284368);
  sub_228952BF4(v0, (uint64_t)qword_268284368);
  return sub_2289DEA00();
}

uint64_t sub_228973E28(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = *(void *)(a1 + 8 * i + 32);
      swift_bridgeObjectRetain();
      sub_228973500(&v10, a2, &v9);
      uint64_t v8 = swift_bridgeObjectRelease();
      if (v2)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v9)
      {
        MEMORY[0x22A6A19F0](v8);
        if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_2289DEE40();
        }
        sub_2289DEE80();
        sub_2289DEE30();
      }
    }
    swift_bridgeObjectRelease();
    return v11;
  }
  return result;
}

uint64_t sub_228973F64()
{
  unint64_t v0 = sub_2289DF3F0();
  swift_bridgeObjectRelease();
  if (v0 >= 4) {
    return 4;
  }
  else {
    return v0;
  }
}

unint64_t sub_228973FB0()
{
  unint64_t result = qword_2682843D8;
  if (!qword_2682843D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682843D8);
  }
  return result;
}

uint64_t sub_228974004(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_228974014@<X0>(uint64_t *a1@<X8>)
{
  return sub_228973798(*(void *)(v1 + 24), a1);
}

uint64_t sub_228974030(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_2289550A8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void NSBundle.path(forExactResource:ofType:)()
{
  sub_2289DF270();
  uint64_t v1 = (void *)sub_2289DEB90();
  swift_bridgeObjectRelease();
  sub_2289DF270();
  uint64_t v2 = (void *)sub_2289DEB90();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v0, sel_pathForResource_ofType_, v1, v2);

  if (v3)
  {
    sub_2289DEBC0();
  }
  else
  {
    __break(1u);
  }
}

uint64_t URL.init(object:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_228952BB0(&qword_2682841E0);
  MEMORY[0x270FA5388](v4 - 8);
  unsigned int v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      v11[0] = 0;
      v11[1] = 0;
      sub_2289DEBB0();
    }
  }
  sub_2289DE860();
  swift_bridgeObjectRelease();

  uint64_t v7 = sub_2289DE880();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    sub_2289742D4((uint64_t)v6);
    uint64_t v9 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
    uint64_t v9 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v9, 1, v7);
}

uint64_t sub_2289742D4(uint64_t a1)
{
  uint64_t v2 = sub_228952BB0(&qword_2682841E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t URL.isEquivalent(to:)()
{
  uint64_t v0 = sub_2289DE880();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v2);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v16 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v16 - v11;
  sub_2289DE7F0();
  sub_2289DE800();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v1 + 8);
  v13(v12, v0);
  sub_2289DE7F0();
  sub_2289DE800();
  v13(v7, v0);
  char v14 = MEMORY[0x22A6A1420](v10, v4);
  v13(v4, v0);
  v13(v10, v0);
  return v14 & 1;
}

Swift::String __swiftcall URL.pathWithoutLeadingSlash()()
{
  uint64_t v0 = (void *)sub_2289DE810();
  uint64_t v1 = v0;
  int64_t v2 = v0[2];
  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    unint64_t v8 = 0xE000000000000000;
    goto LABEL_21;
  }
  if (v0[4] == 47 && v0[5] == 0xE100000000000000) {
    goto LABEL_10;
  }
  if ((sub_2289DF480() & 1) == 0)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    sub_228952BB0(&qword_2682843F0);
    sub_2289746BC();
    uint64_t v6 = sub_2289DEB30();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease_n();
LABEL_21:
    uint64_t v9 = v6;
    uint64_t v10 = (void *)v8;
    goto LABEL_25;
  }
  int64_t v2 = v1[2];
  if (v2)
  {
    while (1)
    {
LABEL_10:
      char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || (unint64_t)(v2 - 1) > v1[3] >> 1) {
        uint64_t v1 = sub_22896C0F8(isUniquelyReferenced_nonNull_native, v2, 1, v1);
      }
      swift_arrayDestroy();
      uint64_t v5 = v1[2];
      if (!v5) {
        break;
      }
      memmove(v1 + 4, v1 + 6, 16 * v5 - 16);
      int64_t v2 = v5 - 1;
      v1[2] = v5 - 1;
      if (v5 == 1) {
        goto LABEL_23;
      }
      if (v1[4] != 47 || v1[5] != 0xE100000000000000)
      {
        if ((sub_2289DF480() & 1) == 0) {
          goto LABEL_19;
        }
        int64_t v2 = v1[2];
      }
      if (!v2) {
        goto LABEL_22;
      }
    }
  }
  else
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  uint64_t v9 = sub_2289DF3C0();
  __break(1u);
LABEL_25:
  result._object = v10;
  result._uint64_t countAndFlagsBits = v9;
  return result;
}

unint64_t sub_2289746BC()
{
  unint64_t result = qword_2682843F8;
  if (!qword_2682843F8)
  {
    sub_2289550A8(&qword_2682843F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682843F8);
  }
  return result;
}

Swift::String __swiftcall URL.pathQueryAndFragmentWithoutLeadingSlash()()
{
  Swift::String v0 = URL.pathWithoutLeadingSlash()();
  sub_2289DE850();
  if (v1)
  {
    sub_2289DEC90();
    sub_2289DEC90();
    swift_bridgeObjectRelease();
  }
  sub_2289DE870();
  if (v2)
  {
    sub_2289DEC90();
    sub_2289DEC90();
    swift_bridgeObjectRelease();
  }
  uint64_t countAndFlagsBits = v0._countAndFlagsBits;
  object = v0._object;
  result._object = object;
  result._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t sub_2289747C8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  char v4 = a2 & 1;
  if (*(void *)(a1 + 24))
  {
    sub_22897D02C((_OWORD *)a1, v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_22897B2AC(v14, v4, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_22896EABC(a1, &qword_26AECF7D8);
    unint64_t v7 = sub_2289D71A4(v4);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_2289986D8();
        uint64_t v11 = v13;
      }
      sub_22897D02C((_OWORD *)(*(void *)(v11 + 56) + 32 * v9), v14);
      sub_2289D76D4(v9, v11);
      uint64_t *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
    }
    return sub_22896EABC((uint64_t)v14, &qword_26AECF7D8);
  }
}

uint64_t sub_2289748DC(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    sub_22896C428(0, v2, 0);
    uint64_t result = v12;
    char v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      int v5 = *v4++;
      unint64_t v6 = 0xEA0000000000656DLL;
      unint64_t v7 = 0x614E747369747261;
      switch(v5)
      {
        case 1:
          unint64_t v6 = 0xE700000000000000;
          unint64_t v7 = 0x6B726F77747261;
          break;
        case 2:
          unint64_t v7 = 0x636F4C6F69647561;
          unint64_t v6 = 0xEB00000000656C61;
          break;
        case 3:
          unint64_t v6 = 0x80000002289E4F00;
          unint64_t v7 = 0xD000000000000012;
          break;
        case 4:
          unint64_t v6 = 0xED0000656C746954;
          unint64_t v7 = 0x6B726F576B6F6F62;
          break;
        case 5:
          unint64_t v7 = 0xD000000000000015;
          char v8 = "bookSampleDownloadUrl";
          goto LABEL_27;
        case 6:
          unint64_t v6 = 0xE900000000000073;
          unint64_t v7 = 0x6D61726150797562;
          break;
        case 7:
          unint64_t v6 = 0xED0000676E697461;
          unint64_t v7 = 0x52746E65746E6F63;
          break;
        case 8:
          unint64_t v6 = 0xEB000000006E6F69;
          unint64_t v7 = 0x7470697263736564;
          break;
        case 9:
          unint64_t v6 = 0xEE007365746F4E6CLL;
          unint64_t v7 = 0x6169726F74696465;
          break;
        case 10:
          unint64_t v6 = 0xEB00000000646E69;
          unint64_t v7 = 0x4B6E6F6974696465;
          break;
        case 11:
          unint64_t v6 = 0xEA00000000007365;
          unint64_t v7 = 0x6D614E65726E6567;
          break;
        case 12:
          unint64_t v7 = 0xD000000000000016;
          char v8 = "hasSupplementalContent";
          goto LABEL_27;
        case 13:
          unint64_t v6 = 0xE700000000000000;
          unint64_t v7 = 0x6B6F6F42497369;
          break;
        case 14:
          unint64_t v6 = 0xE400000000000000;
          unint64_t v7 = 1196651369;
          break;
        case 15:
          unint64_t v6 = 0xE400000000000000;
          unint64_t v7 = 1701667182;
          break;
        case 16:
          unint64_t v6 = 0xE600000000000000;
          unint64_t v7 = 0x73726566666FLL;
          break;
        case 17:
          unint64_t v7 = 0xD000000000000018;
          char v8 = "pageProgressionDirection";
          goto LABEL_27;
        case 18:
          unint64_t v6 = 0xE800000000000000;
          unint64_t v7 = 0x7377656976657270;
          break;
        case 19:
          unint64_t v6 = 0xED0000656C61636FLL;
          unint64_t v7 = 0x4C7972616D697270;
          break;
        case 20:
          unint64_t v6 = 0xED00006F666E4972;
          unint64_t v7 = 0x656873696C627570;
          break;
        case 21:
          unint64_t v6 = 0xEB00000000657461;
          unint64_t v7 = 0x44657361656C6572;
          break;
        case 22:
          unint64_t v6 = 0xEA00000000006F66;
          unint64_t v7 = 0x6E49736569726573;
          break;
        case 23:
          unint64_t v7 = 0xD00000000000001ALL;
          char v8 = "supportsUnifiedProductPage";
LABEL_27:
          unint64_t v6 = (unint64_t)(v8 - 32) | 0x8000000000000000;
          break;
        case 24:
          unint64_t v6 = 0xEA0000000000676ELL;
          unint64_t v7 = 0x6974615272657375;
          break;
        case 25:
          unint64_t v6 = 0xE300000000000000;
          unint64_t v7 = 7107189;
          break;
        case 26:
          unint64_t v6 = 0xE700000000000000;
          unint64_t v7 = 0x6E6F6973726576;
          break;
        case 27:
          unint64_t v6 = 0xEE0079726F747369;
          unint64_t v7 = 0x486E6F6973726576;
          break;
        default:
          break;
      }
      uint64_t v13 = result;
      unint64_t v10 = *(void *)(result + 16);
      unint64_t v9 = *(void *)(result + 24);
      if (v10 >= v9 >> 1)
      {
        sub_22896C428(v9 > 1, v10 + 1, 1);
        uint64_t result = v13;
      }
      *(void *)(result + 16) = v10 + 1;
      uint64_t v11 = result + 16 * v10;
      *(void *)(v11 + 32) = v7;
      *(void *)(v11 + 40) = v6;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_228974D34()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC14BookFoundation6MAsset____lazy_storage___cache))
  {
    uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14BookFoundation6MAsset____lazy_storage___cache);
  }
  else
  {
    uint64_t v1 = MEMORY[0x263F8EE80];
    *(void *)(v0 + OBJC_IVAR____TtC14BookFoundation6MAsset____lazy_storage___cache) = MEMORY[0x263F8EE80];
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

BOOL static MAsset.CacheKey.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t MAsset.CacheKey.hash(into:)()
{
  return sub_2289DF570();
}

uint64_t MAsset.CacheKey.hashValue.getter()
{
  return sub_2289DF590();
}

uint64_t MAsset.artistName.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14BookFoundation6MAsset_artistName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MAsset.artwork.getter()
{
  return swift_bridgeObjectRetain();
}

void MAsset.kind.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR____TtC14BookFoundation6MAsset_kind);
}

id sub_228974E88()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = (void *)sub_2289DEB90();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t MAsset.name.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14BookFoundation6MAsset_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MAsset.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14BookFoundation6MAsset_url;
  uint64_t v4 = sub_2289DE880();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t static MAsset.requiredAttributeKeys.getter()
{
  uint64_t v0 = sub_2289748DC((uint64_t)&unk_26DD0A4E8);
  uint64_t v1 = sub_22897B668(v0);
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t sub_228975028(char a1)
{
  unint64_t result = 0x614E747369747261;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6B726F77747261;
      break;
    case 2:
      unint64_t result = 0x636F4C6F69647561;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x6B726F576B6F6F62;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0x6D61726150797562;
      break;
    case 7:
      unint64_t result = 0x52746E65746E6F63;
      break;
    case 8:
      unint64_t result = 0x7470697263736564;
      break;
    case 9:
      unint64_t result = 0x6169726F74696465;
      break;
    case 10:
      unint64_t result = 0x4B6E6F6974696465;
      break;
    case 11:
      unint64_t result = 0x6D614E65726E6567;
      break;
    case 12:
      unint64_t result = 0xD000000000000016;
      break;
    case 13:
      unint64_t result = 0x6B6F6F42497369;
      break;
    case 14:
      unint64_t result = 1196651369;
      break;
    case 15:
      unint64_t result = 1701667182;
      break;
    case 16:
      unint64_t result = 0x73726566666FLL;
      break;
    case 17:
      unint64_t result = 0xD000000000000018;
      break;
    case 18:
      unint64_t result = 0x7377656976657270;
      break;
    case 19:
      unint64_t result = 0x4C7972616D697270;
      break;
    case 20:
      unint64_t result = 0x656873696C627570;
      break;
    case 21:
      unint64_t result = 0x44657361656C6572;
      break;
    case 22:
      unint64_t result = 0x6E49736569726573;
      break;
    case 23:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 24:
      unint64_t result = 0x6974615272657375;
      break;
    case 25:
      unint64_t result = 7107189;
      break;
    case 26:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 27:
      unint64_t result = 0x486E6F6973726576;
      break;
    default:
      return result;
  }
  return result;
}

id MAsset.__allocating_init(with:config:)(uint64_t a1, unsigned __int8 *a2)
{
  id v5 = objc_allocWithZone(v2);
  return MAsset.init(with:config:)(a1, a2);
}

id MAsset.init(with:config:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = sub_228952BB0(&qword_2682841E0);
  MEMORY[0x270FA5388](v6 - 8);
  char v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2289DE880();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v45 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v44 = *a2;
  uint64_t v12 = (void *)*((void *)a2 + 1);
  uint64_t v46 = OBJC_IVAR____TtC14BookFoundation6MAsset____lazy_storage___cache;
  uint64_t v47 = v2;
  *(void *)&v2[OBJC_IVAR____TtC14BookFoundation6MAsset____lazy_storage___cache] = 0;
  LOBYTE(v50) = 0;
  uint64_t v13 = v2;
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_228952BB0(&qword_268284000);
  sub_22897B700();
  sub_2289B3B60(a1, v14, (uint64_t)&v48);
  swift_bridgeObjectRelease();
  uint64_t v15 = v48;
  if (!v48) {
    goto LABEL_11;
  }
  uint64_t v42 = v10;
  uint64_t v43 = v9;
  uint64_t v16 = v13;
  LOBYTE(v50) = 0;
  sub_22897B7A0();
  swift_bridgeObjectRetain();
  sub_2289B3B60(v15, MEMORY[0x263F8D310], (uint64_t)&v48);
  swift_bridgeObjectRelease();
  uint64_t v17 = v49;
  if (!v49)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    uint64_t v13 = v16;
LABEL_11:

    goto LABEL_12;
  }
  uint64_t v41 = v48;
  LOBYTE(v50) = 1;
  swift_bridgeObjectRetain();
  sub_2289B3B60(v15, v14, (uint64_t)&v48);
  swift_bridgeObjectRelease();
  uint64_t v18 = v48;
  if (!v48)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  LOBYTE(v50) = 15;
  swift_bridgeObjectRetain();
  sub_2289B3B60(v15, MEMORY[0x263F8D310], (uint64_t)&v48);
  swift_bridgeObjectRelease();
  if (!v49)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v40 = v49;
  uint64_t v39 = v48;
  LOBYTE(v50) = 25;
  sub_2289B3B60(v15, MEMORY[0x263F8D310], (uint64_t)&v48);
  swift_bridgeObjectRelease();
  if (!v49)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_2289DE860();
  swift_bridgeObjectRelease();
  uint64_t v20 = v42;
  uint64_t v19 = v43;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v8, 1, v43) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v16;

    sub_22896EABC((uint64_t)v8, &qword_2682841E0);
LABEL_12:
    if (qword_26AECF788 != -1) {
      swift_once();
    }
    if (qword_268283E70 != -1) {
      swift_once();
    }
    uint64_t v21 = sub_2289DEA10();
    sub_228952BF4(v21, (uint64_t)qword_268284188);
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_2289DE9F0();
    os_log_type_t v23 = sub_2289DF0A0();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v48 = v25;
      *(_DWORD *)uint64_t v24 = 136315394;
      uint64_t v45 = v13;
      unint64_t v26 = sub_228975B10(ObjectType);
      uint64_t v50 = sub_22897ACBC(v26, v27, &v48);
      sub_2289DF150();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_2289DEA90();
      unint64_t v30 = v29;
      swift_bridgeObjectRelease();
      uint64_t v50 = sub_22897ACBC(v28, v30, &v48);
      sub_2289DF150();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22894E000, v22, v23, "Invalid data for %s: %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22A6A29E0](v25, -1, -1);
      MEMORY[0x22A6A29E0](v24, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRelease();
    type metadata accessor for MAsset();
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v33 = v45;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v45, v8, v19);
  uint64_t v34 = (uint64_t *)&v16[OBJC_IVAR____TtC14BookFoundation6MAsset_artistName];
  *uint64_t v34 = v41;
  v34[1] = v17;
  *(void *)&v16[OBJC_IVAR____TtC14BookFoundation6MAsset_artwork] = v18;
  v16[OBJC_IVAR____TtC14BookFoundation6MAsset_kind] = 2;
  uint64_t v35 = (uint64_t *)&v16[OBJC_IVAR____TtC14BookFoundation6MAsset_name];
  uint64_t v36 = v40;
  uint64_t *v35 = v39;
  v35[1] = v36;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(&v16[OBJC_IVAR____TtC14BookFoundation6MAsset_url], v33, v19);

  LOBYTE(v48) = v44;
  uint64_t v49 = (uint64_t)v12;
  id v31 = MResource.init(with:config:)(a1, (char *)&v48);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v20 + 8);
  id v38 = v31;
  v37(v33, v19);
  if (v31) {

  }
  return v31;
}

unint64_t sub_228975B10(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(a1 + 136))(&v2);
  unint64_t result = 0x6F622D6F69647561;
  switch((char)v2)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x73726F68747561;
      break;
    case 3:
      unint64_t result = 0x736B6F6F62;
      break;
    case 4:
      unint64_t result = 0x7265732D6B6F6F62;
      break;
    case 5:
      unint64_t result = 0x7365726E6567;
      break;
    default:
      return result;
  }
  return result;
}

void sub_228975C24()
{
}

BOOL sub_228975CE8()
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v2);
  return v2 == 3;
}

BOOL sub_228975DA4()
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v2);
  return (_BYTE)v2 == 0;
}

uint64_t sub_228975DF8()
{
  return sub_228977A58(22, &qword_268284000);
}

uint64_t sub_228975E08()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14BookFoundation6MAsset_url;
  uint64_t v2 = sub_2289DE880();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

id MAsset.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MAsset();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t MAsset.cache(object:for:)(uint64_t a1, char *a2)
{
  char v3 = *a2;
  sub_228952C2C(a1, (uint64_t)v6);
  uint64_t v5 = sub_228974D34();
  sub_2289747C8((uint64_t)v6, v3);
  *(void *)(v2 + OBJC_IVAR____TtC14BookFoundation6MAsset____lazy_storage___cache) = v5;
  return swift_bridgeObjectRelease();
}

uint64_t MAsset.cachedValue(for:)@<X0>(char *a1@<X0>, _OWORD *a2@<X8>)
{
  char v3 = *a1;
  uint64_t v4 = sub_228974D34();
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_2289D71A4(v3), (v6 & 1) != 0))
  {
    sub_228952C2C(*(void *)(v4 + 56) + 32 * v5, (uint64_t)a2);
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_228976090(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2289661BC(*a1, *a2);
}

uint64_t sub_22897609C()
{
  return sub_2289DF590();
}

uint64_t sub_228976154()
{
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2289761F8()
{
  return sub_2289DF590();
}

uint64_t sub_2289762AC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_22897BA60();
  *a1 = result;
  return result;
}

void sub_2289762DC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEA0000000000656DLL;
  unint64_t v4 = 0xEE007265626D754ELL;
  unint64_t v5 = 0x65636E6575716573;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000014;
    unint64_t v4 = 0x80000002289E4EC0;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x614E736569726573;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t MAsset.seriesName.getter()
{
  return sub_228976524();
}

uint64_t MAsset.sequenceNumber.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
  uint64_t v2 = sub_22897BAAC(1, v1);
  swift_bridgeObjectRelease();
  return v2;
}

id sub_228976408(void *a1)
{
  swift_getObjectType();
  uint64_t v2 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0x140);
  unint64_t v3 = a1;
  uint64_t v4 = v2();
  sub_22897B7F4();
  sub_2289B3B60(v4, MEMORY[0x263F8D310], (uint64_t)v7);

  swift_bridgeObjectRelease();
  if (v7[1])
  {
    unint64_t v5 = (void *)sub_2289DEB90();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = 0;
  }

  return v5;
}

uint64_t MAsset.sequenceDisplayLabel.getter()
{
  return sub_228976524();
}

uint64_t sub_228976524()
{
  swift_getObjectType();
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
  sub_22897B7F4();
  sub_2289B3B60(v1, MEMORY[0x263F8D310], (uint64_t)&v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_2289765E8(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_228975028(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_228975028(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_2289DF480();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_228976674()
{
  char v1 = *v0;
  sub_2289DF560();
  sub_228975028(v1);
  sub_2289DEC40();
  swift_bridgeObjectRelease();
  return sub_2289DF590();
}

uint64_t sub_2289766D8()
{
  sub_228975028(*v0);
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_22897672C()
{
  char v1 = *v0;
  sub_2289DF560();
  sub_228975028(v1);
  sub_2289DEC40();
  swift_bridgeObjectRelease();
  return sub_2289DF590();
}

uint64_t sub_22897678C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_22897BD0C();
  *a1 = result;
  return result;
}

unint64_t sub_2289767BC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_228975028(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t MAsset.bookWorkAuthorName.getter()
{
  return sub_2289779B8();
}

uint64_t MAsset.bookWorkTitle.getter()
{
  return sub_2289779B8();
}

uint64_t MAsset.contentRating.getter()
{
  return sub_2289779B8();
}

uint64_t MAsset.isExplicit.getter()
{
  uint64_t result = (uint64_t)objc_msgSend(v0, sel_contentRating);
  if (result)
  {
    char v2 = (void *)result;
    uint64_t v3 = sub_2289DEBC0();
    uint64_t v5 = v4;

    if (v3 == 0x746963696C707865 && v5 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      char v7 = sub_2289DF480();
      swift_bridgeObjectRelease();
      return v7 & 1;
    }
  }
  return result;
}

uint64_t MAsset.editionKind.getter()
{
  return sub_2289779B8();
}

uint64_t MAsset.genreName.getter()
{
  swift_getObjectType();
  uint64_t v0 = sub_2289D49E0(0);
  uint64_t v1 = sub_228952BB0(&qword_2682843F0);
  sub_22897B7A0();
  sub_2289B3B60(v0, v1, (uint64_t)&v4);
  swift_bridgeObjectRelease();
  if (!v4) {
    return 0;
  }
  if (!*(void *)(v4 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v2 = *(void *)(v4 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t MAsset.buyParams.getter()
{
  swift_getObjectType();
  uint64_t v0 = sub_2289D49E0(0);
  uint64_t v1 = sub_228952BB0(&qword_2682843E0);
  sub_22897B7A0();
  sub_2289B3B60(v0, v1, (uint64_t)&v4);
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_5;
  }
  if (!*(void *)(v4 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v2 = 0;
    goto LABEL_6;
  }
  uint64_t v2 = *(void *)(v4 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_6:
  sub_2289B3B60(v2, MEMORY[0x263F8D310], (uint64_t)&v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t MAsset.releaseDate.getter@<X0>(char *a1@<X8>)
{
  swift_getObjectType();
  uint64_t v2 = sub_2289DE910();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v25 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_228952BB0(&qword_26AECF7E0);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2289DE9C0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v26 = 21;
  uint64_t v12 = sub_2289D49E0(0);
  sub_22897B7A0();
  sub_2289B3B60(v12, MEMORY[0x263F8D310], (uint64_t)v27);
  swift_bridgeObjectRelease();
  if (!v27[1]) {
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  }
  uint64_t v24 = a1;
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F088C0]), sel_init);
  sub_2289DE9B0();
  uint64_t v14 = (void *)sub_2289DE9A0();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  objc_msgSend(v13, sel_setTimeZone_, v14);

  objc_msgSend(v13, sel_setFormatOptions_, 275);
  uint64_t v15 = (void *)sub_2289DEB90();
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v13, sel_dateFromString_, v15);

  if (!v16)
  {

    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v19(v7, 1, 1, v2);
    uint64_t v21 = v24;
LABEL_7:
    sub_22896EABC((uint64_t)v7, &qword_26AECF7E0);
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v19)(v21, 1, 1, v2);
  }
  uint64_t v17 = v25;
  sub_2289DE900();

  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v18(v7, v17, v2);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v19(v7, 0, 1, v2);
  int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2);
  uint64_t v21 = v24;
  if (v20 == 1) {
    goto LABEL_7;
  }
  v18(v24, v7, v2);
  return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v19)(v21, 0, 1, v2);
}

uint64_t sub_2289771A4@<X0>(uint64_t a1@<X0>, char a2@<W2>, char *a3@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v25 = a3;
  uint64_t v4 = sub_2289DE910();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_228952BB0(&qword_26AECF7E0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2289DE9C0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = objc_allocWithZone(MEMORY[0x263F088C0]);
  id v16 = objc_msgSend(v15, sel_init, v24);
  if (a2)
  {
    sub_2289DE9B0();
    uint64_t v17 = (void *)sub_2289DE9A0();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    objc_msgSend(v16, sel_setTimeZone_, v17);
  }
  objc_msgSend(v16, sel_setFormatOptions_, 275);
  uint64_t v18 = (void *)sub_2289DEB90();
  swift_bridgeObjectRelease();
  id v19 = objc_msgSend(v16, sel_dateFromString_, v18);

  if (!v19)
  {

    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v21(v10, 1, 1, v4);
LABEL_7:
    sub_22896EABC((uint64_t)v10, &qword_26AECF7E0);
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v21)(v25, 1, 1, v4);
  }
  sub_2289DE900();

  int v20 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v20(v10, v7, v4);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v21(v10, 0, 1, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1) {
    goto LABEL_7;
  }
  uint64_t v23 = v25;
  v20(v25, v10, v4);
  return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v21)(v23, 0, 1, v4);
}

uint64_t MAsset.hasSupplementalContent.getter()
{
  return sub_228977B60(12);
}

uint64_t MAsset.isIBook.getter()
{
  return sub_228977B60(13);
}

uint64_t MAsset.isSG.getter()
{
  return sub_228977B60(14);
}

uint64_t MAsset.bookSampleDownloadURL.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getObjectType();
  uint64_t v2 = sub_2289D49E0(0);
  sub_22897B7A0();
  sub_2289B3B60(v2, MEMORY[0x263F8D310], (uint64_t)v5);
  swift_bridgeObjectRelease();
  if (v5[1])
  {
    sub_2289DE860();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = sub_2289DE880();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a1, 1, 1, v4);
  }
}

uint64_t MAsset.locale.getter()
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v3);
  uint64_t v1 = sub_2289D49E0(0);
  sub_22897B7A0();
  sub_2289B3B60(v1, MEMORY[0x263F8D310], (uint64_t)&v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t MAsset.pageProgressionDirection.getter()
{
  return sub_2289779B8();
}

uint64_t MAsset.pagesAreRTL.getter()
{
  id v1 = objc_msgSend(v0, sel_pageProgressionDirection);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = sub_2289DEBC0();
    uint64_t v5 = v4;

    if (v3 == 7107698 && v5 == 0xE300000000000000)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      char v7 = sub_2289DF480();
      swift_bridgeObjectRelease();
      return v7 & 1;
    }
  }
  else
  {
    return _s14BookFoundation23LocaleLanguageDirectionV5isRTLSbvgZ_0();
  }
}

uint64_t MAsset.previews.getter()
{
  return sub_228977A58(18, &qword_2682843E0);
}

id sub_2289778D8(void *a1)
{
  swift_getObjectType();
  id v2 = a1;
  uint64_t v3 = sub_2289D49E0(0);
  sub_22897B7A0();
  sub_2289B3B60(v3, MEMORY[0x263F8D310], (uint64_t)v6);

  swift_bridgeObjectRelease();
  if (v6[1])
  {
    uint64_t v4 = (void *)sub_2289DEB90();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

uint64_t MAsset.version.getter()
{
  return sub_2289779B8();
}

uint64_t sub_2289779B8()
{
  swift_getObjectType();
  uint64_t v0 = sub_2289D49E0(0);
  sub_22897B7A0();
  sub_2289B3B60(v0, MEMORY[0x263F8D310], (uint64_t)&v2);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t MAsset.versionHistory.getter()
{
  return sub_228977A58(27, &qword_2682843E0);
}

uint64_t sub_228977A58(uint64_t a1, uint64_t *a2)
{
  swift_getObjectType();
  uint64_t v3 = sub_2289D49E0(0);
  uint64_t v4 = sub_228952BB0(a2);
  sub_22897B7A0();
  sub_2289B3B60(v3, v4, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_228977AFC(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  uint64_t v5 = sub_2289D49E0(0);
  char v6 = sub_22897BD60(a3, v5);

  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t MAsset.supportsUnifiedProductPage.getter()
{
  return sub_228977B60(23);
}

uint64_t sub_228977B60(char a1)
{
  uint64_t v2 = sub_2289D49E0(0);
  char v3 = sub_22897BD60(a1, v2);
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_228977BA8()
{
  return 1;
}

uint64_t sub_228977BB0()
{
  return sub_228979EEC();
}

uint64_t sub_228977BC0()
{
  return sub_2289DEC40();
}

uint64_t sub_228977BD0()
{
  return sub_228979F5C();
}

uint64_t sub_228977BE0@<X0>(BOOL *a1@<X8>)
{
  return sub_228979FB4(a1);
}

void sub_228977BEC(void *a1@<X8>)
{
  *a1 = 1701667182;
  a1[1] = 0xE400000000000000;
}

uint64_t MAsset.publisherName.getter()
{
  swift_getObjectType();
  char v5 = 20;
  uint64_t v0 = sub_2289D49E0(0);
  uint64_t v1 = sub_228952BB0(&qword_268284000);
  sub_22897B7A0();
  sub_2289B3B60(v0, v1, (uint64_t)v4);
  swift_bridgeObjectRelease();
  uint64_t v2 = v4[0];
  if (!v4[0]) {
    return 0;
  }
  sub_22897BE40();
  sub_2289B3B60(v2, MEMORY[0x263F8D310], (uint64_t)v4);
  swift_bridgeObjectRelease();
  if (v4[1]) {
    return v4[0];
  }
  else {
    return 0;
  }
}

uint64_t sub_228977CFC(char *a1, char *a2)
{
  return sub_228966110(*a1, *a2);
}

uint64_t sub_228977D08()
{
  return sub_2289DF590();
}

uint64_t sub_228977D90()
{
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_228977E04()
{
  return sub_2289DF590();
}

uint64_t sub_228977E88@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_2289DF3F0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_228977EE8(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x65756C6176;
  if (*v1) {
    uint64_t v2 = 0x6F43676E69746172;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xEB00000000746E75;
  }
  *a1 = v2;
  a1[1] = v3;
}

double MAsset.averageRating.getter()
{
  swift_getObjectType();
  v8[1] = 24;
  uint64_t v0 = sub_2289D49E0(0);
  uint64_t v1 = sub_228952BB0(&qword_268284000);
  sub_22897B7A0();
  sub_2289B3B60(v0, v1, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  uint64_t v2 = v9;
  double v3 = 0.0;
  if (v9)
  {
    v8[0] = 0;
    sub_22897BE94();
    char v4 = sub_2289B3DD4((uint64_t)v8, v2);
    swift_bridgeObjectRelease();
    if (v4)
    {
      objc_msgSend(v4, sel_doubleValue);
      double v6 = v5;

      return v6 / 5.0;
    }
  }
  return v3;
}

uint64_t MAsset.ratingCount.getter()
{
  swift_getObjectType();
  char v6 = 24;
  uint64_t v0 = sub_2289D49E0(0);
  uint64_t v1 = sub_228952BB0(&qword_268284000);
  sub_22897B7A0();
  sub_2289B3B60(v0, v1, (uint64_t)&v4);
  swift_bridgeObjectRelease();
  uint64_t v2 = v4;
  if (v4
    && (char v6 = 1,
        sub_22897BE94(),
        sub_2289B3B60(v2, MEMORY[0x263F8D9D0], (uint64_t)&v4),
        swift_bridgeObjectRelease(),
        v5 != 1))
  {
    return v4;
  }
  else
  {
    return 0;
  }
}

unint64_t MAsset.ratingCountForAnalytics.getter()
{
  sub_228952BB0(&qword_268284450);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2289E0340;
  id v2 = objc_msgSend(v0, sel_ratingCount);
  uint64_t v3 = MEMORY[0x263F8D648];
  *(void *)(v1 + 56) = MEMORY[0x263F8D5C8];
  *(void *)(v1 + 64) = v3;
  *(float *)(v1 + 32) = (float)(unint64_t)v2;
  uint64_t v4 = sub_2289DEBD0();
  uint64_t v6 = v5;
  if ((v5 & 0x1000000000000000) != 0 || !(v5 & 0x2000000000000000 | v4 & 0x1000000000000000))
  {
    sub_2289DF240();
    goto LABEL_10;
  }
  MEMORY[0x270FA5388](v4);
  if ((v6 & 0x2000000000000000) != 0)
  {
    if (v7 > 0x20u || ((0x100003E01uLL >> v7) & 1) == 0) {
      _swift_stdlib_strtof_clocale();
    }
    goto LABEL_10;
  }
  if ((v7 & 0x1000000000000000) == 0) {
    goto LABEL_16;
  }
  uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v9 = v7 & 0xFFFFFFFFFFFFLL;
  while (1)
  {
    sub_22897B5C4(v8, v9, (void (*)(uint64_t *__return_ptr))sub_22897BF58);
LABEL_10:
    swift_bridgeObjectRelease();
    if (0.0 <= -1.0)
    {
      __break(1u);
      goto LABEL_15;
    }
    if (0.0 < 1.8447e19) {
      return (unint64_t)0.0;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    uint64_t v8 = sub_2289DF2A0();
  }
}

uint64_t sub_228978410(unsigned __int8 *a1, char *a2)
{
  return sub_228965F98(*a1, *a2);
}

uint64_t sub_22897841C()
{
  return sub_2289DF590();
}

uint64_t sub_2289784EC()
{
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2289785A4()
{
  return sub_2289DF590();
}

uint64_t sub_228978670@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_22897CF40();
  *a1 = result;
  return result;
}

void sub_2289786A0(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1701667182;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x647261646E617473;
      goto LABEL_3;
    case 2:
      *a1 = 0x74726F6873;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 0x656E696C676174;
      a1[1] = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t MAsset.standardNotes.getter()
{
  swift_getObjectType();
  uint64_t v0 = sub_2289D49E0(0);
  uint64_t v1 = sub_228952BB0(&qword_268284000);
  sub_22897B7A0();
  sub_2289B3B60(v0, v1, (uint64_t)&v4);
  swift_bridgeObjectRelease();
  uint64_t v2 = v4;
  sub_22897BF9C();
  sub_2289B3B60(v2, MEMORY[0x263F8D310], (uint64_t)&v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_22897882C()
{
  return sub_228979EEC();
}

uint64_t sub_228978844()
{
  return sub_2289DEC40();
}

uint64_t sub_22897885C()
{
  return sub_228979F5C();
}

uint64_t sub_228978874@<X0>(BOOL *a1@<X8>)
{
  return sub_228979FB4(a1);
}

void sub_228978880(void *a1@<X8>)
{
  *a1 = 0x647261646E617473;
  a1[1] = 0xE800000000000000;
}

uint64_t MAsset.standardDescription.getter()
{
  swift_getObjectType();
  uint64_t v0 = sub_2289D49E0(0);
  uint64_t v1 = sub_228952BB0(&qword_268284000);
  sub_22897B7A0();
  sub_2289B3B60(v0, v1, (uint64_t)&v4);
  swift_bridgeObjectRelease();
  uint64_t v2 = v4;
  sub_22897BFF0();
  sub_2289B3B60(v2, MEMORY[0x263F8D310], (uint64_t)&v4);
  swift_bridgeObjectRelease();
  return v4;
}

BookFoundation::MAsset::OfferType_optional __swiftcall MAsset.OfferType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_2289DF3F0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 4;
  if (v3 < 4) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t MAsset.OfferType.rawValue.getter()
{
  uint64_t result = 7959906;
  switch(*v0)
  {
    case 1:
      uint64_t result = 7628135;
      break;
    case 2:
      uint64_t result = 0x6F6C6E776F646572;
      break;
    case 3:
      uint64_t result = 0x726564726F657270;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_228978A68(unsigned __int8 *a1, char *a2)
{
  return sub_228965BEC(*a1, *a2);
}

uint64_t sub_228978A74()
{
  return sub_2289DF590();
}

uint64_t sub_228978B40()
{
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_228978BF4()
{
  return sub_2289DF590();
}

BookFoundation::MAsset::OfferType_optional sub_228978CBC(Swift::String *a1)
{
  return MAsset.OfferType.init(rawValue:)(*a1);
}

void sub_228978CC8(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7959906;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 7628135;
      goto LABEL_3;
    case 2:
      *a1 = 0x6F6C6E776F646572;
      a1[1] = 0xEA00000000006461;
      break;
    case 3:
      *a1 = 0x726564726F657270;
      a1[1] = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE300000000000000;
      break;
  }
}

BookFoundation::MAsset::OfferType MAsset.offerType.getter@<W0>(unsigned char *a1@<X8>)
{
  swift_getObjectType();
  id v3 = objc_msgSend(v1, sel_offer);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = sub_2289DEA80();
  }
  else
  {
    uint64_t v5 = 0;
  }
  sub_22897C044();
  sub_2289B3B60(v5, MEMORY[0x263F8D310], (uint64_t)&rawValue);
  BookFoundation::MAsset::OfferType result = swift_bridgeObjectRelease();
  object = rawValue._object;
  if (rawValue._object)
  {
    uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
    return MAsset.OfferType.init(rawValue:)(*(Swift::String *)(&object - 1)).value;
  }
  else
  {
    *a1 = 4;
  }
  return result;
}

uint64_t MAsset.rawOfferType.getter()
{
  swift_getObjectType();
  id v1 = objc_msgSend(v0, sel_offer);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = sub_2289DEA80();
  }
  else
  {
    uint64_t v3 = 0;
  }
  sub_22897C044();
  sub_2289B3B60(v3, MEMORY[0x263F8D310], (uint64_t)&v5);
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t sub_228978F1C(char a1)
{
  unint64_t result = 0x737465737361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x6E6F697461727564;
      break;
    case 3:
      unint64_t result = 0x726F466563697270;
      break;
    case 4:
      unint64_t result = 0x6563697270;
      break;
    case 5:
      unint64_t result = 1702521203;
      break;
    case 6:
      unint64_t result = 1701869940;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_228978FFC(unsigned __int8 *a1, char *a2)
{
  return sub_228965D5C(*a1, *a2);
}

uint64_t sub_228979008()
{
  return sub_2289B12B0();
}

uint64_t sub_228979014()
{
  return sub_2289B0F30();
}

uint64_t sub_22897901C()
{
  return sub_2289B12B0();
}

uint64_t sub_228979024@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_22897CF8C();
  *a1 = result;
  return result;
}

unint64_t sub_228979054@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_228978F1C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_228979080()
{
  swift_getObjectType();
  id v1 = objc_msgSend(v0, sel_offer);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = sub_2289DEA80();
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = sub_228952BB0(&qword_2682843E0);
  sub_22897C044();
  sub_2289B3B60(v3, v4, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  if (!v7) {
    return 0;
  }
  if (!*(void *)(v7 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v5 = *(void *)(v7 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t MAsset.duration.getter()
{
  swift_getObjectType();
  uint64_t v0 = sub_228979080();
  sub_22897C044();
  sub_2289B3B60(v0, MEMORY[0x263F8E5C0], (uint64_t)&v2);
  swift_bridgeObjectRelease();
  return v2;
}

id sub_228979268(void *a1, uint64_t a2, uint64_t *a3, void (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v10 = sub_228952BB0(a3);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = a1;
  a4();

  uint64_t v14 = a5(0);
  uint64_t v15 = *(void *)(v14 - 8);
  id v16 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) != 1)
  {
    id v16 = (void *)a6();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
  }

  return v16;
}

uint64_t MAsset.expectedReleaseDate.getter@<X0>(char *a1@<X8>)
{
  swift_getObjectType();
  uint64_t v3 = sub_2289DE910();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v28 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_228952BB0(&qword_26AECF7E0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2289DE9C0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v29 = 1;
  id v13 = objc_msgSend(v1, sel_offer);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = sub_2289DEA80();
  }
  else
  {
    uint64_t v15 = 0;
  }
  sub_22897C044();
  sub_2289B3B60(v15, MEMORY[0x263F8D310], (uint64_t)v30);
  swift_bridgeObjectRelease();
  if (!v30[1]) {
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
  }
  unint64_t v27 = a1;
  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F088C0]), sel_init);
  sub_2289DE9B0();
  uint64_t v17 = (void *)sub_2289DE9A0();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  objc_msgSend(v16, sel_setTimeZone_, v17);

  objc_msgSend(v16, sel_setFormatOptions_, 275);
  uint64_t v18 = (void *)sub_2289DEB90();
  swift_bridgeObjectRelease();
  id v19 = objc_msgSend(v16, sel_dateFromString_, v18);

  if (!v19)
  {

    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v22(v8, 1, 1, v3);
    uint64_t v24 = v27;
LABEL_10:
    sub_22896EABC((uint64_t)v8, &qword_26AECF7E0);
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v22)(v24, 1, 1, v3);
  }
  int v20 = v28;
  sub_2289DE900();

  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v21(v8, v20, v3);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v22(v8, 0, 1, v3);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3);
  uint64_t v24 = v27;
  if (v23 == 1) {
    goto LABEL_10;
  }
  v21(v27, v8, v3);
  return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v22)(v24, 0, 1, v3);
}

uint64_t MAsset.fileSize.getter()
{
  swift_getObjectType();
  uint64_t v0 = sub_228979080();
  sub_22897C044();
  sub_2289B3B60(v0, MEMORY[0x263F8E5C0], (uint64_t)&v2);
  swift_bridgeObjectRelease();
  if (v3) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t MAsset.offer.getter()
{
  return sub_22897A020();
}

uint64_t MAsset.isPreorder.getter()
{
  swift_getObjectType();
  id v1 = objc_msgSend(v0, sel_offer);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = sub_2289DEA80();
  }
  else
  {
    uint64_t v3 = 0;
  }
  sub_22897C044();
  sub_2289B3B60(v3, MEMORY[0x263F8D310], (uint64_t)&rawValue);
  swift_bridgeObjectRelease();
  object = rawValue._object;
  if (rawValue._object
    && (uint64_t countAndFlagsBits = rawValue._countAndFlagsBits,
        MAsset.OfferType.init(rawValue:)(*(Swift::String *)(&object - 1)),
        v9 != 4))
  {
    switch(v9)
    {
      case 3:
        swift_bridgeObjectRelease();
        char v6 = 1;
        break;
      default:
        char v6 = sub_2289DF480();
        swift_bridgeObjectRelease();
        break;
    }
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

id sub_228979B7C(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();
  uint64_t v6 = v5;

  if (v6)
  {
    uint64_t v7 = (void *)sub_2289DEB90();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

uint64_t MAsset.priceFormatted.getter()
{
  swift_getObjectType();
  char v10 = 4;
  id v1 = objc_msgSend(v0, sel_offer);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = sub_2289DEA80();
  }
  else
  {
    uint64_t v3 = 0;
  }
  sub_22897C044();
  sub_2289B3B60(v3, MEMORY[0x263F8D538], (uint64_t)&v8);
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if ((v9 & 1) == 0 && v8 != 0.0)
  {
    char v10 = 3;
    id v5 = objc_msgSend(v0, sel_offer, v8);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = sub_2289DEA80();
    }
    else
    {
      uint64_t v7 = 0;
    }
    sub_2289B3B60(v7, MEMORY[0x263F8D310], (uint64_t)&v8);
    swift_bridgeObjectRelease();
    if (v9) {
      return *(void *)&v8;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t MAsset.price.getter()
{
  swift_getObjectType();
  id v1 = objc_msgSend(v0, sel_offer);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = sub_2289DEA80();
  }
  else
  {
    uint64_t v3 = 0;
  }
  sub_22897C044();
  sub_2289B3B60(v3, MEMORY[0x263F8D538], (uint64_t)&v5);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t MAsset.PreviewKeys.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_2289DF3F0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t MAsset.PreviewKeys.rawValue.getter()
{
  return 7107189;
}

uint64_t sub_228979EDC()
{
  return sub_228979EEC();
}

uint64_t sub_228979EEC()
{
  return sub_2289DF590();
}

uint64_t sub_228979F3C()
{
  return sub_2289DEC40();
}

uint64_t sub_228979F4C()
{
  return sub_228979F5C();
}

uint64_t sub_228979F5C()
{
  return sub_2289DF590();
}

uint64_t sub_228979FA8@<X0>(BOOL *a1@<X8>)
{
  return sub_228979FB4(a1);
}

uint64_t sub_228979FB4@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_2289DF3F0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_22897A004(void *a1@<X8>)
{
  *a1 = 7107189;
  a1[1] = 0xE300000000000000;
}

uint64_t MAsset.preview.getter()
{
  return sub_22897A020();
}

uint64_t sub_22897A020()
{
  swift_getObjectType();
  uint64_t v0 = sub_2289D49E0(0);
  uint64_t v1 = sub_228952BB0(&qword_2682843E0);
  sub_22897B7A0();
  sub_2289B3B60(v0, v1, (uint64_t)&v4);
  swift_bridgeObjectRelease();
  if (!v4) {
    return 0;
  }
  if (!*(void *)(v4 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v2 = *(void *)(v4 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t MAsset.previewURL.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getObjectType();
  uint64_t v2 = MAsset.preview.getter();
  sub_22897C098();
  sub_2289B3B60(v2, MEMORY[0x263F8D310], (uint64_t)v5);
  swift_bridgeObjectRelease();
  if (v5[1])
  {
    sub_2289DE860();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = sub_2289DE880();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a1, 1, 1, v4);
  }
}

BookFoundation::MAsset::ArtworkKeys_optional __swiftcall MAsset.ArtworkKeys.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_2289DF3F0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 3;
  if (v3 < 3) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t MAsset.ArtworkKeys.rawValue.getter()
{
  uint64_t v1 = 7107189;
  if (*v0 != 1) {
    uint64_t v1 = 0x6874646977;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x746867696568;
  }
}

uint64_t sub_22897A470(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2289662F0(*a1, *a2);
}

uint64_t sub_22897A47C()
{
  return sub_2289DF590();
}

uint64_t sub_22897A510()
{
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_22897A590()
{
  return sub_2289DF590();
}

BookFoundation::MAsset::ArtworkKeys_optional sub_22897A620(Swift::String *a1)
{
  return MAsset.ArtworkKeys.init(rawValue:)(*a1);
}

void sub_22897A62C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xE300000000000000;
  uint64_t v5 = 7107189;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6874646977;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x746867696568;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t MAsset.artworkURL.getter()
{
  swift_getObjectType();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14BookFoundation6MAsset_artwork);
  sub_22897C0EC();
  sub_2289B3B60(v1, MEMORY[0x263F8D310], (uint64_t)&v3);
  return v3;
}

void *MAsset.width.getter()
{
  return sub_22897A7D8(2);
}

void *MAsset.height.getter()
{
  return sub_22897A7D8(0);
}

void *sub_22897A7D8(char a1)
{
  swift_getObjectType();
  char v8 = a1;
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC14BookFoundation6MAsset_artwork);
  sub_22897C0EC();
  BookFoundation::MAsset::ArtworkKeys_optional result = sub_2289B3DD4((uint64_t)&v8, v3);
  uint64_t v5 = result;
  if (result)
  {
    objc_msgSend(result, sel_doubleValue);
    uint64_t v7 = v6;

    return (void *)v7;
  }
  return result;
}

uint64_t MAsset.authors.getter()
{
  return sub_22896BAC8(@"authors");
}

uint64_t MAsset.featuredEditions.getter()
{
  return sub_22896BAB0(@"featured-editions");
}

uint64_t MAsset.genres.getter()
{
  return sub_22896BAE0(@"genres");
}

uint64_t MAsset.seriesResource.getter()
{
  if (!sub_22897A970()) {
    return 0;
  }
  unint64_t v0 = sub_2289D47F8();
  if (!v0)
  {
LABEL_11:
    swift_release();
    return 0;
  }
  unint64_t v1 = v0;
  uint64_t v2 = v0 & 0xFFFFFFFFFFFFFF8;
  if (!(v0 >> 62))
  {
    uint64_t result = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  uint64_t result = sub_2289DF380();
  if (!result)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_5:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x22A6A1E70](0, v1);
    goto LABEL_8;
  }
  if (*(void *)(v2 + 16))
  {
    id v4 = *(id *)(v1 + 32);
LABEL_8:
    id v5 = v4;
    swift_bridgeObjectRelease();
    swift_release();
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_22897A970()
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v11);
  unint64_t v1 = BFMCatalogRequestRelationshipAudiobookSeries;
  if (v11 == 3) {
    unint64_t v1 = BFMCatalogRequestRelationshipBookSeries;
  }
  uint64_t v2 = *v1;
  uint64_t v3 = sub_22898B564();
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = sub_2289DEBC0();
    if (*(void *)(v4 + 16) && (unint64_t v7 = sub_2289D7094(v5, v6), (v8 & 1) != 0))
    {
      uint64_t v9 = *(void *)(*(void *)(v4 + 56) + 8 * v7);
      swift_retain();
    }
    else
    {
      uint64_t v9 = 0;
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {

    return 0;
  }
  return v9;
}

uint64_t sub_22897AA58(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(v15);
  uint64_t v3 = BFMCatalogRequestRelationshipAudiobookSeries;
  if (LOBYTE(v15[0]) == 3) {
    uint64_t v3 = BFMCatalogRequestRelationshipBookSeries;
  }
  uint64_t v4 = *v3;
  uint64_t v6 = sub_22898B668(v15);
  if (*v5)
  {
    unint64_t v7 = v5;
    uint64_t v8 = sub_2289DEBC0();
    uint64_t v10 = v8;
    uint64_t v11 = v9;
    if (a1)
    {
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v14 = *v7;
      *unint64_t v7 = 0x8000000000000000;
      sub_22897B3E8(a1, v10, v11, isUniquelyReferenced_nonNull_native);
      *unint64_t v7 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2289D7508(v8, v9);
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  v6(v15, 0);

  return swift_release();
}

char *MAsset.enrichIfNeeded(with:)()
{
  unint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (void *)MAsset.seriesResource.getter();

  if (v3)
  {
    uint64_t v4 = v1;
  }
  else
  {
    uint64_t v5 = *(void **)&v1[OBJC_IVAR____TtC14BookFoundation9MResource_config + 8];
    v13[0] = v1[OBJC_IVAR____TtC14BookFoundation9MResource_config];
    uint64_t v14 = v5;
    uint64_t v6 = *(uint64_t (**)(uint64_t, char *))(ObjectType + 128);
    id v7 = v5;
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v9 = (char *)v6(v8, v13);
    unint64_t v1 = v9;
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = (void *)MSeries.trimmed()();
      sub_22897B848(v11);
    }
  }
  return v1;
}

uint64_t sub_22897ACBC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_22897AD90(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_228952C2C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_228952C2C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_2289559D0((uint64_t)v12);
  return v7;
}

uint64_t sub_22897AD90(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_2289DF160();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_22897AF4C(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_2289DF2A0();
  if (!v8)
  {
    sub_2289DF330();
    __break(1u);
LABEL_17:
    uint64_t result = sub_2289DF3C0();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_22897AF4C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_22897AFE4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_22897B15C(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_22897B15C(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_22897AFE4(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_2289A525C(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_2289DF260();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_2289DF330();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_2289DECB0();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_2289DF3C0();
    __break(1u);
LABEL_14:
    uint64_t result = sub_2289DF330();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t sub_22897B15C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_228952BB0(&qword_2682844F8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  id v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

_OWORD *sub_22897B2AC(_OWORD *a1, char a2, char a3)
{
  unint64_t v4 = (void **)v3;
  char v7 = a2 & 1;
  int64_t v8 = (void *)*v3;
  unint64_t v10 = sub_2289D71A4(a2 & 1);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_2289986D8();
      goto LABEL_7;
    }
    sub_228996F2C(v13, a3 & 1);
    unint64_t v19 = sub_2289D71A4(v7);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      id v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_2289DF500();
    __break(1u);
    return result;
  }
LABEL_7:
  id v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    sub_2289559D0((uint64_t)v17);
    return sub_22897D02C(a1, v17);
  }
LABEL_13:

  return sub_22897B558(v10, v7, a1, v16);
}

uint64_t sub_22897B3E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_2289D7094(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_228998898();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_228997204(v15, a4 & 1);
  unint64_t v21 = sub_2289D7094(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = sub_2289DF500();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  int v23 = (uint64_t *)(v18[6] + 16 * v12);
  *int v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_22897B558(unint64_t a1, char a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2 & 1;
  uint64_t result = sub_22897D02C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_22897B5C4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

void *sub_22897B624@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, unsigned char *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_22897B668(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_2289DEF90();
  uint64_t v8 = result;
  if (v2)
  {
    char v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_228952FEC(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_22897B700()
{
  unint64_t result = qword_268284428;
  if (!qword_268284428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284428);
  }
  return result;
}

uint64_t type metadata accessor for MAsset()
{
  uint64_t result = qword_268284498;
  if (!qword_268284498) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_22897B7A0()
{
  unint64_t result = qword_268284430;
  if (!qword_268284430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284430);
  }
  return result;
}

unint64_t sub_22897B7F4()
{
  unint64_t result = qword_268284438;
  if (!qword_268284438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284438);
  }
  return result;
}

uint64_t sub_22897B848(void *a1)
{
  if (a1)
  {
    sub_228952BB0(&qword_2682844E8);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_2289E12A0;
    *(void *)(v3 + 32) = a1;
    uint64_t v11 = v3;
    sub_2289DEE30();
    uint64_t v4 = v11;
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8EE78];
  }
  char v5 = *(unsigned char *)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource_config);
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource_config + 8);
  type metadata accessor for MResourceSet();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = MEMORY[0x263F8EE80];
  *(unsigned char *)(v7 + 24) = v5;
  *(void *)(v7 + 32) = v6;
  *(void *)(v7 + 40) = 0;
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + 56) = v4;
  id v8 = v6;
  id v9 = a1;
  sub_228973854(1);

  return sub_22897AA58(v7);
}

uint64_t sub_22897B938(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v4 = a3 >> 1;
  uint64_t result = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = sub_2289DEF90();
  uint64_t v12 = result;
  uint64_t v7 = v4 - a2;
  if (v4 == a2) {
    return result;
  }
  if (v4 <= a2)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  id v8 = (uint64_t *)(a1 + 16 * a2 + 8);
  do
  {
    uint64_t v9 = *(v8 - 1);
    uint64_t v10 = *v8;
    swift_bridgeObjectRetain();
    sub_228952FEC(&v11, v9, v10);
    swift_bridgeObjectRelease();
    v8 += 2;
    --v7;
  }
  while (v7);
  return v12;
}

uint64_t sub_22897B9EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_22897CFD8();
  uint64_t result = sub_2289DEF90();
  uint64_t v7 = result;
  if (v2)
  {
    int64_t v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      unsigned int v5 = *v4++;
      sub_22895319C(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_22897BA60()
{
  unint64_t v0 = sub_2289DF3F0();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_22897BAAC(char a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_2682844F0);
  MEMORY[0x270FA5388](v4 - 8);
  char v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    if (a1)
    {
      unint64_t v7 = 0x65636E6575716573;
      if (a1 == 1)
      {
        unint64_t v8 = 0xEE007265626D754ELL;
      }
      else
      {
        unint64_t v7 = 0xD000000000000014;
        unint64_t v8 = 0x80000002289E4EC0;
      }
    }
    else
    {
      unint64_t v8 = 0xEA0000000000656DLL;
      unint64_t v7 = 0x614E736569726573;
    }
    *(void *)&long long v15 = v7;
    *((void *)&v15 + 1) = v8;
    sub_2289DF200();
    if (*(void *)(a2 + 16) && (unint64_t v9 = sub_2289D7160((uint64_t)v17), (v10 & 1) != 0))
    {
      sub_228952C2C(*(void *)(a2 + 56) + 32 * v9, (uint64_t)&v15);
    }
    else
    {
      long long v15 = 0u;
      long long v16 = 0u;
    }
    sub_228952AFC((uint64_t)v17);
    if (*((void *)&v16 + 1))
    {
      sub_22897D02C(&v15, v18);
      sub_228952C2C((uint64_t)v18, (uint64_t)v17);
      if (swift_dynamicCast())
      {
        uint64_t v11 = sub_2289DE920();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
        a2 = sub_2289DF120();
        uint64_t v13 = v12;
        swift_bridgeObjectRelease();
        sub_22896EABC((uint64_t)v6, &qword_2682844F0);
        sub_2289559D0((uint64_t)v18);
        if ((v13 & 0x100000000) == 0) {
          return a2;
        }
      }
      else
      {
        sub_2289559D0((uint64_t)v18);
      }
    }
    else
    {
      sub_22896EABC((uint64_t)&v15, &qword_26AECF7D8);
    }
    return 0;
  }
  return a2;
}

uint64_t sub_22897BD0C()
{
  unint64_t v0 = sub_2289DF4C0();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1C) {
    return 28;
  }
  else {
    return v0;
  }
}

uint64_t sub_22897BD60(char a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  unsigned __int8 v6 = sub_228975028(a1);
  sub_2289DF200();
  if (*(void *)(a2 + 16) && (unint64_t v3 = sub_2289D7160((uint64_t)v7), (v4 & 1) != 0))
  {
    sub_228952C2C(*(void *)(a2 + 56) + 32 * v3, (uint64_t)&v8);
  }
  else
  {
    long long v8 = 0u;
    long long v9 = 0u;
  }
  sub_228952AFC((uint64_t)v7);
  if (*((void *)&v9 + 1))
  {
    if (swift_dynamicCast()) {
      return v6;
    }
  }
  else
  {
    sub_22896EABC((uint64_t)&v8, &qword_26AECF7D8);
  }
  return 0;
}

unint64_t sub_22897BE40()
{
  unint64_t result = qword_268284440;
  if (!qword_268284440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284440);
  }
  return result;
}

unint64_t sub_22897BE94()
{
  unint64_t result = qword_268284448;
  if (!qword_268284448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284448);
  }
  return result;
}

unsigned char *sub_22897BEE8@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (unint64_t result = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *sub_22897BF58@<X0>(unsigned char *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

unint64_t sub_22897BF9C()
{
  unint64_t result = qword_268284458;
  if (!qword_268284458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284458);
  }
  return result;
}

unint64_t sub_22897BFF0()
{
  unint64_t result = qword_268284460;
  if (!qword_268284460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284460);
  }
  return result;
}

unint64_t sub_22897C044()
{
  unint64_t result = qword_268284468;
  if (!qword_268284468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284468);
  }
  return result;
}

unint64_t sub_22897C098()
{
  unint64_t result = qword_268284470;
  if (!qword_268284470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284470);
  }
  return result;
}

unint64_t sub_22897C0EC()
{
  unint64_t result = qword_268284B20;
  if (!qword_268284B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284B20);
  }
  return result;
}

unint64_t sub_22897C144()
{
  unint64_t result = qword_268284478;
  if (!qword_268284478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284478);
  }
  return result;
}

unint64_t sub_22897C19C()
{
  unint64_t result = qword_268284480;
  if (!qword_268284480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284480);
  }
  return result;
}

unint64_t sub_22897C1F4()
{
  unint64_t result = qword_268284488;
  if (!qword_268284488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284488);
  }
  return result;
}

unint64_t sub_22897C24C()
{
  unint64_t result = qword_268284490;
  if (!qword_268284490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284490);
  }
  return result;
}

uint64_t sub_22897C2A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MAsset.seriesResource.getter();
  *a1 = result;
  return result;
}

void sub_22897C2CC(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  sub_22897B848(v1);
}

uint64_t sub_22897C31C()
{
  return type metadata accessor for MAsset();
}

uint64_t sub_22897C324()
{
  uint64_t result = sub_2289DE880();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for MAsset(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MAsset);
}

uint64_t dispatch thunk of MAsset.isBook.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of MAsset.isAudiobook.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

ValueMetadata *type metadata accessor for MAsset.CacheKey()
{
  return &type metadata for MAsset.CacheKey;
}

ValueMetadata *type metadata accessor for MAsset.OfferType()
{
  return &type metadata for MAsset.OfferType;
}

uint64_t sub_22897C4B0()
{
  return 0;
}

ValueMetadata *type metadata accessor for MAsset.PreviewKeys()
{
  return &type metadata for MAsset.PreviewKeys;
}

ValueMetadata *type metadata accessor for MAsset.ArtworkKeys()
{
  return &type metadata for MAsset.ArtworkKeys;
}

uint64_t getEnumTagSinglePayload for MAsset.OfferKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MAsset.OfferKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22897C63CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MAsset.OfferKeys()
{
  return &type metadata for MAsset.OfferKeys;
}

ValueMetadata *type metadata accessor for MAsset.DescriptionAttributes()
{
  return &type metadata for MAsset.DescriptionAttributes;
}

unsigned char *_s14BookFoundation6MAssetC9OfferTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22897C750);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MAsset.EditorialNotesKeys()
{
  return &type metadata for MAsset.EditorialNotesKeys;
}

unsigned char *_s14BookFoundation6MAssetC8CacheKeyOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22897C854);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MAsset.UserRatingKeys()
{
  return &type metadata for MAsset.UserRatingKeys;
}

uint64_t getEnumTagSinglePayload for MBook.Attributes(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s14BookFoundation6MAssetC11PreviewKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22897C978);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MAsset.PublisherInfoKeys()
{
  return &type metadata for MAsset.PublisherInfoKeys;
}

uint64_t getEnumTagSinglePayload for AssetType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s14BookFoundation6MAssetC11ArtworkKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22897CB0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MAsset.SeriesInfoKeys()
{
  return &type metadata for MAsset.SeriesInfoKeys;
}

uint64_t getEnumTagSinglePayload for MAsset.Attributes(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE5) {
    goto LABEL_17;
  }
  if (a2 + 27 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 27) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 27;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 27;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 27;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1C;
  int v8 = v6 - 28;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MAsset.Attributes(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 27 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 27) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE4)
  {
    unsigned int v6 = ((a2 - 229) >> 8) + 1;
    *uint64_t result = a2 + 27;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22897CCA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 27;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MAsset.Attributes()
{
  return &type metadata for MAsset.Attributes;
}

unint64_t sub_22897CCDC()
{
  unint64_t result = qword_2682844A8;
  if (!qword_2682844A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682844A8);
  }
  return result;
}

unint64_t sub_22897CD34()
{
  unint64_t result = qword_2682844B0;
  if (!qword_2682844B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682844B0);
  }
  return result;
}

unint64_t sub_22897CD8C()
{
  unint64_t result = qword_2682844B8;
  if (!qword_2682844B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682844B8);
  }
  return result;
}

unint64_t sub_22897CDE4()
{
  unint64_t result = qword_2682844C0;
  if (!qword_2682844C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682844C0);
  }
  return result;
}

unint64_t sub_22897CE3C()
{
  unint64_t result = qword_2682844C8;
  if (!qword_2682844C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682844C8);
  }
  return result;
}

unint64_t sub_22897CE94()
{
  unint64_t result = qword_2682844D0;
  if (!qword_2682844D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682844D0);
  }
  return result;
}

unint64_t sub_22897CEEC()
{
  unint64_t result = qword_2682844D8;
  if (!qword_2682844D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682844D8);
  }
  return result;
}

uint64_t sub_22897CF40()
{
  unint64_t v0 = sub_2289DF3F0();
  swift_bridgeObjectRelease();
  if (v0 >= 4) {
    return 4;
  }
  else {
    return v0;
  }
}

uint64_t sub_22897CF8C()
{
  unint64_t v0 = sub_2289DF3F0();
  swift_bridgeObjectRelease();
  if (v0 >= 7) {
    return 7;
  }
  else {
    return v0;
  }
}

unint64_t sub_22897CFD8()
{
  unint64_t result = qword_2682844E0;
  if (!qword_2682844E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682844E0);
  }
  return result;
}

_OWORD *sub_22897D02C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t StaticFeatureFlagsKey.domain.getter(uint64_t a1)
{
  return sub_22897D464(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t StaticFeatureFlagsKey.feature.getter()
{
  return *(void *)v0;
}

uint64_t StaticFeatureFlagsKey.init(stringLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = a3;
  return result;
}

uint64_t StaticFeatureFlagsKey.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = a3;
  *(unsigned char *)(a4 + 17) = 0;
  return result;
}

uint64_t static StaticFeatureFlagsKey.== infix(_:_:)()
{
  uint64_t v0 = sub_2289DF270();
  uint64_t v2 = v1;
  if (v0 == sub_2289DF270() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_2289DF480();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_22897D128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return StaticFeatureFlagsKey.init(stringLiteral:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), a2);
}

uint64_t sub_22897D138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return StaticFeatureFlagsKey.init(rawValue:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), a2);
}

uint64_t sub_22897D148@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = StaticFeatureFlagsKey.feature.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_22897D178(uint64_t a1)
{
  return sub_22897D464(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t static DynamicFeatureFlagsKey.domain.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

const char *static FeatureFlagsDomain.AppleAccount.domain.getter()
{
  return "AppleAccount";
}

const char *sub_22897D220()
{
  return "AppleAccount";
}

const char *static FeatureFlagsDomain.Books.domain.getter()
{
  return "Books";
}

const char *sub_22897D248()
{
  return "Books";
}

const char *static FeatureFlagsDomain.UIKit.domain.getter()
{
  return "UIKit";
}

const char *sub_22897D270()
{
  return "UIKit";
}

uint64_t RawRepresentable<>.domain.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22897D2B4(a1, a2, a3, MEMORY[0x263F3C080]);
}

uint64_t RawRepresentable<>.feature.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22897D2B4(a1, a2, a3, MEMORY[0x263F3C088]);
}

uint64_t sub_22897D2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  long long v9 = (char *)&v12 - v8;
  _sSY14BookFoundation12FeatureFlags0cD3Key8RawValueRpzrlE3keyAEvg_0();
  uint64_t v10 = a4(AssociatedTypeWitness, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return v10;
}

uint64_t RawRepresentable<>.isEnabled.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[3] = swift_getAssociatedTypeWitness();
  v5[4] = a3;
  sub_22896EC88(v5);
  _sSY14BookFoundation12FeatureFlags0cD3Key8RawValueRpzrlE3keyAEvg_0();
  LOBYTE(a3) = sub_2289DE9E0();
  sub_2289559D0((uint64_t)v5);
  return a3 & 1;
}

uint64_t sub_22897D464(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_22897D498()
{
  return swift_getWitnessTable();
}

uint64_t sub_22897D4B4()
{
  return MEMORY[0x263F8DC38];
}

uint64_t sub_22897D4C0()
{
  return swift_getWitnessTable();
}

uint64_t sub_22897D4DC()
{
  return MEMORY[0x263F8DC50];
}

uint64_t sub_22897D4E8()
{
  return MEMORY[0x263F8DC48];
}

uint64_t sub_22897D4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t sub_22897D4FC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_22897D51C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

uint64_t type metadata accessor for StaticFeatureFlagsKey()
{
  return sub_22897D5C8();
}

uint64_t dispatch thunk of DynamicFeatureFlagsKey.init(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of static StaticFeatureFlagsDomain.domain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for FeatureFlagsDomain()
{
  return &type metadata for FeatureFlagsDomain;
}

ValueMetadata *type metadata accessor for FeatureFlagsDomain.AppleAccount()
{
  return &type metadata for FeatureFlagsDomain.AppleAccount;
}

ValueMetadata *type metadata accessor for FeatureFlagsDomain.Books()
{
  return &type metadata for FeatureFlagsDomain.Books;
}

ValueMetadata *type metadata accessor for FeatureFlagsDomain.UIKit()
{
  return &type metadata for FeatureFlagsDomain.UIKit;
}

uint64_t sub_22897D5C8()
{
  return swift_getGenericMetadata();
}

void AudiobookSeriesInfo.contentKind.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void AudiobookSeriesInfo.seriesType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

void AudiobookSeriesInfo.narratorInfo.getter(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LibraryAudiobookSeriesInfo();
  MEMORY[0x270FA5388](v3 - 8);
  char v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_228952BB0(&qword_268284500);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (void **)&v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for AudiobookSeriesInfo();
  sub_22897D838(v1 + *(int *)(v9 + 24), (uint64_t)v8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_22897D8A0((uint64_t)v8, (uint64_t)v5);
      uint64_t v11 = (int *)sub_228952BB0(&qword_268284508);
      uint64_t v12 = &v5[v11[23]];
      uint64_t v13 = *(void *)v12;
      char v14 = v12[8];
      uint64_t v15 = *(void *)&v5[v11[24]];
      char v16 = v5[v11[25]];
      unsigned __int8 v25 = 1;
      swift_bridgeObjectRetain();
      SeriesArtistInfo.init(hasUniqueArtists:count:names:artistType:)(v16, v13, v14, v15, &v25, a1);
      sub_22897DAA8((uint64_t)v5);
      return;
    }
    uint64_t v17 = *v8;
  }
  else
  {
    uint64_t v17 = *(void **)((char *)v8 + *(int *)(sub_228952BB0(&qword_268284510) + 48));
    sub_22897DAA8((uint64_t)v8);
  }
  char v18 = v17[OBJC_IVAR____TtC14BookFoundation16MAudiobookSeries_hasUniqueNarrators];
  uint64_t v19 = MAudiobookSeries.narratorCount.getter();
  char v21 = v20 & 1;
  uint64_t v22 = MAudiobookSeries.narratorNames.getter();
  unsigned __int8 v24 = 1;
  SeriesArtistInfo.init(hasUniqueArtists:count:names:artistType:)(v18, v19, v21, v22, &v24, a1);
}

uint64_t type metadata accessor for AudiobookSeriesInfo()
{
  uint64_t result = qword_268284540;
  if (!qword_268284540) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_22897D838(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22897D8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LibraryAudiobookSeriesInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AudiobookSeriesInfo.dataSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AudiobookSeriesInfo() + 24);

  return sub_22897D838(v3, a1);
}

uint64_t AudiobookSeriesInfo.init(dataSource:)@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  *a2 = 1;
  uint64_t v4 = type metadata accessor for AudiobookSeriesInfo();
  uint64_t result = sub_22897DB04(a1, (uint64_t)a2 + *(int *)(v4 + 24));
  *(void *)((char *)a2 + *(int *)(v4 + 28)) = 0;
  return result;
}

uint64_t AudiobookSeriesInfo.additionalStoreAssetsForEnrichment.getter()
{
  type metadata accessor for AudiobookSeriesInfo();

  return swift_bridgeObjectRetain();
}

uint64_t AudiobookSeriesInfo.init(dataSource:additionalStoreAssetsForEnrichment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  *a3 = 1;
  uint64_t v6 = type metadata accessor for AudiobookSeriesInfo();
  uint64_t result = sub_22897DB04(a1, (uint64_t)a3 + *(int *)(v6 + 24));
  *(void *)((char *)a3 + *(int *)(v6 + 28)) = a2;
  return result;
}

void sub_22897DA30(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

void sub_22897DA3C(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_22897DA48()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_22897DA54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22897D838(v2 + *(int *)(a1 + 24), a2);
}

uint64_t sub_22897DA64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  *a3 = 1;
  uint64_t result = sub_22897DB04(a1, (uint64_t)a3 + *(int *)(a2 + 24));
  *(void *)((char *)a3 + *(int *)(a2 + 28)) = 0;
  return result;
}

uint64_t sub_22897DAA8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LibraryAudiobookSeriesInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22897DB04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_22897DB6C()
{
  return sub_22897DD4C(&qword_268284218, (void (*)(uint64_t))type metadata accessor for AudiobookInfo);
}

uint64_t sub_22897DBB4()
{
  return sub_22897DD4C(&qword_268284518, (void (*)(uint64_t))type metadata accessor for LibraryAudiobookSeriesInfo);
}

uint64_t sub_22897DBFC(uint64_t a1)
{
  uint64_t result = sub_22897DD4C(&qword_268284520, (void (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_22897DC54()
{
  return sub_22897DD4C(&qword_268284528, (void (*)(uint64_t))type metadata accessor for LibraryAudiobookSeriesInfo);
}

uint64_t sub_22897DC9C(uint64_t a1)
{
  uint64_t result = sub_22897DD4C(&qword_268284530, (void (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_22897DCF4(uint64_t a1)
{
  uint64_t result = sub_22897DD4C(&qword_268284538, (void (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_22897DD4C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AudiobookSeriesInfo(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    a1[1] = *((unsigned char *)a2 + 1);
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (uint64_t)a2 + v7;
    sub_228952BB0(&qword_268284500);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      unsigned __int8 v24 = *(void **)v9;
      *uint64_t v8 = *(void *)v9;
      id v25 = v24;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = *(void *)(v9 + 8);
      *uint64_t v8 = *(void *)v9;
      v8[1] = v11;
      uint64_t v12 = *(void *)(v9 + 24);
      unsigned char v8[2] = *(void *)(v9 + 16);
      v8[3] = v12;
      uint64_t v13 = *(void *)(v9 + 40);
      v8[4] = *(void *)(v9 + 32);
      v8[5] = v13;
      uint64_t v14 = *(void *)(v9 + 56);
      v8[6] = *(void *)(v9 + 48);
      v8[7] = v14;
      uint64_t v15 = *(void *)(v9 + 72);
      char v8[8] = *(void *)(v9 + 64);
      v8[9] = v15;
      v8[10] = *(void *)(v9 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v16 = (int *)sub_228952BB0(&qword_268284508);
      uint64_t v17 = v16[14];
      char v18 = (char *)v8 + v17;
      uint64_t v19 = (const void *)(v9 + v17);
      uint64_t v20 = sub_2289DE880();
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        uint64_t v22 = sub_228952BB0(&qword_2682841E0);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      *(void *)((char *)v8 + v16[15]) = *(void *)(v9 + v16[15]);
      uint64_t v38 = v16[16];
      uint64_t v39 = (char *)v8 + v38;
      uint64_t v40 = v9 + v38;
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = *(unsigned char *)(v40 + 8);
      *(void *)((char *)v8 + v16[17]) = *(void *)(v9 + v16[17]);
      *((unsigned char *)v8 + v16[18]) = *(unsigned char *)(v9 + v16[18]);
      *(void *)((char *)v8 + v16[19]) = *(void *)(v9 + v16[19]);
      *((unsigned char *)v8 + v16[20]) = *(unsigned char *)(v9 + v16[20]);
      *((unsigned char *)v8 + v16[21]) = *(unsigned char *)(v9 + v16[21]);
      uint64_t v41 = v16[22];
      uint64_t v42 = (char *)v8 + v41;
      uint64_t v43 = v9 + v41;
      uint64_t v44 = *(void *)(v43 + 8);
      *(void *)uint64_t v42 = *(void *)v43;
      *((void *)v42 + 1) = v44;
      v42[16] = *(unsigned char *)(v43 + 16);
      uint64_t v45 = v16[23];
      uint64_t v46 = (char *)v8 + v45;
      uint64_t v47 = v9 + v45;
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = *(unsigned char *)(v47 + 8);
      *(void *)((char *)v8 + v16[24]) = *(void *)(v9 + v16[24]);
      *((unsigned char *)v8 + v16[25]) = *(unsigned char *)(v9 + v16[25]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v26 = *(void *)(v9 + 8);
      *uint64_t v8 = *(void *)v9;
      v8[1] = v26;
      uint64_t v27 = *(void *)(v9 + 24);
      unsigned char v8[2] = *(void *)(v9 + 16);
      v8[3] = v27;
      uint64_t v28 = *(void *)(v9 + 40);
      v8[4] = *(void *)(v9 + 32);
      v8[5] = v28;
      uint64_t v29 = *(void *)(v9 + 56);
      v8[6] = *(void *)(v9 + 48);
      v8[7] = v29;
      uint64_t v30 = *(void *)(v9 + 72);
      char v8[8] = *(void *)(v9 + 64);
      v8[9] = v30;
      v8[10] = *(void *)(v9 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v31 = (int *)sub_228952BB0(&qword_268284508);
      uint64_t v32 = v31[14];
      uint64_t v33 = (char *)v8 + v32;
      uint64_t v34 = (const void *)(v9 + v32);
      uint64_t v35 = sub_2289DE880();
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        uint64_t v37 = sub_228952BB0(&qword_2682841E0);
        memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      *(void *)((char *)v8 + v31[15]) = *(void *)(v9 + v31[15]);
      uint64_t v48 = v31[16];
      uint64_t v49 = (char *)v8 + v48;
      uint64_t v50 = v9 + v48;
      *(void *)uint64_t v49 = *(void *)v50;
      v49[8] = *(unsigned char *)(v50 + 8);
      *(void *)((char *)v8 + v31[17]) = *(void *)(v9 + v31[17]);
      *((unsigned char *)v8 + v31[18]) = *(unsigned char *)(v9 + v31[18]);
      *(void *)((char *)v8 + v31[19]) = *(void *)(v9 + v31[19]);
      *((unsigned char *)v8 + v31[20]) = *(unsigned char *)(v9 + v31[20]);
      *((unsigned char *)v8 + v31[21]) = *(unsigned char *)(v9 + v31[21]);
      uint64_t v51 = v31[22];
      uint64_t v52 = (char *)v8 + v51;
      uint64_t v53 = v9 + v51;
      uint64_t v54 = *(void *)(v53 + 8);
      *(void *)uint64_t v52 = *(void *)v53;
      *((void *)v52 + 1) = v54;
      v52[16] = *(unsigned char *)(v53 + 16);
      uint64_t v55 = v31[23];
      uint64_t v56 = (char *)v8 + v55;
      uint64_t v57 = v9 + v55;
      *(void *)uint64_t v56 = *(void *)v57;
      v56[8] = *(unsigned char *)(v57 + 8);
      *(void *)((char *)v8 + v31[24]) = *(void *)(v9 + v31[24]);
      *((unsigned char *)v8 + v31[25]) = *(unsigned char *)(v9 + v31[25]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v58 = *(int *)(sub_228952BB0(&qword_268284510) + 48);
      uint64_t v59 = *(void **)(v9 + v58);
      *(void *)((char *)v8 + v58) = v59;
      id v60 = v59;
    }
    swift_storeEnumTagMultiPayload();
    *(void *)((char *)v4 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AudiobookSeriesInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void **)(a1 + *(int *)(a2 + 24));
  sub_228952BB0(&qword_268284500);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v7 = *v2;
LABEL_8:

    goto LABEL_12;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = (char *)v2 + *(int *)(sub_228952BB0(&qword_268284508) + 56);
    uint64_t v5 = sub_2289DE880();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void **)((char *)v2 + *(int *)(sub_228952BB0(&qword_268284510) + 48));
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = (char *)v2 + *(int *)(sub_228952BB0(&qword_268284508) + 56);
  uint64_t v9 = sub_2289DE880();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_12:

  return swift_bridgeObjectRelease();
}

unsigned char *initializeWithCopy for AudiobookSeriesInfo(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  sub_228952BB0(&qword_268284500);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v22 = *(void **)v8;
    *uint64_t v7 = *(void *)v8;
    id v23 = v22;
  }
  else
  {
    uint64_t v60 = v3;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = *((void *)v8 + 1);
      *uint64_t v7 = *(void *)v8;
      v7[1] = v10;
      uint64_t v11 = *((void *)v8 + 3);
      void v7[2] = *((void *)v8 + 2);
      v7[3] = v11;
      uint64_t v12 = *((void *)v8 + 5);
      v7[4] = *((void *)v8 + 4);
      uint64_t v7[5] = v12;
      uint64_t v13 = *((void *)v8 + 7);
      v7[6] = *((void *)v8 + 6);
      v7[7] = v13;
      uint64_t v14 = *((void *)v8 + 9);
      v7[8] = *((void *)v8 + 8);
      v7[9] = v14;
      v7[10] = *((void *)v8 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v15 = (int *)sub_228952BB0(&qword_268284508);
      uint64_t v16 = v15[14];
      uint64_t v17 = (char *)v7 + v16;
      char v18 = &v8[v16];
      uint64_t v19 = sub_2289DE880();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = sub_228952BB0(&qword_2682841E0);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, unsigned char *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(void *)((char *)v7 + v15[15]) = *(void *)&v8[v15[15]];
      uint64_t v36 = v15[16];
      uint64_t v37 = (char *)v7 + v36;
      uint64_t v38 = &v8[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      v37[8] = v38[8];
      *(void *)((char *)v7 + v15[17]) = *(void *)&v8[v15[17]];
      *((unsigned char *)v7 + v15[18]) = v8[v15[18]];
      *(void *)((char *)v7 + v15[19]) = *(void *)&v8[v15[19]];
      *((unsigned char *)v7 + v15[20]) = v8[v15[20]];
      *((unsigned char *)v7 + v15[21]) = v8[v15[21]];
      uint64_t v39 = v15[22];
      uint64_t v40 = (char *)v7 + v39;
      uint64_t v41 = &v8[v39];
      uint64_t v42 = *((void *)v41 + 1);
      *(void *)uint64_t v40 = *(void *)v41;
      *((void *)v40 + 1) = v42;
      v40[16] = v41[16];
      uint64_t v43 = v15[23];
      uint64_t v44 = (char *)v7 + v43;
      uint64_t v45 = &v8[v43];
      *(void *)uint64_t v44 = *(void *)v45;
      v44[8] = v45[8];
      *(void *)((char *)v7 + v15[24]) = *(void *)&v8[v15[24]];
      *((unsigned char *)v7 + v15[25]) = v8[v15[25]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v24 = *((void *)v8 + 1);
      *uint64_t v7 = *(void *)v8;
      v7[1] = v24;
      uint64_t v25 = *((void *)v8 + 3);
      void v7[2] = *((void *)v8 + 2);
      v7[3] = v25;
      uint64_t v26 = *((void *)v8 + 5);
      v7[4] = *((void *)v8 + 4);
      uint64_t v7[5] = v26;
      uint64_t v27 = *((void *)v8 + 7);
      v7[6] = *((void *)v8 + 6);
      v7[7] = v27;
      uint64_t v28 = *((void *)v8 + 9);
      v7[8] = *((void *)v8 + 8);
      v7[9] = v28;
      v7[10] = *((void *)v8 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v29 = (int *)sub_228952BB0(&qword_268284508);
      uint64_t v30 = v29[14];
      id v31 = (char *)v7 + v30;
      uint64_t v32 = &v8[v30];
      uint64_t v33 = sub_2289DE880();
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = sub_228952BB0(&qword_2682841E0);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, unsigned char *, uint64_t))(v34 + 16))(v31, v32, v33);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      *(void *)((char *)v7 + v29[15]) = *(void *)&v8[v29[15]];
      uint64_t v46 = v29[16];
      uint64_t v47 = (char *)v7 + v46;
      uint64_t v48 = &v8[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      v47[8] = v48[8];
      *(void *)((char *)v7 + v29[17]) = *(void *)&v8[v29[17]];
      *((unsigned char *)v7 + v29[18]) = v8[v29[18]];
      *(void *)((char *)v7 + v29[19]) = *(void *)&v8[v29[19]];
      *((unsigned char *)v7 + v29[20]) = v8[v29[20]];
      *((unsigned char *)v7 + v29[21]) = v8[v29[21]];
      uint64_t v49 = v29[22];
      uint64_t v50 = (char *)v7 + v49;
      uint64_t v51 = &v8[v49];
      uint64_t v52 = *((void *)v51 + 1);
      *(void *)uint64_t v50 = *(void *)v51;
      *((void *)v50 + 1) = v52;
      v50[16] = v51[16];
      uint64_t v53 = v29[23];
      uint64_t v54 = (char *)v7 + v53;
      uint64_t v55 = &v8[v53];
      *(void *)uint64_t v54 = *(void *)v55;
      char v54[8] = v55[8];
      *(void *)((char *)v7 + v29[24]) = *(void *)&v8[v29[24]];
      *((unsigned char *)v7 + v29[25]) = v8[v29[25]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v56 = *(int *)(sub_228952BB0(&qword_268284510) + 48);
      uint64_t v57 = *(void **)&v8[v56];
      *(void *)((char *)v7 + v56) = v57;
      id v58 = v57;
    }
    uint64_t v3 = v60;
  }
  swift_storeEnumTagMultiPayload();
  *(void *)&a1[*(int *)(v3 + 28)] = *(void *)&a2[*(int *)(v3 + 28)];
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *assignWithCopy for AudiobookSeriesInfo(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = &a1[v6];
    uint64_t v8 = &a2[v6];
    sub_22897F0A4((uint64_t)&a1[v6]);
    sub_228952BB0(&qword_268284500);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v17 = *(void **)v8;
      *uint64_t v7 = *(void *)v8;
      id v18 = v17;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *uint64_t v7 = *(void *)v8;
      v7[1] = *((void *)v8 + 1);
      void v7[2] = *((void *)v8 + 2);
      v7[3] = *((void *)v8 + 3);
      v7[4] = *((void *)v8 + 4);
      uint64_t v7[5] = *((void *)v8 + 5);
      v7[6] = *((void *)v8 + 6);
      v7[7] = *((void *)v8 + 7);
      v7[8] = *((void *)v8 + 8);
      v7[9] = *((void *)v8 + 9);
      v7[10] = *((void *)v8 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v10 = (int *)sub_228952BB0(&qword_268284508);
      uint64_t v11 = v10[14];
      uint64_t v12 = (char *)v7 + v11;
      uint64_t v13 = &v8[v11];
      uint64_t v14 = sub_2289DE880();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = sub_228952BB0(&qword_2682841E0);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, unsigned char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      *(void *)((char *)v7 + v10[15]) = *(void *)&v8[v10[15]];
      uint64_t v26 = v10[16];
      uint64_t v27 = (char *)v7 + v26;
      uint64_t v28 = &v8[v26];
      uint64_t v29 = *(void *)v28;
      v27[8] = v28[8];
      *(void *)uint64_t v27 = v29;
      *(void *)((char *)v7 + v10[17]) = *(void *)&v8[v10[17]];
      *((unsigned char *)v7 + v10[18]) = v8[v10[18]];
      *(void *)((char *)v7 + v10[19]) = *(void *)&v8[v10[19]];
      *((unsigned char *)v7 + v10[20]) = v8[v10[20]];
      *((unsigned char *)v7 + v10[21]) = v8[v10[21]];
      uint64_t v30 = v10[22];
      id v31 = (char *)v7 + v30;
      uint64_t v32 = &v8[v30];
      *(void *)id v31 = *(void *)v32;
      *((void *)v31 + 1) = *((void *)v32 + 1);
      v31[16] = v32[16];
      uint64_t v33 = v10[23];
      uint64_t v34 = (char *)v7 + v33;
      uint64_t v35 = &v8[v33];
      uint64_t v36 = *(void *)v35;
      v34[8] = v35[8];
      *(void *)uint64_t v34 = v36;
      *(void *)((char *)v7 + v10[24]) = *(void *)&v8[v10[24]];
      *((unsigned char *)v7 + v10[25]) = v8[v10[25]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *uint64_t v7 = *(void *)v8;
      v7[1] = *((void *)v8 + 1);
      void v7[2] = *((void *)v8 + 2);
      v7[3] = *((void *)v8 + 3);
      v7[4] = *((void *)v8 + 4);
      uint64_t v7[5] = *((void *)v8 + 5);
      v7[6] = *((void *)v8 + 6);
      v7[7] = *((void *)v8 + 7);
      v7[8] = *((void *)v8 + 8);
      v7[9] = *((void *)v8 + 9);
      v7[10] = *((void *)v8 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v19 = (int *)sub_228952BB0(&qword_268284508);
      uint64_t v20 = v19[14];
      uint64_t v21 = (char *)v7 + v20;
      uint64_t v22 = &v8[v20];
      uint64_t v23 = sub_2289DE880();
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = sub_228952BB0(&qword_2682841E0);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, unsigned char *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      *(void *)((char *)v7 + v19[15]) = *(void *)&v8[v19[15]];
      uint64_t v37 = v19[16];
      uint64_t v38 = (char *)v7 + v37;
      uint64_t v39 = &v8[v37];
      uint64_t v40 = *(void *)v39;
      v38[8] = v39[8];
      *(void *)uint64_t v38 = v40;
      *(void *)((char *)v7 + v19[17]) = *(void *)&v8[v19[17]];
      *((unsigned char *)v7 + v19[18]) = v8[v19[18]];
      *(void *)((char *)v7 + v19[19]) = *(void *)&v8[v19[19]];
      *((unsigned char *)v7 + v19[20]) = v8[v19[20]];
      *((unsigned char *)v7 + v19[21]) = v8[v19[21]];
      uint64_t v41 = v19[22];
      uint64_t v42 = (char *)v7 + v41;
      uint64_t v43 = &v8[v41];
      *(void *)uint64_t v42 = *(void *)v43;
      *((void *)v42 + 1) = *((void *)v43 + 1);
      v42[16] = v43[16];
      uint64_t v44 = v19[23];
      uint64_t v45 = (char *)v7 + v44;
      uint64_t v46 = &v8[v44];
      uint64_t v47 = *(void *)v46;
      v45[8] = v46[8];
      *(void *)uint64_t v45 = v47;
      *(void *)((char *)v7 + v19[24]) = *(void *)&v8[v19[24]];
      *((unsigned char *)v7 + v19[25]) = v8[v19[25]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v48 = *(int *)(sub_228952BB0(&qword_268284510) + 48);
      uint64_t v49 = *(void **)&v8[v48];
      *(void *)((char *)v7 + v48) = v49;
      id v50 = v49;
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)&a1[*(int *)(a3 + 28)] = *(void *)&a2[*(int *)(a3 + 28)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22897F0A4(uint64_t a1)
{
  uint64_t v2 = sub_228952BB0(&qword_268284500);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *initializeWithTake for AudiobookSeriesInfo(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_228952BB0(&qword_268284500);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v46 = v3;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
    *((void *)v7 + 2) = *((void *)v8 + 2);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
    id v18 = (int *)sub_228952BB0(&qword_268284508);
    uint64_t v19 = v18[14];
    uint64_t v20 = &v7[v19];
    uint64_t v21 = &v8[v19];
    uint64_t v22 = sub_2289DE880();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = sub_228952BB0(&qword_2682841E0);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    *(void *)&v7[v18[15]] = *(void *)&v8[v18[15]];
    uint64_t v35 = v18[16];
    uint64_t v36 = &v7[v35];
    uint64_t v37 = &v8[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    *(void *)&v7[v18[17]] = *(void *)&v8[v18[17]];
    v7[v18[18]] = v8[v18[18]];
    *(void *)&v7[v18[19]] = *(void *)&v8[v18[19]];
    v7[v18[20]] = v8[v18[20]];
    v7[v18[21]] = v8[v18[21]];
    uint64_t v38 = v18[22];
    uint64_t v39 = &v7[v38];
    uint64_t v40 = &v8[v38];
    *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
    v39[16] = v40[16];
    uint64_t v41 = v18[23];
    uint64_t v42 = &v7[v41];
    uint64_t v43 = &v8[v41];
    *(void *)uint64_t v42 = *(void *)v43;
    v42[8] = v43[8];
    *(void *)&v7[v18[24]] = *(void *)&v8[v18[24]];
    v7[v18[25]] = v8[v18[25]];
    swift_storeEnumTagMultiPayload();
    uint64_t v3 = v46;
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v45 = v3;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
    *((void *)v7 + 2) = *((void *)v8 + 2);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
    uint64_t v11 = (int *)sub_228952BB0(&qword_268284508);
    uint64_t v12 = v11[14];
    uint64_t v13 = &v7[v12];
    uint64_t v14 = &v8[v12];
    uint64_t v15 = sub_2289DE880();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_228952BB0(&qword_2682841E0);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v3 = v45;
    *(void *)&v7[v11[15]] = *(void *)&v8[v11[15]];
    uint64_t v25 = v11[16];
    uint64_t v26 = &v7[v25];
    uint64_t v27 = &v8[v25];
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    *(void *)&v7[v11[17]] = *(void *)&v8[v11[17]];
    v7[v11[18]] = v8[v11[18]];
    *(void *)&v7[v11[19]] = *(void *)&v8[v11[19]];
    v7[v11[20]] = v8[v11[20]];
    v7[v11[21]] = v8[v11[21]];
    uint64_t v28 = v11[22];
    uint64_t v29 = &v7[v28];
    uint64_t v30 = &v8[v28];
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    v29[16] = v30[16];
    uint64_t v31 = v11[23];
    uint64_t v32 = &v7[v31];
    uint64_t v33 = &v8[v31];
    *(void *)uint64_t v32 = *(void *)v33;
    v32[8] = v33[8];
    *(void *)&v7[v11[24]] = *(void *)&v8[v11[24]];
    v7[v11[25]] = v8[v11[25]];
    uint64_t v34 = sub_228952BB0(&qword_268284510);
    *(void *)&v7[*(int *)(v34 + 48)] = *(void *)&v8[*(int *)(v34 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  *(void *)&a1[*(int *)(v3 + 28)] = *(void *)&a2[*(int *)(v3 + 28)];
  return a1;
}

unsigned char *assignWithTake for AudiobookSeriesInfo(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = &a1[v6];
    uint64_t v8 = &a2[v6];
    sub_22897F0A4((uint64_t)&a1[v6]);
    uint64_t v9 = sub_228952BB0(&qword_268284500);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *((void *)v7 + 2) = *((void *)v8 + 2);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
      *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
      *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
      uint64_t v17 = (int *)sub_228952BB0(&qword_268284508);
      uint64_t v18 = v17[14];
      __dsta = &v7[v18];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = sub_2289DE880();
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        uint64_t v22 = sub_228952BB0(&qword_2682841E0);
        memcpy(__dsta, v19, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(__dsta, v19, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dsta, 0, 1, v20);
      }
      *(void *)&v7[v17[15]] = *(void *)&v8[v17[15]];
      uint64_t v33 = v17[16];
      uint64_t v34 = &v7[v33];
      uint64_t v35 = &v8[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v35[8];
      *(void *)&v7[v17[17]] = *(void *)&v8[v17[17]];
      v7[v17[18]] = v8[v17[18]];
      *(void *)&v7[v17[19]] = *(void *)&v8[v17[19]];
      v7[v17[20]] = v8[v17[20]];
      v7[v17[21]] = v8[v17[21]];
      uint64_t v36 = v17[22];
      uint64_t v37 = &v7[v36];
      uint64_t v38 = &v8[v36];
      *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
      v37[16] = v38[16];
      uint64_t v39 = v17[23];
      uint64_t v40 = &v7[v39];
      uint64_t v41 = &v8[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      v40[8] = v41[8];
      *(void *)&v7[v17[24]] = *(void *)&v8[v17[24]];
      v7[v17[25]] = v8[v17[25]];
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *((void *)v7 + 2) = *((void *)v8 + 2);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
      *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
      *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
      uint64_t v11 = (int *)sub_228952BB0(&qword_268284508);
      uint64_t v12 = v11[14];
      __dst = &v7[v12];
      uint64_t v13 = &v8[v12];
      uint64_t v14 = sub_2289DE880();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = sub_228952BB0(&qword_2682841E0);
        memcpy(__dst, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(__dst, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
      }
      *(void *)&v7[v11[15]] = *(void *)&v8[v11[15]];
      uint64_t v23 = v11[16];
      uint64_t v24 = &v7[v23];
      uint64_t v25 = &v8[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v25[8];
      *(void *)&v7[v11[17]] = *(void *)&v8[v11[17]];
      v7[v11[18]] = v8[v11[18]];
      *(void *)&v7[v11[19]] = *(void *)&v8[v11[19]];
      v7[v11[20]] = v8[v11[20]];
      v7[v11[21]] = v8[v11[21]];
      uint64_t v26 = v11[22];
      uint64_t v27 = &v7[v26];
      uint64_t v28 = &v8[v26];
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
      v27[16] = v28[16];
      uint64_t v29 = v11[23];
      uint64_t v30 = &v7[v29];
      uint64_t v31 = &v8[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      v30[8] = v31[8];
      *(void *)&v7[v11[24]] = *(void *)&v8[v11[24]];
      v7[v11[25]] = v8[v11[25]];
      uint64_t v32 = sub_228952BB0(&qword_268284510);
      *(void *)&v7[*(int *)(v32 + 48)] = *(void *)&v8[*(int *)(v32 + 48)];
LABEL_13:
      swift_storeEnumTagMultiPayload();
      goto LABEL_14;
    }
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
LABEL_14:
  *(void *)&a1[*(int *)(a3 + 28)] = *(void *)&a2[*(int *)(a3 + 28)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AudiobookSeriesInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22897FA7C);
}

uint64_t sub_22897FA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_228952BB0(&qword_268284500);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AudiobookSeriesInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22897FB64);
}

uint64_t sub_22897FB64(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_228952BB0(&qword_268284500);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = a2;
  }
  return result;
}

void sub_22897FC28()
{
  sub_22897FCD0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_22897FCD0()
{
  if (!qword_268284550)
  {
    type metadata accessor for LibraryAudiobookSeriesInfo();
    type metadata accessor for MAudiobookSeries();
    unint64_t v0 = type metadata accessor for ContentDataSource();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268284550);
    }
  }
}

uint64_t sub_22897FD38()
{
  uint64_t result = os_variant_has_internal_content();
  byte_26AECF780 = result;
  return result;
}

uint64_t static Capabilities.isInternalBuild.getter()
{
  if (qword_26AECF788 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return byte_26AECF780;
}

uint64_t static Capabilities.isInternalBuild.setter(char a1)
{
  if (qword_26AECF788 != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  byte_26AECF780 = a1 & 1;
  return result;
}

uint64_t (*static Capabilities.isInternalBuild.modify())()
{
  if (qword_26AECF788 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

ValueMetadata *type metadata accessor for Capabilities()
{
  return &type metadata for Capabilities;
}

uint64_t LibraryAudiobookSeriesInfo.commonInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22897FEF8(v1, a1);
}

uint64_t sub_22897FEF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t LibraryAudiobookSeriesInfo.commonInfo.setter(uint64_t a1)
{
  return sub_22897FF68(a1, v1);
}

uint64_t sub_22897FF68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*LibraryAudiobookSeriesInfo.commonInfo.modify())()
{
  return nullsub_1;
}

uint64_t LibraryAudiobookSeriesInfo.init(commonInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22897FFF8(a1, a2);
}

uint64_t sub_22897FFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_228980060()
{
  return sub_228980260(&qword_2682841C8, (void (*)(uint64_t))type metadata accessor for LibraryAudiobookInfo);
}

uint64_t sub_2289800A8(uint64_t a1)
{
  uint64_t result = sub_228980260(&qword_268284528, (void (*)(uint64_t))type metadata accessor for LibraryAudiobookSeriesInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for LibraryAudiobookSeriesInfo()
{
  uint64_t result = qword_268284568;
  if (!qword_268284568) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_22898014C@<X0>(uint64_t a1@<X8>)
{
  return sub_22897FEF8(v1, a1);
}

uint64_t sub_228980158(uint64_t a1)
{
  uint64_t result = sub_228980260(&qword_268284518, (void (*)(uint64_t))type metadata accessor for LibraryAudiobookSeriesInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2289801B0(uint64_t a1)
{
  uint64_t result = sub_228980260(&qword_268284558, (void (*)(uint64_t))type metadata accessor for LibraryAudiobookSeriesInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228980208(uint64_t a1)
{
  uint64_t result = sub_228980260(&qword_268284560, (void (*)(uint64_t))type metadata accessor for LibraryAudiobookSeriesInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228980260(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for LibraryAudiobookSeriesInfo(void *a1, void *a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284508);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    a1[10] = a2[10];
    uint64_t v12 = *(int *)(v4 + 56);
    uint64_t v30 = (char *)a2 + v12;
    __dst = (char *)a1 + v12;
    uint64_t v13 = sub_2289DE880();
    uint64_t v28 = *(void *)(v13 - 8);
    uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    uint64_t v14 = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29(v30, 1, v14))
    {
      uint64_t v15 = sub_228952BB0(&qword_2682841E0);
      memcpy(__dst, v30, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dst, v30, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v14);
    }
    *(void *)((char *)a1 + v6[15]) = *(void *)((char *)a2 + v6[15]);
    uint64_t v17 = v6[16];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    *(void *)((char *)a1 + v6[17]) = *(void *)((char *)a2 + v6[17]);
    *((unsigned char *)a1 + v6[18]) = *((unsigned char *)a2 + v6[18]);
    *(void *)((char *)a1 + v6[19]) = *(void *)((char *)a2 + v6[19]);
    *((unsigned char *)a1 + v6[20]) = *((unsigned char *)a2 + v6[20]);
    *((unsigned char *)a1 + v6[21]) = *((unsigned char *)a2 + v6[21]);
    uint64_t v20 = v6[22];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = *((void *)v22 + 1);
    *(void *)uint64_t v21 = *(void *)v22;
    *((void *)v21 + 1) = v23;
    v21[16] = v22[16];
    uint64_t v24 = v6[23];
    uint64_t v25 = (char *)a1 + v24;
    uint64_t v26 = (char *)a2 + v24;
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    *(void *)((char *)a1 + v6[24]) = *(void *)((char *)a2 + v6[24]);
    *((unsigned char *)a1 + v6[25]) = *((unsigned char *)a2 + v6[25]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for LibraryAudiobookSeriesInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(sub_228952BB0(&qword_268284508) + 56);
  uint64_t v3 = sub_2289DE880();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for LibraryAudiobookSeriesInfo(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = (int *)sub_228952BB0(&qword_268284508);
  uint64_t v10 = v9[14];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_2289DE880();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = sub_228952BB0(&qword_2682841E0);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(void *)((char *)a1 + v9[15]) = *(void *)((char *)a2 + v9[15]);
  uint64_t v16 = v9[16];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)((char *)a1 + v9[17]) = *(void *)((char *)a2 + v9[17]);
  *((unsigned char *)a1 + v9[18]) = *((unsigned char *)a2 + v9[18]);
  *(void *)((char *)a1 + v9[19]) = *(void *)((char *)a2 + v9[19]);
  *((unsigned char *)a1 + v9[20]) = *((unsigned char *)a2 + v9[20]);
  *((unsigned char *)a1 + v9[21]) = *((unsigned char *)a2 + v9[21]);
  uint64_t v19 = v9[22];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = v22;
  v20[16] = v21[16];
  uint64_t v23 = v9[23];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  *(void *)((char *)a1 + v9[24]) = *(void *)((char *)a2 + v9[24]);
  *((unsigned char *)a1 + v9[25]) = *((unsigned char *)a2 + v9[25]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LibraryAudiobookSeriesInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (int *)sub_228952BB0(&qword_268284508);
  uint64_t v5 = v4[14];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_2289DE880();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10(v7, 1, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(v6, v7, v8);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v13 = sub_228952BB0(&qword_2682841E0);
    memcpy(v6, v7, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
LABEL_7:
  *(void *)((char *)a1 + v4[15]) = *(void *)((char *)a2 + v4[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = v4[16];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)v16;
  v15[8] = v16[8];
  *(void *)uint64_t v15 = v17;
  *(void *)((char *)a1 + v4[17]) = *(void *)((char *)a2 + v4[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v4[18]) = *((unsigned char *)a2 + v4[18]);
  *(void *)((char *)a1 + v4[19]) = *(void *)((char *)a2 + v4[19]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v4[20]) = *((unsigned char *)a2 + v4[20]);
  *((unsigned char *)a1 + v4[21]) = *((unsigned char *)a2 + v4[21]);
  uint64_t v18 = v4[22];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
  *((void *)v19 + 1) = *(void *)((char *)a2 + v18 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[16] = v20[16];
  uint64_t v21 = v4[23];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  char v24 = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v24;
  *(void *)((char *)a1 + v4[24]) = *(void *)((char *)a2 + v4[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v4[25]) = *((unsigned char *)a2 + v4[25]);
  return a1;
}

uint64_t initializeWithTake for LibraryAudiobookSeriesInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v4 = (int *)sub_228952BB0(&qword_268284508);
  uint64_t v5 = v4[14];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_2289DE880();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = sub_228952BB0(&qword_2682841E0);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  *(void *)(a1 + v4[15]) = *(void *)(a2 + v4[15]);
  uint64_t v11 = v4[16];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(void *)(a1 + v4[17]) = *(void *)(a2 + v4[17]);
  *(unsigned char *)(a1 + v4[18]) = *(unsigned char *)(a2 + v4[18]);
  *(void *)(a1 + v4[19]) = *(void *)(a2 + v4[19]);
  *(unsigned char *)(a1 + v4[20]) = *(unsigned char *)(a2 + v4[20]);
  *(unsigned char *)(a1 + v4[21]) = *(unsigned char *)(a2 + v4[21]);
  uint64_t v14 = v4[22];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  uint64_t v17 = v4[23];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  *(void *)(a1 + v4[24]) = *(void *)(a2 + v4[24]);
  *(unsigned char *)(a1 + v4[25]) = *(unsigned char *)(a2 + v4[25]);
  return a1;
}

void *assignWithTake for LibraryAudiobookSeriesInfo(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[6];
  a1[5] = a2[5];
  a1[6] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[8];
  a1[7] = a2[7];
  a1[8] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[10];
  a1[9] = a2[9];
  a1[10] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = (int *)sub_228952BB0(&qword_268284508);
  uint64_t v10 = v9[14];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_2289DE880();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_228952BB0(&qword_2682841E0);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  *(void *)((char *)a1 + v9[15]) = *(void *)((char *)a2 + v9[15]);
  swift_bridgeObjectRelease();
  uint64_t v19 = v9[16];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)((char *)a1 + v9[17]) = *(void *)((char *)a2 + v9[17]);
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v9[18]) = *((unsigned char *)a2 + v9[18]);
  *(void *)((char *)a1 + v9[19]) = *(void *)((char *)a2 + v9[19]);
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v9[20]) = *((unsigned char *)a2 + v9[20]);
  *((unsigned char *)a1 + v9[21]) = *((unsigned char *)a2 + v9[21]);
  uint64_t v22 = v9[22];
  uint64_t v23 = (char *)a1 + v22;
  char v24 = (char *)a2 + v22;
  uint64_t v25 = *(void *)((char *)a2 + v22 + 8);
  *(void *)uint64_t v23 = *(void *)((char *)a2 + v22);
  *((void *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  v23[16] = v24[16];
  uint64_t v26 = v9[23];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  v27[8] = v28[8];
  *(void *)uint64_t v27 = *(void *)v28;
  *(void *)((char *)a1 + v9[24]) = *(void *)((char *)a2 + v9[24]);
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v9[25]) = *((unsigned char *)a2 + v9[25]);
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryAudiobookSeriesInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228981150);
}

uint64_t sub_228981150(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284508);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for LibraryAudiobookSeriesInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2289811D4);
}

uint64_t sub_2289811D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284508);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void sub_228981248()
{
  sub_2289812D4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_2289812D4()
{
  if (!qword_268284578)
  {
    type metadata accessor for LibraryAudiobookInfo();
    sub_228980260(&qword_2682841C8, (void (*)(uint64_t))type metadata accessor for LibraryAudiobookInfo);
    unint64_t v0 = type metadata accessor for CommonLibrarySeriesInfo();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268284578);
    }
  }
}

uint64_t static OS_dispatch_queue.dispatchAsyncOnMainIfNeeded(block:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v4 = sub_2289DEA30();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2289DEA50();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(self, sel_isMainThread)) {
    return a1();
  }
  sub_228981618();
  uint64_t v13 = (void *)sub_2289DF0D0();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  aBlock[4] = sub_228981690;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2289816B8;
  aBlock[3] = &unk_26DD0C588;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  sub_2289DEA40();
  aBlock[0] = MEMORY[0x263F8EE78];
  sub_228981714();
  sub_228952BB0(&qword_26AECF7A0);
  sub_22898176C();
  sub_2289DF1C0();
  MEMORY[0x22A6A1CD0](0, v11, v7, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t sub_228981618()
{
  unint64_t result = qword_26AECF7C0;
  if (!qword_26AECF7C0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26AECF7C0);
  }
  return result;
}

uint64_t sub_228981658()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_228981690()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_2289816B8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_2289816FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_22898170C()
{
  return swift_release();
}

unint64_t sub_228981714()
{
  unint64_t result = qword_26AECF798;
  if (!qword_26AECF798)
  {
    sub_2289DEA30();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AECF798);
  }
  return result;
}

unint64_t sub_22898176C()
{
  unint64_t result = qword_26AECF7A8;
  if (!qword_26AECF7A8)
  {
    sub_2289550A8(&qword_26AECF7A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AECF7A8);
  }
  return result;
}

uint64_t sub_2289817C8(unint64_t a1)
{
  return sub_2289817D4(a1, (uint64_t *)&unk_268284B10);
}

uint64_t sub_2289817D4(unint64_t a1, uint64_t *a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_228952BB0(a2);
    uint64_t v5 = sub_2289DF350();
    swift_bridgeObjectRelease();
    return v5;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_2289DF490();
    return a1;
  }
}

uint64_t MSeries.__authorCount.getter()
{
  MSeries.authorCount.getter();
  if (v0) {
    return 0;
  }
  else {
    return sub_2289DEFA0();
  }
}

unint64_t MSeries.__assets.getter()
{
  if (!MSeries.assetsResourceSet.getter()) {
    return 0;
  }
  unint64_t v0 = sub_2289D4810();
  swift_release();
  if (v0)
  {
    swift_bridgeObjectRetain();
    if (v0 >> 62)
    {
      sub_228952BB0((uint64_t *)&unk_268284580);
      uint64_t v2 = sub_2289DF350();
      swift_bridgeObjectRelease_n();
      return v2;
    }
    else
    {
      sub_2289DF490();
      swift_bridgeObjectRelease();
    }
  }
  return v0;
}

uint64_t MSeries.__genres.getter()
{
  unint64_t v0 = sub_22896BAE0(@"genres");
  unint64_t v1 = v0;
  if (v0)
  {
    if (v0 >> 62)
    {
      sub_228952BB0((uint64_t *)&unk_268284B10);
      uint64_t v3 = sub_2289DF350();
      swift_bridgeObjectRelease();
      return v3;
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_2289DF490();
      swift_bridgeObjectRelease();
    }
  }
  return v1;
}

uint64_t Array.chunked(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = MEMORY[0x22A6A1A80](a2, a3);
  if (a1)
  {
    v11[7] = 0;
    v11[8] = result;
    v11[9] = a1;
    MEMORY[0x270FA5388](result);
    void v11[2] = a3;
    v11[3] = a2;
    v11[4] = a1;
    uint64_t v7 = sub_228952BB0(&qword_2682845F0);
    uint64_t v8 = (char *)sub_2289DEEA0();
    unint64_t v9 = sub_228982450();
    return sub_228981D54((void (*)(char *, char *))sub_228981D30, (uint64_t)v11, v7, v8, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *sub_228981C5C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  uint64_t v5 = *result;
  uint64_t v6 = *result + a3;
  if (__OFADD__(*result, a3))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = (uint64_t *)MEMORY[0x22A6A1A80](a2, a4);
    if ((uint64_t)result >= v6) {
      uint64_t v8 = (void *)v6;
    }
    else {
      uint64_t v8 = result;
    }
    if ((uint64_t)v8 >= v5)
    {
      sub_2289DEEC0();
      sub_2289DF1B0();
      swift_getWitnessTable();
      uint64_t result = (uint64_t *)sub_2289DEEB0();
      *a5 = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *sub_228981D30@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  return sub_228981C5C(a1, v2[3], v2[4], v2[2], a2);
}

uint64_t sub_228981D54(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  uint64_t v59 = a4;
  uint64_t v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v55 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v53 = (char *)&v40 - v13;
  uint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v41 = (char *)&v40 - v17;
  uint64_t v18 = sub_2289DF130();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v51 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v40 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v50 = *((void *)v15 - 1);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  uint64_t v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v30 = (char *)&v40 - v29;
  uint64_t v31 = sub_2289DED60();
  uint64_t v61 = sub_2289DF2E0();
  uint64_t v56 = sub_2289DF2F0();
  sub_2289DF2C0();
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  uint64_t v59 = v30;
  uint64_t result = sub_2289DED50();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    uint64_t v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    uint64_t v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_2289DF140();
      uint64_t result = (*v33)(v23, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v23, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v23, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v23, AssociatedTypeWitness);
      sub_2289DF2D0();
      if (!--v31)
      {
        uint64_t v35 = v54;
        uint64_t v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  uint64_t v36 = v51;
LABEL_9:
  sub_2289DF140();
  uint64_t v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    uint64_t v38 = (void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v39 = v41;
    uint64_t v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      sub_2289DF2D0();
      sub_2289DF140();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

unint64_t sub_228982450()
{
  unint64_t result = qword_2682845F8;
  if (!qword_2682845F8)
  {
    sub_2289550A8(&qword_2682845F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682845F8);
  }
  return result;
}

BOOL Array<A>.containsDuplicates()(uint64_t a1, uint64_t a2)
{
  sub_2289DF310();
  id v4 = objc_allocWithZone(MEMORY[0x263F08760]);
  uint64_t v5 = (void *)sub_2289DEE10();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithArray_, v5);

  id v7 = objc_msgSend(v6, sel_count);
  return v7 != (id)MEMORY[0x22A6A1A80](a1, a2);
}

const char *sub_228982568(char a1)
{
  unint64_t result = "coverEffectV2";
  switch(a1)
  {
    case 1:
      unint64_t result = "coverMaxSize";
      break;
    case 2:
      unint64_t result = "bk_enhanced_personalization";
      break;
    case 3:
      unint64_t result = "fuzzyFinishedDate";
      break;
    case 4:
      unint64_t result = "iveReadThisFullFlow";
      break;
    case 5:
      unint64_t result = "quoteSharing";
      break;
    case 6:
      unint64_t result = "readingGoalHeader";
      break;
    case 7:
      unint64_t result = "reading_loupe";
      break;
    case 8:
      unint64_t result = "reasonForRecommendation";
      break;
    case 9:
      unint64_t result = "unifiedProductPage";
      break;
    default:
      return result;
  }
  return result;
}

uint64_t BooksFeatureFlag.hash(into:)()
{
  return sub_2289DF570();
}

uint64_t BooksFeatureFlag.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_2289DF270();
  uint64_t v4 = v3;
  if (v2 == sub_2289DF270() && v4 == v5)
  {
    char v9 = 0;
    goto LABEL_10;
  }
  char v7 = sub_2289DF480();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  char v9 = 0;
  if ((v7 & 1) == 0)
  {
    uint64_t v10 = sub_2289DF270();
    uint64_t v12 = v11;
    if (v10 == sub_2289DF270() && v12 == v13)
    {
      char v9 = 1;
LABEL_10:
      uint64_t result = swift_bridgeObjectRelease_n();
      goto LABEL_11;
    }
    char v14 = sub_2289DF480();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v14)
    {
      char v9 = 1;
      goto LABEL_11;
    }
    char v9 = 2;
    uint64_t v15 = sub_2289DF270();
    uint64_t v17 = v16;
    if (v15 == sub_2289DF270() && v17 == v18) {
      goto LABEL_10;
    }
    char v19 = sub_2289DF480();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_11;
    }
    uint64_t v20 = sub_2289DF270();
    uint64_t v22 = v21;
    if (v20 == sub_2289DF270() && v22 == v23)
    {
      char v9 = 3;
      goto LABEL_10;
    }
    char v24 = sub_2289DF480();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v24)
    {
      char v9 = 3;
      goto LABEL_11;
    }
    uint64_t v25 = sub_2289DF270();
    uint64_t v27 = v26;
    if (v25 == sub_2289DF270() && v27 == v28)
    {
      char v9 = 4;
      goto LABEL_10;
    }
    char v29 = sub_2289DF480();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v29)
    {
      char v9 = 4;
      goto LABEL_11;
    }
    uint64_t v30 = sub_2289DF270();
    uint64_t v32 = v31;
    if (v30 == sub_2289DF270() && v32 == v33)
    {
      char v9 = 5;
      goto LABEL_10;
    }
    char v34 = sub_2289DF480();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v34)
    {
      char v9 = 5;
      goto LABEL_11;
    }
    uint64_t v35 = sub_2289DF270();
    uint64_t v37 = v36;
    if (v35 == sub_2289DF270() && v37 == v38)
    {
      char v9 = 6;
      goto LABEL_10;
    }
    char v39 = sub_2289DF480();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v39)
    {
      char v9 = 6;
      goto LABEL_11;
    }
    uint64_t v40 = sub_2289DF270();
    uint64_t v42 = v41;
    if (v40 == sub_2289DF270() && v42 == v43)
    {
      char v9 = 7;
      goto LABEL_10;
    }
    char v44 = sub_2289DF480();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v44)
    {
      char v9 = 7;
      goto LABEL_11;
    }
    uint64_t v45 = sub_2289DF270();
    uint64_t v47 = v46;
    if (v45 == sub_2289DF270() && v47 == v48)
    {
      char v9 = 8;
      goto LABEL_10;
    }
    char v49 = sub_2289DF480();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v49)
    {
      char v9 = 8;
      goto LABEL_11;
    }
    uint64_t v50 = sub_2289DF270();
    uint64_t v52 = v51;
    char v9 = 9;
    if (v50 == sub_2289DF270() && v52 == v53) {
      goto LABEL_10;
    }
    char v54 = sub_2289DF480();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v54) {
      char v9 = 9;
    }
    else {
      char v9 = 10;
    }
  }
LABEL_11:
  *a1 = v9;
  return result;
}

uint64_t BooksFeatureFlag.hashValue.getter()
{
  return sub_2289DF590();
}

void BooksFeatureFlag.rawValue.getter(int64x2_t *a1@<X8>)
{
  int64x2_t v2 = vdupq_n_s64(0xDuLL);
  v2.i64[0] = (uint64_t)"coverEffectV2";
  switch(*v1)
  {
    case 1:
      int64x2_t v2 = vdupq_n_s64(0xCuLL);
      uint64_t v3 = "coverMaxSize";
      goto LABEL_11;
    case 2:
      int64x2_t v2 = vdupq_n_s64(0x1BuLL);
      uint64_t v3 = "bk_enhanced_personalization";
      goto LABEL_11;
    case 3:
      int64x2_t v2 = vdupq_n_s64(0x11uLL);
      uint64_t v3 = "fuzzyFinishedDate";
      goto LABEL_11;
    case 4:
      int64x2_t v2 = vdupq_n_s64(0x13uLL);
      uint64_t v3 = "iveReadThisFullFlow";
      goto LABEL_11;
    case 5:
      int64x2_t v2 = vdupq_n_s64(0xCuLL);
      uint64_t v3 = "quoteSharing";
      goto LABEL_11;
    case 6:
      int64x2_t v2 = vdupq_n_s64(0x11uLL);
      uint64_t v3 = "readingGoalHeader";
      goto LABEL_11;
    case 7:
      int64x2_t v2 = vdupq_n_s64(0xDuLL);
      uint64_t v3 = "reading_loupe";
      goto LABEL_11;
    case 8:
      int64x2_t v2 = vdupq_n_s64(0x17uLL);
      uint64_t v3 = "reasonForRecommendation";
      goto LABEL_11;
    case 9:
      int64x2_t v2 = vdupq_n_s64(0x12uLL);
      uint64_t v3 = "unifiedProductPage";
LABEL_11:
      v2.i64[0] = (uint64_t)v3;
      break;
    default:
      break;
  }
  *a1 = v2;
  a1[1].i8[0] = 2;
}

uint64_t sub_228982D34(char *a1, char *a2)
{
  return sub_228966A00(*a1, *a2);
}

uint64_t sub_228982D40@<X0>(char *a1@<X8>)
{
  return BooksFeatureFlag.init(rawValue:)(a1);
}

const char *sub_228982D78()
{
  return "Books";
}

const char *sub_228982D8C()
{
  return sub_228982568(*v0);
}

uint64_t sub_228982D94()
{
  uint64_t v0 = qword_26DD0AC88;
  if (qword_26DD0AC88)
  {
    char v14 = (void *)MEMORY[0x263F8EE78];
    sub_22896C488(0, qword_26DD0AC88, 0);
    unint64_t v1 = &byte_26DD0AC98;
    int64x2_t v2 = v14;
    do
    {
      char v4 = *v1++;
      char v3 = v4;
      uint64_t v5 = sub_2289DF270();
      uint64_t v7 = v6;
      char v14 = v2;
      unint64_t v9 = v2[2];
      unint64_t v8 = v2[3];
      if (v9 >= v8 >> 1)
      {
        sub_22896C488(v8 > 1, v9 + 1, 1);
        int64x2_t v2 = v14;
      }
      v2[2] = v9 + 1;
      uint64_t v10 = &v2[3 * v9];
      v10[4] = v5;
      v10[5] = v7;
      *((unsigned char *)v10 + 48) = v3;
      --v0;
    }
    while (v0);
  }
  else if (!*(void *)(MEMORY[0x263F8EE78] + 16))
  {
    uint64_t v11 = MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_228952BB0(&qword_268284628);
  uint64_t v11 = sub_2289DF3B0();
LABEL_9:
  char v14 = (void *)v11;
  uint64_t v12 = swift_bridgeObjectRetain();
  sub_22898342C(v12, 1, &v14);
  uint64_t result = swift_bridgeObjectRelease();
  off_268284600 = v14;
  return result;
}

void *static BooksFeatureFlag.allCases.getter()
{
  return &unk_26DD0AC78;
}

BookFoundation::BooksFeatureFlag_optional __swiftcall BooksFeatureFlag.init(key:)(Swift::String key)
{
  object = key._object;
  uint64_t countAndFlagsBits = key._countAndFlagsBits;
  char v4 = v1;
  if (qword_268283E90 != -1) {
    swift_once();
  }
  uint64_t v5 = off_268284600;
  if (*((void *)off_268284600 + 2) && (unint64_t v6 = sub_2289D7094(countAndFlagsBits, (uint64_t)object), (v7 & 1) != 0)) {
    char v8 = *(unsigned char *)(v5[7] + v6);
  }
  else {
    char v8 = 10;
  }
  result.value = swift_bridgeObjectRelease();
  *char v4 = v8;
  return result;
}

void sub_22898309C(void *a1@<X8>)
{
  *a1 = &unk_26DD0AC78;
}

Swift::Bool __swiftcall isFeatureEnabled(_:)(BookFoundation::BooksFeatureFlag a1)
{
  char v1 = *(unsigned char *)a1;
  uint64_t v5 = &type metadata for BooksFeatureFlag;
  unint64_t v6 = sub_228983104();
  v4[0] = v1;
  char v2 = sub_2289DE9E0();
  sub_2289559D0((uint64_t)v4);
  return v2 & 1;
}

unint64_t sub_228983104()
{
  unint64_t result = qword_26AECF790;
  if (!qword_26AECF790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AECF790);
  }
  return result;
}

unint64_t sub_22898315C()
{
  unint64_t result = qword_268284608;
  if (!qword_268284608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284608);
  }
  return result;
}

_UNKNOWN **sub_2289831B0()
{
  return &protocol witness table for FeatureFlagsDomain.Books;
}

unint64_t sub_2289831BC(uint64_t a1)
{
  unint64_t result = sub_2289831E4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_2289831E4()
{
  unint64_t result = qword_268284610;
  if (!qword_268284610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284610);
  }
  return result;
}

unint64_t sub_22898323C()
{
  unint64_t result = qword_268284618;
  if (!qword_268284618)
  {
    sub_2289550A8(&qword_268284620);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284618);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BooksFeatureFlag(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BooksFeatureFlag(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2289833F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BooksFeatureFlag()
{
  return &type metadata for BooksFeatureFlag;
}

void sub_22898342C(uint64_t a1, char a2, void *a3)
{
  LOBYTE(v4) = a2;
  uint64_t v6 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_23;
  }
  LOBYTE(v7) = *(unsigned char *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v10 = (void *)*a3;
  unint64_t v11 = sub_2289D7094(v9, v8);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  BOOL v15 = __OFADD__(v13, v14);
  uint64_t v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v17 = v12;
  if (v10[3] < v16)
  {
    sub_22899751C(v16, v4 & 1);
    unint64_t v11 = sub_2289D7094(v9, v8);
    if ((v17 & 1) == (v18 & 1)) {
      goto LABEL_8;
    }
LABEL_6:
    unint64_t v11 = sub_2289DF500();
    __break(1u);
  }
  if (v4)
  {
LABEL_8:
    if (v17) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  unint64_t v21 = v11;
  sub_228998C38();
  unint64_t v11 = v21;
  if (v17)
  {
LABEL_9:
    char v19 = (void *)swift_allocError();
    swift_willThrow();
    id v20 = v19;
    sub_228952BB0(&qword_268284630);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
LABEL_12:
  uint64_t v22 = (void *)*a3;
  *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  uint64_t v23 = (uint64_t *)(v22[6] + 16 * v11);
  *uint64_t v23 = v9;
  v23[1] = v8;
  *(unsigned char *)(v22[7] + v11) = v7;
  uint64_t v24 = v22[2];
  BOOL v15 = __OFADD__(v24, 1);
  uint64_t v25 = v24 + 1;
  if (v15)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    sub_2289DF250();
    sub_2289DEC90();
    sub_2289DF320();
    sub_2289DEC90();
    sub_2289DF340();
    __break(1u);
    return;
  }
  v22[2] = v25;
  if (v6 != 1)
  {
    unsigned int v4 = (unsigned char *)(a1 + 72);
    unint64_t v7 = 1;
    while (v7 < *(void *)(a1 + 16))
    {
      char v26 = *v4;
      uint64_t v9 = *((void *)v4 - 2);
      uint64_t v8 = *((void *)v4 - 1);
      swift_bridgeObjectRetain();
      if (!v8) {
        goto LABEL_23;
      }
      uint64_t v27 = (void *)*a3;
      unint64_t v28 = sub_2289D7094(v9, v8);
      uint64_t v30 = v27[2];
      BOOL v31 = (v29 & 1) == 0;
      BOOL v15 = __OFADD__(v30, v31);
      uint64_t v32 = v30 + v31;
      if (v15) {
        goto LABEL_25;
      }
      char v17 = v29;
      if (v27[3] < v32)
      {
        sub_22899751C(v32, 1);
        unint64_t v28 = sub_2289D7094(v9, v8);
        if ((v17 & 1) != (v33 & 1)) {
          goto LABEL_6;
        }
      }
      if (v17) {
        goto LABEL_9;
      }
      char v34 = (void *)*a3;
      *(void *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      uint64_t v35 = (uint64_t *)(v34[6] + 16 * v28);
      uint64_t *v35 = v9;
      v35[1] = v8;
      *(unsigned char *)(v34[7] + v28) = v26;
      uint64_t v36 = v34[2];
      BOOL v15 = __OFADD__(v36, 1);
      uint64_t v37 = v36 + 1;
      if (v15) {
        goto LABEL_26;
      }
      ++v7;
      v34[2] = v37;
      v4 += 24;
      if (v6 == v7) {
        goto LABEL_23;
      }
    }
    goto LABEL_27;
  }
LABEL_23:
  swift_bridgeObjectRelease_n();
}

uint64_t PDFInfo.dataSource.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2289837C4(v1, a1);
}

uint64_t sub_2289837C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284638);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PDFInfo.init(dataSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PDFInfo();
  *(unsigned char *)(a2 + *(int *)(v4 + 20)) = 2;
  *(unsigned char *)(a2 + *(int *)(v4 + 24)) = 0;

  return sub_2289838D0(a1, a2);
}

uint64_t type metadata accessor for PDFInfo()
{
  uint64_t result = qword_268284670;
  if (!qword_268284670) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2289838D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284638);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PDFInfo.assetType.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PDFInfo() + 20));
}

uint64_t PDFInfo.assetType.setter(char a1)
{
  uint64_t result = type metadata accessor for PDFInfo();
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*PDFInfo.assetType.modify())()
{
  return nullsub_1;
}

uint64_t PDFInfo.contentKind.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for PDFInfo();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t PDFInfo.contentKind.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for PDFInfo();
  *(unsigned char *)(v1 + *(int *)(result + 24)) = v2;
  return result;
}

uint64_t (*PDFInfo.contentKind.modify())()
{
  return nullsub_1;
}

uint64_t sub_228983A80()
{
  return sub_228983C58(&qword_268284640, (void (*)(uint64_t))type metadata accessor for LibraryPDFInfo);
}

uint64_t sub_228983AC8(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 20));
}

uint64_t sub_228983AD4@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(v2 + *(int *)(result + 24));
  return result;
}

uint64_t sub_228983AE4(uint64_t a1)
{
  uint64_t result = sub_228983C58(&qword_268284648, (void (*)(uint64_t))type metadata accessor for PDFInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228983B3C()
{
  return sub_228983C58(&qword_268284650, (void (*)(uint64_t))type metadata accessor for LibraryPDFInfo);
}

uint64_t sub_228983B84@<X0>(uint64_t a1@<X8>)
{
  return sub_2289837C4(v1, a1);
}

uint64_t sub_228983B90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(int *)(a2 + 24);
  *(unsigned char *)(a3 + *(int *)(a2 + 20)) = 2;
  *(unsigned char *)(a3 + v3) = 0;
  return sub_2289838D0(a1, a3);
}

uint64_t sub_228983BA8(uint64_t a1)
{
  uint64_t result = sub_228983C58(&qword_268284658, (void (*)(uint64_t))type metadata accessor for PDFInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228983C00(uint64_t a1)
{
  uint64_t result = sub_228983C58(&qword_268284660, (void (*)(uint64_t))type metadata accessor for PDFInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228983C58(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for PDFInfo(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    char v18 = *a2;
    *(void *)a1 = *a2;
    a1 = &v18[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    sub_228952BB0(&qword_268284638);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      char v19 = *a2;
      *(void *)a1 = *a2;
      id v20 = v19;
    }
    else
    {
      uint64_t v153 = v6;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v8 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v8;
        uint64_t v9 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v9;
        uint64_t v10 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v10;
        unint64_t v11 = a2[7];
        *((void *)a1 + 6) = a2[6];
        *((void *)a1 + 7) = v11;
        char v12 = a2[9];
        *((void *)a1 + 8) = a2[8];
        *((void *)a1 + 9) = v12;
        *((void *)a1 + 10) = a2[10];
        uint64_t v13 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        uint64_t v14 = v13[10];
        __dst = &a1[v14];
        uint64_t v144 = (char *)a2 + v14;
        uint64_t v15 = sub_2289DE880();
        uint64_t v16 = *(void *)(v15 - 8);
        uint64_t v142 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v142(v144, 1, v15))
        {
          uint64_t v17 = sub_228952BB0(&qword_2682841E0);
          memcpy(__dst, v144, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v144, v15);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
        }
        uint64_t v31 = v13[11];
        uint64_t v32 = &a1[v31];
        char v33 = (char **)((char *)a2 + v31);
        uint64_t v34 = v33[1];
        *(void *)uint64_t v32 = *v33;
        *((void *)v32 + 1) = v34;
        uint64_t v35 = v13[12];
        uint64_t v36 = &a1[v35];
        uint64_t v37 = (char *)a2 + v35;
        v36[8] = v37[8];
        *(void *)uint64_t v36 = *(void *)v37;
        uint64_t v38 = v13[13];
        char v39 = &a1[v38];
        uint64_t v40 = (char **)((char *)a2 + v38);
        uint64_t v41 = v40[1];
        *(void *)char v39 = *v40;
        *((void *)v39 + 1) = v41;
        uint64_t v42 = v13[14];
        uint64_t v149 = &a1[v42];
        uint64_t v43 = (char *)a2 + v42;
        uint64_t v44 = sub_2289DE910();
        uint64_t v45 = *(void *)(v44 - 8);
        uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v147 = v45;
        if (v46(v43, 1, v44))
        {
          uint64_t v47 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v149, v43, *(void *)(*(void *)(v47 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v149, v43, v44);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v149, 0, 1, v44);
        }
        uint64_t v48 = v13[15];
        char v49 = &a1[v48];
        uint64_t v50 = (char **)((char *)a2 + v48);
        uint64_t v51 = v50[1];
        *(void *)char v49 = *v50;
        *((void *)v49 + 1) = v51;
        uint64_t v52 = v13[16];
        uint64_t v53 = &a1[v52];
        char v54 = (char **)((char *)a2 + v52);
        uint64_t v55 = v54[1];
        *(void *)uint64_t v53 = *v54;
        *((void *)v53 + 1) = v55;
        a1[v13[17]] = *((unsigned char *)a2 + v13[17]);
        *(void *)&a1[v13[18]] = *(char **)((char *)a2 + v13[18]);
        a1[v13[19]] = *((unsigned char *)a2 + v13[19]);
        a1[v13[20]] = *((unsigned char *)a2 + v13[20]);
        a1[v13[21]] = *((unsigned char *)a2 + v13[21]);
        a1[v13[22]] = *((unsigned char *)a2 + v13[22]);
        a1[v13[23]] = *((unsigned char *)a2 + v13[23]);
        a1[v13[24]] = *((unsigned char *)a2 + v13[24]);
        a1[v13[25]] = *((unsigned char *)a2 + v13[25]);
        a1[v13[26]] = *((unsigned char *)a2 + v13[26]);
        a1[v13[27]] = *((unsigned char *)a2 + v13[27]);
        a1[v13[28]] = *((unsigned char *)a2 + v13[28]);
        a1[v13[29]] = *((unsigned char *)a2 + v13[29]);
        uint64_t v56 = v13[30];
        uint64_t v57 = &a1[v56];
        uint64_t v58 = (char **)((char *)a2 + v56);
        uint64_t v59 = v58[1];
        *(void *)uint64_t v57 = *v58;
        *((void *)v57 + 1) = v59;
        uint64_t v60 = v13[31];
        uint64_t v61 = &a1[v60];
        uint64_t v62 = (char *)a2 + v60;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v46(v62, 1, v44))
        {
          uint64_t v63 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v61, v62, v44);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v147 + 56))(v61, 0, 1, v44);
        }
        uint64_t v6 = v153;
        uint64_t v64 = v13[32];
        uint64_t v65 = &a1[v64];
        uint64_t v66 = (char *)a2 + v64;
        *(void *)uint64_t v65 = *(void *)v66;
        v65[8] = v66[8];
        *(void *)&a1[v13[33]] = *(char **)((char *)a2 + v13[33]);
        uint64_t v67 = v13[34];
        unint64_t v68 = &a1[v67];
        int v69 = (char *)a2 + v67;
        if (v46((char *)a2 + v67, 1, v44))
        {
          uint64_t v70 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v68, v69, *(void *)(*(void *)(v70 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v68, v69, v44);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v147 + 56))(v68, 0, 1, v44);
        }
        uint64_t v71 = v13[35];
        uint64_t v72 = &a1[v71];
        uint64_t v73 = (char **)((char *)a2 + v71);
        uint64_t v74 = v73[1];
        *(void *)uint64_t v72 = *v73;
        *((void *)v72 + 1) = v74;
        uint64_t v75 = v13[36];
        uint64_t v76 = &a1[v75];
        uint64_t v77 = (char *)a2 + v75;
        *(void *)(v76 + 13) = *(void *)(v77 + 13);
        *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
        uint64_t v78 = v13[37];
        long long v79 = &a1[v78];
        uint64_t v80 = (char *)a2 + v78;
        v79[8] = v80[8];
        *(void *)long long v79 = *(void *)v80;
        uint64_t v81 = v13[38];
        uint64_t v82 = &a1[v81];
        uint64_t v83 = (char *)a2 + v81;
        v82[4] = v83[4];
        *(_DWORD *)uint64_t v82 = *(_DWORD *)v83;
        swift_bridgeObjectRetain();
      }
      else
      {
        unint64_t v21 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v21;
        uint64_t v22 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v22;
        uint64_t v23 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v23;
        uint64_t v24 = a2[7];
        *((void *)a1 + 6) = a2[6];
        *((void *)a1 + 7) = v24;
        uint64_t v25 = a2[9];
        *((void *)a1 + 8) = a2[8];
        *((void *)a1 + 9) = v25;
        *((void *)a1 + 10) = a2[10];
        char v26 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        uint64_t v27 = v26[10];
        uint64_t v145 = &a1[v27];
        unint64_t v28 = (char *)a2 + v27;
        uint64_t v29 = sub_2289DE880();
        uint64_t v143 = *(void *)(v29 - 8);
        uint64_t v146 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v146(v28, 1, v29))
        {
          uint64_t v30 = sub_228952BB0(&qword_2682841E0);
          memcpy(v145, v28, *(void *)(*(void *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v145, v28, v29);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v145, 0, 1, v29);
        }
        uint64_t v84 = v26[11];
        unint64_t v85 = &a1[v84];
        uint64_t v86 = (char **)((char *)a2 + v84);
        uint64_t v87 = v86[1];
        *(void *)unint64_t v85 = *v86;
        *((void *)v85 + 1) = v87;
        uint64_t v88 = v26[12];
        long long v89 = &a1[v88];
        uint64_t v90 = (char *)a2 + v88;
        v89[8] = v90[8];
        *(void *)long long v89 = *(void *)v90;
        uint64_t v91 = v26[13];
        uint64_t v92 = &a1[v91];
        uint64_t v93 = (char **)((char *)a2 + v91);
        uint64_t v94 = v93[1];
        *(void *)uint64_t v92 = *v93;
        *((void *)v92 + 1) = v94;
        uint64_t v95 = v26[14];
        long long v150 = &a1[v95];
        uint64_t v96 = (char *)a2 + v95;
        uint64_t v97 = sub_2289DE910();
        uint64_t v98 = *(void *)(v97 - 8);
        uint64_t v99 = *(unsigned int (**)(void, void, void))(v98 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dsta = (unsigned int (*)(char *, uint64_t, uint64_t))v99;
        uint64_t v148 = v98;
        if (v99(v96, 1, v97))
        {
          uint64_t v100 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v150, v96, *(void *)(*(void *)(v100 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v150, v96, v97);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v150, 0, 1, v97);
        }
        uint64_t v101 = v26[15];
        uint64_t v102 = &a1[v101];
        uint64_t v103 = (char **)((char *)a2 + v101);
        uint64_t v104 = v103[1];
        *(void *)uint64_t v102 = *v103;
        *((void *)v102 + 1) = v104;
        uint64_t v105 = v26[16];
        long long v106 = &a1[v105];
        char v107 = (char **)((char *)a2 + v105);
        uint64_t v108 = v107[1];
        *(void *)long long v106 = *v107;
        *((void *)v106 + 1) = v108;
        a1[v26[17]] = *((unsigned char *)a2 + v26[17]);
        *(void *)&a1[v26[18]] = *(char **)((char *)a2 + v26[18]);
        a1[v26[19]] = *((unsigned char *)a2 + v26[19]);
        a1[v26[20]] = *((unsigned char *)a2 + v26[20]);
        a1[v26[21]] = *((unsigned char *)a2 + v26[21]);
        a1[v26[22]] = *((unsigned char *)a2 + v26[22]);
        a1[v26[23]] = *((unsigned char *)a2 + v26[23]);
        a1[v26[24]] = *((unsigned char *)a2 + v26[24]);
        a1[v26[25]] = *((unsigned char *)a2 + v26[25]);
        a1[v26[26]] = *((unsigned char *)a2 + v26[26]);
        a1[v26[27]] = *((unsigned char *)a2 + v26[27]);
        a1[v26[28]] = *((unsigned char *)a2 + v26[28]);
        a1[v26[29]] = *((unsigned char *)a2 + v26[29]);
        uint64_t v109 = v26[30];
        uint64_t v110 = &a1[v109];
        long long v111 = (char **)((char *)a2 + v109);
        uint64_t v112 = v111[1];
        *(void *)uint64_t v110 = *v111;
        *((void *)v110 + 1) = v112;
        uint64_t v113 = v26[31];
        long long v114 = &a1[v113];
        long long v115 = (char *)a2 + v113;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__dsta(v115, 1, v97))
        {
          uint64_t v116 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v114, v115, *(void *)(*(void *)(v116 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v114, v115, v97);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56))(v114, 0, 1, v97);
        }
        uint64_t v6 = v153;
        uint64_t v117 = v26[32];
        uint64_t v118 = &a1[v117];
        uint64_t v119 = (char *)a2 + v117;
        *(void *)uint64_t v118 = *(void *)v119;
        v118[8] = v119[8];
        *(void *)&a1[v26[33]] = *(char **)((char *)a2 + v26[33]);
        uint64_t v120 = v26[34];
        uint64_t v121 = &a1[v120];
        uint64_t v122 = (char *)a2 + v120;
        if (__dsta((char *)a2 + v120, 1, v97))
        {
          uint64_t v123 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v121, v122, *(void *)(*(void *)(v123 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v121, v122, v97);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56))(v121, 0, 1, v97);
        }
        uint64_t v124 = v26[35];
        uint64_t v125 = &a1[v124];
        uint64_t v126 = (char **)((char *)a2 + v124);
        uint64_t v127 = v126[1];
        *(void *)uint64_t v125 = *v126;
        *((void *)v125 + 1) = v127;
        uint64_t v128 = v26[36];
        uint64_t v129 = &a1[v128];
        char v130 = (char *)a2 + v128;
        *(void *)(v129 + 13) = *(void *)(v130 + 13);
        *(_OWORD *)uint64_t v129 = *(_OWORD *)v130;
        uint64_t v131 = v26[37];
        uint64_t v132 = &a1[v131];
        uint64_t v133 = (char *)a2 + v131;
        v132[8] = v133[8];
        *(void *)uint64_t v132 = *(void *)v133;
        uint64_t v134 = v26[38];
        uint64_t v135 = &a1[v134];
        uint64_t v136 = (char *)a2 + v134;
        v135[4] = v136[4];
        *(_DWORD *)uint64_t v135 = *(_DWORD *)v136;
        swift_bridgeObjectRetain();
        uint64_t v137 = *(int *)(sub_228952BB0(&qword_268284668) + 48);
        uint64_t v138 = *(char **)((char *)a2 + v137);
        *(void *)&a1[v137] = v138;
        id v139 = v138;
      }
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v140 = *(int *)(v6 + 24);
    a1[*(int *)(v6 + 20)] = *((unsigned char *)a2 + *(int *)(v6 + 20));
    a1[v140] = *((unsigned char *)a2 + v140);
  }
  return a1;
}

void destroy for PDFInfo(void **a1)
{
  sub_228952BB0(&qword_268284638);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v13 = *a1;
LABEL_14:

    return;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    uint64_t v4 = (char *)a1 + v3[10];
    uint64_t v5 = sub_2289DE880();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v7 = (char *)a1 + v3[14];
    uint64_t v8 = sub_2289DE910();
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    if (!v10(v7, 1, v8)) {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v11 = (char *)a1 + v3[31];
    if (!v10(v11, 1, v8)) {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    char v12 = (char *)a1 + v3[34];
    if (!v10(v12, 1, v8)) {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void **)((char *)a1 + *(int *)(sub_228952BB0(&qword_268284668) + 48));
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v15 = (char *)a1 + v14[10];
  uint64_t v16 = sub_2289DE880();
  uint64_t v17 = *(void *)(v16 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16)) {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v18 = (char *)a1 + v14[14];
  uint64_t v19 = sub_2289DE910();
  uint64_t v20 = *(void *)(v19 - 8);
  unint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (!v21(v18, 1, v19)) {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = (char *)a1 + v14[31];
  if (!v21(v22, 1, v19)) {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }
  uint64_t v23 = (char *)a1 + v14[34];
  if (!v21(v23, 1, v19)) {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  }

  swift_bridgeObjectRelease();
}

void *initializeWithCopy for PDFInfo(void *a1, uint64_t a2, uint64_t a3)
{
  sub_228952BB0(&qword_268284638);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v17 = *(void **)a2;
    *a1 = *(void *)a2;
    id v18 = v17;
  }
  else
  {
    uint64_t v151 = a3;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *(void *)(a2 + 8);
      *a1 = *(void *)a2;
      a1[1] = v7;
      uint64_t v8 = *(void *)(a2 + 24);
      a1[2] = *(void *)(a2 + 16);
      a1[3] = v8;
      uint64_t v9 = *(void *)(a2 + 40);
      a1[4] = *(void *)(a2 + 32);
      a1[5] = v9;
      uint64_t v10 = *(void *)(a2 + 56);
      a1[6] = *(void *)(a2 + 48);
      a1[7] = v10;
      uint64_t v11 = *(void *)(a2 + 72);
      a1[8] = *(void *)(a2 + 64);
      a1[9] = v11;
      a1[10] = *(void *)(a2 + 80);
      char v12 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      uint64_t v13 = v12[10];
      __dst = (char *)a1 + v13;
      uint64_t v141 = (void *)(a2 + v13);
      uint64_t v14 = sub_2289DE880();
      uint64_t v15 = *(void *)(v14 - 8);
      id v139 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v139(v141, 1, v14))
      {
        uint64_t v16 = sub_228952BB0(&qword_2682841E0);
        memcpy(__dst, v141, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(v15 + 16))(__dst, v141, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
      }
      uint64_t v28 = v12[11];
      uint64_t v29 = (void *)((char *)a1 + v28);
      uint64_t v30 = (void *)(a2 + v28);
      uint64_t v31 = v30[1];
      *uint64_t v29 = *v30;
      v29[1] = v31;
      uint64_t v32 = v12[12];
      char v33 = (char *)a1 + v32;
      uint64_t v34 = a2 + v32;
      v33[8] = *(unsigned char *)(v34 + 8);
      *(void *)char v33 = *(void *)v34;
      uint64_t v35 = v12[13];
      uint64_t v36 = (void *)((char *)a1 + v35);
      uint64_t v37 = (void *)(a2 + v35);
      uint64_t v38 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v38;
      uint64_t v39 = v12[14];
      uint64_t v147 = (char *)a1 + v39;
      uint64_t v40 = (const void *)(a2 + v39);
      uint64_t v41 = sub_2289DE910();
      uint64_t v42 = *(void *)(v41 - 8);
      uint64_t v43 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v144 = v42;
      if (v43(v40, 1, v41))
      {
        uint64_t v44 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v147, v40, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v42 + 16))(v147, v40, v41);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v147, 0, 1, v41);
      }
      uint64_t v45 = v12[15];
      uint64_t v46 = (void *)((char *)a1 + v45);
      uint64_t v47 = (void *)(a2 + v45);
      uint64_t v48 = v47[1];
      *uint64_t v46 = *v47;
      v46[1] = v48;
      uint64_t v49 = v12[16];
      uint64_t v50 = (void *)((char *)a1 + v49);
      uint64_t v51 = (void *)(a2 + v49);
      uint64_t v52 = v51[1];
      void *v50 = *v51;
      v50[1] = v52;
      *((unsigned char *)a1 + v12[17]) = *(unsigned char *)(a2 + v12[17]);
      *(void *)((char *)a1 + v12[18]) = *(void *)(a2 + v12[18]);
      *((unsigned char *)a1 + v12[19]) = *(unsigned char *)(a2 + v12[19]);
      *((unsigned char *)a1 + v12[20]) = *(unsigned char *)(a2 + v12[20]);
      *((unsigned char *)a1 + v12[21]) = *(unsigned char *)(a2 + v12[21]);
      *((unsigned char *)a1 + v12[22]) = *(unsigned char *)(a2 + v12[22]);
      *((unsigned char *)a1 + v12[23]) = *(unsigned char *)(a2 + v12[23]);
      *((unsigned char *)a1 + v12[24]) = *(unsigned char *)(a2 + v12[24]);
      *((unsigned char *)a1 + v12[25]) = *(unsigned char *)(a2 + v12[25]);
      *((unsigned char *)a1 + v12[26]) = *(unsigned char *)(a2 + v12[26]);
      *((unsigned char *)a1 + v12[27]) = *(unsigned char *)(a2 + v12[27]);
      *((unsigned char *)a1 + v12[28]) = *(unsigned char *)(a2 + v12[28]);
      *((unsigned char *)a1 + v12[29]) = *(unsigned char *)(a2 + v12[29]);
      uint64_t v53 = v12[30];
      char v54 = (void *)((char *)a1 + v53);
      uint64_t v55 = (void *)(a2 + v53);
      uint64_t v56 = v55[1];
      *char v54 = *v55;
      v54[1] = v56;
      uint64_t v57 = v12[31];
      uint64_t v58 = (char *)a1 + v57;
      uint64_t v59 = (const void *)(a2 + v57);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v43(v59, 1, v41))
      {
        uint64_t v60 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v144 + 16))(v58, v59, v41);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v144 + 56))(v58, 0, 1, v41);
      }
      a3 = v151;
      uint64_t v61 = v12[32];
      uint64_t v62 = (char *)a1 + v61;
      uint64_t v63 = a2 + v61;
      *(void *)uint64_t v62 = *(void *)v63;
      v62[8] = *(unsigned char *)(v63 + 8);
      *(void *)((char *)a1 + v12[33]) = *(void *)(a2 + v12[33]);
      uint64_t v64 = v12[34];
      uint64_t v65 = (char *)a1 + v64;
      uint64_t v66 = (const void *)(a2 + v64);
      if (v43((const void *)(a2 + v64), 1, v41))
      {
        uint64_t v67 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v144 + 16))(v65, v66, v41);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v144 + 56))(v65, 0, 1, v41);
      }
      uint64_t v68 = v12[35];
      int v69 = (void *)((char *)a1 + v68);
      uint64_t v70 = (void *)(a2 + v68);
      uint64_t v71 = v70[1];
      *int v69 = *v70;
      v69[1] = v71;
      uint64_t v72 = v12[36];
      uint64_t v73 = (char *)a1 + v72;
      uint64_t v74 = a2 + v72;
      *(void *)(v73 + 13) = *(void *)(v74 + 13);
      *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
      uint64_t v75 = v12[37];
      uint64_t v76 = (char *)a1 + v75;
      uint64_t v77 = a2 + v75;
      v76[8] = *(unsigned char *)(v77 + 8);
      *(void *)uint64_t v76 = *(void *)v77;
      uint64_t v78 = v12[38];
      long long v79 = (char *)a1 + v78;
      uint64_t v80 = a2 + v78;
      v79[4] = *(unsigned char *)(v80 + 4);
      *(_DWORD *)long long v79 = *(_DWORD *)v80;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v19 = *(void *)(a2 + 8);
      *a1 = *(void *)a2;
      a1[1] = v19;
      uint64_t v20 = *(void *)(a2 + 24);
      a1[2] = *(void *)(a2 + 16);
      a1[3] = v20;
      uint64_t v21 = *(void *)(a2 + 40);
      a1[4] = *(void *)(a2 + 32);
      a1[5] = v21;
      uint64_t v22 = *(void *)(a2 + 56);
      a1[6] = *(void *)(a2 + 48);
      a1[7] = v22;
      uint64_t v23 = *(void *)(a2 + 72);
      a1[8] = *(void *)(a2 + 64);
      a1[9] = v23;
      a1[10] = *(void *)(a2 + 80);
      uint64_t v24 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      uint64_t v25 = v24[10];
      uint64_t v142 = (char *)a1 + v25;
      uint64_t v143 = (const void *)(a2 + v25);
      uint64_t v26 = sub_2289DE880();
      uint64_t v140 = *(void *)(v26 - 8);
      uint64_t v146 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v140 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v146(v143, 1, v26))
      {
        uint64_t v27 = sub_228952BB0(&qword_2682841E0);
        memcpy(v142, v143, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v140 + 16))(v142, v143, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v140 + 56))(v142, 0, 1, v26);
      }
      uint64_t v81 = v24[11];
      uint64_t v82 = (void *)((char *)a1 + v81);
      uint64_t v83 = (void *)(a2 + v81);
      uint64_t v84 = v83[1];
      *uint64_t v82 = *v83;
      v82[1] = v84;
      uint64_t v85 = v24[12];
      uint64_t v86 = (char *)a1 + v85;
      uint64_t v87 = a2 + v85;
      v86[8] = *(unsigned char *)(v87 + 8);
      *(void *)uint64_t v86 = *(void *)v87;
      uint64_t v88 = v24[13];
      long long v89 = (void *)((char *)a1 + v88);
      uint64_t v90 = (void *)(a2 + v88);
      uint64_t v91 = v90[1];
      *long long v89 = *v90;
      v89[1] = v91;
      uint64_t v92 = v24[14];
      uint64_t v148 = (char *)a1 + v92;
      uint64_t v93 = (const void *)(a2 + v92);
      uint64_t v94 = sub_2289DE910();
      uint64_t v95 = *(void *)(v94 - 8);
      uint64_t v96 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v95 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __dsta = v96;
      uint64_t v145 = v95;
      if (v96(v93, 1, v94))
      {
        uint64_t v97 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v148, v93, *(void *)(*(void *)(v97 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v95 + 16))(v148, v93, v94);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v148, 0, 1, v94);
      }
      uint64_t v98 = v24[15];
      uint64_t v99 = (void *)((char *)a1 + v98);
      uint64_t v100 = (void *)(a2 + v98);
      uint64_t v101 = v100[1];
      *uint64_t v99 = *v100;
      v99[1] = v101;
      uint64_t v102 = v24[16];
      uint64_t v103 = (void *)((char *)a1 + v102);
      uint64_t v104 = (void *)(a2 + v102);
      uint64_t v105 = v104[1];
      *uint64_t v103 = *v104;
      v103[1] = v105;
      *((unsigned char *)a1 + v24[17]) = *(unsigned char *)(a2 + v24[17]);
      *(void *)((char *)a1 + v24[18]) = *(void *)(a2 + v24[18]);
      *((unsigned char *)a1 + v24[19]) = *(unsigned char *)(a2 + v24[19]);
      *((unsigned char *)a1 + v24[20]) = *(unsigned char *)(a2 + v24[20]);
      *((unsigned char *)a1 + v24[21]) = *(unsigned char *)(a2 + v24[21]);
      *((unsigned char *)a1 + v24[22]) = *(unsigned char *)(a2 + v24[22]);
      *((unsigned char *)a1 + v24[23]) = *(unsigned char *)(a2 + v24[23]);
      *((unsigned char *)a1 + v24[24]) = *(unsigned char *)(a2 + v24[24]);
      *((unsigned char *)a1 + v24[25]) = *(unsigned char *)(a2 + v24[25]);
      *((unsigned char *)a1 + v24[26]) = *(unsigned char *)(a2 + v24[26]);
      *((unsigned char *)a1 + v24[27]) = *(unsigned char *)(a2 + v24[27]);
      *((unsigned char *)a1 + v24[28]) = *(unsigned char *)(a2 + v24[28]);
      *((unsigned char *)a1 + v24[29]) = *(unsigned char *)(a2 + v24[29]);
      uint64_t v106 = v24[30];
      char v107 = (void *)((char *)a1 + v106);
      uint64_t v108 = (void *)(a2 + v106);
      uint64_t v109 = v108[1];
      *char v107 = *v108;
      v107[1] = v109;
      uint64_t v110 = v24[31];
      long long v111 = (char *)a1 + v110;
      uint64_t v112 = (const void *)(a2 + v110);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__dsta(v112, 1, v94))
      {
        uint64_t v113 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v111, v112, *(void *)(*(void *)(v113 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v145 + 16))(v111, v112, v94);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v145 + 56))(v111, 0, 1, v94);
      }
      a3 = v151;
      uint64_t v114 = v24[32];
      long long v115 = (char *)a1 + v114;
      uint64_t v116 = a2 + v114;
      *(void *)long long v115 = *(void *)v116;
      v115[8] = *(unsigned char *)(v116 + 8);
      *(void *)((char *)a1 + v24[33]) = *(void *)(a2 + v24[33]);
      uint64_t v117 = v24[34];
      uint64_t v118 = (char *)a1 + v117;
      uint64_t v119 = (const void *)(a2 + v117);
      if (__dsta((const void *)(a2 + v117), 1, v94))
      {
        uint64_t v120 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v118, v119, *(void *)(*(void *)(v120 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v145 + 16))(v118, v119, v94);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v145 + 56))(v118, 0, 1, v94);
      }
      uint64_t v121 = v24[35];
      uint64_t v122 = (void *)((char *)a1 + v121);
      uint64_t v123 = (void *)(a2 + v121);
      uint64_t v124 = v123[1];
      *uint64_t v122 = *v123;
      v122[1] = v124;
      uint64_t v125 = v24[36];
      uint64_t v126 = (char *)a1 + v125;
      uint64_t v127 = a2 + v125;
      *(void *)(v126 + 13) = *(void *)(v127 + 13);
      *(_OWORD *)uint64_t v126 = *(_OWORD *)v127;
      uint64_t v128 = v24[37];
      uint64_t v129 = (char *)a1 + v128;
      uint64_t v130 = a2 + v128;
      v129[8] = *(unsigned char *)(v130 + 8);
      *(void *)uint64_t v129 = *(void *)v130;
      uint64_t v131 = v24[38];
      uint64_t v132 = (char *)a1 + v131;
      uint64_t v133 = a2 + v131;
      v132[4] = *(unsigned char *)(v133 + 4);
      *(_DWORD *)uint64_t v132 = *(_DWORD *)v133;
      swift_bridgeObjectRetain();
      uint64_t v134 = *(int *)(sub_228952BB0(&qword_268284668) + 48);
      uint64_t v135 = *(void **)(a2 + v134);
      *(void *)((char *)a1 + v134) = v135;
      id v136 = v135;
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v137 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *((unsigned char *)a1 + v137) = *(unsigned char *)(a2 + v137);
  return a1;
}

void *assignWithCopy for PDFInfo(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_228986634((uint64_t)a1);
    sub_228952BB0(&qword_268284638);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      char v12 = (void *)*a2;
      *a1 = *a2;
      id v13 = v12;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      a1[10] = a2[10];
      uint64_t v7 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      uint64_t v8 = v7[10];
      __dst = (char *)a1 + v8;
      uint64_t v129 = (char *)a2 + v8;
      uint64_t v9 = sub_2289DE880();
      uint64_t v10 = *(void *)(v9 - 8);
      uint64_t v127 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v127(v129, 1, v9))
      {
        uint64_t v11 = sub_228952BB0(&qword_2682841E0);
        memcpy(__dst, v129, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v129, v9);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
      }
      uint64_t v19 = v7[11];
      uint64_t v20 = (void *)((char *)a1 + v19);
      uint64_t v21 = (void *)((char *)a2 + v19);
      *uint64_t v20 = *v21;
      v20[1] = v21[1];
      uint64_t v22 = v7[12];
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = *(void *)v24;
      v23[8] = v24[8];
      *(void *)uint64_t v23 = v25;
      uint64_t v26 = v7[13];
      uint64_t v27 = (void *)((char *)a1 + v26);
      uint64_t v28 = (void *)((char *)a2 + v26);
      *uint64_t v27 = *v28;
      v27[1] = v28[1];
      uint64_t v29 = v7[14];
      uint64_t v131 = (char *)a1 + v29;
      uint64_t v30 = (char *)a2 + v29;
      uint64_t v31 = sub_2289DE910();
      uint64_t v32 = *(void *)(v31 - 8);
      char v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v133 = v32;
      if (v33(v30, 1, v31))
      {
        uint64_t v34 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v131, v30, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v131, v30, v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v131, 0, 1, v31);
      }
      uint64_t v51 = v7[15];
      uint64_t v52 = (void *)((char *)a1 + v51);
      uint64_t v53 = (void *)((char *)a2 + v51);
      *uint64_t v52 = *v53;
      v52[1] = v53[1];
      uint64_t v54 = v7[16];
      uint64_t v55 = (void *)((char *)a1 + v54);
      uint64_t v56 = (void *)((char *)a2 + v54);
      void *v55 = *v56;
      v55[1] = v56[1];
      *((unsigned char *)a1 + v7[17]) = *((unsigned char *)a2 + v7[17]);
      *(void *)((char *)a1 + v7[18]) = *(void *)((char *)a2 + v7[18]);
      *((unsigned char *)a1 + v7[19]) = *((unsigned char *)a2 + v7[19]);
      *((unsigned char *)a1 + v7[20]) = *((unsigned char *)a2 + v7[20]);
      *((unsigned char *)a1 + v7[21]) = *((unsigned char *)a2 + v7[21]);
      *((unsigned char *)a1 + v7[22]) = *((unsigned char *)a2 + v7[22]);
      *((unsigned char *)a1 + v7[23]) = *((unsigned char *)a2 + v7[23]);
      *((unsigned char *)a1 + v7[24]) = *((unsigned char *)a2 + v7[24]);
      *((unsigned char *)a1 + v7[25]) = *((unsigned char *)a2 + v7[25]);
      *((unsigned char *)a1 + v7[26]) = *((unsigned char *)a2 + v7[26]);
      *((unsigned char *)a1 + v7[27]) = *((unsigned char *)a2 + v7[27]);
      *((unsigned char *)a1 + v7[28]) = *((unsigned char *)a2 + v7[28]);
      *((unsigned char *)a1 + v7[29]) = *((unsigned char *)a2 + v7[29]);
      uint64_t v57 = v7[30];
      uint64_t v58 = (void *)((char *)a1 + v57);
      uint64_t v59 = (void *)((char *)a2 + v57);
      *uint64_t v58 = *v59;
      v58[1] = v59[1];
      uint64_t v60 = v7[31];
      uint64_t v61 = (char *)a1 + v60;
      uint64_t v62 = (char *)a2 + v60;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v33(v62, 1, v31))
      {
        uint64_t v63 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
        uint64_t v64 = v133;
      }
      else
      {
        uint64_t v64 = v133;
        (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v61, v62, v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v133 + 56))(v61, 0, 1, v31);
      }
      uint64_t v79 = v7[32];
      uint64_t v80 = (char *)a1 + v79;
      uint64_t v81 = (char *)a2 + v79;
      uint64_t v82 = *(void *)v81;
      v80[8] = v81[8];
      *(void *)uint64_t v80 = v82;
      *(void *)((char *)a1 + v7[33]) = *(void *)((char *)a2 + v7[33]);
      uint64_t v83 = v7[34];
      uint64_t v84 = (char *)a1 + v83;
      uint64_t v85 = (char *)a2 + v83;
      if (v33((char *)a2 + v83, 1, v31))
      {
        uint64_t v86 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v84, v85, *(void *)(*(void *)(v86 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v84, v85, v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v84, 0, 1, v31);
      }
      uint64_t v95 = v7[35];
      uint64_t v96 = (void *)((char *)a1 + v95);
      uint64_t v97 = (void *)((char *)a2 + v95);
      *uint64_t v96 = *v97;
      v96[1] = v97[1];
      uint64_t v98 = v7[36];
      uint64_t v99 = (char *)a1 + v98;
      uint64_t v100 = (char *)a2 + v98;
      long long v101 = *(_OWORD *)v100;
      *(void *)(v99 + 13) = *(void *)(v100 + 13);
      *(_OWORD *)uint64_t v99 = v101;
      uint64_t v102 = v7[37];
      uint64_t v103 = (char *)a1 + v102;
      uint64_t v104 = (char *)a2 + v102;
      uint64_t v105 = *(void *)v104;
      v103[8] = v104[8];
      *(void *)uint64_t v103 = v105;
      uint64_t v106 = v7[38];
      char v107 = (char *)a1 + v106;
      uint64_t v108 = (char *)a2 + v106;
      LODWORD(v105) = *(_DWORD *)v108;
      v107[4] = v108[4];
      *(_DWORD *)char v107 = v105;
      swift_bridgeObjectRetain();
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      a1[10] = a2[10];
      uint64_t v14 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      uint64_t v15 = v14[10];
      __dsta = (char *)a1 + v15;
      uint64_t v130 = (char *)a2 + v15;
      uint64_t v16 = sub_2289DE880();
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v128 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v128(v130, 1, v16))
      {
        uint64_t v18 = sub_228952BB0(&qword_2682841E0);
        memcpy(__dsta, v130, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dsta, v130, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dsta, 0, 1, v16);
      }
      uint64_t v35 = v14[11];
      uint64_t v36 = (void *)((char *)a1 + v35);
      uint64_t v37 = (void *)((char *)a2 + v35);
      *uint64_t v36 = *v37;
      v36[1] = v37[1];
      uint64_t v38 = v14[12];
      uint64_t v39 = (char *)a1 + v38;
      uint64_t v40 = (char *)a2 + v38;
      uint64_t v41 = *(void *)v40;
      v39[8] = v40[8];
      *(void *)uint64_t v39 = v41;
      uint64_t v42 = v14[13];
      uint64_t v43 = (void *)((char *)a1 + v42);
      uint64_t v44 = (void *)((char *)a2 + v42);
      *uint64_t v43 = *v44;
      v43[1] = v44[1];
      uint64_t v45 = v14[14];
      uint64_t v132 = (char *)a1 + v45;
      uint64_t v46 = (char *)a2 + v45;
      uint64_t v47 = sub_2289DE910();
      uint64_t v48 = *(void *)(v47 - 8);
      uint64_t v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v134 = v48;
      if (v49(v46, 1, v47))
      {
        uint64_t v50 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v132, v46, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v132, v46, v47);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v132, 0, 1, v47);
      }
      uint64_t v65 = v14[15];
      uint64_t v66 = (void *)((char *)a1 + v65);
      uint64_t v67 = (void *)((char *)a2 + v65);
      *uint64_t v66 = *v67;
      v66[1] = v67[1];
      uint64_t v68 = v14[16];
      int v69 = (void *)((char *)a1 + v68);
      uint64_t v70 = (void *)((char *)a2 + v68);
      *int v69 = *v70;
      v69[1] = v70[1];
      *((unsigned char *)a1 + v14[17]) = *((unsigned char *)a2 + v14[17]);
      *(void *)((char *)a1 + v14[18]) = *(void *)((char *)a2 + v14[18]);
      *((unsigned char *)a1 + v14[19]) = *((unsigned char *)a2 + v14[19]);
      *((unsigned char *)a1 + v14[20]) = *((unsigned char *)a2 + v14[20]);
      *((unsigned char *)a1 + v14[21]) = *((unsigned char *)a2 + v14[21]);
      *((unsigned char *)a1 + v14[22]) = *((unsigned char *)a2 + v14[22]);
      *((unsigned char *)a1 + v14[23]) = *((unsigned char *)a2 + v14[23]);
      *((unsigned char *)a1 + v14[24]) = *((unsigned char *)a2 + v14[24]);
      *((unsigned char *)a1 + v14[25]) = *((unsigned char *)a2 + v14[25]);
      *((unsigned char *)a1 + v14[26]) = *((unsigned char *)a2 + v14[26]);
      *((unsigned char *)a1 + v14[27]) = *((unsigned char *)a2 + v14[27]);
      *((unsigned char *)a1 + v14[28]) = *((unsigned char *)a2 + v14[28]);
      *((unsigned char *)a1 + v14[29]) = *((unsigned char *)a2 + v14[29]);
      uint64_t v71 = v14[30];
      uint64_t v72 = (void *)((char *)a1 + v71);
      uint64_t v73 = (void *)((char *)a2 + v71);
      *uint64_t v72 = *v73;
      v72[1] = v73[1];
      uint64_t v74 = v14[31];
      uint64_t v75 = (char *)a1 + v74;
      uint64_t v76 = (char *)a2 + v74;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v49(v76, 1, v47))
      {
        uint64_t v77 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v75, v76, *(void *)(*(void *)(v77 - 8) + 64));
        uint64_t v78 = v134;
      }
      else
      {
        uint64_t v78 = v134;
        (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v75, v76, v47);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(v75, 0, 1, v47);
      }
      uint64_t v87 = v14[32];
      uint64_t v88 = (char *)a1 + v87;
      long long v89 = (char *)a2 + v87;
      uint64_t v90 = *(void *)v89;
      v88[8] = v89[8];
      *(void *)uint64_t v88 = v90;
      *(void *)((char *)a1 + v14[33]) = *(void *)((char *)a2 + v14[33]);
      uint64_t v91 = v14[34];
      uint64_t v92 = (char *)a1 + v91;
      uint64_t v93 = (char *)a2 + v91;
      if (v49((char *)a2 + v91, 1, v47))
      {
        uint64_t v94 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v92, v93, *(void *)(*(void *)(v94 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v92, v93, v47);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v92, 0, 1, v47);
      }
      uint64_t v109 = v14[35];
      uint64_t v110 = (void *)((char *)a1 + v109);
      long long v111 = (void *)((char *)a2 + v109);
      *uint64_t v110 = *v111;
      v110[1] = v111[1];
      uint64_t v112 = v14[36];
      uint64_t v113 = (char *)a1 + v112;
      uint64_t v114 = (char *)a2 + v112;
      long long v115 = *(_OWORD *)v114;
      *(void *)(v113 + 13) = *(void *)(v114 + 13);
      *(_OWORD *)uint64_t v113 = v115;
      uint64_t v116 = v14[37];
      uint64_t v117 = (char *)a1 + v116;
      uint64_t v118 = (char *)a2 + v116;
      uint64_t v119 = *(void *)v118;
      v117[8] = v118[8];
      *(void *)uint64_t v117 = v119;
      uint64_t v120 = v14[38];
      uint64_t v121 = (char *)a1 + v120;
      uint64_t v122 = (char *)a2 + v120;
      LODWORD(v119) = *(_DWORD *)v122;
      v121[4] = v122[4];
      *(_DWORD *)uint64_t v121 = v119;
      swift_bridgeObjectRetain();
      uint64_t v123 = *(int *)(sub_228952BB0(&qword_268284668) + 48);
      uint64_t v124 = *(void **)((char *)a2 + v123);
      *(void *)((char *)a1 + v123) = v124;
      id v125 = v124;
    }
    swift_storeEnumTagMultiPayload();
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_228986634(uint64_t a1)
{
  uint64_t v2 = sub_228952BB0(&qword_268284638);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for PDFInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_228952BB0(&qword_268284638);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v86 = a3;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((void *)a1 + 2) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    uint64_t v15 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    uint64_t v16 = v15[10];
    uint64_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    uint64_t v19 = sub_2289DE880();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = sub_228952BB0(&qword_2682841E0);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(_OWORD *)&a1[v15[11]] = *(_OWORD *)&a2[v15[11]];
    uint64_t v32 = v15[12];
    char v33 = &a1[v32];
    uint64_t v34 = &a2[v32];
    v33[8] = v34[8];
    *(void *)char v33 = *(void *)v34;
    *(_OWORD *)&a1[v15[13]] = *(_OWORD *)&a2[v15[13]];
    uint64_t v35 = v15[14];
    uint64_t v36 = &a1[v35];
    uint64_t v37 = &a2[v35];
    uint64_t v38 = sub_2289DE910();
    uint64_t v39 = *(void *)(v38 - 8);
    uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    if (v40(v37, 1, v38))
    {
      uint64_t v41 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    *(_OWORD *)&a1[v15[15]] = *(_OWORD *)&a2[v15[15]];
    *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
    a1[v15[17]] = a2[v15[17]];
    *(void *)&a1[v15[18]] = *(void *)&a2[v15[18]];
    a1[v15[19]] = a2[v15[19]];
    a1[v15[20]] = a2[v15[20]];
    a1[v15[21]] = a2[v15[21]];
    a1[v15[22]] = a2[v15[22]];
    a1[v15[23]] = a2[v15[23]];
    a1[v15[24]] = a2[v15[24]];
    a1[v15[25]] = a2[v15[25]];
    a1[v15[26]] = a2[v15[26]];
    a1[v15[27]] = a2[v15[27]];
    a1[v15[28]] = a2[v15[28]];
    a1[v15[29]] = a2[v15[29]];
    *(_OWORD *)&a1[v15[30]] = *(_OWORD *)&a2[v15[30]];
    uint64_t v46 = v15[31];
    uint64_t v47 = &a1[v46];
    uint64_t v48 = &a2[v46];
    if (v40(&a2[v46], 1, v38))
    {
      uint64_t v49 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v47, v48, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v47, 0, 1, v38);
    }
    uint64_t v57 = v15[32];
    uint64_t v58 = &a1[v57];
    uint64_t v59 = &a2[v57];
    *(void *)uint64_t v58 = *(void *)v59;
    v58[8] = v59[8];
    *(void *)&a1[v15[33]] = *(void *)&a2[v15[33]];
    uint64_t v60 = v15[34];
    uint64_t v61 = &a1[v60];
    uint64_t v62 = &a2[v60];
    if (v40(&a2[v60], 1, v38))
    {
      uint64_t v63 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v61, v62, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v61, 0, 1, v38);
    }
    a3 = v86;
    *(_OWORD *)&a1[v15[35]] = *(_OWORD *)&a2[v15[35]];
    uint64_t v74 = v15[36];
    uint64_t v75 = &a1[v74];
    uint64_t v76 = &a2[v74];
    *(void *)(v75 + 13) = *(void *)(v76 + 13);
    *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
    uint64_t v77 = v15[37];
    uint64_t v78 = &a1[v77];
    uint64_t v79 = &a2[v77];
    *(void *)uint64_t v78 = *(void *)v79;
    v78[8] = v79[8];
    uint64_t v80 = v15[38];
    uint64_t v81 = &a1[v80];
    uint64_t v82 = &a2[v80];
    *(_DWORD *)uint64_t v81 = *(_DWORD *)v82;
    v81[4] = v82[4];
    goto LABEL_30;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v85 = a3;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((void *)a1 + 2) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    uint64_t v8 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    uint64_t v9 = v8[10];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = sub_2289DE880();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_228952BB0(&qword_2682841E0);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
    uint64_t v22 = v8[12];
    uint64_t v23 = &a1[v22];
    uint64_t v24 = &a2[v22];
    v23[8] = v24[8];
    *(void *)uint64_t v23 = *(void *)v24;
    *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
    uint64_t v25 = v8[14];
    uint64_t v26 = &a1[v25];
    uint64_t v27 = &a2[v25];
    uint64_t v28 = sub_2289DE910();
    uint64_t v29 = *(void *)(v28 - 8);
    uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    if (v30(v27, 1, v28))
    {
      uint64_t v31 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    *(_OWORD *)&a1[v8[15]] = *(_OWORD *)&a2[v8[15]];
    *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
    a1[v8[17]] = a2[v8[17]];
    *(void *)&a1[v8[18]] = *(void *)&a2[v8[18]];
    a1[v8[19]] = a2[v8[19]];
    a1[v8[20]] = a2[v8[20]];
    a1[v8[21]] = a2[v8[21]];
    a1[v8[22]] = a2[v8[22]];
    a1[v8[23]] = a2[v8[23]];
    a1[v8[24]] = a2[v8[24]];
    a1[v8[25]] = a2[v8[25]];
    a1[v8[26]] = a2[v8[26]];
    a1[v8[27]] = a2[v8[27]];
    a1[v8[28]] = a2[v8[28]];
    a1[v8[29]] = a2[v8[29]];
    *(_OWORD *)&a1[v8[30]] = *(_OWORD *)&a2[v8[30]];
    uint64_t v42 = v8[31];
    uint64_t v43 = &a1[v42];
    uint64_t v44 = &a2[v42];
    if (v30(&a2[v42], 1, v28))
    {
      uint64_t v45 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v43, v44, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v43, 0, 1, v28);
    }
    uint64_t v50 = v8[32];
    uint64_t v51 = &a1[v50];
    uint64_t v52 = &a2[v50];
    *(void *)uint64_t v51 = *(void *)v52;
    v51[8] = v52[8];
    *(void *)&a1[v8[33]] = *(void *)&a2[v8[33]];
    uint64_t v53 = v8[34];
    uint64_t v54 = &a1[v53];
    uint64_t v55 = &a2[v53];
    if (v30(&a2[v53], 1, v28))
    {
      uint64_t v56 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v54, v55, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
    }
    a3 = v85;
    *(_OWORD *)&a1[v8[35]] = *(_OWORD *)&a2[v8[35]];
    uint64_t v64 = v8[36];
    uint64_t v65 = &a1[v64];
    uint64_t v66 = &a2[v64];
    *(void *)(v65 + 13) = *(void *)(v66 + 13);
    *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
    uint64_t v67 = v8[37];
    uint64_t v68 = &a1[v67];
    int v69 = &a2[v67];
    *(void *)uint64_t v68 = *(void *)v69;
    v68[8] = v69[8];
    uint64_t v70 = v8[38];
    uint64_t v71 = &a1[v70];
    uint64_t v72 = &a2[v70];
    *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
    v71[4] = v72[4];
    uint64_t v73 = sub_228952BB0(&qword_268284668);
    *(void *)&a1[*(int *)(v73 + 48)] = *(void *)&a2[*(int *)(v73 + 48)];
LABEL_30:
    swift_storeEnumTagMultiPayload();
    goto LABEL_31;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_31:
  uint64_t v83 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v83] = a2[v83];
  return a1;
}

char *assignWithTake for PDFInfo(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_228986634((uint64_t)a1);
    uint64_t v6 = sub_228952BB0(&qword_268284638);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      uint64_t v15 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      uint64_t v16 = v15[10];
      uint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      uint64_t v19 = sub_2289DE880();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = sub_228952BB0(&qword_2682841E0);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(_OWORD *)&a1[v15[11]] = *(_OWORD *)&a2[v15[11]];
      uint64_t v32 = v15[12];
      char v33 = &a1[v32];
      uint64_t v34 = &a2[v32];
      v33[8] = v34[8];
      *(void *)char v33 = *(void *)v34;
      *(_OWORD *)&a1[v15[13]] = *(_OWORD *)&a2[v15[13]];
      uint64_t v35 = v15[14];
      uint64_t v36 = &a1[v35];
      uint64_t v37 = &a2[v35];
      uint64_t v38 = sub_2289DE910();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      if (v40(v37, 1, v38))
      {
        uint64_t v41 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
      *(_OWORD *)&a1[v15[15]] = *(_OWORD *)&a2[v15[15]];
      *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
      a1[v15[17]] = a2[v15[17]];
      *(void *)&a1[v15[18]] = *(void *)&a2[v15[18]];
      a1[v15[19]] = a2[v15[19]];
      a1[v15[20]] = a2[v15[20]];
      a1[v15[21]] = a2[v15[21]];
      a1[v15[22]] = a2[v15[22]];
      a1[v15[23]] = a2[v15[23]];
      a1[v15[24]] = a2[v15[24]];
      a1[v15[25]] = a2[v15[25]];
      a1[v15[26]] = a2[v15[26]];
      a1[v15[27]] = a2[v15[27]];
      a1[v15[28]] = a2[v15[28]];
      a1[v15[29]] = a2[v15[29]];
      *(_OWORD *)&a1[v15[30]] = *(_OWORD *)&a2[v15[30]];
      uint64_t v46 = v15[31];
      uint64_t v47 = &a1[v46];
      uint64_t v48 = &a2[v46];
      if (v40(&a2[v46], 1, v38))
      {
        uint64_t v49 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v47, v48, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v47, 0, 1, v38);
      }
      uint64_t v57 = v15[32];
      uint64_t v58 = &a1[v57];
      uint64_t v59 = &a2[v57];
      *(void *)uint64_t v58 = *(void *)v59;
      v58[8] = v59[8];
      *(void *)&a1[v15[33]] = *(void *)&a2[v15[33]];
      uint64_t v60 = v15[34];
      uint64_t v61 = &a1[v60];
      uint64_t v62 = &a2[v60];
      if (v40(&a2[v60], 1, v38))
      {
        uint64_t v63 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v61, v62, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v61, 0, 1, v38);
      }
      *(_OWORD *)&a1[v15[35]] = *(_OWORD *)&a2[v15[35]];
      uint64_t v74 = v15[36];
      uint64_t v75 = &a1[v74];
      uint64_t v76 = &a2[v74];
      *(void *)(v75 + 13) = *(void *)(v76 + 13);
      *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
      uint64_t v77 = v15[37];
      uint64_t v78 = &a1[v77];
      uint64_t v79 = &a2[v77];
      *(void *)uint64_t v78 = *(void *)v79;
      v78[8] = v79[8];
      uint64_t v80 = v15[38];
      uint64_t v81 = &a1[v80];
      uint64_t v82 = &a2[v80];
      *(_DWORD *)uint64_t v81 = *(_DWORD *)v82;
      v81[4] = v82[4];
      goto LABEL_31;
    }
    if (!EnumCaseMultiPayload)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      uint64_t v8 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      uint64_t v9 = v8[10];
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = sub_2289DE880();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = sub_228952BB0(&qword_2682841E0);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
      uint64_t v22 = v8[12];
      uint64_t v23 = &a1[v22];
      uint64_t v24 = &a2[v22];
      v23[8] = v24[8];
      *(void *)uint64_t v23 = *(void *)v24;
      *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
      uint64_t v25 = v8[14];
      uint64_t v26 = &a1[v25];
      uint64_t v27 = &a2[v25];
      uint64_t v28 = sub_2289DE910();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
      if (v30(v27, 1, v28))
      {
        uint64_t v31 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      *(_OWORD *)&a1[v8[15]] = *(_OWORD *)&a2[v8[15]];
      *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
      a1[v8[17]] = a2[v8[17]];
      *(void *)&a1[v8[18]] = *(void *)&a2[v8[18]];
      a1[v8[19]] = a2[v8[19]];
      a1[v8[20]] = a2[v8[20]];
      a1[v8[21]] = a2[v8[21]];
      a1[v8[22]] = a2[v8[22]];
      a1[v8[23]] = a2[v8[23]];
      a1[v8[24]] = a2[v8[24]];
      a1[v8[25]] = a2[v8[25]];
      a1[v8[26]] = a2[v8[26]];
      a1[v8[27]] = a2[v8[27]];
      a1[v8[28]] = a2[v8[28]];
      a1[v8[29]] = a2[v8[29]];
      *(_OWORD *)&a1[v8[30]] = *(_OWORD *)&a2[v8[30]];
      uint64_t v42 = v8[31];
      uint64_t v43 = &a1[v42];
      uint64_t v44 = &a2[v42];
      if (v30(&a2[v42], 1, v28))
      {
        uint64_t v45 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v43, v44, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v43, 0, 1, v28);
      }
      uint64_t v50 = v8[32];
      uint64_t v51 = &a1[v50];
      uint64_t v52 = &a2[v50];
      *(void *)uint64_t v51 = *(void *)v52;
      v51[8] = v52[8];
      *(void *)&a1[v8[33]] = *(void *)&a2[v8[33]];
      uint64_t v53 = v8[34];
      uint64_t v54 = &a1[v53];
      uint64_t v55 = &a2[v53];
      if (v30(&a2[v53], 1, v28))
      {
        uint64_t v56 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v54, v55, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
      }
      *(_OWORD *)&a1[v8[35]] = *(_OWORD *)&a2[v8[35]];
      uint64_t v64 = v8[36];
      uint64_t v65 = &a1[v64];
      uint64_t v66 = &a2[v64];
      *(void *)(v65 + 13) = *(void *)(v66 + 13);
      *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
      uint64_t v67 = v8[37];
      uint64_t v68 = &a1[v67];
      int v69 = &a2[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      v68[8] = v69[8];
      uint64_t v70 = v8[38];
      uint64_t v71 = &a1[v70];
      uint64_t v72 = &a2[v70];
      *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
      v71[4] = v72[4];
      uint64_t v73 = sub_228952BB0(&qword_268284668);
      *(void *)&a1[*(int *)(v73 + 48)] = *(void *)&a2[*(int *)(v73 + 48)];
LABEL_31:
      swift_storeEnumTagMultiPayload();
      goto LABEL_32;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
LABEL_32:
  uint64_t v83 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v83] = a2[v83];
  return a1;
}

uint64_t getEnumTagSinglePayload for PDFInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228987B2C);
}

uint64_t sub_228987B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_228952BB0(&qword_268284638);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 3) {
      return v10 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for PDFInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228987C00);
}

uint64_t sub_228987C00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_228952BB0(&qword_268284638);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

void sub_228987CC0()
{
  sub_228987D60();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_228987D60()
{
  if (!qword_268284680)
  {
    type metadata accessor for LibraryPDFInfo();
    type metadata accessor for MAsset();
    unint64_t v0 = type metadata accessor for ContentDataSource();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268284680);
    }
  }
}

uint64_t dispatch thunk of MCatalogRequestHandling.fetch<A>(resources:relationships:views:additionalParameters:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a8 + 8) + **(int **)(a8 + 8));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  *uint64_t v17 = v8;
  v17[1] = sub_228987F04;
  return v19(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_228987F04(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

void static ContentInfoUtilities.assetInfo(libraryAssetInfo:storeAsset:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = (uint64_t *)a3;
  uint64_t v5 = sub_228952BB0(&qword_268284690);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LibraryAudiobookInfo();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_228952BB0(&qword_268284698);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for LibraryBookInfo();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22898A6C0(a1, (uint64_t)&v45, &qword_268284300);
  if (v46)
  {
    sub_2289605CC(&v45, (uint64_t)v47);
    if (a2)
    {
      sub_228955928((uint64_t)v47, (uint64_t)&v45);
      id v19 = a2;
      sub_228952BB0(&qword_2682846A0);
      char v20 = swift_dynamicCast();
      uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
      if (v20)
      {
        v21(v14, 0, 1, v15);
        sub_22898A724((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for LibraryBookInfo);
        type metadata accessor for MBook();
        uint64_t v22 = swift_dynamicCastClass();
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v24 = type metadata accessor for BookInfo();
          uint64_t v25 = v43;
          void v43[3] = v24;
          v25[4] = sub_22898A7EC(&qword_268284228, (void (*)(uint64_t))type metadata accessor for BookInfo);
          uint64_t v26 = sub_22896EC88(v25);
          uint64_t v27 = *(int *)(sub_228952BB0(&qword_2682846B0) + 48);
          sub_22898A724((uint64_t)v18, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for LibraryBookInfo);
          *(uint64_t *)((char *)v26 + v27) = v23;
          sub_228952BB0(&qword_268284230);
          swift_storeEnumTagMultiPayload();
          *((unsigned char *)v26 + *(int *)(v24 + 20)) = 1;
LABEL_21:
          sub_2289559D0((uint64_t)v47);
          return;
        }
        sub_22898A78C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for LibraryBookInfo);
      }
      else
      {
        v21(v14, 1, 1, v15);
        sub_22896EABC((uint64_t)v14, &qword_268284698);
      }
      sub_228955928((uint64_t)v47, (uint64_t)&v45);
      char v30 = swift_dynamicCast();
      uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      if (v30)
      {
        v31(v7, 0, 1, v8);
        sub_22898A724((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for LibraryAudiobookInfo);
        type metadata accessor for MAudiobook();
        uint64_t v32 = swift_dynamicCastClass();
        if (v32)
        {
          uint64_t v33 = v32;
          uint64_t v34 = type metadata accessor for AudiobookInfo();
          uint64_t v35 = v43;
          void v43[3] = v34;
          v35[4] = sub_22898A7EC(&qword_268284218, (void (*)(uint64_t))type metadata accessor for AudiobookInfo);
          uint64_t v36 = sub_22896EC88(v35);
          uint64_t v37 = *(int *)(sub_228952BB0(&qword_2682846A8) + 48);
          sub_22898A724((uint64_t)v11, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for LibraryAudiobookInfo);
          *(uint64_t *)((char *)v36 + v37) = v33;
          sub_228952BB0(&qword_268284220);
          swift_storeEnumTagMultiPayload();
          *((unsigned char *)v36 + *(int *)(v34 + 20)) = 0;
          *((unsigned char *)v36 + *(int *)(v34 + 24)) = 1;
          goto LABEL_21;
        }
        sub_22898A78C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for LibraryAudiobookInfo);
      }
      else
      {
        v31(v7, 1, 1, v8);
        sub_22896EABC((uint64_t)v7, &qword_268284690);
      }
      uint64_t v38 = v48;
      uint64_t v39 = sub_22895598C(v47, v48);
      uint64_t v46 = v38;
      uint64_t v40 = sub_22896EC88((uint64_t *)&v45);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v38 - 8) + 16))(v40, v39, v38);
      v44[3] = type metadata accessor for MAsset();
      v44[0] = v19;
      sub_228952BB0(&qword_268284150);
      sub_22898A0F0((uint64_t)&v45, (uint64_t)v44);
      sub_2289559D0((uint64_t)v44);
      sub_2289559D0((uint64_t)&v45);
      uint64_t v41 = v43;
      v43[4] = 0;
      *(_OWORD *)uint64_t v41 = 0u;
      *((_OWORD *)v41 + 1) = 0u;
      goto LABEL_21;
    }
    sub_2289559D0((uint64_t)v47);
  }
  else
  {
    sub_22896EABC((uint64_t)&v45, &qword_268284300);
  }
  sub_22898A6C0(a1, (uint64_t)&v45, &qword_268284300);
  if (v46)
  {
    sub_2289605CC(&v45, (uint64_t)v47);
    static ContentInfoUtilities.assetInfo(libraryAssetInfo:)(v47, (uint64_t)v43);
    goto LABEL_21;
  }
  sub_22896EABC((uint64_t)&v45, &qword_268284300);
  if (a2)
  {
    id v28 = a2;
    static ContentInfoUtilities.assetInfo(storeAsset:)(v28, (uint64_t)v43);
  }
  else
  {
    uint64_t v29 = v43;
    v43[4] = 0;
    *(_OWORD *)uint64_t v29 = 0u;
    *((_OWORD *)v29 + 1) = 0u;
  }
}

uint64_t static ContentInfoUtilities.assetInfo(libraryAssetInfo:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LibraryPDFInfo();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v24[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LibraryAudiobookInfo();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v24[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LibraryBookInfo();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v24[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228955928((uint64_t)a1, (uint64_t)v25);
  sub_228952BB0(&qword_2682846A0);
  if (swift_dynamicCast())
  {
    uint64_t v13 = type metadata accessor for BookInfo();
    *(void *)(a2 + 24) = v13;
    *(void *)(a2 + 32) = sub_22898A7EC(&qword_268284228, (void (*)(uint64_t))type metadata accessor for BookInfo);
    uint64_t v14 = sub_22896EC88((uint64_t *)a2);
    sub_22898A724((uint64_t)v12, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for LibraryBookInfo);
    sub_228952BB0(&qword_268284230);
    swift_storeEnumTagMultiPayload();
    *((unsigned char *)v14 + *(int *)(v13 + 20)) = 1;
  }
  else if (swift_dynamicCast())
  {
    uint64_t v15 = type metadata accessor for AudiobookInfo();
    *(void *)(a2 + 24) = v15;
    *(void *)(a2 + 32) = sub_22898A7EC(&qword_268284218, (void (*)(uint64_t))type metadata accessor for AudiobookInfo);
    uint64_t v16 = sub_22896EC88((uint64_t *)a2);
    sub_22898A724((uint64_t)v9, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for LibraryAudiobookInfo);
    sub_228952BB0(&qword_268284220);
    swift_storeEnumTagMultiPayload();
    *((unsigned char *)v16 + *(int *)(v15 + 20)) = 0;
    *((unsigned char *)v16 + *(int *)(v15 + 24)) = 1;
  }
  else if (swift_dynamicCast())
  {
    uint64_t v17 = type metadata accessor for PDFInfo();
    *(void *)(a2 + 24) = v17;
    *(void *)(a2 + 32) = sub_22898A7EC(&qword_2682846B8, (void (*)(uint64_t))type metadata accessor for PDFInfo);
    uint64_t v18 = sub_22896EC88((uint64_t *)a2);
    sub_22898A724((uint64_t)v6, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for LibraryPDFInfo);
    sub_228952BB0(&qword_268284638);
    swift_storeEnumTagMultiPayload();
    *((unsigned char *)v18 + *(int *)(v17 + 20)) = 2;
    *((unsigned char *)v18 + *(int *)(v17 + 24)) = 0;
  }
  else
  {
    uint64_t v19 = a1[3];
    char v20 = sub_22895598C(a1, v19);
    v24[3] = v19;
    uint64_t v21 = sub_22896EC88(v24);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v21, v20, v19);
    sub_228952BB0(&qword_268284150);
    sub_22898A418((uint64_t)v24);
    sub_2289559D0((uint64_t)v24);
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return sub_2289559D0((uint64_t)v25);
}

double static ContentInfoUtilities.assetInfo(storeAsset:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for MBook();
  uint64_t v3 = swift_dynamicCastClass();
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = type metadata accessor for BookInfo();
    *(void *)(a2 + 24) = v5;
    *(void *)(a2 + 32) = sub_22898A7EC(&qword_268284228, (void (*)(uint64_t))type metadata accessor for BookInfo);
    uint64_t v6 = sub_22896EC88((uint64_t *)a2);
    *uint64_t v6 = v4;
    sub_228952BB0(&qword_268284230);
    swift_storeEnumTagMultiPayload();
    uint64_t v7 = *(int *)(v5 + 20);
  }
  else
  {
    type metadata accessor for MAudiobook();
    uint64_t v8 = swift_dynamicCastClass();
    if (!v8)
    {
      uint64_t v15[3] = type metadata accessor for MAsset();
      v15[0] = a1;
      sub_228952BB0(&qword_268284150);
      id v13 = a1;
      sub_22898A418((uint64_t)v15);
      sub_2289559D0((uint64_t)v15);
      *(void *)(a2 + 32) = 0;
      double result = 0.0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    }
    uint64_t v9 = v8;
    uint64_t v10 = type metadata accessor for AudiobookInfo();
    *(void *)(a2 + 24) = v10;
    *(void *)(a2 + 32) = sub_22898A7EC(&qword_268284218, (void (*)(uint64_t))type metadata accessor for AudiobookInfo);
    uint64_t v6 = sub_22896EC88((uint64_t *)a2);
    *uint64_t v6 = v9;
    sub_228952BB0(&qword_268284220);
    swift_storeEnumTagMultiPayload();
    *((unsigned char *)v6 + *(int *)(v10 + 20)) = 0;
    uint64_t v7 = *(int *)(v10 + 24);
  }
  *((unsigned char *)v6 + v7) = 1;

  id v11 = a1;
  return result;
}

void static ContentInfoUtilities.seriesInfo(librarySeries:storeSeries:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = (uint64_t *)a3;
  uint64_t v5 = sub_228952BB0(&qword_2682846C0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LibraryAudiobookSeriesInfo();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_228952BB0(&qword_2682846C8);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for LibraryBookSeriesInfo();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22898A6C0(a1, (uint64_t)&v46, &qword_2682841B8);
  if (v47)
  {
    sub_2289605CC(&v46, (uint64_t)v48);
    if (a2)
    {
      sub_228955928((uint64_t)v48, (uint64_t)&v46);
      id v19 = a2;
      sub_228952BB0(&qword_2682846D0);
      char v20 = swift_dynamicCast();
      uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
      if (v20)
      {
        v21(v14, 0, 1, v15);
        sub_22898A724((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for LibraryBookSeriesInfo);
        type metadata accessor for MBookSeries();
        uint64_t v22 = swift_dynamicCastClass();
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v24 = type metadata accessor for BookSeriesInfo();
          uint64_t v25 = v44;
          v44[3] = v24;
          v25[4] = sub_22898A7EC(&qword_2682846E8, (void (*)(uint64_t))type metadata accessor for BookSeriesInfo);
          uint64_t v26 = sub_22896EC88(v25);
          uint64_t v27 = *(int *)(sub_228952BB0(&qword_2682846F0) + 48);
          sub_22898A724((uint64_t)v18, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for LibraryBookSeriesInfo);
          *(uint64_t *)((char *)v26 + v27) = v23;
          sub_228952BB0(&qword_2682846F8);
          swift_storeEnumTagMultiPayload();
          uint64_t v28 = *(int *)(v24 + 20);
LABEL_18:
          *(uint64_t *)((char *)v26 + v28) = 0;
          goto LABEL_22;
        }
        sub_22898A78C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for LibraryBookSeriesInfo);
      }
      else
      {
        v21(v14, 1, 1, v15);
        sub_22896EABC((uint64_t)v14, &qword_2682846C8);
      }
      sub_228955928((uint64_t)v48, (uint64_t)&v46);
      char v31 = swift_dynamicCast();
      uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      if (v31)
      {
        v32(v7, 0, 1, v8);
        sub_22898A724((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for LibraryAudiobookSeriesInfo);
        type metadata accessor for MAudiobookSeries();
        uint64_t v33 = swift_dynamicCastClass();
        if (v33)
        {
          uint64_t v34 = v33;
          uint64_t v35 = type metadata accessor for AudiobookSeriesInfo();
          uint64_t v36 = v44;
          v44[3] = v35;
          v36[4] = sub_22898A7EC(&qword_2682846E0, (void (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo);
          uint64_t v26 = sub_22896EC88(v36);
          uint64_t v37 = (uint64_t)v26 + *(int *)(v35 + 24);
          uint64_t v38 = *(int *)(sub_228952BB0(&qword_268284510) + 48);
          sub_22898A724((uint64_t)v11, v37, (uint64_t (*)(void))type metadata accessor for LibraryAudiobookSeriesInfo);
          *(void *)(v37 + v38) = v34;
          sub_228952BB0(&qword_268284500);
          swift_storeEnumTagMultiPayload();
          *(_WORD *)uint64_t v26 = 1;
          uint64_t v28 = *(int *)(v35 + 28);
          goto LABEL_18;
        }
        sub_22898A78C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for LibraryAudiobookSeriesInfo);
      }
      else
      {
        v32(v7, 1, 1, v8);
        sub_22896EABC((uint64_t)v7, &qword_2682846C0);
      }
      uint64_t v39 = v49;
      uint64_t v40 = sub_22895598C(v48, v49);
      uint64_t v47 = v39;
      uint64_t v41 = sub_22896EC88((uint64_t *)&v46);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v39 - 8) + 16))(v41, v40, v39);
      v45[3] = type metadata accessor for MSeries();
      v45[0] = v19;
      sub_228952BB0(&qword_2682846D8);
      sub_22898A0F0((uint64_t)&v46, (uint64_t)v45);
      sub_2289559D0((uint64_t)v45);
      sub_2289559D0((uint64_t)&v46);
      uint64_t v42 = v44;
      void v44[4] = 0;
      *(_OWORD *)uint64_t v42 = 0u;
      *((_OWORD *)v42 + 1) = 0u;
      goto LABEL_22;
    }
    sub_2289559D0((uint64_t)v48);
  }
  else
  {
    sub_22896EABC((uint64_t)&v46, &qword_2682841B8);
  }
  sub_22898A6C0(a1, (uint64_t)&v46, &qword_2682841B8);
  if (v47)
  {
    sub_2289605CC(&v46, (uint64_t)v48);
    static ContentInfoUtilities.seriesInfo(librarySeries:)(v48, (uint64_t)v44);
LABEL_22:
    sub_2289559D0((uint64_t)v48);
    return;
  }
  sub_22896EABC((uint64_t)&v46, &qword_2682841B8);
  if (a2)
  {
    id v29 = a2;
    static ContentInfoUtilities.seriesInfo(storeSeries:)(v29, (uint64_t)v44);
  }
  else
  {
    char v30 = v44;
    void v44[4] = 0;
    *(_OWORD *)char v30 = 0u;
    *((_OWORD *)v30 + 1) = 0u;
  }
}

uint64_t static ContentInfoUtilities.seriesInfo(librarySeries:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LibraryAudiobookSeriesInfo();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v19[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LibraryBookSeriesInfo();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228955928((uint64_t)a1, (uint64_t)v20);
  sub_228952BB0(&qword_2682846D0);
  if (swift_dynamicCast())
  {
    uint64_t v10 = type metadata accessor for BookSeriesInfo();
    *(void *)(a2 + 24) = v10;
    *(void *)(a2 + 32) = sub_22898A7EC(&qword_2682846E8, (void (*)(uint64_t))type metadata accessor for BookSeriesInfo);
    id v11 = sub_22896EC88((uint64_t *)a2);
    sub_22898A724((uint64_t)v9, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for LibraryBookSeriesInfo);
    sub_228952BB0(&qword_2682846F8);
    swift_storeEnumTagMultiPayload();
    *(uint64_t *)((char *)v11 + *(int *)(v10 + 20)) = 0;
  }
  else if (swift_dynamicCast())
  {
    uint64_t v12 = type metadata accessor for AudiobookSeriesInfo();
    *(void *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = sub_22898A7EC(&qword_2682846E0, (void (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo);
    uint64_t v13 = sub_22896EC88((uint64_t *)a2);
    sub_22898A724((uint64_t)v6, (uint64_t)v13 + *(int *)(v12 + 24), (uint64_t (*)(void))type metadata accessor for LibraryAudiobookSeriesInfo);
    sub_228952BB0(&qword_268284500);
    swift_storeEnumTagMultiPayload();
    *(_WORD *)uint64_t v13 = 1;
    *(uint64_t *)((char *)v13 + *(int *)(v12 + 28)) = 0;
  }
  else
  {
    uint64_t v14 = a1[3];
    uint64_t v15 = sub_22895598C(a1, v14);
    void v19[3] = v14;
    uint64_t v16 = sub_22896EC88(v19);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v16, v15, v14);
    sub_228952BB0(&qword_2682846D8);
    sub_22898A418((uint64_t)v19);
    sub_2289559D0((uint64_t)v19);
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return sub_2289559D0((uint64_t)v20);
}

double static ContentInfoUtilities.seriesInfo(storeSeries:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for MBookSeries();
  uint64_t v3 = swift_dynamicCastClass();
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = type metadata accessor for BookSeriesInfo();
    *(void *)(a2 + 24) = v5;
    *(void *)(a2 + 32) = sub_22898A7EC(&qword_2682846E8, (void (*)(uint64_t))type metadata accessor for BookSeriesInfo);
    uint64_t v6 = sub_22896EC88((uint64_t *)a2);
    *uint64_t v6 = v4;
    sub_228952BB0(&qword_2682846F8);
    swift_storeEnumTagMultiPayload();
    uint64_t v7 = *(int *)(v5 + 20);
  }
  else
  {
    type metadata accessor for MAudiobookSeries();
    uint64_t v8 = swift_dynamicCastClass();
    if (!v8)
    {
      uint64_t v15[3] = type metadata accessor for MSeries();
      v15[0] = a1;
      sub_228952BB0(&qword_2682846D8);
      id v13 = a1;
      sub_22898A418((uint64_t)v15);
      sub_2289559D0((uint64_t)v15);
      *(void *)(a2 + 32) = 0;
      double result = 0.0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    }
    uint64_t v9 = v8;
    uint64_t v10 = type metadata accessor for AudiobookSeriesInfo();
    *(void *)(a2 + 24) = v10;
    *(void *)(a2 + 32) = sub_22898A7EC(&qword_2682846E0, (void (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo);
    uint64_t v6 = sub_22896EC88((uint64_t *)a2);
    *(uint64_t *)((char *)v6 + *(int *)(v10 + 24)) = v9;
    sub_228952BB0(&qword_268284500);
    swift_storeEnumTagMultiPayload();
    *(_WORD *)uint64_t v6 = 1;
    uint64_t v7 = *(int *)(v10 + 28);
  }
  *(uint64_t *)((char *)v6 + v7) = 0;

  id v11 = a1;
  return result;
}

void static ContentInfoUtilities.seriesInfo(librarySeries:storeSeries:additionalStoreAssetsForEnrichment:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v44 = a3;
  long long v45 = (uint64_t *)a4;
  uint64_t v6 = sub_228952BB0(&qword_2682846C0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LibraryAudiobookSeriesInfo();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_228952BB0(&qword_2682846C8);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for LibraryBookSeriesInfo();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  id v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22898A6C0(a1, (uint64_t)&v47, &qword_2682841B8);
  if (v48)
  {
    sub_2289605CC(&v47, (uint64_t)v49);
    if (a2)
    {
      sub_228955928((uint64_t)v49, (uint64_t)&v47);
      id v20 = a2;
      sub_228952BB0(&qword_2682846D0);
      char v21 = swift_dynamicCast();
      uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
      if (v21)
      {
        v22(v15, 0, 1, v16);
        sub_22898A724((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for LibraryBookSeriesInfo);
        type metadata accessor for MBookSeries();
        uint64_t v23 = swift_dynamicCastClass();
        if (v23)
        {
          uint64_t v24 = v23;
          uint64_t v25 = type metadata accessor for BookSeriesInfo();
          uint64_t v26 = v45;
          v45[3] = v25;
          v26[4] = sub_22898A7EC(&qword_2682846E8, (void (*)(uint64_t))type metadata accessor for BookSeriesInfo);
          uint64_t v27 = sub_22896EC88(v26);
          uint64_t v28 = *(int *)(sub_228952BB0(&qword_2682846F0) + 48);
          sub_22898A724((uint64_t)v19, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for LibraryBookSeriesInfo);
          *(uint64_t *)((char *)v27 + v28) = v24;
          sub_228952BB0(&qword_2682846F8);
          swift_storeEnumTagMultiPayload();
          uint64_t v29 = *(int *)(v25 + 20);
LABEL_18:
          *(uint64_t *)((char *)v27 + v29) = v44;
          swift_bridgeObjectRetain();
          goto LABEL_22;
        }
        sub_22898A78C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for LibraryBookSeriesInfo);
      }
      else
      {
        v22(v15, 1, 1, v16);
        sub_22896EABC((uint64_t)v15, &qword_2682846C8);
      }
      sub_228955928((uint64_t)v49, (uint64_t)&v47);
      char v32 = swift_dynamicCast();
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      if (v32)
      {
        v33(v8, 0, 1, v9);
        sub_22898A724((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LibraryAudiobookSeriesInfo);
        type metadata accessor for MAudiobookSeries();
        uint64_t v34 = swift_dynamicCastClass();
        if (v34)
        {
          uint64_t v35 = v34;
          uint64_t v36 = type metadata accessor for AudiobookSeriesInfo();
          uint64_t v37 = v45;
          v45[3] = v36;
          v37[4] = sub_22898A7EC(&qword_2682846E0, (void (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo);
          uint64_t v27 = sub_22896EC88(v37);
          uint64_t v38 = (uint64_t)v27 + *(int *)(v36 + 24);
          uint64_t v39 = *(int *)(sub_228952BB0(&qword_268284510) + 48);
          sub_22898A724((uint64_t)v12, v38, (uint64_t (*)(void))type metadata accessor for LibraryAudiobookSeriesInfo);
          *(void *)(v38 + v39) = v35;
          sub_228952BB0(&qword_268284500);
          swift_storeEnumTagMultiPayload();
          *(_WORD *)uint64_t v27 = 1;
          uint64_t v29 = *(int *)(v36 + 28);
          goto LABEL_18;
        }
        sub_22898A78C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LibraryAudiobookSeriesInfo);
      }
      else
      {
        v33(v8, 1, 1, v9);
        sub_22896EABC((uint64_t)v8, &qword_2682846C0);
      }
      uint64_t v40 = v50;
      uint64_t v41 = sub_22895598C(v49, v50);
      uint64_t v48 = v40;
      uint64_t v42 = sub_22896EC88((uint64_t *)&v47);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v40 - 8) + 16))(v42, v41, v40);
      v46[3] = type metadata accessor for MSeries();
      v46[0] = v20;
      sub_228952BB0(&qword_2682846D8);
      sub_22898A0F0((uint64_t)&v47, (uint64_t)v46);
      sub_2289559D0((uint64_t)v46);
      sub_2289559D0((uint64_t)&v47);
      uint64_t v43 = v45;
      void v45[4] = 0;
      *(_OWORD *)uint64_t v43 = 0u;
      *((_OWORD *)v43 + 1) = 0u;
      goto LABEL_22;
    }
    sub_2289559D0((uint64_t)v49);
  }
  else
  {
    sub_22896EABC((uint64_t)&v47, &qword_2682841B8);
  }
  sub_22898A6C0(a1, (uint64_t)&v47, &qword_2682841B8);
  if (v48)
  {
    sub_2289605CC(&v47, (uint64_t)v49);
    static ContentInfoUtilities.seriesInfo(librarySeries:additionalStoreAssetsForEnrichment:)(v49, v44, (uint64_t)v45);
LABEL_22:
    sub_2289559D0((uint64_t)v49);
    return;
  }
  sub_22896EABC((uint64_t)&v47, &qword_2682841B8);
  if (a2)
  {
    id v30 = a2;
    static ContentInfoUtilities.seriesInfo(storeSeries:)(v30, (uint64_t)v45);
  }
  else
  {
    char v31 = v45;
    void v45[4] = 0;
    *(_OWORD *)char v31 = 0u;
    *((_OWORD *)v31 + 1) = 0u;
  }
}

uint64_t static ContentInfoUtilities.seriesInfo(librarySeries:additionalStoreAssetsForEnrichment:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for LibraryAudiobookSeriesInfo();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v21[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LibraryBookSeriesInfo();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228955928((uint64_t)a1, (uint64_t)v22);
  sub_228952BB0(&qword_2682846D0);
  if (swift_dynamicCast())
  {
    uint64_t v12 = type metadata accessor for BookSeriesInfo();
    *(void *)(a3 + 24) = v12;
    *(void *)(a3 + 32) = sub_22898A7EC(&qword_2682846E8, (void (*)(uint64_t))type metadata accessor for BookSeriesInfo);
    uint64_t v13 = sub_22896EC88((uint64_t *)a3);
    sub_22898A724((uint64_t)v11, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LibraryBookSeriesInfo);
    sub_228952BB0(&qword_2682846F8);
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = *(int *)(v12 + 20);
  }
  else
  {
    if (!swift_dynamicCast())
    {
      uint64_t v16 = a1[3];
      uint64_t v17 = sub_22895598C(a1, v16);
      void v21[3] = v16;
      uint64_t v18 = sub_22896EC88(v21);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v18, v17, v16);
      sub_228952BB0(&qword_2682846D8);
      sub_22898A418((uint64_t)v21);
      sub_2289559D0((uint64_t)v21);
      *(void *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return sub_2289559D0((uint64_t)v22);
    }
    uint64_t v15 = type metadata accessor for AudiobookSeriesInfo();
    *(void *)(a3 + 24) = v15;
    *(void *)(a3 + 32) = sub_22898A7EC(&qword_2682846E0, (void (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo);
    uint64_t v13 = sub_22896EC88((uint64_t *)a3);
    sub_22898A724((uint64_t)v8, (uint64_t)v13 + *(int *)(v15 + 24), (uint64_t (*)(void))type metadata accessor for LibraryAudiobookSeriesInfo);
    sub_228952BB0(&qword_268284500);
    swift_storeEnumTagMultiPayload();
    *(_WORD *)uint64_t v13 = 1;
    uint64_t v14 = *(int *)(v15 + 28);
  }
  *(uint64_t *)((char *)v13 + v14) = a2;
  swift_bridgeObjectRetain();
  return sub_2289559D0((uint64_t)v22);
}

void sub_22898A0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2289DF5D0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228952C2C(a1, (uint64_t)v22);
  sub_2289DF5A0();
  sub_2289DF5B0();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v5 + 8);
  v8(v7, v4);
  sub_228952C2C(a2, (uint64_t)v22);
  sub_2289DF5A0();
  sub_2289DF5B0();
  v8(v7, v4);
  if (qword_268283E68 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_2289DEA10();
  sub_228952BF4(v9, (uint64_t)qword_268284170);
  uint64_t v10 = sub_2289DE9F0();
  os_log_type_t v11 = sub_2289DF0B0();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    v22[0] = v13;
    *(_DWORD *)uint64_t v12 = 136315650;
    uint64_t v14 = sub_2289DF620();
    uint64_t v21 = sub_22897ACBC(v14, v15, v22);
    sub_2289DF150();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v16 = sub_2289DF620();
    uint64_t v21 = sub_22897ACBC(v16, v17, v22);
    sub_2289DF150();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 22) = 2080;
    uint64_t v18 = sub_2289DF620();
    uint64_t v21 = sub_22897ACBC(v18, v19, v22);
    sub_2289DF150();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22894E000, v10, v11, "%s and/or %s cannot be used to create a valid %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x22A6A29E0](v13, -1, -1);
    MEMORY[0x22A6A29E0](v12, -1, -1);
  }

  if (qword_26AECF788 != -1) {
    swift_once();
  }
}

void sub_22898A418(uint64_t a1)
{
  uint64_t v2 = sub_2289DF5D0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228952C2C(a1, (uint64_t)v17);
  sub_2289DF5A0();
  sub_2289DF5B0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_268283E68 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_2289DEA10();
  sub_228952BF4(v6, (uint64_t)qword_268284170);
  uint64_t v7 = sub_2289DE9F0();
  os_log_type_t v8 = sub_2289DF0B0();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    v17[0] = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = sub_2289DF620();
    uint64_t v16 = sub_22897ACBC(v11, v12, v17);
    sub_2289DF150();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v13 = sub_2289DF620();
    uint64_t v16 = sub_22897ACBC(v13, v14, v17);
    sub_2289DF150();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22894E000, v7, v8, "%s cannot be used to create a valid %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22A6A29E0](v10, -1, -1);
    MEMORY[0x22A6A29E0](v9, -1, -1);
  }

  if (qword_26AECF788 != -1) {
    swift_once();
  }
}

uint64_t sub_22898A6C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_228952BB0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22898A724(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_22898A78C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_22898A7EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentInfoUtilities()
{
  return &type metadata for ContentInfoUtilities;
}

uint64_t Sequence.compact<A>()()
{
  return sub_2289DED70();
}

uint64_t sub_22898A89C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_2289DF130();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
}

unint64_t sub_22898A910(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_228952BB0(&qword_268284778);
  uint64_t v2 = (void *)sub_2289DF3B0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_2289D7094(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    unint64_t v12 = (void *)(v2[7] + 16 * result);
    *unint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_22898AA34(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_228952BB0(&qword_268284760);
  uint64_t v2 = sub_2289DF3B0();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_22898A6C0(v6, (uint64_t)&v15, &qword_268284768);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_2289D7094(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_22897D02C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_22898AB6C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_228952BB0(&qword_268284758);
  uint64_t v2 = sub_2289DF3B0();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v21 = v2 + 64;
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v22 = v4;
    uint64_t v6 = *(v5 - 3);
    uint64_t v7 = *(v5 - 2);
    uint64_t v9 = *(v5 - 1);
    uint64_t v8 = *v5;
    uint64_t v11 = v5[1];
    uint64_t v10 = v5[2];
    uint64_t v12 = v5[4];
    uint64_t v13 = v5[6];
    uint64_t v23 = v5[5];
    uint64_t v24 = v5[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_2289D7094(v6, v7);
    if (v15) {
      break;
    }
    *(void *)(v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v16 = v6;
    v16[1] = v7;
    long long v17 = (void *)(v3[7] + (result << 6));
    *long long v17 = v9;
    v17[1] = v8;
    v17[2] = v11;
    v17[3] = v10;
    uint64_t v17[4] = v24;
    v17[5] = v12;
    v17[6] = v23;
    v17[7] = v13;
    uint64_t v18 = v3[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    v3[2] = v20;
    v5 += 10;
    uint64_t v4 = v22 - 1;
    if (v22 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_22898ACE8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_228952BB0(&qword_268284748);
  uint64_t v2 = sub_2289DF3B0();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_22898A6C0(v6, (uint64_t)v15, &qword_268284750);
    unint64_t result = sub_2289D7160((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_22897D02C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_22898AE2C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_228952BB0(&qword_268284740);
  uint64_t v2 = (void *)sub_2289DF3B0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_2289D7094(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id MResource.init(with:config:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  char v7 = *a2;
  char v8 = (void *)*((void *)a2 + 1);
  uint64_t v9 = OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships;
  *(void *)&v2[OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships] = 1;
  uint64_t v42 = OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views;
  *(void *)&v2[OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views] = 1;
  LOBYTE(v44) = 5;
  sub_22897B700();
  long long v10 = v2;
  swift_bridgeObjectRetain();
  sub_2289B3B60(a1, MEMORY[0x263F8D310], (uint64_t)&v45);
  swift_bridgeObjectRelease();
  uint64_t v11 = v46;
  if (!v46) {
    goto LABEL_10;
  }
  char v37 = v7;
  uint64_t v12 = v45;
  uint64_t v13 = HIBYTE(v46) & 0xF;
  if ((v46 & 0x2000000000000000) == 0) {
    uint64_t v13 = v45 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13)
  {
    swift_bridgeObjectRelease();
LABEL_10:

    goto LABEL_11;
  }
  uint64_t v40 = v9;
  LOBYTE(v44) = 4;
  swift_bridgeObjectRetain();
  sub_2289B3B60(a1, MEMORY[0x263F8D310], (uint64_t)&v45);
  uint64_t v14 = swift_bridgeObjectRelease();
  unint64_t v15 = v46;
  if (v46)
  {
    uint64_t v38 = v2;
    uint64_t v16 = v45;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(ObjectType + 136))(&v45, v14);
    unint64_t v17 = 0xEB00000000736B6FLL;
    uint64_t v18 = 0x6F622D6F69647561;
    switch((char)v45)
    {
      case 1:
        unint64_t v17 = 0x80000002289E5C70;
        if (v16 == 0xD000000000000011) {
          goto LABEL_26;
        }
        goto LABEL_29;
      case 2:
        unint64_t v17 = 0xE700000000000000;
        if (v16 != 0x73726F68747561) {
          goto LABEL_29;
        }
        goto LABEL_26;
      case 3:
        unint64_t v17 = 0xE500000000000000;
        if (v16 != 0x736B6F6F62) {
          goto LABEL_29;
        }
        goto LABEL_26;
      case 4:
        uint64_t v18 = 0x7265732D6B6F6F62;
        unint64_t v17 = 0xEB00000000736569;
        goto LABEL_25;
      case 5:
        unint64_t v17 = 0xE600000000000000;
        if (v16 != 0x7365726E6567) {
          goto LABEL_29;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (v16 != v18) {
          goto LABEL_29;
        }
LABEL_26:
        if (v15 == v17)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_29:
          char v31 = sub_2289DF480();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v31 & 1) == 0)
          {
            swift_bridgeObjectRelease();

            uint64_t v3 = v38;
            uint64_t v9 = v40;
            break;
          }
        }
        LOBYTE(v44) = 6;
        swift_bridgeObjectRetain();
        sub_2289B3B60(a1, MEMORY[0x263F8D310], (uint64_t)&v45);
        swift_bridgeObjectRelease();
        uint64_t v32 = v46;
        uint64_t v9 = v40;
        if (v46)
        {
          uint64_t v33 = v45;
          uint64_t v34 = (uint64_t *)&v10[OBJC_IVAR____TtC14BookFoundation9MResource_id];
          *uint64_t v34 = v12;
          v34[1] = v11;
          uint64_t v35 = (uint64_t *)&v10[OBJC_IVAR____TtC14BookFoundation9MResource_href];
          uint64_t *v35 = v33;
          v35[1] = v32;
          *(void *)&v10[OBJC_IVAR____TtC14BookFoundation9MResource_data] = a1;
          uint64_t v36 = &v10[OBJC_IVAR____TtC14BookFoundation9MResource_config];
          *uint64_t v36 = v37;
          *((void *)v36 + 1) = v8;

          v43.receiver = v10;
          v43.super_class = (Class)type metadata accessor for MResource();
          return objc_msgSendSuper2(&v43, sel_init);
        }
        swift_bridgeObjectRelease();

        uint64_t v3 = v38;
        break;
    }
  }
  else
  {
    swift_bridgeObjectRelease();

    uint64_t v9 = v40;
  }
LABEL_11:
  if (qword_26AECF788 != -1) {
    swift_once();
  }
  if (qword_268283E70 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_2289DEA10();
  sub_228952BF4(v19, (uint64_t)qword_268284188);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_2289DE9F0();
  os_log_type_t v21 = sub_2289DF0A0();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v41 = v9;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v45 = v23;
    *(_DWORD *)uint64_t v22 = 136315394;
    uint64_t v39 = v10;
    unint64_t v24 = sub_22898C7D4(ObjectType);
    sub_22897ACBC(v24, v25, &v45);
    sub_2289DF150();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_2289DEA90();
    unint64_t v28 = v27;
    swift_bridgeObjectRelease();
    uint64_t v44 = sub_22897ACBC(v26, v28, &v45);
    sub_2289DF150();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22894E000, v20, v21, "Invalid data for %s: %s", (uint8_t *)v22, 0x16u);
    long long v10 = v39;
    swift_arrayDestroy();
    uint64_t v29 = v23;
    uint64_t v9 = v41;
    MEMORY[0x22A6A29E0](v29, -1, -1);
    MEMORY[0x22A6A29E0](v22, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_228973854(*(void *)&v3[v9]);
  sub_228973854(*(void *)&v3[v42]);

  type metadata accessor for MResource();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t sub_22898B554()
{
  return sub_2289D4BA4(7);
}

uint64_t sub_22898B55C()
{
  return sub_2289D49E0(0);
}

uint64_t sub_22898B564()
{
  uint64_t v1 = OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships);
  uint64_t v3 = v2;
  if (v2 == 1)
  {
    uint64_t v4 = sub_2289D49E0(1);
    if (v4)
    {
      uint64_t v8 = MEMORY[0x263F8EE80];
      uint64_t v5 = MEMORY[0x270FA5388](v4);
      sub_22898C9F4(v5, (void (*)(unsigned char *, unsigned char *))sub_22898C8E8);
      swift_bridgeObjectRelease();
      uint64_t v3 = v8;
    }
    else
    {
      uint64_t v3 = 0;
    }
    uint64_t v6 = *(void *)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    swift_bridgeObjectRetain();
    sub_228973854(v6);
  }
  sub_228974004(v2);
  return v3;
}

uint64_t sub_22898B650(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships);
  *(void *)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships) = a1;
  return sub_228973854(v2);
}

uint64_t (*sub_22898B668(uint64_t *a1))(void *a1, char a2)
{
  a1[1] = v1;
  *a1 = sub_22898B564();
  return sub_22898B6B0;
}

uint64_t sub_22898B6B0(void *a1, char a2)
{
  return sub_22898B814(a1, a2, &OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships);
}

uint64_t sub_22898B6BC()
{
  uint64_t v1 = OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views);
  uint64_t v3 = v2;
  if (v2 == 1)
  {
    uint64_t v4 = sub_2289D49E0(2);
    if (v4)
    {
      uint64_t v8 = MEMORY[0x263F8EE80];
      uint64_t v5 = MEMORY[0x270FA5388](v4);
      sub_22898C9F4(v5, (void (*)(unsigned char *, unsigned char *))sub_22898D2DC);
      swift_bridgeObjectRelease();
      uint64_t v3 = v8;
    }
    else
    {
      uint64_t v3 = 0;
    }
    uint64_t v6 = *(void *)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    swift_bridgeObjectRetain();
    sub_228973854(v6);
  }
  sub_228974004(v2);
  return v3;
}

uint64_t sub_22898B7A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views);
  *(void *)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views) = a1;
  return sub_228973854(v2);
}

uint64_t (*sub_22898B7C0(uint64_t *a1))(void *a1, char a2)
{
  a1[1] = v1;
  *a1 = sub_22898B6BC();
  return sub_22898B808;
}

uint64_t sub_22898B808(void *a1, char a2)
{
  return sub_22898B814(a1, a2, &OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views);
}

uint64_t sub_22898B814(void *a1, char a2, void *a3)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = *(void *)(v3 + *a3);
  *(void *)(v3 + *a3) = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_228973854(v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return sub_228973854(v4);
  }
}

uint64_t sub_22898B888()
{
  return sub_2289D49E0(3);
}

unint64_t sub_22898B890()
{
  unint64_t result = sub_22898BD98(*(void *)(v0 + OBJC_IVAR____TtC14BookFoundation9MResource_data));
  if (!result)
  {
    uint64_t v2 = MEMORY[0x263F8EE78];
    return sub_22898AA34(v2);
  }
  return result;
}

uint64_t MResource.resources<A>(for:)(void *a1, uint64_t a2)
{
}

{
}

uint64_t type metadata accessor for MResource()
{
  return self;
}

BookFoundation::MResource::Keys_optional __swiftcall MResource.Keys.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_2289DF3F0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 8;
  if (v3 < 8) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

unint64_t MResource.Keys.rawValue.getter()
{
  unint64_t result = 0x7475626972747461;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6E6F6974616C6572;
      break;
    case 2:
      unint64_t result = 0x7377656976;
      break;
    case 3:
      unint64_t result = 1635018093;
      break;
    case 4:
      unint64_t result = 1701869940;
      break;
    case 5:
      unint64_t result = 25705;
      break;
    case 6:
      unint64_t result = 1717924456;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22898BA78(unsigned __int8 *a1, char *a2)
{
  return sub_2289654A0(*a1, *a2);
}

uint64_t sub_22898BA84()
{
  return sub_2289B13D4();
}

uint64_t sub_22898BA90()
{
  return sub_2289B0CBC();
}

uint64_t sub_22898BA98()
{
  return sub_2289B13D4();
}

BookFoundation::MResource::Keys_optional sub_22898BAA0(Swift::String *a1)
{
  return MResource.Keys.init(rawValue:)(*a1);
}

unint64_t sub_22898BAAC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MResource.Keys.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id MResource.__allocating_init(with:config:)(uint64_t a1, char *a2)
{
  id v5 = objc_allocWithZone(v2);
  return MResource.init(with:config:)(a1, a2);
}

void sub_22898BB18()
{
}

uint64_t MResource.id.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MResource.href.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14BookFoundation9MResource_href);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_22898BC4C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  sub_22898D274(a1, (uint64_t)v14);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    sub_228952C2C(a2, (uint64_t)v14);
    sub_228952BB0(&qword_268284000);
    if (swift_dynamicCast())
    {
      uint64_t v8 = *(void **)(a4 + OBJC_IVAR____TtC14BookFoundation9MResource_config + 8);
      LOBYTE(v14[0]) = *(unsigned char *)(a4 + OBJC_IVAR____TtC14BookFoundation9MResource_config);
      v14[1] = v8;
      type metadata accessor for MResourceSet();
      swift_allocObject();
      id v9 = v8;
      uint64_t v10 = MResourceSet.init(with:config:)(v12, (char *)v14);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v14[0] = *a3;
      *a3 = 0x8000000000000000;
      sub_22897B3E8(v10, v12, v13, isUniquelyReferenced_nonNull_native);
      *a3 = v14[0];
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_22898BD98(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_228952BB0(&qword_268284760);
    uint64_t v2 = (void *)sub_2289DF3B0();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v23 = a1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v7 << 6);
      int64_t v12 = v7;
    }
    else
    {
      int64_t v13 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_37;
      }
      if (v13 >= v22)
      {
LABEL_33:
        sub_22898D2D0();
        return (unint64_t)v2;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v13);
      int64_t v12 = v7 + 1;
      if (!v14)
      {
        int64_t v12 = v7 + 2;
        if (v7 + 2 >= v22) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v23 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v7 + 3;
          if (v7 + 3 >= v22) {
            goto LABEL_33;
          }
          unint64_t v14 = *(void *)(v23 + 8 * v12);
          if (!v14)
          {
            int64_t v12 = v7 + 4;
            if (v7 + 4 >= v22) {
              goto LABEL_33;
            }
            unint64_t v14 = *(void *)(v23 + 8 * v12);
            if (!v14)
            {
              int64_t v15 = v7 + 5;
              if (v7 + 5 >= v22) {
                goto LABEL_33;
              }
              unint64_t v14 = *(void *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v12 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_38;
                  }
                  if (v12 >= v22) {
                    goto LABEL_33;
                  }
                  unint64_t v14 = *(void *)(v23 + 8 * v12);
                  ++v15;
                  if (v14) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v10 = (v14 - 1) & v14;
      unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    sub_22898D274(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    sub_228952C2C(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    uint64_t v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    sub_22898D274((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      sub_22896EABC((uint64_t)v30, &qword_268284770);
      swift_bridgeObjectRelease();
      sub_22898D2D0();
      swift_release();
      return 0;
    }
    sub_228952C2C((uint64_t)v31 + 8, (uint64_t)v25);
    sub_22896EABC((uint64_t)v30, &qword_268284770);
    sub_22897D02C(v25, v26);
    long long v27 = v24;
    sub_22897D02C(v26, v28);
    long long v16 = v27;
    sub_22897D02C(v28, v29);
    sub_22897D02C(v29, &v27);
    unint64_t result = sub_2289D7094(v16, *((uint64_t *)&v16 + 1));
    unint64_t v17 = result;
    if (v18)
    {
      uint64_t v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v8 = v16;
      id v9 = (_OWORD *)(v2[7] + 32 * v17);
      sub_2289559D0((uint64_t)v9);
      unint64_t result = (unint64_t)sub_22897D02C(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    unint64_t result = (unint64_t)sub_22897D02C(&v27, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v19 = v2[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_36;
    }
    v2[2] = v21;
LABEL_8:
    int64_t v7 = v12;
    unint64_t v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

id MResource.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void MResource.init()()
{
}

id MResource.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MResource();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_22898C2CC@<X0>(void *a1@<X8>)
{
  objc_super v2 = (void *)(*v1 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
  uint64_t v3 = v2[1];
  *a1 = *v2;
  a1[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t static MResource.from<A>(response:config:)(uint64_t a1, char *a2)
{
  char v3 = *a2;
  uint64_t v4 = (void *)*((void *)a2 + 1);
  sub_2289DF200();
  if (*(void *)(a1 + 16) && (unint64_t v5 = sub_2289D7160((uint64_t)v16), (v6 & 1) != 0))
  {
    sub_228952C2C(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v18);
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
  }
  sub_228952AFC((uint64_t)v16);
  if (*((void *)&v19 + 1))
  {
    if (swift_dynamicCast())
    {
      uint64_t v7 = static MResourceType.classType(for:)(1701869940, 0xE400000000000000);
      swift_bridgeObjectRelease();
      if (!v7)
      {
        sub_22898CBA4();
        swift_allocError();
        char v15 = 0;
        *(void *)uint64_t v14 = a1;
        goto LABEL_13;
      }
      v16[0] = v3;
      unint64_t v17 = v4;
      uint64_t v8 = *(uint64_t (**)(uint64_t, unsigned char *))(v7 + 128);
      id v9 = v4;
      uint64_t v10 = swift_bridgeObjectRetain();
      uint64_t v11 = v8(v10, v16);
      if (v11)
      {
        int64_t v12 = (void *)v11;
        uint64_t result = swift_dynamicCastClass();
        if (result) {
          return result;
        }
      }
    }
  }
  else
  {
    sub_22896EABC((uint64_t)&v18, &qword_26AECF7D8);
  }
  sub_22898CBA4();
  swift_allocError();
  *(void *)uint64_t v14 = a1;
  char v15 = 1;
LABEL_13:
  *(unsigned char *)(v14 + 8) = v15;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t MResource.sparseResources<A>(for:)(void *a1, uint64_t a2)
{
}

{
}

uint64_t sub_22898C4E4(void *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t), const char *a5)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = a3();
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = sub_2289DEBC0();
    if (*(void *)(v12 + 16))
    {
      sub_2289D7094(v13, v14);
      if (v15)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v16 = a4(a2);
        swift_release();
        return v16;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (qword_268283E70 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_2289DEA10();
  sub_228952BF4(v18, (uint64_t)qword_268284188);
  id v19 = a1;
  BOOL v20 = sub_2289DE9F0();
  os_log_type_t v21 = sub_2289DF0A0();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v28 = v23;
    *(_DWORD *)uint64_t v22 = 136315394;
    uint64_t v24 = sub_2289DEBC0();
    sub_22897ACBC(v24, v25, &v28);
    sub_2289DF150();

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    unint64_t v26 = sub_22898C7D4(ObjectType);
    sub_22897ACBC(v26, v27, &v28);
    sub_2289DF150();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22894E000, v20, v21, a5, (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22A6A29E0](v23, -1, -1);
    MEMORY[0x22A6A29E0](v22, -1, -1);
  }
  else
  {
  }
  return 0;
}

unint64_t sub_22898C7D4(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(a1 + 136))(&v2);
  unint64_t result = 0x6F622D6F69647561;
  switch((char)v2)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x73726F68747561;
      break;
    case 3:
      unint64_t result = 0x736B6F6F62;
      break;
    case 4:
      unint64_t result = 0x7265732D6B6F6F62;
      break;
    case 5:
      unint64_t result = 0x7365726E6567;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22898C8E8(uint64_t a1, uint64_t a2)
{
  return sub_22898BC4C(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

unint64_t sub_22898C8F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  sub_228952BB0(&qword_268283FF0);
  char v3 = (void *)sub_2289DF3B0();
  unsigned __int8 v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = sub_2289D7000(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v12 = v8 + 2;
    unsigned __int8 v4 = *((unsigned char *)v8 - 8);
    uint64_t v13 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = sub_2289D7000(v4);
    uint64_t v8 = v12;
    uint64_t v5 = v13;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_22898C9F4(uint64_t a1, void (*a2)(unsigned char *, unsigned char *))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v14 = *(void *)(v4 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    sub_22898D274(*(void *)(a1 + 48) + 40 * v12, (uint64_t)v16);
    sub_228952C2C(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v17);
    a2(v16, v17);
    uint64_t result = sub_22896EABC((uint64_t)v16, &qword_268284770);
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v8) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_22898CBA4()
{
  unint64_t result = qword_268284730;
  if (!qword_268284730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284730);
  }
  return result;
}

unint64_t sub_22898CBFC()
{
  unint64_t result = qword_268284738;
  if (!qword_268284738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284738);
  }
  return result;
}

uint64_t sub_22898CC50()
{
  return MEMORY[0x263F8D320];
}

uint64_t sub_22898CC5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_22898B564();
  *a1 = result;
  return result;
}

uint64_t sub_22898CC88(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_22898CCCC(a1, a2, a3, a4, &OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships);
}

uint64_t sub_22898CC94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_22898B6BC();
  *a1 = result;
  return result;
}

uint64_t sub_22898CCC0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_22898CCCC(a1, a2, a3, a4, &OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views);
}

uint64_t sub_22898CCCC(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *(void *)(*a2 + *a5);
  *(void *)(*a2 + *a5) = *a1;
  swift_bridgeObjectRetain();

  return sub_228973854(v5);
}

uint64_t method lookup function for MResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MResource);
}

uint64_t dispatch thunk of MResource.__allocating_init(with:config:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of static MResource.type.getter()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of MResource.socialHighlightID.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of MResource.attributes.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of MResource.relationships.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of MResource.relationships.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of MResource.relationships.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of MResource.views.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of MResource.views.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of MResource.views.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of MResource.meta.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of MResource.underlyingJSON.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t getEnumTagSinglePayload for MResource.Keys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MResource.Keys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22898D0B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MResource.Keys()
{
  return &type metadata for MResource.Keys;
}

uint64_t initializeBufferWithCopyOfBuffer for MResource.MResourceInstantiationError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MResource.MResourceInstantiationError()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for MResource.MResourceInstantiationError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MResource.MResourceInstantiationError(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for MResource.MResourceInstantiationError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MResource.MResourceInstantiationError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MResource.MResourceInstantiationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_22898D250(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_22898D258(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MResource.MResourceInstantiationError()
{
  return &type metadata for MResource.MResourceInstantiationError;
}

uint64_t sub_22898D274(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_22898D2D0()
{
  return swift_release();
}

uint64_t FloatingPoint.normalize(from:to:clamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  LODWORD(v83) = a3;
  uint64_t v79 = a2;
  uint64_t v77 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v71 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v67 = (char *)&v65 - v11;
  uint64_t v76 = *(void *)(*(void *)(a5 + 24) + 8);
  uint64_t v12 = sub_2289DEB70();
  uint64_t v72 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v68 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v69 = (char *)&v65 - v15;
  uint64_t v16 = *(void *)(*(void *)(a5 + 16) + 8);
  uint64_t v82 = *(char **)(v16 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v74 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v80 = (char *)&v65 - v20;
  uint64_t v21 = *(void *)(a4 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v75 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v84 = (char *)&v65 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v65 - v27;
  uint64_t v29 = MEMORY[0x270FA5388](v26);
  char v31 = (char *)&v65 - v30;
  MEMORY[0x270FA5388](v29);
  uint64_t v85 = (char *)&v65 - v32;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v33(v31, a1, a4);
  uint64_t v86 = v12;
  uint64_t v34 = *(int *)(v12 + 36);
  uint64_t v73 = a1;
  uint64_t v88 = v33;
  uint64_t v89 = v21 + 16;
  v33(v28, a1 + v34, a4);
  LOBYTE(v12) = sub_2289DEB80();
  uint64_t v66 = v21;
  uint64_t v35 = *(void (**)(char *, uint64_t))(v21 + 8);
  v35(v28, a4);
  uint64_t v90 = v35;
  uint64_t v87 = v21 + 8;
  v35(v31, a4);
  uint64_t v78 = v16;
  if (v12)
  {
    swift_getAssociatedConformanceWitness();
    sub_2289DF4E0();
    uint64_t v36 = v85;
    sub_2289DF460();
  }
  else
  {
    sub_2289DF370();
    sub_2289DF370();
    uint64_t v36 = v85;
    sub_2289DEB00();
    char v37 = v90;
    v90(v28, a4);
    v37(v31, a4);
  }
  uint64_t v38 = v28;
  uint64_t v39 = v88;
  if ((v83 & 1) == 0) {
    goto LABEL_7;
  }
  v88(v28, (uint64_t)v36, a4);
  swift_getAssociatedConformanceWitness();
  sub_2289DF4E0();
  uint64_t v40 = v84;
  sub_2289DF460();
  uint64_t v41 = v40;
  sub_2289DF4E0();
  uint64_t v42 = v75;
  sub_2289DF460();
  uint64_t result = sub_2289DEB60();
  if (result)
  {
    uint64_t v83 = (uint64_t)v31;
    uint64_t v44 = TupleTypeMetadata2;
    uint64_t v45 = v67;
    unint64_t v46 = &v67[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v82 = v28;
    long long v47 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
    v47(v67, v41, a4);
    uint64_t AssociatedTypeWitness = (uint64_t)v46;
    v47(v46, v42, a4);
    uint64_t v48 = v71;
    uint64_t v49 = &v71[*(int *)(v44 + 48)];
    uint64_t v50 = (void (*)(char *, char *, uint64_t))v88;
    v88(v71, (uint64_t)v45, a4);
    v50(v49, v46, a4);
    uint64_t v51 = v68;
    v47(v68, v48, a4);
    v90(v49, a4);
    uint64_t v52 = *(int *)(v44 + 48);
    uint64_t v53 = v83;
    uint64_t v54 = &v48[v52];
    v47(v48, v45, a4);
    v47(v54, (char *)AssociatedTypeWitness, a4);
    uint64_t v55 = v86;
    v47(&v51[*(int *)(v86 + 36)], v54, a4);
    v90(v48, a4);
    uint64_t v56 = v72;
    uint64_t v57 = (uint64_t)v69;
    uint64_t v58 = v51;
    uint64_t v59 = v85;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v69, v58, v55);
    uint64_t v60 = v82;
    Comparable.clamped(_:)(v57, a4, v53);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v55);
    uint64_t v36 = v59;
    v90(v60, a4);
    v90(v59, a4);
    char v31 = (char *)v53;
    v47(v59, (char *)v53, a4);
    uint64_t v39 = v88;
    uint64_t v38 = v60;
LABEL_7:
    uint64_t v61 = v31;
    uint64_t v62 = v38;
    v39(v61, v79, a4);
    uint64_t v63 = v84;
    sub_2289DF370();
    sub_2289DEFB0();
    uint64_t v64 = v90;
    v90(v63, a4);
    sub_2289DF360();
    v64(v62, a4);
    v64(v61, a4);
    return ((uint64_t (*)(char *, uint64_t))v64)(v36, a4);
  }
  __break(1u);
  return result;
}

uint64_t sub_22898DB98(char *a1, char *a2)
{
  return sub_2289659B4(*a1, *a2);
}

uint64_t sub_22898DBA4()
{
  return sub_2289DF590();
}

uint64_t sub_22898DC18()
{
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_22898DC78()
{
  return sub_2289DF590();
}

uint64_t sub_22898DCE8@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_2289DF3F0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_22898DD48(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1701667182;
  if (*v1) {
    uint64_t v2 = 7107189;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xE300000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t MAuthor.name.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14BookFoundation7MAuthor_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MAuthor.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14BookFoundation7MAuthor_url;
  uint64_t v4 = sub_2289DE880();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

id MAuthor.__allocating_init(with:config:)(uint64_t a1, unsigned __int8 *a2)
{
  id v5 = objc_allocWithZone(v2);
  return MAuthor.init(with:config:)(a1, a2);
}

id MAuthor.init(with:config:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = sub_228952BB0(&qword_2682841E0);
  MEMORY[0x270FA5388](v6 - 8);
  int v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2289DE880();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v36) = *a2;
  uint64_t v13 = (void *)*((void *)a2 + 1);
  LOBYTE(v39) = 0;
  uint64_t v14 = v2;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_228952BB0(&qword_268284000);
  sub_22897B700();
  sub_2289B3B60(a1, v15, (uint64_t)&v37);
  swift_bridgeObjectRelease();
  uint64_t v16 = v37;
  if (!v37)
  {

LABEL_10:
    if (qword_26AECF788 != -1) {
      swift_once();
    }
    if (qword_268283E70 != -1) {
      swift_once();
    }
    uint64_t v20 = sub_2289DEA10();
    sub_228952BF4(v20, (uint64_t)qword_268284188);
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_2289DE9F0();
    os_log_type_t v22 = sub_2289DF0A0();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v35 = v24;
      *(_DWORD *)uint64_t v23 = 136315394;
      uint64_t v36 = ObjectType;
      uint64_t v37 = v24;
      uint64_t v39 = sub_22897ACBC(0x73726F68747561, 0xE700000000000000, &v37);
      sub_2289DF150();
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v25 = sub_2289DEA90();
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      uint64_t v39 = sub_22897ACBC(v25, v27, &v37);
      sub_2289DF150();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22894E000, v21, v22, "Missing author data for %s: %s", (uint8_t *)v23, 0x16u);
      uint64_t v28 = v35;
      swift_arrayDestroy();
      MEMORY[0x22A6A29E0](v28, -1, -1);
      MEMORY[0x22A6A29E0](v23, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v35 = v10;
  LOBYTE(v39) = 0;
  sub_22898E594();
  swift_bridgeObjectRetain();
  uint64_t v17 = ObjectType;
  sub_2289B3B60(v16, MEMORY[0x263F8D310], (uint64_t)&v37);
  swift_bridgeObjectRelease();
  uint64_t v18 = v38;
  if (!v38)
  {
    swift_bridgeObjectRelease();

    uint64_t ObjectType = v17;
    goto LABEL_10;
  }
  uint64_t v34 = v37;
  LOBYTE(v39) = 1;
  sub_2289B3B60(v16, MEMORY[0x263F8D310], (uint64_t)&v37);
  swift_bridgeObjectRelease();
  if (!v38)
  {
    swift_bridgeObjectRelease();

    goto LABEL_9;
  }
  sub_2289DE860();
  swift_bridgeObjectRelease();
  uint64_t v19 = v35;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v8, 1, v9) == 1)
  {
    swift_bridgeObjectRelease();

    sub_2289742D4((uint64_t)v8);
LABEL_9:
    uint64_t ObjectType = v17;
    goto LABEL_10;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v12, v8, v9);
  char v31 = (uint64_t *)&v14[OBJC_IVAR____TtC14BookFoundation7MAuthor_name];
  *char v31 = v34;
  v31[1] = v18;
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(&v14[OBJC_IVAR____TtC14BookFoundation7MAuthor_url], v12, v9);

  LOBYTE(v37) = v36;
  uint64_t v38 = (uint64_t)v13;
  id v29 = MResource.init(with:config:)(a1, (char *)&v37);
  uint64_t v32 = *(void (**)(char *, uint64_t))(v19 + 8);
  id v33 = v29;
  v32(v12, v9);
  if (v29) {

  }
  return v29;
}

void static MAuthor.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_22898E458()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14BookFoundation7MAuthor_url;
  uint64_t v2 = sub_2289DE880();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

id MAuthor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_22898E594()
{
  unint64_t result = qword_268284788;
  if (!qword_268284788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284788);
  }
  return result;
}

uint64_t sub_22898E5E8()
{
  return type metadata accessor for MAuthor();
}

uint64_t type metadata accessor for MAuthor()
{
  uint64_t result = qword_268284790;
  if (!qword_268284790) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_22898E63C()
{
  uint64_t result = sub_2289DE880();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MAuthor.Attributes(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22898E7A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MAuthor.Attributes()
{
  return &type metadata for MAuthor.Attributes;
}

unint64_t sub_22898E7E0()
{
  unint64_t result = qword_2682847A0;
  if (!qword_2682847A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682847A0);
  }
  return result;
}

void *sub_22898E834()
{
  swift_retain();
  sub_2289DF300();
  swift_release();
  sub_2289DF3D0();
  if (*((void *)&v8 + 1))
  {
    uint64_t v0 = (void *)MEMORY[0x263F8EE78];
    do
    {
      v5[0] = v6;
      v5[1] = v7;
      void v5[2] = v8;
      if (*((void *)&v6 + 1))
      {
        sub_2289DEC90();
        sub_2289DEC90();
        sub_2289DF320();
        sub_22898EBA0((uint64_t)v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v0 = sub_22896C0F8(0, v0[2] + 1, 1, v0);
        }
        unint64_t v2 = v0[2];
        unint64_t v1 = v0[3];
        if (v2 >= v1 >> 1) {
          uint64_t v0 = sub_22896C0F8((void *)(v1 > 1), v2 + 1, 1, v0);
        }
        v0[2] = v2 + 1;
        int v3 = &v0[2 * v2];
        v3[4] = 0;
        v3[5] = 0xE000000000000000;
      }
      else
      {
        sub_22898EBA0((uint64_t)v5);
      }
      sub_2289DF3D0();
    }
    while (*((void *)&v8 + 1));
  }
  else
  {
    uint64_t v0 = (void *)MEMORY[0x263F8EE78];
  }
  swift_release();
  return v0;
}

uint64_t ReflectedStringConvertible.description.getter(uint64_t a1)
{
  uint64_t v3 = sub_2289DF5D0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  long long v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12[3] = a1;
  long long v7 = sub_22896EC88(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(v7, v1, a1);
  sub_2289DF5A0();
  sub_2289DF5B0();
  v12[0] = sub_2289DF620();
  v12[1] = v8;
  sub_2289DEC90();
  sub_2289DF5C0();
  uint64_t v9 = sub_22898E834();
  swift_release();
  uint64_t v11 = v9;
  sub_228952BB0(&qword_2682843F0);
  sub_2289746BC();
  sub_2289DEB30();
  swift_bridgeObjectRelease();
  sub_2289DEC90();
  swift_bridgeObjectRelease();
  sub_2289DEC90();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v12[0];
}

uint64_t sub_22898EBA0(uint64_t a1)
{
  uint64_t v2 = sub_228952BB0(&qword_2682847A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Date.init(year:month:day:hour:minute:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v30[3] = a4;
  v30[4] = a5;
  v30[1] = a2;
  _OWORD v30[2] = a3;
  v30[0] = a1;
  uint64_t v31 = a7;
  uint64_t v8 = sub_228952BB0(&qword_26AECF7E0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_228952BB0(&qword_2682847B0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_228952BB0(&qword_2682847B8);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_2289DE7D0();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_2289DE990();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v16, 1, 1, v21);
  uint64_t v23 = sub_2289DE9C0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v13, 1, 1, v23);
  sub_2289DE7C0();
  sub_2289DE780();
  sub_2289DE790();
  sub_2289DE760();
  sub_2289DE770();
  sub_2289DE7B0();
  sub_2289DE960();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a6, v21);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v24 = sub_2289DE910();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v24) == 1)
  {
    sub_2289605E4((uint64_t)v10);
    uint64_t v26 = 1;
    uint64_t v27 = v31;
  }
  else
  {
    uint64_t v28 = v31;
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v31, v10, v24);
    uint64_t v26 = 0;
    uint64_t v27 = v28;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v27, v26, 1, v24);
}

uint64_t Date.previousDay(calendar:)@<X0>(uint64_t a1@<X8>)
{
  return sub_22898F018(a1);
}

uint64_t Date.nextDay(calendar:)@<X0>(uint64_t a1@<X8>)
{
  return sub_22898F018(a1);
}

uint64_t sub_22898F018@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_2289DE980();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_228952BB0(&qword_26AECF7E0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F07870], v2);
  sub_2289DE970();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v9 = sub_2289DE910();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v8, v9);
  }
  __break(1u);
  return result;
}

uint64_t Date.isEqual(to:components:calendar:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_2289DE980();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_2289DE7D0();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v28 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2289DE950();
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v26 = a2 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v27 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v29 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_20;
    }
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v27) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v26 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v18 = *(void *)(v26 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v27) {
          goto LABEL_23;
        }
        unint64_t v18 = *(void *)(v26 + 8 * v14);
        if (!v18) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_20:
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v29 + 48) + *(void *)(v4 + 72) * v16, v3);
    uint64_t v20 = sub_2289DE7A0();
    char v22 = v21;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v23 = 0;
    if ((v22 & 1) != 0 || v20) {
      goto LABEL_24;
    }
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v27)
  {
LABEL_23:
    uint64_t v23 = 1;
LABEL_24:
    swift_release();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v25);
    return v23;
  }
  unint64_t v18 = *(void *)(v26 + 8 * v19);
  if (v18)
  {
    int64_t v14 = v19;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v27) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v26 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

id MBookSeries.__allocating_init(with:config:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  uint64_t v6 = *(void *)(a2 + 8);
  v8[0] = *(unsigned char *)a2;
  uint64_t v9 = v6;
  return MSeries.init(with:config:)(a1, v8);
}

id MBookSeries.init(with:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  v4[0] = *(unsigned char *)a2;
  uint64_t v5 = v2;
  return MSeries.init(with:config:)(a1, v4);
}

void static MBookSeries.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

id MBookSeries.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_22898F5D8()
{
  return type metadata accessor for MBookSeries();
}

uint64_t type metadata accessor for MBookSeries()
{
  uint64_t result = qword_2682847C0;
  if (!qword_2682847C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_22898F62C()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_22898F664(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))(a2 + 32))();
  if (!v5) {
    return 0;
  }
  v12[7] = v5;
  MEMORY[0x270FA5388](v5);
  v12[2] = a1;
  uint64_t v12[3] = a2;
  uint64_t v12[4] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_2289DEEA0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = sub_2289650A4((void (*)(char *, char *))sub_228992E0C, (uint64_t)v12, v7, AssociatedTypeWitness, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v9);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t CommonLibrarySeriesInfoEmbedding.hasTooManyNarrators.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = v7[*(int *)(v4 + 100)];
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t type metadata accessor for CommonLibrarySeriesInfo()
{
  return sub_22897D5C8();
}

uint64_t CommonLibrarySeriesInfoEmbedding.narratorCount.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v4 + 92)];
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t CommonLibrarySeriesInfoEmbedding.narratorNames.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v4 + 96)];
  uint64_t v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  v9(v7, v4);
  return v8;
}

uint64_t sub_22898FB68(uint64_t a1, uint64_t a2)
{
  return sub_228991700(a1, a2, &qword_268284508);
}

uint64_t CommonLibrarySeriesInfoEmbedding.assets.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v4 + 60)];
  uint64_t v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  v9(v7, v4);
  return v8;
}

uint64_t sub_22898FCB4(uint64_t a1, uint64_t a2)
{
  return sub_228991740(a1, a2, &qword_268284508);
}

uint64_t CommonLibrarySeriesInfoEmbedding.authorCount.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v4 + 64)];
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t sub_22898FE04(uint64_t a1, uint64_t a2)
{
  return sub_228991778(a1, a2, &qword_268284508);
}

uint64_t CommonLibrarySeriesInfoEmbedding.authorNames.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v4 + 68)];
  uint64_t v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  v9(v7, v4);
  return v8;
}

uint64_t sub_22898FF50()
{
  return *(unsigned __int8 *)(v0 + *(int *)(sub_228952BB0(&qword_268284508) + 72));
}

uint64_t CommonLibrarySeriesInfoEmbedding.hasTooManyAuthors.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = v7[*(int *)(v4 + 72)];
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t sub_2289900B0()
{
  return *(unsigned __int8 *)(v0 + *(int *)(sub_228952BB0(&qword_268284508) + 80));
}

uint64_t CommonLibrarySeriesInfoEmbedding.isExplicit.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = v7[*(int *)(v4 + 80)];
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t sub_228990210()
{
  return *(unsigned __int8 *)(v0 + *(int *)(sub_228952BB0(&qword_268284508) + 84));
}

uint64_t CommonLibrarySeriesInfoEmbedding.isOrdered.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = v7[*(int *)(v4 + 84)];
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t sub_228990370(uint64_t a1, uint64_t a2)
{
  return sub_228991830(a1, a2, &qword_268284508);
}

uint64_t sub_22899037C(uint64_t a1, uint64_t a2)
{
  return sub_228991868(a1, a2, &qword_268284508);
}

uint64_t sub_228990388()
{
  return *(unsigned __int8 *)(v0 + *(int *)(sub_228952BB0(&qword_268284508) + 100));
}

uint64_t sub_2289903B0@<X0>(uint64_t a1@<X8>)
{
  return sub_2289918D0(&qword_268284508, a1);
}

uint64_t CommonLibrarySeriesInfoEmbedding.mappedSeriesInfo.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v15 - v8;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v10 = &v9[*(int *)(v6 + 88)];
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  LOBYTE(a1) = v10[16];
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = v13(v9, v6);
  *(void *)a3 = v12;
  *(void *)(a3 + 8) = v11;
  *(unsigned char *)(a3 + 16) = a1;
  return result;
}

uint64_t CommonLibrarySeriesInfoEmbedding.assetLogID.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (uint64_t *)((char *)&v11 - v6);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *v7;
  uint64_t v9 = *(void (**)(uint64_t *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  v9(v7, v4);
  return v8;
}

uint64_t CommonLibrarySeriesInfoEmbedding.collectionMemberships.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *((void *)v7 + 2);
  uint64_t v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  v9(v7, v4);
  return v8;
}

uint64_t CommonLibrarySeriesInfoEmbedding.id.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *((void *)v7 + 3);
  uint64_t v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  v9(v7, v4);
  return v8;
}

uint64_t sub_2289908D0(uint64_t a1, uint64_t a2)
{
  return sub_228991994(a1, a2, &qword_268284508);
}

uint64_t CommonLibrarySeriesInfoEmbedding.genreNames.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v4 + 76)];
  uint64_t v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  v9(v7, v4);
  return v8;
}

uint64_t CommonLibrarySeriesInfoEmbedding.sortTitle.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *((void *)v7 + 5);
  uint64_t v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  v9(v7, v4);
  return v8;
}

uint64_t CommonLibrarySeriesInfoEmbedding.storeID.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *((void *)v7 + 7);
  uint64_t v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  v9(v7, v4);
  return v8;
}

uint64_t CommonLibrarySeriesInfoEmbedding.title.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *((void *)v7 + 9);
  uint64_t v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  v9(v7, v4);
  return v8;
}

uint64_t sub_228990DDC@<X0>(uint64_t a1@<X8>)
{
  return sub_228991A34(&qword_268284508, a1);
}

uint64_t CommonLibrarySeriesInfoEmbedding.url.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  sub_228990F30((uint64_t)&v9[*(int *)(v6 + 56)], a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_228990F30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_2682841E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CommonLibrarySeriesInfo.assetLogID.getter()
{
  uint64_t v0 = sub_228991A98();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CommonLibrarySeriesInfo.collectionMemberships.getter()
{
  sub_228991AA0();

  return swift_bridgeObjectRetain();
}

uint64_t CommonLibrarySeriesInfo.id.getter()
{
  uint64_t v0 = sub_228991A90();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CommonLibrarySeriesInfo.sortTitle.getter()
{
  uint64_t v0 = sub_228991AA8();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CommonLibrarySeriesInfo.storeID.getter()
{
  uint64_t v0 = sub_228991AB0();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CommonLibrarySeriesInfo.title.getter()
{
  uint64_t v0 = sub_228991AB8();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CommonLibrarySeriesInfo.url.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_228990F30(v2 + *(int *)(a1 + 56), a2);
}

uint64_t CommonLibrarySeriesInfo.assets.getter(uint64_t a1)
{
  sub_228991A78(a1);

  return swift_bridgeObjectRetain();
}

uint64_t CommonLibrarySeriesInfo.authorCount.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 64));
}

uint64_t CommonLibrarySeriesInfo.authorNames.getter(uint64_t a1)
{
  sub_228991A84(a1);

  return swift_bridgeObjectRetain();
}

uint64_t CommonLibrarySeriesInfo.hasTooManyAuthors.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 72));
}

uint64_t CommonLibrarySeriesInfo.genreNames.getter(uint64_t a1)
{
  sub_228991AC0(a1);

  return swift_bridgeObjectRetain();
}

uint64_t CommonLibrarySeriesInfo.isExplicit.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 80));
}

uint64_t CommonLibrarySeriesInfo.isOrdered.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 84));
}

uint64_t CommonLibrarySeriesInfo.mappedSeriesInfo.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(v2 + *(int *)(a1 + 88));
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  LOBYTE(v3) = *((unsigned char *)v3 + 16);
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = (_BYTE)v3;
  return swift_bridgeObjectRetain();
}

uint64_t CommonLibrarySeriesInfo.narratorCount.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 92));
}

uint64_t CommonLibrarySeriesInfo.narratorNames.getter(uint64_t a1)
{
  sub_228991ACC(a1);

  return swift_bridgeObjectRetain();
}

uint64_t CommonLibrarySeriesInfo.hasTooManyNarrators.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 100));
}

uint64_t CommonLibrarySeriesInfo.init(assetLogID:collectionMemberships:id:sortTitle:storeID:title:url:assets:authorCount:authorNames:hasTooManyAuthors:isExplicit:isOrdered:genreNames:mappedSeriesInfo:narratorCount:narratorNames:hasTooManyNarrators:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, char a18, char a19, uint64_t a20,uint64_t *a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  uint64_t v32 = a21[1];
  uint64_t v33 = *a21;
  char v31 = *((unsigned char *)a21 + 16);
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(void *)(a9 + 80) = a11;
  uint64_t v26 = (int *)type metadata accessor for CommonLibrarySeriesInfo();
  uint64_t result = sub_228991AD8(a12, a9 + v26[14]);
  *(void *)(a9 + v26[15]) = a13;
  uint64_t v28 = a9 + v26[16];
  *(void *)uint64_t v28 = a14;
  *(unsigned char *)(v28 + 8) = a15 & 1;
  *(void *)(a9 + v26[17]) = a16;
  *(unsigned char *)(a9 + v26[18]) = a17;
  *(unsigned char *)(a9 + v26[20]) = a18;
  *(unsigned char *)(a9 + v26[21]) = a19;
  *(void *)(a9 + v26[19]) = a20;
  uint64_t v29 = a9 + v26[23];
  *(void *)uint64_t v29 = a22;
  *(unsigned char *)(v29 + 8) = a23 & 1;
  *(void *)(a9 + v26[24]) = a24;
  *(unsigned char *)(a9 + v26[25]) = a25;
  uint64_t v30 = a9 + v26[22];
  *(void *)uint64_t v30 = v33;
  *(void *)(v30 + 8) = v32;
  *(unsigned char *)(v30 + 16) = v31;
  return result;
}

uint64_t sub_228991378(uint64_t a1)
{
  sub_228991A78(a1);

  return swift_bridgeObjectRetain();
}

uint64_t sub_2289913A0(uint64_t a1)
{
  return CommonLibrarySeriesInfo.authorCount.getter(a1);
}

uint64_t sub_2289913BC(uint64_t a1)
{
  sub_228991A84(a1);

  return swift_bridgeObjectRetain();
}

uint64_t sub_2289913F0(uint64_t a1)
{
  return CommonLibrarySeriesInfo.narratorCount.getter(a1);
}

uint64_t sub_22899140C(uint64_t a1)
{
  sub_228991ACC(a1);

  return swift_bridgeObjectRetain();
}

uint64_t sub_22899143C()
{
  uint64_t v0 = sub_228991A98();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_228991474()
{
  sub_228991AA0();

  return swift_bridgeObjectRetain();
}

uint64_t sub_22899149C()
{
  uint64_t v0 = sub_228991A90();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_2289914D4(uint64_t a1)
{
  sub_228991AC0(a1);

  return swift_bridgeObjectRetain();
}

uint64_t sub_2289914FC()
{
  uint64_t v0 = sub_228991AA8();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_228991534()
{
  uint64_t v0 = sub_228991AB0();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_22899156C()
{
  uint64_t v0 = sub_228991AB8();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_2289915A8(uint64_t a1)
{
  swift_getWitnessTable();

  return ReflectedStringConvertible.description.getter(a1);
}

uint64_t sub_2289915FC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v11[4] = a3;
  v11[3] = a2;
  uint64_t v7 = sub_22896EC88(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v7, a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LibraryAssetInfo.enriched(with:)((uint64_t)v11, AssociatedTypeWitness, AssociatedConformanceWitness, a4);
  return sub_2289559D0((uint64_t)v11);
}

uint64_t sub_2289916F4(uint64_t a1, uint64_t a2)
{
  return sub_228991700(a1, a2, &qword_268284858);
}

uint64_t sub_228991700(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_228952BB0(a3);

  return swift_bridgeObjectRetain();
}

uint64_t sub_228991734(uint64_t a1, uint64_t a2)
{
  return sub_228991740(a1, a2, &qword_268284858);
}

uint64_t sub_228991740(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return *(void *)(v3 + *(int *)(sub_228952BB0(a3) + 64));
}

uint64_t sub_22899176C(uint64_t a1, uint64_t a2)
{
  return sub_228991778(a1, a2, &qword_268284858);
}

uint64_t sub_228991778(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_228952BB0(a3);

  return swift_bridgeObjectRetain();
}

uint64_t sub_2289917AC()
{
  return *(unsigned __int8 *)(v0 + *(int *)(sub_228952BB0(&qword_268284858) + 72));
}

uint64_t sub_2289917D4()
{
  return *(unsigned __int8 *)(v0 + *(int *)(sub_228952BB0(&qword_268284858) + 80));
}

uint64_t sub_2289917FC()
{
  return *(unsigned __int8 *)(v0 + *(int *)(sub_228952BB0(&qword_268284858) + 84));
}

uint64_t sub_228991824(uint64_t a1, uint64_t a2)
{
  return sub_228991830(a1, a2, &qword_268284858);
}

uint64_t sub_228991830(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return *(void *)(v3 + *(int *)(sub_228952BB0(a3) + 92));
}

uint64_t sub_22899185C(uint64_t a1, uint64_t a2)
{
  return sub_228991868(a1, a2, &qword_268284858);
}

uint64_t sub_228991868(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_228952BB0(a3);

  return swift_bridgeObjectRetain();
}

uint64_t sub_22899189C()
{
  return *(unsigned __int8 *)(v0 + *(int *)(sub_228952BB0(&qword_268284858) + 100));
}

uint64_t sub_2289918C4@<X0>(uint64_t a1@<X8>)
{
  return sub_2289918D0(&qword_268284858, a1);
}

uint64_t sub_2289918D0@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = (uint64_t *)(v2 + *(int *)(sub_228952BB0(a1) + 88));
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  LOBYTE(v4) = *((unsigned char *)v4 + 16);
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = (_BYTE)v4;

  return swift_bridgeObjectRetain();
}

uint64_t sub_228991920()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_228991950()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_228991958()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_228991988(uint64_t a1, uint64_t a2)
{
  return sub_228991994(a1, a2, &qword_268284858);
}

uint64_t sub_228991994(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_228952BB0(a3);

  return swift_bridgeObjectRetain();
}

uint64_t sub_2289919C8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2289919F8()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_228991A28@<X0>(uint64_t a1@<X8>)
{
  return sub_228991A34(&qword_268284858, a1);
}

uint64_t sub_228991A34@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(sub_228952BB0(a1) + 56);

  return sub_228990F30(v4, a2);
}

uint64_t sub_228991A78(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 60));
}

uint64_t sub_228991A84(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 68));
}

uint64_t sub_228991A90()
{
  return *(void *)(v0 + 24);
}

uint64_t sub_228991A98()
{
  return *(void *)v0;
}

uint64_t sub_228991AA0()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_228991AA8()
{
  return *(void *)(v0 + 40);
}

uint64_t sub_228991AB0()
{
  return *(void *)(v0 + 56);
}

uint64_t sub_228991AB8()
{
  return *(void *)(v0 + 72);
}

uint64_t sub_228991AC0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 76));
}

uint64_t sub_228991ACC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 96));
}

uint64_t sub_228991AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_2682841E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_228991B40(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t sub_228991B48(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228991B84(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228991BC0(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of LibrarySeriesInfo.assets.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.authorCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.authorNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.hasTooManyAuthors.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.isExplicit.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.isOrdered.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.narratorCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.narratorNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.hasTooManyNarrators.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.mappedSeriesInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of CommonLibrarySeriesInfoEmbedding.commonInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_228991D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 88);
}

void sub_228991D20()
{
  sub_228992DB4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *sub_228991E04(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    uint64_t v12 = a3[14];
    uint64_t v33 = (char *)a2 + v12;
    __dst = (char *)a1 + v12;
    a1[10] = a2[10];
    uint64_t v13 = sub_2289DE880();
    uint64_t v31 = *(void *)(v13 - 8);
    uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    uint64_t v14 = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32(v33, 1, v14))
    {
      uint64_t v15 = sub_228952BB0(&qword_2682841E0);
      memcpy(__dst, v33, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(__dst, v33, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v17 = a3[16];
    *(void *)((char *)v4 + a3[15]) = *(void *)((char *)a2 + a3[15]);
    unint64_t v18 = (char *)v4 + v17;
    int64_t v19 = (char *)a2 + v17;
    *(void *)unint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = a3[18];
    *(void *)((char *)v4 + a3[17]) = *(void *)((char *)a2 + a3[17]);
    *((unsigned char *)v4 + v20) = *((unsigned char *)a2 + v20);
    uint64_t v21 = a3[20];
    *(void *)((char *)v4 + a3[19]) = *(void *)((char *)a2 + a3[19]);
    *((unsigned char *)v4 + v21) = *((unsigned char *)a2 + v21);
    uint64_t v22 = a3[22];
    *((unsigned char *)v4 + a3[21]) = *((unsigned char *)a2 + a3[21]);
    uint64_t v23 = (char *)v4 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = *((void *)v24 + 1);
    *(void *)uint64_t v23 = *(void *)v24;
    *((void *)v23 + 1) = v25;
    v23[16] = v24[16];
    uint64_t v26 = a3[23];
    uint64_t v27 = a3[24];
    uint64_t v28 = (char *)v4 + v26;
    uint64_t v29 = (char *)a2 + v26;
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    *(void *)((char *)v4 + v27) = *(void *)((char *)a2 + v27);
    *((unsigned char *)v4 + a3[25]) = *((unsigned char *)a2 + a3[25]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_2289920BC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 56);
  uint64_t v5 = sub_2289DE880();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_2289921E8(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  uint64_t v11 = a3[14];
  uint64_t v31 = (char *)a2 + v11;
  __dst = (char *)a1 + v11;
  a1[10] = a2[10];
  uint64_t v12 = sub_2289DE880();
  uint64_t v29 = *(void *)(v12 - 8);
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  uint64_t v13 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v30(v31, 1, v13))
  {
    uint64_t v14 = sub_228952BB0(&qword_2682841E0);
    memcpy(__dst, v31, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(__dst, v31, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v15 = a3[16];
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  unsigned char v16[8] = v17[8];
  uint64_t v18 = a3[18];
  *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  *((unsigned char *)a1 + v18) = *((unsigned char *)a2 + v18);
  uint64_t v19 = a3[20];
  *(void *)((char *)a1 + a3[19]) = *(void *)((char *)a2 + a3[19]);
  *((unsigned char *)a1 + v19) = *((unsigned char *)a2 + v19);
  uint64_t v20 = a3[22];
  *((unsigned char *)a1 + a3[21]) = *((unsigned char *)a2 + a3[21]);
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = *((void *)v22 + 1);
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = v23;
  v21[16] = v22[16];
  uint64_t v24 = a3[23];
  uint64_t v25 = a3[24];
  uint64_t v26 = (char *)a1 + v24;
  uint64_t v27 = (char *)a2 + v24;
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  *(void *)((char *)a1 + v25) = *(void *)((char *)a2 + v25);
  *((unsigned char *)a1 + a3[25]) = *((unsigned char *)a2 + a3[25]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_228992450(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[14];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2289DE880();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_228952BB0(&qword_2682841E0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[16];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)v17;
  unsigned char v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  *(void *)((char *)a1 + a3[19]) = *(void *)((char *)a2 + a3[19]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[20]) = *((unsigned char *)a2 + a3[20]);
  *((unsigned char *)a1 + a3[21]) = *((unsigned char *)a2 + a3[21]);
  uint64_t v19 = a3[22];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  *(void *)uint64_t v20 = *(void *)((char *)a2 + v19);
  *((void *)v20 + 1) = *(void *)((char *)a2 + v19 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20[16] = v21[16];
  uint64_t v22 = a3[23];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  char v25 = v24[8];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v25;
  *(void *)((char *)a1 + a3[24]) = *(void *)((char *)a2 + a3[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[25]) = *((unsigned char *)a2 + a3[25]);
  return a1;
}

uint64_t sub_228992794(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v6 = a3[14];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v9 = sub_2289DE880();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_228952BB0(&qword_2682841E0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t v15 = a3[18];
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v16 = a3[20];
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v17 = a3[22];
  *(unsigned char *)(a1 + a3[21]) = *(unsigned char *)(a2 + a3[21]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(unsigned char *)(v18 + 16) = *(unsigned char *)(v19 + 16);
  uint64_t v20 = a3[23];
  uint64_t v21 = a3[24];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  *(void *)(a1 + v21) = *(void *)(a2 + v21);
  *(unsigned char *)(a1 + a3[25]) = *(unsigned char *)(a2 + a3[25]);
  return a1;
}

void *sub_228992980(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[6];
  a1[5] = a2[5];
  a1[6] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[8];
  a1[7] = a2[7];
  a1[8] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[10];
  a1[9] = a2[9];
  a1[10] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[14];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_2289DE880();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = sub_228952BB0(&qword_2682841E0);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[16];
  uint64_t v21 = a3[17];
  uint64_t v22 = (char *)a1 + v20;
  uint64_t v23 = (char *)a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  *(void *)((char *)a1 + v21) = *(void *)((char *)a2 + v21);
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[19];
  *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  *(void *)((char *)a1 + v24) = *(void *)((char *)a2 + v24);
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[21];
  *((unsigned char *)a1 + a3[20]) = *((unsigned char *)a2 + a3[20]);
  *((unsigned char *)a1 + v25) = *((unsigned char *)a2 + v25);
  uint64_t v26 = a3[22];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = *(void *)((char *)a2 + v26 + 8);
  *(void *)uint64_t v27 = *(void *)((char *)a2 + v26);
  *((void *)v27 + 1) = v29;
  swift_bridgeObjectRelease();
  v27[16] = v28[16];
  uint64_t v30 = a3[23];
  uint64_t v31 = a3[24];
  uint64_t v32 = (char *)a1 + v30;
  uint64_t v33 = (char *)a2 + v30;
  v32[8] = v33[8];
  *(void *)uint64_t v32 = *(void *)v33;
  *(void *)((char *)a1 + v31) = *(void *)((char *)a2 + v31);
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[25]) = *((unsigned char *)a2 + a3[25]);
  return a1;
}

uint64_t sub_228992C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228992C40);
}

uint64_t sub_228992C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_228952BB0(&qword_2682841E0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 56);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_228992CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228992D08);
}

uint64_t sub_228992D08(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_228952BB0(&qword_2682841E0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 56);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_228992DB4()
{
  if (!qword_268284850)
  {
    sub_2289DE880();
    unint64_t v0 = sub_2289DF130();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268284850);
    }
  }
}

uint64_t sub_228992E0C@<X0>(uint64_t a1@<X8>)
{
  return sub_2289915FC(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_228992E48()
{
  return sub_2289DF590();
}

uint64_t sub_228992EA0()
{
  return sub_2289DEC40();
}

uint64_t sub_228992EBC()
{
  return sub_2289DF590();
}

uint64_t sub_228992F10@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_2289DF3F0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_228992F64(void *a1@<X8>)
{
  *a1 = 0x6E756F4365676170;
  a1[1] = 0xE900000000000074;
}

id MBook.__allocating_init(with:config:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  uint64_t v6 = *(void *)(a2 + 8);
  v8[0] = *(unsigned char *)a2;
  uint64_t v9 = v6;
  return MAsset.init(with:config:)(a1, v8);
}

id MBook.init(with:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  v4[0] = *(unsigned char *)a2;
  uint64_t v5 = v2;
  return MAsset.init(with:config:)(a1, v4);
}

void static MBook.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

id MBook.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t MBook.pageCount.getter()
{
  swift_getObjectType();
  uint64_t v0 = sub_2289D49E0(0);
  sub_2289930E0();
  sub_2289B3B60(v0, MEMORY[0x263F8D6C8], (uint64_t)&v2);
  swift_bridgeObjectRelease();
  return v2;
}

unint64_t sub_2289930E0()
{
  unint64_t result = qword_268284860;
  if (!qword_268284860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284860);
  }
  return result;
}

uint64_t sub_228993134()
{
  return type metadata accessor for MBook();
}

uint64_t type metadata accessor for MBook()
{
  uint64_t result = qword_268284868;
  if (!qword_268284868) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_228993188()
{
  return swift_updateClassMetadata2();
}

unsigned char *storeEnumTagSinglePayload for MBook.Attributes(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22899325CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MBook.Attributes()
{
  return &type metadata for MBook.Attributes;
}

unint64_t sub_228993298()
{
  unint64_t result = qword_268284878;
  if (!qword_268284878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284878);
  }
  return result;
}

uint64_t OS_dispatch_group.wait(timeout:timeoutHandler:)(uint64_t a1, uint64_t (*a2)(void))
{
  sub_2289DF0C0();
  uint64_t result = sub_2289DEA20();
  if (result) {
    return a2();
  }
  return result;
}

uint64_t ContentInfo.storeData.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for ContentDataSource();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - v7;
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return 0;
    }
    else
    {
      return *(void *)v8;
    }
  }
  else
  {
    uint64_t v10 = *(void *)&v8[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v8, AssociatedTypeWitness);
  }
  return v10;
}

uint64_t ContentInfo.id.getter(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = (void *)swift_getKeyPath();
  sub_228993EB8(KeyPath, v5, a1, a2, (uint64_t)&v7);
  swift_release();
  swift_release();
  return v7;
}

uint64_t ContentInfo.libraryData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v20 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for ContentDataSource();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v19 - v12;
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {

    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
LABEL_5:
    int v17 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v17(v13, v10, AssociatedTypeWitness);
    uint64_t v16 = v20;
    v17(v20, v13, AssociatedTypeWitness);
    uint64_t v15 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v16, v15, 1, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v15 = 1;
  uint64_t v16 = v20;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v16, v15, 1, AssociatedTypeWitness);
}

void sub_2289937C8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v44 = a5;
  uint64_t v7 = *a1;
  uint64_t v36 = a2;
  uint64_t v43 = *(void *)(v7 + *MEMORY[0x263F8EA20] + 8);
  uint64_t v35 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v34 - v8;
  uint64_t v11 = *v10;
  uint64_t v37 = *(void *)(v12 + v13);
  uint64_t v14 = type metadata accessor for ContentDataSource();
  uint64_t v38 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v39 = (void **)((char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v42 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v34 - v20;
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(a4 + 40);
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  uint64_t v23 = a4;
  uint64_t v24 = v22;
  v22(a3, v23);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v14);
      uint64_t v26 = v43;
      goto LABEL_7;
    }
  }
  else
  {
  }
  uint64_t v27 = v42;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v21, v19, v11);
  swift_getAtKeyPath();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v11);
  uint64_t v26 = v43;
  uint64_t v28 = *(void *)(v43 + 16);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v9, 1, v28) != 1)
  {
    uint64_t v32 = v44;
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v44, v9, v28);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v32, 0, 1, v28);
    return;
  }
  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v26);
LABEL_7:
  uint64_t v30 = v39;
  v24(v40, v41);
  int v31 = swift_getEnumCaseMultiPayload();
  if (v31)
  {
    if (v31 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v26 + 16) - 8) + 56))(v44, 1, 1);
      (*(void (**)(void **, uint64_t))(v38 + 8))(v30, v14);
      return;
    }
    uint64_t v33 = *v30;
  }
  else
  {
    uint64_t v33 = *(void **)((char *)v30 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(v42 + 8))(v30, v11);
  }
  uint64_t v45 = v33;
  swift_getAtKeyPath();
}

void sub_228993C7C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v14[0] = a4;
  uint64_t v6 = *a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for ContentDataSource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (void **)((char *)v14 - v10);
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)(*MEMORY[0x263F8EA20]
                                                                                           + v6
                                                                                           + 8)
                                                                               + 16)
                                                                   - 8)
                                                       + 56))(v14[0], 1, 1);
      (*(void (**)(void **, uint64_t))(v9 + 8))(v11, v8);
      return;
    }
    uint64_t v13 = *v11;
  }
  else
  {
    uint64_t v13 = *(void **)((char *)v11 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v11, AssociatedTypeWitness);
  }
  v14[1] = v13;
  swift_getAtKeyPath();
}

void sub_228993EB8(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v16 = a3;
  uint64_t v17 = a5;
  uint64_t v6 = *(void *)(*a2 + *MEMORY[0x263F8EA20]);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v10 = type metadata accessor for ContentDataSource();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (void **)((char *)&v15 - v11);
  (*(void (**)(uint64_t, uint64_t))(a4 + 40))(v16, a4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, void **, uint64_t))(v7 + 32))(v9, v12, v6);
      swift_getAtKeyPath();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return;
    }
    uint64_t v14 = *v12;
  }
  else
  {
    uint64_t v14 = *(void **)((char *)v12 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v18 = v14;
  swift_getAtKeyPath();
}

uint64_t sub_228994100@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v19 = a3;
  uint64_t v20 = a5;
  uint64_t v6 = *(void *)(*a2 + *MEMORY[0x263F8EA20]);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v18 = v10;
  uint64_t v11 = type metadata accessor for ContentDataSource();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (void **)((char *)&v18 - v12);
  (*(void (**)(uint64_t, uint64_t))(a4 + 40))(v19, a4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, void **, uint64_t))(v7 + 32))(v9, v13, v6);
      swift_getAtKeyPath();
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    uint64_t v16 = *v13;
  }
  else
  {
    uint64_t v16 = *(void **)((char *)v13 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v21 = v16;
  uint64_t v17 = v20;
  swift_getAtKeyPath();

  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(*(void *)(*MEMORY[0x263F8EA20] + v18 + 8)
                                                                         - 8)
                                                             + 56))(v17, 0, 1);
}

uint64_t ContentInfo.enrichingDataSource(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v22[1] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for ContentDataSource();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (void *)((char *)v22 - v13);
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v12, a1, AssociatedTypeWitness);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v12, a2, a3);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 8))(v14, v8);
    }
    else
    {
      uint64_t v20 = *v14;
      uint64_t v21 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v12, a1, AssociatedTypeWitness);
      *(void *)&v12[v21] = v20;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v12, a2, a3);
    }
  }
  else
  {
    uint64_t v17 = *(int *)(swift_getTupleTypeMetadata2() + 48);
    uint64_t v18 = *(uint64_t *)((char *)v14 + v17);
    uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v12, a1, AssociatedTypeWitness);
    *(void *)&v12[v17] = v18;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v12, a2, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v19 + 8))(v14, AssociatedTypeWitness);
  }
}

uint64_t ContentInfo.enrichingDataSource(with:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v35 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v33 = (char *)&v32 - v8;
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for ContentDataSource();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (uint64_t *)((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v32 - v14;
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v17 = v33;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v33, v15, AssociatedTypeWitness);
      uint64_t v18 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      (*(void (**)(void *, char *, uint64_t))(v7 + 16))(v13, v17, AssociatedTypeWitness);
      uint64_t v19 = v34;
      *(void *)((char *)v13 + v18) = v34;
      swift_storeEnumTagMultiPayload();
      uint64_t v20 = *(void (**)(void *, uint64_t, uint64_t))(a3 + 48);
      id v21 = v19;
      v20(v13, a2, a3);
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v33, AssociatedTypeWitness);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      uint64_t v29 = v34;
      *uint64_t v13 = v34;
      swift_storeEnumTagMultiPayload();
      uint64_t v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(a3 + 48);
      id v31 = v29;
      return v30(v13, a2, a3);
    }
  }
  else
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();

    uint64_t v24 = v33;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v33, v15, AssociatedTypeWitness);
    uint64_t v25 = *(int *)(TupleTypeMetadata2 + 48);
    (*(void (**)(void *, char *, uint64_t))(v7 + 16))(v13, v24, AssociatedTypeWitness);
    uint64_t v26 = v34;
    *(void *)((char *)v13 + v25) = v34;
    swift_storeEnumTagMultiPayload();
    uint64_t v27 = *(void (**)(void *, uint64_t, uint64_t))(a3 + 48);
    id v28 = v26;
    v27(v13, a2, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v24, AssociatedTypeWitness);
  }
}

uint64_t sub_228994AA8@<X0>(uint64_t *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t sub_228994B58()
{
  return 16;
}

__n128 sub_228994B64(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t ContentInfo.title.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v18 - v6;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for ContentDataSource();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (void **)((char *)&v18 - v9);
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, void **, uint64_t))(v5 + 32))(v7, v10, AssociatedTypeWitness);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(AssociatedTypeWitness, AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
      return v13;
    }
    uint64_t v14 = *v10;
  }
  else
  {
    uint64_t v14 = *(void **)((char *)v10 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(v5 + 8))(v10, AssociatedTypeWitness);
  }
  type metadata accessor for MAsset();
  uint64_t v15 = swift_dynamicCastClass();
  if (v15)
  {
    uint64_t v16 = &OBJC_IVAR____TtC14BookFoundation6MAsset_name;
  }
  else
  {
    type metadata accessor for MSeries();
    uint64_t v15 = swift_dynamicCastClass();
    if (!v15)
    {

      return 0;
    }
    uint64_t v16 = &OBJC_IVAR____TtC14BookFoundation7MSeries_name;
  }
  uint64_t v13 = *(void *)(v15 + *v16);
  swift_bridgeObjectRetain();

  return v13;
}

uint64_t ContentInfo.genres.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v24 = (char *)&v23 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v23 - v11;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for ContentDataSource();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (void **)((char *)&v23 - v14);
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, void **, uint64_t))(v5 + 32))(v8, v15, AssociatedTypeWitness);
      uint64_t v17 = sub_2289954C0();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
    }
    else
    {
      id v21 = *v15;
      uint64_t v17 = sub_228995104(*v15);
    }
  }
  else
  {
    uint64_t v18 = *(void **)((char *)v15 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(char *, void **, uint64_t))(v5 + 32))(v12, v15, AssociatedTypeWitness);
    uint64_t v17 = sub_228995104(v18);
    uint64_t v19 = v24;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v24, v12, AssociatedTypeWitness);
    if (!v17) {
      uint64_t v17 = sub_2289954C0();
    }

    uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v19, AssociatedTypeWitness);
    v20(v12, AssociatedTypeWitness);
  }
  return v17;
}

uint64_t sub_228995104(void *a1)
{
  type metadata accessor for MAsset();
  if (!swift_dynamicCastClass())
  {
    type metadata accessor for MSeries();
    uint64_t v7 = swift_dynamicCastClass();
    if (!v7) {
      return v7;
    }
    id v2 = a1;
    unint64_t v22 = sub_22896BAE0(@"genres");
    if (v22)
    {
      unint64_t v4 = v22;
      if (v22 >> 62) {
        goto LABEL_31;
      }
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v23) {
        goto LABEL_18;
      }
      goto LABEL_32;
    }
LABEL_27:

    return 0;
  }
  id v2 = a1;
  unint64_t v3 = sub_22896BAE0(@"genres");
  if (!v3) {
    goto LABEL_27;
  }
  unint64_t v4 = v3;
  if (v3 >> 62)
  {
    uint64_t v5 = sub_2289DF380();
    if (!v5) {
      goto LABEL_32;
    }
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
  {
LABEL_32:
    swift_bridgeObjectRelease();

    return MEMORY[0x263F8EE78];
  }
LABEL_5:
  uint64_t v49 = MEMORY[0x263F8EE78];
  sub_22896C4B8(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v49;
    uint64_t v40 = v2;
    unint64_t v41 = v4 & 0xC000000000000001;
    unint64_t v43 = v4;
    do
    {
      uint64_t v8 = v7;
      if (v41) {
        uint64_t v9 = (char *)MEMORY[0x22A6A1E70](v6, v4);
      }
      else {
        uint64_t v9 = (char *)*(id *)(v4 + 8 * v6 + 32);
      }
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)&v9[OBJC_IVAR____TtC14BookFoundation9MResource_id + 8];
      uint64_t v47 = *(void *)&v9[OBJC_IVAR____TtC14BookFoundation9MResource_id];
      uint64_t v12 = *(void *)&v9[OBJC_IVAR____TtC14BookFoundation6MGenre_name + 8];
      uint64_t v45 = *(void *)&v9[OBJC_IVAR____TtC14BookFoundation6MGenre_name];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = MGenre.parentId.getter();
      uint64_t v15 = v14;
      uint64_t v16 = MGenre.parentName.getter();
      uint64_t v18 = v17;

      uint64_t v7 = v8;
      uint64_t v50 = v8;
      unint64_t v19 = *(void *)(v8 + 16);
      unint64_t v20 = *(void *)(v7 + 24);
      if (v19 >= v20 >> 1)
      {
        sub_22896C4B8(v20 > 1, v19 + 1, 1);
        uint64_t v7 = v50;
      }
      ++v6;
      *(void *)(v7 + 16) = v19 + 1;
      id v21 = (void *)(v7 + (v19 << 6));
      uint64_t v21[4] = v47;
      v21[5] = v11;
      v21[6] = v45;
      v21[7] = v12;
      v21[8] = v13;
      v21[9] = v15;
      v21[10] = v16;
      v21[11] = v18;
      unint64_t v4 = v43;
    }
    while (v5 != v6);
LABEL_26:
    swift_bridgeObjectRelease();

    return v7;
  }
  __break(1u);
LABEL_31:
  uint64_t v23 = sub_2289DF380();
  if (!v23) {
    goto LABEL_32;
  }
LABEL_18:
  uint64_t v40 = v2;
  uint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t result = sub_22896C4B8(0, v23 & ~(v23 >> 63), 0);
  if ((v23 & 0x8000000000000000) == 0)
  {
    uint64_t v25 = 0;
    uint64_t v7 = v51;
    unint64_t v42 = v4 & 0xC000000000000001;
    unint64_t v44 = v4;
    do
    {
      uint64_t v26 = v7;
      if (v42) {
        uint64_t v27 = (char *)MEMORY[0x22A6A1E70](v25, v4);
      }
      else {
        uint64_t v27 = (char *)*(id *)(v4 + 8 * v25 + 32);
      }
      id v28 = v27;
      uint64_t v29 = *(void *)&v27[OBJC_IVAR____TtC14BookFoundation9MResource_id + 8];
      uint64_t v48 = *(void *)&v27[OBJC_IVAR____TtC14BookFoundation9MResource_id];
      uint64_t v30 = *(void *)&v27[OBJC_IVAR____TtC14BookFoundation6MGenre_name + 8];
      uint64_t v46 = *(void *)&v27[OBJC_IVAR____TtC14BookFoundation6MGenre_name];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v31 = MGenre.parentId.getter();
      uint64_t v33 = v32;
      uint64_t v34 = MGenre.parentName.getter();
      uint64_t v36 = v35;

      uint64_t v7 = v26;
      uint64_t v52 = v26;
      unint64_t v37 = *(void *)(v26 + 16);
      unint64_t v38 = *(void *)(v7 + 24);
      if (v37 >= v38 >> 1)
      {
        sub_22896C4B8(v38 > 1, v37 + 1, 1);
        uint64_t v7 = v52;
      }
      ++v25;
      *(void *)(v7 + 16) = v37 + 1;
      uint64_t v39 = (void *)(v7 + (v37 << 6));
      v39[4] = v48;
      v39[5] = v29;
      v39[6] = v46;
      v39[7] = v30;
      v39[8] = v31;
      v39[9] = v33;
      v39[10] = v34;
      v39[11] = v36;
      unint64_t v4 = v44;
    }
    while (v23 != v25);
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t sub_2289954C0()
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  uint64_t v2 = swift_checkMetadataState();
  uint64_t v3 = v1(v2, AssociatedConformanceWitness);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    sub_22896C4B8(0, v5, 0);
    uint64_t v6 = v14;
    uint64_t v7 = (uint64_t *)(v4 + 40);
    do
    {
      uint64_t v9 = *(v7 - 1);
      uint64_t v8 = *v7;
      unint64_t v10 = *(void *)(v14 + 16);
      unint64_t v11 = *(void *)(v14 + 24);
      swift_bridgeObjectRetain();
      if (v10 >= v11 >> 1) {
        sub_22896C4B8(v11 > 1, v10 + 1, 1);
      }
      v7 += 2;
      *(void *)(v14 + 16) = v10 + 1;
      uint64_t v12 = v14 + (v10 << 6);
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = v9;
      *(void *)(v12 + 56) = v8;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v6;
}

double ContentInfo.primaryGenre.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (void *)ContentInfo.genres.getter(a1, a2);
  if (!v4) {
    goto LABEL_7;
  }
  int64_t v5 = v4;
  if (!v4[2])
  {
    swift_bridgeObjectRelease();
LABEL_7:
    double result = 0.0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  uint64_t v6 = v4[4];
  uint64_t v8 = v4[7];
  uint64_t v7 = v4[8];
  uint64_t v9 = v4[11];
  *(void *)a3 = v6;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(v5 + 5);
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = v7;
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(v5 + 9);
  *(void *)(a3 + 56) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease();
  return result;
}

void __swiftcall ContentInfo.topLevelPrimaryGenre(withExtraRootWithID:)(BookFoundation::GenreInfo_optional *__return_ptr retstr, Swift::String_optional withExtraRootWithID)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v7 = ContentInfo.genres.getter(v2, v3);
  if (!v7) {
    goto LABEL_35;
  }
  uint64_t v8 = v7;
  ContentInfo.primaryGenre.getter(v5, v4, (uint64_t)v73);
  uint64_t v9 = v74;
  if (!v74)
  {
    swift_bridgeObjectRelease();
LABEL_35:
    retstr->value.parentId = 0u;
    retstr->value.parentName = 0u;
    retstr->value.id = 0u;
    retstr->value.name = 0u;
    return;
  }
  uint64_t v55 = retstr;
  uint64_t v10 = v73[2];
  uint64_t v11 = v75;
  uint64_t v66 = v76;
  uint64_t v67 = v73[0];
  uint64_t v12 = v77;
  uint64_t v64 = v78;
  uint64_t v65 = (void *)v73[1];
  unint64_t v72 = sub_22898AB6C(MEMORY[0x263F8EE78]);
  uint64_t v13 = *(void *)(v8 + 16);
  if (!v13)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v36 = v55;
    if (v66)
    {
      unint64_t v37 = v72;
      if (*(void *)(v72 + 16))
      {
        while (1)
        {
          uint64_t v63 = v9;
          uint64_t v58 = v12;
          uint64_t v60 = v10;
          uint64_t v45 = (uint64_t)v65;
          uint64_t v43 = v66;
          uint64_t v46 = v67;
          unint64_t v47 = v37;
          swift_bridgeObjectRetain();
          uint64_t v62 = v11;
          unint64_t v48 = sub_2289D7094(v11, v66);
          if ((v49 & 1) == 0) {
            break;
          }
          uint64_t v50 = (void *)v64;
          uint64_t v51 = (uint64_t *)(*(void *)(v47 + 56) + (v48 << 6));
          uint64_t v52 = (void *)v51[1];
          uint64_t v67 = *v51;
          uint64_t v39 = v51[2];
          uint64_t v40 = v51[3];
          uint64_t v41 = v51[4];
          uint64_t v53 = v51[5];
          uint64_t v38 = v51[6];
          uint64_t v64 = v51[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v66 = v53;
          if (!v53
            || withExtraRootWithID.value._object
            && v52
            && (v67 == withExtraRootWithID.value._countAndFlagsBits
              ? (BOOL v54 = v52 == withExtraRootWithID.value._object)
              : (BOOL v54 = 0),
                v54 || (sub_2289DF480() & 1) != 0))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v42 = v46;
            unint64_t v44 = v50;
            goto LABEL_38;
          }
          uint64_t v65 = v52;
          sub_2289968C0(v46, v45, v60, v63);
          unint64_t v37 = v72;
          uint64_t v11 = v41;
          uint64_t v9 = v40;
          uint64_t v10 = v39;
          uint64_t v12 = v38;
          if (!*(void *)(v72 + 16)) {
            goto LABEL_22;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v42 = v67;
        unint64_t v44 = (void *)v64;
LABEL_38:
        uint64_t v11 = v62;
        uint64_t v9 = v63;
        uint64_t v12 = v58;
        uint64_t v10 = v60;
      }
      else
      {
        uint64_t v38 = v12;
        uint64_t v39 = v10;
        uint64_t v40 = v9;
        uint64_t v41 = v11;
LABEL_22:
        swift_bridgeObjectRelease();
        uint64_t v43 = v66;
        uint64_t v42 = v67;
        uint64_t v11 = v41;
        uint64_t v9 = v40;
        uint64_t v10 = v39;
        uint64_t v12 = v38;
        unint64_t v44 = (void *)v64;
      }
      uint64_t v36 = v55;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v43 = 0;
      uint64_t v42 = v67;
      unint64_t v44 = (void *)v64;
    }
    v36->value.id.value._uint64_t countAndFlagsBits = v42;
    v36->value.id.value._object = v65;
    v36->value.name._uint64_t countAndFlagsBits = v10;
    v36->value.name._object = (void *)v9;
    v36->value.parentId.value._uint64_t countAndFlagsBits = v11;
    v36->value.parentId.value._object = (void *)v43;
    v36->value.parentName.value._uint64_t countAndFlagsBits = v12;
    v36->value.parentName.value._object = v44;
    return;
  }
  uint64_t v57 = v12;
  uint64_t v59 = v10;
  uint64_t v61 = v11;
  swift_bridgeObjectRetain();
  uint64_t v14 = (uint64_t *)(v8 + 48);
  while (1)
  {
    uint64_t v16 = *(v14 - 1);
    if (!v16) {
      goto LABEL_7;
    }
    uint64_t v17 = *(v14 - 2);
    uint64_t v18 = v14[1];
    uint64_t v19 = v14[3];
    uint64_t v68 = *v14;
    uint64_t v69 = v14[2];
    uint64_t v20 = v14[5];
    uint64_t v70 = v14[4];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v71 = v18;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v73[0] = v72;
    unint64_t v23 = sub_2289D7094(v17, v16);
    uint64_t v24 = *(void *)(v72 + 16);
    BOOL v25 = (v22 & 1) == 0;
    uint64_t v26 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      break;
    }
    char v27 = v22;
    if (*(void *)(v72 + 24) >= v26)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_228998C44();
      }
    }
    else
    {
      sub_228997528(v26, isUniquelyReferenced_nonNull_native);
      unint64_t v28 = sub_2289D7094(v17, v16);
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_43;
      }
      unint64_t v23 = v28;
    }
    uint64_t v30 = (void *)v73[0];
    unint64_t v72 = v73[0];
    if (v27)
    {
      uint64_t v15 = (uint64_t *)(*(void *)(v73[0] + 56) + (v23 << 6));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t *v15 = v17;
      v15[1] = v16;
      _OWORD v15[2] = v68;
      uint64_t v15[3] = v71;
      void v15[4] = v69;
      v15[5] = v19;
      v15[6] = v70;
      v15[7] = v20;
    }
    else
    {
      *(void *)(v73[0] + 8 * (v23 >> 6) + 64) |= 1 << v23;
      uint64_t v31 = (uint64_t *)(v30[6] + 16 * v23);
      *uint64_t v31 = v17;
      v31[1] = v16;
      uint64_t v32 = (uint64_t *)(v30[7] + (v23 << 6));
      *uint64_t v32 = v17;
      v32[1] = v16;
      v32[2] = v68;
      v32[3] = v71;
      v32[4] = v69;
      v32[5] = v19;
      v32[6] = v70;
      v32[7] = v20;
      uint64_t v33 = v30[2];
      BOOL v34 = __OFADD__(v33, 1);
      uint64_t v35 = v33 + 1;
      if (v34) {
        goto LABEL_42;
      }
      _OWORD v30[2] = v35;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
LABEL_7:
    v14 += 8;
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      uint64_t v11 = v61;
      uint64_t v12 = v57;
      uint64_t v10 = v59;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  sub_2289DF500();
  __break(1u);
}

uint64_t sub_228995BE8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v16[0] = a4;
  uint64_t v6 = *a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for ContentDataSource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (void **)((char *)v16 - v10);
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)(*(void *)(*MEMORY[0x263F8EA20] + v6 + 8) - 8)
                                                       + 56))(v16[0], 1, 1);
      return (*(uint64_t (**)(void **, uint64_t))(v9 + 8))(v11, v8);
    }
    uint64_t v14 = *v11;
  }
  else
  {
    uint64_t v14 = *(void **)((char *)v11 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v11, AssociatedTypeWitness);
  }
  v16[1] = v14;
  uint64_t v15 = v16[0];
  swift_getAtKeyPath();

  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(*(void *)(*MEMORY[0x263F8EA20] + v6 + 8)
                                                                         - 8)
                                                             + 56))(v15, 0, 1);
}

uint64_t sub_228995E6C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v48 = a5;
  uint64_t v8 = *a2;
  uint64_t v41 = a2;
  uint64_t v47 = *(void *)(*(void *)(v8 + *MEMORY[0x263F8EA20]) - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v40 = (char *)&v38 - v10;
  uint64_t v49 = *(void *)(v11 + v12 + 8);
  uint64_t v39 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v16 = *v15;
  uint64_t v50 = v17;
  uint64_t v42 = v16;
  uint64_t v18 = type metadata accessor for ContentDataSource();
  uint64_t v43 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  id v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  unint64_t v23 = (void **)((char *)&v38 - v22);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(a4 + 40);
  uint64_t v44 = a3;
  uint64_t v45 = v5;
  uint64_t v46 = a4;
  v24(a3, a4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(void **, uint64_t))(v43 + 8))(v23, v18);
      uint64_t v27 = v48;
      uint64_t v26 = v49;
      goto LABEL_8;
    }
    uint64_t v28 = v48;
    uint64_t v30 = *v23;
  }
  else
  {
    uint64_t v28 = v48;
    uint64_t v29 = v50;
    uint64_t v30 = *(void **)((char *)v23 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(v47 + 8))(v23, v29);
  }
  uint64_t v26 = v49;
  uint64_t v51 = v30;
  swift_getAtKeyPath();

  uint64_t v31 = *(void *)(v26 + 16);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v14, 1, v31) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v28, v14, v31);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v28, 0, 1, v31);
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v14, v26);
  uint64_t v27 = v28;
LABEL_8:
  v24(v44, v46);
  int v33 = swift_getEnumCaseMultiPayload();
  if (v33)
  {
    if (v33 != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v26 + 16) - 8) + 56))(v27, 1, 1);
      return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v21, v18);
    }
  }
  else
  {
  }
  uint64_t v35 = v47;
  uint64_t v36 = v40;
  uint64_t v37 = v50;
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v40, v21, v50);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v36, v37);
}

uint64_t sub_22899632C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = a4;
  uint64_t v6 = *MEMORY[0x263F8EA20];
  uint64_t v19 = *a1;
  uint64_t v7 = *(void *)(v19 + v6);
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for ContentDataSource();
  uint64_t v18 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v12 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)(*MEMORY[0x263F8EA20]
                                                                                            + v19
                                                                                            + 8)
                                                                                + 16)
                                                                    - 8)
                                                        + 56))(v20, 1, 1);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v8);
    }
  }
  else
  {
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, v7);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v7);
}

uint64_t sub_2289965D0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v6 = *MEMORY[0x263F8EA20];
  uint64_t v20 = *a1;
  uint64_t v7 = *(void *)(v20 + v6);
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for ContentDataSource();
  uint64_t v19 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v18 - v13;
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(*MEMORY[0x263F8EA20] + v20 + 8) - 8)
                                                        + 56))(v21, 1, 1);
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v11, v8);
    }
  }
  else
  {
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, v7);
  uint64_t v17 = v21;
  swift_getAtKeyPath();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v7);
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(*(void *)(*MEMORY[0x263F8EA20] + v20 + 8)
                                                                         - 8)
                                                             + 56))(v17, 0, 1);
}

uint64_t sub_2289968C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_228996924(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_228952BB0(&qword_268284880);
  uint64_t result = sub_2289DF3A0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v8 << 6);
      }
      else
      {
        int64_t v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v16 >= v29) {
          goto LABEL_35;
        }
        unint64_t v17 = v30[v16];
        ++v8;
        if (!v17)
        {
          int64_t v8 = v16 + 1;
          if (v16 + 1 >= v29) {
            goto LABEL_35;
          }
          unint64_t v17 = v30[v8];
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v18 >= v29)
            {
LABEL_35:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_42;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v17 = v30[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v8 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_44;
                }
                if (v8 >= v29) {
                  goto LABEL_35;
                }
                unint64_t v17 = v30[v8];
                ++v18;
                if (v17) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v18;
          }
        }
LABEL_21:
        unint64_t v11 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      int v19 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v15);
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      sub_2289DF560();
      sub_2289DF580();
      if (v19 != 6) {
        sub_2289DF570();
      }
      uint64_t result = sub_2289DF590();
      uint64_t v21 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v12 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(unsigned char *)(*(void *)(v7 + 48) + v13) = v19;
      *(void *)(*(void *)(v7 + 56) + 8 * v13) = v20;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_42:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_228996C14(uint64_t a1, char a2)
{
  return sub_228997C0C(a1, a2, &qword_268284208);
}

uint64_t sub_228996C20(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_228952BB0(&qword_2682848D0);
  char v37 = a2;
  uint64_t v6 = sub_2289DF3A0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  BOOL v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    int64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_2289DF560();
    sub_2289DEC40();
    uint64_t result = sub_2289DF590();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_228996F2C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_228952BB0(&qword_2682848C8);
  uint64_t result = sub_2289DF3A0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v30[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_41;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v30[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      char v20 = *(unsigned char *)(*(void *)(v5 + 48) + v16);
      int64_t v21 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
      if (a2) {
        sub_22897D02C(v21, v31);
      }
      else {
        sub_228952C2C((uint64_t)v21, (uint64_t)v31);
      }
      sub_2289DF560();
      sub_2289DF570();
      uint64_t result = sub_2289DF590();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      uint64_t result = (uint64_t)sub_22897D02C(v31, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_228997204(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_228952BB0(&qword_2682848C0);
  char v36 = a2;
  uint64_t v6 = sub_2289DF3A0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_2289DF560();
    sub_2289DEC40();
    uint64_t result = sub_2289DF590();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_22899751C(uint64_t a1, char a2)
{
  return sub_228998218(a1, a2, &qword_268284628);
}

uint64_t sub_228997528(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_228952BB0(&qword_268284758);
  char v42 = a2;
  uint64_t v6 = sub_2289DF3A0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v40 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v38 = v2;
  int64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  uint64_t v14 = v5;
  uint64_t v41 = v5;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v39) {
      break;
    }
    int64_t v24 = v40;
    unint64_t v25 = v40[v23];
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v39) {
        goto LABEL_34;
      }
      unint64_t v25 = v40[v13];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v39)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v38;
          if ((v42 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_35;
        }
        unint64_t v25 = v40[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v39) {
              goto LABEL_34;
            }
            unint64_t v25 = v40[v13];
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = (uint64_t *)(*(void *)(v14 + 48) + 16 * v22);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    unint64_t v34 = *(void *)(v14 + 56) + (v22 << 6);
    uint64_t v35 = *(void *)(v34 + 24);
    uint64_t v43 = *(void *)v34;
    uint64_t v44 = *(void *)(v34 + 32);
    long long v45 = *(_OWORD *)(v34 + 40);
    long long v46 = *(_OWORD *)(v34 + 8);
    uint64_t v36 = *(void *)(v34 + 56);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = v41;
      swift_bridgeObjectRetain();
    }
    sub_2289DF560();
    sub_2289DEC40();
    uint64_t result = sub_2289DF590();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v29 = v17 == v28;
        if (v17 == v28) {
          unint64_t v17 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v17);
      }
      while (v30 == -1);
      unint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    void *v19 = v33;
    v19[1] = v32;
    unint64_t v20 = *(void *)(v7 + 56) + (v18 << 6);
    *(void *)unint64_t v20 = v43;
    *(_OWORD *)(v20 + 8) = v46;
    *(void *)(v20 + 24) = v35;
    *(void *)(v20 + 32) = v44;
    *(_OWORD *)(v20 + 40) = v45;
    *(void *)(v20 + 56) = v36;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  int64_t v24 = v40;
  if ((v42 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_35:
  uint64_t v37 = 1 << *(unsigned char *)(v41 + 32);
  if (v37 >= 64) {
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v37;
  }
  *(void *)(v41 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_2289978C4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_228952BB0(&qword_268284740);
  char v37 = a2;
  uint64_t v6 = sub_2289DF3A0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_2289DF560();
    sub_2289DEC40();
    uint64_t result = sub_2289DF590();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_228997BD0(uint64_t a1, char a2)
{
  return sub_228998218(a1, a2, &qword_2682848B8);
}

uint64_t sub_228997BDC(uint64_t a1, char a2)
{
  return sub_228997C0C(a1, a2, &qword_2682848B0);
}

uint64_t sub_228997BE8(uint64_t a1, char a2)
{
  return sub_228997C0C(a1, a2, &qword_2682848A8);
}

uint64_t sub_228997BF4(uint64_t a1, char a2)
{
  return sub_228997C0C(a1, a2, &qword_2682848A0);
}

uint64_t sub_228997C00(uint64_t a1, char a2)
{
  return sub_228997C0C(a1, a2, &qword_268284898);
}

uint64_t sub_228997C0C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_228952BB0(a3);
  char v39 = a2;
  uint64_t v7 = sub_2289DF3A0();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v34 = v33;
    }
    sub_2289DF560();
    sub_2289DEC40();
    uint64_t result = sub_2289DF590();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    void *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v36;
  unint64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_228997F18(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_228952BB0(&qword_268284890);
  char v36 = a2;
  uint64_t v6 = sub_2289DF3A0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  id v34 = v2;
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v35 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v35 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    if ((v36 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_2289DF560();
    sub_2289DEC40();
    uint64_t result = sub_2289DF590();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    void *v19 = v31;
    v19[1] = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_22899820C(uint64_t a1, char a2)
{
  return sub_228998218(a1, a2, &qword_268284888);
}

uint64_t sub_228998218(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_228952BB0(a3);
  char v38 = a2;
  uint64_t v7 = sub_2289DF3A0();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v37 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v36) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v36) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    char v33 = *(unsigned char *)(*(void *)(v6 + 56) + v21);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_2289DF560();
    sub_2289DEC40();
    uint64_t result = sub_2289DF590();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    void *v19 = v32;
    v19[1] = v31;
    *(unsigned char *)(*(void *)(v8 + 56) + v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v35;
  unint64_t v23 = (void *)(v6 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

id sub_228998520()
{
  return sub_22899906C(&qword_268284208);
}

void *sub_22899852C()
{
  uint64_t v1 = v0;
  sub_228952BB0(&qword_2682848D0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2289DF390();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    void *v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2289986D8()
{
  uint64_t v1 = v0;
  sub_228952BB0(&qword_2682848C8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2289DF390();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    sub_228952C2C(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = v16;
    uint64_t result = sub_22897D02C(v20, (_OWORD *)(*(void *)(v4 + 56) + 32 * v15));
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_228998898()
{
  uint64_t v1 = v0;
  sub_228952BB0(&qword_2682848C0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2289DF390();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_228998A50()
{
  uint64_t v1 = v0;
  sub_228952BB0(&qword_268284748);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2289DF390();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_22898D274(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_228952C2C(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = sub_22897D02C(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_228998C38()
{
  return sub_2289993C4(&qword_268284628);
}

void *sub_228998C44()
{
  sub_228952BB0(&qword_268284758);
  uint64_t v32 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = sub_2289DF390();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v32 = v3;
    return result;
  }
  uint64_t result = (void *)(v2 + 64);
  uint64_t v5 = v1 + 64;
  unint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6) {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v6);
  }
  int64_t v8 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    int64_t v29 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v12) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v5 + 8 * v29);
    ++v8;
    if (!v30)
    {
      int64_t v8 = v29 + 1;
      if (v29 + 1 >= v12) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v5 + 8 * v8);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v11 = (v30 - 1) & v30;
    unint64_t v14 = __clz(__rbit64(v30)) + (v8 << 6);
LABEL_12:
    uint64_t v15 = 16 * v14;
    uint64_t v16 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v14);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    unint64_t v19 = v14 << 6;
    unint64_t v20 = *(void *)(v1 + 56) + v19;
    uint64_t v21 = *(void *)v20;
    uint64_t v23 = *(void *)(v20 + 24);
    uint64_t v22 = *(void *)(v20 + 32);
    uint64_t v24 = *(void *)(v20 + 56);
    int64_t v25 = (void *)(*(void *)(v3 + 48) + v15);
    long long v26 = *(_OWORD *)(v20 + 8);
    long long v27 = *(_OWORD *)(v20 + 40);
    *int64_t v25 = v17;
    v25[1] = v18;
    unint64_t v28 = *(void *)(v3 + 56) + v19;
    *(void *)unint64_t v28 = v21;
    *(_OWORD *)(v28 + 8) = v26;
    *(void *)(v28 + 24) = v23;
    *(void *)(v28 + 32) = v22;
    *(_OWORD *)(v28 + 40) = v27;
    *(void *)(v28 + 56) = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v12) {
    goto LABEL_26;
  }
  unint64_t v30 = *(void *)(v5 + 8 * v31);
  if (v30)
  {
    int64_t v8 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v8 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v5 + 8 * v8);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of ContentInfo.dataSource.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ContentInfo.init(dataSource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

void *sub_228998E84()
{
  uint64_t v1 = v0;
  sub_228952BB0(&qword_268284740);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2289DF390();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    void *v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_228999030()
{
  return sub_2289993C4(&qword_2682848B8);
}

id sub_22899903C()
{
  return sub_22899906C(&qword_2682848B0);
}

id sub_228999048()
{
  return sub_22899906C(&qword_2682848A8);
}

id sub_228999054()
{
  return sub_22899906C(&qword_2682848A0);
}

id sub_228999060()
{
  return sub_22899906C(&qword_268284898);
}

id sub_22899906C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_228952BB0(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = sub_2289DF390();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    unint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_228999218()
{
  uint64_t v1 = v0;
  sub_228952BB0(&qword_268284890);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2289DF390();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2289993B8()
{
  return sub_2289993C4(&qword_268284888);
}

void *sub_2289993C4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_228952BB0(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = sub_2289DF390();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    LOBYTE(v17) = *(unsigned char *)(*(void *)(v3 + 56) + v16);
    int64_t v20 = (void *)(*(void *)(v5 + 48) + 16 * v16);
    *int64_t v20 = v19;
    v20[1] = v18;
    *(unsigned char *)(*(void *)(v5 + 56) + v16) = (_BYTE)v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSManagedObjectContext.executeAndMergeChanges(using:)(NSBatchDeleteRequest using)
{
  uint64_t v2 = v1;
  uint64_t v21 = *MEMORY[0x263EF8340];
  [(objc_class *)using.super.super.isa setResultType:1];
  *(void *)&long long v19 = 0;
  id v4 = objc_msgSend(v2, sel_executeRequest_error_, using.super.super.isa, &v19);
  uint64_t v5 = (void *)v19;
  if (!v4)
  {
    id v9 = (id)v19;
    sub_2289DE7E0();

    swift_willThrow();
    return;
  }
  uint64_t v6 = v4;
  self;
  uint64_t v7 = (void *)swift_dynamicCastObjCClass();
  id v8 = v5;
  if (!v7) {

  }
  sub_228952BB0(&qword_2682848D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2289E0340;
  *(void *)&long long v19 = sub_2289DEBC0();
  *((void *)&v19 + 1) = v11;
  sub_2289DF200();
  if (!v7)
  {
    long long v19 = 0u;
    long long v20 = 0u;
LABEL_15:
    sub_228952B50((uint64_t)&v19);
    goto LABEL_16;
  }
  if (objc_msgSend(v7, sel_result))
  {
    sub_2289DF1A0();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  sub_2289998A4((uint64_t)v18, (uint64_t)&v19);
  if (!*((void *)&v20 + 1)) {
    goto LABEL_15;
  }
  sub_228952BB0(&qword_2682848E0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_16:
    *(void *)(inited + 96) = sub_228952BB0(&qword_2682848E0);
LABEL_17:
    uint64_t v12 = MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
  uint64_t v12 = *(void *)&v18[0];
  *(void *)(inited + 96) = sub_228952BB0(&qword_2682848E0);
  if (!v12) {
    goto LABEL_17;
  }
LABEL_18:
  *(void *)(inited + 72) = v12;
  sub_22898ACE8(inited);
  unint64_t v13 = self;
  int64_t v14 = (void *)sub_2289DEA70();
  swift_bridgeObjectRelease();
  sub_228952BB0(&qword_2682844E8);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2289E12A0;
  *(void *)(v15 + 32) = v2;
  *(void *)&long long v19 = v15;
  sub_2289DEE30();
  sub_228999864();
  id v16 = v2;
  uint64_t v17 = (void *)sub_2289DEE10();
  swift_bridgeObjectRelease();
  objc_msgSend(v13, sel_mergeChangesFromRemoteContextSave_intoContexts_, v14, v17);
}

unint64_t sub_228999864()
{
  unint64_t result = qword_2682848E8;
  if (!qword_2682848E8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2682848E8);
  }
  return result;
}

uint64_t sub_2289998A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_26AECF7D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of LibraryContentInfo.assetLogID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LibraryContentInfo.collectionMemberships.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of LibraryContentInfo.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LibraryContentInfo.genreNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of LibraryContentInfo.sortTitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of LibraryContentInfo.storeID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of LibraryContentInfo.title.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of LibraryContentInfo.url.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t AssetInfo.sequenceNumber.getter(uint64_t a1, uint64_t a2)
{
  AssetInfo.seriesOrdering.getter(a1, a2, (char *)&v8);
  if (v8 != 2) {
    return 0;
  }
  MEMORY[0x270FA5388](v4);
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  uint64_t v6 = (void *)swift_getKeyPath();
  sub_228993EB8(KeyPath, v6, a1, *(void *)(a2 + 8), (uint64_t)&v8);
  swift_release();
  swift_release();
  return v8;
}

uint64_t AssetInfo.seriesSortKey.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899AE80(a1, a2, (uint64_t)&unk_2289E2890, (void (*)(uint64_t *__return_ptr))sub_22899632C);
}

uint64_t AssetInfo.releaseDate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = (void *)swift_getKeyPath();
  sub_228995E6C(KeyPath, v7, a1, *(void *)(a2 + 8), a3);
  swift_release();
  return swift_release();
}

uint64_t AssetInfo.title.getter(uint64_t a1, uint64_t a2)
{
  return sub_228999BA8(a1, a2);
}

uint64_t AssetInfo.author.getter(uint64_t a1, uint64_t a2)
{
  return sub_228999BA8(a1, a2);
}

uint64_t sub_228999BA8(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = (void *)swift_getKeyPath();
  sub_228993EB8(KeyPath, v5, a1, *(void *)(a2 + 8), (uint64_t)&v7);
  swift_release();
  swift_release();
  return v7;
}

BOOL static ContentKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ContentKind.hash(into:)()
{
  return sub_2289DF570();
}

BOOL static AssetType.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t AssetType.hash(into:)()
{
  return sub_2289DF570();
}

uint64_t AssetType.hashValue.getter()
{
  return sub_2289DF590();
}

BOOL static FinishedDateKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t FinishedDateKind.hash(into:)()
{
  return sub_2289DF570();
}

uint64_t FinishedDateKind.hashValue.getter()
{
  return sub_2289DF590();
}

uint64_t sub_228999D98@<X0>(uint64_t *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t AssetInfo.bookWorkTitle.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899C404(a1, a2);
}

uint64_t AssetInfo.bookWorkAuthorName.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899C404(a1, a2);
}

uint64_t AssetInfo.authors.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for ContentDataSource();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void **)((char *)&v34 - v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 40))(a1, v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(void **, uint64_t))(v6 + 8))(v8, v5);
      return 0;
    }
    int64_t v10 = *v8;
  }
  else
  {
    int64_t v10 = *(void **)((char *)v8 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v8, AssociatedTypeWitness);
  }
  unint64_t v11 = sub_22896BAC8(@"authors");

  if (!v11) {
    return 0;
  }
  if (!(v11 >> 62))
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_9;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_2289DF380();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_23;
  }
LABEL_9:
  uint64_t v35 = MEMORY[0x263F8EE78];
  uint64_t result = sub_22896C4D8(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v14 = v35;
    if ((v11 & 0xC000000000000001) != 0)
    {
      uint64_t v15 = 0;
      do
      {
        uint64_t v16 = MEMORY[0x22A6A1E70](v15, v11);
        uint64_t v18 = *(void *)(v16 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
        uint64_t v17 = *(void *)(v16 + OBJC_IVAR____TtC14BookFoundation9MResource_id + 8);
        uint64_t v20 = *(void *)(v16 + OBJC_IVAR____TtC14BookFoundation7MAuthor_name);
        uint64_t v19 = *(void *)(v16 + OBJC_IVAR____TtC14BookFoundation7MAuthor_name + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        uint64_t v35 = v14;
        unint64_t v22 = *(void *)(v14 + 16);
        unint64_t v21 = *(void *)(v14 + 24);
        if (v22 >= v21 >> 1)
        {
          sub_22896C4D8(v21 > 1, v22 + 1, 1);
          uint64_t v14 = v35;
        }
        ++v15;
        *(void *)(v14 + 16) = v22 + 1;
        int64_t v23 = (void *)(v14 + 32 * v22);
        v23[4] = v18;
        v23[5] = v17;
        v23[6] = v20;
        v23[7] = v19;
      }
      while (v12 != v15);
    }
    else
    {
      unint64_t v24 = (void *)(v11 + 32);
      unint64_t v34 = v11;
      do
      {
        int64_t v25 = (uint64_t *)(*v24 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
        uint64_t v27 = *v25;
        uint64_t v26 = v25[1];
        unint64_t v28 = (uint64_t *)(*v24 + OBJC_IVAR____TtC14BookFoundation7MAuthor_name);
        uint64_t v30 = *v28;
        uint64_t v29 = v28[1];
        uint64_t v35 = v14;
        unint64_t v32 = *(void *)(v14 + 16);
        unint64_t v31 = *(void *)(v14 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v32 >= v31 >> 1)
        {
          sub_22896C4D8(v31 > 1, v32 + 1, 1);
          uint64_t v14 = v35;
        }
        *(void *)(v14 + 16) = v32 + 1;
        char v33 = (void *)(v14 + 32 * v32);
        uint64_t v33[4] = v27;
        v33[5] = v26;
        v33[6] = v30;
        v33[7] = v29;
        ++v24;
        --v12;
      }
      while (v12);
    }
    swift_bridgeObjectRelease();
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t AssetInfo.coverAspectRatio.getter(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v5 = *(void *)(a2 + 8);
  sub_228993C7C(KeyPath, a1, v5, (uint64_t)&v9);
  uint64_t result = swift_release();
  if ((v10 & 1) != 0
    || (MEMORY[0x270FA5388](result),
        uint64_t v7 = (uint64_t *)swift_getKeyPath(),
        sub_228993C7C(v7, a1, v5, (uint64_t)&v9),
        uint64_t result = swift_release(),
        (v10 & 1) != 0))
  {
    MEMORY[0x270FA5388](result);
    uint64_t v8 = (uint64_t *)swift_getKeyPath();
    sub_22899632C(v8, a1, v5, (uint64_t)&v9);
    uint64_t result = swift_release();
    if (v10) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
    }
  }
  return result;
}

uint64_t sub_22899A390@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v6 & 1;
  return result;
}

uint64_t AssetInfo.coverURLString.getter(uint64_t a1, uint64_t a2)
{
  return sub_228999BA8(a1, a2);
}

uint64_t sub_22899A458@<X0>(uint64_t *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t AssetInfo.dateFinished.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899C23C(a1, a2, (uint64_t)&unk_2289E2B48, (void (*)(uint64_t, uint64_t))sub_22899632C);
}

uint64_t sub_22899A524()
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  uint64_t v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness);
}

uint64_t AssetInfo.duration.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899AE80(a1, a2, (uint64_t)&unk_2289E2B78, (void (*)(uint64_t *__return_ptr))sub_228993C7C);
}

uint64_t AssetInfo.editionKind.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899C404(a1, a2);
}

uint64_t AssetInfo.expectedDate.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899C23C(a1, a2, (uint64_t)&unk_2289E2C08, (void (*)(uint64_t, uint64_t))sub_228993C7C);
}

uint64_t AssetInfo.featuredEditions.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for ContentDataSource();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void **)((char *)&v29 - v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 40))(a1, v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(void **, uint64_t))(v6 + 8))(v8, v5);
      return 0;
    }
    char v10 = *v8;
  }
  else
  {
    char v10 = *(void **)((char *)v8 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v8, AssociatedTypeWitness);
  }
  unint64_t v11 = sub_22896BAB0(@"featured-editions");

  if (!v11) {
    return 0;
  }
  if (!(v11 >> 62))
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_9;
    }
LABEL_30:
    uint64_t v15 = (void *)MEMORY[0x263F8EE78];
LABEL_31:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v15;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_2289DF380();
  uint64_t v12 = result;
  if (!result) {
    goto LABEL_30;
  }
LABEL_9:
  if (v12 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      id v16 = (v11 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x22A6A1E70](v14, v11)
          : *(id *)(v11 + 8 * v14 + 32);
      uint64_t v17 = v16;
      type metadata accessor for MBook();
      uint64_t v18 = swift_dynamicCastClass();
      if (v18) {
        break;
      }
      type metadata accessor for MAudiobook();
      uint64_t v23 = swift_dynamicCastClass();
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v25 = type metadata accessor for AudiobookInfo();
        *((void *)&v30 + 1) = v25;
        uint64_t v31 = sub_22896DF88(&qword_268284218, (void (*)(uint64_t))type metadata accessor for AudiobookInfo);
        unint64_t v21 = sub_22896EC88((uint64_t *)&v29);
        *unint64_t v21 = v24;
        sub_228952BB0(&qword_268284220);
        swift_storeEnumTagMultiPayload();
        *((unsigned char *)v21 + *(int *)(v25 + 20)) = 0;
        unint64_t v22 = (int *)(v25 + 24);
        goto LABEL_18;
      }
      uint64_t v33 = type metadata accessor for MAsset();
      *(void *)&long long v32 = v17;
      sub_228952BB0(&qword_268284150);
      id v28 = v17;
      sub_22898A418((uint64_t)&v32);
      sub_2289559D0((uint64_t)&v32);
      long long v29 = 0u;
      long long v30 = 0u;
      uint64_t v31 = 0;

      if (*((void *)&v30 + 1)) {
        goto LABEL_19;
      }
      sub_22896EABC((uint64_t)&v29, &qword_268284210);
LABEL_24:
      if (v12 == ++v14) {
        goto LABEL_31;
      }
    }
    uint64_t v19 = v18;
    uint64_t v20 = type metadata accessor for BookInfo();
    *((void *)&v30 + 1) = v20;
    uint64_t v31 = sub_22896DF88(&qword_268284228, (void (*)(uint64_t))type metadata accessor for BookInfo);
    unint64_t v21 = sub_22896EC88((uint64_t *)&v29);
    *unint64_t v21 = v19;
    sub_228952BB0(&qword_268284230);
    swift_storeEnumTagMultiPayload();
    unint64_t v22 = (int *)(v20 + 20);
LABEL_18:
    *((unsigned char *)v21 + *v22) = 1;
LABEL_19:
    sub_2289605CC(&v29, (uint64_t)&v32);
    sub_2289605CC(&v32, (uint64_t)&v29);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v15 = sub_22896C208(0, v15[2] + 1, 1, v15);
    }
    unint64_t v27 = v15[2];
    unint64_t v26 = v15[3];
    if (v27 >= v26 >> 1) {
      uint64_t v15 = sub_22896C208((void *)(v26 > 1), v27 + 1, 1, v15);
    }
    _OWORD v15[2] = v27 + 1;
    sub_2289605CC(&v29, (uint64_t)&v15[5 * v27 + 4]);
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t AssetInfo.finishedDateKind.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  sub_22899632C(KeyPath, a1, *(void *)(a2 + 8), a3);
  return swift_release();
}

void *sub_22899AB3C@<X0>(unsigned char *a1@<X8>)
{
  void *(*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  void *result;
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(&v6, v4, AssociatedConformanceWitness);
  *a1 = v6;
  return result;
}

uint64_t AssetInfo.hasSpecifiedFinishedDate.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899B1FC(a1, a2);
}

uint64_t sub_22899AC04@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.isExplicit.getter(uint64_t a1, uint64_t a2)
{
  return sub_22896A22C(a1, a2);
}

uint64_t sub_22899ACC8@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 88);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.isFinished.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899B1FC(a1, a2);
}

uint64_t sub_22899AD84@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 96);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.isFree.getter(uint64_t a1, uint64_t a2)
{
  BOOL v2 = (AssetInfo.price.getter(a1, a2) & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v3) {
    return 2;
  }
  else {
    return v2;
  }
}

uint64_t AssetInfo.price.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899AE80(a1, a2, (uint64_t)&unk_2289E2D38, (void (*)(uint64_t *__return_ptr))sub_228993C7C);
}

uint64_t sub_22899AE80(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  swift_getKeyPath();
  a4(&v6);
  swift_release();
  return v6;
}

uint64_t AssetInfo.isInSamples.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899B1FC(a1, a2);
}

uint64_t sub_22899AF04@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 144);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.isPartOfSeries.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899B1FC(a1, a2);
}

uint64_t sub_22899AFC0@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 120);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.isPreorder.getter(uint64_t a1, uint64_t a2)
{
  return sub_22896A22C(a1, a2);
}

uint64_t sub_22899B084@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 128);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.isPurchased.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899B1FC(a1, a2);
}

uint64_t sub_22899B140@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 136);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.isSideloaded.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899B1FC(a1, a2);
}

uint64_t sub_22899B1FC(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  sub_2289965D0(KeyPath, a1, *(void *)(a2 + 8), (uint64_t)&v6);
  swift_release();
  return v6;
}

uint64_t sub_22899B260@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 152);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.lastEngagedDate.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899C23C(a1, a2, (uint64_t)&unk_2289E2E98, (void (*)(uint64_t, uint64_t))sub_22899632C);
}

uint64_t sub_22899B330()
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 168);
  uint64_t v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness);
}

uint64_t AssetInfo.publisherName.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899C404(a1, a2);
}

uint64_t AssetInfo.priceFormatted.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899C404(a1, a2);
}

double AssetInfo.readingProgress.getter(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  sub_2289965D0(KeyPath, a1, *(void *)(a2 + 8), (uint64_t)&v6);
  swift_release();
  double result = v6;
  if (v7) {
    return 0.0;
  }
  return result;
}

void sub_22899B46C(double *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v3 = *(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 184);
  uint64_t v4 = swift_checkMetadataState();
  *a1 = v3(v4, AssociatedConformanceWitness);
}

uint64_t sub_22899B518@<X0>(id *a1@<X0>, SEL *a2@<X3>, uint64_t a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    uint64_t v5 = v4;
    sub_2289DE900();

    uint64_t v6 = sub_2289DE910();
    char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
    uint64_t v8 = v6;
    uint64_t v9 = a3;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v11 = sub_2289DE910();
    char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v8 = v11;
    uint64_t v9 = a3;
    uint64_t v10 = 1;
  }

  return v7(v9, v10, 1, v8);
}

uint64_t sub_22899B5DC()
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 192);
  uint64_t v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness);
}

uint64_t AssetInfo.supportsUnifiedProductPage.getter(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  sub_228995BE8(KeyPath, a1, *(void *)(a2 + 8), (uint64_t)&v6);
  swift_release();
  return v6 & 1;
}

uint64_t AssetInfo.serverArtworkResponse.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899BBCC(a1, a2);
}

void AssetInfo.seriesOrdering.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v37 = (char *)&v31 - v8;
  uint64_t v35 = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for ContentDataSource();
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (void **)((char *)&v31 - v13);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v6 + 40);
  uint64_t v36 = v3;
  v15(a1, v6);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(void **, uint64_t))(v34 + 8))(v14, v9);
      goto LABEL_12;
    }
    long long v32 = a3;
    uint64_t v17 = *v14;
  }
  else
  {
    long long v32 = a3;
    uint64_t v17 = *(void **)((char *)v14 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(v38 + 8))(v14, AssociatedTypeWitness);
  }
  uint64_t v18 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v17) + 0x140);
  uint64_t v19 = v17;
  uint64_t v20 = v18();

  swift_bridgeObjectRelease();
  if (!v20)
  {
    type metadata accessor for MBook();
    if (swift_dynamicCastClass())
    {

      *long long v32 = 1;
      return;
    }
  }
  unint64_t v21 = (unsigned __int8 *)MAsset.seriesResource.getter();

  a3 = v32;
  if (v21)
  {
    int v22 = v21[OBJC_IVAR____TtC14BookFoundation7MSeries_isOrdered];

    if (v22) {
      char v23 = 2;
    }
    else {
      char v23 = 3;
    }
    *a3 = v23;
    return;
  }
LABEL_12:
  v15(a1, v6);
  int v24 = swift_getEnumCaseMultiPayload();
  if (v24)
  {
    uint64_t v25 = v37;
    uint64_t v26 = v38;
    if (v24 != 1)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v9);
LABEL_26:
      *a3 = 0;
      return;
    }
  }
  else
  {

    uint64_t v25 = v37;
    uint64_t v26 = v38;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v25, v12, AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 120))(AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v25, AssociatedTypeWitness);
    *a3 = 1;
    return;
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 216))(&v39, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v25, AssociatedTypeWitness);
  if (!v40)
  {
    sub_22896EABC((uint64_t)&v39, &qword_2682841B8);
    goto LABEL_26;
  }
  sub_2289605CC(&v39, (uint64_t)v41);
  uint64_t v28 = v42;
  uint64_t v29 = v43;
  sub_22895598C(v41, v42);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v29 + 72))(v28, v29)) {
    char v30 = 2;
  }
  else {
    char v30 = 3;
  }
  *a3 = v30;
  sub_2289559D0((uint64_t)v41);
}

uint64_t AssetInfo.serverData.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899BBCC(a1, a2);
}

uint64_t sub_22899BBCC(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  sub_228995BE8(KeyPath, a1, *(void *)(a2 + 8), (uint64_t)&v6);
  swift_release();
  return v6;
}

uint64_t AssetInfo.seriesName.getter(uint64_t a1, uint64_t a2)
{
  return sub_228999BA8(a1, a2);
}

uint64_t sub_22899BC44()
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 216);
  uint64_t v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness);
}

uint64_t sub_22899BCF0(uint64_t a1)
{
  sub_228961A40(a1, (uint64_t)v5);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v2 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 224);
  uint64_t v3 = swift_checkMetadataState();
  return v2(v5, v3, AssociatedConformanceWitness);
}

uint64_t AssetInfo.sequenceLabel.getter(uint64_t a1, uint64_t a2)
{
  AssetInfo.seriesOrdering.getter(a1, a2, (char *)&v8);
  if (v8 != 2) {
    return 0;
  }
  MEMORY[0x270FA5388](v4);
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  uint64_t v6 = (void *)swift_getKeyPath();
  sub_228993EB8(KeyPath, v6, a1, *(void *)(a2 + 8), (uint64_t)&v8);
  swift_release();
  swift_release();
  return v8;
}

uint64_t sub_22899BEAC@<X0>(uint64_t *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 200);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t sub_22899BF58@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x140))();
  uint64_t v4 = sub_22897BAAC(1, v3);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 20) = BYTE4(v8) & 1;
  return result;
}

uint64_t sub_22899C000()
{
  return 16;
}

__n128 sub_22899C00C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899C018@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 208);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 20) = v8 & 1;
  return result;
}

uint64_t sub_22899C0D4()
{
  return 16;
}

__n128 sub_22899C0E0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899C0EC@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 240);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v6 & 1;
  return result;
}

uint64_t sub_22899C1A4()
{
  return 16;
}

__n128 sub_22899C1B0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_22899C1BC()
{
  return sel_releaseDate;
}

uint64_t sub_22899C1C8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22899B518(a1, (SEL *)&selRef_releaseDate, a2);
}

uint64_t sub_22899C1E8()
{
  return 16;
}

__n128 sub_22899C1F4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899C204()
{
  return 16;
}

__n128 sub_22899C210(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t AssetInfo.sharableURL.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899C23C(a1, a2, (uint64_t)&unk_2289E3120, (void (*)(uint64_t, uint64_t))sub_228995BE8);
}

uint64_t sub_22899C23C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t KeyPath = swift_getKeyPath();
  a4(KeyPath, a1);
  return swift_release();
}

uint64_t sub_22899C2B0@<X0>(uint64_t *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t sub_22899C364()
{
  return 16;
}

__n128 sub_22899C370(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899C380()
{
  return 16;
}

__n128 sub_22899C38C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899C398@<X0>(uint64_t *a1@<X8>)
{
  return sub_22899D7B0(MAsset.bookWorkTitle.getter, a1);
}

uint64_t sub_22899C3B0()
{
  return 16;
}

__n128 sub_22899C3BC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899C3C8@<X0>(uint64_t *a1@<X8>)
{
  return sub_22899D7B0(MAsset.bookWorkAuthorName.getter, a1);
}

uint64_t sub_22899C3E0()
{
  return 16;
}

__n128 sub_22899C3EC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t AssetInfo.standardDescription.getter(uint64_t a1, uint64_t a2)
{
  return sub_22899C404(a1, a2);
}

uint64_t sub_22899C404(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  sub_228993C7C(KeyPath, a1, *(void *)(a2 + 8), (uint64_t)&v6);
  swift_release();
  return v6;
}

void sub_22899C468(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = sub_2289DEBC0();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  *a3 = v6;
  a3[1] = v8;
}

uint64_t AssetInfo.enrich(with:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v140 = a1;
  uint64_t v142 = (uint64_t *)a3;
  uint64_t v138 = *(void *)(a2 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  uint64_t v130 = (char *)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v131 = (char *)&v127 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v132 = (char *)&v127 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v127 - v11;
  uint64_t v137 = v13;
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v143 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v128 = (uint64_t)&v127 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v133 = (char *)&v127 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v129 = (uint64_t)&v127 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v134 = (char *)&v127 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v127 - v24;
  uint64_t v26 = (void *)swift_getAssociatedTypeWitness();
  uint64_t v139 = AssociatedTypeWitness;
  id v136 = v26;
  uint64_t v27 = type metadata accessor for ContentDataSource();
  uint64_t v135 = *(void *)(v27 - 8);
  uint64_t v28 = MEMORY[0x270FA5388](v27);
  char v30 = (char *)&v127 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  long long v32 = (void **)((char *)&v127 - v31);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v14 + 40);
  uint64_t v144 = v3;
  uint64_t v141 = a2;
  v33(a2, v14);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v127 = v12;
    uint64_t v37 = v139;
    uint64_t v132 = *(char **)((char *)v32 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    uint64_t v36 = v143;
    (*(void (**)(char *, void **, uint64_t))(v143 + 32))(v25, v32, v37);
    uint64_t v38 = v140[3];
    uint64_t v39 = v140[4];
    sub_22895598C(v140, v38);
    uint64_t v40 = ContentInfo.storeData.getter(v38, *(void *)(v39 + 8));
    if (v40)
    {
      uint64_t v41 = (void *)v40;
      uint64_t v42 = v132;
      uint64_t v43 = v41;
      uint64_t v44 = MAsset.enrichIfNeeded(with:)();

      if (v44)
      {
        uint64_t v140 = v43;
        uint64_t v45 = v139;
        uint64_t v149 = v139;
        uint64_t v46 = v137;
        uint64_t v47 = v141;
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        uint64_t v48 = sub_22896EC88((uint64_t *)&v148);
        uint64_t v49 = v36;
        (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(v48, v25, v45);
        uint64_t v50 = v44;
        static ContentInfoUtilities.assetInfo(libraryAssetInfo:storeAsset:)((uint64_t)&v148, v44, (uint64_t)&v151);

        sub_22896EABC((uint64_t)&v148, &qword_268284300);
        uint64_t v51 = v138;
        uint64_t v52 = v127;
        (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v127, v144, v47);
        if (v152)
        {

          (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v47);
          (*(void (**)(char *, uint64_t))(v49 + 8))(v25, v45);
          uint64_t v53 = &v151;
          return sub_2289605CC(v53, (uint64_t)v142);
        }
        uint64_t v117 = v142;
        v142[3] = v47;
        v117[4] = v46;
        uint64_t v118 = sub_22896EC88(v117);
        (*(void (**)(uint64_t *, char *, uint64_t))(v51 + 32))(v118, v52, v47);

        (*(void (**)(char *, uint64_t))(v49 + 8))(v25, v45);
        goto LABEL_34;
      }
      (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v139);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v37);
    }
    uint64_t v35 = v141;
    goto LABEL_16;
  }
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(void **, uint64_t))(v135 + 8))(v32, v27);
    uint64_t v35 = v141;
    uint64_t v36 = v143;
LABEL_16:
    uint64_t v62 = v142;
    goto LABEL_17;
  }
  BOOL v54 = *v32;
  uint64_t v55 = v140[3];
  uint64_t v56 = v140[4];
  sub_22895598C(v140, v55);
  uint64_t v57 = ContentInfo.storeData.getter(v55, *(void *)(v56 + 8));
  if (!v57)
  {

    uint64_t v35 = v141;
    uint64_t v62 = v142;
    uint64_t v36 = v143;
LABEL_17:
    v33(v35, v14);
    int v68 = swift_getEnumCaseMultiPayload();
    if (v68)
    {
      if (v68 != 1)
      {
        (*(void (**)(char *, uint64_t))(v135 + 8))(v30, v27);
        goto LABEL_25;
      }
      uint64_t v69 = v139;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v133, v30, v139);
      uint64_t v70 = v140[3];
      uint64_t v71 = v140[4];
      sub_22895598C(v140, v70);
      uint64_t v72 = *(void *)(v71 + 8);
      uint64_t v73 = swift_getAssociatedTypeWitness();
      uint64_t v74 = sub_2289DF130();
      uint64_t v75 = *(void *)(v74 - 8);
      MEMORY[0x270FA5388](v74);
      uint64_t v77 = (char *)&v127 - v76;
      ContentInfo.libraryData.getter(v70, v72, (char *)&v127 - v76);
      uint64_t v78 = *(void *)(v73 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v77, 1, v73) == 1)
      {
        (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v74);
        (*(void (**)(char *, uint64_t))(v143 + 8))(v133, v69);
LABEL_23:
        uint64_t v35 = v141;
        uint64_t v62 = v142;
LABEL_25:
        uint64_t v89 = v138;
        uint64_t v90 = v137;
        v62[3] = v35;
        void v62[4] = v90;
        uint64_t v91 = sub_22896EC88(v62);
        return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v89 + 16))(v91, v144, v35);
      }
      uint64_t v149 = v73;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v92 = sub_22896EC88((uint64_t *)&v148);
      (*(void (**)(uint64_t *, char *, uint64_t))(v78 + 32))(v92, v77, v73);
      sub_2289605CC(&v148, (uint64_t)&v151);
      uint64_t v93 = v137;
      uint64_t v94 = v141;
      uint64_t v95 = swift_getAssociatedConformanceWitness();
      uint64_t v96 = v128;
      uint64_t v97 = v133;
      LibraryAssetInfo.enriched(with:)((uint64_t)&v151, v69, v95, v128);
      uint64_t v146 = v69;
      uint64_t v147 = v95;
      uint64_t v98 = sub_22896EC88(v145);
      uint64_t v99 = v143;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v143 + 16))(v98, v96, v69);
      static ContentInfoUtilities.assetInfo(libraryAssetInfo:)(v145, (uint64_t)&v148);
      sub_2289559D0((uint64_t)v145);
      uint64_t v100 = v138;
      long long v101 = v130;
      (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v130, v144, v94);
      uint64_t v102 = v142;
      if (v149)
      {
        (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v94);
        uint64_t v103 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
        v103(v96, v69);
        sub_2289559D0((uint64_t)&v151);
        v103((uint64_t)v97, v69);
        return sub_2289605CC(&v148, (uint64_t)v102);
      }
      v142[3] = v94;
      v102[4] = v93;
      uint64_t v122 = sub_22896EC88(v102);
      (*(void (**)(uint64_t *, char *, uint64_t))(v100 + 32))(v122, v101, v94);
      uint64_t v123 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
      v123(v96, v69);
      sub_2289559D0((uint64_t)&v151);
      v123((uint64_t)v97, v69);
      goto LABEL_37;
    }
    uint64_t v79 = v139;
    id v136 = *(id *)&v30[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v134, v30, v79);
    uint64_t v80 = v140[3];
    uint64_t v81 = v140[4];
    sub_22895598C(v140, v80);
    uint64_t v82 = *(void *)(v81 + 8);
    uint64_t v83 = swift_getAssociatedTypeWitness();
    uint64_t v84 = sub_2289DF130();
    uint64_t v85 = *(void *)(v84 - 8);
    MEMORY[0x270FA5388](v84);
    uint64_t v87 = (char *)&v127 - v86;
    ContentInfo.libraryData.getter(v80, v82, (char *)&v127 - v86);
    uint64_t v88 = *(void *)(v83 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v87, 1, v83) == 1)
    {
      (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v84);

      (*(void (**)(char *, uint64_t))(v143 + 8))(v134, v79);
      goto LABEL_23;
    }
    uint64_t v149 = v83;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v104 = sub_22896EC88((uint64_t *)&v148);
    (*(void (**)(uint64_t *, char *, uint64_t))(v88 + 32))(v104, v87, v83);
    sub_2289605CC(&v148, (uint64_t)&v151);
    uint64_t v105 = v137;
    uint64_t v106 = v141;
    uint64_t v107 = swift_getAssociatedConformanceWitness();
    uint64_t v108 = v129;
    uint64_t v109 = v134;
    LibraryAssetInfo.enriched(with:)((uint64_t)&v151, v79, v107, v129);
    uint64_t v146 = v79;
    uint64_t v147 = v107;
    uint64_t v110 = sub_22896EC88(v145);
    uint64_t v111 = v143;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v143 + 16))(v110, v108, v79);
    id v112 = v136;
    id v113 = v136;
    static ContentInfoUtilities.assetInfo(libraryAssetInfo:storeAsset:)((uint64_t)v145, v112, (uint64_t)&v148);

    sub_22896EABC((uint64_t)v145, &qword_268284300);
    uint64_t v114 = v138;
    long long v115 = v131;
    (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v131, v144, v106);
    if (!v149)
    {
      uint64_t v124 = v142;
      v142[3] = v106;
      v124[4] = v105;
      id v125 = sub_22896EC88(v124);
      (*(void (**)(uint64_t *, char *, uint64_t))(v114 + 32))(v125, v115, v106);

      uint64_t v126 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
      v126(v108, v79);
      sub_2289559D0((uint64_t)&v151);
      v126((uint64_t)v109, v79);
LABEL_37:
      uint64_t v121 = &v148;
      return sub_22896EABC((uint64_t)v121, &qword_268284210);
    }

    (*(void (**)(char *, uint64_t))(v114 + 8))(v115, v106);
    uint64_t v116 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
    v116(v108, v79);
    sub_2289559D0((uint64_t)&v151);
    v116((uint64_t)v109, v79);
    uint64_t v53 = &v148;
    return sub_2289605CC(v53, (uint64_t)v142);
  }
  uint64_t v58 = (void *)v57;
  id v59 = v54;
  uint64_t v60 = MAsset.enrichIfNeeded(with:)();

  uint64_t v62 = v142;
  uint64_t v61 = v143;
  if (!v60)
  {

    uint64_t v35 = v141;
    uint64_t v36 = v61;
    goto LABEL_17;
  }
  double v63 = static ContentInfoUtilities.assetInfo(storeAsset:)(v60, (uint64_t)&v151);
  uint64_t v64 = v138;
  uint64_t v65 = v132;
  uint64_t v66 = v141;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v138 + 16))(v132, v144, v141, v63);
  if (v152)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);

    return sub_2289605CC(&v151, (uint64_t)v62);
  }
  uint64_t v119 = v137;
  v62[3] = v66;
  void v62[4] = v119;
  uint64_t v120 = sub_22896EC88(v62);
  (*(void (**)(uint64_t *, char *, uint64_t))(v64 + 32))(v120, v65, v66);

LABEL_34:
  uint64_t v121 = &v151;
  return sub_22896EABC((uint64_t)v121, &qword_268284210);
}

uint64_t sub_22899D3C4@<X0>(uint64_t a1@<X8>)
{
  return sub_22899D648((uint64_t (*)(void))MAsset.width.getter, a1);
}

uint64_t sub_22899D3DC()
{
  return 16;
}

__n128 sub_22899D3E8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D3F8()
{
  return 16;
}

__n128 sub_22899D404(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D410@<X0>(uint64_t a1@<X8>)
{
  return sub_22899D648((uint64_t (*)(void))MAsset.height.getter, a1);
}

uint64_t sub_22899D428()
{
  return 16;
}

__n128 sub_22899D434(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_22899D440()
{
  return sel_artworkURL;
}

void sub_22899D44C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_22899D46C()
{
  return 16;
}

__n128 sub_22899D478(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D488()
{
  return 16;
}

__n128 sub_22899D494(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D4A4()
{
  return 16;
}

__n128 sub_22899D4B0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D4BC@<X0>(uint64_t a1@<X8>)
{
  return sub_22899D648(MAsset.duration.getter, a1);
}

uint64_t sub_22899D4D4()
{
  return 16;
}

__n128 sub_22899D4E0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_22899D4EC()
{
  return sel_editionKind;
}

void sub_22899D4F8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_22899D518()
{
  return 16;
}

__n128 sub_22899D524(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_22899D530()
{
  return sel_expectedReleaseDate;
}

uint64_t sub_22899D53C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22899B518(a1, (SEL *)&selRef_expectedReleaseDate, a2);
}

uint64_t sub_22899D55C()
{
  return 16;
}

__n128 sub_22899D568(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D578()
{
  return 16;
}

__n128 sub_22899D584(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D594()
{
  return 16;
}

__n128 sub_22899D5A0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

id sub_22899D5AC@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_isExplicit);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_22899D5E0()
{
  return 16;
}

__n128 sub_22899D5EC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D5FC()
{
  return 16;
}

__n128 sub_22899D608(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D618()
{
  return 16;
}

__n128 sub_22899D624(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D630@<X0>(uint64_t a1@<X8>)
{
  return sub_22899D648(MAsset.price.getter, a1);
}

uint64_t sub_22899D648@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_22899D680()
{
  return 16;
}

__n128 sub_22899D68C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D69C()
{
  return 16;
}

__n128 sub_22899D6A8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D6B8()
{
  return 16;
}

__n128 sub_22899D6C4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_22899D6D0()
{
  return sel_isPreorder;
}

id sub_22899D6DC@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_isPreorder);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_22899D710()
{
  return 16;
}

__n128 sub_22899D71C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D72C()
{
  return 16;
}

__n128 sub_22899D738(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D748()
{
  return 16;
}

__n128 sub_22899D754(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D764()
{
  return 16;
}

__n128 sub_22899D770(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D780()
{
  return 16;
}

__n128 sub_22899D78C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D798@<X0>(uint64_t *a1@<X8>)
{
  return sub_22899D7B0(MAsset.publisherName.getter, a1);
}

uint64_t sub_22899D7B0@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_22899D7E0()
{
  return 16;
}

__n128 sub_22899D7EC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_22899D7F8()
{
  return sel_priceFormatted;
}

void sub_22899D804(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_22899D824()
{
  return 16;
}

__n128 sub_22899D830(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D840()
{
  return 16;
}

__n128 sub_22899D84C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_22899D858()
{
  return sel_supportsUnifiedProductPage;
}

id sub_22899D864@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_supportsUnifiedProductPage);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_22899D898()
{
  return 16;
}

__n128 sub_22899D8A4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_22899D8B0()
{
  return sel_seriesName;
}

void sub_22899D8BC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_22899D8DC()
{
  return 16;
}

__n128 sub_22899D8E8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D8FC()
{
  return 16;
}

__n128 sub_22899D908(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D914@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  sub_22895598C(a1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 64))(v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_22899D96C()
{
  return 16;
}

__n128 sub_22899D978(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_22899D984()
{
  return sel_sequenceDisplayLabel;
}

void sub_22899D990(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_22899D9B0()
{
  return 16;
}

__n128 sub_22899D9BC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22899D9CC()
{
  return 16;
}

__n128 sub_22899D9D8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_22899D9E4()
{
  return sel_standardDescription;
}

void sub_22899D9F0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_22899DA10()
{
  return 16;
}

__n128 sub_22899DA1C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_22899DA2C()
{
  unint64_t result = qword_2682848F0;
  if (!qword_2682848F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682848F0);
  }
  return result;
}

unint64_t sub_22899DA84()
{
  unint64_t result = qword_2682848F8;
  if (!qword_2682848F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682848F8);
  }
  return result;
}

unint64_t sub_22899DADC()
{
  unint64_t result = qword_268284900;
  if (!qword_268284900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284900);
  }
  return result;
}

unint64_t sub_22899DB34()
{
  unint64_t result = qword_268284908;
  if (!qword_268284908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284908);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ContentKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22899DC54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentKind()
{
  return &type metadata for ContentKind;
}

unsigned char *storeEnumTagSinglePayload for AssetType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22899DD58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetType()
{
  return &type metadata for AssetType;
}

unsigned char *storeEnumTagSinglePayload for SeriesOrdering(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22899DE5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SeriesOrdering()
{
  return &type metadata for SeriesOrdering;
}

unsigned char *storeEnumTagSinglePayload for FinishedDateKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22899DF60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FinishedDateKind()
{
  return &type metadata for FinishedDateKind;
}

uint64_t dispatch thunk of AssetInfo.assetType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AssetInfo.contentKind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_22899DFD0()
{
  uint64_t v0 = sub_2289DE930();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  int v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2289DE990();
  sub_228961850(v4, qword_26AECF7E8);
  sub_228952BF4(v4, (uint64_t)qword_26AECF7E8);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F07740], v0);
  sub_2289DE940();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t static Calendar.gregorian.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26AECF808 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_2289DE990();
  uint64_t v3 = sub_228952BF4(v2, (uint64_t)qword_26AECF7E8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_22899E19C()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_2289DECA0();
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = v1;
    do
    {
      uint64_t v6 = sub_2289DECA0();
      if (!v7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v2 == v6 && v3 == v7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v4 = sub_2289DF480();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v4 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      uint64_t v2 = sub_2289DECA0();
      uint64_t v3 = v5;
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  sub_2289DECA0();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  BOOL v10 = v9 == 0;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t _s14BookFoundation23LocaleLanguageDirectionV5isRTLSbvgZ_0()
{
  void v27[2] = *(id *)MEMORY[0x263EF8340];
  id v0 = objc_msgSend(self, sel_defaultBag);
  id v1 = objc_msgSend(v0, sel_languageTag);
  if ((objc_msgSend(v0, sel_isExpired) & 1) == 0 && objc_msgSend(v1, sel_isLoaded))
  {
    v27[0] = 0;
    id v2 = objc_msgSend(v1, sel_valueWithError_, v27);
    id v3 = v27[0];
    if (!v2)
    {
      id v16 = v27[0];
      uint64_t v17 = (void *)sub_2289DE7E0();

      swift_willThrow();
      if (qword_268283E60 != -1) {
        swift_once();
      }
      uint64_t v18 = sub_2289DEA10();
      sub_228952BF4(v18, (uint64_t)qword_268284158);
      id v19 = v17;
      id v20 = v17;
      uint64_t v21 = sub_2289DE9F0();
      os_log_type_t v22 = sub_2289DF0A0();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 138412290;
        id v25 = v17;
        uint64_t v26 = (void *)_swift_stdlib_bridgeErrorToNSError();
        v27[0] = v26;
        sub_2289DF150();
        *uint64_t v24 = v26;

        _os_log_impl(&dword_22894E000, v21, v22, "Failed to retreive locale: %@", v23, 0xCu);
        sub_228952BB0(&qword_2682842F8);
        swift_arrayDestroy();
        MEMORY[0x22A6A29E0](v24, -1, -1);
        MEMORY[0x22A6A29E0](v23, -1, -1);
      }
      else
      {
      }
      return 0;
    }
    char v4 = v2;
    sub_2289DEBC0();
    id v5 = v3;
  }
  uint64_t v6 = sub_2289DEBF0();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t v9 = 0;
  while (1)
  {
    BOOL v10 = *(void **)((char *)&unk_26DD0A838 + v9 + 32);
    uint64_t v11 = *(void **)((char *)&unk_26DD0A838 + v9 + 40);
    if ((void *)v6 == v10 && v8 == v11) {
      break;
    }
    if (sub_2289DF480()) {
      break;
    }
    v27[0] = v10;
    v27[1] = v11;
    swift_bridgeObjectRetain_n();
    sub_2289DEC90();
    char v13 = sub_22899E19C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13) {
      break;
    }
    v9 += 16;
    if (v9 == 192)
    {
      uint64_t v14 = 0;
      goto LABEL_15;
    }
  }
  uint64_t v14 = 1;
LABEL_15:

  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  return v14;
}

ValueMetadata *type metadata accessor for LocaleLanguageDirection()
{
  return &type metadata for LocaleLanguageDirection;
}

uint64_t sub_22899E6D4()
{
  uint64_t v1 = type metadata accessor for LibraryAudiobookInfo();
  MEMORY[0x270FA5388](v1 - 8);
  id v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_228952BB0(&qword_268284220);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (void **)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_22898A6C0(v0, (uint64_t)v6, &qword_268284220);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v8 = *(void **)((char *)v6 + *(int *)(sub_228952BB0(&qword_2682846A8) + 48));
    sub_2289A3910((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LibraryAudiobookInfo);
LABEL_6:
    BOOL v10 = v8;
    swift_getAtKeyPath();

    return v11;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v8 = *v6;
    goto LABEL_6;
  }
  sub_2289A3970((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for LibraryAudiobookInfo);
  swift_getAtKeyPath();
  sub_2289A3910((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for LibraryAudiobookInfo);
  return v11;
}

void sub_22899E880()
{
  uint64_t v1 = type metadata accessor for LibraryBookInfo();
  MEMORY[0x270FA5388](v1 - 8);
  id v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_228952BB0(&qword_268284230);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (void **)((char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_22898A6C0(v0, (uint64_t)v6, &qword_268284230);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_2289A3970((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for LibraryBookInfo);
      swift_getAtKeyPath();
      sub_2289A3910((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for LibraryBookInfo);
      return;
    }
    uint64_t v8 = *v6;
  }
  else
  {
    uint64_t v8 = *(void **)((char *)v6 + *(int *)(sub_228952BB0(&qword_2682846B0) + 48));
    sub_2289A3910((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LibraryBookInfo);
  }
  v9[1] = v8;
  swift_getAtKeyPath();
}

void sub_22899EA2C()
{
  uint64_t v1 = type metadata accessor for LibraryBookSeriesInfo();
  MEMORY[0x270FA5388](v1 - 8);
  id v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_228952BB0(&qword_2682846F8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (void **)((char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_22898A6C0(v0, (uint64_t)v6, &qword_2682846F8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_2289A3970((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for LibraryBookSeriesInfo);
      swift_getAtKeyPath();
      sub_2289A3910((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for LibraryBookSeriesInfo);
      return;
    }
    uint64_t v8 = *v6;
  }
  else
  {
    uint64_t v8 = *(void **)((char *)v6 + *(int *)(sub_228952BB0(&qword_2682846F0) + 48));
    sub_2289A3910((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LibraryBookSeriesInfo);
  }
  v9[1] = v8;
  swift_getAtKeyPath();
}

uint64_t AudiobookInfo.init(dataSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AudiobookInfo();
  *(unsigned char *)(a2 + *(int *)(v4 + 20)) = 0;
  *(unsigned char *)(a2 + *(int *)(v4 + 24)) = 1;

  return sub_22899EC7C(a1, a2);
}

uint64_t type metadata accessor for AudiobookInfo()
{
  uint64_t result = qword_268284928;
  if (!qword_268284928) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_22899EC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284220);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AudiobookInfo.dataSource.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22898A6C0(v1, a1, &qword_268284220);
}

uint64_t AudiobookInfo.assetType.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AudiobookInfo() + 20));
}

uint64_t AudiobookInfo.assetType.setter(char a1)
{
  uint64_t result = type metadata accessor for AudiobookInfo();
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*AudiobookInfo.assetType.modify())()
{
  return nullsub_1;
}

uint64_t AudiobookInfo.contentKind.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for AudiobookInfo();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t AudiobookInfo.contentKind.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for AudiobookInfo();
  *(unsigned char *)(v1 + *(int *)(result + 24)) = v2;
  return result;
}

uint64_t (*AudiobookInfo.contentKind.modify())()
{
  return nullsub_1;
}

uint64_t sub_22899EE54@<X0>(uint64_t a1@<X8>)
{
  return sub_22898A6C0(v1, a1, &qword_268284220);
}

uint64_t sub_22899EE7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(int *)(a2 + 24);
  *(unsigned char *)(a3 + *(int *)(a2 + 20)) = 0;
  *(unsigned char *)(a3 + v3) = 1;
  return sub_22899EC7C(a1, a3);
}

uint64_t AudiobookInfo.duration.getter()
{
  uint64_t v1 = sub_228952BB0(&qword_268284220);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (void **)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_22898A6C0(v0, (uint64_t)v3, &qword_268284220);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v6 = *(void **)((char *)v3 + *(int *)(sub_228952BB0(&qword_2682846A8) + 48));
    sub_2289A3910((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for LibraryAudiobookInfo);
LABEL_6:
    uint64_t v5 = MAsset.duration.getter();

    return v5;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v6 = *v3;
    goto LABEL_6;
  }
  sub_22899EFA0((uint64_t)v3);
  return 0;
}

uint64_t sub_22899EFA0(uint64_t a1)
{
  uint64_t v2 = sub_228952BB0(&qword_268284220);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AudiobookInfo.isSG.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  char v0 = sub_22899E6D4();
  swift_release();
  swift_release();
  return v0 & 1;
}

char *sub_22899F068()
{
  return sel_isSG;
}

id sub_22899F074@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_isSG);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t AudiobookInfo.narrator.getter()
{
  uint64_t v1 = sub_228952BB0(&qword_268284220);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (void **)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_22898A6C0(v0, (uint64_t)v3, &qword_268284220);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v6 = *(void **)((char *)v3 + *(int *)(sub_228952BB0(&qword_2682846A8) + 48));
    sub_2289A3910((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for LibraryAudiobookInfo);
LABEL_6:
    uint64_t v5 = MAudiobook.narrator.getter();

    return v5;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v6 = *v3;
    goto LABEL_6;
  }
  sub_22899EFA0((uint64_t)v3);
  return 0;
}

uint64_t sub_22899F1B0()
{
  return sub_22899F348(&qword_2682841C8, (void (*)(uint64_t))type metadata accessor for LibraryAudiobookInfo);
}

uint64_t sub_22899F1F8(uint64_t a1)
{
  uint64_t result = sub_22899F348(&qword_268284910, (void (*)(uint64_t))type metadata accessor for AudiobookInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_22899F250()
{
  return sub_22899F348(&qword_2682841C0, (void (*)(uint64_t))type metadata accessor for LibraryAudiobookInfo);
}

uint64_t sub_22899F298(uint64_t a1)
{
  uint64_t result = sub_22899F348(&qword_268284918, (void (*)(uint64_t))type metadata accessor for AudiobookInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_22899F2F0(uint64_t a1)
{
  uint64_t result = sub_22899F348(&qword_268284920, (void (*)(uint64_t))type metadata accessor for AudiobookInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_22899F348(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for AudiobookInfo(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *(void *)a1 = *a2;
    a1 = &v18[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    sub_228952BB0(&qword_268284220);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      id v19 = *a2;
      *(void *)a1 = *a2;
      id v20 = v19;
    }
    else
    {
      uint64_t v167 = v6;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v8 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v8;
        uint64_t v9 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v9;
        BOOL v10 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v10;
        unsigned __int8 v11 = a2[7];
        *((void *)a1 + 6) = a2[6];
        *((void *)a1 + 7) = v11;
        uint64_t v12 = a2[9];
        *((void *)a1 + 8) = a2[8];
        *((void *)a1 + 9) = v12;
        *((void *)a1 + 10) = a2[10];
        char v13 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        uint64_t v14 = v13[10];
        __dst = &a1[v14];
        unint64_t v158 = (char *)a2 + v14;
        uint64_t v15 = sub_2289DE880();
        uint64_t v16 = *(void *)(v15 - 8);
        uint64_t v156 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v156(v158, 1, v15))
        {
          uint64_t v17 = sub_228952BB0(&qword_2682841E0);
          memcpy(__dst, v158, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v158, v15);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
        }
        uint64_t v31 = v13[11];
        long long v32 = &a1[v31];
        uint64_t v33 = (char **)((char *)a2 + v31);
        uint64_t v34 = v33[1];
        *(void *)long long v32 = *v33;
        *((void *)v32 + 1) = v34;
        uint64_t v35 = v13[12];
        uint64_t v36 = &a1[v35];
        uint64_t v37 = (char *)a2 + v35;
        v36[8] = v37[8];
        *(void *)uint64_t v36 = *(void *)v37;
        uint64_t v38 = v13[13];
        uint64_t v39 = &a1[v38];
        uint64_t v40 = (char **)((char *)a2 + v38);
        uint64_t v41 = v40[1];
        *(void *)uint64_t v39 = *v40;
        *((void *)v39 + 1) = v41;
        uint64_t v42 = v13[14];
        uint64_t v163 = &a1[v42];
        uint64_t v43 = (char *)a2 + v42;
        uint64_t v44 = sub_2289DE910();
        uint64_t v45 = *(void *)(v44 - 8);
        uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v161 = v45;
        if (v46(v43, 1, v44))
        {
          uint64_t v47 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v163, v43, *(void *)(*(void *)(v47 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v163, v43, v44);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v163, 0, 1, v44);
        }
        uint64_t v48 = v13[15];
        uint64_t v49 = &a1[v48];
        uint64_t v50 = (char **)((char *)a2 + v48);
        uint64_t v51 = v50[1];
        *(void *)uint64_t v49 = *v50;
        *((void *)v49 + 1) = v51;
        uint64_t v52 = v13[16];
        uint64_t v53 = &a1[v52];
        BOOL v54 = (char **)((char *)a2 + v52);
        uint64_t v55 = v54[1];
        *(void *)uint64_t v53 = *v54;
        *((void *)v53 + 1) = v55;
        a1[v13[17]] = *((unsigned char *)a2 + v13[17]);
        *(void *)&a1[v13[18]] = *(char **)((char *)a2 + v13[18]);
        a1[v13[19]] = *((unsigned char *)a2 + v13[19]);
        a1[v13[20]] = *((unsigned char *)a2 + v13[20]);
        a1[v13[21]] = *((unsigned char *)a2 + v13[21]);
        a1[v13[22]] = *((unsigned char *)a2 + v13[22]);
        a1[v13[23]] = *((unsigned char *)a2 + v13[23]);
        a1[v13[24]] = *((unsigned char *)a2 + v13[24]);
        a1[v13[25]] = *((unsigned char *)a2 + v13[25]);
        a1[v13[26]] = *((unsigned char *)a2 + v13[26]);
        a1[v13[27]] = *((unsigned char *)a2 + v13[27]);
        a1[v13[28]] = *((unsigned char *)a2 + v13[28]);
        a1[v13[29]] = *((unsigned char *)a2 + v13[29]);
        uint64_t v56 = v13[30];
        uint64_t v57 = &a1[v56];
        uint64_t v58 = (char **)((char *)a2 + v56);
        uint64_t v59 = v58[1];
        *(void *)uint64_t v57 = *v58;
        *((void *)v57 + 1) = v59;
        uint64_t v60 = v13[31];
        uint64_t v61 = &a1[v60];
        uint64_t v62 = (char *)a2 + v60;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v46(v62, 1, v44))
        {
          uint64_t v63 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v61, v62, v44);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v161 + 56))(v61, 0, 1, v44);
        }
        uint64_t v64 = v13[32];
        uint64_t v65 = &a1[v64];
        uint64_t v66 = (char *)a2 + v64;
        *(void *)uint64_t v65 = *(void *)v66;
        v65[8] = v66[8];
        *(void *)&a1[v13[33]] = *(char **)((char *)a2 + v13[33]);
        uint64_t v67 = v13[34];
        int v68 = &a1[v67];
        uint64_t v69 = (char *)a2 + v67;
        if (v46((char *)a2 + v67, 1, v44))
        {
          uint64_t v70 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v68, v69, *(void *)(*(void *)(v70 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v68, v69, v44);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v161 + 56))(v68, 0, 1, v44);
        }
        uint64_t v71 = v13[35];
        uint64_t v72 = &a1[v71];
        uint64_t v73 = (char **)((char *)a2 + v71);
        uint64_t v74 = v73[1];
        *(void *)uint64_t v72 = *v73;
        *((void *)v72 + 1) = v74;
        uint64_t v75 = v13[36];
        uint64_t v76 = &a1[v75];
        uint64_t v77 = (char *)a2 + v75;
        *(void *)(v76 + 13) = *(void *)(v77 + 13);
        *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
        uint64_t v78 = v13[37];
        uint64_t v79 = &a1[v78];
        uint64_t v80 = (char *)a2 + v78;
        v79[8] = v80[8];
        *(void *)uint64_t v79 = *(void *)v80;
        uint64_t v81 = v13[38];
        uint64_t v82 = &a1[v81];
        uint64_t v83 = (char *)a2 + v81;
        v82[4] = v83[4];
        *(_DWORD *)uint64_t v82 = *(_DWORD *)v83;
        uint64_t v84 = (int *)type metadata accessor for LibraryAudiobookInfo();
        uint64_t v85 = v84[5];
        uint64_t v86 = &a1[v85];
        uint64_t v87 = (char *)a2 + v85;
        uint64_t v88 = *(uint64_t *)((char *)a2 + v85 + 24);
        swift_bridgeObjectRetain();
        if (v88)
        {
          uint64_t v89 = *((void *)v87 + 4);
          *((void *)v86 + 3) = v88;
          *((void *)v86 + 4) = v89;
          (**(void (***)(char *, char *, uint64_t))(v88 - 8))(v86, v87, v88);
        }
        else
        {
          long long v90 = *((_OWORD *)v87 + 1);
          *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
          *((_OWORD *)v86 + 1) = v90;
          *((void *)v86 + 4) = *((void *)v87 + 4);
        }
        uint64_t v6 = v167;
        a1[v84[6]] = *((unsigned char *)a2 + v84[6]);
        *(void *)&a1[v84[7]] = *(char **)((char *)a2 + v84[7]);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v21 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v21;
        os_log_type_t v22 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v22;
        uint64_t v23 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v23;
        uint64_t v24 = a2[7];
        *((void *)a1 + 6) = a2[6];
        *((void *)a1 + 7) = v24;
        id v25 = a2[9];
        *((void *)a1 + 8) = a2[8];
        *((void *)a1 + 9) = v25;
        *((void *)a1 + 10) = a2[10];
        uint64_t v26 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        uint64_t v27 = v26[10];
        uint64_t v159 = &a1[v27];
        uint64_t v28 = (char *)a2 + v27;
        uint64_t v29 = sub_2289DE880();
        uint64_t v157 = *(void *)(v29 - 8);
        uint64_t v160 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v157 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v160(v28, 1, v29))
        {
          uint64_t v30 = sub_228952BB0(&qword_2682841E0);
          memcpy(v159, v28, *(void *)(*(void *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v157 + 16))(v159, v28, v29);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v157 + 56))(v159, 0, 1, v29);
        }
        uint64_t v91 = v26[11];
        uint64_t v92 = &a1[v91];
        uint64_t v93 = (char **)((char *)a2 + v91);
        uint64_t v94 = v93[1];
        *(void *)uint64_t v92 = *v93;
        *((void *)v92 + 1) = v94;
        uint64_t v95 = v26[12];
        uint64_t v96 = &a1[v95];
        uint64_t v97 = (char *)a2 + v95;
        v96[8] = v97[8];
        *(void *)uint64_t v96 = *(void *)v97;
        uint64_t v98 = v26[13];
        uint64_t v99 = &a1[v98];
        uint64_t v100 = (char **)((char *)a2 + v98);
        uint64_t v101 = v100[1];
        *(void *)uint64_t v99 = *v100;
        *((void *)v99 + 1) = v101;
        uint64_t v102 = v26[14];
        uint64_t v164 = &a1[v102];
        uint64_t v103 = (char *)a2 + v102;
        uint64_t v104 = sub_2289DE910();
        uint64_t v105 = *(void *)(v104 - 8);
        uint64_t v106 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dsta = v106;
        uint64_t v162 = v105;
        if (v106(v103, 1, v104))
        {
          uint64_t v107 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v164, v103, *(void *)(*(void *)(v107 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v164, v103, v104);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v105 + 56))(v164, 0, 1, v104);
        }
        uint64_t v108 = v26[15];
        uint64_t v109 = &a1[v108];
        uint64_t v110 = (char **)((char *)a2 + v108);
        uint64_t v111 = v110[1];
        *(void *)uint64_t v109 = *v110;
        *((void *)v109 + 1) = v111;
        uint64_t v112 = v26[16];
        id v113 = &a1[v112];
        uint64_t v114 = (char **)((char *)a2 + v112);
        uint64_t v115 = v114[1];
        *(void *)id v113 = *v114;
        *((void *)v113 + 1) = v115;
        a1[v26[17]] = *((unsigned char *)a2 + v26[17]);
        *(void *)&a1[v26[18]] = *(char **)((char *)a2 + v26[18]);
        a1[v26[19]] = *((unsigned char *)a2 + v26[19]);
        a1[v26[20]] = *((unsigned char *)a2 + v26[20]);
        a1[v26[21]] = *((unsigned char *)a2 + v26[21]);
        a1[v26[22]] = *((unsigned char *)a2 + v26[22]);
        a1[v26[23]] = *((unsigned char *)a2 + v26[23]);
        a1[v26[24]] = *((unsigned char *)a2 + v26[24]);
        a1[v26[25]] = *((unsigned char *)a2 + v26[25]);
        a1[v26[26]] = *((unsigned char *)a2 + v26[26]);
        a1[v26[27]] = *((unsigned char *)a2 + v26[27]);
        a1[v26[28]] = *((unsigned char *)a2 + v26[28]);
        a1[v26[29]] = *((unsigned char *)a2 + v26[29]);
        uint64_t v116 = v26[30];
        uint64_t v117 = &a1[v116];
        uint64_t v118 = (char **)((char *)a2 + v116);
        uint64_t v119 = v118[1];
        *(void *)uint64_t v117 = *v118;
        *((void *)v117 + 1) = v119;
        uint64_t v120 = v26[31];
        uint64_t v121 = &a1[v120];
        uint64_t v122 = (char *)a2 + v120;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__dsta(v122, 1, v104))
        {
          uint64_t v123 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v121, v122, *(void *)(*(void *)(v123 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v121, v122, v104);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v162 + 56))(v121, 0, 1, v104);
        }
        uint64_t v124 = v26[32];
        id v125 = &a1[v124];
        uint64_t v126 = (char *)a2 + v124;
        *(void *)id v125 = *(void *)v126;
        v125[8] = v126[8];
        *(void *)&a1[v26[33]] = *(char **)((char *)a2 + v26[33]);
        uint64_t v127 = v26[34];
        uint64_t v128 = &a1[v127];
        uint64_t v129 = (char *)a2 + v127;
        if (__dsta((char *)a2 + v127, 1, v104))
        {
          uint64_t v130 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v128, v129, *(void *)(*(void *)(v130 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v128, v129, v104);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v162 + 56))(v128, 0, 1, v104);
        }
        uint64_t v131 = v26[35];
        uint64_t v132 = &a1[v131];
        uint64_t v133 = (char **)((char *)a2 + v131);
        uint64_t v134 = v133[1];
        *(void *)uint64_t v132 = *v133;
        *((void *)v132 + 1) = v134;
        uint64_t v135 = v26[36];
        id v136 = &a1[v135];
        uint64_t v137 = (char *)a2 + v135;
        *(void *)(v136 + 13) = *(void *)(v137 + 13);
        *(_OWORD *)id v136 = *(_OWORD *)v137;
        uint64_t v138 = v26[37];
        uint64_t v139 = &a1[v138];
        uint64_t v140 = (char *)a2 + v138;
        v139[8] = v140[8];
        *(void *)uint64_t v139 = *(void *)v140;
        uint64_t v141 = v26[38];
        uint64_t v142 = &a1[v141];
        uint64_t v143 = (char *)a2 + v141;
        v142[4] = v143[4];
        *(_DWORD *)uint64_t v142 = *(_DWORD *)v143;
        uint64_t v144 = (int *)type metadata accessor for LibraryAudiobookInfo();
        uint64_t v145 = v144[5];
        uint64_t v146 = &a1[v145];
        uint64_t v147 = (char *)a2 + v145;
        uint64_t v148 = *(uint64_t *)((char *)a2 + v145 + 24);
        swift_bridgeObjectRetain();
        if (v148)
        {
          uint64_t v149 = *((void *)v147 + 4);
          *((void *)v146 + 3) = v148;
          *((void *)v146 + 4) = v149;
          (**(void (***)(char *, char *, uint64_t))(v148 - 8))(v146, v147, v148);
        }
        else
        {
          long long v150 = *((_OWORD *)v147 + 1);
          *(_OWORD *)uint64_t v146 = *(_OWORD *)v147;
          *((_OWORD *)v146 + 1) = v150;
          *((void *)v146 + 4) = *((void *)v147 + 4);
        }
        uint64_t v6 = v167;
        a1[v144[6]] = *((unsigned char *)a2 + v144[6]);
        *(void *)&a1[v144[7]] = *(char **)((char *)a2 + v144[7]);
        swift_bridgeObjectRetain();
        uint64_t v151 = *(int *)(sub_228952BB0(&qword_2682846A8) + 48);
        uint64_t v152 = *(char **)((char *)a2 + v151);
        *(void *)&a1[v151] = v152;
        id v153 = v152;
      }
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v154 = *(int *)(v6 + 24);
    a1[*(int *)(v6 + 20)] = *((unsigned char *)a2 + *(int *)(v6 + 20));
    a1[v154] = *((unsigned char *)a2 + v154);
  }
  return a1;
}

void destroy for AudiobookInfo(void **a1)
{
  sub_228952BB0(&qword_268284220);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v14 = *a1;
LABEL_16:

    return;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    uint64_t v4 = (char *)a1 + v3[10];
    uint64_t v5 = sub_2289DE880();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = (char *)a1 + v3[14];
    uint64_t v8 = sub_2289DE910();
    uint64_t v9 = *(void *)(v8 - 8);
    BOOL v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    if (!v10(v7, 1, v8)) {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned __int8 v11 = (char *)a1 + v3[31];
    if (!v10(v11, 1, v8)) {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    uint64_t v12 = (char *)a1 + v3[34];
    if (!v10(v12, 1, v8)) {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = (uint64_t)a1 + *(int *)(type metadata accessor for LibraryAudiobookInfo() + 20);
    if (*(void *)(v13 + 24)) {
      sub_2289559D0(v13);
    }
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void **)((char *)a1 + *(int *)(sub_228952BB0(&qword_2682846A8) + 48));
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v16 = (char *)a1 + v15[10];
  uint64_t v17 = sub_2289DE880();
  uint64_t v18 = *(void *)(v17 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v19 = (char *)a1 + v15[14];
  uint64_t v20 = sub_2289DE910();
  uint64_t v21 = *(void *)(v20 - 8);
  os_log_type_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (!v22(v19, 1, v20)) {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = (char *)a1 + v15[31];
  if (!v22(v23, 1, v20)) {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  }
  uint64_t v24 = (char *)a1 + v15[34];
  if (!v22(v24, 1, v20)) {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  }
  swift_bridgeObjectRelease();
  uint64_t v25 = (uint64_t)a1 + *(int *)(type metadata accessor for LibraryAudiobookInfo() + 20);
  if (*(void *)(v25 + 24)) {
    sub_2289559D0(v25);
  }

  swift_bridgeObjectRelease();
}

void *initializeWithCopy for AudiobookInfo(void *a1, uint64_t a2, uint64_t a3)
{
  sub_228952BB0(&qword_268284220);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v17 = *(void **)a2;
    *a1 = *(void *)a2;
    id v18 = v17;
  }
  else
  {
    uint64_t v165 = a3;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *(void *)(a2 + 8);
      *a1 = *(void *)a2;
      a1[1] = v7;
      uint64_t v8 = *(void *)(a2 + 24);
      a1[2] = *(void *)(a2 + 16);
      a1[3] = v8;
      uint64_t v9 = *(void *)(a2 + 40);
      a1[4] = *(void *)(a2 + 32);
      a1[5] = v9;
      uint64_t v10 = *(void *)(a2 + 56);
      a1[6] = *(void *)(a2 + 48);
      a1[7] = v10;
      uint64_t v11 = *(void *)(a2 + 72);
      a1[8] = *(void *)(a2 + 64);
      a1[9] = v11;
      a1[10] = *(void *)(a2 + 80);
      uint64_t v12 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      uint64_t v13 = v12[10];
      __dst = (char *)a1 + v13;
      unint64_t v155 = (void *)(a2 + v13);
      uint64_t v14 = sub_2289DE880();
      uint64_t v15 = *(void *)(v14 - 8);
      id v153 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v153(v155, 1, v14))
      {
        uint64_t v16 = sub_228952BB0(&qword_2682841E0);
        memcpy(__dst, v155, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(v15 + 16))(__dst, v155, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
      }
      uint64_t v28 = v12[11];
      uint64_t v29 = (void *)((char *)a1 + v28);
      uint64_t v30 = (void *)(a2 + v28);
      uint64_t v31 = v30[1];
      *uint64_t v29 = *v30;
      v29[1] = v31;
      uint64_t v32 = v12[12];
      uint64_t v33 = (char *)a1 + v32;
      uint64_t v34 = a2 + v32;
      v33[8] = *(unsigned char *)(v34 + 8);
      *(void *)uint64_t v33 = *(void *)v34;
      uint64_t v35 = v12[13];
      uint64_t v36 = (void *)((char *)a1 + v35);
      uint64_t v37 = (void *)(a2 + v35);
      uint64_t v38 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v38;
      uint64_t v39 = v12[14];
      uint64_t v161 = (char *)a1 + v39;
      uint64_t v40 = (const void *)(a2 + v39);
      uint64_t v41 = sub_2289DE910();
      uint64_t v42 = *(void *)(v41 - 8);
      uint64_t v43 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v158 = v42;
      if (v43(v40, 1, v41))
      {
        uint64_t v44 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v161, v40, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v42 + 16))(v161, v40, v41);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v161, 0, 1, v41);
      }
      uint64_t v45 = v12[15];
      uint64_t v46 = (void *)((char *)a1 + v45);
      uint64_t v47 = (void *)(a2 + v45);
      uint64_t v48 = v47[1];
      *uint64_t v46 = *v47;
      v46[1] = v48;
      uint64_t v49 = v12[16];
      uint64_t v50 = (void *)((char *)a1 + v49);
      uint64_t v51 = (void *)(a2 + v49);
      uint64_t v52 = v51[1];
      void *v50 = *v51;
      v50[1] = v52;
      *((unsigned char *)a1 + v12[17]) = *(unsigned char *)(a2 + v12[17]);
      *(void *)((char *)a1 + v12[18]) = *(void *)(a2 + v12[18]);
      *((unsigned char *)a1 + v12[19]) = *(unsigned char *)(a2 + v12[19]);
      *((unsigned char *)a1 + v12[20]) = *(unsigned char *)(a2 + v12[20]);
      *((unsigned char *)a1 + v12[21]) = *(unsigned char *)(a2 + v12[21]);
      *((unsigned char *)a1 + v12[22]) = *(unsigned char *)(a2 + v12[22]);
      *((unsigned char *)a1 + v12[23]) = *(unsigned char *)(a2 + v12[23]);
      *((unsigned char *)a1 + v12[24]) = *(unsigned char *)(a2 + v12[24]);
      *((unsigned char *)a1 + v12[25]) = *(unsigned char *)(a2 + v12[25]);
      *((unsigned char *)a1 + v12[26]) = *(unsigned char *)(a2 + v12[26]);
      *((unsigned char *)a1 + v12[27]) = *(unsigned char *)(a2 + v12[27]);
      *((unsigned char *)a1 + v12[28]) = *(unsigned char *)(a2 + v12[28]);
      *((unsigned char *)a1 + v12[29]) = *(unsigned char *)(a2 + v12[29]);
      uint64_t v53 = v12[30];
      BOOL v54 = (void *)((char *)a1 + v53);
      uint64_t v55 = (void *)(a2 + v53);
      uint64_t v56 = v55[1];
      *BOOL v54 = *v55;
      v54[1] = v56;
      uint64_t v57 = v12[31];
      uint64_t v58 = (char *)a1 + v57;
      uint64_t v59 = (const void *)(a2 + v57);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v43(v59, 1, v41))
      {
        uint64_t v60 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v158 + 16))(v58, v59, v41);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(v58, 0, 1, v41);
      }
      uint64_t v61 = v12[32];
      uint64_t v62 = (char *)a1 + v61;
      uint64_t v63 = a2 + v61;
      *(void *)uint64_t v62 = *(void *)v63;
      v62[8] = *(unsigned char *)(v63 + 8);
      *(void *)((char *)a1 + v12[33]) = *(void *)(a2 + v12[33]);
      uint64_t v64 = v12[34];
      uint64_t v65 = (char *)a1 + v64;
      uint64_t v66 = (const void *)(a2 + v64);
      if (v43((const void *)(a2 + v64), 1, v41))
      {
        uint64_t v67 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v158 + 16))(v65, v66, v41);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(v65, 0, 1, v41);
      }
      uint64_t v68 = v12[35];
      uint64_t v69 = (void *)((char *)a1 + v68);
      uint64_t v70 = (void *)(a2 + v68);
      uint64_t v71 = v70[1];
      *uint64_t v69 = *v70;
      v69[1] = v71;
      uint64_t v72 = v12[36];
      uint64_t v73 = (char *)a1 + v72;
      uint64_t v74 = a2 + v72;
      *(void *)(v73 + 13) = *(void *)(v74 + 13);
      *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
      uint64_t v75 = v12[37];
      uint64_t v76 = (char *)a1 + v75;
      uint64_t v77 = a2 + v75;
      v76[8] = *(unsigned char *)(v77 + 8);
      *(void *)uint64_t v76 = *(void *)v77;
      uint64_t v78 = v12[38];
      uint64_t v79 = (char *)a1 + v78;
      uint64_t v80 = a2 + v78;
      v79[4] = *(unsigned char *)(v80 + 4);
      *(_DWORD *)uint64_t v79 = *(_DWORD *)v80;
      uint64_t v81 = (int *)type metadata accessor for LibraryAudiobookInfo();
      uint64_t v82 = v81[5];
      uint64_t v83 = (char *)a1 + v82;
      uint64_t v84 = a2 + v82;
      uint64_t v85 = *(void *)(a2 + v82 + 24);
      swift_bridgeObjectRetain();
      if (v85)
      {
        uint64_t v86 = *(void *)(v84 + 32);
        *((void *)v83 + 3) = v85;
        *((void *)v83 + 4) = v86;
        (**(void (***)(char *, uint64_t, uint64_t))(v85 - 8))(v83, v84, v85);
      }
      else
      {
        long long v87 = *(_OWORD *)(v84 + 16);
        *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
        *((_OWORD *)v83 + 1) = v87;
        *((void *)v83 + 4) = *(void *)(v84 + 32);
      }
      a3 = v165;
      *((unsigned char *)a1 + v81[6]) = *(unsigned char *)(a2 + v81[6]);
      *(void *)((char *)a1 + v81[7]) = *(void *)(a2 + v81[7]);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v19 = *(void *)(a2 + 8);
      *a1 = *(void *)a2;
      a1[1] = v19;
      uint64_t v20 = *(void *)(a2 + 24);
      a1[2] = *(void *)(a2 + 16);
      a1[3] = v20;
      uint64_t v21 = *(void *)(a2 + 40);
      a1[4] = *(void *)(a2 + 32);
      a1[5] = v21;
      uint64_t v22 = *(void *)(a2 + 56);
      a1[6] = *(void *)(a2 + 48);
      a1[7] = v22;
      uint64_t v23 = *(void *)(a2 + 72);
      a1[8] = *(void *)(a2 + 64);
      a1[9] = v23;
      a1[10] = *(void *)(a2 + 80);
      uint64_t v24 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      uint64_t v25 = v24[10];
      uint64_t v156 = (char *)a1 + v25;
      uint64_t v157 = (const void *)(a2 + v25);
      uint64_t v26 = sub_2289DE880();
      uint64_t v154 = *(void *)(v26 - 8);
      uint64_t v160 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v154 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v160(v157, 1, v26))
      {
        uint64_t v27 = sub_228952BB0(&qword_2682841E0);
        memcpy(v156, v157, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v154 + 16))(v156, v157, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v154 + 56))(v156, 0, 1, v26);
      }
      uint64_t v88 = v24[11];
      uint64_t v89 = (void *)((char *)a1 + v88);
      long long v90 = (void *)(a2 + v88);
      uint64_t v91 = v90[1];
      *uint64_t v89 = *v90;
      v89[1] = v91;
      uint64_t v92 = v24[12];
      uint64_t v93 = (char *)a1 + v92;
      uint64_t v94 = a2 + v92;
      v93[8] = *(unsigned char *)(v94 + 8);
      *(void *)uint64_t v93 = *(void *)v94;
      uint64_t v95 = v24[13];
      uint64_t v96 = (void *)((char *)a1 + v95);
      uint64_t v97 = (void *)(a2 + v95);
      uint64_t v98 = v97[1];
      *uint64_t v96 = *v97;
      v96[1] = v98;
      uint64_t v99 = v24[14];
      uint64_t v162 = (char *)a1 + v99;
      uint64_t v100 = (const void *)(a2 + v99);
      uint64_t v101 = sub_2289DE910();
      uint64_t v102 = *(void *)(v101 - 8);
      uint64_t v103 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v102 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __dsta = v103;
      uint64_t v159 = v102;
      if (v103(v100, 1, v101))
      {
        uint64_t v104 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v162, v100, *(void *)(*(void *)(v104 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v102 + 16))(v162, v100, v101);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v102 + 56))(v162, 0, 1, v101);
      }
      uint64_t v105 = v24[15];
      uint64_t v106 = (void *)((char *)a1 + v105);
      uint64_t v107 = (void *)(a2 + v105);
      uint64_t v108 = v107[1];
      void *v106 = *v107;
      v106[1] = v108;
      uint64_t v109 = v24[16];
      uint64_t v110 = (void *)((char *)a1 + v109);
      uint64_t v111 = (void *)(a2 + v109);
      uint64_t v112 = v111[1];
      *uint64_t v110 = *v111;
      v110[1] = v112;
      *((unsigned char *)a1 + v24[17]) = *(unsigned char *)(a2 + v24[17]);
      *(void *)((char *)a1 + v24[18]) = *(void *)(a2 + v24[18]);
      *((unsigned char *)a1 + v24[19]) = *(unsigned char *)(a2 + v24[19]);
      *((unsigned char *)a1 + v24[20]) = *(unsigned char *)(a2 + v24[20]);
      *((unsigned char *)a1 + v24[21]) = *(unsigned char *)(a2 + v24[21]);
      *((unsigned char *)a1 + v24[22]) = *(unsigned char *)(a2 + v24[22]);
      *((unsigned char *)a1 + v24[23]) = *(unsigned char *)(a2 + v24[23]);
      *((unsigned char *)a1 + v24[24]) = *(unsigned char *)(a2 + v24[24]);
      *((unsigned char *)a1 + v24[25]) = *(unsigned char *)(a2 + v24[25]);
      *((unsigned char *)a1 + v24[26]) = *(unsigned char *)(a2 + v24[26]);
      *((unsigned char *)a1 + v24[27]) = *(unsigned char *)(a2 + v24[27]);
      *((unsigned char *)a1 + v24[28]) = *(unsigned char *)(a2 + v24[28]);
      *((unsigned char *)a1 + v24[29]) = *(unsigned char *)(a2 + v24[29]);
      uint64_t v113 = v24[30];
      uint64_t v114 = (void *)((char *)a1 + v113);
      uint64_t v115 = (void *)(a2 + v113);
      uint64_t v116 = v115[1];
      *uint64_t v114 = *v115;
      v114[1] = v116;
      uint64_t v117 = v24[31];
      uint64_t v118 = (char *)a1 + v117;
      uint64_t v119 = (const void *)(a2 + v117);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__dsta(v119, 1, v101))
      {
        uint64_t v120 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v118, v119, *(void *)(*(void *)(v120 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v159 + 16))(v118, v119, v101);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v159 + 56))(v118, 0, 1, v101);
      }
      uint64_t v121 = v24[32];
      uint64_t v122 = (char *)a1 + v121;
      uint64_t v123 = a2 + v121;
      *(void *)uint64_t v122 = *(void *)v123;
      v122[8] = *(unsigned char *)(v123 + 8);
      *(void *)((char *)a1 + v24[33]) = *(void *)(a2 + v24[33]);
      uint64_t v124 = v24[34];
      id v125 = (char *)a1 + v124;
      uint64_t v126 = (const void *)(a2 + v124);
      if (__dsta((const void *)(a2 + v124), 1, v101))
      {
        uint64_t v127 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v125, v126, *(void *)(*(void *)(v127 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v159 + 16))(v125, v126, v101);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v159 + 56))(v125, 0, 1, v101);
      }
      uint64_t v128 = v24[35];
      uint64_t v129 = (void *)((char *)a1 + v128);
      uint64_t v130 = (void *)(a2 + v128);
      uint64_t v131 = v130[1];
      *uint64_t v129 = *v130;
      v129[1] = v131;
      uint64_t v132 = v24[36];
      uint64_t v133 = (char *)a1 + v132;
      uint64_t v134 = a2 + v132;
      *(void *)(v133 + 13) = *(void *)(v134 + 13);
      *(_OWORD *)uint64_t v133 = *(_OWORD *)v134;
      uint64_t v135 = v24[37];
      id v136 = (char *)a1 + v135;
      uint64_t v137 = a2 + v135;
      v136[8] = *(unsigned char *)(v137 + 8);
      *(void *)id v136 = *(void *)v137;
      uint64_t v138 = v24[38];
      uint64_t v139 = (char *)a1 + v138;
      uint64_t v140 = a2 + v138;
      v139[4] = *(unsigned char *)(v140 + 4);
      *(_DWORD *)uint64_t v139 = *(_DWORD *)v140;
      uint64_t v141 = (int *)type metadata accessor for LibraryAudiobookInfo();
      uint64_t v142 = v141[5];
      uint64_t v143 = (char *)a1 + v142;
      uint64_t v144 = a2 + v142;
      uint64_t v145 = *(void *)(a2 + v142 + 24);
      swift_bridgeObjectRetain();
      if (v145)
      {
        uint64_t v146 = *(void *)(v144 + 32);
        *((void *)v143 + 3) = v145;
        *((void *)v143 + 4) = v146;
        (**(void (***)(char *, uint64_t, uint64_t))(v145 - 8))(v143, v144, v145);
      }
      else
      {
        long long v147 = *(_OWORD *)(v144 + 16);
        *(_OWORD *)uint64_t v143 = *(_OWORD *)v144;
        *((_OWORD *)v143 + 1) = v147;
        *((void *)v143 + 4) = *(void *)(v144 + 32);
      }
      a3 = v165;
      *((unsigned char *)a1 + v141[6]) = *(unsigned char *)(a2 + v141[6]);
      *(void *)((char *)a1 + v141[7]) = *(void *)(a2 + v141[7]);
      swift_bridgeObjectRetain();
      uint64_t v148 = *(int *)(sub_228952BB0(&qword_2682846A8) + 48);
      uint64_t v149 = *(void **)(a2 + v148);
      *(void *)((char *)a1 + v148) = v149;
      id v150 = v149;
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v151 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *((unsigned char *)a1 + v151) = *(unsigned char *)(a2 + v151);
  return a1;
}

void *assignWithCopy for AudiobookInfo(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_22899EFA0((uint64_t)a1);
    sub_228952BB0(&qword_268284220);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v12 = (void *)*a2;
      *a1 = *a2;
      id v13 = v12;
    }
    else
    {
      uint64_t v151 = a3;
      if (EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        a1[8] = a2[8];
        a1[9] = a2[9];
        a1[10] = a2[10];
        uint64_t v7 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        uint64_t v8 = v7[10];
        __dst = (char *)a1 + v8;
        uint64_t v143 = (char *)a2 + v8;
        uint64_t v9 = sub_2289DE880();
        uint64_t v10 = *(void *)(v9 - 8);
        uint64_t v141 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v141(v143, 1, v9))
        {
          uint64_t v11 = sub_228952BB0(&qword_2682841E0);
          memcpy(__dst, v143, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v143, v9);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
        }
        uint64_t v19 = v7[11];
        uint64_t v20 = (void *)((char *)a1 + v19);
        uint64_t v21 = (void *)((char *)a2 + v19);
        *uint64_t v20 = *v21;
        v20[1] = v21[1];
        uint64_t v22 = v7[12];
        uint64_t v23 = (char *)a1 + v22;
        uint64_t v24 = (char *)a2 + v22;
        uint64_t v25 = *(void *)v24;
        v23[8] = v24[8];
        *(void *)uint64_t v23 = v25;
        uint64_t v26 = v7[13];
        uint64_t v27 = (void *)((char *)a1 + v26);
        uint64_t v28 = (void *)((char *)a2 + v26);
        *uint64_t v27 = *v28;
        v27[1] = v28[1];
        uint64_t v29 = v7[14];
        uint64_t v145 = (char *)a1 + v29;
        uint64_t v30 = (char *)a2 + v29;
        uint64_t v31 = sub_2289DE910();
        uint64_t v32 = *(void *)(v31 - 8);
        uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dstb = (void (**)(void *, const void *, uint64_t))v32;
        if (v33(v30, 1, v31))
        {
          uint64_t v34 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v145, v30, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v145, v30, v31);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v145, 0, 1, v31);
        }
        uint64_t v51 = v7[15];
        uint64_t v52 = (void *)((char *)a1 + v51);
        uint64_t v53 = (void *)((char *)a2 + v51);
        *uint64_t v52 = *v53;
        v52[1] = v53[1];
        uint64_t v54 = v7[16];
        uint64_t v55 = (void *)((char *)a1 + v54);
        uint64_t v56 = (void *)((char *)a2 + v54);
        void *v55 = *v56;
        v55[1] = v56[1];
        *((unsigned char *)a1 + v7[17]) = *((unsigned char *)a2 + v7[17]);
        *(void *)((char *)a1 + v7[18]) = *(void *)((char *)a2 + v7[18]);
        *((unsigned char *)a1 + v7[19]) = *((unsigned char *)a2 + v7[19]);
        *((unsigned char *)a1 + v7[20]) = *((unsigned char *)a2 + v7[20]);
        *((unsigned char *)a1 + v7[21]) = *((unsigned char *)a2 + v7[21]);
        *((unsigned char *)a1 + v7[22]) = *((unsigned char *)a2 + v7[22]);
        *((unsigned char *)a1 + v7[23]) = *((unsigned char *)a2 + v7[23]);
        *((unsigned char *)a1 + v7[24]) = *((unsigned char *)a2 + v7[24]);
        *((unsigned char *)a1 + v7[25]) = *((unsigned char *)a2 + v7[25]);
        *((unsigned char *)a1 + v7[26]) = *((unsigned char *)a2 + v7[26]);
        *((unsigned char *)a1 + v7[27]) = *((unsigned char *)a2 + v7[27]);
        *((unsigned char *)a1 + v7[28]) = *((unsigned char *)a2 + v7[28]);
        *((unsigned char *)a1 + v7[29]) = *((unsigned char *)a2 + v7[29]);
        uint64_t v57 = v7[30];
        uint64_t v58 = (void *)((char *)a1 + v57);
        uint64_t v59 = (void *)((char *)a2 + v57);
        *uint64_t v58 = *v59;
        v58[1] = v59[1];
        uint64_t v60 = v7[31];
        uint64_t v61 = (char *)a1 + v60;
        uint64_t v62 = (char *)a2 + v60;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v33(v62, 1, v31))
        {
          uint64_t v63 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
          uint64_t v64 = __dstb;
        }
        else
        {
          uint64_t v64 = __dstb;
          __dstb[2](v61, v62, v31);
          ((void (*)(char *, void, uint64_t, uint64_t))__dstb[7])(v61, 0, 1, v31);
        }
        uint64_t v79 = v7[32];
        uint64_t v80 = (char *)a1 + v79;
        uint64_t v81 = (char *)a2 + v79;
        uint64_t v82 = *(void *)v81;
        v80[8] = v81[8];
        *(void *)uint64_t v80 = v82;
        *(void *)((char *)a1 + v7[33]) = *(void *)((char *)a2 + v7[33]);
        uint64_t v83 = v7[34];
        uint64_t v84 = (char *)a1 + v83;
        uint64_t v85 = (char *)a2 + v83;
        if (v33((char *)a2 + v83, 1, v31))
        {
          uint64_t v86 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v84, v85, *(void *)(*(void *)(v86 - 8) + 64));
        }
        else
        {
          v64[2](v84, v85, v31);
          ((void (*)(char *, void, uint64_t, uint64_t))v64[7])(v84, 0, 1, v31);
        }
        uint64_t v95 = v7[35];
        uint64_t v96 = (void *)((char *)a1 + v95);
        uint64_t v97 = (void *)((char *)a2 + v95);
        *uint64_t v96 = *v97;
        v96[1] = v97[1];
        uint64_t v98 = v7[36];
        uint64_t v99 = (char *)a1 + v98;
        uint64_t v100 = (char *)a2 + v98;
        long long v101 = *(_OWORD *)v100;
        *(void *)(v99 + 13) = *(void *)(v100 + 13);
        *(_OWORD *)uint64_t v99 = v101;
        uint64_t v102 = v7[37];
        uint64_t v103 = (char *)a1 + v102;
        uint64_t v104 = (char *)a2 + v102;
        uint64_t v105 = *(void *)v104;
        v103[8] = v104[8];
        *(void *)uint64_t v103 = v105;
        uint64_t v106 = v7[38];
        uint64_t v107 = (char *)a1 + v106;
        uint64_t v108 = (char *)a2 + v106;
        LODWORD(v105) = *(_DWORD *)v108;
        v107[4] = v108[4];
        *(_DWORD *)uint64_t v107 = v105;
        uint64_t v109 = (int *)type metadata accessor for LibraryAudiobookInfo();
        uint64_t v110 = v109[5];
        uint64_t v111 = (char *)a1 + v110;
        uint64_t v112 = (char *)a2 + v110;
        uint64_t v113 = *(void *)((char *)a2 + v110 + 24);
        swift_bridgeObjectRetain();
        if (v113)
        {
          *((void *)v111 + 3) = v113;
          *((void *)v111 + 4) = *((void *)v112 + 4);
          (**(void (***)(char *, char *, uint64_t))(v113 - 8))(v111, v112, v113);
        }
        else
        {
          long long v133 = *(_OWORD *)v112;
          long long v134 = *((_OWORD *)v112 + 1);
          *((void *)v111 + 4) = *((void *)v112 + 4);
          *(_OWORD *)uint64_t v111 = v133;
          *((_OWORD *)v111 + 1) = v134;
        }
        a3 = v151;
        *((unsigned char *)a1 + v109[6]) = *((unsigned char *)a2 + v109[6]);
        *(void *)((char *)a1 + v109[7]) = *(void *)((char *)a2 + v109[7]);
        swift_bridgeObjectRetain();
      }
      else
      {
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        a1[8] = a2[8];
        a1[9] = a2[9];
        a1[10] = a2[10];
        uint64_t v14 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        uint64_t v15 = v14[10];
        __dsta = (char *)a1 + v15;
        uint64_t v144 = (char *)a2 + v15;
        uint64_t v16 = sub_2289DE880();
        uint64_t v17 = *(void *)(v16 - 8);
        uint64_t v142 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v142(v144, 1, v16))
        {
          uint64_t v18 = sub_228952BB0(&qword_2682841E0);
          memcpy(__dsta, v144, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dsta, v144, v16);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dsta, 0, 1, v16);
        }
        uint64_t v35 = v14[11];
        uint64_t v36 = (void *)((char *)a1 + v35);
        uint64_t v37 = (void *)((char *)a2 + v35);
        *uint64_t v36 = *v37;
        v36[1] = v37[1];
        uint64_t v38 = v14[12];
        uint64_t v39 = (char *)a1 + v38;
        uint64_t v40 = (char *)a2 + v38;
        uint64_t v41 = *(void *)v40;
        v39[8] = v40[8];
        *(void *)uint64_t v39 = v41;
        uint64_t v42 = v14[13];
        uint64_t v43 = (void *)((char *)a1 + v42);
        uint64_t v44 = (void *)((char *)a2 + v42);
        *uint64_t v43 = *v44;
        v43[1] = v44[1];
        uint64_t v45 = v14[14];
        uint64_t v146 = (char *)a1 + v45;
        uint64_t v46 = (char *)a2 + v45;
        uint64_t v47 = sub_2289DE910();
        uint64_t v48 = *(void *)(v47 - 8);
        uint64_t v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dstc = (void (**)(void *, const void *, uint64_t))v48;
        if (v49(v46, 1, v47))
        {
          uint64_t v50 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v146, v46, *(void *)(*(void *)(v50 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v146, v46, v47);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v146, 0, 1, v47);
        }
        uint64_t v65 = v14[15];
        uint64_t v66 = (void *)((char *)a1 + v65);
        uint64_t v67 = (void *)((char *)a2 + v65);
        *uint64_t v66 = *v67;
        v66[1] = v67[1];
        uint64_t v68 = v14[16];
        uint64_t v69 = (void *)((char *)a1 + v68);
        uint64_t v70 = (void *)((char *)a2 + v68);
        *uint64_t v69 = *v70;
        v69[1] = v70[1];
        *((unsigned char *)a1 + v14[17]) = *((unsigned char *)a2 + v14[17]);
        *(void *)((char *)a1 + v14[18]) = *(void *)((char *)a2 + v14[18]);
        *((unsigned char *)a1 + v14[19]) = *((unsigned char *)a2 + v14[19]);
        *((unsigned char *)a1 + v14[20]) = *((unsigned char *)a2 + v14[20]);
        *((unsigned char *)a1 + v14[21]) = *((unsigned char *)a2 + v14[21]);
        *((unsigned char *)a1 + v14[22]) = *((unsigned char *)a2 + v14[22]);
        *((unsigned char *)a1 + v14[23]) = *((unsigned char *)a2 + v14[23]);
        *((unsigned char *)a1 + v14[24]) = *((unsigned char *)a2 + v14[24]);
        *((unsigned char *)a1 + v14[25]) = *((unsigned char *)a2 + v14[25]);
        *((unsigned char *)a1 + v14[26]) = *((unsigned char *)a2 + v14[26]);
        *((unsigned char *)a1 + v14[27]) = *((unsigned char *)a2 + v14[27]);
        *((unsigned char *)a1 + v14[28]) = *((unsigned char *)a2 + v14[28]);
        *((unsigned char *)a1 + v14[29]) = *((unsigned char *)a2 + v14[29]);
        uint64_t v71 = v14[30];
        uint64_t v72 = (void *)((char *)a1 + v71);
        uint64_t v73 = (void *)((char *)a2 + v71);
        *uint64_t v72 = *v73;
        v72[1] = v73[1];
        uint64_t v74 = v14[31];
        uint64_t v75 = (char *)a1 + v74;
        uint64_t v76 = (char *)a2 + v74;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v49(v76, 1, v47))
        {
          uint64_t v77 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v75, v76, *(void *)(*(void *)(v77 - 8) + 64));
          uint64_t v78 = __dstc;
        }
        else
        {
          uint64_t v78 = __dstc;
          __dstc[2](v75, v76, v47);
          ((void (*)(char *, void, uint64_t, uint64_t))__dstc[7])(v75, 0, 1, v47);
        }
        uint64_t v87 = v14[32];
        uint64_t v88 = (char *)a1 + v87;
        uint64_t v89 = (char *)a2 + v87;
        uint64_t v90 = *(void *)v89;
        v88[8] = v89[8];
        *(void *)uint64_t v88 = v90;
        *(void *)((char *)a1 + v14[33]) = *(void *)((char *)a2 + v14[33]);
        uint64_t v91 = v14[34];
        uint64_t v92 = (char *)a1 + v91;
        uint64_t v93 = (char *)a2 + v91;
        if (v49((char *)a2 + v91, 1, v47))
        {
          uint64_t v94 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v92, v93, *(void *)(*(void *)(v94 - 8) + 64));
        }
        else
        {
          v78[2](v92, v93, v47);
          ((void (*)(char *, void, uint64_t, uint64_t))v78[7])(v92, 0, 1, v47);
        }
        uint64_t v114 = v14[35];
        uint64_t v115 = (void *)((char *)a1 + v114);
        uint64_t v116 = (void *)((char *)a2 + v114);
        *uint64_t v115 = *v116;
        v115[1] = v116[1];
        uint64_t v117 = v14[36];
        uint64_t v118 = (char *)a1 + v117;
        uint64_t v119 = (char *)a2 + v117;
        long long v120 = *(_OWORD *)v119;
        *(void *)(v118 + 13) = *(void *)(v119 + 13);
        *(_OWORD *)uint64_t v118 = v120;
        uint64_t v121 = v14[37];
        uint64_t v122 = (char *)a1 + v121;
        uint64_t v123 = (char *)a2 + v121;
        uint64_t v124 = *(void *)v123;
        v122[8] = v123[8];
        *(void *)uint64_t v122 = v124;
        uint64_t v125 = v14[38];
        uint64_t v126 = (char *)a1 + v125;
        uint64_t v127 = (char *)a2 + v125;
        LODWORD(v124) = *(_DWORD *)v127;
        v126[4] = v127[4];
        *(_DWORD *)uint64_t v126 = v124;
        uint64_t v128 = (int *)type metadata accessor for LibraryAudiobookInfo();
        uint64_t v129 = v128[5];
        uint64_t v130 = (char *)a1 + v129;
        uint64_t v131 = (char *)a2 + v129;
        uint64_t v132 = *(void *)((char *)a2 + v129 + 24);
        swift_bridgeObjectRetain();
        if (v132)
        {
          *((void *)v130 + 3) = v132;
          *((void *)v130 + 4) = *((void *)v131 + 4);
          (**(void (***)(char *, char *, uint64_t))(v132 - 8))(v130, v131, v132);
        }
        else
        {
          long long v135 = *(_OWORD *)v131;
          long long v136 = *((_OWORD *)v131 + 1);
          *((void *)v130 + 4) = *((void *)v131 + 4);
          *(_OWORD *)uint64_t v130 = v135;
          *((_OWORD *)v130 + 1) = v136;
        }
        a3 = v151;
        *((unsigned char *)a1 + v128[6]) = *((unsigned char *)a2 + v128[6]);
        *(void *)((char *)a1 + v128[7]) = *(void *)((char *)a2 + v128[7]);
        swift_bridgeObjectRetain();
        uint64_t v137 = *(int *)(sub_228952BB0(&qword_2682846A8) + 48);
        uint64_t v138 = *(void **)((char *)a2 + v137);
        *(void *)((char *)a1 + v137) = v138;
        id v139 = v138;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

char *initializeWithTake for AudiobookInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_228952BB0(&qword_268284220);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v96 = a3;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((void *)a1 + 2) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    uint64_t v15 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    uint64_t v16 = v15[10];
    uint64_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    uint64_t v19 = sub_2289DE880();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = sub_228952BB0(&qword_2682841E0);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(_OWORD *)&a1[v15[11]] = *(_OWORD *)&a2[v15[11]];
    uint64_t v32 = v15[12];
    uint64_t v33 = &a1[v32];
    uint64_t v34 = &a2[v32];
    v33[8] = v34[8];
    *(void *)uint64_t v33 = *(void *)v34;
    *(_OWORD *)&a1[v15[13]] = *(_OWORD *)&a2[v15[13]];
    uint64_t v35 = v15[14];
    uint64_t v36 = &a1[v35];
    uint64_t v37 = &a2[v35];
    uint64_t v38 = sub_2289DE910();
    uint64_t v39 = *(void *)(v38 - 8);
    uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    if (v40(v37, 1, v38))
    {
      uint64_t v41 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    *(_OWORD *)&a1[v15[15]] = *(_OWORD *)&a2[v15[15]];
    *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
    a1[v15[17]] = a2[v15[17]];
    *(void *)&a1[v15[18]] = *(void *)&a2[v15[18]];
    a1[v15[19]] = a2[v15[19]];
    a1[v15[20]] = a2[v15[20]];
    a1[v15[21]] = a2[v15[21]];
    a1[v15[22]] = a2[v15[22]];
    a1[v15[23]] = a2[v15[23]];
    a1[v15[24]] = a2[v15[24]];
    a1[v15[25]] = a2[v15[25]];
    a1[v15[26]] = a2[v15[26]];
    a1[v15[27]] = a2[v15[27]];
    a1[v15[28]] = a2[v15[28]];
    a1[v15[29]] = a2[v15[29]];
    *(_OWORD *)&a1[v15[30]] = *(_OWORD *)&a2[v15[30]];
    uint64_t v46 = v15[31];
    uint64_t v47 = &a1[v46];
    uint64_t v48 = &a2[v46];
    if (v40(&a2[v46], 1, v38))
    {
      uint64_t v49 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v47, v48, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v47, 0, 1, v38);
    }
    uint64_t v57 = v15[32];
    uint64_t v58 = &a1[v57];
    uint64_t v59 = &a2[v57];
    *(void *)uint64_t v58 = *(void *)v59;
    v58[8] = v59[8];
    *(void *)&a1[v15[33]] = *(void *)&a2[v15[33]];
    uint64_t v60 = v15[34];
    uint64_t v61 = &a1[v60];
    uint64_t v62 = &a2[v60];
    if (v40(&a2[v60], 1, v38))
    {
      uint64_t v63 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v61, v62, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v61, 0, 1, v38);
    }
    a3 = v96;
    *(_OWORD *)&a1[v15[35]] = *(_OWORD *)&a2[v15[35]];
    uint64_t v79 = v15[36];
    uint64_t v80 = &a1[v79];
    uint64_t v81 = &a2[v79];
    *(void *)(v80 + 13) = *(void *)(v81 + 13);
    *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
    uint64_t v82 = v15[37];
    uint64_t v83 = &a1[v82];
    uint64_t v84 = &a2[v82];
    *(void *)uint64_t v83 = *(void *)v84;
    v83[8] = v84[8];
    uint64_t v85 = v15[38];
    uint64_t v86 = &a1[v85];
    uint64_t v87 = &a2[v85];
    *(_DWORD *)uint64_t v86 = *(_DWORD *)v87;
    v86[4] = v87[4];
    uint64_t v88 = (int *)type metadata accessor for LibraryAudiobookInfo();
    uint64_t v89 = v88[5];
    uint64_t v90 = &a1[v89];
    uint64_t v91 = &a2[v89];
    long long v92 = *((_OWORD *)v91 + 1);
    *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
    *((_OWORD *)v90 + 1) = v92;
    *((void *)v90 + 4) = *((void *)v91 + 4);
    a1[v88[6]] = a2[v88[6]];
    *(void *)&a1[v88[7]] = *(void *)&a2[v88[7]];
    goto LABEL_30;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v95 = a3;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((void *)a1 + 2) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    uint64_t v8 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    uint64_t v9 = v8[10];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = sub_2289DE880();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_228952BB0(&qword_2682841E0);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
    uint64_t v22 = v8[12];
    uint64_t v23 = &a1[v22];
    uint64_t v24 = &a2[v22];
    v23[8] = v24[8];
    *(void *)uint64_t v23 = *(void *)v24;
    *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
    uint64_t v25 = v8[14];
    uint64_t v26 = &a1[v25];
    uint64_t v27 = &a2[v25];
    uint64_t v28 = sub_2289DE910();
    uint64_t v29 = *(void *)(v28 - 8);
    uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    if (v30(v27, 1, v28))
    {
      uint64_t v31 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    *(_OWORD *)&a1[v8[15]] = *(_OWORD *)&a2[v8[15]];
    *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
    a1[v8[17]] = a2[v8[17]];
    *(void *)&a1[v8[18]] = *(void *)&a2[v8[18]];
    a1[v8[19]] = a2[v8[19]];
    a1[v8[20]] = a2[v8[20]];
    a1[v8[21]] = a2[v8[21]];
    a1[v8[22]] = a2[v8[22]];
    a1[v8[23]] = a2[v8[23]];
    a1[v8[24]] = a2[v8[24]];
    a1[v8[25]] = a2[v8[25]];
    a1[v8[26]] = a2[v8[26]];
    a1[v8[27]] = a2[v8[27]];
    a1[v8[28]] = a2[v8[28]];
    a1[v8[29]] = a2[v8[29]];
    *(_OWORD *)&a1[v8[30]] = *(_OWORD *)&a2[v8[30]];
    uint64_t v42 = v8[31];
    uint64_t v43 = &a1[v42];
    uint64_t v44 = &a2[v42];
    if (v30(&a2[v42], 1, v28))
    {
      uint64_t v45 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v43, v44, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v43, 0, 1, v28);
    }
    uint64_t v50 = v8[32];
    uint64_t v51 = &a1[v50];
    uint64_t v52 = &a2[v50];
    *(void *)uint64_t v51 = *(void *)v52;
    v51[8] = v52[8];
    *(void *)&a1[v8[33]] = *(void *)&a2[v8[33]];
    uint64_t v53 = v8[34];
    uint64_t v54 = &a1[v53];
    uint64_t v55 = &a2[v53];
    if (v30(&a2[v53], 1, v28))
    {
      uint64_t v56 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v54, v55, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
    }
    a3 = v95;
    *(_OWORD *)&a1[v8[35]] = *(_OWORD *)&a2[v8[35]];
    uint64_t v64 = v8[36];
    uint64_t v65 = &a1[v64];
    uint64_t v66 = &a2[v64];
    *(void *)(v65 + 13) = *(void *)(v66 + 13);
    *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
    uint64_t v67 = v8[37];
    uint64_t v68 = &a1[v67];
    uint64_t v69 = &a2[v67];
    *(void *)uint64_t v68 = *(void *)v69;
    v68[8] = v69[8];
    uint64_t v70 = v8[38];
    uint64_t v71 = &a1[v70];
    uint64_t v72 = &a2[v70];
    *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
    v71[4] = v72[4];
    uint64_t v73 = (int *)type metadata accessor for LibraryAudiobookInfo();
    uint64_t v74 = v73[5];
    uint64_t v75 = &a1[v74];
    uint64_t v76 = &a2[v74];
    long long v77 = *((_OWORD *)v76 + 1);
    *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
    *((_OWORD *)v75 + 1) = v77;
    *((void *)v75 + 4) = *((void *)v76 + 4);
    a1[v73[6]] = a2[v73[6]];
    *(void *)&a1[v73[7]] = *(void *)&a2[v73[7]];
    uint64_t v78 = sub_228952BB0(&qword_2682846A8);
    *(void *)&a1[*(int *)(v78 + 48)] = *(void *)&a2[*(int *)(v78 + 48)];
LABEL_30:
    swift_storeEnumTagMultiPayload();
    goto LABEL_31;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_31:
  uint64_t v93 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v93] = a2[v93];
  return a1;
}

char *assignWithTake for AudiobookInfo(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_22899EFA0((uint64_t)a1);
    uint64_t v6 = sub_228952BB0(&qword_268284220);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      uint64_t v15 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      uint64_t v16 = v15[10];
      uint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      uint64_t v19 = sub_2289DE880();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = sub_228952BB0(&qword_2682841E0);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(_OWORD *)&a1[v15[11]] = *(_OWORD *)&a2[v15[11]];
      uint64_t v32 = v15[12];
      uint64_t v33 = &a1[v32];
      uint64_t v34 = &a2[v32];
      v33[8] = v34[8];
      *(void *)uint64_t v33 = *(void *)v34;
      *(_OWORD *)&a1[v15[13]] = *(_OWORD *)&a2[v15[13]];
      uint64_t v35 = v15[14];
      uint64_t v36 = &a1[v35];
      uint64_t v37 = &a2[v35];
      uint64_t v38 = sub_2289DE910();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      if (v40(v37, 1, v38))
      {
        uint64_t v41 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
      *(_OWORD *)&a1[v15[15]] = *(_OWORD *)&a2[v15[15]];
      *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
      a1[v15[17]] = a2[v15[17]];
      *(void *)&a1[v15[18]] = *(void *)&a2[v15[18]];
      a1[v15[19]] = a2[v15[19]];
      a1[v15[20]] = a2[v15[20]];
      a1[v15[21]] = a2[v15[21]];
      a1[v15[22]] = a2[v15[22]];
      a1[v15[23]] = a2[v15[23]];
      a1[v15[24]] = a2[v15[24]];
      a1[v15[25]] = a2[v15[25]];
      a1[v15[26]] = a2[v15[26]];
      a1[v15[27]] = a2[v15[27]];
      a1[v15[28]] = a2[v15[28]];
      a1[v15[29]] = a2[v15[29]];
      *(_OWORD *)&a1[v15[30]] = *(_OWORD *)&a2[v15[30]];
      uint64_t v46 = v15[31];
      uint64_t v47 = &a1[v46];
      uint64_t v48 = &a2[v46];
      if (v40(&a2[v46], 1, v38))
      {
        uint64_t v49 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v47, v48, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v47, 0, 1, v38);
      }
      uint64_t v57 = v15[32];
      uint64_t v58 = &a1[v57];
      uint64_t v59 = &a2[v57];
      *(void *)uint64_t v58 = *(void *)v59;
      v58[8] = v59[8];
      *(void *)&a1[v15[33]] = *(void *)&a2[v15[33]];
      uint64_t v60 = v15[34];
      uint64_t v61 = &a1[v60];
      uint64_t v62 = &a2[v60];
      if (v40(&a2[v60], 1, v38))
      {
        uint64_t v63 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v61, v62, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v61, 0, 1, v38);
      }
      *(_OWORD *)&a1[v15[35]] = *(_OWORD *)&a2[v15[35]];
      uint64_t v79 = v15[36];
      uint64_t v80 = &a1[v79];
      uint64_t v81 = &a2[v79];
      *(void *)(v80 + 13) = *(void *)(v81 + 13);
      *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
      uint64_t v82 = v15[37];
      uint64_t v83 = &a1[v82];
      uint64_t v84 = &a2[v82];
      *(void *)uint64_t v83 = *(void *)v84;
      v83[8] = v84[8];
      uint64_t v85 = v15[38];
      uint64_t v86 = &a1[v85];
      uint64_t v87 = &a2[v85];
      *(_DWORD *)uint64_t v86 = *(_DWORD *)v87;
      v86[4] = v87[4];
      uint64_t v88 = (int *)type metadata accessor for LibraryAudiobookInfo();
      uint64_t v89 = v88[5];
      uint64_t v90 = &a1[v89];
      uint64_t v91 = &a2[v89];
      long long v92 = *((_OWORD *)v91 + 1);
      *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
      *((_OWORD *)v90 + 1) = v92;
      *((void *)v90 + 4) = *((void *)v91 + 4);
      a1[v88[6]] = a2[v88[6]];
      *(void *)&a1[v88[7]] = *(void *)&a2[v88[7]];
      goto LABEL_31;
    }
    if (!EnumCaseMultiPayload)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      uint64_t v8 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      uint64_t v9 = v8[10];
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = sub_2289DE880();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = sub_228952BB0(&qword_2682841E0);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
      uint64_t v22 = v8[12];
      uint64_t v23 = &a1[v22];
      uint64_t v24 = &a2[v22];
      v23[8] = v24[8];
      *(void *)uint64_t v23 = *(void *)v24;
      *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
      uint64_t v25 = v8[14];
      uint64_t v26 = &a1[v25];
      uint64_t v27 = &a2[v25];
      uint64_t v28 = sub_2289DE910();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
      if (v30(v27, 1, v28))
      {
        uint64_t v31 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      *(_OWORD *)&a1[v8[15]] = *(_OWORD *)&a2[v8[15]];
      *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
      a1[v8[17]] = a2[v8[17]];
      *(void *)&a1[v8[18]] = *(void *)&a2[v8[18]];
      a1[v8[19]] = a2[v8[19]];
      a1[v8[20]] = a2[v8[20]];
      a1[v8[21]] = a2[v8[21]];
      a1[v8[22]] = a2[v8[22]];
      a1[v8[23]] = a2[v8[23]];
      a1[v8[24]] = a2[v8[24]];
      a1[v8[25]] = a2[v8[25]];
      a1[v8[26]] = a2[v8[26]];
      a1[v8[27]] = a2[v8[27]];
      a1[v8[28]] = a2[v8[28]];
      a1[v8[29]] = a2[v8[29]];
      *(_OWORD *)&a1[v8[30]] = *(_OWORD *)&a2[v8[30]];
      uint64_t v42 = v8[31];
      uint64_t v43 = &a1[v42];
      uint64_t v44 = &a2[v42];
      if (v30(&a2[v42], 1, v28))
      {
        uint64_t v45 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v43, v44, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v43, 0, 1, v28);
      }
      uint64_t v50 = v8[32];
      uint64_t v51 = &a1[v50];
      uint64_t v52 = &a2[v50];
      *(void *)uint64_t v51 = *(void *)v52;
      v51[8] = v52[8];
      *(void *)&a1[v8[33]] = *(void *)&a2[v8[33]];
      uint64_t v53 = v8[34];
      uint64_t v54 = &a1[v53];
      uint64_t v55 = &a2[v53];
      if (v30(&a2[v53], 1, v28))
      {
        uint64_t v56 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v54, v55, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
      }
      *(_OWORD *)&a1[v8[35]] = *(_OWORD *)&a2[v8[35]];
      uint64_t v64 = v8[36];
      uint64_t v65 = &a1[v64];
      uint64_t v66 = &a2[v64];
      *(void *)(v65 + 13) = *(void *)(v66 + 13);
      *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
      uint64_t v67 = v8[37];
      uint64_t v68 = &a1[v67];
      uint64_t v69 = &a2[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      v68[8] = v69[8];
      uint64_t v70 = v8[38];
      uint64_t v71 = &a1[v70];
      uint64_t v72 = &a2[v70];
      *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
      v71[4] = v72[4];
      uint64_t v73 = (int *)type metadata accessor for LibraryAudiobookInfo();
      uint64_t v74 = v73[5];
      uint64_t v75 = &a1[v74];
      uint64_t v76 = &a2[v74];
      long long v77 = *((_OWORD *)v76 + 1);
      *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v77;
      *((void *)v75 + 4) = *((void *)v76 + 4);
      a1[v73[6]] = a2[v73[6]];
      *(void *)&a1[v73[7]] = *(void *)&a2[v73[7]];
      uint64_t v78 = sub_228952BB0(&qword_2682846A8);
      *(void *)&a1[*(int *)(v78 + 48)] = *(void *)&a2[*(int *)(v78 + 48)];
LABEL_31:
      swift_storeEnumTagMultiPayload();
      goto LABEL_32;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
LABEL_32:
  uint64_t v93 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v93] = a2[v93];
  return a1;
}

uint64_t getEnumTagSinglePayload for AudiobookInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2289A3674);
}

uint64_t sub_2289A3674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_228952BB0(&qword_268284220);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 3) {
      return v10 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for AudiobookInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2289A3748);
}

uint64_t sub_2289A3748(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_228952BB0(&qword_268284220);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

void sub_2289A3808()
{
  sub_2289A38A8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_2289A38A8()
{
  if (!qword_268284938)
  {
    type metadata accessor for LibraryAudiobookInfo();
    type metadata accessor for MAudiobook();
    unint64_t v0 = type metadata accessor for ContentDataSource();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268284938);
    }
  }
}

uint64_t sub_2289A3910(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2289A3970(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t MRequestMetadata.fileID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MRequestMetadata.line.getter()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t MRequestMetadata.init(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = a3;
  return result;
}

uint64_t sub_2289A3A1C()
{
  if (*v0) {
    return 1701734764;
  }
  else {
    return 0x4449656C6966;
  }
}

uint64_t sub_2289A3A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2289A48B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2289A3A74()
{
  return 0;
}

void sub_2289A3A80(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_2289A3A8C(uint64_t a1)
{
  unint64_t v2 = sub_2289A3C78();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2289A3AC8(uint64_t a1)
{
  unint64_t v2 = sub_2289A3C78();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t MRequestMetadata.encode(to:)(void *a1)
{
  uint64_t v3 = sub_228952BB0(&qword_268284940);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = *(_DWORD *)(v1 + 16);
  sub_22895598C(a1, a1[3]);
  sub_2289A3C78();
  sub_2289DF5F0();
  char v12 = 0;
  uint64_t v7 = v9[1];
  sub_2289DF430();
  if (!v7)
  {
    char v11 = 1;
    sub_2289DF440();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_2289A3C78()
{
  unint64_t result = qword_268284948;
  if (!qword_268284948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284948);
  }
  return result;
}

uint64_t MRequestMetadata.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_228952BB0(&qword_268284950);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22895598C(a1, a1[3]);
  sub_2289A3C78();
  sub_2289DF5E0();
  if (v2) {
    return sub_2289559D0((uint64_t)a1);
  }
  char v16 = 0;
  uint64_t v9 = sub_2289DF410();
  uint64_t v11 = v10;
  char v15 = 1;
  swift_bridgeObjectRetain();
  int v12 = sub_2289DF420();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v12;
  sub_2289559D0((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2289A3EAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return MRequestMetadata.init(from:)(a1, a2);
}

uint64_t sub_2289A3EC4(void *a1)
{
  return MRequestMetadata.encode(to:)(a1);
}

void __swiftcall BFMRequestMetadata.init(fileID:line:)(BFMRequestMetadata *__return_ptr retstr, Swift::String fileID, Swift::Int32 line)
{
  uint64_t v3 = *(void *)&line;
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v5 = (void *)sub_2289DEB90();
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_initWithFileID_line_, v5, v3);
}

id BFMRequestMetadata.init(fileID:line:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = v3 + OBJC_IVAR___BFMRequestMetadata_impl;
  *(void *)uint64_t v4 = a1;
  *(void *)(v4 + 8) = a2;
  *(_DWORD *)(v4 + 16) = a3;
  v6.super_class = (Class)BFMRequestMetadata;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t BFMRequestMetadata.fileID.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___BFMRequestMetadata_impl);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BFMRequestMetadata.line.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR___BFMRequestMetadata_impl + 16);
}

void __swiftcall BFMRequestMetadata.init()(BFMRequestMetadata *__return_ptr retstr)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  objc_msgSend(v1, sel_init);
}

void BFMRequestMetadata.init()()
{
}

void __swiftcall MRequestMetadata._bridgeToObjectiveC()(BFMRequestMetadata *__return_ptr retstr)
{
  uint64_t v2 = *(unsigned int *)(v1 + 16);
  id v3 = objc_allocWithZone((Class)BFMRequestMetadata);
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)sub_2289DEB90();
  objc_msgSend(v3, sel_initWithFileID_line_, v4, v2);

  swift_bridgeObjectRelease();
}

uint64_t static MRequestMetadata._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 8);
  int v5 = *(_DWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 16);
  *(void *)a2 = *(void *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl);
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t static MRequestMetadata._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 8);
  int v5 = *(_DWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 16);
  *(void *)a2 = *(void *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl);
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v5;
  swift_bridgeObjectRetain();
  return 1;
}

uint64_t static MRequestMetadata._unconditionallyBridgeFromObjectiveC(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    uint64_t v2 = a1 + OBJC_IVAR___BFMRequestMetadata_impl;
    uint64_t v4 = *(void *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl);
    uint64_t v3 = *(void *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 8);
    LODWORD(v2) = *(_DWORD *)(v2 + 16);
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v3;
    *(_DWORD *)(a2 + 16) = v2;
    return swift_bridgeObjectRetain();
  }
  else
  {
    sub_2289DF250();
    swift_bridgeObjectRelease();
    type metadata accessor for BFMRequestMetadata();
    sub_2289DF620();
    sub_2289DEC90();
    swift_bridgeObjectRelease();
    sub_2289DEC90();
    sub_2289DEC90();
    uint64_t result = sub_2289DF340();
    __break(1u);
  }
  return result;
}

unint64_t type metadata accessor for BFMRequestMetadata()
{
  unint64_t result = qword_268284960;
  if (!qword_268284960)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268284960);
  }
  return result;
}

id sub_2289A43FC()
{
  uint64_t v1 = *(unsigned int *)(v0 + 16);
  id v2 = objc_allocWithZone((Class)BFMRequestMetadata);
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)sub_2289DEB90();
  id v4 = objc_msgSend(v2, sel_initWithFileID_line_, v3, v1);

  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_2289A447C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 8);
  int v5 = *(_DWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 16);
  *(void *)a2 = *(void *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl);
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_2289A44D4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 8);
  int v5 = *(_DWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 16);
  *(void *)a2 = *(void *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl);
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v5;
  swift_bridgeObjectRetain();
  return 1;
}

uint64_t sub_2289A452C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MRequestMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for MRequestMetadata(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MRequestMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MRequestMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 20)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MRequestMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MRequestMetadata()
{
  return &type metadata for MRequestMetadata;
}

unsigned char *storeEnumTagSinglePayload for MRequestMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2289A4774);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MRequestMetadata.CodingKeys()
{
  return &type metadata for MRequestMetadata.CodingKeys;
}

unint64_t sub_2289A47B0()
{
  unint64_t result = qword_268284968;
  if (!qword_268284968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284968);
  }
  return result;
}

unint64_t sub_2289A4808()
{
  unint64_t result = qword_268284970;
  if (!qword_268284970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284970);
  }
  return result;
}

unint64_t sub_2289A4860()
{
  unint64_t result = qword_268284978;
  if (!qword_268284978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284978);
  }
  return result;
}

uint64_t sub_2289A48B4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4449656C6966 && a2 == 0xE600000000000000;
  if (v2 || (sub_2289DF480() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701734764 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_2289DF480();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t Dictionary<>.BOOLValue(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16))
  {
    long long v12 = 0u;
    long long v13 = 0u;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_2289D7094(a1, a2);
  if ((v7 & 1) == 0)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_228952C2C(*(void *)(a3 + 56) + 32 * v6, (uint64_t)&v12);
  swift_bridgeObjectRelease();
  if (!*((void *)&v13 + 1))
  {
LABEL_8:
    sub_228952B50((uint64_t)&v12);
    goto LABEL_9;
  }
  sub_22897D02C(&v12, v14);
  sub_228952C2C((uint64_t)v14, (uint64_t)&v12);
  if (swift_dynamicCast())
  {
    sub_2289559D0((uint64_t)v14);
    char v8 = v10;
LABEL_20:
    sub_2289559D0((uint64_t)&v12);
    return v8 & 1;
  }
  if (swift_dynamicCast())
  {
    sub_2289559D0((uint64_t)v14);
    char v8 = v10 != 0;
    goto LABEL_20;
  }
  if (swift_dynamicCast())
  {
    if (v10 == 1702195828 && v11 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      char v8 = 1;
    }
    else
    {
      char v8 = sub_2289DF480();
      swift_bridgeObjectRelease();
    }
    sub_2289559D0((uint64_t)v14);
    goto LABEL_20;
  }
  sub_2289559D0((uint64_t)v14);
  sub_2289559D0((uint64_t)&v12);
LABEL_9:
  char v8 = 0;
  return v8 & 1;
}

uint64_t Dictionary<>.intValue(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16))
  {
    long long v33 = 0u;
    long long v34 = 0u;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_2289D7094(a1, a2);
  if ((v7 & 1) == 0)
  {
    long long v33 = 0u;
    long long v34 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_228952C2C(*(void *)(a3 + 56) + 32 * v6, (uint64_t)&v33);
  swift_bridgeObjectRelease();
  if (!*((void *)&v34 + 1))
  {
LABEL_8:
    sub_228952B50((uint64_t)&v33);
    return 0;
  }
  sub_22897D02C(&v33, v35);
  sub_228952C2C((uint64_t)v35, (uint64_t)&v33);
  if (swift_dynamicCast())
  {
    sub_2289559D0((uint64_t)v35);
    uint64_t v8 = v31;
    sub_2289559D0((uint64_t)&v33);
    return v8;
  }
  if (!swift_dynamicCast())
  {
    sub_2289559D0((uint64_t)v35);
    sub_2289559D0((uint64_t)&v33);
    return 0;
  }
  uint64_t result = v31;
  unint64_t v10 = HIBYTE(v32) & 0xF;
  uint64_t v11 = v31 & 0xFFFFFFFFFFFFLL;
  if ((v32 & 0x2000000000000000) != 0) {
    unint64_t v12 = HIBYTE(v32) & 0xF;
  }
  else {
    unint64_t v12 = v31 & 0xFFFFFFFFFFFFLL;
  }
  if (!v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = 0;
LABEL_59:
    sub_2289559D0((uint64_t)v35);
    sub_2289559D0((uint64_t)&v33);
    return v8;
  }
  if ((v32 & 0x1000000000000000) != 0)
  {
    uint64_t v14 = (uint64_t)sub_2289A5844(v31, v32, 10);
    char v16 = v29;
LABEL_56:
    swift_bridgeObjectRelease();
    if (v16) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v14;
    }
    goto LABEL_59;
  }
  if ((v32 & 0x2000000000000000) == 0)
  {
    if ((v31 & 0x1000000000000000) != 0) {
      long long v13 = (unsigned __int8 *)((v32 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      long long v13 = (unsigned __int8 *)sub_2289DF2A0();
    }
    uint64_t v14 = (uint64_t)sub_2289A592C(v13, v11, 10);
    char v16 = v15 & 1;
    goto LABEL_56;
  }
  v30[0] = v31;
  v30[1] = v32 & 0xFFFFFFFFFFFFFFLL;
  if (v31 == 43)
  {
    if (!v10) {
      goto LABEL_70;
    }
    if (v10 == 1 || (BYTE1(v31) - 48) > 9u) {
      goto LABEL_43;
    }
    uint64_t v14 = (BYTE1(v31) - 48);
    if (v10 != 2)
    {
      if ((BYTE2(v31) - 48) > 9u) {
        goto LABEL_43;
      }
      uint64_t v14 = 10 * (BYTE1(v31) - 48) + (BYTE2(v31) - 48);
      unint64_t v17 = v10 - 3;
      if (v17)
      {
        uint64_t v18 = (unsigned __int8 *)v30 + 3;
        while (1)
        {
          unsigned int v19 = *v18 - 48;
          if (v19 > 9) {
            goto LABEL_43;
          }
          uint64_t v20 = 10 * v14;
          if ((unsigned __int128)(v14 * (__int128)10) >> 64 != (10 * v14) >> 63) {
            goto LABEL_43;
          }
          uint64_t v14 = v20 + v19;
          if (__OFADD__(v20, v19)) {
            goto LABEL_43;
          }
          char v16 = 0;
          ++v18;
          if (!--v17) {
            goto LABEL_56;
          }
        }
      }
    }
LABEL_55:
    char v16 = 0;
    goto LABEL_56;
  }
  if (v31 != 45)
  {
    if (!v10 || (v31 - 48) > 9u) {
      goto LABEL_43;
    }
    uint64_t v14 = (v31 - 48);
    if (v10 != 1)
    {
      if ((BYTE1(v31) - 48) > 9u) {
        goto LABEL_43;
      }
      uint64_t v14 = 10 * (v31 - 48) + (BYTE1(v31) - 48);
      unint64_t v21 = v10 - 2;
      if (v21)
      {
        uint64_t v22 = (unsigned __int8 *)v30 + 2;
        while (1)
        {
          unsigned int v23 = *v22 - 48;
          if (v23 > 9) {
            goto LABEL_43;
          }
          uint64_t v24 = 10 * v14;
          if ((unsigned __int128)(v14 * (__int128)10) >> 64 != (10 * v14) >> 63) {
            goto LABEL_43;
          }
          uint64_t v14 = v24 + v23;
          if (__OFADD__(v24, v23)) {
            goto LABEL_43;
          }
          char v16 = 0;
          ++v22;
          if (!--v21) {
            goto LABEL_56;
          }
        }
      }
    }
    goto LABEL_55;
  }
  if (v10)
  {
    if (v10 != 1 && (BYTE1(v31) - 48) <= 9u)
    {
      if (v10 == 2)
      {
        char v16 = 0;
        uint64_t v14 = -(uint64_t)(BYTE1(v31) - 48);
        goto LABEL_56;
      }
      if ((BYTE2(v31) - 48) <= 9u)
      {
        uint64_t v14 = -10 * (BYTE1(v31) - 48) - (BYTE2(v31) - 48);
        unint64_t v25 = v10 - 3;
        if (!v25) {
          goto LABEL_55;
        }
        uint64_t v26 = (unsigned __int8 *)v30 + 3;
        while (1)
        {
          unsigned int v27 = *v26 - 48;
          if (v27 > 9) {
            break;
          }
          uint64_t v28 = 10 * v14;
          if ((unsigned __int128)(v14 * (__int128)10) >> 64 != (10 * v14) >> 63) {
            break;
          }
          uint64_t v14 = v28 - v27;
          if (__OFSUB__(v28, v27)) {
            break;
          }
          char v16 = 0;
          ++v26;
          if (!--v25) {
            goto LABEL_56;
          }
        }
      }
    }
LABEL_43:
    uint64_t v14 = 0;
    char v16 = 1;
    goto LABEL_56;
  }
  __break(1u);
LABEL_70:
  __break(1u);
  return result;
}

uint64_t Dictionary<>.doubleValue(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16))
  {
    long long v18 = 0u;
    long long v19 = 0u;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_2289D7094(a1, a2);
  if ((v7 & 1) == 0)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_228952C2C(*(void *)(a3 + 56) + 32 * v6, (uint64_t)&v18);
  swift_bridgeObjectRelease();
  if (!*((void *)&v19 + 1))
  {
LABEL_9:
    sub_228952B50((uint64_t)&v18);
    goto LABEL_10;
  }
  sub_22897D02C(&v18, v20);
  sub_228952C2C((uint64_t)v20, (uint64_t)&v18);
  if (swift_dynamicCast())
  {
    sub_2289559D0((uint64_t)v20);
    double v8 = *(double *)&v16;
LABEL_6:
    sub_2289559D0((uint64_t)&v18);
    return *(void *)&v8;
  }
  uint64_t v10 = swift_dynamicCast();
  if (!v10)
  {
    sub_2289559D0((uint64_t)v20);
    if (swift_dynamicCast())
    {
      double v8 = (double)v16;
      goto LABEL_6;
    }
    sub_2289559D0((uint64_t)&v18);
LABEL_10:
    double v8 = 0.0;
    return *(void *)&v8;
  }
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  if ((v17 & 0x1000000000000000) != 0 || !(v17 & 0x2000000000000000 | v12 & 0x1000000000000000))
  {
    sub_2289DF240();
    swift_bridgeObjectRelease();
  }
  else
  {
    MEMORY[0x270FA5388](v11);
    if ((v17 & 0x2000000000000000) != 0)
    {
      if (v13 > 0x20u || ((0x100003E01uLL >> v13) & 1) == 0) {
        _swift_stdlib_strtod_clocale();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v13 & 0x1000000000000000) != 0)
      {
        uint64_t v14 = (v17 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v15 = v13 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v14 = sub_2289DF2A0();
      }
      sub_22897B5C4(v14, v15, (void (*)(uint64_t *__return_ptr))sub_2289A5C18);
      swift_bridgeObjectRelease();
    }
  }
  double v8 = 0.0;
  sub_2289559D0((uint64_t)v20);
  sub_2289559D0((uint64_t)&v18);
  return *(void *)&v8;
}

void *sub_2289A525C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_228952BB0(&qword_2682844F8);
  unsigned int v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  void v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_2289A52C4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_2289DED00();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x22A6A18C0](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_2289A5340()
{
  unint64_t v0 = sub_2289DED40();
  uint64_t v4 = sub_2289A53C0(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_2289A53C0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_2289A5518(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = sub_2289A525C(v9, 0);
      unint64_t v12 = sub_2289A5618((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        sub_2289DF2A0();
LABEL_4:
        JUMPOUT(0x22A6A1820);
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x22A6A1820](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x22A6A1820]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

uint64_t sub_2289A5518(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_2289A52C4(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_2289A52C4(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return MEMORY[0x270F9D808](a1, a2, a3, a4);
  }
  __break(1u);
  return MEMORY[0x270F9D808](a1, a2, a3, a4);
}

unint64_t sub_2289A5618(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_2289A52C4(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = sub_2289DECF0();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = sub_2289DF2A0();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_2289A52C4(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_2289DECC0();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unsigned __int8 *sub_2289A582C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_2289A592C(a1, a2, a3);
}

unsigned __int8 *sub_2289A5844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_2289DED30();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_2289A5340();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)sub_2289DF2A0();
  }
LABEL_7:
  uint64_t v11 = sub_2289A592C(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_2289A592C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  unint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

unsigned char *sub_2289A5BA8@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *sub_2289A5C18@<X0>(unsigned char *a1@<X8>)
{
  return sub_22897B624(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_2289A5C34()
{
  return static Notificationable.Name.getter();
}

uint64_t static Notificationable.Name.getter()
{
  swift_getMetatypeMetadata();
  sub_2289DEC00();
  uint64_t v0 = sub_2289DEB90();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2289A5C9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Notificationable.init(notification:)(a1, a2, a3);
}

uint64_t Notificationable.init(notification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v25[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned __int8 v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2289DE680();
  if (!v9) {
    goto LABEL_6;
  }
  unint64_t v10 = sub_22898BD98(v9);
  swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_6;
  }
  unsigned int v11 = self;
  char v12 = (void *)sub_2289DEA70();
  swift_bridgeObjectRelease();
  v25[0] = 0;
  id v13 = objc_msgSend(v11, sel_dataWithJSONObject_options_error_, v12, 1, v25);

  id v14 = v25[0];
  if (!v13)
  {
    unint64_t v18 = v14;
    unsigned int v19 = (void *)sub_2289DE7E0();

    swift_willThrow();
LABEL_6:
    uint64_t v20 = sub_2289DE690();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);
    uint64_t v23 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a3, v23, 1, a2);
  }
  uint64_t v15 = sub_2289DE8A0();
  unint64_t v17 = v16;

  sub_2289DE5E0();
  swift_allocObject();
  sub_2289DE5D0();
  sub_2289DE5C0();
  uint64_t v22 = sub_2289DE690();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(a1, v22);
  swift_release();
  sub_2289A5FD8(v15, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v8, a2);
  uint64_t v23 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a3, v23, 1, a2);
}

uint64_t sub_2289A5FD8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t Notificationable.toNotification(object:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  sub_2289DE610();
  swift_allocObject();
  sub_2289DE600();
  uint64_t v8 = sub_2289DE5F0();
  unint64_t v10 = v9;
  swift_release();
  unsigned int v11 = self;
  char v12 = (void *)sub_2289DE890();
  v21[0] = 0;
  id v13 = objc_msgSend(v11, sel_JSONObjectWithData_options_error_, v12, 4, v21);

  id v14 = v21[0];
  if (v13)
  {
    sub_2289DF1A0();
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v15 = v14;
    unint64_t v16 = (void *)sub_2289DE7E0();

    swift_willThrow();
    memset(v22, 0, sizeof(v22));
  }
  sub_2289A6378((uint64_t)v22, (uint64_t)v21);
  if (v21[3])
  {
    sub_228952BB0(&qword_268284980);
    if (swift_dynamicCast())
    {
      (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
      sub_2289A6378(a1, (uint64_t)v21);
      sub_2289A63E0(v20);
      swift_bridgeObjectRelease();
      sub_2289DE670();
      sub_2289A5FD8(v8, v10);
      sub_228952B50((uint64_t)v22);
      uint64_t v17 = sub_2289DE690();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a4, 0, 1, v17);
    }
    sub_2289A5FD8(v8, v10);
  }
  else
  {
    sub_2289A5FD8(v8, v10);
    sub_228952B50((uint64_t)v21);
  }
  sub_228952B50((uint64_t)v22);
  uint64_t v19 = sub_2289DE690();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a4, 1, 1, v19);
}

uint64_t sub_2289A6378(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_26AECF7D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2289A63E0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_228952BB0(&qword_268284748);
    uint64_t v2 = sub_2289DF3B0();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE80];
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_228952C2C(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_22897D02C(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_22897D02C(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_22897D02C(v36, v37);
    sub_22897D02C(v37, &v33);
    uint64_t result = sub_2289DF1E0();
    uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_22897D02C(&v33, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_22898D2D0();
    return v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of static Notificationable.Name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Notificationable.init(notification:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Notificationable.toNotification(object:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

unint64_t sub_2289A67E4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_228952BB0(&qword_268284740);
    uint64_t v2 = (void *)sub_2289DF3B0();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v30 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v29 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v35;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  unint64_t v9 = &type metadata for MResourceType;
  uint64_t v10 = &qword_268283FE8;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v17 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v17 >= v29) {
    goto LABEL_32;
  }
  unint64_t v18 = *(void *)(v30 + 8 * v17);
  int64_t v19 = i + 1;
  if (!v18)
  {
    int64_t v19 = i + 2;
    if (i + 2 >= v29) {
      goto LABEL_32;
    }
    unint64_t v18 = *(void *)(v30 + 8 * v19);
    if (!v18)
    {
      int64_t v19 = i + 3;
      if (i + 3 >= v29) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v30 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = i + 4;
        if (i + 4 >= v29) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v30 + 8 * v19);
        if (!v18)
        {
          int64_t v20 = i + 5;
          if (i + 5 < v29)
          {
            unint64_t v18 = *(void *)(v30 + 8 * v20);
            if (v18)
            {
              int64_t v19 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v19 = v20 + 1;
              if (__OFADD__(v20, 1)) {
                goto LABEL_36;
              }
              if (v19 >= v29) {
                break;
              }
              unint64_t v18 = *(void *)(v30 + 8 * v19);
              ++v20;
              if (v18) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_22898D2D0();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v32 = (v18 - 1) & v18;
  unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
  for (i = v19; ; unint64_t v16 = __clz(__rbit64(v5)) | (i << 6))
  {
    unint64_t v21 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v16);
    uint64_t v33 = *v21;
    uint64_t v34 = v21[1];
    swift_bridgeObjectRetain();
    sub_228952BB0(v10);
    swift_dynamicCast();
    char v22 = v35;
    unint64_t result = sub_2289D7094(v33, v34);
    unint64_t v23 = result;
    if (v24)
    {
      int64_t v31 = i;
      uint64_t v11 = v1;
      unint64_t v12 = v10;
      int64_t v13 = v6;
      unint64_t v14 = v9;
      int64_t v15 = (uint64_t *)(v2[6] + 16 * result);
      unint64_t result = swift_bridgeObjectRelease();
      uint64_t *v15 = v33;
      v15[1] = v34;
      unint64_t v9 = v14;
      uint64_t v6 = v13;
      uint64_t v10 = v12;
      uint64_t v1 = v11;
      *(unsigned char *)(v2[7] + v23) = v22;
      int64_t i = v31;
      unint64_t v5 = v32;
      if (!v32) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v25 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v25 = v33;
    v25[1] = v34;
    *(unsigned char *)(v2[7] + result) = v22;
    uint64_t v26 = v2[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_34;
    }
    v2[2] = v28;
    unint64_t v5 = v32;
    if (!v32) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v32 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t MCatalogRequest.fetch()()
{
  uint64_t v2 = sub_2289DE880();
  *(void *)(v1 + 208) = v2;
  *(void *)(v1 + 216) = *(void *)(v2 - 8);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = *(void **)v0;
  unint64_t v5 = *(void **)(v0 + 8);
  *(void *)(v1 + 224) = v3;
  *(void *)(v1 + 232) = v4;
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = *(void *)(v0 + 24);
  *(void *)(v1 + 240) = v5;
  *(void *)(v1 + 248) = v6;
  uint64_t v8 = *(void *)(v0 + 32);
  uint64_t v9 = *(void *)(v0 + 40);
  *(void *)(v1 + 256) = v7;
  *(void *)(v1 + 264) = v8;
  uint64_t v10 = *(void **)(v0 + 48);
  *(void *)(v1 + 272) = v9;
  *(void *)(v1 + 280) = v10;
  *(unsigned char *)(v1 + 193) = *(unsigned char *)(v0 + 56);
  uint64_t v11 = *(void *)(v0 + 72);
  *(void *)(v1 + 288) = *(void *)(v0 + 64);
  *(void *)(v1 + 296) = v11;
  unint64_t v12 = *(void **)(v0 + 80);
  *(void *)(v1 + 304) = v12;
  swift_bridgeObjectRetain();
  id v13 = v12;
  id v14 = v4;
  id v15 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v16 = v10;
  return MEMORY[0x270FA2498](sub_2289A6C3C, 0, 0);
}

uint64_t sub_2289A6C3C()
{
  id v1 = objc_msgSend(*(id *)(v0 + 304), sel_isBooksStoreEnabled);
  *(void *)(v0 + 312) = v1;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 184;
  *(void *)(v0 + 24) = sub_2289A6D58;
  uint64_t v2 = swift_continuation_init();
  *(void *)(v0 + 144) = MEMORY[0x263EF8330];
  *(void *)(v0 + 152) = 0x40000000;
  *(void *)(v0 + 160) = sub_2289A7E54;
  *(void *)(v0 + 168) = &unk_26484C170;
  *(void *)(v0 + 176) = v2;
  objc_msgSend(v1, sel_valueWithCompletion_, v0 + 144);
  return MEMORY[0x270FA23F0](v0 + 16);
}

uint64_t sub_2289A6D58()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 320) = v1;
  if (v1) {
    uint64_t v2 = sub_2289A7084;
  }
  else {
    uint64_t v2 = sub_2289A6E68;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2289A6E68()
{
  char v24 = *(void **)(v0 + 304);
  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v2 = *(void **)(v0 + 240);
  uint64_t v3 = *(void **)(v0 + 232);
  uint64_t v4 = *(void **)(v0 + 184);

  unsigned int v5 = objc_msgSend(v4, sel_BOOLValue);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (v5)
  {
    uint64_t v6 = *(void *)(v0 + 296);
    BOOL v25 = *(void **)(v0 + 304);
    char v7 = *(unsigned char *)(v0 + 193);
    uint64_t v9 = *(void **)(v0 + 280);
    uint64_t v8 = *(void *)(v0 + 288);
    uint64_t v11 = *(void *)(v0 + 264);
    uint64_t v10 = *(void *)(v0 + 272);
    uint64_t v12 = *(void *)(v0 + 256);
    id v13 = *(void **)(v0 + 232);
    id v14 = *(void **)(v0 + 240);
    *(void *)(v0 + 80) = *(void *)(v0 + 248);
    *(void *)(v0 + 88) = v12;
    *(void *)(v0 + 96) = v11;
    *(void *)(v0 + 104) = v10;
    *(void *)(v0 + 112) = v9;
    *(unsigned char *)(v0 + 120) = v7;
    *(void *)(v0 + 128) = v8;
    *(void *)(v0 + 136) = v6;
    id v15 = v13;
    id v16 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v17 = v9;
    swift_bridgeObjectRetain();
    id v18 = v25;
    int64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v19;
    void *v19 = v0;
    v19[1] = sub_2289A716C;
    uint64_t v20 = *(void *)(v0 + 224);
    return MCatalogRequestURLBuilder.build()(v20);
  }
  else
  {
    sub_2289A7F18();
    swift_allocError();
    *char v22 = 0;
    swift_willThrow();
    swift_task_dealloc();
    unint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
}

uint64_t sub_2289A7084()
{
  uint64_t v1 = (void *)v0[39];
  char v7 = (void *)v0[38];
  uint64_t v2 = (void *)v0[35];
  uint64_t v3 = (void *)v0[30];
  uint64_t v4 = (void *)v0[29];
  swift_willThrow();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  unsigned int v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_2289A716C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_2289A756C;
  }
  else
  {
    uint64_t v4 = *(void **)(v2 + 304);
    unsigned int v5 = *(void **)(v2 + 280);
    uint64_t v6 = *(void **)(v2 + 240);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v3 = sub_2289A72EC;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_2289A72EC()
{
  uint64_t v2 = (void *)v0[29];
  uint64_t v1 = (void *)v0[30];
  uint64_t v3 = (void *)sub_2289DE820();
  id v4 = objc_msgSend(v2, sel_requestWithURL_, v3);
  v0[43] = v4;

  id v5 = objc_msgSend(v1, sel_dataTaskPromiseWithRequestPromise_, v4);
  v0[44] = v5;
  uint64_t v6 = swift_task_alloc();
  v0[45] = v6;
  *(void *)(v6 + 16) = v5;
  char v7 = (void *)swift_task_alloc();
  v0[46] = v7;
  unint64_t v8 = sub_2289A7F74();
  *char v7 = v0;
  v7[1] = sub_2289A7450;
  return MEMORY[0x270FA2360](v0 + 25, 0, 0, 0x727028636E797361, 0xEF293A6573696D6FLL, sub_2289A7F6C, v6, v8);
}

uint64_t sub_2289A7450()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_2289A7704;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_2289A7634;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2289A756C()
{
  uint64_t v1 = *(void **)(v0 + 304);
  uint64_t v2 = *(void **)(v0 + 280);
  uint64_t v3 = *(void **)(v0 + 240);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_2289A7634()
{
  uint64_t v2 = (void *)v0[43];
  uint64_t v1 = (void *)v0[44];
  uint64_t v4 = v0[27];
  uint64_t v3 = v0[28];
  uint64_t v6 = (void *)v0[25];
  uint64_t v5 = v0[26];
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F27D10]), sel_initWithResult_, v6);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(id))v0[1];
  return v8(v7);
}

uint64_t sub_2289A7704()
{
  uint64_t v1 = (void *)v0[44];
  uint64_t v2 = (void *)v0[43];
  uint64_t v4 = v0[27];
  uint64_t v3 = v0[28];
  uint64_t v5 = v0[26];
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

__n128 MCatalogRequest.init(with:config:bag:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  __n128 v24 = (__n128)a1[1];
  long long v25 = *a1;
  uint64_t v23 = *((void *)a1 + 4);
  char v22 = *((unsigned char *)a1 + 40);
  uint64_t v6 = *((void *)a1 + 6);
  uint64_t v7 = *((void *)a1 + 7);
  uint64_t v8 = *(void **)(a2 + 8);
  uint64_t v9 = self;
  id v10 = a3;
  id v11 = objc_msgSend(v9, sel_defaultSessionConfiguration);
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F27EF0]), sel_initWithConfiguration_, v11);

  id v13 = objc_allocWithZone(MEMORY[0x263F27D20]);
  id v14 = v10;
  id v15 = v12;
  id v16 = (void *)sub_2289DEB90();
  swift_bridgeObjectRelease();
  id v17 = objc_msgSend(v13, sel_initWithClientIdentifier_bag_, v16, v14);

  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F27CF8]), sel_initWithTokenService_, v17);
  objc_msgSend(v15, sel_setProtocolHandler_, v18);

  id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F27D00]), sel_initWithTokenService_bag_, v17, v14);
  objc_msgSend(v19, sel_setAccount_, v8);

  id v20 = objc_msgSend(self, sel_currentProcess);
  objc_msgSend(v19, sel_setClientInfo_, v20);

  *(void *)a4 = v19;
  *(void *)(a4 + 8) = v15;
  __n128 result = v24;
  *(_OWORD *)(a4 + 16) = v25;
  *(__n128 *)(a4 + 32) = v24;
  *(void *)(a4 + 48) = v23;
  *(unsigned char *)(a4 + 56) = v22;
  *(void *)(a4 + 64) = v6;
  *(void *)(a4 + 72) = v7;
  *(void *)(a4 + 80) = v14;
  return result;
}

unint64_t MCatalogRequest.RequestError.description.getter()
{
  unint64_t v1 = 0xD000000000000019;
  uint64_t v2 = *v0;
  if (!*v0) {
    return 0xD000000000000036;
  }
  if (v2 != (void *)1)
  {
    id v3 = v2;
    sub_2289DF250();
    swift_bridgeObjectRelease();
    swift_getErrorValue();
    sub_2289DF510();
    sub_2289DEC90();
    swift_bridgeObjectRelease();
    sub_2289A7FB4(v2);
    return 0xD000000000000020;
  }
  return v1;
}

void sub_2289A7B58(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_228952BB0(&qword_2682849A0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_2289A8644;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2289A7DC8;
  aBlock[3] = &unk_26DD0CE60;
  uint64_t v9 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_addFinishBlock_, v9);
  _Block_release(v9);
}

uint64_t sub_2289A7D00(void *a1, void *a2)
{
  if (a1)
  {
    id v2 = a1;
    sub_228952BB0(&qword_2682849A0);
    return sub_2289DEF00();
  }
  else
  {
    if (a2)
    {
      sub_2289A7F18();
      swift_allocError();
      *uint64_t v5 = a2;
      id v6 = a2;
    }
    else
    {
      sub_2289A7F18();
      swift_allocError();
      *unint64_t v7 = 1;
    }
    sub_228952BB0(&qword_2682849A0);
    return sub_2289DEEF0();
  }
}

void sub_2289A7DC8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_2289A7E54(uint64_t a1, void *a2, char a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a4)
  {
    sub_228952BB0(&qword_268284630);
    uint64_t v6 = swift_allocError();
    *id v7 = a4;
    id v8 = a4;
    return MEMORY[0x270FA2410](v4, v6);
  }
  else
  {
    if (a2)
    {
      uint64_t v9 = *(void *)(*(void *)(v4 + 64) + 40);
      *(void *)uint64_t v9 = a2;
      *(unsigned char *)(v9 + 8) = a3;
      id v10 = a2;
      a1 = v4;
    }
    else
    {
      __break(1u);
    }
    return MEMORY[0x270FA2408](a1);
  }
}

unint64_t sub_2289A7F18()
{
  unint64_t result = qword_268284990;
  if (!qword_268284990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284990);
  }
  return result;
}

void sub_2289A7F6C(uint64_t a1)
{
  sub_2289A7B58(a1, *(void **)(v1 + 16));
}

unint64_t sub_2289A7F74()
{
  unint64_t result = qword_268284998;
  if (!qword_268284998)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268284998);
  }
  return result;
}

void sub_2289A7FB4(id a1)
{
  if ((unint64_t)a1 >= 2) {
}
  }

void destroy for MCatalogRequest(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  id v2 = *(void **)(a1 + 80);
}

uint64_t initializeWithCopy for MCatalogRequest(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  id v7 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v9;
  id v10 = v3;
  id v11 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v12 = v7;
  swift_bridgeObjectRetain();
  id v13 = v9;
  return a1;
}

uint64_t assignWithCopy for MCatalogRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v10 = *(void **)(a2 + 48);
  id v11 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v10;
  id v12 = v10;

  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v13 = *(void **)(a2 + 80);
  id v14 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = v13;
  id v15 = v13;

  return a1;
}

__n128 initializeWithTake for MCatalogRequest(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for MCatalogRequest(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  long long v5 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  id v6 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);

  return a1;
}

uint64_t getEnumTagSinglePayload for MCatalogRequest(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MCatalogRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MCatalogRequest()
{
  return &type metadata for MCatalogRequest;
}

void *initializeBufferWithCopyOfBuffer for MCatalogRequest.RequestError(void *a1, void **a2)
{
  id v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for MCatalogRequest.RequestError(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for MCatalogRequest.RequestError(void **a1, void **a2)
{
  id v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF) {
      id v7 = v4;
    }
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    id v5 = v4;
    id v6 = *a1;
    *a1 = v4;
  }
  return a1;
}

void *initializeWithTake for MCatalogRequest.RequestError(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void **assignWithTake for MCatalogRequest.RequestError(void **a1, unint64_t *a2)
{
  id v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for MCatalogRequest.RequestError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MCatalogRequest.RequestError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)__n128 result = 0;
    *(_DWORD *)__n128 result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_2289A8568(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_2289A8580(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MCatalogRequest.RequestError()
{
  return &type metadata for MCatalogRequest.RequestError;
}

uint64_t sub_2289A85B0()
{
  uint64_t v1 = sub_228952BB0(&qword_2682849A0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_2289A8644(void *a1, void *a2)
{
  sub_228952BB0(&qword_2682849A0);

  return sub_2289A7D00(a1, a2);
}

uint64_t sub_2289A86C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_2289A86D8()
{
  return swift_release();
}

uint64_t LibraryBookSeriesInfo.commonInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2289A86F0(v1, a1);
}

uint64_t sub_2289A86F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t LibraryBookSeriesInfo.kind.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for LibraryBookSeriesInfo();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t type metadata accessor for LibraryBookSeriesInfo()
{
  uint64_t result = qword_2682849C8;
  if (!qword_2682849C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t LibraryBookSeriesInfo.init(commonInfo:kind:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *a2;
  sub_2289A8814(a1, a3);
  uint64_t result = type metadata accessor for LibraryBookSeriesInfo();
  *(unsigned char *)(a3 + *(int *)(result + 20)) = v4;
  return result;
}

uint64_t sub_2289A8814(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2289A887C()
{
  return sub_2289A8A30(&qword_268284338, (void (*)(uint64_t))type metadata accessor for LibraryBookInfo);
}

uint64_t sub_2289A88C4(uint64_t a1)
{
  uint64_t result = sub_2289A8A30(&qword_2682849A8, (void (*)(uint64_t))type metadata accessor for LibraryBookSeriesInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2289A891C@<X0>(uint64_t a1@<X8>)
{
  return sub_2289A86F0(v1, a1);
}

uint64_t sub_2289A8928(uint64_t a1)
{
  uint64_t result = sub_2289A8A30(&qword_2682849B0, (void (*)(uint64_t))type metadata accessor for LibraryBookSeriesInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2289A8980(uint64_t a1)
{
  uint64_t result = sub_2289A8A30(&qword_2682849B8, (void (*)(uint64_t))type metadata accessor for LibraryBookSeriesInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2289A89D8(uint64_t a1)
{
  uint64_t result = sub_2289A8A30(&qword_2682849C0, (void (*)(uint64_t))type metadata accessor for LibraryBookSeriesInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2289A8A30(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for LibraryBookSeriesInfo(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    a1[10] = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v12 = (int *)sub_228952BB0(&qword_268284858);
    uint64_t v13 = v12[14];
    id v14 = (char *)a1 + v13;
    id v15 = (char *)a2 + v13;
    uint64_t v16 = sub_2289DE880();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_228952BB0(&qword_2682841E0);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    *(void *)((char *)a1 + v12[15]) = *(void *)((char *)a2 + v12[15]);
    uint64_t v20 = v12[16];
    unint64_t v21 = (char *)a1 + v20;
    char v22 = (char *)a2 + v20;
    *(void *)unint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    *(void *)((char *)a1 + v12[17]) = *(void *)((char *)a2 + v12[17]);
    *((unsigned char *)a1 + v12[18]) = *((unsigned char *)a2 + v12[18]);
    *(void *)((char *)a1 + v12[19]) = *(void *)((char *)a2 + v12[19]);
    *((unsigned char *)a1 + v12[20]) = *((unsigned char *)a2 + v12[20]);
    *((unsigned char *)a1 + v12[21]) = *((unsigned char *)a2 + v12[21]);
    uint64_t v23 = v12[22];
    __n128 v24 = (char *)a1 + v23;
    long long v25 = (char *)a2 + v23;
    uint64_t v26 = *((void *)v25 + 1);
    *(void *)__n128 v24 = *(void *)v25;
    *((void *)v24 + 1) = v26;
    v24[16] = v25[16];
    uint64_t v27 = v12[23];
    uint64_t v28 = (char *)a1 + v27;
    int64_t v29 = (char *)a2 + v27;
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    *(void *)((char *)a1 + v12[24]) = *(void *)((char *)a2 + v12[24]);
    *((unsigned char *)a1 + v12[25]) = *((unsigned char *)a2 + v12[25]);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for LibraryBookSeriesInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(sub_228952BB0(&qword_268284858) + 56);
  uint64_t v3 = sub_2289DE880();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for LibraryBookSeriesInfo(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = (int *)sub_228952BB0(&qword_268284858);
  uint64_t v12 = v11[14];
  uint64_t v13 = (char *)a1 + v12;
  id v14 = (char *)a2 + v12;
  uint64_t v15 = sub_2289DE880();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_228952BB0(&qword_2682841E0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(void *)((char *)a1 + v11[15]) = *(void *)((char *)a2 + v11[15]);
  uint64_t v18 = v11[16];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)((char *)a1 + v11[17]) = *(void *)((char *)a2 + v11[17]);
  *((unsigned char *)a1 + v11[18]) = *((unsigned char *)a2 + v11[18]);
  *(void *)((char *)a1 + v11[19]) = *(void *)((char *)a2 + v11[19]);
  *((unsigned char *)a1 + v11[20]) = *((unsigned char *)a2 + v11[20]);
  *((unsigned char *)a1 + v11[21]) = *((unsigned char *)a2 + v11[21]);
  uint64_t v21 = v11[22];
  char v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = *((void *)v23 + 1);
  *(void *)char v22 = *(void *)v23;
  *((void *)v22 + 1) = v24;
  v22[16] = v23[16];
  uint64_t v25 = v11[23];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  *(void *)((char *)a1 + v11[24]) = *(void *)((char *)a2 + v11[24]);
  *((unsigned char *)a1 + v11[25]) = *((unsigned char *)a2 + v11[25]);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LibraryBookSeriesInfo(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v5 = (int *)sub_228952BB0(&qword_268284858);
  uint64_t v6 = v5[14];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2289DE880();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_228952BB0(&qword_2682841E0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + v5[15]) = *(void *)((char *)a2 + v5[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = v5[16];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)v17;
  unsigned char v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  *(void *)((char *)a1 + v5[17]) = *(void *)((char *)a2 + v5[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v5[18]) = *((unsigned char *)a2 + v5[18]);
  *(void *)((char *)a1 + v5[19]) = *(void *)((char *)a2 + v5[19]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v5[20]) = *((unsigned char *)a2 + v5[20]);
  *((unsigned char *)a1 + v5[21]) = *((unsigned char *)a2 + v5[21]);
  uint64_t v19 = v5[22];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  *(void *)uint64_t v20 = *(void *)((char *)a2 + v19);
  *((void *)v20 + 1) = *(void *)((char *)a2 + v19 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20[16] = v21[16];
  uint64_t v22 = v5[23];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  char v25 = v24[8];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v25;
  *(void *)((char *)a1 + v5[24]) = *(void *)((char *)a2 + v5[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v5[25]) = *((unsigned char *)a2 + v5[25]);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for LibraryBookSeriesInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v6 = (int *)sub_228952BB0(&qword_268284858);
  uint64_t v7 = v6[14];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_2289DE880();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_228952BB0(&qword_2682841E0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(void *)(a1 + v6[15]) = *(void *)(a2 + v6[15]);
  uint64_t v13 = v6[16];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(void *)(a1 + v6[17]) = *(void *)(a2 + v6[17]);
  *(unsigned char *)(a1 + v6[18]) = *(unsigned char *)(a2 + v6[18]);
  *(void *)(a1 + v6[19]) = *(void *)(a2 + v6[19]);
  *(unsigned char *)(a1 + v6[20]) = *(unsigned char *)(a2 + v6[20]);
  *(unsigned char *)(a1 + v6[21]) = *(unsigned char *)(a2 + v6[21]);
  uint64_t v16 = v6[22];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  uint64_t v19 = v6[23];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  *(void *)(a1 + v6[24]) = *(void *)(a2 + v6[24]);
  *(unsigned char *)(a1 + v6[25]) = *(unsigned char *)(a2 + v6[25]);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithTake for LibraryBookSeriesInfo(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  a1[3] = a2[3];
  a1[4] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  a1[5] = a2[5];
  a1[6] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[10];
  a1[9] = a2[9];
  a1[10] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = (int *)sub_228952BB0(&qword_268284858);
  uint64_t v11 = v10[14];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_2289DE880();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = sub_228952BB0(&qword_2682841E0);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  *(void *)((char *)a1 + v10[15]) = *(void *)((char *)a2 + v10[15]);
  swift_bridgeObjectRelease();
  uint64_t v20 = v10[16];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)((char *)a1 + v10[17]) = *(void *)((char *)a2 + v10[17]);
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v10[18]) = *((unsigned char *)a2 + v10[18]);
  *(void *)((char *)a1 + v10[19]) = *(void *)((char *)a2 + v10[19]);
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v10[20]) = *((unsigned char *)a2 + v10[20]);
  *((unsigned char *)a1 + v10[21]) = *((unsigned char *)a2 + v10[21]);
  uint64_t v23 = v10[22];
  uint64_t v24 = (char *)a1 + v23;
  char v25 = (char *)a2 + v23;
  uint64_t v26 = *(void *)((char *)a2 + v23 + 8);
  *(void *)uint64_t v24 = *(void *)((char *)a2 + v23);
  *((void *)v24 + 1) = v26;
  swift_bridgeObjectRelease();
  v24[16] = v25[16];
  uint64_t v27 = v10[23];
  uint64_t v28 = (char *)a1 + v27;
  int64_t v29 = (char *)a2 + v27;
  v28[8] = v29[8];
  *(void *)uint64_t v28 = *(void *)v29;
  *(void *)((char *)a1 + v10[24]) = *(void *)((char *)a2 + v10[24]);
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v10[25]) = *((unsigned char *)a2 + v10[25]);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryBookSeriesInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2289A995C);
}

uint64_t sub_2289A995C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_228952BB0(&qword_268284858);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 5) {
      return v10 - 4;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for LibraryBookSeriesInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2289A9A30);
}

uint64_t sub_2289A9A30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_228952BB0(&qword_268284858);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 4;
  }
  return result;
}

void sub_2289A9AF0()
{
  sub_2289A9B84();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_2289A9B84()
{
  if (!qword_2682849D8)
  {
    type metadata accessor for LibraryBookInfo();
    sub_2289A8A30(&qword_268284338, (void (*)(uint64_t))type metadata accessor for LibraryBookInfo);
    unint64_t v0 = type metadata accessor for CommonLibrarySeriesInfo();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2682849D8);
    }
  }
}

uint64_t BookInfo.init(dataSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + *(int *)(type metadata accessor for BookInfo() + 20)) = 1;

  return sub_2289A9CB4(a1, a2);
}

uint64_t type metadata accessor for BookInfo()
{
  uint64_t result = qword_2682849F8;
  if (!qword_2682849F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2289A9CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284230);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t BookInfo.dataSource.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2289A9D28(v1, a1);
}

uint64_t sub_2289A9D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284230);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t BookInfo.assetType.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BookInfo() + 20));
}

uint64_t BookInfo.assetType.setter(char a1)
{
  uint64_t result = type metadata accessor for BookInfo();
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*BookInfo.assetType.modify())()
{
  return nullsub_1;
}

uint64_t BookInfo.contentKind.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_22899E880();
  swift_release();

  return swift_release();
}

uint64_t sub_2289A9EA0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_22899E880();
  swift_release();

  return swift_release();
}

uint64_t sub_2289A9F14@<X0>(uint64_t a1@<X8>)
{
  return sub_2289A9D28(v1, a1);
}

uint64_t sub_2289A9F20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + *(int *)(a2 + 20)) = 1;
  return sub_2289A9CB4(a1, a3);
}

uint64_t BookInfo.isIBA.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LibraryBookInfo();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_228952BB0(&qword_268284230);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unsigned int v10 = (void **)((char *)&v20 - v9);
  sub_2289A9D28(v1, (uint64_t)&v20 - v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v13 = *(void **)((char *)v10 + *(int *)(sub_228952BB0(&qword_2682846B0) + 48));
    sub_2289AA200((uint64_t)v10);
LABEL_8:
    uint64_t v14 = sub_2289D49E0(0);
    char v15 = sub_22897BD60(13, v14);

    swift_bridgeObjectRelease();
    return v15 & 1;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v13 = *v10;
    goto LABEL_8;
  }
  sub_2289AA13C((uint64_t)v10);
  sub_2289A9D28(v1, (uint64_t)v8);
  int v12 = swift_getEnumCaseMultiPayload();
  if (v12)
  {
    if (v12 != 1)
    {
      sub_2289AA13C((uint64_t)v8);
LABEL_13:
      char v15 = 0;
      return v15 & 1;
    }
  }
  else
  {
  }
  sub_2289AA19C((uint64_t)v8, (uint64_t)v4);
  uint64_t v16 = (uint64_t *)&v4[*(int *)(v2 + 28)];
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  sub_22896EED8(*v16, v18);
  sub_2289AA200((uint64_t)v4);
  if (v18 != 1)
  {
    sub_2289AA25C(v17, v18);
    goto LABEL_13;
  }
  char v15 = 1;
  return v15 & 1;
}

uint64_t sub_2289AA13C(uint64_t a1)
{
  uint64_t v2 = sub_228952BB0(&qword_268284230);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2289AA19C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LibraryBookInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2289AA200(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LibraryBookInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2289AA25C(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

id BookInfo.isRTL.getter()
{
  uint64_t v1 = sub_228952BB0(&qword_268284230);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (void **)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2289A9D28(v0, (uint64_t)v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v6 = *(void **)((char *)v3 + *(int *)(sub_228952BB0(&qword_2682846B0) + 48));
    sub_2289AA200((uint64_t)v3);
LABEL_6:
    id v5 = objc_msgSend(v6, sel_pagesAreRTL);

    return v5;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v6 = *v3;
    goto LABEL_6;
  }
  sub_2289AA13C((uint64_t)v3);
  return 0;
}

uint64_t BookInfo.pageCount.getter()
{
  uint64_t v1 = sub_228952BB0(&qword_268284230);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (void **)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2289A9D28(v0, (uint64_t)v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v6 = *(void **)((char *)v3 + *(int *)(sub_228952BB0(&qword_2682846B0) + 48));
    sub_2289AA200((uint64_t)v3);
LABEL_6:
    uint64_t v5 = MBook.pageCount.getter();

    return v5;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v6 = *v3;
    goto LABEL_6;
  }
  sub_2289AA13C((uint64_t)v3);
  return 0;
}

uint64_t sub_2289AA44C()
{
  return sub_2289AA5E4(&qword_268284338, (void (*)(uint64_t))type metadata accessor for LibraryBookInfo);
}

uint64_t sub_2289AA494(uint64_t a1)
{
  uint64_t result = sub_2289AA5E4(&qword_2682849E0, (void (*)(uint64_t))type metadata accessor for BookInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2289AA4EC()
{
  return sub_2289AA5E4(&qword_268284330, (void (*)(uint64_t))type metadata accessor for LibraryBookInfo);
}

uint64_t sub_2289AA534(uint64_t a1)
{
  uint64_t result = sub_2289AA5E4(&qword_2682849E8, (void (*)(uint64_t))type metadata accessor for BookInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2289AA58C(uint64_t a1)
{
  uint64_t result = sub_2289AA5E4(&qword_2682849F0, (void (*)(uint64_t))type metadata accessor for BookInfo);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2289AA5E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for BookInfo(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *(void *)a1 = *a2;
    a1 = &v18[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    sub_228952BB0(&qword_268284230);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v19 = *a2;
      *(void *)a1 = *a2;
      uint64_t v20 = v19;
    }
    else
    {
      uint64_t v176 = v6;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v8 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v8;
        uint64_t v9 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v9;
        unsigned int v10 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v10;
        uint64_t v11 = a2[7];
        *((void *)a1 + 6) = a2[6];
        *((void *)a1 + 7) = v11;
        int v12 = a2[9];
        *((void *)a1 + 8) = a2[8];
        *((void *)a1 + 9) = v12;
        *((void *)a1 + 10) = a2[10];
        uint64_t v13 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        uint64_t v14 = v13[10];
        __dst = &a1[v14];
        uint64_t v167 = (char *)a2 + v14;
        uint64_t v15 = sub_2289DE880();
        uint64_t v16 = *(void *)(v15 - 8);
        uint64_t v165 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v165(v167, 1, v15))
        {
          uint64_t v17 = sub_228952BB0(&qword_2682841E0);
          memcpy(__dst, v167, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v167, v15);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
        }
        uint64_t v31 = v13[11];
        uint64_t v32 = &a1[v31];
        uint64_t v33 = (char **)((char *)a2 + v31);
        uint64_t v34 = v33[1];
        *(void *)uint64_t v32 = *v33;
        *((void *)v32 + 1) = v34;
        uint64_t v35 = v13[12];
        uint64_t v36 = &a1[v35];
        uint64_t v37 = (char *)a2 + v35;
        v36[8] = v37[8];
        *(void *)uint64_t v36 = *(void *)v37;
        uint64_t v38 = v13[13];
        long long v39 = &a1[v38];
        uint64_t v40 = (char **)((char *)a2 + v38);
        uint64_t v41 = v40[1];
        *(void *)long long v39 = *v40;
        *((void *)v39 + 1) = v41;
        uint64_t v42 = v13[14];
        unint64_t v170 = &a1[v42];
        uint64_t v43 = (char *)a2 + v42;
        uint64_t v44 = sub_2289DE910();
        uint64_t v45 = *(void *)(v44 - 8);
        uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dsta = (void (**)(void *, const void *, uint64_t))v45;
        if (v46(v43, 1, v44))
        {
          uint64_t v47 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v170, v43, *(void *)(*(void *)(v47 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v170, v43, v44);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v170, 0, 1, v44);
        }
        uint64_t v48 = v13[15];
        uint64_t v49 = &a1[v48];
        uint64_t v50 = (char **)((char *)a2 + v48);
        uint64_t v51 = v50[1];
        *(void *)uint64_t v49 = *v50;
        *((void *)v49 + 1) = v51;
        uint64_t v52 = v13[16];
        uint64_t v53 = &a1[v52];
        uint64_t v54 = (char **)((char *)a2 + v52);
        uint64_t v55 = v54[1];
        *(void *)uint64_t v53 = *v54;
        *((void *)v53 + 1) = v55;
        a1[v13[17]] = *((unsigned char *)a2 + v13[17]);
        *(void *)&a1[v13[18]] = *(char **)((char *)a2 + v13[18]);
        a1[v13[19]] = *((unsigned char *)a2 + v13[19]);
        a1[v13[20]] = *((unsigned char *)a2 + v13[20]);
        a1[v13[21]] = *((unsigned char *)a2 + v13[21]);
        a1[v13[22]] = *((unsigned char *)a2 + v13[22]);
        a1[v13[23]] = *((unsigned char *)a2 + v13[23]);
        a1[v13[24]] = *((unsigned char *)a2 + v13[24]);
        a1[v13[25]] = *((unsigned char *)a2 + v13[25]);
        a1[v13[26]] = *((unsigned char *)a2 + v13[26]);
        a1[v13[27]] = *((unsigned char *)a2 + v13[27]);
        a1[v13[28]] = *((unsigned char *)a2 + v13[28]);
        a1[v13[29]] = *((unsigned char *)a2 + v13[29]);
        uint64_t v56 = v13[30];
        uint64_t v57 = &a1[v56];
        uint64_t v58 = (char **)((char *)a2 + v56);
        uint64_t v59 = v58[1];
        *(void *)uint64_t v57 = *v58;
        *((void *)v57 + 1) = v59;
        uint64_t v60 = v13[31];
        uint64_t v61 = &a1[v60];
        uint64_t v62 = (char *)a2 + v60;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v46(v62, 1, v44))
        {
          uint64_t v63 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
          uint64_t v64 = __dsta;
        }
        else
        {
          uint64_t v64 = __dsta;
          __dsta[2](v61, v62, v44);
          ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v61, 0, 1, v44);
        }
        uint64_t v65 = v13[32];
        uint64_t v66 = &a1[v65];
        uint64_t v67 = (char *)a2 + v65;
        *(void *)uint64_t v66 = *(void *)v67;
        v66[8] = v67[8];
        *(void *)&a1[v13[33]] = *(char **)((char *)a2 + v13[33]);
        uint64_t v68 = v13[34];
        uint64_t v69 = &a1[v68];
        uint64_t v70 = (char *)a2 + v68;
        if (v46((char *)a2 + v68, 1, v44))
        {
          uint64_t v71 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v69, v70, *(void *)(*(void *)(v71 - 8) + 64));
        }
        else
        {
          v64[2](v69, v70, v44);
          ((void (*)(char *, void, uint64_t, uint64_t))v64[7])(v69, 0, 1, v44);
        }
        uint64_t v72 = v13[35];
        uint64_t v73 = &a1[v72];
        uint64_t v74 = (char **)((char *)a2 + v72);
        uint64_t v75 = v74[1];
        *(void *)uint64_t v73 = *v74;
        *((void *)v73 + 1) = v75;
        uint64_t v76 = v13[36];
        long long v77 = &a1[v76];
        uint64_t v78 = (char *)a2 + v76;
        *(void *)(v77 + 13) = *(void *)(v78 + 13);
        *(_OWORD *)long long v77 = *(_OWORD *)v78;
        uint64_t v79 = v13[37];
        uint64_t v80 = &a1[v79];
        uint64_t v81 = (char *)a2 + v79;
        v80[8] = v81[8];
        *(void *)uint64_t v80 = *(void *)v81;
        uint64_t v82 = v13[38];
        uint64_t v83 = &a1[v82];
        uint64_t v84 = (char *)a2 + v82;
        v83[4] = v84[4];
        *(_DWORD *)uint64_t v83 = *(_DWORD *)v84;
        uint64_t v85 = (int *)type metadata accessor for LibraryBookInfo();
        uint64_t v86 = v85[5];
        uint64_t v87 = &a1[v86];
        uint64_t v88 = (char *)a2 + v86;
        uint64_t v89 = *(uint64_t *)((char *)a2 + v86 + 24);
        swift_bridgeObjectRetain();
        if (v89)
        {
          uint64_t v90 = *((void *)v88 + 4);
          *((void *)v87 + 3) = v89;
          *((void *)v87 + 4) = v90;
          (**(void (***)(char *, char *, uint64_t))(v89 - 8))(v87, v88, v89);
        }
        else
        {
          long long v91 = *((_OWORD *)v88 + 1);
          *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
          *((_OWORD *)v87 + 1) = v91;
          *((void *)v87 + 4) = *((void *)v88 + 4);
        }
        a1[v85[6]] = *((unsigned char *)a2 + v85[6]);
        uint64_t v92 = v85[7];
        uint64_t v93 = &a1[v92];
        uint64_t v94 = (char **)((char *)a2 + v92);
        uint64_t v95 = v94[1];
        if ((unint64_t)(v95 - 1) >= 2)
        {
          *(void *)uint64_t v93 = *v94;
          *((void *)v93 + 1) = v95;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
        }
        uint64_t v6 = v176;
      }
      else
      {
        uint64_t v21 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v21;
        uint64_t v22 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v22;
        uint64_t v23 = a2[5];
        *((void *)a1 + 4) = a2[4];
        *((void *)a1 + 5) = v23;
        uint64_t v24 = a2[7];
        *((void *)a1 + 6) = a2[6];
        *((void *)a1 + 7) = v24;
        char v25 = a2[9];
        *((void *)a1 + 8) = a2[8];
        *((void *)a1 + 9) = v25;
        *((void *)a1 + 10) = a2[10];
        uint64_t v26 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        uint64_t v27 = v26[10];
        uint64_t v168 = &a1[v27];
        uint64_t v28 = (char *)a2 + v27;
        uint64_t v29 = sub_2289DE880();
        uint64_t v166 = *(void *)(v29 - 8);
        BOOL v169 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v166 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v169(v28, 1, v29))
        {
          uint64_t v30 = sub_228952BB0(&qword_2682841E0);
          memcpy(v168, v28, *(void *)(*(void *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v168, v28, v29);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v166 + 56))(v168, 0, 1, v29);
        }
        uint64_t v96 = v26[11];
        uint64_t v97 = &a1[v96];
        uint64_t v98 = (char **)((char *)a2 + v96);
        uint64_t v99 = v98[1];
        *(void *)uint64_t v97 = *v98;
        *((void *)v97 + 1) = v99;
        uint64_t v100 = v26[12];
        long long v101 = &a1[v100];
        uint64_t v102 = (char *)a2 + v100;
        v101[8] = v102[8];
        *(void *)long long v101 = *(void *)v102;
        uint64_t v103 = v26[13];
        uint64_t v104 = &a1[v103];
        uint64_t v105 = (char **)((char *)a2 + v103);
        uint64_t v106 = v105[1];
        *(void *)uint64_t v104 = *v105;
        *((void *)v104 + 1) = v106;
        uint64_t v107 = v26[14];
        uint64_t v171 = &a1[v107];
        uint64_t v108 = (char *)a2 + v107;
        uint64_t v109 = sub_2289DE910();
        uint64_t v110 = *(void *)(v109 - 8);
        uint64_t v111 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dstb = v111;
        uint64_t v172 = v110;
        if (v111(v108, 1, v109))
        {
          uint64_t v112 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v171, v108, *(void *)(*(void *)(v112 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v171, v108, v109);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(v171, 0, 1, v109);
        }
        uint64_t v113 = v26[15];
        uint64_t v114 = &a1[v113];
        uint64_t v115 = (char **)((char *)a2 + v113);
        uint64_t v116 = v115[1];
        *(void *)uint64_t v114 = *v115;
        *((void *)v114 + 1) = v116;
        uint64_t v117 = v26[16];
        uint64_t v118 = &a1[v117];
        uint64_t v119 = (char **)((char *)a2 + v117);
        uint64_t v120 = v119[1];
        *(void *)uint64_t v118 = *v119;
        *((void *)v118 + 1) = v120;
        a1[v26[17]] = *((unsigned char *)a2 + v26[17]);
        *(void *)&a1[v26[18]] = *(char **)((char *)a2 + v26[18]);
        a1[v26[19]] = *((unsigned char *)a2 + v26[19]);
        a1[v26[20]] = *((unsigned char *)a2 + v26[20]);
        a1[v26[21]] = *((unsigned char *)a2 + v26[21]);
        a1[v26[22]] = *((unsigned char *)a2 + v26[22]);
        a1[v26[23]] = *((unsigned char *)a2 + v26[23]);
        a1[v26[24]] = *((unsigned char *)a2 + v26[24]);
        a1[v26[25]] = *((unsigned char *)a2 + v26[25]);
        a1[v26[26]] = *((unsigned char *)a2 + v26[26]);
        a1[v26[27]] = *((unsigned char *)a2 + v26[27]);
        a1[v26[28]] = *((unsigned char *)a2 + v26[28]);
        a1[v26[29]] = *((unsigned char *)a2 + v26[29]);
        uint64_t v121 = v26[30];
        uint64_t v122 = &a1[v121];
        uint64_t v123 = (char **)((char *)a2 + v121);
        uint64_t v124 = v123[1];
        *(void *)uint64_t v122 = *v123;
        *((void *)v122 + 1) = v124;
        uint64_t v125 = v26[31];
        uint64_t v126 = &a1[v125];
        uint64_t v127 = (char *)a2 + v125;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__dstb(v127, 1, v109))
        {
          uint64_t v128 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v126, v127, *(void *)(*(void *)(v128 - 8) + 64));
          uint64_t v129 = v172;
        }
        else
        {
          uint64_t v129 = v172;
          (*(void (**)(char *, char *, uint64_t))(v172 + 16))(v126, v127, v109);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v172 + 56))(v126, 0, 1, v109);
        }
        uint64_t v130 = v26[32];
        uint64_t v131 = &a1[v130];
        uint64_t v132 = (char *)a2 + v130;
        *(void *)uint64_t v131 = *(void *)v132;
        v131[8] = v132[8];
        *(void *)&a1[v26[33]] = *(char **)((char *)a2 + v26[33]);
        uint64_t v133 = v26[34];
        long long v134 = &a1[v133];
        long long v135 = (char *)a2 + v133;
        if (__dstb((char *)a2 + v133, 1, v109))
        {
          uint64_t v136 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v134, v135, *(void *)(*(void *)(v136 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v134, v135, v109);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v129 + 56))(v134, 0, 1, v109);
        }
        uint64_t v137 = v26[35];
        uint64_t v138 = &a1[v137];
        id v139 = (char **)((char *)a2 + v137);
        uint64_t v140 = v139[1];
        *(void *)uint64_t v138 = *v139;
        *((void *)v138 + 1) = v140;
        uint64_t v141 = v26[36];
        uint64_t v142 = &a1[v141];
        uint64_t v143 = (char *)a2 + v141;
        *(void *)(v142 + 13) = *(void *)(v143 + 13);
        *(_OWORD *)uint64_t v142 = *(_OWORD *)v143;
        uint64_t v144 = v26[37];
        uint64_t v145 = &a1[v144];
        uint64_t v146 = (char *)a2 + v144;
        v145[8] = v146[8];
        *(void *)uint64_t v145 = *(void *)v146;
        uint64_t v147 = v26[38];
        uint64_t v148 = &a1[v147];
        uint64_t v149 = (char *)a2 + v147;
        v148[4] = v149[4];
        *(_DWORD *)uint64_t v148 = *(_DWORD *)v149;
        id v150 = (int *)type metadata accessor for LibraryBookInfo();
        uint64_t v151 = v150[5];
        uint64_t v152 = &a1[v151];
        id v153 = (char *)a2 + v151;
        uint64_t v154 = *(uint64_t *)((char *)a2 + v151 + 24);
        swift_bridgeObjectRetain();
        if (v154)
        {
          uint64_t v155 = *((void *)v153 + 4);
          *((void *)v152 + 3) = v154;
          *((void *)v152 + 4) = v155;
          (**(void (***)(char *, char *, uint64_t))(v154 - 8))(v152, v153, v154);
        }
        else
        {
          long long v156 = *((_OWORD *)v153 + 1);
          *(_OWORD *)uint64_t v152 = *(_OWORD *)v153;
          *((_OWORD *)v152 + 1) = v156;
          *((void *)v152 + 4) = *((void *)v153 + 4);
        }
        a1[v150[6]] = *((unsigned char *)a2 + v150[6]);
        uint64_t v157 = v150[7];
        uint64_t v158 = &a1[v157];
        uint64_t v159 = (char **)((char *)a2 + v157);
        uint64_t v160 = v159[1];
        if ((unint64_t)(v160 - 1) >= 2)
        {
          *(void *)uint64_t v158 = *v159;
          *((void *)v158 + 1) = v160;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)uint64_t v158 = *(_OWORD *)v159;
        }
        uint64_t v6 = v176;
        uint64_t v161 = *(int *)(sub_228952BB0(&qword_2682846B0) + 48);
        uint64_t v162 = *(char **)((char *)a2 + v161);
        *(void *)&a1[v161] = v162;
        id v163 = v162;
      }
    }
    swift_storeEnumTagMultiPayload();
    a1[*(int *)(v6 + 20)] = *((unsigned char *)a2 + *(int *)(v6 + 20));
  }
  return a1;
}

void destroy for BookInfo(void **a1)
{
  sub_228952BB0(&qword_268284230);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v15 = *a1;
LABEL_18:

    return;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    uint64_t v4 = (char *)a1 + v3[10];
    uint64_t v5 = sub_2289DE880();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = (char *)a1 + v3[14];
    uint64_t v8 = sub_2289DE910();
    uint64_t v9 = *(void *)(v8 - 8);
    unsigned int v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    if (!v10(v7, 1, v8)) {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = (char *)a1 + v3[31];
    if (!v10(v11, 1, v8)) {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    int v12 = (char *)a1 + v3[34];
    if (!v10(v12, 1, v8)) {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = type metadata accessor for LibraryBookInfo();
    uint64_t v14 = (uint64_t)a1 + *(int *)(v13 + 20);
    if (*(void *)(v14 + 24)) {
      sub_2289559D0(v14);
    }
    if (*(char **)((char *)a1 + *(int *)(v13 + 28) + 8) - 1 >= (char *)2) {
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = *(void **)((char *)a1 + *(int *)(sub_228952BB0(&qword_2682846B0) + 48));
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v17 = (char *)a1 + v16[10];
  uint64_t v18 = sub_2289DE880();
  uint64_t v19 = *(void *)(v18 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = (char *)a1 + v16[14];
  uint64_t v21 = sub_2289DE910();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (!v23(v20, 1, v21)) {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = (char *)a1 + v16[31];
  if (!v23(v24, 1, v21)) {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  }
  char v25 = (char *)a1 + v16[34];
  if (!v23(v25, 1, v21)) {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = type metadata accessor for LibraryBookInfo();
  uint64_t v27 = (uint64_t)a1 + *(int *)(v26 + 20);
  if (*(void *)(v27 + 24)) {
    sub_2289559D0(v27);
  }
  if (*(char **)((char *)a1 + *(int *)(v26 + 28) + 8) - 1 >= (char *)2)
  {
    swift_bridgeObjectRelease();
  }
}

void *initializeWithCopy for BookInfo(void *a1, uint64_t a2, uint64_t a3)
{
  sub_228952BB0(&qword_268284230);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v17 = *(void **)a2;
    *a1 = *(void *)a2;
    id v18 = v17;
  }
  else
  {
    uint64_t v174 = a3;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *(void *)(a2 + 8);
      *a1 = *(void *)a2;
      a1[1] = v7;
      uint64_t v8 = *(void *)(a2 + 24);
      a1[2] = *(void *)(a2 + 16);
      a1[3] = v8;
      uint64_t v9 = *(void *)(a2 + 40);
      a1[4] = *(void *)(a2 + 32);
      a1[5] = v9;
      uint64_t v10 = *(void *)(a2 + 56);
      a1[6] = *(void *)(a2 + 48);
      a1[7] = v10;
      uint64_t v11 = *(void *)(a2 + 72);
      a1[8] = *(void *)(a2 + 64);
      a1[9] = v11;
      a1[10] = *(void *)(a2 + 80);
      int v12 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      uint64_t v13 = v12[10];
      __dst = (char *)a1 + v13;
      uint64_t v164 = (void *)(a2 + v13);
      uint64_t v14 = sub_2289DE880();
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v162 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v162(v164, 1, v14))
      {
        uint64_t v16 = sub_228952BB0(&qword_2682841E0);
        memcpy(__dst, v164, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(v15 + 16))(__dst, v164, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
      }
      uint64_t v28 = v12[11];
      uint64_t v29 = (void *)((char *)a1 + v28);
      uint64_t v30 = (void *)(a2 + v28);
      uint64_t v31 = v30[1];
      *uint64_t v29 = *v30;
      v29[1] = v31;
      uint64_t v32 = v12[12];
      uint64_t v33 = (char *)a1 + v32;
      uint64_t v34 = a2 + v32;
      v33[8] = *(unsigned char *)(v34 + 8);
      *(void *)uint64_t v33 = *(void *)v34;
      uint64_t v35 = v12[13];
      uint64_t v36 = (void *)((char *)a1 + v35);
      uint64_t v37 = (void *)(a2 + v35);
      uint64_t v38 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v38;
      uint64_t v39 = v12[14];
      uint64_t v167 = (char *)a1 + v39;
      uint64_t v40 = (const void *)(a2 + v39);
      uint64_t v41 = sub_2289DE910();
      uint64_t v42 = *(void *)(v41 - 8);
      uint64_t v43 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __dsta = (void (**)(void *, const void *, uint64_t))v42;
      if (v43(v40, 1, v41))
      {
        uint64_t v44 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v167, v40, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v42 + 16))(v167, v40, v41);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v167, 0, 1, v41);
      }
      uint64_t v45 = v12[15];
      uint64_t v46 = (void *)((char *)a1 + v45);
      uint64_t v47 = (void *)(a2 + v45);
      uint64_t v48 = v47[1];
      *uint64_t v46 = *v47;
      v46[1] = v48;
      uint64_t v49 = v12[16];
      uint64_t v50 = (void *)((char *)a1 + v49);
      uint64_t v51 = (void *)(a2 + v49);
      uint64_t v52 = v51[1];
      void *v50 = *v51;
      v50[1] = v52;
      *((unsigned char *)a1 + v12[17]) = *(unsigned char *)(a2 + v12[17]);
      *(void *)((char *)a1 + v12[18]) = *(void *)(a2 + v12[18]);
      *((unsigned char *)a1 + v12[19]) = *(unsigned char *)(a2 + v12[19]);
      *((unsigned char *)a1 + v12[20]) = *(unsigned char *)(a2 + v12[20]);
      *((unsigned char *)a1 + v12[21]) = *(unsigned char *)(a2 + v12[21]);
      *((unsigned char *)a1 + v12[22]) = *(unsigned char *)(a2 + v12[22]);
      *((unsigned char *)a1 + v12[23]) = *(unsigned char *)(a2 + v12[23]);
      *((unsigned char *)a1 + v12[24]) = *(unsigned char *)(a2 + v12[24]);
      *((unsigned char *)a1 + v12[25]) = *(unsigned char *)(a2 + v12[25]);
      *((unsigned char *)a1 + v12[26]) = *(unsigned char *)(a2 + v12[26]);
      *((unsigned char *)a1 + v12[27]) = *(unsigned char *)(a2 + v12[27]);
      *((unsigned char *)a1 + v12[28]) = *(unsigned char *)(a2 + v12[28]);
      *((unsigned char *)a1 + v12[29]) = *(unsigned char *)(a2 + v12[29]);
      uint64_t v53 = v12[30];
      uint64_t v54 = (void *)((char *)a1 + v53);
      uint64_t v55 = (void *)(a2 + v53);
      uint64_t v56 = v55[1];
      *uint64_t v54 = *v55;
      v54[1] = v56;
      uint64_t v57 = v12[31];
      uint64_t v58 = (char *)a1 + v57;
      uint64_t v59 = (const void *)(a2 + v57);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v43(v59, 1, v41))
      {
        uint64_t v60 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64));
        uint64_t v61 = __dsta;
      }
      else
      {
        uint64_t v61 = __dsta;
        __dsta[2](v58, v59, v41);
        ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v58, 0, 1, v41);
      }
      uint64_t v62 = v12[32];
      uint64_t v63 = (char *)a1 + v62;
      uint64_t v64 = a2 + v62;
      *(void *)uint64_t v63 = *(void *)v64;
      v63[8] = *(unsigned char *)(v64 + 8);
      *(void *)((char *)a1 + v12[33]) = *(void *)(a2 + v12[33]);
      uint64_t v65 = v12[34];
      uint64_t v66 = (char *)a1 + v65;
      uint64_t v67 = (const void *)(a2 + v65);
      if (v43((const void *)(a2 + v65), 1, v41))
      {
        uint64_t v68 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v66, v67, *(void *)(*(void *)(v68 - 8) + 64));
      }
      else
      {
        v61[2](v66, v67, v41);
        ((void (*)(char *, void, uint64_t, uint64_t))v61[7])(v66, 0, 1, v41);
      }
      uint64_t v69 = v12[35];
      uint64_t v70 = (void *)((char *)a1 + v69);
      uint64_t v71 = (void *)(a2 + v69);
      uint64_t v72 = v71[1];
      void *v70 = *v71;
      v70[1] = v72;
      uint64_t v73 = v12[36];
      uint64_t v74 = (char *)a1 + v73;
      uint64_t v75 = a2 + v73;
      *(void *)(v74 + 13) = *(void *)(v75 + 13);
      *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
      uint64_t v76 = v12[37];
      long long v77 = (char *)a1 + v76;
      uint64_t v78 = a2 + v76;
      v77[8] = *(unsigned char *)(v78 + 8);
      *(void *)long long v77 = *(void *)v78;
      uint64_t v79 = v12[38];
      uint64_t v80 = (char *)a1 + v79;
      uint64_t v81 = a2 + v79;
      v80[4] = *(unsigned char *)(v81 + 4);
      *(_DWORD *)uint64_t v80 = *(_DWORD *)v81;
      uint64_t v82 = (int *)type metadata accessor for LibraryBookInfo();
      uint64_t v83 = v82[5];
      uint64_t v84 = (char *)a1 + v83;
      uint64_t v85 = a2 + v83;
      uint64_t v86 = *(void *)(a2 + v83 + 24);
      swift_bridgeObjectRetain();
      if (v86)
      {
        uint64_t v87 = *(void *)(v85 + 32);
        *((void *)v84 + 3) = v86;
        *((void *)v84 + 4) = v87;
        (**(void (***)(char *, uint64_t, uint64_t))(v86 - 8))(v84, v85, v86);
      }
      else
      {
        long long v88 = *(_OWORD *)(v85 + 16);
        *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
        *((_OWORD *)v84 + 1) = v88;
        *((void *)v84 + 4) = *(void *)(v85 + 32);
      }
      *((unsigned char *)a1 + v82[6]) = *(unsigned char *)(a2 + v82[6]);
      uint64_t v89 = v82[7];
      uint64_t v90 = (void *)((char *)a1 + v89);
      long long v91 = (void *)(a2 + v89);
      uint64_t v92 = v91[1];
      if ((unint64_t)(v92 - 1) >= 2)
      {
        *uint64_t v90 = *v91;
        v90[1] = v92;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
      }
      a3 = v174;
    }
    else
    {
      uint64_t v19 = *(void *)(a2 + 8);
      *a1 = *(void *)a2;
      a1[1] = v19;
      uint64_t v20 = *(void *)(a2 + 24);
      a1[2] = *(void *)(a2 + 16);
      a1[3] = v20;
      uint64_t v21 = *(void *)(a2 + 40);
      a1[4] = *(void *)(a2 + 32);
      a1[5] = v21;
      uint64_t v22 = *(void *)(a2 + 56);
      a1[6] = *(void *)(a2 + 48);
      a1[7] = v22;
      uint64_t v23 = *(void *)(a2 + 72);
      a1[8] = *(void *)(a2 + 64);
      a1[9] = v23;
      a1[10] = *(void *)(a2 + 80);
      uint64_t v24 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      uint64_t v25 = v24[10];
      uint64_t v165 = (char *)a1 + v25;
      uint64_t v166 = (void *)(a2 + v25);
      uint64_t v26 = sub_2289DE880();
      uint64_t v163 = *(void *)(v26 - 8);
      BOOL v169 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v163 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v169(v166, 1, v26))
      {
        uint64_t v27 = sub_228952BB0(&qword_2682841E0);
        memcpy(v165, v166, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(v163 + 16))(v165, v166, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v163 + 56))(v165, 0, 1, v26);
      }
      uint64_t v93 = v24[11];
      uint64_t v94 = (void *)((char *)a1 + v93);
      uint64_t v95 = (void *)(a2 + v93);
      uint64_t v96 = v95[1];
      void *v94 = *v95;
      v94[1] = v96;
      uint64_t v97 = v24[12];
      uint64_t v98 = (char *)a1 + v97;
      uint64_t v99 = a2 + v97;
      v98[8] = *(unsigned char *)(v99 + 8);
      *(void *)uint64_t v98 = *(void *)v99;
      uint64_t v100 = v24[13];
      long long v101 = (void *)((char *)a1 + v100);
      uint64_t v102 = (void *)(a2 + v100);
      uint64_t v103 = v102[1];
      *long long v101 = *v102;
      v101[1] = v103;
      uint64_t v104 = v24[14];
      uint64_t v168 = (char *)a1 + v104;
      uint64_t v105 = (const void *)(a2 + v104);
      uint64_t v106 = sub_2289DE910();
      uint64_t v107 = *(void *)(v106 - 8);
      uint64_t v108 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v107 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __dstb = v108;
      uint64_t v170 = v107;
      if (v108(v105, 1, v106))
      {
        uint64_t v109 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v168, v105, *(void *)(*(void *)(v109 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v107 + 16))(v168, v105, v106);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(v168, 0, 1, v106);
      }
      uint64_t v110 = v24[15];
      uint64_t v111 = (void *)((char *)a1 + v110);
      uint64_t v112 = (void *)(a2 + v110);
      uint64_t v113 = v112[1];
      void *v111 = *v112;
      v111[1] = v113;
      uint64_t v114 = v24[16];
      uint64_t v115 = (void *)((char *)a1 + v114);
      uint64_t v116 = (void *)(a2 + v114);
      uint64_t v117 = v116[1];
      *uint64_t v115 = *v116;
      v115[1] = v117;
      *((unsigned char *)a1 + v24[17]) = *(unsigned char *)(a2 + v24[17]);
      *(void *)((char *)a1 + v24[18]) = *(void *)(a2 + v24[18]);
      *((unsigned char *)a1 + v24[19]) = *(unsigned char *)(a2 + v24[19]);
      *((unsigned char *)a1 + v24[20]) = *(unsigned char *)(a2 + v24[20]);
      *((unsigned char *)a1 + v24[21]) = *(unsigned char *)(a2 + v24[21]);
      *((unsigned char *)a1 + v24[22]) = *(unsigned char *)(a2 + v24[22]);
      *((unsigned char *)a1 + v24[23]) = *(unsigned char *)(a2 + v24[23]);
      *((unsigned char *)a1 + v24[24]) = *(unsigned char *)(a2 + v24[24]);
      *((unsigned char *)a1 + v24[25]) = *(unsigned char *)(a2 + v24[25]);
      *((unsigned char *)a1 + v24[26]) = *(unsigned char *)(a2 + v24[26]);
      *((unsigned char *)a1 + v24[27]) = *(unsigned char *)(a2 + v24[27]);
      *((unsigned char *)a1 + v24[28]) = *(unsigned char *)(a2 + v24[28]);
      *((unsigned char *)a1 + v24[29]) = *(unsigned char *)(a2 + v24[29]);
      uint64_t v118 = v24[30];
      uint64_t v119 = (void *)((char *)a1 + v118);
      uint64_t v120 = (void *)(a2 + v118);
      uint64_t v121 = v120[1];
      *uint64_t v119 = *v120;
      v119[1] = v121;
      uint64_t v122 = v24[31];
      uint64_t v123 = (char *)a1 + v122;
      uint64_t v124 = (const void *)(a2 + v122);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__dstb(v124, 1, v106))
      {
        uint64_t v125 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v123, v124, *(void *)(*(void *)(v125 - 8) + 64));
        uint64_t v126 = v170;
      }
      else
      {
        uint64_t v126 = v170;
        (*(void (**)(char *, const void *, uint64_t))(v170 + 16))(v123, v124, v106);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v170 + 56))(v123, 0, 1, v106);
      }
      uint64_t v127 = v24[32];
      uint64_t v128 = (char *)a1 + v127;
      uint64_t v129 = a2 + v127;
      *(void *)uint64_t v128 = *(void *)v129;
      v128[8] = *(unsigned char *)(v129 + 8);
      *(void *)((char *)a1 + v24[33]) = *(void *)(a2 + v24[33]);
      uint64_t v130 = v24[34];
      uint64_t v131 = (char *)a1 + v130;
      uint64_t v132 = (const void *)(a2 + v130);
      if (__dstb((const void *)(a2 + v130), 1, v106))
      {
        uint64_t v133 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v131, v132, *(void *)(*(void *)(v133 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v126 + 16))(v131, v132, v106);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56))(v131, 0, 1, v106);
      }
      uint64_t v134 = v24[35];
      long long v135 = (void *)((char *)a1 + v134);
      uint64_t v136 = (void *)(a2 + v134);
      uint64_t v137 = v136[1];
      *long long v135 = *v136;
      v135[1] = v137;
      uint64_t v138 = v24[36];
      id v139 = (char *)a1 + v138;
      uint64_t v140 = a2 + v138;
      *(void *)(v139 + 13) = *(void *)(v140 + 13);
      *(_OWORD *)id v139 = *(_OWORD *)v140;
      uint64_t v141 = v24[37];
      uint64_t v142 = (char *)a1 + v141;
      uint64_t v143 = a2 + v141;
      v142[8] = *(unsigned char *)(v143 + 8);
      *(void *)uint64_t v142 = *(void *)v143;
      uint64_t v144 = v24[38];
      uint64_t v145 = (char *)a1 + v144;
      uint64_t v146 = a2 + v144;
      v145[4] = *(unsigned char *)(v146 + 4);
      *(_DWORD *)uint64_t v145 = *(_DWORD *)v146;
      uint64_t v147 = (int *)type metadata accessor for LibraryBookInfo();
      uint64_t v148 = v147[5];
      uint64_t v149 = (char *)a1 + v148;
      uint64_t v150 = a2 + v148;
      uint64_t v151 = *(void *)(a2 + v148 + 24);
      swift_bridgeObjectRetain();
      if (v151)
      {
        uint64_t v152 = *(void *)(v150 + 32);
        *((void *)v149 + 3) = v151;
        *((void *)v149 + 4) = v152;
        (**(void (***)(char *, uint64_t, uint64_t))(v151 - 8))(v149, v150, v151);
      }
      else
      {
        long long v153 = *(_OWORD *)(v150 + 16);
        *(_OWORD *)uint64_t v149 = *(_OWORD *)v150;
        *((_OWORD *)v149 + 1) = v153;
        *((void *)v149 + 4) = *(void *)(v150 + 32);
      }
      *((unsigned char *)a1 + v147[6]) = *(unsigned char *)(a2 + v147[6]);
      uint64_t v154 = v147[7];
      uint64_t v155 = (void *)((char *)a1 + v154);
      long long v156 = (void *)(a2 + v154);
      uint64_t v157 = v156[1];
      if ((unint64_t)(v157 - 1) >= 2)
      {
        *uint64_t v155 = *v156;
        v155[1] = v157;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)uint64_t v155 = *(_OWORD *)v156;
      }
      a3 = v174;
      uint64_t v158 = *(int *)(sub_228952BB0(&qword_2682846B0) + 48);
      uint64_t v159 = *(void **)(a2 + v158);
      *(void *)((char *)a1 + v158) = v159;
      id v160 = v159;
    }
  }
  swift_storeEnumTagMultiPayload();
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithCopy for BookInfo(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2289AA13C((uint64_t)a1);
    sub_228952BB0(&qword_268284230);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      int v12 = (void *)*a2;
      *a1 = *a2;
      id v13 = v12;
    }
    else
    {
      uint64_t v157 = a3;
      if (EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        a1[8] = a2[8];
        a1[9] = a2[9];
        a1[10] = a2[10];
        uint64_t v7 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        uint64_t v8 = v7[10];
        __dst = (char *)a1 + v8;
        uint64_t v149 = (char *)a2 + v8;
        uint64_t v9 = sub_2289DE880();
        uint64_t v10 = *(void *)(v9 - 8);
        uint64_t v147 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v147(v149, 1, v9))
        {
          uint64_t v11 = sub_228952BB0(&qword_2682841E0);
          memcpy(__dst, v149, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v149, v9);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
        }
        uint64_t v19 = v7[11];
        uint64_t v20 = (void *)((char *)a1 + v19);
        uint64_t v21 = (void *)((char *)a2 + v19);
        *uint64_t v20 = *v21;
        v20[1] = v21[1];
        uint64_t v22 = v7[12];
        uint64_t v23 = (char *)a1 + v22;
        uint64_t v24 = (char *)a2 + v22;
        uint64_t v25 = *(void *)v24;
        v23[8] = v24[8];
        *(void *)uint64_t v23 = v25;
        uint64_t v26 = v7[13];
        uint64_t v27 = (void *)((char *)a1 + v26);
        uint64_t v28 = (void *)((char *)a2 + v26);
        *uint64_t v27 = *v28;
        v27[1] = v28[1];
        uint64_t v29 = v7[14];
        uint64_t v151 = (char *)a1 + v29;
        uint64_t v30 = (char *)a2 + v29;
        uint64_t v31 = sub_2289DE910();
        uint64_t v32 = *(void *)(v31 - 8);
        uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dstb = (void (**)(void *, const void *, uint64_t))v32;
        if (v33(v30, 1, v31))
        {
          uint64_t v34 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v151, v30, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v151, v30, v31);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v151, 0, 1, v31);
        }
        uint64_t v51 = v7[15];
        uint64_t v52 = (void *)((char *)a1 + v51);
        uint64_t v53 = (void *)((char *)a2 + v51);
        *uint64_t v52 = *v53;
        v52[1] = v53[1];
        uint64_t v54 = v7[16];
        uint64_t v55 = (void *)((char *)a1 + v54);
        uint64_t v56 = (void *)((char *)a2 + v54);
        void *v55 = *v56;
        v55[1] = v56[1];
        *((unsigned char *)a1 + v7[17]) = *((unsigned char *)a2 + v7[17]);
        *(void *)((char *)a1 + v7[18]) = *(void *)((char *)a2 + v7[18]);
        *((unsigned char *)a1 + v7[19]) = *((unsigned char *)a2 + v7[19]);
        *((unsigned char *)a1 + v7[20]) = *((unsigned char *)a2 + v7[20]);
        *((unsigned char *)a1 + v7[21]) = *((unsigned char *)a2 + v7[21]);
        *((unsigned char *)a1 + v7[22]) = *((unsigned char *)a2 + v7[22]);
        *((unsigned char *)a1 + v7[23]) = *((unsigned char *)a2 + v7[23]);
        *((unsigned char *)a1 + v7[24]) = *((unsigned char *)a2 + v7[24]);
        *((unsigned char *)a1 + v7[25]) = *((unsigned char *)a2 + v7[25]);
        *((unsigned char *)a1 + v7[26]) = *((unsigned char *)a2 + v7[26]);
        *((unsigned char *)a1 + v7[27]) = *((unsigned char *)a2 + v7[27]);
        *((unsigned char *)a1 + v7[28]) = *((unsigned char *)a2 + v7[28]);
        *((unsigned char *)a1 + v7[29]) = *((unsigned char *)a2 + v7[29]);
        uint64_t v57 = v7[30];
        uint64_t v58 = (void *)((char *)a1 + v57);
        uint64_t v59 = (void *)((char *)a2 + v57);
        *uint64_t v58 = *v59;
        v58[1] = v59[1];
        uint64_t v60 = v7[31];
        uint64_t v61 = (char *)a1 + v60;
        uint64_t v62 = (char *)a2 + v60;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v33(v62, 1, v31))
        {
          uint64_t v63 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
          uint64_t v64 = __dstb;
        }
        else
        {
          uint64_t v64 = __dstb;
          __dstb[2](v61, v62, v31);
          ((void (*)(char *, void, uint64_t, uint64_t))__dstb[7])(v61, 0, 1, v31);
        }
        uint64_t v79 = v7[32];
        uint64_t v80 = (char *)a1 + v79;
        uint64_t v81 = (char *)a2 + v79;
        uint64_t v82 = *(void *)v81;
        v80[8] = v81[8];
        *(void *)uint64_t v80 = v82;
        *(void *)((char *)a1 + v7[33]) = *(void *)((char *)a2 + v7[33]);
        uint64_t v83 = v7[34];
        uint64_t v84 = (char *)a1 + v83;
        uint64_t v85 = (char *)a2 + v83;
        if (v33((char *)a2 + v83, 1, v31))
        {
          uint64_t v86 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v84, v85, *(void *)(*(void *)(v86 - 8) + 64));
        }
        else
        {
          v64[2](v84, v85, v31);
          ((void (*)(char *, void, uint64_t, uint64_t))v64[7])(v84, 0, 1, v31);
        }
        uint64_t v95 = v7[35];
        uint64_t v96 = (void *)((char *)a1 + v95);
        uint64_t v97 = (void *)((char *)a2 + v95);
        *uint64_t v96 = *v97;
        v96[1] = v97[1];
        uint64_t v98 = v7[36];
        uint64_t v99 = (char *)a1 + v98;
        uint64_t v100 = (char *)a2 + v98;
        long long v101 = *(_OWORD *)v100;
        *(void *)(v99 + 13) = *(void *)(v100 + 13);
        *(_OWORD *)uint64_t v99 = v101;
        uint64_t v102 = v7[37];
        uint64_t v103 = (char *)a1 + v102;
        uint64_t v104 = (char *)a2 + v102;
        uint64_t v105 = *(void *)v104;
        v103[8] = v104[8];
        *(void *)uint64_t v103 = v105;
        uint64_t v106 = v7[38];
        uint64_t v107 = (char *)a1 + v106;
        uint64_t v108 = (char *)a2 + v106;
        LODWORD(v105) = *(_DWORD *)v108;
        v107[4] = v108[4];
        *(_DWORD *)uint64_t v107 = v105;
        uint64_t v109 = (int *)type metadata accessor for LibraryBookInfo();
        uint64_t v110 = v109[5];
        uint64_t v111 = (char *)a1 + v110;
        uint64_t v112 = (char *)a2 + v110;
        uint64_t v113 = *(void *)((char *)a2 + v110 + 24);
        swift_bridgeObjectRetain();
        if (v113)
        {
          *((void *)v111 + 3) = v113;
          *((void *)v111 + 4) = *((void *)v112 + 4);
          (**(void (***)(char *, char *, uint64_t))(v113 - 8))(v111, v112, v113);
        }
        else
        {
          long long v133 = *(_OWORD *)v112;
          long long v134 = *((_OWORD *)v112 + 1);
          *((void *)v111 + 4) = *((void *)v112 + 4);
          *(_OWORD *)uint64_t v111 = v133;
          *((_OWORD *)v111 + 1) = v134;
        }
        *((unsigned char *)a1 + v109[6]) = *((unsigned char *)a2 + v109[6]);
        uint64_t v135 = v109[7];
        uint64_t v136 = (void *)((char *)a1 + v135);
        uint64_t v137 = (void *)((char *)a2 + v135);
        if ((unint64_t)(v137[1] - 1) >= 2)
        {
          *uint64_t v136 = *v137;
          v136[1] = v137[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)uint64_t v136 = *(_OWORD *)v137;
        }
        a3 = v157;
      }
      else
      {
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        a1[8] = a2[8];
        a1[9] = a2[9];
        a1[10] = a2[10];
        uint64_t v14 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        uint64_t v15 = v14[10];
        __dsta = (char *)a1 + v15;
        uint64_t v150 = (char *)a2 + v15;
        uint64_t v16 = sub_2289DE880();
        uint64_t v17 = *(void *)(v16 - 8);
        uint64_t v148 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v148(v150, 1, v16))
        {
          uint64_t v18 = sub_228952BB0(&qword_2682841E0);
          memcpy(__dsta, v150, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dsta, v150, v16);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dsta, 0, 1, v16);
        }
        uint64_t v35 = v14[11];
        uint64_t v36 = (void *)((char *)a1 + v35);
        uint64_t v37 = (void *)((char *)a2 + v35);
        *uint64_t v36 = *v37;
        v36[1] = v37[1];
        uint64_t v38 = v14[12];
        uint64_t v39 = (char *)a1 + v38;
        uint64_t v40 = (char *)a2 + v38;
        uint64_t v41 = *(void *)v40;
        v39[8] = v40[8];
        *(void *)uint64_t v39 = v41;
        uint64_t v42 = v14[13];
        uint64_t v43 = (void *)((char *)a1 + v42);
        uint64_t v44 = (void *)((char *)a2 + v42);
        *uint64_t v43 = *v44;
        v43[1] = v44[1];
        uint64_t v45 = v14[14];
        uint64_t v152 = (char *)a1 + v45;
        uint64_t v46 = (char *)a2 + v45;
        uint64_t v47 = sub_2289DE910();
        uint64_t v48 = *(void *)(v47 - 8);
        uint64_t v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dstc = (void (**)(void *, const void *, uint64_t))v48;
        if (v49(v46, 1, v47))
        {
          uint64_t v50 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v152, v46, *(void *)(*(void *)(v50 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v152, v46, v47);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v152, 0, 1, v47);
        }
        uint64_t v65 = v14[15];
        uint64_t v66 = (void *)((char *)a1 + v65);
        uint64_t v67 = (void *)((char *)a2 + v65);
        *uint64_t v66 = *v67;
        v66[1] = v67[1];
        uint64_t v68 = v14[16];
        uint64_t v69 = (void *)((char *)a1 + v68);
        uint64_t v70 = (void *)((char *)a2 + v68);
        *uint64_t v69 = *v70;
        v69[1] = v70[1];
        *((unsigned char *)a1 + v14[17]) = *((unsigned char *)a2 + v14[17]);
        *(void *)((char *)a1 + v14[18]) = *(void *)((char *)a2 + v14[18]);
        *((unsigned char *)a1 + v14[19]) = *((unsigned char *)a2 + v14[19]);
        *((unsigned char *)a1 + v14[20]) = *((unsigned char *)a2 + v14[20]);
        *((unsigned char *)a1 + v14[21]) = *((unsigned char *)a2 + v14[21]);
        *((unsigned char *)a1 + v14[22]) = *((unsigned char *)a2 + v14[22]);
        *((unsigned char *)a1 + v14[23]) = *((unsigned char *)a2 + v14[23]);
        *((unsigned char *)a1 + v14[24]) = *((unsigned char *)a2 + v14[24]);
        *((unsigned char *)a1 + v14[25]) = *((unsigned char *)a2 + v14[25]);
        *((unsigned char *)a1 + v14[26]) = *((unsigned char *)a2 + v14[26]);
        *((unsigned char *)a1 + v14[27]) = *((unsigned char *)a2 + v14[27]);
        *((unsigned char *)a1 + v14[28]) = *((unsigned char *)a2 + v14[28]);
        *((unsigned char *)a1 + v14[29]) = *((unsigned char *)a2 + v14[29]);
        uint64_t v71 = v14[30];
        uint64_t v72 = (void *)((char *)a1 + v71);
        uint64_t v73 = (void *)((char *)a2 + v71);
        *uint64_t v72 = *v73;
        v72[1] = v73[1];
        uint64_t v74 = v14[31];
        uint64_t v75 = (char *)a1 + v74;
        uint64_t v76 = (char *)a2 + v74;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v49(v76, 1, v47))
        {
          uint64_t v77 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v75, v76, *(void *)(*(void *)(v77 - 8) + 64));
          uint64_t v78 = __dstc;
        }
        else
        {
          uint64_t v78 = __dstc;
          __dstc[2](v75, v76, v47);
          ((void (*)(char *, void, uint64_t, uint64_t))__dstc[7])(v75, 0, 1, v47);
        }
        uint64_t v87 = v14[32];
        long long v88 = (char *)a1 + v87;
        uint64_t v89 = (char *)a2 + v87;
        uint64_t v90 = *(void *)v89;
        v88[8] = v89[8];
        *(void *)long long v88 = v90;
        *(void *)((char *)a1 + v14[33]) = *(void *)((char *)a2 + v14[33]);
        uint64_t v91 = v14[34];
        uint64_t v92 = (char *)a1 + v91;
        uint64_t v93 = (char *)a2 + v91;
        if (v49((char *)a2 + v91, 1, v47))
        {
          uint64_t v94 = sub_228952BB0(&qword_26AECF7E0);
          memcpy(v92, v93, *(void *)(*(void *)(v94 - 8) + 64));
        }
        else
        {
          v78[2](v92, v93, v47);
          ((void (*)(char *, void, uint64_t, uint64_t))v78[7])(v92, 0, 1, v47);
        }
        uint64_t v114 = v14[35];
        uint64_t v115 = (void *)((char *)a1 + v114);
        uint64_t v116 = (void *)((char *)a2 + v114);
        *uint64_t v115 = *v116;
        v115[1] = v116[1];
        uint64_t v117 = v14[36];
        uint64_t v118 = (char *)a1 + v117;
        uint64_t v119 = (char *)a2 + v117;
        long long v120 = *(_OWORD *)v119;
        *(void *)(v118 + 13) = *(void *)(v119 + 13);
        *(_OWORD *)uint64_t v118 = v120;
        uint64_t v121 = v14[37];
        uint64_t v122 = (char *)a1 + v121;
        uint64_t v123 = (char *)a2 + v121;
        uint64_t v124 = *(void *)v123;
        v122[8] = v123[8];
        *(void *)uint64_t v122 = v124;
        uint64_t v125 = v14[38];
        uint64_t v126 = (char *)a1 + v125;
        uint64_t v127 = (char *)a2 + v125;
        LODWORD(v124) = *(_DWORD *)v127;
        v126[4] = v127[4];
        *(_DWORD *)uint64_t v126 = v124;
        uint64_t v128 = (int *)type metadata accessor for LibraryBookInfo();
        uint64_t v129 = v128[5];
        uint64_t v130 = (char *)a1 + v129;
        uint64_t v131 = (char *)a2 + v129;
        uint64_t v132 = *(void *)((char *)a2 + v129 + 24);
        swift_bridgeObjectRetain();
        if (v132)
        {
          *((void *)v130 + 3) = v132;
          *((void *)v130 + 4) = *((void *)v131 + 4);
          (**(void (***)(char *, char *, uint64_t))(v132 - 8))(v130, v131, v132);
        }
        else
        {
          long long v138 = *(_OWORD *)v131;
          long long v139 = *((_OWORD *)v131 + 1);
          *((void *)v130 + 4) = *((void *)v131 + 4);
          *(_OWORD *)uint64_t v130 = v138;
          *((_OWORD *)v130 + 1) = v139;
        }
        *((unsigned char *)a1 + v128[6]) = *((unsigned char *)a2 + v128[6]);
        uint64_t v140 = v128[7];
        uint64_t v141 = (void *)((char *)a1 + v140);
        uint64_t v142 = (void *)((char *)a2 + v140);
        if ((unint64_t)(v142[1] - 1) >= 2)
        {
          *uint64_t v141 = *v142;
          v141[1] = v142[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)uint64_t v141 = *(_OWORD *)v142;
        }
        a3 = v157;
        uint64_t v143 = *(int *)(sub_228952BB0(&qword_2682846B0) + 48);
        uint64_t v144 = *(void **)((char *)a2 + v143);
        *(void *)((char *)a1 + v143) = v144;
        id v145 = v144;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

char *initializeWithTake for BookInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_228952BB0(&qword_268284230);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v95 = a3;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((void *)a1 + 2) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    uint64_t v15 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    uint64_t v16 = v15[10];
    uint64_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    uint64_t v19 = sub_2289DE880();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = sub_228952BB0(&qword_2682841E0);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(_OWORD *)&a1[v15[11]] = *(_OWORD *)&a2[v15[11]];
    uint64_t v32 = v15[12];
    uint64_t v33 = &a1[v32];
    uint64_t v34 = &a2[v32];
    v33[8] = v34[8];
    *(void *)uint64_t v33 = *(void *)v34;
    *(_OWORD *)&a1[v15[13]] = *(_OWORD *)&a2[v15[13]];
    uint64_t v35 = v15[14];
    uint64_t v36 = &a1[v35];
    uint64_t v37 = &a2[v35];
    uint64_t v38 = sub_2289DE910();
    uint64_t v39 = *(void *)(v38 - 8);
    uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    if (v40(v37, 1, v38))
    {
      uint64_t v41 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    *(_OWORD *)&a1[v15[15]] = *(_OWORD *)&a2[v15[15]];
    *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
    a1[v15[17]] = a2[v15[17]];
    *(void *)&a1[v15[18]] = *(void *)&a2[v15[18]];
    a1[v15[19]] = a2[v15[19]];
    a1[v15[20]] = a2[v15[20]];
    a1[v15[21]] = a2[v15[21]];
    a1[v15[22]] = a2[v15[22]];
    a1[v15[23]] = a2[v15[23]];
    a1[v15[24]] = a2[v15[24]];
    a1[v15[25]] = a2[v15[25]];
    a1[v15[26]] = a2[v15[26]];
    a1[v15[27]] = a2[v15[27]];
    a1[v15[28]] = a2[v15[28]];
    a1[v15[29]] = a2[v15[29]];
    *(_OWORD *)&a1[v15[30]] = *(_OWORD *)&a2[v15[30]];
    uint64_t v46 = v15[31];
    uint64_t v47 = &a1[v46];
    uint64_t v48 = &a2[v46];
    if (v40(&a2[v46], 1, v38))
    {
      uint64_t v49 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v47, v48, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v47, 0, 1, v38);
    }
    uint64_t v57 = v15[32];
    uint64_t v58 = &a1[v57];
    uint64_t v59 = &a2[v57];
    *(void *)uint64_t v58 = *(void *)v59;
    v58[8] = v59[8];
    *(void *)&a1[v15[33]] = *(void *)&a2[v15[33]];
    uint64_t v60 = v15[34];
    uint64_t v61 = &a1[v60];
    uint64_t v62 = &a2[v60];
    if (v40(&a2[v60], 1, v38))
    {
      uint64_t v63 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v61, v62, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v61, 0, 1, v38);
    }
    a3 = v95;
    *(_OWORD *)&a1[v15[35]] = *(_OWORD *)&a2[v15[35]];
    uint64_t v79 = v15[36];
    uint64_t v80 = &a1[v79];
    uint64_t v81 = &a2[v79];
    *(void *)(v80 + 13) = *(void *)(v81 + 13);
    *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
    uint64_t v82 = v15[37];
    uint64_t v83 = &a1[v82];
    uint64_t v84 = &a2[v82];
    *(void *)uint64_t v83 = *(void *)v84;
    v83[8] = v84[8];
    uint64_t v85 = v15[38];
    uint64_t v86 = &a1[v85];
    uint64_t v87 = &a2[v85];
    *(_DWORD *)uint64_t v86 = *(_DWORD *)v87;
    v86[4] = v87[4];
    long long v88 = (int *)type metadata accessor for LibraryBookInfo();
    uint64_t v89 = v88[5];
    uint64_t v90 = &a1[v89];
    uint64_t v91 = &a2[v89];
    long long v92 = *((_OWORD *)v91 + 1);
    *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
    *((_OWORD *)v90 + 1) = v92;
    *((void *)v90 + 4) = *((void *)v91 + 4);
    a1[v88[6]] = a2[v88[6]];
    *(_OWORD *)&a1[v88[7]] = *(_OWORD *)&a2[v88[7]];
    goto LABEL_30;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v94 = a3;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((void *)a1 + 2) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    uint64_t v8 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    uint64_t v9 = v8[10];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = sub_2289DE880();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_228952BB0(&qword_2682841E0);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
    uint64_t v22 = v8[12];
    uint64_t v23 = &a1[v22];
    uint64_t v24 = &a2[v22];
    v23[8] = v24[8];
    *(void *)uint64_t v23 = *(void *)v24;
    *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
    uint64_t v25 = v8[14];
    uint64_t v26 = &a1[v25];
    uint64_t v27 = &a2[v25];
    uint64_t v28 = sub_2289DE910();
    uint64_t v29 = *(void *)(v28 - 8);
    uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    if (v30(v27, 1, v28))
    {
      uint64_t v31 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    *(_OWORD *)&a1[v8[15]] = *(_OWORD *)&a2[v8[15]];
    *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
    a1[v8[17]] = a2[v8[17]];
    *(void *)&a1[v8[18]] = *(void *)&a2[v8[18]];
    a1[v8[19]] = a2[v8[19]];
    a1[v8[20]] = a2[v8[20]];
    a1[v8[21]] = a2[v8[21]];
    a1[v8[22]] = a2[v8[22]];
    a1[v8[23]] = a2[v8[23]];
    a1[v8[24]] = a2[v8[24]];
    a1[v8[25]] = a2[v8[25]];
    a1[v8[26]] = a2[v8[26]];
    a1[v8[27]] = a2[v8[27]];
    a1[v8[28]] = a2[v8[28]];
    a1[v8[29]] = a2[v8[29]];
    *(_OWORD *)&a1[v8[30]] = *(_OWORD *)&a2[v8[30]];
    uint64_t v42 = v8[31];
    uint64_t v43 = &a1[v42];
    uint64_t v44 = &a2[v42];
    if (v30(&a2[v42], 1, v28))
    {
      uint64_t v45 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v43, v44, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v43, 0, 1, v28);
    }
    uint64_t v50 = v8[32];
    uint64_t v51 = &a1[v50];
    uint64_t v52 = &a2[v50];
    *(void *)uint64_t v51 = *(void *)v52;
    v51[8] = v52[8];
    *(void *)&a1[v8[33]] = *(void *)&a2[v8[33]];
    uint64_t v53 = v8[34];
    uint64_t v54 = &a1[v53];
    uint64_t v55 = &a2[v53];
    if (v30(&a2[v53], 1, v28))
    {
      uint64_t v56 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v54, v55, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
    }
    a3 = v94;
    *(_OWORD *)&a1[v8[35]] = *(_OWORD *)&a2[v8[35]];
    uint64_t v64 = v8[36];
    uint64_t v65 = &a1[v64];
    uint64_t v66 = &a2[v64];
    *(void *)(v65 + 13) = *(void *)(v66 + 13);
    *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
    uint64_t v67 = v8[37];
    uint64_t v68 = &a1[v67];
    uint64_t v69 = &a2[v67];
    *(void *)uint64_t v68 = *(void *)v69;
    v68[8] = v69[8];
    uint64_t v70 = v8[38];
    uint64_t v71 = &a1[v70];
    uint64_t v72 = &a2[v70];
    *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
    v71[4] = v72[4];
    uint64_t v73 = (int *)type metadata accessor for LibraryBookInfo();
    uint64_t v74 = v73[5];
    uint64_t v75 = &a1[v74];
    uint64_t v76 = &a2[v74];
    long long v77 = *((_OWORD *)v76 + 1);
    *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
    *((_OWORD *)v75 + 1) = v77;
    *((void *)v75 + 4) = *((void *)v76 + 4);
    a1[v73[6]] = a2[v73[6]];
    *(_OWORD *)&a1[v73[7]] = *(_OWORD *)&a2[v73[7]];
    uint64_t v78 = sub_228952BB0(&qword_2682846B0);
    *(void *)&a1[*(int *)(v78 + 48)] = *(void *)&a2[*(int *)(v78 + 48)];
LABEL_30:
    swift_storeEnumTagMultiPayload();
    goto LABEL_31;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_31:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for BookInfo(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2289AA13C((uint64_t)a1);
    uint64_t v6 = sub_228952BB0(&qword_268284230);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v95 = a3;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      uint64_t v15 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      uint64_t v16 = v15[10];
      uint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      uint64_t v19 = sub_2289DE880();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = sub_228952BB0(&qword_2682841E0);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(_OWORD *)&a1[v15[11]] = *(_OWORD *)&a2[v15[11]];
      uint64_t v32 = v15[12];
      uint64_t v33 = &a1[v32];
      uint64_t v34 = &a2[v32];
      v33[8] = v34[8];
      *(void *)uint64_t v33 = *(void *)v34;
      *(_OWORD *)&a1[v15[13]] = *(_OWORD *)&a2[v15[13]];
      uint64_t v35 = v15[14];
      uint64_t v36 = &a1[v35];
      uint64_t v37 = &a2[v35];
      uint64_t v38 = sub_2289DE910();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      if (v40(v37, 1, v38))
      {
        uint64_t v41 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
      *(_OWORD *)&a1[v15[15]] = *(_OWORD *)&a2[v15[15]];
      *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
      a1[v15[17]] = a2[v15[17]];
      *(void *)&a1[v15[18]] = *(void *)&a2[v15[18]];
      a1[v15[19]] = a2[v15[19]];
      a1[v15[20]] = a2[v15[20]];
      a1[v15[21]] = a2[v15[21]];
      a1[v15[22]] = a2[v15[22]];
      a1[v15[23]] = a2[v15[23]];
      a1[v15[24]] = a2[v15[24]];
      a1[v15[25]] = a2[v15[25]];
      a1[v15[26]] = a2[v15[26]];
      a1[v15[27]] = a2[v15[27]];
      a1[v15[28]] = a2[v15[28]];
      a1[v15[29]] = a2[v15[29]];
      *(_OWORD *)&a1[v15[30]] = *(_OWORD *)&a2[v15[30]];
      uint64_t v46 = v15[31];
      uint64_t v47 = &a1[v46];
      uint64_t v48 = &a2[v46];
      if (v40(&a2[v46], 1, v38))
      {
        uint64_t v49 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v47, v48, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v47, 0, 1, v38);
      }
      uint64_t v57 = v15[32];
      uint64_t v58 = &a1[v57];
      uint64_t v59 = &a2[v57];
      *(void *)uint64_t v58 = *(void *)v59;
      v58[8] = v59[8];
      *(void *)&a1[v15[33]] = *(void *)&a2[v15[33]];
      uint64_t v60 = v15[34];
      uint64_t v61 = &a1[v60];
      uint64_t v62 = &a2[v60];
      if (v40(&a2[v60], 1, v38))
      {
        uint64_t v63 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v61, v62, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v61, 0, 1, v38);
      }
      a3 = v95;
      *(_OWORD *)&a1[v15[35]] = *(_OWORD *)&a2[v15[35]];
      uint64_t v79 = v15[36];
      uint64_t v80 = &a1[v79];
      uint64_t v81 = &a2[v79];
      *(void *)(v80 + 13) = *(void *)(v81 + 13);
      *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
      uint64_t v82 = v15[37];
      uint64_t v83 = &a1[v82];
      uint64_t v84 = &a2[v82];
      *(void *)uint64_t v83 = *(void *)v84;
      v83[8] = v84[8];
      uint64_t v85 = v15[38];
      uint64_t v86 = &a1[v85];
      uint64_t v87 = &a2[v85];
      *(_DWORD *)uint64_t v86 = *(_DWORD *)v87;
      v86[4] = v87[4];
      long long v88 = (int *)type metadata accessor for LibraryBookInfo();
      uint64_t v89 = v88[5];
      uint64_t v90 = &a1[v89];
      uint64_t v91 = &a2[v89];
      long long v92 = *((_OWORD *)v91 + 1);
      *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
      *((_OWORD *)v90 + 1) = v92;
      *((void *)v90 + 4) = *((void *)v91 + 4);
      a1[v88[6]] = a2[v88[6]];
      *(_OWORD *)&a1[v88[7]] = *(_OWORD *)&a2[v88[7]];
      goto LABEL_31;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v94 = a3;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      uint64_t v8 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      uint64_t v9 = v8[10];
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = sub_2289DE880();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = sub_228952BB0(&qword_2682841E0);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
      uint64_t v22 = v8[12];
      uint64_t v23 = &a1[v22];
      uint64_t v24 = &a2[v22];
      v23[8] = v24[8];
      *(void *)uint64_t v23 = *(void *)v24;
      *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
      uint64_t v25 = v8[14];
      uint64_t v26 = &a1[v25];
      uint64_t v27 = &a2[v25];
      uint64_t v28 = sub_2289DE910();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
      if (v30(v27, 1, v28))
      {
        uint64_t v31 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      *(_OWORD *)&a1[v8[15]] = *(_OWORD *)&a2[v8[15]];
      *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
      a1[v8[17]] = a2[v8[17]];
      *(void *)&a1[v8[18]] = *(void *)&a2[v8[18]];
      a1[v8[19]] = a2[v8[19]];
      a1[v8[20]] = a2[v8[20]];
      a1[v8[21]] = a2[v8[21]];
      a1[v8[22]] = a2[v8[22]];
      a1[v8[23]] = a2[v8[23]];
      a1[v8[24]] = a2[v8[24]];
      a1[v8[25]] = a2[v8[25]];
      a1[v8[26]] = a2[v8[26]];
      a1[v8[27]] = a2[v8[27]];
      a1[v8[28]] = a2[v8[28]];
      a1[v8[29]] = a2[v8[29]];
      *(_OWORD *)&a1[v8[30]] = *(_OWORD *)&a2[v8[30]];
      uint64_t v42 = v8[31];
      uint64_t v43 = &a1[v42];
      uint64_t v44 = &a2[v42];
      if (v30(&a2[v42], 1, v28))
      {
        uint64_t v45 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v43, v44, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v43, 0, 1, v28);
      }
      uint64_t v50 = v8[32];
      uint64_t v51 = &a1[v50];
      uint64_t v52 = &a2[v50];
      *(void *)uint64_t v51 = *(void *)v52;
      v51[8] = v52[8];
      *(void *)&a1[v8[33]] = *(void *)&a2[v8[33]];
      uint64_t v53 = v8[34];
      uint64_t v54 = &a1[v53];
      uint64_t v55 = &a2[v53];
      if (v30(&a2[v53], 1, v28))
      {
        uint64_t v56 = sub_228952BB0(&qword_26AECF7E0);
        memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v54, v55, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
      }
      a3 = v94;
      *(_OWORD *)&a1[v8[35]] = *(_OWORD *)&a2[v8[35]];
      uint64_t v64 = v8[36];
      uint64_t v65 = &a1[v64];
      uint64_t v66 = &a2[v64];
      *(void *)(v65 + 13) = *(void *)(v66 + 13);
      *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
      uint64_t v67 = v8[37];
      uint64_t v68 = &a1[v67];
      uint64_t v69 = &a2[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      v68[8] = v69[8];
      uint64_t v70 = v8[38];
      uint64_t v71 = &a1[v70];
      uint64_t v72 = &a2[v70];
      *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
      v71[4] = v72[4];
      uint64_t v73 = (int *)type metadata accessor for LibraryBookInfo();
      uint64_t v74 = v73[5];
      uint64_t v75 = &a1[v74];
      uint64_t v76 = &a2[v74];
      long long v77 = *((_OWORD *)v76 + 1);
      *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v77;
      *((void *)v75 + 4) = *((void *)v76 + 4);
      a1[v73[6]] = a2[v73[6]];
      *(_OWORD *)&a1[v73[7]] = *(_OWORD *)&a2[v73[7]];
      uint64_t v78 = sub_228952BB0(&qword_2682846B0);
      *(void *)&a1[*(int *)(v78 + 48)] = *(void *)&a2[*(int *)(v78 + 48)];
LABEL_31:
      swift_storeEnumTagMultiPayload();
      goto LABEL_32;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
LABEL_32:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for BookInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2289AE9C0);
}

uint64_t sub_2289AE9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_228952BB0(&qword_268284230);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 3) {
      return v10 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for BookInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2289AEA94);
}

uint64_t sub_2289AEA94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_228952BB0(&qword_268284230);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

void sub_2289AEB54()
{
  sub_2289AEBE8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_2289AEBE8()
{
  if (!qword_268284A08[0])
  {
    type metadata accessor for LibraryBookInfo();
    type metadata accessor for MBook();
    unint64_t v0 = type metadata accessor for ContentDataSource();
    if (!v1) {
      atomic_store(v0, qword_268284A08);
    }
  }
}

uint64_t sub_2289AEC50(uint64_t a1, char *a2)
{
  return sub_2289AEFB8(a1, a2);
}

uint64_t sub_2289AEC9C()
{
  unint64_t v0 = sub_2289DF3F0();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_2289AECE8(char a1)
{
  if (!a1) {
    return 25705;
  }
  if (a1 == 1) {
    return 1701869940;
  }
  return 1717924456;
}

uint64_t sub_2289AED24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D338];

  return MEMORY[0x270F9F940](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_2289AED98(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9DAE8](a1, a2, WitnessTable, v5);
}

uint64_t sub_2289AEE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9DAF8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_2289AEE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9DAF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_2289AEEE4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2289AEC9C();
  *a1 = result;
  return result;
}

uint64_t sub_2289AEF1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_2289AECE8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t MSparseResource.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

void MSparseResource.type.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 56);
}

uint64_t MSparseResource.href.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2289AEFB8(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  char v5 = *a2;
  uint64_t v6 = (void *)*((void *)a2 + 1);
  type metadata accessor for MSparseResource.Keys();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_2289B3B60(a1, MEMORY[0x263F8D310], (uint64_t)&v25);
  swift_bridgeObjectRelease();
  unint64_t v7 = v26;
  if (v26)
  {
    uint64_t v8 = v25;
    uint64_t v9 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      uint64_t v9 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v9)
    {
      swift_bridgeObjectRetain();
      sub_2289B3B60(a1, MEMORY[0x263F8D310], (uint64_t)&v25);
      swift_bridgeObjectRelease();
      unint64_t v10 = v26;
      if (v26)
      {
        uint64_t v24 = v25;
        swift_bridgeObjectRetain();
        sub_2289B3B60(a1, MEMORY[0x263F8D310], (uint64_t)&v25);
        swift_bridgeObjectRelease();
        uint64_t v11 = v26;
        if (v26)
        {
          uint64_t v12 = v25;
          swift_bridgeObjectRetain();
          sub_2289DA77C(v12, v11, (char *)&v25);
          char v13 = v25;
          if (v25 == 6)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v23 = static MResourceType.classType(for:)(v12, v11);
            swift_bridgeObjectRelease();
            if (v23 && swift_dynamicCastMetatype())
            {
              *(void *)(v3 + 40) = v8;
              *(void *)(v3 + 48) = v7;
              *(unsigned char *)(v3 + 56) = v13;
              *(void *)(v3 + 64) = v24;
              *(void *)(v3 + 72) = v10;
              uint64_t result = v3;
              *(void *)(v3 + 16) = a1;
              *(unsigned char *)(v3 + 24) = v5;
              *(void *)(v3 + 32) = v6;
              return result;
            }
          }
        }
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
  }

  if (qword_26AECF788 != -1) {
    swift_once();
  }
  if (qword_268283E70 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_2289DEA10();
  sub_228952BF4(v14, (uint64_t)qword_268284188);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_2289DE9F0();
  os_log_type_t v16 = sub_2289DF0A0();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v25 = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_2289DEA90();
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    sub_22897ACBC(v19, v21, &v25);
    sub_2289DF150();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22894E000, v15, v16, "Invalid data for sparse resource: %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A6A29E0](v18, -1, -1);
    MEMORY[0x22A6A29E0](v17, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for MSparseResource();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t MSparseResource.deinit()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MSparseResource.__deallocating_deinit()
{
  MSparseResource.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_2289AF480()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for MSparseResource()
{
  return sub_22897D5C8();
}

uint64_t method lookup function for MSparseResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MSparseResource);
}

uint64_t type metadata accessor for MSparseResource.Keys()
{
  return sub_22897D5C8();
}

uint64_t sub_2289AF530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 8);
}

unsigned char *sub_2289AF538(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2289AF604);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_2289AF62C()
{
  return swift_getWitnessTable();
}

BOOL Collection.isNotEmpty.getter()
{
  return (sub_2289DF000() & 1) == 0;
}

uint64_t Collection.validate(index:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v3 = (char *)&v6 - v2;
  sub_2289DEFF0();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  char v4 = sub_2289DED90();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4 & 1;
}

uint64_t Collection.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  if (Collection.validate(index:)())
  {
    uint64_t v2 = (void (*)(uint64_t *, void))sub_2289DF080();
    uint64_t v4 = v3;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, v4, AssociatedTypeWitness);
    v2(&v10, 0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v8 = swift_getAssociatedTypeWitness();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    return v9(a1, 1, 1, v8);
  }
}

id _sSo14NSUserDefaultsC14BookFoundationE05booksB16NeedingMigrationABSgyFZ_0()
{
  id v0 = objc_msgSend(self, sel_standardUserDefaults);
  uint64_t v1 = (void *)sub_2289DEB90();
  id v2 = objc_msgSend(v0, sel_objectForKey_, v1);

  if (v2)
  {
    sub_2289DF1A0();
    swift_unknownObjectRelease();
    sub_228952B50((uint64_t)v4);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
    sub_228952B50((uint64_t)v4);

    return 0;
  }
  return v0;
}

void _sSo14NSUserDefaultsC14BookFoundationE012booksMigrateC25ReadingSettingsToAppGroupyyABFZ_0(void *a1)
{
  if (qword_268283EB8 != -1) {
    swift_once();
  }
  id v2 = (void *)qword_268284EB8;
  uint64_t v3 = (void *)sub_2289DEB90();
  id v4 = objc_msgSend(a1, sel_BOOLForKey_, v3);

  objc_msgSend(v2, sel_setBKMenuOnLeft_, v4);
  uint64_t v5 = (void *)sub_2289DEB90();
  id v6 = objc_msgSend(a1, sel_BOOLForKey_, v5);

  objc_msgSend(v2, sel_setBKSettingFilterBrightImages_, v6);
  unint64_t v7 = (void *)sub_2289DEB90();
  objc_msgSend(a1, sel_removeObjectForKey_, v7);

  id v8 = (id)sub_2289DEB90();
  objc_msgSend(a1, sel_removeObjectForKey_, v8);
}

void OSAllocatedUnfairLock.valueWithLock.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)a1 + 16);
  id v4 = (os_unfair_lock_s *)(a1 + ((*(unsigned int *)(*(void *)a1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v4);
  sub_2289AFCD8(v3, a2);
  os_unfair_lock_unlock(v4);
}

uint64_t OSAllocatedUnfairLock.valueWithLock.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2289AFEF4(a1, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v5(a1, a3);
}

uint64_t sub_2289AFCD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, a1);
}

void (*OSAllocatedUnfairLock.valueWithLock.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  id v6 = malloc(0x28uLL);
  *a1 = v6;
  *id v6 = a2;
  v6[1] = a3;
  uint64_t v7 = *(void *)(a3 - 8);
  void v6[2] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v6[3] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v6[4] = v9;
  OSAllocatedUnfairLock.valueWithLock.getter(a2, (uint64_t)v9);
  return sub_2289AFE08;
}

void sub_2289AFE08(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[3];
  id v4 = (void *)(*a1)[4];
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = (*a1)[2];
  uint64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[3], v4, v5);
    sub_2289AFEF4((uint64_t)v3, v7);
    size_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    sub_2289AFEF4((*a1)[4], v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

void sub_2289AFEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)a2 + 16);
  uint64_t v3 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(void *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_2289AFFC8(v2);
  os_unfair_lock_unlock(v3);
}

void sub_2289AFF90(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_2289AFFA0(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_2289AFFB0()
{
  return 8;
}

void *sub_2289AFFBC(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2289AFFC8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v3, v4);
}

uint64_t MAsset.__sequenceNumber.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
  sub_22897BAAC(1, v1);
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  if ((v3 & 0x100000000) != 0) {
    return 0;
  }
  else {
    return sub_2289DF100();
  }
}

uint64_t MAsset.__genres.getter()
{
  unint64_t v0 = sub_22896BAE0(@"genres");
  unint64_t v1 = v0;
  if (v0)
  {
    if (v0 >> 62)
    {
      sub_228952BB0((uint64_t *)&unk_268284B10);
      uint64_t v3 = sub_2289DF350();
      swift_bridgeObjectRelease();
      return v3;
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_2289DF490();
      swift_bridgeObjectRelease();
    }
  }
  return v1;
}

uint64_t MAsset.__price.getter()
{
  swift_getObjectType();
  id v1 = objc_msgSend(v0, sel_offer);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = sub_2289DEA80();
  }
  else
  {
    uint64_t v3 = 0;
  }
  sub_22897C044();
  sub_2289B3B60(v3, MEMORY[0x263F8D538], (uint64_t)&v5);
  swift_bridgeObjectRelease();
  if (v6) {
    return 0;
  }
  else {
    return sub_2289DE9D0();
  }
}

void *MAsset.__width.getter()
{
  return sub_2289B0538(2);
}

id sub_2289B0454(char *a1, uint64_t a2, char a3)
{
  swift_getObjectType();
  char v10 = a3;
  uint64_t v5 = *(void **)&a1[OBJC_IVAR____TtC14BookFoundation6MAsset_artwork];
  sub_22897C0EC();
  char v6 = a1;
  uint64_t v7 = sub_2289B3DD4((uint64_t)&v10, v5);
  size_t v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, sel_doubleValue);

    size_t v8 = (void *)sub_2289DE9D0();
  }

  return v8;
}

void *MAsset.__height.getter()
{
  return sub_2289B0538(0);
}

void *sub_2289B0538(char a1)
{
  swift_getObjectType();
  char v6 = a1;
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC14BookFoundation6MAsset_artwork);
  sub_22897C0EC();
  uint64_t result = sub_2289B3DD4((uint64_t)&v6, v3);
  if (result)
  {
    uint64_t v5 = result;
    objc_msgSend(result, sel_doubleValue);

    return (void *)sub_2289DE9D0();
  }
  return result;
}

unint64_t MAsset.__seriesResource.getter()
{
  if (!sub_22897A970()) {
    return 0;
  }
  unint64_t result = sub_2289D47F8();
  if (!result)
  {
LABEL_11:
    swift_release();
    return 0;
  }
  unint64_t v1 = result;
  uint64_t v2 = result & 0xFFFFFFFFFFFFFF8;
  if (!(result >> 62))
  {
    if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  unint64_t result = sub_2289DF380();
  if (!result)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_5:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v3 = (id)MEMORY[0x22A6A1E70](0, v1);
    goto LABEL_8;
  }
  if (*(void *)(v2 + 16))
  {
    id v3 = *(id *)(v1 + 32);
LABEL_8:
    id v4 = v3;
    swift_bridgeObjectRelease();
    swift_release();
    return (unint64_t)v4;
  }
  __break(1u);
  return result;
}

unint64_t MClientIdentifier.rawValue.getter()
{
  unint64_t result = 0x736B6F6F6269;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 4:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

BookFoundation::MClientIdentifier_optional __swiftcall MClientIdentifier.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_2289DF3F0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 5;
  if (v3 < 5) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

void *static MClientIdentifier.allCases.getter()
{
  return &unk_26DD0AF10;
}

uint64_t sub_2289B07FC(unsigned __int8 *a1, char *a2)
{
  return sub_22896673C(*a1, *a2);
}

uint64_t sub_2289B0808()
{
  return sub_2289B0B34();
}

uint64_t sub_2289B0810()
{
  return sub_2289B1044();
}

uint64_t sub_2289B0818()
{
  return sub_2289B11B4();
}

BookFoundation::MClientIdentifier_optional sub_2289B0820(Swift::String *a1)
{
  return MClientIdentifier.init(rawValue:)(*a1);
}

unint64_t sub_2289B082C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MClientIdentifier.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_2289B0854(void *a1@<X8>)
{
  *a1 = &unk_26DD0AF38;
}

void MCatalogServiceConfig.clientIdentifier.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void *MCatalogServiceConfig.account.getter()
{
  unint64_t v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

unsigned char *MCatalogServiceConfig.init(clientIdentifier:account:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = *result;
  *(void *)(a3 + 8) = a2;
  return result;
}

unint64_t sub_2289B08AC()
{
  unint64_t result = qword_268284B28;
  if (!qword_268284B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284B28);
  }
  return result;
}

unint64_t sub_2289B0904()
{
  unint64_t result = qword_268284B30;
  if (!qword_268284B30)
  {
    sub_2289550A8(&qword_268284B38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284B30);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MClientIdentifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2289B0A2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MClientIdentifier()
{
  return &type metadata for MClientIdentifier;
}

ValueMetadata *type metadata accessor for MCatalogServiceConfig()
{
  return &type metadata for MCatalogServiceConfig;
}

BOOL CGSize.isLandscape.getter(double a1, double a2)
{
  return a2 < a1;
}

uint64_t CGSize.isNan.getter(double a1, double a2)
{
  BOOL v2 = (~*(void *)&a2 & 0x7FF0000000000000) == 0 && (*(void *)&a2 & 0xFFFFFFFFFFFFFLL) != 0;
  return (~*(void *)&a1 & 0x7FF0000000000000) == 0 && (*(void *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 || v2;
}

uint64_t CGSize.isInfinite.getter(double a1, double a2)
{
  BOOL v2 = (~*(void *)&a2 & 0x7FF0000000000000) == 0 && (*(void *)&a2 & 0xFFFFFFFFFFFFFLL) == 0;
  return (*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v2;
}

CGSize __swiftcall CGSize.scaledToFit(in:times:horizontally:)(CGSize in, Swift::Int times, Swift::Bool horizontally)
{
  if (horizontally) {
    double v5 = v3;
  }
  else {
    double v5 = v4;
  }
  if (!horizontally) {
    in.double width = in.height;
  }
  CGFloat v6 = in.width / (v5 * (double)times);
  double v7 = floor(v6 * v3);
  double v8 = floor(v6 * v4);
  result.CGFloat height = v8;
  result.double width = v7;
  return result;
}

double CGSize.inset(by:)(double a1, double a2)
{
  return a2 - a1;
}

CGSize __swiftcall CGSize.inset(by:)(Swift::Double by)
{
  double v3 = v1 - by;
  double v4 = v2 - by;
  double v5 = v3;
  result.CGFloat height = v4;
  result.double width = v5;
  return result;
}

uint64_t sub_2289B0B34()
{
  return sub_2289DF590();
}

uint64_t sub_2289B0C34()
{
  return sub_2289DF590();
}

uint64_t sub_2289B0CBC()
{
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2289B0DE0()
{
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2289B0F30()
{
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2289B1044()
{
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2289B1130()
{
  return sub_2289DF590();
}

uint64_t sub_2289B11B4()
{
  return sub_2289DF590();
}

uint64_t sub_2289B12B0()
{
  return sub_2289DF590();
}

uint64_t sub_2289B13D4()
{
  return sub_2289DF590();
}

uint64_t MAudiobookSeries.narratorCount.getter()
{
  swift_getObjectType();
  uint64_t v0 = sub_2289D49E0(0);
  uint64_t v1 = sub_228952BB0(&qword_268284000);
  sub_2289B15EC();
  sub_2289B3B60(v0, v1, (uint64_t)&v4);
  swift_bridgeObjectRelease();
  uint64_t v2 = v4;
  sub_2289B1640();
  sub_2289B3B60(v2, MEMORY[0x263F8D6C8], (uint64_t)&v4);
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t sub_2289B15EC()
{
  unint64_t result = qword_268284B40;
  if (!qword_268284B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284B40);
  }
  return result;
}

unint64_t sub_2289B1640()
{
  unint64_t result = qword_268284B48;
  if (!qword_268284B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284B48);
  }
  return result;
}

uint64_t MAudiobookSeries.narratorNames.getter()
{
  swift_getObjectType();
  uint64_t v0 = sub_2289D49E0(0);
  uint64_t v1 = sub_228952BB0(&qword_268284000);
  sub_2289B15EC();
  sub_2289B3B60(v0, v1, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  uint64_t v2 = v5;
  uint64_t v3 = sub_228952BB0(&qword_2682843F0);
  sub_2289B1640();
  sub_2289B3B60(v2, v3, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_2289B1784(char *a1, char *a2)
{
  return sub_228966954(*a1, *a2);
}

uint64_t sub_2289B1790()
{
  return sub_2289B0C34();
}

uint64_t sub_2289B1798()
{
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2289B180C()
{
  return sub_2289B1130();
}

uint64_t sub_2289B1814@<X0>(char *a1@<X8>)
{
  return sub_2289B1DE4(a1);
}

void sub_2289B1820(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000013;
  }
  else {
    unint64_t v2 = 0xD000000000000012;
  }
  unint64_t v3 = 0x80000002289E51C0;
  if (*v1) {
    unint64_t v3 = 0x80000002289E51E0;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t MAudiobookSeries.hasUniqueNarrators.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14BookFoundation16MAudiobookSeries_hasUniqueNarrators);
}

id MAudiobookSeries.__allocating_init(with:config:)(uint64_t a1, char *a2)
{
  id v5 = objc_allocWithZone(v2);
  return MAudiobookSeries.init(with:config:)(a1, a2);
}

id MAudiobookSeries.init(with:config:)(uint64_t a1, char *a2)
{
  swift_getObjectType();
  char v5 = *a2;
  CGFloat v6 = (void *)*((void *)a2 + 1);
  LOBYTE(v21) = 0;
  double v7 = v2;
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_228952BB0(&qword_268284000);
  sub_22897B700();
  sub_2289B3B60(a1, v8, (uint64_t)v20);
  swift_bridgeObjectRelease();
  uint64_t v9 = v20[0];
  if (v20[0])
  {
    LOBYTE(v21) = 0;
    sub_2289B15EC();
    sub_2289B3B60(v9, MEMORY[0x263F8D4F8], (uint64_t)v20);
    swift_bridgeObjectRelease();
    char v10 = v20[0];
    if (LOBYTE(v20[0]) == 2) {
      char v10 = 0;
    }
    v7[OBJC_IVAR____TtC14BookFoundation16MAudiobookSeries_hasUniqueNarrators] = v10;

    LOBYTE(v20[0]) = v5;
    v20[1] = (uint64_t)v6;
    return MSeries.init(with:config:)(a1, (unsigned __int8 *)v20);
  }
  else
  {

    if (qword_26AECF788 != -1) {
      swift_once();
    }
    if (qword_268283E70 != -1) {
      swift_once();
    }
    uint64_t v12 = sub_2289DEA10();
    sub_228952BF4(v12, (uint64_t)qword_268284188);
    swift_bridgeObjectRetain();
    char v13 = sub_2289DE9F0();
    os_log_type_t v14 = sub_2289DF0A0();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      v20[0] = v19;
      *(_DWORD *)uint64_t v15 = 136315394;
      uint64_t v21 = sub_22897ACBC(0xD000000000000011, 0x80000002289E5C70, v20);
      sub_2289DF150();
      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v16 = sub_2289DEA90();
      unint64_t v18 = v17;
      swift_bridgeObjectRelease();
      uint64_t v21 = sub_22897ACBC(v16, v18, v20);
      sub_2289DF150();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22894E000, v13, v14, "Invalid data for %s: %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22A6A29E0](v19, -1, -1);
      MEMORY[0x22A6A29E0](v15, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_deallocPartialClassInstance();
    return 0;
  }
}

void static MAudiobookSeries.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

id MAudiobookSeries.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_2289B1C9C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_228965704(*a1, *a2);
}

uint64_t sub_2289B1CA8()
{
  return sub_2289DF590();
}

uint64_t sub_2289B1D18()
{
  sub_2289DEC40();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2289B1D6C()
{
  return sub_2289DF590();
}

uint64_t sub_2289B1DD8@<X0>(char *a1@<X8>)
{
  return sub_2289B1DE4(a1);
}

uint64_t sub_2289B1DE4@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_2289DF3F0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_2289B1E40(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x746E756F63;
  if (*v1) {
    uint64_t v2 = 0x73656D616ELL;
  }
  *a1 = v2;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_2289B1E70()
{
  return type metadata accessor for MAudiobookSeries();
}

uint64_t type metadata accessor for MAudiobookSeries()
{
  uint64_t result = qword_268284B50;
  if (!qword_268284B50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2289B1EC4()
{
  return swift_updateClassMetadata2();
}

ValueMetadata *type metadata accessor for MAudiobookSeries.NarratorAttributes()
{
  return &type metadata for MAudiobookSeries.NarratorAttributes;
}

unsigned char *_s14BookFoundation16MAudiobookSeriesC18NarratorAttributesOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2289B1FE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MAudiobookSeries.Attributes()
{
  return &type metadata for MAudiobookSeries.Attributes;
}

unint64_t sub_2289B2024()
{
  unint64_t result = qword_268284B60;
  if (!qword_268284B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284B60);
  }
  return result;
}

unint64_t sub_2289B207C()
{
  unint64_t result = qword_268284B68;
  if (!qword_268284B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284B68);
  }
  return result;
}

uint64_t DateInterval.distance(_:calendar:)(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a2;
  uint64_t v25 = sub_2289DE910();
  uint64_t v3 = *(void *)(v25 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v25);
  unsigned int v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v22 - v7;
  uint64_t v9 = sub_2289DE7D0();
  uint64_t v22 = *(void *)(v9 - 8);
  uint64_t v23 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228952BB0(&qword_268284B70);
  uint64_t v12 = sub_2289DE980();
  uint64_t v13 = *(void *)(v12 - 8);
  unint64_t v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2289E0340;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 16))(v15 + v14, a1, v12);
  sub_2289B23AC(v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_2289DE660();
  sub_2289DE650();
  sub_2289DE950();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v17 = v25;
  v16(v6, v25);
  v16(v8, v17);
  uint64_t v18 = sub_2289DE7A0();
  LOBYTE(v17) = v19;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v11, v23);
  if (v17) {
    return v18;
  }
  if (!__OFADD__(v18++, 1)) {
    return v18;
  }
  __break(1u);
  return result;
}

uint64_t sub_2289B23AC(uint64_t a1)
{
  uint64_t v2 = sub_2289DE980();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  unsigned int v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_228952BB0(&qword_268284B78);
    uint64_t v9 = sub_2289DF230();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_2289B269C(&qword_268284B80);
      uint64_t v16 = sub_2289DEB10();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_2289B269C(&qword_268284B88);
          char v23 = sub_2289DEB80();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t sub_2289B269C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_2289DE980();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t UserDefault.init(_:defaults:defaultValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  uint64_t v8 = (char *)a6 + *(int *)(type metadata accessor for UserDefault() + 32);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32);

  return v9(v8, a4, a5);
}

uint64_t type metadata accessor for UserDefault()
{
  return sub_22897D5C8();
}

id UserDefault.mock(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v16 = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)v3;
  uint64_t v9 = *((void *)v3 + 1);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, &v3[*(int *)(v11 + 32)], v5);
  *(void *)a3 = v10;
  *((void *)a3 + 1) = v9;
  *((void *)a3 + 2) = v16;
  uint64_t v12 = type metadata accessor for UserDefault();
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&a3[*(int *)(v12 + 32)], v8, v5);
  swift_bridgeObjectRetain();
  uint64_t v13 = v16;

  return v13;
}

uint64_t UserDefault.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v10 = sub_2289DF130();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v25 - v12;
  if (swift_dynamicCastMetatype())
  {
    uint64_t v14 = *(void **)(v2 + 16);
    uint64_t v15 = (void *)sub_2289DEB90();
    id v16 = objc_msgSend(v14, sel_objectForKey_, v15);

    if (v16)
    {
      sub_2289DF1A0();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v27, 0, sizeof(v27));
    }
    sub_2289998A4((uint64_t)v27, (uint64_t)&v28);
    if (*((void *)&v29 + 1))
    {
      sub_2289B2CC8();
      if (swift_dynamicCast())
      {
        id v20 = v26;
        unsigned __int8 v21 = objc_msgSend(v26, sel_BOOLValue);

        LOBYTE(v28) = v21;
        return swift_dynamicCast();
      }
    }
    else
    {
      sub_22896EABC((uint64_t)&v28, &qword_26AECF7D8);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(a2, v2 + *(int *)(a1 + 32), v9);
  }
  else
  {
    uint64_t v25 = a2;
    uint64_t v17 = *(void **)(v2 + 16);
    unint64_t v18 = (void *)sub_2289DEB90();
    id v19 = objc_msgSend(v17, sel_objectForKey_, v18);

    if (v19)
    {
      sub_2289DF1A0();
      swift_unknownObjectRelease();
      sub_22897D02C(v27, &v28);
    }
    else
    {
      long long v28 = 0u;
      long long v29 = 0u;
    }
    sub_228952BB0(&qword_26AECF7D8);
    int v23 = swift_dynamicCast();
    uint64_t v24 = *(void *)(v9 - 8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v13, v23 ^ 1u, 1, v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a1);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v13, 1, v9) == 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(v25, &v7[*(int *)(a1 + 32)], v9);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a1);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a1);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v13, v9);
    }
  }
}

unint64_t sub_2289B2CC8()
{
  unint64_t result = qword_268284B90;
  if (!qword_268284B90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268284B90);
  }
  return result;
}

uint64_t sub_2289B2D08(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = (char *)&v6 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v6 - v1);
  uint64_t v4 = type metadata accessor for UserDefault();
  return UserDefault.wrappedValue.setter((uint64_t)v2, v4);
}

uint64_t UserDefault.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  sub_228952BB0(&qword_268284B98);
  if (swift_dynamicCast())
  {
    sub_2289605CC(v15, (uint64_t)v17);
    uint64_t v7 = v18;
    uint64_t v8 = v19;
    sub_22895598C(v17, v18);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8))
    {
      uint64_t v9 = *(void **)(v2 + 16);
      uint64_t v10 = (void *)sub_2289DEB90();
      objc_msgSend(v9, sel_removeObjectForKey_, v10);

      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
      return sub_2289559D0((uint64_t)v17);
    }
    sub_2289559D0((uint64_t)v17);
  }
  else
  {
    uint64_t v16 = 0;
    memset(v15, 0, sizeof(v15));
    sub_22896EABC((uint64_t)v15, &qword_268284BA0);
  }
  uint64_t v12 = *(void **)(v2 + 16);
  uint64_t v13 = sub_2289DF470();
  uint64_t v14 = (void *)sub_2289DEB90();
  objc_msgSend(v12, sel_setObject_forKey_, v13, v14);
  swift_unknownObjectRelease();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

void (*UserDefault.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  void v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  _OWORD v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  uint64_t v5[5] = v9;
  UserDefault.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_2289B30B8;
}

void sub_2289B30B8(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    UserDefault.wrappedValue.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    UserDefault.wrappedValue.setter((*a1)[5], *v2);
  }
  free(v4);
  free(v3);

  free(v2);
}

BOOL sub_2289B3178(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 48))(v1, 1) == 1;
}

uint64_t sub_2289B31CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UserDefault();
  return UserDefault.wrappedValue.getter(v2, a1);
}

uint64_t sub_2289B320C()
{
  return 8;
}

void *sub_2289B3218(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2289B3224()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2289B32CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 24) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = (void **)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = *v12;
    *uint64_t v11 = *v12;
    uint64_t v14 = ((unint64_t)v11 + v6 + 8) & ~v6;
    uint64_t v15 = ((unint64_t)v12 + v6 + 8) & ~v6;
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    id v17 = v13;
    v16(v14, v15, v4);
  }
  return a1;
}

uint64_t sub_2289B33FC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = (id *)((a1 + 23) & 0xFFFFFFFFFFFFFFF8);

  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = ((unint64_t)v4 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

void *sub_2289B3480(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void **)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = *v6;
  *uint64_t v5 = *v6;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v8 - 8) + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 8) & ~v10;
  swift_bridgeObjectRetain();
  id v13 = v7;
  v9(v11, v12, v8);
  return a1;
}

void *sub_2289B3534(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void **)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = (void **)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *v7;
  uint64_t v9 = *v6;
  *uint64_t v6 = *v7;
  id v10 = v8;

  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 24))(((unint64_t)v6 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

_OWORD *sub_2289B35F8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *sub_2289B3680(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  unint64_t v7 = (void **)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void **)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *v7;
  *unint64_t v7 = *v8;

  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))(((unint64_t)v7 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t sub_2289B3728(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 24) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 8) & ~v6);
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_2289B38D0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 24) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x2289B3B38);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t sub_2289B3B60@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_2289DF130();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v17 - v8;
  if (a1)
  {
    _sSY14BookFoundation12FeatureFlags0cD3Key8RawValueRpzrlE3keyAEvg_0();
    v17[0] = v19;
    sub_2289DF200();
    if (*(void *)(a1 + 16) && (unint64_t v10 = sub_2289D7160((uint64_t)v18), (v11 & 1) != 0)) {
      sub_228952C2C(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v17);
    }
    else {
      memset(v17, 0, sizeof(v17));
    }
    sub_228952AFC((uint64_t)v18);
    sub_228952BB0(&qword_26AECF7D8);
    char v12 = swift_dynamicCast();
    uint64_t v13 = *(void *)(a2 - 8);
    unsigned int v14 = *(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56);
    if (v12)
    {
      uint64_t v15 = *(void *)(a2 - 8);
      v14(v9, 0, 1, a2);
      (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a3, v9, a2);
      return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v14)(a3, 0, 1, a2);
    }
    v14(v9, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    uint64_t v13 = *(void *)(a2 - 8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a3, 1, 1, a2);
}

void *sub_2289B3DD4(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  if (!a2) {
    return v2;
  }
  _sSY14BookFoundation12FeatureFlags0cD3Key8RawValueRpzrlE3keyAEvg_0();
  long long v26 = *(_OWORD *)&v28[5];
  sub_2289DF200();
  if (v2[2] && (unint64_t v3 = sub_2289D7160((uint64_t)v28), (v4 & 1) != 0))
  {
    sub_228952C2C(v2[7] + 32 * v3, (uint64_t)&v26);
  }
  else
  {
    long long v26 = 0u;
    long long v27 = 0u;
  }
  sub_228952AFC((uint64_t)v28);
  if (!*((void *)&v27 + 1))
  {
    sub_228952B50((uint64_t)&v26);
    return 0;
  }
  sub_22897D02C(&v26, v29);
  sub_228952C2C((uint64_t)v29, (uint64_t)v28);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_61:
    sub_22897D02C(v29, v28);
    sub_2289B2CC8();
    if (swift_dynamicCast()) {
      return (void *)v26;
    }
    return 0;
  }
  uint64_t result = (void *)v26;
  uint64_t v6 = HIBYTE(*((void *)&v26 + 1)) & 0xFLL;
  uint64_t v7 = v26 & 0xFFFFFFFFFFFFLL;
  if ((*((void *)&v26 + 1) & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(*((void *)&v26 + 1)) & 0xFLL;
  }
  else {
    uint64_t v8 = v26 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8)
  {
    swift_bridgeObjectRelease();
    goto LABEL_61;
  }
  if ((*((void *)&v26 + 1) & 0x1000000000000000) != 0)
  {
    uint64_t v10 = (uint64_t)sub_2289A5844(v26, *((uint64_t *)&v26 + 1), 10);
    char v12 = v25;
    goto LABEL_52;
  }
  if ((*((void *)&v26 + 1) & 0x2000000000000000) == 0)
  {
    if ((v26 & 0x1000000000000000) != 0) {
      uint64_t v9 = (unsigned __int8 *)((*((void *)&v26 + 1) & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v9 = (unsigned __int8 *)sub_2289DF2A0();
    }
    uint64_t v10 = (uint64_t)sub_2289A582C(v9, v7, 10);
    char v12 = v11 & 1;
LABEL_52:
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      uint64_t v2 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v10);
      sub_2289559D0((uint64_t)v29);
      return v2;
    }
    goto LABEL_61;
  }
  v28[0] = v26;
  v28[1] = *((void *)&v26 + 1) & 0xFFFFFFFFFFFFFFLL;
  if (v26 == 43)
  {
    if (!v6) {
      goto LABEL_68;
    }
    if (v6 == 1 || (BYTE1(v26) - 48) > 9u) {
      goto LABEL_39;
    }
    uint64_t v10 = (BYTE1(v26) - 48);
    if (v6 != 2)
    {
      if ((BYTE2(v26) - 48) > 9u) {
        goto LABEL_39;
      }
      uint64_t v10 = 10 * (BYTE1(v26) - 48) + (BYTE2(v26) - 48);
      uint64_t v13 = v6 - 3;
      if (v13)
      {
        unsigned int v14 = (unsigned __int8 *)v28 + 3;
        while (1)
        {
          unsigned int v15 = *v14 - 48;
          if (v15 > 9) {
            goto LABEL_39;
          }
          uint64_t v16 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
            goto LABEL_39;
          }
          uint64_t v10 = v16 + v15;
          if (__OFADD__(v16, v15)) {
            goto LABEL_39;
          }
          char v12 = 0;
          ++v14;
          if (!--v13) {
            goto LABEL_52;
          }
        }
      }
    }
LABEL_51:
    char v12 = 0;
    goto LABEL_52;
  }
  if (v26 != 45)
  {
    if (!v6 || (v26 - 48) > 9u) {
      goto LABEL_39;
    }
    uint64_t v10 = (v26 - 48);
    if (v6 != 1)
    {
      if ((BYTE1(v26) - 48) > 9u) {
        goto LABEL_39;
      }
      uint64_t v10 = 10 * (v26 - 48) + (BYTE1(v26) - 48);
      uint64_t v17 = v6 - 2;
      if (v17)
      {
        unint64_t v18 = (unsigned __int8 *)v28 + 2;
        while (1)
        {
          unsigned int v19 = *v18 - 48;
          if (v19 > 9) {
            goto LABEL_39;
          }
          uint64_t v20 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
            goto LABEL_39;
          }
          uint64_t v10 = v20 + v19;
          if (__OFADD__(v20, v19)) {
            goto LABEL_39;
          }
          char v12 = 0;
          ++v18;
          if (!--v17) {
            goto LABEL_52;
          }
        }
      }
    }
    goto LABEL_51;
  }
  if (v6)
  {
    if (v6 != 1 && (BYTE1(v26) - 48) <= 9u)
    {
      if (v6 == 2)
      {
        char v12 = 0;
        uint64_t v10 = -(uint64_t)(BYTE1(v26) - 48);
        goto LABEL_52;
      }
      if ((BYTE2(v26) - 48) <= 9u)
      {
        uint64_t v10 = -10 * (BYTE1(v26) - 48) - (BYTE2(v26) - 48);
        uint64_t v21 = v6 - 3;
        if (!v21) {
          goto LABEL_51;
        }
        uint64_t v22 = (unsigned __int8 *)v28 + 3;
        while (1)
        {
          unsigned int v23 = *v22 - 48;
          if (v23 > 9) {
            break;
          }
          uint64_t v24 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
            break;
          }
          uint64_t v10 = v24 - v23;
          if (__OFSUB__(v24, v23)) {
            break;
          }
          char v12 = 0;
          ++v22;
          if (!--v21) {
            goto LABEL_52;
          }
        }
      }
    }
LABEL_39:
    uint64_t v10 = 0;
    char v12 = 1;
    goto LABEL_52;
  }
  __break(1u);
LABEL_68:
  __break(1u);
  return result;
}

uint64_t sub_2289B41CC(uint64_t a1)
{
  uint64_t v2 = sub_228952BB0(&qword_268284BE8);
  MEMORY[0x270FA5388](v2 - 8);
  char v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_2289DE6C0();
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v31 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  long long v28 = (char *)&v27 - v9;
  uint64_t v29 = v8;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v33 = a1 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  uint64_t v13 = v12 & v10;
  int64_t v34 = (unint64_t)(v11 + 63) >> 6;
  unsigned int v14 = (void (**)(char *, void, uint64_t, uint64_t))(v8 + 56);
  unsigned int v15 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v30 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v35 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  unint64_t v32 = MEMORY[0x263F8EE78];
  if (!v13) {
    goto LABEL_7;
  }
LABEL_4:
  for (v13 &= v13 - 1; ; uint64_t v13 = (v19 - 1) & v19)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2289DE6A0();
    (*v14)(v4, 0, 1, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*v15)(v4, 1, v5) == 1)
    {
      uint64_t result = sub_22896EABC((uint64_t)v4, &qword_268284BE8);
      if (v13) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v21 = *v30;
      uint64_t v22 = v28;
      (*v30)(v28, v4, v5);
      v21(v31, v22, v5);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v32 = sub_22896BE90(0, *(void *)(v32 + 16) + 1, 1, v32);
      }
      unint64_t v24 = *(void *)(v32 + 16);
      unint64_t v23 = *(void *)(v32 + 24);
      if (v24 >= v23 >> 1) {
        unint64_t v32 = sub_22896BE90(v23 > 1, v24 + 1, 1, v32);
      }
      char v25 = v31;
      unint64_t v26 = v32;
      *(void *)(v32 + 16) = v24 + 1;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v21)(v26+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v24, v25, v5);
      if (v13) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v18 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v18 >= v34) {
      goto LABEL_29;
    }
    uint64_t v19 = *(void *)(v33 + 8 * v18);
    ++v17;
    if (!v19)
    {
      int64_t v17 = v18 + 1;
      if (v18 + 1 >= v34) {
        goto LABEL_29;
      }
      uint64_t v19 = *(void *)(v33 + 8 * v17);
      if (!v19)
      {
        int64_t v17 = v18 + 2;
        if (v18 + 2 >= v34) {
          goto LABEL_29;
        }
        uint64_t v19 = *(void *)(v33 + 8 * v17);
        if (!v19)
        {
          int64_t v17 = v18 + 3;
          if (v18 + 3 >= v34) {
            goto LABEL_29;
          }
          uint64_t v19 = *(void *)(v33 + 8 * v17);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_22:
    ;
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v34)
  {
LABEL_29:
    swift_release();
    return v32;
  }
  uint64_t v19 = *(void *)(v33 + 8 * v20);
  if (v19)
  {
    int64_t v17 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v17 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v17 >= v34) {
      goto LABEL_29;
    }
    uint64_t v19 = *(void *)(v33 + 8 * v17);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

__n128 MCatalogRequestURLBuilder.init(href:additionalParameters:bag:clientIdentifier:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v16 = *a5;
  sub_2289B57AC(0, 0, 0, a3, a1, a2, a4, &v16, (uint64_t)v12);
  if (!v6)
  {
    uint64_t v9 = v13;
    char v10 = v14;
    __n128 result = v15;
    long long v11 = v12[1];
    *(_OWORD *)a6 = v12[0];
    *(_OWORD *)(a6 + 16) = v11;
    *(void *)(a6 + 32) = v9;
    *(unsigned char *)(a6 + 40) = v10;
    *(__n128 *)(a6 + 48) = result;
  }
  return result;
}

uint64_t sub_2289B4674(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = sub_22896BE90(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(sub_2289DE6C0() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_2289B4818(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_2289DF380();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_2289DF380();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x22A6A1E80](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *unint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = sub_2289BA400(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_2289DF380();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return sub_2289DEE30();
}

uint64_t MCatalogRequestURLBuilder.build()(uint64_t a1)
{
  *(void *)(v2 + 208) = a1;
  sub_228952BB0(&qword_2682841E0);
  *(void *)(v2 + 216) = swift_task_alloc();
  sub_228952BB0(&qword_268284BB0);
  *(void *)(v2 + 224) = swift_task_alloc();
  uint64_t v3 = sub_2289DE750();
  *(void *)(v2 + 232) = v3;
  *(void *)(v2 + 240) = *(void *)(v3 - 8);
  *(void *)(v2 + 248) = swift_task_alloc();
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 256) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 272) = v4;
  *(void *)(v2 + 288) = *(void *)(v1 + 32);
  *(unsigned char *)(v2 + 400) = *(unsigned char *)(v1 + 40);
  *(_OWORD *)(v2 + 296) = *(_OWORD *)(v1 + 48);
  return MEMORY[0x270FA2498](sub_2289B4B28, 0, 0);
}

uint64_t sub_2289B4B28()
{
  if (*(void *)(v0 + 304))
  {
    uint64_t v1 = *(void *)(v0 + 232);
    uint64_t v2 = *(void *)(v0 + 240);
    uint64_t v3 = *(void *)(v0 + 224);
    sub_2289DE730();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
    {
      sub_22896EABC(*(void *)(v0 + 224), &qword_268284BB0);
      sub_2289B7858();
      swift_allocError();
      *long long v4 = 0;
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
      return v5();
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 240) + 32))(*(void *)(v0 + 248), *(void *)(v0 + 224), *(void *)(v0 + 232));
      char v11 = *(unsigned char *)(v0 + 400);
      uint64_t v12 = *(void *)(v0 + 288);
      long long v13 = *(_OWORD *)(v0 + 272);
      *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 256);
      *(_OWORD *)(v0 + 96) = v13;
      *(void *)(v0 + 112) = v12;
      *(unsigned char *)(v0 + 120) = v11;
      *(_OWORD *)(v0 + 128) = *(_OWORD *)(v0 + 296);
      uint64_t v14 = (void *)swift_task_alloc();
      *(void *)(v0 + 344) = v14;
      *uint64_t v14 = v0;
      v14[1] = sub_2289B4F78;
      return sub_2289B60EC();
    }
  }
  else
  {
    char v7 = *(unsigned char *)(v0 + 400);
    uint64_t v9 = *(void *)(v0 + 288);
    uint64_t v8 = *(void *)(v0 + 296);
    long long v15 = *(_OWORD *)(v0 + 272);
    long long v16 = *(_OWORD *)(v0 + 256);
    sub_2289DE740();
    *(_OWORD *)(v0 + 16) = v16;
    *(_OWORD *)(v0 + 32) = v15;
    *(void *)(v0 + 48) = v9;
    *(unsigned char *)(v0 + 56) = v7;
    *(void *)(v0 + 64) = v8;
    *(void *)(v0 + 72) = 0;
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v10;
    void *v10 = v0;
    v10[1] = sub_2289B4D80;
    return sub_2289B5AAC();
  }
}

uint64_t sub_2289B4D80(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 320) = v2;
  swift_task_dealloc();
  if (v2)
  {
    char v7 = sub_2289B54D8;
  }
  else
  {
    *(void *)(v6 + 328) = a2;
    *(void *)(v6 + 336) = a1;
    char v7 = sub_2289B4EB4;
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t sub_2289B4EB4()
{
  sub_2289DE710();
  char v1 = *(unsigned char *)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 288);
  long long v3 = *(_OWORD *)(v0 + 272);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 96) = v3;
  *(void *)(v0 + 112) = v2;
  *(unsigned char *)(v0 + 120) = v1;
  *(_OWORD *)(v0 + 128) = *(_OWORD *)(v0 + 296);
  long long v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 344) = v4;
  *long long v4 = v0;
  v4[1] = sub_2289B4F78;
  return sub_2289B60EC();
}

uint64_t sub_2289B4F78(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 352) = a1;
  *(void *)(v3 + 360) = v1;
  swift_task_dealloc();
  if (v1) {
    long long v4 = sub_2289B5570;
  }
  else {
    long long v4 = sub_2289B508C;
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t sub_2289B508C()
{
  if (*(void *)(*(void *)(v0 + 352) + 16))
  {
    uint64_t v1 = sub_2289DE6D0();
    if (!v1) {
      uint64_t v1 = MEMORY[0x263F8EE78];
    }
    sub_2289B4674(v1);
    sub_2289DE6E0();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  char v2 = *(unsigned char *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 288);
  long long v4 = *(_OWORD *)(v0 + 272);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 160) = v4;
  *(void *)(v0 + 176) = v3;
  *(unsigned char *)(v0 + 184) = v2;
  *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 296);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 368) = v5;
  *(void *)uint64_t v5 = v0;
  *(void *)(v5 + 8) = sub_2289B51B8;
  *(void *)(v5 + 136) = *(void *)(v0 + 176);
  *(unsigned char *)(v5 + 129) = *(unsigned char *)(v0 + 184);
  return MEMORY[0x270FA2498](sub_2289B7518, 0, 0);
}

uint64_t sub_2289B51B8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 376) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_2289B5608;
  }
  else
  {
    *(void *)(v6 + 384) = a2;
    *(void *)(v6 + 392) = a1;
    uint64_t v7 = sub_2289B52EC;
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t sub_2289B52EC()
{
  uint64_t v2 = v0[48];
  uint64_t v1 = v0[49];
  uint64_t v3 = v0[27];
  sub_2289DE720();
  MEMORY[0x22A6A12F0](v1, v2);
  sub_2289DE6F0();
  uint64_t v4 = sub_2289DE880();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  uint64_t v8 = v0[30];
  uint64_t v7 = v0[31];
  uint64_t v9 = v0[29];
  if (v6 == 1)
  {
    sub_22896EABC(v0[27], &qword_2682841E0);
    sub_2289B7858();
    swift_allocError();
    unsigned char *v10 = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {
    uint64_t v12 = v0[27];
    uint64_t v13 = v0[26];
    (*(void (**)(void, void))(v8 + 8))(v0[31], v0[29]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v13, v12, v4);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_2289B54D8()
{
  (*(void (**)(void, void))(v0[30] + 8))(v0[31], v0[29]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_2289B5570()
{
  (*(void (**)(void, void))(v0[30] + 8))(v0[31], v0[29]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_2289B5608()
{
  (*(void (**)(void, void))(v0[30] + 8))(v0[31], v0[29]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

unint64_t MCatalogRequestURLBuilder.BuilderError.description.getter()
{
  if (*v0) {
    return 0xD000000000000032;
  }
  else {
    return 0xD000000000000028;
  }
}

BOOL static MCatalogRequestURLBuilder.BuilderError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t MCatalogRequestURLBuilder.BuilderError.hash(into:)()
{
  return sub_2289DF570();
}

uint64_t MCatalogRequestURLBuilder.BuilderError.hashValue.getter()
{
  return sub_2289DF590();
}

unint64_t sub_2289B576C()
{
  if (*v0) {
    return 0xD000000000000032;
  }
  else {
    return 0xD000000000000028;
  }
}

void sub_2289B57AC(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  if (a6)
  {
    char v39 = *a8;
    uint64_t v40 = a9;
    uint64_t v41 = a6;
    uint64_t v42 = a7;
    swift_bridgeObjectRelease();
    unint64_t v37 = sub_22898C8F0(MEMORY[0x263F8EE78]);
    goto LABEL_3;
  }
  if (!a1)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2289B7858();
    swift_allocError();
    *uint64_t v36 = 1;
    swift_willThrow();

    return;
  }
  if (!*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  unint64_t v37 = a1;
  char v39 = *a8;
  uint64_t v40 = a9;
  uint64_t v41 = 0;
  uint64_t v42 = a7;
  a5 = 0;
LABEL_3:
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (!a2) {
    a2 = MEMORY[0x263F8EE78];
  }
  if (a3) {
    uint64_t v14 = a3;
  }
  else {
    uint64_t v14 = MEMORY[0x263F8EE78];
  }
  if (a4)
  {
    unint64_t v43 = a4;
    int64_t v15 = *(void *)(a2 + 16);
    if (v15) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v43 = sub_22898A910(MEMORY[0x263F8EE78]);
    int64_t v15 = *(void *)(a2 + 16);
    if (v15)
    {
LABEL_10:
      sub_22896C428(0, v15, 0);
      uint64_t v16 = 0;
      uint64_t v17 = v13;
      do
      {
        uint64_t v18 = sub_2289DEBC0();
        uint64_t v20 = v19;
        unint64_t v22 = *(void *)(v17 + 16);
        unint64_t v21 = *(void *)(v17 + 24);
        if (v22 >= v21 >> 1) {
          sub_22896C428(v21 > 1, v22 + 1, 1);
        }
        ++v16;
        *(void *)(v17 + 16) = v22 + 1;
        uint64_t v23 = v17 + 16 * v22;
        *(void *)(v23 + 32) = v18;
        *(void *)(v23 + 40) = v20;
      }
      while (v15 != v16);
      swift_bridgeObjectRelease();
      uint64_t v13 = MEMORY[0x263F8EE78];
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = MEMORY[0x263F8EE78];
LABEL_20:
  uint64_t v24 = sub_22897B668(v17);
  swift_bridgeObjectRelease();
  int64_t v25 = *(void *)(v14 + 16);
  if (v25)
  {
    sub_22896C428(0, v25, 0);
    uint64_t v26 = 0;
    uint64_t v27 = v13;
    do
    {
      uint64_t v28 = sub_2289DEBC0();
      uint64_t v30 = v29;
      unint64_t v32 = *(void *)(v27 + 16);
      unint64_t v31 = *(void *)(v27 + 24);
      if (v32 >= v31 >> 1) {
        sub_22896C428(v31 > 1, v32 + 1, 1);
      }
      ++v26;
      *(void *)(v27 + 16) = v32 + 1;
      uint64_t v33 = v27 + 16 * v32;
      *(void *)(v33 + 32) = v28;
      *(void *)(v33 + 40) = v30;
    }
    while (v25 != v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = MEMORY[0x263F8EE78];
  }
  uint64_t v34 = sub_22897B668(v27);
  swift_bridgeObjectRelease();
  uint64_t v35 = sub_2289B41CC(v43);
  swift_bridgeObjectRelease();
  *(void *)uint64_t v40 = v37;
  *(void *)(v40 + 8) = v24;
  *(void *)(v40 + 16) = v34;
  *(void *)(v40 + 24) = v35;
  *(void *)(v40 + 32) = v42;
  *(unsigned char *)(v40 + 40) = v39;
  *(void *)(v40 + 48) = a5;
  *(void *)(v40 + 56) = v41;
}

uint64_t sub_2289B5AAC()
{
  uint64_t v2 = v0[1];
  v1[17] = *v0;
  v1[18] = v2;
  uint64_t v3 = v0[3];
  v1[19] = v0[2];
  v1[20] = v3;
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = v0[7];
  v1[21] = v4;
  v1[22] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v4;
  return MEMORY[0x270FA2498](sub_2289B5B64, 0, 0);
}

uint64_t sub_2289B5B64()
{
  id v1 = objc_msgSend(*(id *)(v0 + 168), sel_countryCode);
  *(void *)(v0 + 184) = v1;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 24) = sub_2289B5C80;
  uint64_t v2 = swift_continuation_init();
  *(void *)(v0 + 80) = MEMORY[0x263EF8330];
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_2289A7E54;
  *(void *)(v0 + 104) = &unk_26484C228;
  *(void *)(v0 + 112) = v2;
  objc_msgSend(v1, sel_valueWithCompletion_, v0 + 80);
  return MEMORY[0x270FA23F0](v0 + 16);
}

uint64_t sub_2289B5C80()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 192) = v1;
  if (v1) {
    uint64_t v2 = sub_2289B602C;
  }
  else {
    uint64_t v2 = sub_2289B5D90;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2289B5D90()
{
  uint64_t v13 = v0;
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void **)(v0 + 120);

  sub_2289DEBC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  strcpy((char *)v12, "/v1/catalog/");
  BYTE5(v12[1]) = 0;
  HIWORD(v12[1]) = -5120;
  sub_2289DEC90();
  swift_bridgeObjectRelease();
  uint64_t v5 = v12[0];
  uint64_t v4 = v12[1];
  if (*(void *)(v2 + 16) > 1uLL) {
    goto LABEL_9;
  }
  uint64_t v6 = sub_2289BA678(*(void *)(v0 + 136));
  if (v8)
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x2289B6014);
  }
  uint64_t v9 = *(void *)(v0 + 136);
  if (*(_DWORD *)(v9 + 36) != v7)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v6 != 1 << *(unsigned char *)(v9 + 32))
  {
    sub_2289BA624(v6, v7, v9, v12);
    if (LOBYTE(v12[0]) == 6)
    {
      v12[0] = v5;
      v12[1] = v4;
      sub_2289DEC90();
    }
    else
    {
      v12[0] = v5;
      v12[1] = v4;
      sub_2289DEC90();
      sub_2289DEC90();
      swift_bridgeObjectRelease();
    }
    uint64_t v5 = v12[0];
    uint64_t v4 = v12[1];
  }
LABEL_9:
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v10(v5, v4);
}

uint64_t sub_2289B602C()
{
  uint64_t v1 = (void *)v0[23];
  uint64_t v2 = (void *)v0[21];
  swift_willThrow();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_2289B60EC()
{
  uint64_t v2 = sub_2289DE6C0();
  *(void *)(v1 + 272) = v2;
  *(void *)(v1 + 280) = *(void *)(v2 - 8);
  *(void *)(v1 + 288) = swift_task_alloc();
  *(void *)(v1 + 296) = swift_task_alloc();
  *(void *)(v1 + 304) = swift_task_alloc();
  *(void *)(v1 + 312) = swift_task_alloc();
  *(void *)(v1 + 320) = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 328) = *(_OWORD *)v0;
  *(_OWORD *)(v1 + 344) = v3;
  *(void *)(v1 + 360) = *(void *)(v0 + 32);
  *(unsigned char *)(v1 + 225) = *(unsigned char *)(v0 + 40);
  *(_OWORD *)(v1 + 368) = *(_OWORD *)(v0 + 48);
  return MEMORY[0x270FA2498](sub_2289B6208, 0, 0);
}

uint64_t sub_2289B6208()
{
  uint64_t v67 = v0;
  uint64_t v2 = (void *)v0;
  *(void *)(v0 + 232) = MEMORY[0x263F8EE78];
  uint64_t v3 = *(void *)(v0 + 328);
  if (*(void *)(v3 + 16) >= 2uLL)
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    uint64_t v5 = (void *)sub_2289C6068(v4);
    swift_bridgeObjectRelease();
    v66[0] = v5;
    swift_retain();
    sub_2289BC0D0((uint64_t *)v66, 0x73746E65746E6F63uLL, 0xE800000000000000);
    swift_release();
    uint64_t v17 = v66[0];
    uint64_t v18 = v66[0][2];
    if (v18)
    {
      uint64_t v63 = *(void *)(v0 + 328);
      uint64_t v62 = *(void *)(v0 + 280);
      swift_retain();
      uint64_t v19 = 0;
      uint64_t v1 = (void *)MEMORY[0x263F8EE78];
      uint64_t v58 = (void *)v0;
      uint64_t v59 = v3;
      uint64_t v60 = v18;
      uint64_t v61 = v17;
      while (1)
      {
        if (*(void *)(v3 + 16))
        {
          unint64_t v22 = sub_2289D7000(*((unsigned char *)v17 + v19 + 32));
          if (v23)
          {
            uint64_t v24 = *(void *)(*(void *)(v63 + 56) + 8 * v22);
            v66[0] = (void *)1534289001;
            v66[1] = (void *)0xE400000000000000;
            swift_bridgeObjectRetain();
            sub_2289DEC90();
            swift_bridgeObjectRelease();
            sub_2289DEC90();
            uint64_t v25 = *(void *)(v24 + 16);
            if (v25)
            {
              uint64_t v64 = v1;
              sub_228952BB0(&qword_268284248);
              uint64_t v26 = (void *)swift_allocObject();
              int64_t v27 = j__malloc_size(v26);
              uint64_t v28 = v27 - 32;
              if (v27 < 32) {
                uint64_t v28 = v27 - 17;
              }
              _OWORD v26[2] = v25;
              v26[3] = 2 * (v28 >> 4);
              uint64_t v29 = sub_2289C6238((uint64_t)v66, v26 + 4, v25, v24);
              uint64_t v2 = v66[0];
              uint64_t v1 = v66[3];
              swift_bridgeObjectRetain_n();
              sub_22898D2D0();
              if (v29 != v25)
              {
                __break(1u);
                goto LABEL_45;
              }
              swift_bridgeObjectRelease();
              uint64_t v2 = v58;
              uint64_t v3 = v59;
              uint64_t v1 = v64;
            }
            else
            {
              uint64_t v26 = (void *)MEMORY[0x263F8EE78];
            }
            uint64_t v65 = v26;
            sub_2289B7CF0((uint64_t *)&v65);
            v2[33] = v65;
            sub_228952BB0(&qword_2682843F0);
            sub_2289BC184((unint64_t *)&qword_2682843F8, &qword_2682843F0);
            sub_2289DEB30();
            swift_release();
            swift_bridgeObjectRelease();
            sub_2289DE6A0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v1 = (void *)sub_22896BE90(0, v1[2] + 1, 1, (unint64_t)v1);
            }
            uint64_t v18 = v60;
            uint64_t v17 = v61;
            unint64_t v31 = v1[2];
            unint64_t v30 = v1[3];
            if (v31 >= v30 >> 1) {
              uint64_t v1 = (void *)sub_22896BE90(v30 > 1, v31 + 1, 1, (unint64_t)v1);
            }
            uint64_t v20 = v2[40];
            uint64_t v21 = v2[34];
            v1[2] = v31 + 1;
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v62 + 32))((unint64_t)v1+ ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(void *)(v62 + 72) * v31, v20, v21);
            v2[29] = v1;
          }
        }
        if (v18 == ++v19)
        {
          swift_release_n();
          goto LABEL_28;
        }
      }
    }
    swift_release();
LABEL_27:
    uint64_t v1 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_28;
  }
  uint64_t v6 = sub_2289BA778(*(void *)(v0 + 328));
  if (v8)
  {
    __break(1u);
    JUMPOUT(0x2289B6C34);
  }
  uint64_t v9 = *(void *)(v0 + 328);
  if (*(_DWORD *)(v9 + 36) != v7)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    uint64_t v1 = (void *)sub_22896BE90(0, v1[2] + 1, 1, (unint64_t)v1);
    goto LABEL_30;
  }
  if (v6 == 1 << *(unsigned char *)(v9 + 32)) {
    goto LABEL_27;
  }
  sub_2289BA800(v66, v6, v7, 0, v9);
  uint64_t v10 = swift_bridgeObjectRetain();
  char v11 = sub_2289C5F80(v10);
  swift_bridgeObjectRelease();
  v66[0] = v11;
  sub_2289B7CF0((uint64_t *)v66);
  *(void **)(v0 + 256) = v66[0];
  sub_228952BB0(&qword_2682843F0);
  sub_2289BC184((unint64_t *)&qword_2682843F8, &qword_2682843F0);
  sub_2289DEB30();
  swift_release();
  swift_bridgeObjectRelease();
  sub_2289DE6A0();
  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)sub_22896BE90(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v13 = v1[2];
  unint64_t v12 = v1[3];
  if (v13 >= v12 >> 1) {
    uint64_t v1 = (void *)sub_22896BE90(v12 > 1, v13 + 1, 1, (unint64_t)v1);
  }
  uint64_t v14 = v2[39];
  uint64_t v15 = v2[34];
  uint64_t v16 = v2[35];
  v1[2] = v13 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32))((unint64_t)v1+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v13, v14, v15);
  v2[29] = v1;
LABEL_28:
  if (!*(void *)(v2[42] + 16)) {
    goto LABEL_33;
  }
  uint64_t v32 = swift_bridgeObjectRetain();
  uint64_t v33 = sub_2289C5F80(v32);
  swift_bridgeObjectRelease();
  v66[0] = v33;
  sub_2289B7CF0((uint64_t *)v66);
  v2[31] = v66[0];
  sub_228952BB0(&qword_2682843F0);
  sub_2289BC184((unint64_t *)&qword_2682843F8, &qword_2682843F0);
  sub_2289DEB30();
  swift_release();
  sub_2289DE6A0();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_46;
  }
LABEL_30:
  unint64_t v35 = v1[2];
  unint64_t v34 = v1[3];
  if (v35 >= v34 >> 1) {
    uint64_t v1 = (void *)sub_22896BE90(v34 > 1, v35 + 1, 1, (unint64_t)v1);
  }
  uint64_t v36 = v2[38];
  uint64_t v37 = v2[34];
  uint64_t v38 = v2[35];
  v1[2] = v35 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v38 + 32))((unint64_t)v1+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(void *)(v38 + 72) * v35, v36, v37);
  v2[29] = v1;
LABEL_33:
  if (*(void *)(v2[43] + 16))
  {
    uint64_t v39 = swift_bridgeObjectRetain();
    uint64_t v40 = sub_2289C5F80(v39);
    swift_bridgeObjectRelease();
    v66[0] = v40;
    sub_2289B7CF0((uint64_t *)v66);
    v2[30] = v66[0];
    sub_228952BB0(&qword_2682843F0);
    sub_2289BC184((unint64_t *)&qword_2682843F8, &qword_2682843F0);
    sub_2289DEB30();
    swift_release();
    sub_2289DE6A0();
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v1 = (void *)sub_22896BE90(0, v1[2] + 1, 1, (unint64_t)v1);
    }
    unint64_t v42 = v1[2];
    unint64_t v41 = v1[3];
    if (v42 >= v41 >> 1) {
      uint64_t v1 = (void *)sub_22896BE90(v41 > 1, v42 + 1, 1, (unint64_t)v1);
    }
    uint64_t v43 = v2[37];
    uint64_t v44 = v2[34];
    uint64_t v45 = v2[35];
    v1[2] = v42 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v45 + 32))((unint64_t)v1+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v42, v43, v44);
    v2[29] = v1;
  }
  uint64_t v46 = v2[44];
  if (*(void *)(v46 + 16))
  {
    v66[0] = *((void **)v2 + 44);
    swift_bridgeObjectRetain();
    sub_2289B7D5C(v66);
    sub_2289B4674((uint64_t)v66[0]);
    uint64_t v46 = v2[44];
  }
  uint64_t v47 = v2[47];
  uint64_t v48 = v2;
  char v49 = *((unsigned char *)v2 + 225);
  uint64_t v50 = (void *)v48[45];
  uint64_t v51 = v48[46];
  uint64_t v53 = v48[42];
  uint64_t v52 = v48[43];
  uint64_t v54 = v48[41];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v55 = v50;
  v48[10] = v54;
  v48[11] = v53;
  v48[12] = v52;
  v48[13] = v46;
  v48[14] = v55;
  *((unsigned char *)v48 + 120) = v49;
  v48[16] = v51;
  v48[17] = v47;
  uint64_t v56 = (void *)swift_task_alloc();
  v48[48] = v56;
  *uint64_t v56 = v48;
  v56[1] = sub_2289B6C50;
  return sub_2289B5AAC();
}

uint64_t sub_2289B6C50(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 392) = v2;
  swift_task_dealloc();
  if (v2)
  {
    int v7 = sub_2289B7014;
  }
  else
  {
    *(void *)(v6 + 400) = a2;
    *(void *)(v6 + 408) = a1;
    int v7 = sub_2289B6D84;
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t sub_2289B6D84()
{
  v0[23] = v0[51];
  uint64_t v1 = (void *)v0[45];
  v0[24] = v0[50];
  v0[25] = 0x6F6363612F656D2FLL;
  v0[26] = 0xEB00000000746E75;
  sub_2289550F0();
  char v2 = sub_2289DF190();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v3 = v0[29];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
    return v4(v3);
  }
  else
  {
    uint64_t v6 = (void *)v0[45];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v7 = v6;
    swift_bridgeObjectRetain();
    id v8 = objc_msgSend(v7, sel_languageTag);
    v0[52] = v8;
    v0[2] = v0;
    v0[7] = v0 + 27;
    v0[3] = sub_2289B70F4;
    uint64_t v9 = swift_continuation_init();
    v0[18] = MEMORY[0x263EF8330];
    v0[19] = 0x40000000;
    v0[20] = sub_2289A7E54;
    v0[21] = &unk_26484C210;
    v0[22] = v9;
    objc_msgSend(v8, sel_valueWithCompletion_, v0 + 18);
    return MEMORY[0x270FA23F0](v0 + 2);
  }
}

uint64_t sub_2289B7014()
{
  uint64_t v1 = *(void **)(v0 + 360);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_2289B70F4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 424) = v1;
  if (v1) {
    char v2 = sub_2289B73EC;
  }
  else {
    char v2 = sub_2289B7204;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2289B7204()
{
  uint64_t v1 = *(void **)(v0 + 360);
  char v2 = *(void **)(v0 + 216);

  uint64_t v3 = sub_2289DEBC0();
  unint64_t v5 = v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    sub_2289DE6A0();
    swift_bridgeObjectRelease();
    unint64_t v7 = *(void *)(v0 + 232);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v7 = sub_22896BE90(0, *(void *)(v7 + 16) + 1, 1, v7);
    }
    unint64_t v9 = *(void *)(v7 + 16);
    unint64_t v8 = *(void *)(v7 + 24);
    if (v9 >= v8 >> 1) {
      unint64_t v7 = sub_22896BE90(v8 > 1, v9 + 1, 1, v7);
    }
    uint64_t v11 = *(void *)(v0 + 280);
    uint64_t v10 = *(void *)(v0 + 288);
    uint64_t v12 = *(void *)(v0 + 272);
    *(void *)(v7 + 16) = v9 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))(v7+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v9, v10, v12);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v7 = *(void *)(v0 + 232);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v13 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v13(v7);
}

uint64_t sub_2289B73EC()
{
  uint64_t v1 = (void *)v0[52];
  char v2 = (void *)v0[45];
  swift_willThrow();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_2289B74EC()
{
  *(void *)(v1 + 136) = *(void *)(v0 + 32);
  *(unsigned char *)(v1 + 129) = *(unsigned char *)(v0 + 40);
  return MEMORY[0x270FA2498](sub_2289B7518, 0, 0);
}

uint64_t sub_2289B7518()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 16;
  uint64_t v3 = v0 + 80;
  if (*(unsigned char *)(v1 + 129) == 3) {
    unint64_t v4 = &selRef_priceTrackingMediaAPIHost;
  }
  else {
    unint64_t v4 = &selRef_booksMediaAPIHost;
  }
  id v5 = [*(id *)(v1 + 136) *v4];
  *(void *)(v1 + 144) = v5;
  *(void *)(v1 + 16) = v1;
  *(void *)(v1 + 56) = v1 + 120;
  *(void *)(v1 + 24) = sub_2289B764C;
  uint64_t v6 = swift_continuation_init();
  *(void *)(v1 + 80) = MEMORY[0x263EF8330];
  *(void *)(v1 + 88) = 0x40000000;
  *(void *)(v1 + 96) = sub_2289A7E54;
  *(void *)(v1 + 104) = &unk_26484C1F8;
  *(void *)(v1 + 112) = v6;
  objc_msgSend(v5, sel_valueWithCompletion_, v3);
  return MEMORY[0x270FA23F0](v2);
}

uint64_t sub_2289B764C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = sub_2289B77E8;
  }
  else {
    uint64_t v2 = sub_2289B775C;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2289B775C()
{
  uint64_t v1 = *(void **)(v0 + 120);

  uint64_t v2 = sub_2289DEBC0();
  uint64_t v4 = v3;

  id v5 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v5(v2, v4);
}

uint64_t sub_2289B77E8()
{
  uint64_t v1 = *(void **)(v0 + 144);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

unint64_t sub_2289B7858()
{
  unint64_t result = qword_268284BD0;
  if (!qword_268284BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284BD0);
  }
  return result;
}

unint64_t sub_2289B78B0()
{
  unint64_t result = qword_268284BD8;
  if (!qword_268284BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284BD8);
  }
  return result;
}

uint64_t destroy for MCatalogRequestURLBuilder(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MCatalogRequestURLBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  id v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MCatalogRequestURLBuilder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + 32);
  id v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for MCatalogRequestURLBuilder(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MCatalogRequestURLBuilder(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MCatalogRequestURLBuilder(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MCatalogRequestURLBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MCatalogRequestURLBuilder()
{
  return &type metadata for MCatalogRequestURLBuilder;
}

unsigned char *storeEnumTagSinglePayload for MCatalogRequestURLBuilder.BuilderError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2289B7CB8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MCatalogRequestURLBuilder.BuilderError()
{
  return &type metadata for MCatalogRequestURLBuilder.BuilderError;
}

uint64_t sub_2289B7CF0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_2289BA728(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_2289B7E04(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_2289B7D5C(void **a1)
{
  uint64_t v2 = *(void *)(sub_2289DE6C0() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_2289BA73C(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  uint64_t result = sub_2289B84F0(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_2289B7E04(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_2289DF450();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_2289B9204(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  uint64_t v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_118:
      uint64_t v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_2289B9620((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = sub_2289BA3EC((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          uint64_t v100 = &v97[16 * v96 + 32];
          *(void *)uint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_2289DEE70();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v106 = v3;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = sub_2289DF480();
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      char v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ sub_2289DF480()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      uint64_t v22 = v20 + 1;
      uint64_t v9 = v20;
      uint64_t v20 = v22;
    }
    while (v22 < v3);
    uint64_t v20 = v22;
LABEL_36:
    uint64_t v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        uint64_t v27 = v20;
        uint64_t v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      uint64_t v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_2289B9F84(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = sub_2289B9F84((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    unint64_t v42 = v11 + 32;
    uint64_t v43 = &v11[16 * v41 + 32];
    *(void *)uint64_t v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      uint64_t v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          char v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        uint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        uint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        long long v88 = v42;
        unint64_t v89 = v44;
        uint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_2289B9620((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        unint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        uint64_t v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    uint64_t v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    uint64_t v32 = v3;
  }
  else {
    uint64_t v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      uint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        unint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        uint64_t v37 = v13;
        uint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_2289DF480() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      uint64_t v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  uint64_t result = sub_2289DF330();
  __break(1u);
  return result;
}

uint64_t sub_2289B84F0(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2289DE6C0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  long long v153 = (char *)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v165 = (char *)&v145 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v168 = (char *)&v145 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v167 = (char *)&v145 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v148 = (char *)&v145 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v155 = (char *)&v145 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v151 = (char *)&v145 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v150 = (char *)&v145 - v20;
  uint64_t v170 = a1;
  uint64_t v21 = a1[1];
  uint64_t result = sub_2289DF450();
  if (result >= v21)
  {
    if (v21 < 0) {
      goto LABEL_151;
    }
    if (v21) {
      return sub_2289B92D4(0, v21, 1, v170);
    }
    return result;
  }
  if (v21 >= 0) {
    uint64_t v23 = v21;
  }
  else {
    uint64_t v23 = v21 + 1;
  }
  if (v21 < -1) {
    goto LABEL_159;
  }
  uint64_t v146 = result;
  if (v21 < 2)
  {
    uint64_t v26 = v5;
    uint64_t v28 = (char *)MEMORY[0x263F8EE78];
    unint64_t v156 = MEMORY[0x263F8EE78]
         + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v145 = MEMORY[0x263F8EE78];
    if (v21 != 1)
    {
      unint64_t v30 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_117:
      if (v30 >= 2)
      {
        uint64_t v136 = *v170;
        do
        {
          unint64_t v137 = v30 - 2;
          if (v30 < 2) {
            goto LABEL_146;
          }
          if (!v136) {
            goto LABEL_158;
          }
          long long v138 = v28;
          long long v139 = v28 + 32;
          uint64_t v140 = *(void *)&v28[16 * v137 + 32];
          uint64_t v141 = *(void *)&v28[16 * v30 + 24];
          uint64_t v142 = v26;
          sub_2289B98BC(v136 + *(void *)(v26 + 72) * v140, v136 + *(void *)(v26 + 72) * *(void *)&v139[16 * v30 - 16], v136 + *(void *)(v26 + 72) * v141, v156);
          if (v2) {
            break;
          }
          if (v141 < v140) {
            goto LABEL_147;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v138 = sub_2289BA3EC((uint64_t)v138);
          }
          if (v137 >= *((void *)v138 + 2)) {
            goto LABEL_148;
          }
          uint64_t v143 = &v138[16 * v137 + 32];
          *(void *)uint64_t v143 = v140;
          *((void *)v143 + 1) = v141;
          unint64_t v144 = *((void *)v138 + 2);
          if (v30 > v144) {
            goto LABEL_149;
          }
          uint64_t v28 = v138;
          memmove(&v138[16 * v30 + 16], &v138[16 * v30 + 32], 16 * (v144 - v30));
          *((void *)v138 + 2) = v144 - 1;
          unint64_t v30 = v144 - 1;
          uint64_t v26 = v142;
        }
        while (v144 > 2);
      }
LABEL_128:
      swift_bridgeObjectRelease();
      *(void *)(v145 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v24 = v23 >> 1;
    uint64_t v25 = sub_2289DEE70();
    *(void *)(v25 + 16) = v24;
    uint64_t v26 = v5;
    unint64_t v27 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v145 = v25;
    unint64_t v156 = v25 + v27;
  }
  uint64_t v29 = 0;
  uint64_t v161 = v26 + 16;
  uint64_t v162 = (void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v166 = (char **)(v26 + 32);
  uint64_t v28 = (char *)MEMORY[0x263F8EE78];
  uint64_t v157 = v26;
  uint64_t v164 = v4;
  while (1)
  {
    uint64_t v31 = v29;
    uint64_t v32 = v29 + 1;
    uint64_t v154 = v29;
    if (v29 + 1 >= v21)
    {
      uint64_t v40 = v29 + 1;
      goto LABEL_69;
    }
    uint64_t v163 = v21;
    uint64_t v149 = v28;
    uint64_t v33 = *v170;
    uint64_t v34 = *(void *)(v26 + 72);
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    v35(v150, *v170 + v34 * v32, v4);
    uint64_t v158 = (char *)v33;
    uint64_t v169 = v34;
    v35(v151, v33 + v34 * v31, v4);
    uint64_t v36 = sub_2289DE6B0();
    uint64_t v38 = v37;
    if (v36 != sub_2289DE6B0()) {
      goto LABEL_20;
    }
    if (v38 == v39) {
      LODWORD(v160) = 0;
    }
    else {
LABEL_20:
    }
      LODWORD(v160) = sub_2289DF480();
    unint64_t v41 = v148;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v42 = *v162;
    uint64_t v43 = v164;
    (*v162)(v151, v164);
    v42(v150, v43);
    uint64_t v40 = v154 + 2;
    if (v154 + 2 >= v163)
    {
      uint64_t v55 = v157;
    }
    else
    {
      uint64_t v147 = v2;
      uint64_t v159 = v169 * v32;
      unint64_t v44 = v158;
      uint64_t v45 = v169 * v40;
      while (1)
      {
        uint64_t v46 = v40;
        uint64_t v47 = v164;
        v35(v155, (uint64_t)&v44[v45], v164);
        v35(v41, (uint64_t)&v44[v159], v47);
        uint64_t v48 = sub_2289DE6B0();
        uint64_t v50 = v49;
        if (v48 == sub_2289DE6B0() && v50 == v51) {
          int v52 = 0;
        }
        else {
          int v52 = sub_2289DF480();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v53 = v164;
        v42(v41, v164);
        v42(v155, v53);
        if ((v160 ^ v52)) {
          break;
        }
        uint64_t v40 = v46 + 1;
        v44 += v169;
        if (v163 == v46 + 1)
        {
          uint64_t v54 = v163;
          uint64_t v40 = v163;
          uint64_t v2 = v147;
          uint64_t v55 = v157;
          goto LABEL_33;
        }
      }
      uint64_t v2 = v147;
      uint64_t v55 = v157;
      uint64_t v40 = v46;
    }
    uint64_t v54 = v163;
LABEL_33:
    uint64_t v28 = v149;
    uint64_t v31 = v154;
    unint64_t v56 = v158;
    if ((v160 & 1) == 0) {
      break;
    }
    if (v40 < v154) {
      goto LABEL_152;
    }
    if (v154 >= v40) {
      break;
    }
    uint64_t v147 = v2;
    uint64_t v57 = 0;
    uint64_t v58 = v169 * (v40 - 1);
    uint64_t v59 = v40 * v169;
    uint64_t v60 = v154;
    uint64_t v61 = v154 * v169;
    do
    {
      if (v60 != v40 + v57 - 1)
      {
        if (!v56) {
          goto LABEL_157;
        }
        uint64_t v63 = &v56[v58];
        id v160 = *v166;
        ((void (*)(char *, char *, uint64_t))v160)(v153, &v56[v61], v164);
        if (v61 < v58 || &v56[v61] >= &v56[v59])
        {
          uint64_t v62 = v164;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v62 = v164;
          if (v61 != v58) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        ((void (*)(char *, char *, uint64_t))v160)(v63, v153, v62);
        uint64_t v55 = v157;
        unint64_t v56 = v158;
      }
      ++v60;
      --v57;
      v58 -= v169;
      v59 -= v169;
      v61 += v169;
    }
    while (v60 < v40 + v57);
    uint64_t v2 = v147;
    uint64_t v54 = v163;
    uint64_t v64 = v164;
    uint64_t v28 = v149;
    uint64_t v31 = v154;
    if (v40 < v163) {
      goto LABEL_49;
    }
LABEL_69:
    if (v40 < v31) {
      goto LABEL_145;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = sub_2289B9F84(0, *((void *)v28 + 2) + 1, 1, v28);
    }
    unint64_t v85 = *((void *)v28 + 2);
    unint64_t v84 = *((void *)v28 + 3);
    unint64_t v30 = v85 + 1;
    uint64_t v26 = v157;
    uint64_t v163 = v40;
    if (v85 >= v84 >> 1)
    {
      uint64_t v135 = sub_2289B9F84((char *)(v84 > 1), v85 + 1, 1, v28);
      uint64_t v26 = v157;
      uint64_t v28 = v135;
    }
    *((void *)v28 + 2) = v30;
    uint64_t v86 = v28 + 32;
    uint64_t v87 = &v28[16 * v85 + 32];
    uint64_t v88 = v163;
    *(void *)uint64_t v87 = v31;
    *((void *)v87 + 1) = v88;
    if (v85)
    {
      while (1)
      {
        unint64_t v89 = v30 - 1;
        if (v30 >= 4)
        {
          uint64_t v94 = &v86[16 * v30];
          uint64_t v95 = *((void *)v94 - 8);
          uint64_t v96 = *((void *)v94 - 7);
          BOOL v100 = __OFSUB__(v96, v95);
          uint64_t v97 = v96 - v95;
          if (v100) {
            goto LABEL_134;
          }
          uint64_t v99 = *((void *)v94 - 6);
          uint64_t v98 = *((void *)v94 - 5);
          BOOL v100 = __OFSUB__(v98, v99);
          uint64_t v92 = v98 - v99;
          char v93 = v100;
          if (v100) {
            goto LABEL_135;
          }
          unint64_t v101 = v30 - 2;
          uint64_t v102 = &v86[16 * v30 - 32];
          uint64_t v104 = *(void *)v102;
          uint64_t v103 = *((void *)v102 + 1);
          BOOL v100 = __OFSUB__(v103, v104);
          uint64_t v105 = v103 - v104;
          if (v100) {
            goto LABEL_137;
          }
          BOOL v100 = __OFADD__(v92, v105);
          uint64_t v106 = v92 + v105;
          if (v100) {
            goto LABEL_140;
          }
          if (v106 >= v97)
          {
            uint64_t v124 = &v86[16 * v89];
            uint64_t v126 = *(void *)v124;
            uint64_t v125 = *((void *)v124 + 1);
            BOOL v100 = __OFSUB__(v125, v126);
            uint64_t v127 = v125 - v126;
            if (v100) {
              goto LABEL_144;
            }
            BOOL v117 = v92 < v127;
            goto LABEL_106;
          }
        }
        else
        {
          if (v30 != 3)
          {
            uint64_t v118 = *((void *)v28 + 4);
            uint64_t v119 = *((void *)v28 + 5);
            BOOL v100 = __OFSUB__(v119, v118);
            uint64_t v111 = v119 - v118;
            char v112 = v100;
            goto LABEL_100;
          }
          uint64_t v91 = *((void *)v28 + 4);
          uint64_t v90 = *((void *)v28 + 5);
          BOOL v100 = __OFSUB__(v90, v91);
          uint64_t v92 = v90 - v91;
          char v93 = v100;
        }
        if (v93) {
          goto LABEL_136;
        }
        unint64_t v101 = v30 - 2;
        uint64_t v107 = &v86[16 * v30 - 32];
        uint64_t v109 = *(void *)v107;
        uint64_t v108 = *((void *)v107 + 1);
        BOOL v110 = __OFSUB__(v108, v109);
        uint64_t v111 = v108 - v109;
        char v112 = v110;
        if (v110) {
          goto LABEL_139;
        }
        uint64_t v113 = &v86[16 * v89];
        uint64_t v115 = *(void *)v113;
        uint64_t v114 = *((void *)v113 + 1);
        BOOL v100 = __OFSUB__(v114, v115);
        uint64_t v116 = v114 - v115;
        if (v100) {
          goto LABEL_142;
        }
        if (__OFADD__(v111, v116)) {
          goto LABEL_143;
        }
        if (v111 + v116 >= v92)
        {
          BOOL v117 = v92 < v116;
LABEL_106:
          if (v117) {
            unint64_t v89 = v101;
          }
          goto LABEL_108;
        }
LABEL_100:
        if (v112) {
          goto LABEL_138;
        }
        long long v120 = &v86[16 * v89];
        uint64_t v122 = *(void *)v120;
        uint64_t v121 = *((void *)v120 + 1);
        BOOL v100 = __OFSUB__(v121, v122);
        uint64_t v123 = v121 - v122;
        if (v100) {
          goto LABEL_141;
        }
        if (v123 < v111) {
          goto LABEL_14;
        }
LABEL_108:
        unint64_t v128 = v89 - 1;
        if (v89 - 1 >= v30)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!*v170) {
          goto LABEL_156;
        }
        uint64_t v129 = v28;
        uint64_t v130 = &v86[16 * v128];
        uint64_t v131 = *(void *)v130;
        uint64_t v132 = &v86[16 * v89];
        uint64_t v133 = *((void *)v132 + 1);
        sub_2289B98BC(*v170 + *(void *)(v26 + 72) * *(void *)v130, *v170 + *(void *)(v26 + 72) * *(void *)v132, *v170 + *(void *)(v26 + 72) * v133, v156);
        if (v2) {
          goto LABEL_128;
        }
        if (v133 < v131) {
          goto LABEL_131;
        }
        if (v89 > *((void *)v129 + 2)) {
          goto LABEL_132;
        }
        *(void *)uint64_t v130 = v131;
        *(void *)&v86[16 * v128 + 8] = v133;
        unint64_t v134 = *((void *)v129 + 2);
        if (v89 >= v134) {
          goto LABEL_133;
        }
        uint64_t v28 = v129;
        unint64_t v30 = v134 - 1;
        memmove(&v86[16 * v89], v132 + 16, 16 * (v134 - 1 - v89));
        *((void *)v129 + 2) = v134 - 1;
        uint64_t v26 = v157;
        if (v134 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v30 = 1;
LABEL_14:
    uint64_t v21 = v170[1];
    uint64_t v29 = v163;
    uint64_t v4 = v164;
    if (v163 >= v21) {
      goto LABEL_117;
    }
  }
  uint64_t v64 = v164;
  if (v40 >= v54) {
    goto LABEL_69;
  }
LABEL_49:
  if (__OFSUB__(v40, v31)) {
    goto LABEL_150;
  }
  if (v40 - v31 >= v146) {
    goto LABEL_69;
  }
  if (__OFADD__(v31, v146)) {
    goto LABEL_153;
  }
  if (v31 + v146 >= v54) {
    uint64_t v65 = v54;
  }
  else {
    uint64_t v65 = v31 + v146;
  }
  if (v65 >= v31)
  {
    if (v40 != v65)
    {
      uint64_t v149 = v28;
      uint64_t v147 = v2;
      uint64_t v66 = *(void *)(v55 + 72);
      uint64_t v158 = *(char **)(v55 + 16);
      uint64_t v159 = v66;
      uint64_t v169 = v66 * (v40 - 1);
      char v67 = (char *)(v40 * v66);
      uint64_t v152 = v65;
      do
      {
        uint64_t v70 = 0;
        uint64_t v71 = v31;
        uint64_t v163 = v40;
        id v160 = v67;
        while (1)
        {
          uint64_t v72 = *v170;
          uint64_t v73 = (uint64_t)&v67[v70 + *v170];
          uint64_t v74 = v158;
          ((void (*)(char *, uint64_t, uint64_t))v158)(v167, v73, v64);
          ((void (*)(char *, uint64_t, uint64_t))v74)(v168, v169 + v70 + v72, v64);
          uint64_t v75 = sub_2289DE6B0();
          uint64_t v77 = v76;
          if (v75 == sub_2289DE6B0() && v77 == v78) {
            break;
          }
          char v79 = sub_2289DF480();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v80 = *v162;
          uint64_t v64 = v164;
          (*v162)(v168, v164);
          v80(v167, v64);
          if ((v79 & 1) == 0) {
            goto LABEL_59;
          }
          uint64_t v81 = *v170;
          char v67 = v160;
          if (!*v170) {
            goto LABEL_155;
          }
          uint64_t v82 = v81 + v169 + v70;
          unint64_t v83 = *v166;
          ((void (*)(char *, char *, uint64_t))*v166)(v165, &v160[v81 + v70], v64);
          swift_arrayInitWithTakeFrontToBack();
          ((void (*)(uint64_t, char *, uint64_t))v83)(v82, v165, v64);
          v70 -= v159;
          ++v71;
          uint64_t v69 = v163;
          if (v163 == v71) {
            goto LABEL_60;
          }
        }
        swift_bridgeObjectRelease_n();
        uint64_t v68 = *v162;
        uint64_t v64 = v164;
        (*v162)(v168, v164);
        v68(v167, v64);
LABEL_59:
        uint64_t v69 = v163;
        char v67 = v160;
LABEL_60:
        uint64_t v40 = v69 + 1;
        v169 += v159;
        v67 += v159;
        uint64_t v31 = v154;
      }
      while (v40 != v152);
      uint64_t v40 = v152;
      uint64_t v2 = v147;
      uint64_t v28 = v149;
    }
    goto LABEL_69;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  uint64_t result = sub_2289DF330();
  __break(1u);
  return result;
}

uint64_t sub_2289B9204(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
    uint64_t result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (uint64_t result = sub_2289DF480(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      uint64_t result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2289B92D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v46 = a4;
  uint64_t v34 = a1;
  uint64_t v6 = sub_2289DE6C0();
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  unint64_t v44 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v48 = (char *)&v32 - v10;
  uint64_t result = MEMORY[0x270FA5388](v9);
  uint64_t v47 = (char *)&v32 - v13;
  uint64_t v42 = a3;
  uint64_t v33 = a2;
  if (a3 != a2)
  {
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v38 = v12 + 16;
    uint64_t v14 = *(void *)(v12 + 72);
    uint64_t v35 = (void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v36 = v6;
    uint64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
    uint64_t v15 = v14 * (v42 - 1);
    uint64_t v39 = v14;
    uint64_t v16 = v14 * v42;
LABEL_6:
    uint64_t v18 = 0;
    uint64_t v19 = v34;
    uint64_t v40 = v16;
    uint64_t v41 = v15;
    while (1)
    {
      uint64_t v20 = *v46;
      uint64_t v45 = v16 + v18;
      uint64_t v21 = v16 + v18 + v20;
      uint64_t v22 = v37;
      v37(v47, v21, v6);
      v22(v48, v15 + v18 + v20, v6);
      uint64_t v23 = sub_2289DE6B0();
      uint64_t v25 = v24;
      if (v23 == sub_2289DE6B0() && v25 == v26)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v6 = v36;
        uint64_t v17 = *v35;
        (*v35)(v48, v36);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v17)(v47, v6);
        uint64_t v16 = v40;
        uint64_t v15 = v41;
LABEL_5:
        v15 += v39;
        v16 += v39;
        if (++v42 == v33) {
          return result;
        }
        goto LABEL_6;
      }
      char v27 = sub_2289DF480();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = v36;
      uint64_t v28 = *v35;
      (*v35)(v48, v36);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v47, v6);
      uint64_t v16 = v40;
      uint64_t v15 = v41;
      if ((v27 & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v29 = *v46;
      if (!*v46) {
        break;
      }
      uint64_t v30 = v29 + v41 + v18;
      uint64_t v31 = *v43;
      (*v43)(v44, v29 + v40 + v18, v6);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v31)(v30, v44, v6);
      v18 -= v39;
      if (v42 == ++v19) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2289B9620(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  char v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      char v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v18 = (char *)(a3 - 16);
        uint64_t v19 = v6;
        while (1)
        {
          uint64_t v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (sub_2289DF480() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)uint64_t v18 = *((_OWORD *)v17 - 1);
            }
            uint64_t v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
            }
            char v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (sub_2289DF480() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      char v27 = v7;
    }
LABEL_50:
    sub_2289BA080((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_2289B98BC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v66 = sub_2289DE6C0();
  uint64_t v8 = *(void *)(v66 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v66);
  uint64_t v64 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v63 = (char *)&v58 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v62 = (char *)&v58 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v58 - v15;
  uint64_t v65 = *(void *)(v17 + 72);
  if (!v65)
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (a2 - a1 == 0x8000000000000000 && v65 == -1) {
    goto LABEL_69;
  }
  int64_t v18 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v65 == -1) {
    goto LABEL_70;
  }
  uint64_t v19 = (uint64_t)(a2 - a1) / v65;
  unint64_t v69 = a1;
  unint64_t v68 = a4;
  uint64_t v20 = v18 / v65;
  if (v19 >= v18 / v65)
  {
    if ((v20 & 0x8000000000000000) == 0)
    {
      uint64_t v22 = v20 * v65;
      if (a4 < a2 || a2 + v22 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v40 = a4 + v22;
      unint64_t v67 = a4 + v22;
      unint64_t v69 = a2;
      uint64_t v62 = (char *)a1;
      if (v22 >= 1 && a1 < a2)
      {
        uint64_t v42 = -v65;
        uint64_t v65 = *(void *)(v8 + 16);
        unint64_t v60 = a4;
        uint64_t v61 = v8 + 16;
        uint64_t v59 = (void (**)(char *, uint64_t))(v8 + 8);
        do
        {
          unint64_t v43 = a3;
          unint64_t v44 = (void (*)(char *, unint64_t, uint64_t))v65;
          uint64_t v45 = v66;
          ((void (*)(char *, unint64_t, uint64_t))v65)(v63, v40 + v42, v66);
          unint64_t v46 = a2 + v42;
          v44(v64, a2 + v42, v45);
          uint64_t v47 = sub_2289DE6B0();
          uint64_t v49 = v48;
          if (v47 == sub_2289DE6B0() && v49 == v50) {
            char v51 = 0;
          }
          else {
            char v51 = sub_2289DF480();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v52 = v43 + v42;
          uint64_t v53 = *v59;
          uint64_t v54 = v66;
          (*v59)(v64, v66);
          v53(v63, v54);
          unint64_t v55 = v60;
          if (v51)
          {
            if (v43 < a2 || v52 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v43 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v69 += v42;
          }
          else
          {
            unint64_t v56 = v67;
            v67 += v42;
            if (v43 < v56 || v52 >= v56)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v43 != v56)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v46 = a2;
          }
          unint64_t v40 = v67;
          if (v67 <= v55) {
            break;
          }
          a2 = v46;
          a3 = v43 + v42;
        }
        while (v46 > (unint64_t)v62);
      }
LABEL_67:
      sub_2289BA13C(&v69, &v68, (uint64_t *)&v67);
      return 1;
    }
  }
  else if ((v19 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = v19 * v65;
    if (a4 < a1 || a1 + v21 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v64 = (char *)(a4 + v21);
    unint64_t v67 = a4 + v21;
    if (v21 >= 1 && a2 < a3)
    {
      uint64_t v63 = *(char **)(v8 + 16);
      uint64_t v61 = v8 + 16;
      uint64_t v24 = (void (**)(char *, uint64_t))(v8 + 8);
      while (1)
      {
        unint64_t v25 = a3;
        uint64_t v26 = v66;
        char v27 = (void (*)(char *, unint64_t, uint64_t))v63;
        ((void (*)(char *, unint64_t, uint64_t))v63)(v16, a2, v66);
        v27(v62, a4, v26);
        uint64_t v28 = sub_2289DE6B0();
        uint64_t v30 = v29;
        if (v28 == sub_2289DE6B0() && v30 == v31) {
          break;
        }
        char v34 = sub_2289DF480();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v35 = *v24;
        uint64_t v36 = v66;
        (*v24)(v62, v66);
        v35(v16, v36);
        if ((v34 & 1) == 0) {
          goto LABEL_31;
        }
        unint64_t v37 = v69;
        unint64_t v38 = a2 + v65;
        if (v69 < a2 || v69 >= v38)
        {
          swift_arrayInitWithTakeFrontToBack();
          a3 = v25;
        }
        else
        {
          a3 = v25;
          if (v69 == a2) {
            unint64_t v37 = a2;
          }
          else {
            swift_arrayInitWithTakeBackToFront();
          }
        }
LABEL_37:
        unint64_t v69 = v37 + v65;
        a4 = v68;
        if (v68 < (unint64_t)v64)
        {
          a2 = v38;
          if (v38 < a3) {
            continue;
          }
        }
        goto LABEL_67;
      }
      swift_bridgeObjectRelease_n();
      uint64_t v32 = *v24;
      uint64_t v33 = v66;
      (*v24)(v62, v66);
      v32(v16, v33);
LABEL_31:
      unint64_t v37 = v69;
      unint64_t v39 = v68 + v65;
      if (v69 < v68 || v69 >= v39)
      {
        swift_arrayInitWithTakeFrontToBack();
        a3 = v25;
      }
      else
      {
        a3 = v25;
        if (v69 != v68) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      unint64_t v68 = v39;
      unint64_t v38 = a2;
      goto LABEL_37;
    }
    goto LABEL_67;
  }
LABEL_71:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

char *sub_2289B9F84(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_228952BB0(&qword_268284BE0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2289BA080(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)sub_2289DF3C0();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

uint64_t sub_2289BA13C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = sub_2289DE6C0();
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = sub_2289DF3C0();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_2289BA27C(void **a1, const void **a2, void *a3)
{
  unint64_t v3 = (char *)*a2;
  int64_t v4 = *a3 - (void)v3;
  if (v4 < 0)
  {
    uint64_t result = (char *)sub_2289DF3C0();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
    {
      return (char *)memmove(result, v3, v4);
    }
  }
  return result;
}

char *sub_2289BA320(void **a1, const void **a2, void *a3)
{
  unint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -40)
  {
    uint64_t result = (char *)sub_2289DF3C0();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
    {
      return (char *)memmove(result, v3, 40 * v6);
    }
  }
  return result;
}

char *sub_2289BA3EC(uint64_t a1)
{
  return sub_2289B9F84(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_2289BA400(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_2289DF380();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_2289DF380();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_2289BC184(&qword_268284BF0, &qword_268284388);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_228952BB0(&qword_268284388);
          uint64_t v12 = sub_2289D7C34(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for MResource();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_2289BA624@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, unsigned char *a4@<X8>)
{
  if (result < 0 || 1 << *(unsigned char *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a3 + 8 * ((unint64_t)result >> 6) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    *a4 = *(unsigned char *)(*(void *)(a3 + 48) + result);
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_2289BA678(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  uint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_2289BA728(uint64_t a1)
{
  return sub_22896C608(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_2289BA73C(void *a1)
{
  return sub_22896C774(0, a1[2], 0, a1);
}

uint64_t sub_2289BA750(uint64_t a1)
{
  return sub_22896C9B4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_2289BA764(void *a1)
{
  return sub_22896CC70(0, a1[2], 0, a1);
}

uint64_t sub_2289BA778(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

unsigned char *sub_2289BA800(unsigned char *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    *uint64_t result = *(unsigned char *)(*(void *)(a5 + 48) + a2);
    return (unsigned char *)swift_bridgeObjectRetain();
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_2289BA858(char *__src, char *a2, unint64_t a3, char *__dst, unint64_t a5, unint64_t a6)
{
  unint64_t v39 = __dst;
  unint64_t v8 = a2;
  uint64_t v9 = __src;
  size_t v10 = a2 - __src;
  unint64_t v11 = a3 - (void)a2;
  unint64_t v40 = __src;
  if (a2 - __src < (uint64_t)(a3 - (void)a2))
  {
    if ((v10 & 0x8000000000000000) == 0)
    {
      if (__dst != __src || a2 <= __dst) {
        memmove(__dst, __src, v10);
      }
      uint64_t v12 = &__dst[v10];
      unint64_t v38 = &__dst[v10];
      if (v8 != v9 && (unint64_t)v8 < a3)
      {
        uint64_t v13 = __dst;
        while (2)
        {
          uint64_t v14 = *v13;
          unint64_t v15 = 0xEB00000000736B6FLL;
          unint64_t v16 = 0x6F622D6F69647561;
          switch(*v8)
          {
            case 1:
              unint64_t v15 = 0x80000002289E5C70;
              unint64_t v16 = 0xD000000000000011;
              break;
            case 2:
              unint64_t v15 = 0xE700000000000000;
              unint64_t v16 = 0x73726F68747561;
              break;
            case 3:
              unint64_t v15 = 0xE500000000000000;
              unint64_t v16 = 0x736B6F6F62;
              break;
            case 4:
              unint64_t v16 = 0x7265732D6B6F6F62;
              unint64_t v15 = 0xEB00000000736569;
              break;
            case 5:
              unint64_t v15 = 0xE600000000000000;
              unint64_t v16 = 0x7365726E6567;
              break;
            case 6:
              unint64_t v15 = a6;
              swift_bridgeObjectRetain();
              unint64_t v16 = a5;
              break;
            default:
              break;
          }
          unint64_t v17 = 0xEB00000000736B6FLL;
          uint64_t v18 = 0x6F622D6F69647561;
          switch(v14)
          {
            case 1:
              unint64_t v17 = 0x80000002289E5C70;
              if (v16 == 0xD000000000000011) {
                goto LABEL_27;
              }
              goto LABEL_30;
            case 2:
              unint64_t v17 = 0xE700000000000000;
              if (v16 != 0x73726F68747561) {
                goto LABEL_30;
              }
              goto LABEL_27;
            case 3:
              unint64_t v17 = 0xE500000000000000;
              if (v16 != 0x736B6F6F62) {
                goto LABEL_30;
              }
              goto LABEL_27;
            case 4:
              unint64_t v17 = 0xEB00000000736569;
              if (v16 != 0x7265732D6B6F6F62) {
                goto LABEL_30;
              }
              goto LABEL_27;
            case 5:
              unint64_t v17 = 0xE600000000000000;
              uint64_t v18 = 0x7365726E6567;
              goto LABEL_26;
            case 6:
              unint64_t v17 = a6;
              swift_bridgeObjectRetain();
              if (v16 != a5) {
                goto LABEL_30;
              }
              goto LABEL_27;
            default:
LABEL_26:
              if (v16 != v18) {
                goto LABEL_30;
              }
LABEL_27:
              if (v15 == v17)
              {
                swift_bridgeObjectRelease_n();
              }
              else
              {
LABEL_30:
                char v19 = sub_2289DF480();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v19)
                {
                  uint64_t v20 = v8 + 1;
                  if (v9 < v8 || v9 >= v20 || v9 != v8) {
                    *uint64_t v9 = *v8;
                  }
                  goto LABEL_38;
                }
              }
              if (v9 != v13) {
                *uint64_t v9 = *v13;
              }
              unint64_t v39 = ++v13;
              uint64_t v20 = v8;
LABEL_38:
              ++v9;
              if (v13 < v12)
              {
                unint64_t v8 = v20;
                if ((unint64_t)v20 < a3) {
                  continue;
                }
              }
              unint64_t v40 = v9;
              break;
          }
          break;
        }
      }
      goto LABEL_82;
    }
LABEL_83:
    swift_bridgeObjectRelease();
    sub_2289DF3C0();
    __break(1u);
    JUMPOUT(0x2289BAEF4);
  }
  if ((v11 & 0x8000000000000000) != 0) {
    goto LABEL_83;
  }
  if (__dst != a2 || a3 <= (unint64_t)__dst) {
    memmove(__dst, a2, a3 - (void)a2);
  }
  uint64_t v35 = __dst;
  uint64_t v36 = v9;
  uint64_t v21 = &__dst[v11];
  unint64_t v38 = &__dst[v11];
  unint64_t v40 = v8;
  if (v9 < v8 && (char *)a3 != v8)
  {
    uint64_t v22 = (char *)(a3 - 1);
    BOOL v23 = v8;
    while (2)
    {
      unint64_t v37 = v22 + 1;
      uint64_t v24 = v21 - 1;
      unsigned int v26 = *--v23;
      uint64_t v25 = v26;
      unint64_t v27 = 0xEB00000000736B6FLL;
      unint64_t v28 = 0x6F622D6F69647561;
      switch(*(v21 - 1))
      {
        case 1:
          unint64_t v27 = 0x80000002289E5C70;
          unint64_t v28 = 0xD000000000000011;
          break;
        case 2:
          unint64_t v27 = 0xE700000000000000;
          unint64_t v28 = 0x73726F68747561;
          break;
        case 3:
          unint64_t v27 = 0xE500000000000000;
          unint64_t v28 = 0x736B6F6F62;
          break;
        case 4:
          unint64_t v28 = 0x7265732D6B6F6F62;
          unint64_t v27 = 0xEB00000000736569;
          break;
        case 5:
          unint64_t v27 = 0xE600000000000000;
          unint64_t v28 = 0x7365726E6567;
          break;
        case 6:
          unint64_t v27 = a6;
          swift_bridgeObjectRetain();
          unint64_t v28 = a5;
          break;
        default:
          break;
      }
      unint64_t v29 = 0xEB00000000736B6FLL;
      uint64_t v30 = 0x6F622D6F69647561;
      switch(v25)
      {
        case 1:
          unint64_t v29 = 0x80000002289E5C70;
          if (v28 == 0xD000000000000011) {
            goto LABEL_66;
          }
          goto LABEL_69;
        case 2:
          unint64_t v29 = 0xE700000000000000;
          if (v28 != 0x73726F68747561) {
            goto LABEL_69;
          }
          goto LABEL_66;
        case 3:
          unint64_t v29 = 0xE500000000000000;
          if (v28 != 0x736B6F6F62) {
            goto LABEL_69;
          }
          goto LABEL_66;
        case 4:
          unint64_t v29 = 0xEB00000000736569;
          if (v28 != 0x7265732D6B6F6F62) {
            goto LABEL_69;
          }
          goto LABEL_66;
        case 5:
          unint64_t v29 = 0xE600000000000000;
          uint64_t v30 = 0x7365726E6567;
          goto LABEL_65;
        case 6:
          unint64_t v29 = a6;
          swift_bridgeObjectRetain();
          if (v28 != a5) {
            goto LABEL_69;
          }
          goto LABEL_66;
        default:
LABEL_65:
          if (v28 != v30) {
            goto LABEL_69;
          }
LABEL_66:
          if (v27 == v29)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
LABEL_69:
            char v31 = sub_2289DF480();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v31)
            {
              if (v37 != v8 || v22 >= v8) {
                *uint64_t v22 = *v23;
              }
              unint64_t v40 = v23;
              goto LABEL_80;
            }
          }
          unint64_t v38 = v21 - 1;
          if (v37 < v21 || v22 >= v21)
          {
            *uint64_t v22 = *v24;
            BOOL v23 = v8;
            --v21;
          }
          else
          {
            if (v37 != v21) {
              *uint64_t v22 = *v24;
            }
            BOOL v23 = v8;
            --v21;
          }
LABEL_80:
          if (v23 <= v36) {
            break;
          }
          --v22;
          unint64_t v8 = v23;
          if (v21 <= v35) {
            break;
          }
          continue;
      }
      break;
    }
  }
LABEL_82:
  sub_2289BA27C((void **)&v40, (const void **)&v39, &v38);
  return 1;
}

uint64_t sub_2289BAF64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, unint64_t a6)
{
  uint64_t v19 = result;
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    uint64_t v7 = *a4;
    unint64_t v8 = (char *)(*a4 + a3);
    while (1)
    {
      char v9 = *(unsigned char *)(v7 + v6);
      uint64_t v10 = v19;
      unint64_t v11 = v8;
      while (2)
      {
        uint64_t v12 = *(v11 - 1);
        unint64_t v13 = 0xEB00000000736B6FLL;
        unint64_t v14 = 0x6F622D6F69647561;
        switch(v9)
        {
          case 1:
            unint64_t v13 = 0x80000002289E5C70;
            unint64_t v14 = 0xD000000000000011;
            break;
          case 2:
            unint64_t v13 = 0xE700000000000000;
            unint64_t v14 = 0x73726F68747561;
            break;
          case 3:
            unint64_t v13 = 0xE500000000000000;
            unint64_t v14 = 0x736B6F6F62;
            break;
          case 4:
            unint64_t v14 = 0x7265732D6B6F6F62;
            unint64_t v13 = 0xEB00000000736569;
            break;
          case 5:
            unint64_t v13 = 0xE600000000000000;
            unint64_t v14 = 0x7365726E6567;
            break;
          case 6:
            unint64_t v13 = a6;
            swift_bridgeObjectRetain();
            unint64_t v14 = a5;
            break;
          default:
            break;
        }
        unint64_t v15 = 0xEB00000000736B6FLL;
        uint64_t v16 = 0x6F622D6F69647561;
        switch(v12)
        {
          case 1:
            unint64_t v15 = 0x80000002289E5C70;
            if (v14 == 0xD000000000000011) {
              goto LABEL_25;
            }
            goto LABEL_26;
          case 2:
            unint64_t v15 = 0xE700000000000000;
            if (v14 != 0x73726F68747561) {
              goto LABEL_26;
            }
            goto LABEL_25;
          case 3:
            unint64_t v15 = 0xE500000000000000;
            if (v14 != 0x736B6F6F62) {
              goto LABEL_26;
            }
            goto LABEL_25;
          case 4:
            unint64_t v15 = 0xEB00000000736569;
            if (v14 != 0x7265732D6B6F6F62) {
              goto LABEL_26;
            }
            goto LABEL_25;
          case 5:
            unint64_t v15 = 0xE600000000000000;
            uint64_t v16 = 0x7365726E6567;
            goto LABEL_24;
          case 6:
            unint64_t v15 = a6;
            swift_bridgeObjectRetain();
            if (v14 != a5) {
              goto LABEL_26;
            }
            goto LABEL_25;
          default:
LABEL_24:
            if (v14 != v16) {
              goto LABEL_26;
            }
LABEL_25:
            if (v13 != v15)
            {
LABEL_26:
              char v17 = sub_2289DF480();
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              if ((v17 & 1) == 0) {
                goto LABEL_5;
              }
              if (!v7)
              {
                __break(1u);
                JUMPOUT(0x2289BB228);
              }
              char v9 = *v11;
              *unint64_t v11 = *(v11 - 1);
              *(v11 - 1) = v9;
              ++v10;
              --v11;
              if (v6 == v10) {
                goto LABEL_5;
              }
              continue;
            }
            uint64_t result = swift_bridgeObjectRelease_n();
LABEL_5:
            ++v6;
            ++v8;
            if (v6 == a2) {
              return result;
            }
            break;
        }
        break;
      }
    }
  }
  return result;
}

uint64_t sub_2289BB260(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = a1[1];
  swift_bridgeObjectRetain_n();
  uint64_t v7 = sub_2289DF450();
  if (v7 >= v6)
  {
    if (v6 < 0) {
      goto LABEL_207;
    }
    if (!v6) {
      return swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain();
    sub_2289BAF64(0, v6, 1, a1, a2, a3);
    if (!v3) {
      return swift_bridgeObjectRelease_n();
    }
LABEL_184:
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  if (v6 < -1) {
    goto LABEL_215;
  }
  uint64_t v112 = v6 - 2;
  unint64_t v119 = a3;
  uint64_t v108 = v7;
  uint64_t v120 = v3;
  uint64_t v106 = a1;
  if (v6 < 2)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v6 != 1)
    {
      unint64_t v15 = *(void *)(MEMORY[0x263F8EE78] + 16);
      unint64_t v14 = (char *)MEMORY[0x263F8EE78];
      goto LABEL_171;
    }
    uint64_t v107 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v9 = v8 >> 1;
    sub_228952BB0(&qword_268283FE8);
    uint64_t v10 = sub_2289DEE70();
    *(void *)(v10 + 16) = v9;
    uint64_t v107 = v10;
    __dst = (char *)(v10 + 32);
  }
  uint64_t v12 = 0;
  uint64_t v13 = *a1;
  unint64_t v14 = (char *)MEMORY[0x263F8EE78];
  uint64_t v109 = v6;
  uint64_t v122 = *a1;
LABEL_17:
  uint64_t v16 = v12 + 1;
  uint64_t v113 = v12;
  if (v12 + 1 < v6)
  {
    uint64_t v17 = *(unsigned __int8 *)(v13 + v12);
    unint64_t v18 = 0xEB00000000736B6FLL;
    unint64_t v19 = 0x6F622D6F69647561;
    switch(*(unsigned char *)(v13 + v16))
    {
      case 1:
        unint64_t v18 = 0x80000002289E5C70;
        unint64_t v19 = 0xD000000000000011;
        break;
      case 2:
        unint64_t v18 = 0xE700000000000000;
        unint64_t v19 = 0x73726F68747561;
        break;
      case 3:
        unint64_t v18 = 0xE500000000000000;
        unint64_t v19 = 0x736B6F6F62;
        break;
      case 4:
        unint64_t v19 = 0x7265732D6B6F6F62;
        unint64_t v18 = 0xEB00000000736569;
        break;
      case 5:
        unint64_t v18 = 0xE600000000000000;
        unint64_t v19 = 0x7365726E6567;
        break;
      case 6:
        swift_bridgeObjectRetain();
        unint64_t v19 = a2;
        unint64_t v18 = a3;
        break;
      default:
        break;
    }
    unint64_t v20 = 0xEB00000000736B6FLL;
    uint64_t v21 = 0x6F622D6F69647561;
    switch(v17)
    {
      case 1:
        unint64_t v20 = 0x80000002289E5C70;
        if (v19 == 0xD000000000000011) {
          goto LABEL_36;
        }
        goto LABEL_39;
      case 2:
        unint64_t v20 = 0xE700000000000000;
        if (v19 != 0x73726F68747561) {
          goto LABEL_39;
        }
        goto LABEL_36;
      case 3:
        unint64_t v20 = 0xE500000000000000;
        if (v19 != 0x736B6F6F62) {
          goto LABEL_39;
        }
        goto LABEL_36;
      case 4:
        unint64_t v20 = 0xEB00000000736569;
        if (v19 != 0x7265732D6B6F6F62) {
          goto LABEL_39;
        }
        goto LABEL_36;
      case 5:
        unint64_t v20 = 0xE600000000000000;
        uint64_t v21 = 0x7365726E6567;
        goto LABEL_35;
      case 6:
        swift_bridgeObjectRetain();
        unint64_t v20 = a3;
        if (v19 != a2) {
          goto LABEL_39;
        }
        goto LABEL_36;
      default:
LABEL_35:
        if (v19 != v21) {
          goto LABEL_39;
        }
LABEL_36:
        if (v18 == v20) {
          char v22 = 0;
        }
        else {
LABEL_39:
        }
          char v22 = sub_2289DF480();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v16 = v12 + 2;
        if (v12 + 2 >= v6)
        {
          if ((v22 & 1) == 0) {
            goto LABEL_80;
          }
          goto LABEL_71;
        }
        break;
    }
    while (1)
    {
      uint64_t v25 = v12;
      uint64_t v26 = *(unsigned __int8 *)(v13 + v12 + 2);
      uint64_t v27 = *(unsigned __int8 *)(v13 + v12++ + 1);
      unint64_t v28 = 0xEB00000000736B6FLL;
      unint64_t v29 = 0x6F622D6F69647561;
      switch(v26)
      {
        case 1:
          unint64_t v28 = 0x80000002289E5C70;
          unint64_t v29 = 0xD000000000000011;
          break;
        case 2:
          unint64_t v28 = 0xE700000000000000;
          unint64_t v29 = 0x73726F68747561;
          break;
        case 3:
          unint64_t v28 = 0xE500000000000000;
          unint64_t v29 = 0x736B6F6F62;
          break;
        case 4:
          unint64_t v29 = 0x7265732D6B6F6F62;
          unint64_t v28 = 0xEB00000000736569;
          break;
        case 5:
          unint64_t v28 = 0xE600000000000000;
          unint64_t v29 = 0x7365726E6567;
          break;
        case 6:
          swift_bridgeObjectRetain();
          unint64_t v29 = a2;
          unint64_t v28 = a3;
          break;
        default:
          break;
      }
      unint64_t v30 = 0xEB00000000736B6FLL;
      uint64_t v31 = 0x6F622D6F69647561;
      switch(v27)
      {
        case 1:
          unint64_t v30 = 0x80000002289E5C70;
          if (v29 != 0xD000000000000011) {
            goto LABEL_43;
          }
          goto LABEL_63;
        case 2:
          unint64_t v30 = 0xE700000000000000;
          if (v29 != 0x73726F68747561) {
            goto LABEL_43;
          }
          goto LABEL_63;
        case 3:
          unint64_t v30 = 0xE500000000000000;
          if (v29 != 0x736B6F6F62) {
            goto LABEL_43;
          }
          goto LABEL_63;
        case 4:
          unint64_t v30 = 0xEB00000000736569;
          if (v29 != 0x7265732D6B6F6F62) {
            goto LABEL_43;
          }
          goto LABEL_63;
        case 5:
          unint64_t v30 = 0xE600000000000000;
          uint64_t v31 = 0x7365726E6567;
          goto LABEL_62;
        case 6:
          swift_bridgeObjectRetain();
          unint64_t v30 = a3;
          if (v29 != a2) {
            goto LABEL_43;
          }
          goto LABEL_63;
        default:
LABEL_62:
          if (v29 != v31) {
            goto LABEL_43;
          }
LABEL_63:
          if (v28 == v30)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v13 = v122;
            if (v22)
            {
              uint64_t v16 = v25 + 2;
              uint64_t v12 = v113;
              if (v16 < v113) {
                goto LABEL_208;
              }
              goto LABEL_72;
            }
          }
          else
          {
LABEL_43:
            char v23 = sub_2289DF480();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            char v24 = v22 ^ v23;
            uint64_t v13 = v122;
            if (v24)
            {
              uint64_t v16 = v25 + 2;
              uint64_t v12 = v113;
              if ((v22 & 1) == 0) {
                goto LABEL_80;
              }
LABEL_71:
              if (v16 < v12) {
                goto LABEL_208;
              }
LABEL_72:
              if (v12 < v16)
              {
                uint64_t v32 = v16 - 1;
                uint64_t v33 = v12;
                while (1)
                {
                  if (v33 != v32)
                  {
                    if (!v13) {
                      goto LABEL_213;
                    }
                    char v34 = *(unsigned char *)(v13 + v33);
                    *(unsigned char *)(v13 + v33) = *(unsigned char *)(v13 + v32);
                    *(unsigned char *)(v13 + v32) = v34;
                  }
                  BOOL v77 = ++v33 < v32--;
                  if (!v77) {
                    goto LABEL_80;
                  }
                }
              }
              goto LABEL_80;
            }
          }
          if (v112 == v12)
          {
            uint64_t v16 = v6;
            uint64_t v12 = v113;
            if ((v22 & 1) == 0) {
              goto LABEL_80;
            }
            goto LABEL_71;
          }
          break;
      }
    }
  }
LABEL_80:
  if (v16 >= v6) {
    goto LABEL_119;
  }
  if (__OFSUB__(v16, v12)) {
    goto LABEL_206;
  }
  if (v16 - v12 >= v108) {
    goto LABEL_119;
  }
  uint64_t v35 = v12 + v108;
  if (__OFADD__(v12, v108)) {
    goto LABEL_209;
  }
  if (v35 >= v6) {
    uint64_t v35 = v6;
  }
  if (v35 < v12)
  {
LABEL_210:
    __break(1u);
LABEL_211:
    swift_bridgeObjectRelease_n();
    __break(1u);
LABEL_212:
    swift_bridgeObjectRelease_n();
    __break(1u);
LABEL_213:
    swift_bridgeObjectRelease_n();
    __break(1u);
LABEL_214:
    swift_bridgeObjectRelease_n();
    __break(1u);
LABEL_215:
    swift_bridgeObjectRelease_n();
    sub_2289DF330();
    __break(1u);
    JUMPOUT(0x2289BC028);
  }
  if (v16 == v35) {
    goto LABEL_119;
  }
  uint64_t v116 = v14;
  uint64_t v36 = (char *)(v13 + v16);
  uint64_t v110 = v35;
LABEL_91:
  char v37 = *(unsigned char *)(v13 + v16);
  unint64_t v38 = v36;
  while (2)
  {
    uint64_t v39 = *(v38 - 1);
    unint64_t v40 = 0xEB00000000736B6FLL;
    unint64_t v41 = 0x6F622D6F69647561;
    switch(v37)
    {
      case 1:
        unint64_t v40 = 0x80000002289E5C70;
        unint64_t v41 = 0xD000000000000011;
        break;
      case 2:
        unint64_t v40 = 0xE700000000000000;
        unint64_t v41 = 0x73726F68747561;
        break;
      case 3:
        unint64_t v40 = 0xE500000000000000;
        unint64_t v41 = 0x736B6F6F62;
        break;
      case 4:
        unint64_t v41 = 0x7265732D6B6F6F62;
        unint64_t v40 = 0xEB00000000736569;
        break;
      case 5:
        unint64_t v40 = 0xE600000000000000;
        unint64_t v41 = 0x7365726E6567;
        break;
      case 6:
        swift_bridgeObjectRetain();
        unint64_t v41 = a2;
        unint64_t v40 = a3;
        break;
      default:
        break;
    }
    unint64_t v42 = 0xEB00000000736B6FLL;
    uint64_t v43 = 0x6F622D6F69647561;
    switch(v39)
    {
      case 1:
        unint64_t v42 = 0x80000002289E5C70;
        if (v41 != 0xD000000000000011) {
          goto LABEL_111;
        }
        goto LABEL_110;
      case 2:
        unint64_t v42 = 0xE700000000000000;
        if (v41 != 0x73726F68747561) {
          goto LABEL_111;
        }
        goto LABEL_110;
      case 3:
        unint64_t v42 = 0xE500000000000000;
        if (v41 != 0x736B6F6F62) {
          goto LABEL_111;
        }
        goto LABEL_110;
      case 4:
        unint64_t v42 = 0xEB00000000736569;
        if (v41 != 0x7265732D6B6F6F62) {
          goto LABEL_111;
        }
        goto LABEL_110;
      case 5:
        unint64_t v42 = 0xE600000000000000;
        uint64_t v43 = 0x7365726E6567;
        goto LABEL_109;
      case 6:
        swift_bridgeObjectRetain();
        unint64_t v42 = a3;
        if (v41 != a2) {
          goto LABEL_111;
        }
        goto LABEL_110;
      default:
LABEL_109:
        if (v41 != v43) {
          goto LABEL_111;
        }
LABEL_110:
        if (v40 == v42)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_90;
        }
LABEL_111:
        char v44 = sub_2289DF480();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v44)
        {
          uint64_t v13 = v122;
          if (!v122) {
            goto LABEL_211;
          }
          char v37 = *v38;
          *unint64_t v38 = *(v38 - 1);
          *(v38 - 1) = v37;
          ++v12;
          --v38;
          if (v16 == v12) {
            goto LABEL_90;
          }
          continue;
        }
        uint64_t v13 = v122;
LABEL_90:
        ++v16;
        ++v36;
        uint64_t v12 = v113;
        if (v16 != v110) {
          goto LABEL_91;
        }
        uint64_t v16 = v110;
        unint64_t v14 = v116;
LABEL_119:
        if (v16 < v12) {
          goto LABEL_201;
        }
        uint64_t v111 = v16;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v14 = sub_2289B9F84(0, *((void *)v14 + 2) + 1, 1, v14);
        }
        unint64_t v46 = *((void *)v14 + 2);
        unint64_t v45 = *((void *)v14 + 3);
        unint64_t v15 = v46 + 1;
        if (v46 >= v45 >> 1) {
          unint64_t v14 = sub_2289B9F84((char *)(v45 > 1), v46 + 1, 1, v14);
        }
        *((void *)v14 + 2) = v15;
        uint64_t v47 = v14 + 32;
        uint64_t v48 = &v14[16 * v46 + 32];
        *(void *)uint64_t v48 = v12;
        *((void *)v48 + 1) = v111;
        if (v46)
        {
          BOOL v117 = v14;
          uint64_t v114 = v14 + 32;
          while (1)
          {
            unint64_t v49 = v15 - 1;
            if (v15 >= 4)
            {
              uint64_t v54 = &v47[16 * v15];
              uint64_t v55 = *((void *)v54 - 8);
              uint64_t v56 = *((void *)v54 - 7);
              BOOL v60 = __OFSUB__(v56, v55);
              uint64_t v57 = v56 - v55;
              if (v60) {
                goto LABEL_190;
              }
              uint64_t v59 = *((void *)v54 - 6);
              uint64_t v58 = *((void *)v54 - 5);
              BOOL v60 = __OFSUB__(v58, v59);
              uint64_t v52 = v58 - v59;
              char v53 = v60;
              if (v60) {
                goto LABEL_191;
              }
              unint64_t v61 = v15 - 2;
              uint64_t v62 = &v47[16 * v15 - 32];
              uint64_t v64 = *(void *)v62;
              uint64_t v63 = *((void *)v62 + 1);
              BOOL v60 = __OFSUB__(v63, v64);
              uint64_t v65 = v63 - v64;
              if (v60) {
                goto LABEL_193;
              }
              BOOL v60 = __OFADD__(v52, v65);
              uint64_t v66 = v52 + v65;
              if (v60) {
                goto LABEL_196;
              }
              if (v66 >= v57)
              {
                unint64_t v84 = &v47[16 * v49];
                uint64_t v86 = *(void *)v84;
                uint64_t v85 = *((void *)v84 + 1);
                BOOL v60 = __OFSUB__(v85, v86);
                uint64_t v87 = v85 - v86;
                if (v60) {
                  goto LABEL_200;
                }
                BOOL v77 = v52 < v87;
                goto LABEL_157;
              }
            }
            else
            {
              if (v15 != 3)
              {
                uint64_t v78 = *((void *)v14 + 4);
                uint64_t v79 = *((void *)v14 + 5);
                BOOL v60 = __OFSUB__(v79, v78);
                uint64_t v71 = v79 - v78;
                char v72 = v60;
                goto LABEL_151;
              }
              uint64_t v51 = *((void *)v14 + 4);
              uint64_t v50 = *((void *)v14 + 5);
              BOOL v60 = __OFSUB__(v50, v51);
              uint64_t v52 = v50 - v51;
              char v53 = v60;
            }
            if (v53) {
              goto LABEL_192;
            }
            unint64_t v61 = v15 - 2;
            unint64_t v67 = &v47[16 * v15 - 32];
            uint64_t v69 = *(void *)v67;
            uint64_t v68 = *((void *)v67 + 1);
            BOOL v70 = __OFSUB__(v68, v69);
            uint64_t v71 = v68 - v69;
            char v72 = v70;
            if (v70) {
              goto LABEL_195;
            }
            uint64_t v73 = &v47[16 * v49];
            uint64_t v75 = *(void *)v73;
            uint64_t v74 = *((void *)v73 + 1);
            BOOL v60 = __OFSUB__(v74, v75);
            uint64_t v76 = v74 - v75;
            if (v60) {
              goto LABEL_198;
            }
            if (__OFADD__(v71, v76)) {
              goto LABEL_199;
            }
            if (v71 + v76 >= v52)
            {
              BOOL v77 = v52 < v76;
LABEL_157:
              if (v77) {
                unint64_t v49 = v61;
              }
              goto LABEL_159;
            }
LABEL_151:
            if (v72) {
              goto LABEL_194;
            }
            uint64_t v80 = &v47[16 * v49];
            uint64_t v82 = *(void *)v80;
            uint64_t v81 = *((void *)v80 + 1);
            BOOL v60 = __OFSUB__(v81, v82);
            uint64_t v83 = v81 - v82;
            if (v60) {
              goto LABEL_197;
            }
            if (v83 < v71) {
              goto LABEL_16;
            }
LABEL_159:
            unint64_t v88 = v49 - 1;
            if (v49 - 1 >= v15)
            {
              __break(1u);
LABEL_187:
              __break(1u);
LABEL_188:
              __break(1u);
LABEL_189:
              __break(1u);
LABEL_190:
              __break(1u);
LABEL_191:
              __break(1u);
LABEL_192:
              __break(1u);
LABEL_193:
              __break(1u);
LABEL_194:
              __break(1u);
LABEL_195:
              __break(1u);
LABEL_196:
              __break(1u);
LABEL_197:
              __break(1u);
LABEL_198:
              __break(1u);
LABEL_199:
              __break(1u);
LABEL_200:
              __break(1u);
LABEL_201:
              __break(1u);
LABEL_202:
              __break(1u);
LABEL_203:
              __break(1u);
LABEL_204:
              __break(1u);
LABEL_205:
              __break(1u);
LABEL_206:
              __break(1u);
LABEL_207:
              __break(1u);
LABEL_208:
              __break(1u);
LABEL_209:
              __break(1u);
              goto LABEL_210;
            }
            if (!v13) {
              goto LABEL_212;
            }
            unint64_t v89 = &v47[16 * v88];
            uint64_t v90 = *(void *)v89;
            unint64_t v91 = v49;
            uint64_t v92 = &v47[16 * v49];
            uint64_t v93 = *((void *)v92 + 1);
            uint64_t v94 = (char *)(v13 + *(void *)v89);
            uint64_t v95 = (char *)(v13 + *(void *)v92);
            swift_bridgeObjectRetain();
            sub_2289BA858(v94, v95, v13 + v93, __dst, a2, v119);
            if (v120)
            {
LABEL_183:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(void *)(v107 + 16) = 0;
              goto LABEL_184;
            }
            swift_bridgeObjectRelease();
            if (v93 < v90) {
              goto LABEL_187;
            }
            if (v91 > *((void *)v117 + 2)) {
              goto LABEL_188;
            }
            *(void *)unint64_t v89 = v90;
            uint64_t v47 = v114;
            *(void *)&v114[16 * v88 + 8] = v93;
            unint64_t v96 = *((void *)v117 + 2);
            if (v91 >= v96) {
              goto LABEL_189;
            }
            unint64_t v14 = v117;
            uint64_t v120 = 0;
            unint64_t v15 = v96 - 1;
            memmove(v92, v92 + 16, 16 * (v96 - 1 - v91));
            *((void *)v117 + 2) = v96 - 1;
            a3 = v119;
            uint64_t v13 = v122;
            if (v96 <= 2) {
              goto LABEL_16;
            }
          }
        }
        unint64_t v15 = 1;
LABEL_16:
        uint64_t v6 = v109;
        uint64_t v12 = v111;
        if (v111 < v109) {
          goto LABEL_17;
        }
        uint64_t v11 = v107;
LABEL_171:
        uint64_t v107 = v11;
        if (v15 >= 2)
        {
          uint64_t v98 = *v106;
          do
          {
            unint64_t v99 = v15 - 2;
            if (v15 < 2) {
              goto LABEL_202;
            }
            if (!v98) {
              goto LABEL_214;
            }
            uint64_t v118 = v14;
            BOOL v100 = v14 + 32;
            uint64_t v101 = *(void *)&v14[16 * v99 + 32];
            uint64_t v102 = *(void *)&v14[16 * v15 + 24];
            uint64_t v103 = (char *)(v98 + *(void *)&v100[16 * v15 - 16]);
            swift_bridgeObjectRetain();
            sub_2289BA858((char *)(v98 + v101), v103, v98 + v102, __dst, a2, v119);
            if (v120) {
              goto LABEL_183;
            }
            swift_bridgeObjectRelease();
            if (v102 < v101) {
              goto LABEL_203;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v118 = sub_2289BA3EC((uint64_t)v118);
            }
            if (v99 >= *((void *)v118 + 2)) {
              goto LABEL_204;
            }
            uint64_t v104 = &v118[16 * v99 + 32];
            *(void *)uint64_t v104 = v101;
            *((void *)v104 + 1) = v102;
            unint64_t v105 = *((void *)v118 + 2);
            if (v15 > v105) {
              goto LABEL_205;
            }
            unint64_t v14 = v118;
            memmove(&v118[16 * v15 + 16], &v118[16 * v15 + 32], 16 * (v105 - v15));
            *((void *)v118 + 2) = v105 - 1;
            unint64_t v15 = v105 - 1;
          }
          while (v105 > 2);
        }
        swift_bridgeObjectRelease();
        *(void *)(v107 + 16) = 0;
        swift_bridgeObjectRelease_n();
        return swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_2289BC0D0(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = sub_2289BA750(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  swift_bridgeObjectRetain();
  sub_2289BB260(v9, a2, a3);
  swift_bridgeObjectRelease();
  *a1 = v6;
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_2289BC184(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_2289550A8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id NSNumber.cgFloatValue.getter()
{
  return objc_msgSend(v0, sel_doubleValue);
}

uint64_t sub_2289BC1D8(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v10 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v8 << 6))
  {
    int v12 = *(unsigned __int8 *)(*(void *)(a1 + 56) + i);
    if (v12 == 6)
    {
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_22896C32C(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
        uint64_t v9 = result;
      }
      unint64_t v17 = *(void *)(v9 + 16);
      unint64_t v16 = *(void *)(v9 + 24);
      if (v17 >= v16 >> 1)
      {
        uint64_t result = (uint64_t)sub_22896C32C((char *)(v16 > 1), v17 + 1, 1, (char *)v9);
        uint64_t v9 = result;
      }
      *(void *)(v9 + 16) = v17 + 1;
      *(unsigned char *)(v9 + v17 + 32) = v12;
      if (v5) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v13 >= v6) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v2 + 8 * v13);
    ++v8;
    if (!v14)
    {
      int64_t v8 = v13 + 1;
      if (v13 + 1 >= v6) {
        goto LABEL_29;
      }
      unint64_t v14 = *(void *)(v2 + 8 * v8);
      if (!v14)
      {
        int64_t v8 = v13 + 2;
        if (v13 + 2 >= v6) {
          goto LABEL_29;
        }
        unint64_t v14 = *(void *)(v2 + 8 * v8);
        if (!v14)
        {
          int64_t v8 = v13 + 3;
          if (v13 + 3 >= v6) {
            goto LABEL_29;
          }
          unint64_t v14 = *(void *)(v2 + 8 * v8);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v6)
  {
LABEL_29:
    swift_release();
    return v9;
  }
  unint64_t v14 = *(void *)(v2 + 8 * v15);
  if (v14)
  {
    int64_t v8 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v2 + 8 * v8);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_2289BC3B8(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_2289C57F4(a1, (uint64_t)sub_2289C6958, 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_2289BC444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_2289DF560();
    sub_2289DEC40();
    uint64_t v6 = sub_2289DF590();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_2289DF480() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          unint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_2289DF480() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

unint64_t MCatalogService.FetchError.description.getter()
{
  int v1 = *v0;
  if (v1 == 7) {
    return 0xD00000000000007FLL;
  }
  if (v1 == 8) {
    return 0xD000000000000029;
  }
  sub_2289DF250();
  swift_bridgeObjectRelease();
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      sub_2289DEC90();
      swift_bridgeObjectRelease();
      unint64_t result = 0xD00000000000002ALL;
      break;
    default:
      unint64_t result = 0xEB00000000736B92;
      break;
  }
  return result;
}

BOOL static MCatalogService.FetchError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  switch(v2)
  {
    case 6:
      return v3 == 6;
    case 7:
      return v3 == 7;
    case 8:
      return v3 == 8;
  }
  if ((v3 - 6) < 3) {
    return 0;
  }
  return v2 == v3;
}

BOOL sub_2289BC798(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  BOOL v4 = v3 == 6;
  BOOL v5 = v3 == 7;
  BOOL v6 = v3 == 8;
  BOOL v8 = v2 == v3 && (v3 - 9) < 0xFFFFFFFD;
  if (v2 == 8) {
    BOOL v8 = v6;
  }
  if (v2 == 7) {
    BOOL v8 = v5;
  }
  if (v2 == 6) {
    return v4;
  }
  else {
    return v8;
  }
}

id MCatalogService.init(config:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *a1;
  int v3 = (void *)*((void *)a1 + 1);
  *(unsigned char *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 40) = &type metadata for MCatalogRequestHandler;
  *(void *)(a2 + 48) = &off_26DD0B470;
  *(unsigned char *)(a2 + 16) = v2;
  *(void *)(a2 + 24) = v3;
  return v3;
}

uint64_t MCatalogService.init(config:requestHandler:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  *(void *)(a3 + 8) = v3;
  return sub_2289605CC(a2, a3 + 16);
}

uint64_t MCatalogService.batchRequests<A>(for:batchSize:relationships:views:additionalParameters:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 40) = a3;
  *(void *)(v8 + 48) = a4;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + 32) = a2;
  uint64_t v9 = *a6;
  uint64_t v10 = a6[1];
  *(void *)(v8 + 72) = v7;
  *(void *)(v8 + 80) = v9;
  *(void *)(v8 + 88) = v10;
  *(_DWORD *)(v8 + 120) = *((_DWORD *)a6 + 4);
  return MEMORY[0x270FA2498](sub_2289BC870, 0, 0);
}

uint64_t sub_2289BC870()
{
  int v1 = *(_DWORD *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 40);
  long long v11 = *(_OWORD *)(v0 + 24);
  long long v12 = *(_OWORD *)(v0 + 48);
  sub_2289DEA60();
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_2289DEAC0();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v0 + 96) = v8;
  *(void *)(v8 + 16) = v4;
  *(_OWORD *)(v8 + 24) = v11;
  *(void *)(v8 + 40) = v5;
  *(void *)(v8 + 48) = v6;
  *(_OWORD *)(v8 + 56) = v12;
  *(void *)(v8 + 72) = v3;
  *(void *)(v8 + 80) = v2;
  *(_DWORD *)(v8 + 88) = v1;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_2289BC9E8;
  return MEMORY[0x270FA22B8](v0 + 16, v7, v7, 0, 0, &unk_268284C30, v8, v7);
}

uint64_t sub_2289BC9E8()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_2289BCB20;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_2289BCB04;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2289BCB04()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_2289BCB20()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_2289BCB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(v8 + 148) = v13;
  *(void *)(v8 + 304) = a8;
  *(void *)(v8 + 312) = v12;
  *(void *)(v8 + 288) = a6;
  *(void *)(v8 + 296) = a7;
  *(void *)(v8 + 272) = a4;
  *(void *)(v8 + 280) = a5;
  *(void *)(v8 + 256) = a2;
  *(void *)(v8 + 264) = a3;
  *(void *)(v8 + 248) = a1;
  sub_228952BB0(&qword_268284CF0);
  *(void *)(v8 + 320) = swift_task_alloc();
  *(void *)(v8 + 328) = swift_task_alloc();
  uint64_t v9 = sub_228952BB0(&qword_268284D88);
  *(void *)(v8 + 336) = v9;
  *(void *)(v8 + 344) = *(void *)(v9 - 8);
  *(void *)(v8 + 352) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2289BCCA8, 0, 0);
}

uint64_t sub_2289BCCA8()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_2289BC1D8(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_22897B9EC(v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = 100;
  if (v5 == 1) {
    uint64_t v6 = 150;
  }
  if (v6 >= v1) {
    uint64_t v7 = v1;
  }
  else {
    uint64_t v7 = v6;
  }
  if (v1 <= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_2289C6140(v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_2289C8610(0, v10[2], v8, v8, (uint64_t)v10);
  swift_release();
  int64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = MEMORY[0x263F8EE78];
LABEL_40:
    uint64_t v49 = MEMORY[0x263F8EE80];
    uint64_t v78 = *(void *)(v46 + 16);
    if (!v78)
    {
LABEL_53:
      swift_bridgeObjectRelease();
      sub_228952BB0(&qword_268284C40);
      sub_228952BB0(&qword_268284630);
      sub_2289DEF40();
      *(void *)(v0 + 360) = v49;
      uint64_t v71 = (void *)swift_task_alloc();
      *(void *)(v0 + 368) = v71;
      *uint64_t v71 = v0;
      v71[1] = sub_2289BD688;
      uint64_t v31 = *(void *)(v0 + 336);
      unint64_t v28 = v0 + 240;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v32 = v0 + 208;
      return MEMORY[0x270FA2058](v28, v29, v30, v31, v32);
    }
    uint64_t v76 = (_OWORD *)(v0 + 16);
    uint64_t v50 = sub_2289DEF20();
    uint64_t v51 = *(void *)(v50 - 8);
    uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56);
    uint64_t v73 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
    char v72 = (void (**)(uint64_t, uint64_t))(v51 + 8);
    swift_bridgeObjectRetain();
    uint64_t v52 = 0;
    while (1)
    {
      uint64_t v55 = *(void *)(v0 + 320);
      uint64_t v54 = *(void *)(v0 + 328);
      int v85 = *(_DWORD *)(v0 + 148);
      uint64_t v84 = *(void *)(v0 + 312);
      uint64_t v56 = *(void *)(v0 + 296);
      uint64_t v83 = *(void *)(v0 + 304);
      long long v81 = *(_OWORD *)(v0 + 280);
      uint64_t v57 = *(void *)(v0 + 272);
      uint64_t v58 = *(void *)(v46 + 8 * v52 + 32);
      v74(v54, 1, 1, v50);
      sub_2289C8B8C(v57, (uint64_t)v76);
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = 0;
      BOOL v60 = (void *)(v59 + 16);
      *(void *)(v59 + 24) = 0;
      long long v61 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v59 + 32) = *v76;
      *(_OWORD *)(v59 + 48) = v61;
      *(_OWORD *)(v59 + 64) = *(_OWORD *)(v0 + 48);
      *(void *)(v59 + 80) = *(void *)(v0 + 64);
      *(void *)(v59 + 88) = v58;
      *(_OWORD *)(v59 + 96) = v81;
      *(void *)(v59 + 112) = v56;
      *(void *)(v59 + 120) = v83;
      *(void *)(v59 + 128) = v84;
      *(_DWORD *)(v59 + 136) = v85;
      sub_2289C8CD4(v54, v55);
      LODWORD(v54) = (*v73)(v55, 1, v50);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v62 = *(void *)(v0 + 320);
      if (v54 == 1)
      {
        sub_2289C8D3C(*(void *)(v0 + 320));
        if (!*v60) {
          goto LABEL_47;
        }
      }
      else
      {
        sub_2289DEF10();
        (*v72)(v62, v50);
        if (!*v60)
        {
LABEL_47:
          uint64_t v63 = 0;
          uint64_t v65 = 0;
          goto LABEL_48;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v63 = sub_2289DEEE0();
      uint64_t v65 = v64;
      swift_unknownObjectRelease();
LABEL_48:
      uint64_t v66 = **(void **)(v0 + 248);
      sub_228952BB0(&qword_268284C40);
      uint64_t v67 = v65 | v63;
      if (v65 | v63)
      {
        uint64_t v67 = v0 + 72;
        *(void *)(v0 + 72) = 0;
        *(void *)(v0 + 80) = 0;
        *(void *)(v0 + 88) = v63;
        *(void *)(v0 + 96) = v65;
      }
      ++v52;
      uint64_t v53 = *(void *)(v0 + 328);
      *(void *)(v0 + 104) = 1;
      *(void *)(v0 + 112) = v67;
      *(void *)(v0 + 120) = v66;
      swift_task_create();
      swift_release();
      sub_2289C8D3C(v53);
      swift_bridgeObjectRelease();
      if (v78 == v52)
      {
        swift_bridgeObjectRelease();
        uint64_t v49 = MEMORY[0x263F8EE80];
        goto LABEL_53;
      }
    }
  }
  uint64_t v75 = (void *)(v0 + 232);
  uint64_t v86 = MEMORY[0x263F8EE78];
  sub_22896C4F8(0, v12, 0);
  uint64_t v13 = 0;
  int64_t v77 = v12;
  uint64_t v79 = v11 + 32;
  uint64_t v80 = v0;
  while (1)
  {
    uint64_t v82 = v13;
    uint64_t v14 = *(void *)(v79 + 8 * v13);
    int64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v88 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_22896C558(0, v15, 0);
      uint64_t v16 = v88;
      BOOL v17 = (unsigned char *)(v14 + 48);
      do
      {
        uint64_t v18 = *((void *)v17 - 1);
        char v19 = *v17;
        *(void *)(v0 + 152) = *((void *)v17 - 2);
        *(void *)(v0 + 160) = v18;
        *(unsigned char *)(v0 + 168) = v19;
        swift_bridgeObjectRetain();
        sub_228952BB0(&qword_268284D00);
        sub_228952BB0(&qword_268284280);
        swift_dynamicCast();
        uint64_t v20 = *(void *)(v0 + 128);
        uint64_t v21 = *(void *)(v0 + 136);
        char v22 = *(unsigned char *)(v0 + 144);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_22896C558(0, *(void *)(v16 + 16) + 1, 1);
          uint64_t v16 = v88;
        }
        unint64_t v24 = *(void *)(v16 + 16);
        unint64_t v23 = *(void *)(v16 + 24);
        if (v24 >= v23 >> 1)
        {
          sub_22896C558(v23 > 1, v24 + 1, 1);
          uint64_t v16 = v88;
        }
        v17 += 24;
        *(void *)(v16 + 16) = v24 + 1;
        uint64_t v25 = v16 + 24 * v24;
        *(void *)(v25 + 32) = v20;
        *(void *)(v25 + 40) = v21;
        *(unsigned char *)(v25 + 48) = v22;
        --v15;
      }
      while (v15);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = MEMORY[0x263F8EE78];
    }
    if (*(void *)(v16 + 16))
    {
      sub_228952BB0(&qword_268284740);
      uint64_t v26 = (void *)sub_2289DF3B0();
      uint64_t v27 = *(void *)(v16 + 16);
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v26 = (void *)MEMORY[0x263F8EE80];
    }
    uint64_t v87 = v26;
    unint64_t v28 = swift_bridgeObjectRetain_n();
    if (v27) {
      break;
    }
LABEL_33:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v46 = v86;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_22896C4F8(0, *(void *)(v86 + 16) + 1, 1);
      uint64_t v46 = v86;
    }
    uint64_t v0 = v80;
    unint64_t v48 = *(void *)(v46 + 16);
    unint64_t v47 = *(void *)(v46 + 24);
    if (v48 >= v47 >> 1)
    {
      sub_22896C4F8(v47 > 1, v48 + 1, 1);
      uint64_t v46 = v86;
    }
    uint64_t v13 = v82 + 1;
    *(void *)(v46 + 16) = v48 + 1;
    *(void *)(v46 + 8 * v48 + 32) = v26;
    if (v82 + 1 == v77)
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
  }
  unint64_t v33 = 0;
  char v34 = (unsigned char *)(v16 + 48);
  while (v33 < *(void *)(v16 + 16))
  {
    char v35 = *v34;
    uint64_t v37 = *((void *)v34 - 2);
    uint64_t v36 = *((void *)v34 - 1);
    swift_bridgeObjectRetain();
    if (!v36) {
      goto LABEL_33;
    }
    *(void *)(v80 + 192) = v37;
    *(void *)(v80 + 200) = v36;
    unint64_t v28 = sub_2289D7094(v37, v36);
    uint64_t v38 = v26[2];
    BOOL v39 = (v29 & 1) == 0;
    BOOL v40 = __OFADD__(v38, v39);
    uint64_t v41 = v38 + v39;
    if (v40) {
      goto LABEL_63;
    }
    char v42 = v29;
    if (v26[3] < v41)
    {
      sub_2289978C4(v41, 1);
      uint64_t v26 = v87;
      unint64_t v28 = sub_2289D7094(v37, v36);
      if ((v42 & 1) != (v29 & 1))
      {
        return sub_2289DF500();
      }
    }
    if (v42)
    {
      uint64_t v68 = (void *)swift_allocError();
      swift_willThrow();
      *uint64_t v75 = v68;
      id v69 = v68;
      sub_228952BB0(&qword_268284630);
      if (swift_dynamicCast())
      {
        sub_2289DF250();
        *(void *)(v80 + 176) = 0;
        *(void *)(v80 + 184) = 0xE000000000000000;
        sub_2289DEC90();
        sub_2289DF320();
        sub_2289DEC90();
        return sub_2289DF340();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return swift_unexpectedError();
      }
    }
    v26[(v28 >> 6) + 8] |= 1 << v28;
    uint64_t v43 = (uint64_t *)(v26[6] + 16 * v28);
    *uint64_t v43 = v37;
    v43[1] = v36;
    *(unsigned char *)(v26[7] + v28) = v35;
    uint64_t v44 = v26[2];
    BOOL v40 = __OFADD__(v44, 1);
    uint64_t v45 = v44 + 1;
    if (v40) {
      goto LABEL_64;
    }
    ++v33;
    _OWORD v26[2] = v45;
    v34 += 24;
    if (v27 == v33) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
  return MEMORY[0x270FA2058](v28, v29, v30, v31, v32);
}

uint64_t sub_2289BD688()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = sub_2289C9408;
  }
  else
  {
    uint64_t v1 = sub_2289BD7A0;
  }
  return MEMORY[0x270FA2498](v1, 0, 0);
}

uint64_t sub_2289BD7A0()
{
  uint64_t v2 = v0 + 30;
  uint64_t v1 = v0[30];
  if (v1)
  {
    if (!*(void *)(v1 + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
    BOOL v39 = v0 + 30;
    uint64_t v43 = v0 + 27;
    uint64_t v3 = v0[45];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v0[27] = v3;
    uint64_t v41 = v1 + 64;
    uint64_t v5 = -1;
    uint64_t v6 = -1 << *(unsigned char *)(v1 + 32);
    if (-v6 < 64) {
      uint64_t v5 = ~(-1 << -(char)v6);
    }
    unint64_t v7 = v5 & *(void *)(v1 + 64);
    int64_t v42 = (unint64_t)(63 - v6) >> 6;
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v13 = v0;
    int64_t v14 = 0;
    BOOL v40 = v13;
    int64_t v15 = (void *)v13[45];
    if (v7) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return MEMORY[0x270FA2058](v8, v9, v10, v11, v12);
    }
    if (v19 < v42)
    {
      unint64_t v20 = *(void *)(v41 + 8 * v19);
      ++v14;
      if (v20) {
        goto LABEL_24;
      }
      int64_t v14 = v19 + 1;
      if (v19 + 1 < v42)
      {
        unint64_t v20 = *(void *)(v41 + 8 * v14);
        if (v20) {
          goto LABEL_24;
        }
        int64_t v14 = v19 + 2;
        if (v19 + 2 < v42)
        {
          unint64_t v20 = *(void *)(v41 + 8 * v14);
          if (v20) {
            goto LABEL_24;
          }
          int64_t v14 = v19 + 3;
          if (v19 + 3 < v42)
          {
            unint64_t v20 = *(void *)(v41 + 8 * v14);
            if (!v20)
            {
              int64_t v21 = v19 + 4;
              if (v21 < v42)
              {
                unint64_t v20 = *(void *)(v41 + 8 * v21);
                if (v20)
                {
                  int64_t v14 = v21;
                  goto LABEL_24;
                }
                while (1)
                {
                  int64_t v14 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_49;
                  }
                  if (v14 >= v42) {
                    goto LABEL_39;
                  }
                  unint64_t v20 = *(void *)(v41 + 8 * v14);
                  ++v21;
                  if (v20) {
                    goto LABEL_24;
                  }
                }
              }
              goto LABEL_39;
            }
LABEL_24:
            unint64_t v7 = (v20 - 1) & v20;
            for (unint64_t i = __clz(__rbit64(v20)) + (v14 << 6); ; unint64_t i = v17 | (v14 << 6))
            {
              char v22 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
              uint64_t v24 = *v22;
              uint64_t v23 = v22[1];
              uint64_t v25 = *(void **)(*(void *)(v1 + 56) + 8 * i);
              swift_bridgeObjectRetain();
              id v26 = v25;
              unint64_t v27 = sub_2289D7094(v24, v23);
              uint64_t v28 = v15[2];
              BOOL v29 = (v9 & 1) == 0;
              uint64_t v8 = v28 + v29;
              if (__OFADD__(v28, v29))
              {
                __break(1u);
LABEL_47:
                __break(1u);
                goto LABEL_48;
              }
              char v30 = v9;
              if (v15[3] >= v8)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  uint64_t v8 = (uint64_t)sub_228998520();
                }
              }
              else
              {
                sub_228996C14(v8, isUniquelyReferenced_nonNull_native & 1);
                uint64_t v8 = sub_2289D7094(v24, v23);
                if ((v30 & 1) != (v9 & 1))
                {
                  return sub_2289DF500();
                }
                unint64_t v27 = v8;
              }
              int64_t v15 = (void *)*v43;
              if (v30)
              {
                swift_bridgeObjectRelease();
                uint64_t v16 = v15[7];

                *(void *)(v16 + 8 * v27) = v26;
                char isUniquelyReferenced_nonNull_native = 1;
                if (!v7) {
                  goto LABEL_9;
                }
              }
              else
              {
                v15[(v27 >> 6) + 8] |= 1 << v27;
                uint64_t v31 = (uint64_t *)(v15[6] + 16 * v27);
                *uint64_t v31 = v24;
                v31[1] = v23;
                *(void *)(v15[7] + 8 * v27) = v26;
                uint64_t v32 = v15[2];
                BOOL v33 = __OFADD__(v32, 1);
                uint64_t v34 = v32 + 1;
                if (v33) {
                  goto LABEL_47;
                }
                long long v15[2] = v34;
                char isUniquelyReferenced_nonNull_native = 1;
                if (!v7) {
                  goto LABEL_9;
                }
              }
LABEL_8:
              unint64_t v17 = __clz(__rbit64(v7));
              v7 &= v7 - 1;
            }
          }
        }
      }
    }
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v2 = v39;
    uint64_t v0 = v40;
    v40[45] = v15;
LABEL_40:
    uint64_t v38 = (void *)swift_task_alloc();
    v0[46] = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_2289BD688;
    uint64_t v11 = v0[42];
    uint64_t v8 = (uint64_t)v2;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    int64_t v12 = v0 + 26;
    return MEMORY[0x270FA2058](v8, v9, v10, v11, v12);
  }
  (*(void (**)(void, void))(v0[43] + 8))(v0[44], v0[42]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v35 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v36 = v0[45];
  return v35(v36);
}

uint64_t sub_2289BDBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(v8 + 148) = v13;
  *(void *)(v8 + 304) = a8;
  *(void *)(v8 + 312) = v12;
  *(void *)(v8 + 288) = a6;
  *(void *)(v8 + 296) = a7;
  *(void *)(v8 + 272) = a4;
  *(void *)(v8 + 280) = a5;
  *(void *)(v8 + 256) = a2;
  *(void *)(v8 + 264) = a3;
  *(void *)(v8 + 248) = a1;
  sub_228952BB0(&qword_268284CF0);
  *(void *)(v8 + 320) = swift_task_alloc();
  *(void *)(v8 + 328) = swift_task_alloc();
  uint64_t v9 = sub_228952BB0(&qword_268284D68);
  *(void *)(v8 + 336) = v9;
  *(void *)(v8 + 344) = *(void *)(v9 - 8);
  *(void *)(v8 + 352) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2289BDD18, 0, 0);
}

uint64_t sub_2289BDD18()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_2289BC1D8(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_22897B9EC(v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = 100;
  if (v5 == 1) {
    uint64_t v6 = 150;
  }
  if (v6 >= v1) {
    uint64_t v7 = v1;
  }
  else {
    uint64_t v7 = v6;
  }
  if (v1 <= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_2289C6140(v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_2289C8610(0, v10[2], v8, v8, (uint64_t)v10);
  swift_release();
  int64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = MEMORY[0x263F8EE78];
LABEL_40:
    uint64_t v49 = MEMORY[0x263F8EE80];
    uint64_t v78 = *(void *)(v46 + 16);
    if (!v78)
    {
LABEL_53:
      swift_bridgeObjectRelease();
      sub_228952BB0(&qword_268284C68);
      sub_228952BB0(&qword_268284630);
      sub_2289DEF40();
      *(void *)(v0 + 360) = v49;
      uint64_t v71 = (void *)swift_task_alloc();
      *(void *)(v0 + 368) = v71;
      *uint64_t v71 = v0;
      v71[1] = sub_2289BE6F8;
      uint64_t v31 = *(void *)(v0 + 336);
      unint64_t v28 = v0 + 240;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v32 = v0 + 208;
      return MEMORY[0x270FA2058](v28, v29, v30, v31, v32);
    }
    uint64_t v76 = (_OWORD *)(v0 + 16);
    uint64_t v50 = sub_2289DEF20();
    uint64_t v51 = *(void *)(v50 - 8);
    uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56);
    uint64_t v73 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
    char v72 = (void (**)(uint64_t, uint64_t))(v51 + 8);
    swift_bridgeObjectRetain();
    uint64_t v52 = 0;
    while (1)
    {
      uint64_t v55 = *(void *)(v0 + 320);
      uint64_t v54 = *(void *)(v0 + 328);
      int v85 = *(_DWORD *)(v0 + 148);
      uint64_t v84 = *(void *)(v0 + 312);
      uint64_t v56 = *(void *)(v0 + 296);
      uint64_t v83 = *(void *)(v0 + 304);
      long long v81 = *(_OWORD *)(v0 + 280);
      uint64_t v57 = *(void *)(v0 + 272);
      uint64_t v58 = *(void *)(v46 + 8 * v52 + 32);
      v74(v54, 1, 1, v50);
      sub_2289C8B8C(v57, (uint64_t)v76);
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = 0;
      BOOL v60 = (void *)(v59 + 16);
      *(void *)(v59 + 24) = 0;
      long long v61 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v59 + 32) = *v76;
      *(_OWORD *)(v59 + 48) = v61;
      *(_OWORD *)(v59 + 64) = *(_OWORD *)(v0 + 48);
      *(void *)(v59 + 80) = *(void *)(v0 + 64);
      *(void *)(v59 + 88) = v58;
      *(_OWORD *)(v59 + 96) = v81;
      *(void *)(v59 + 112) = v56;
      *(void *)(v59 + 120) = v83;
      *(void *)(v59 + 128) = v84;
      *(_DWORD *)(v59 + 136) = v85;
      sub_2289C8CD4(v54, v55);
      LODWORD(v54) = (*v73)(v55, 1, v50);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v62 = *(void *)(v0 + 320);
      if (v54 == 1)
      {
        sub_2289C8D3C(*(void *)(v0 + 320));
        if (!*v60) {
          goto LABEL_47;
        }
      }
      else
      {
        sub_2289DEF10();
        (*v72)(v62, v50);
        if (!*v60)
        {
LABEL_47:
          uint64_t v63 = 0;
          uint64_t v65 = 0;
          goto LABEL_48;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v63 = sub_2289DEEE0();
      uint64_t v65 = v64;
      swift_unknownObjectRelease();
LABEL_48:
      uint64_t v66 = **(void **)(v0 + 248);
      sub_228952BB0(&qword_268284C68);
      uint64_t v67 = v65 | v63;
      if (v65 | v63)
      {
        uint64_t v67 = v0 + 72;
        *(void *)(v0 + 72) = 0;
        *(void *)(v0 + 80) = 0;
        *(void *)(v0 + 88) = v63;
        *(void *)(v0 + 96) = v65;
      }
      ++v52;
      uint64_t v53 = *(void *)(v0 + 328);
      *(void *)(v0 + 104) = 1;
      *(void *)(v0 + 112) = v67;
      *(void *)(v0 + 120) = v66;
      swift_task_create();
      swift_release();
      sub_2289C8D3C(v53);
      swift_bridgeObjectRelease();
      if (v78 == v52)
      {
        swift_bridgeObjectRelease();
        uint64_t v49 = MEMORY[0x263F8EE80];
        goto LABEL_53;
      }
    }
  }
  uint64_t v75 = (void *)(v0 + 232);
  uint64_t v86 = MEMORY[0x263F8EE78];
  sub_22896C4F8(0, v12, 0);
  uint64_t v13 = 0;
  int64_t v77 = v12;
  uint64_t v79 = v11 + 32;
  uint64_t v80 = v0;
  while (1)
  {
    uint64_t v82 = v13;
    uint64_t v14 = *(void *)(v79 + 8 * v13);
    int64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v88 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_22896C558(0, v15, 0);
      uint64_t v16 = v88;
      unint64_t v17 = (unsigned char *)(v14 + 48);
      do
      {
        uint64_t v18 = *((void *)v17 - 1);
        char v19 = *v17;
        *(void *)(v0 + 152) = *((void *)v17 - 2);
        *(void *)(v0 + 160) = v18;
        *(unsigned char *)(v0 + 168) = v19;
        swift_bridgeObjectRetain();
        sub_228952BB0(&qword_268284D00);
        sub_228952BB0(&qword_268284280);
        swift_dynamicCast();
        uint64_t v20 = *(void *)(v0 + 128);
        uint64_t v21 = *(void *)(v0 + 136);
        char v22 = *(unsigned char *)(v0 + 144);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_22896C558(0, *(void *)(v16 + 16) + 1, 1);
          uint64_t v16 = v88;
        }
        unint64_t v24 = *(void *)(v16 + 16);
        unint64_t v23 = *(void *)(v16 + 24);
        if (v24 >= v23 >> 1)
        {
          sub_22896C558(v23 > 1, v24 + 1, 1);
          uint64_t v16 = v88;
        }
        v17 += 24;
        *(void *)(v16 + 16) = v24 + 1;
        uint64_t v25 = v16 + 24 * v24;
        *(void *)(v25 + 32) = v20;
        *(void *)(v25 + 40) = v21;
        *(unsigned char *)(v25 + 48) = v22;
        --v15;
      }
      while (v15);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = MEMORY[0x263F8EE78];
    }
    if (*(void *)(v16 + 16))
    {
      sub_228952BB0(&qword_268284740);
      id v26 = (void *)sub_2289DF3B0();
      uint64_t v27 = *(void *)(v16 + 16);
    }
    else
    {
      uint64_t v27 = 0;
      id v26 = (void *)MEMORY[0x263F8EE80];
    }
    uint64_t v87 = v26;
    unint64_t v28 = swift_bridgeObjectRetain_n();
    if (v27) {
      break;
    }
LABEL_33:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v46 = v86;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_22896C4F8(0, *(void *)(v86 + 16) + 1, 1);
      uint64_t v46 = v86;
    }
    uint64_t v0 = v80;
    unint64_t v48 = *(void *)(v46 + 16);
    unint64_t v47 = *(void *)(v46 + 24);
    if (v48 >= v47 >> 1)
    {
      sub_22896C4F8(v47 > 1, v48 + 1, 1);
      uint64_t v46 = v86;
    }
    uint64_t v13 = v82 + 1;
    *(void *)(v46 + 16) = v48 + 1;
    *(void *)(v46 + 8 * v48 + 32) = v26;
    if (v82 + 1 == v77)
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
  }
  unint64_t v33 = 0;
  uint64_t v34 = (unsigned char *)(v16 + 48);
  while (v33 < *(void *)(v16 + 16))
  {
    char v35 = *v34;
    uint64_t v37 = *((void *)v34 - 2);
    uint64_t v36 = *((void *)v34 - 1);
    swift_bridgeObjectRetain();
    if (!v36) {
      goto LABEL_33;
    }
    *(void *)(v80 + 192) = v37;
    *(void *)(v80 + 200) = v36;
    unint64_t v28 = sub_2289D7094(v37, v36);
    uint64_t v38 = v26[2];
    BOOL v39 = (v29 & 1) == 0;
    BOOL v40 = __OFADD__(v38, v39);
    uint64_t v41 = v38 + v39;
    if (v40) {
      goto LABEL_63;
    }
    char v42 = v29;
    if (v26[3] < v41)
    {
      sub_2289978C4(v41, 1);
      id v26 = v87;
      unint64_t v28 = sub_2289D7094(v37, v36);
      if ((v42 & 1) != (v29 & 1))
      {
        return sub_2289DF500();
      }
    }
    if (v42)
    {
      uint64_t v68 = (void *)swift_allocError();
      swift_willThrow();
      *uint64_t v75 = v68;
      id v69 = v68;
      sub_228952BB0(&qword_268284630);
      if (swift_dynamicCast())
      {
        sub_2289DF250();
        *(void *)(v80 + 176) = 0;
        *(void *)(v80 + 184) = 0xE000000000000000;
        sub_2289DEC90();
        sub_2289DF320();
        sub_2289DEC90();
        return sub_2289DF340();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return swift_unexpectedError();
      }
    }
    v26[(v28 >> 6) + 8] |= 1 << v28;
    uint64_t v43 = (uint64_t *)(v26[6] + 16 * v28);
    *uint64_t v43 = v37;
    v43[1] = v36;
    *(unsigned char *)(v26[7] + v28) = v35;
    uint64_t v44 = v26[2];
    BOOL v40 = __OFADD__(v44, 1);
    uint64_t v45 = v44 + 1;
    if (v40) {
      goto LABEL_64;
    }
    ++v33;
    _OWORD v26[2] = v45;
    v34 += 24;
    if (v27 == v33) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
  return MEMORY[0x270FA2058](v28, v29, v30, v31, v32);
}

uint64_t sub_2289BE6F8()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = sub_2289C9408;
  }
  else
  {
    uint64_t v1 = sub_2289BE810;
  }
  return MEMORY[0x270FA2498](v1, 0, 0);
}

uint64_t sub_2289BE810()
{
  uint64_t v2 = v0 + 30;
  uint64_t v1 = v0[30];
  if (v1)
  {
    if (!*(void *)(v1 + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
    BOOL v39 = v0 + 30;
    uint64_t v43 = v0 + 27;
    uint64_t v3 = v0[45];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v0[27] = v3;
    uint64_t v41 = v1 + 64;
    uint64_t v5 = -1;
    uint64_t v6 = -1 << *(unsigned char *)(v1 + 32);
    if (-v6 < 64) {
      uint64_t v5 = ~(-1 << -(char)v6);
    }
    unint64_t v7 = v5 & *(void *)(v1 + 64);
    int64_t v42 = (unint64_t)(63 - v6) >> 6;
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v13 = v0;
    int64_t v14 = 0;
    BOOL v40 = v13;
    int64_t v15 = (void *)v13[45];
    if (v7) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return MEMORY[0x270FA2058](v8, v9, v10, v11, v12);
    }
    if (v19 < v42)
    {
      unint64_t v20 = *(void *)(v41 + 8 * v19);
      ++v14;
      if (v20) {
        goto LABEL_24;
      }
      int64_t v14 = v19 + 1;
      if (v19 + 1 < v42)
      {
        unint64_t v20 = *(void *)(v41 + 8 * v14);
        if (v20) {
          goto LABEL_24;
        }
        int64_t v14 = v19 + 2;
        if (v19 + 2 < v42)
        {
          unint64_t v20 = *(void *)(v41 + 8 * v14);
          if (v20) {
            goto LABEL_24;
          }
          int64_t v14 = v19 + 3;
          if (v19 + 3 < v42)
          {
            unint64_t v20 = *(void *)(v41 + 8 * v14);
            if (!v20)
            {
              int64_t v21 = v19 + 4;
              if (v21 < v42)
              {
                unint64_t v20 = *(void *)(v41 + 8 * v21);
                if (v20)
                {
                  int64_t v14 = v21;
                  goto LABEL_24;
                }
                while (1)
                {
                  int64_t v14 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_49;
                  }
                  if (v14 >= v42) {
                    goto LABEL_39;
                  }
                  unint64_t v20 = *(void *)(v41 + 8 * v14);
                  ++v21;
                  if (v20) {
                    goto LABEL_24;
                  }
                }
              }
              goto LABEL_39;
            }
LABEL_24:
            unint64_t v7 = (v20 - 1) & v20;
            for (unint64_t i = __clz(__rbit64(v20)) + (v14 << 6); ; unint64_t i = v17 | (v14 << 6))
            {
              char v22 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
              uint64_t v24 = *v22;
              uint64_t v23 = v22[1];
              uint64_t v25 = *(void **)(*(void *)(v1 + 56) + 8 * i);
              swift_bridgeObjectRetain();
              id v26 = v25;
              unint64_t v27 = sub_2289D7094(v24, v23);
              uint64_t v28 = v15[2];
              BOOL v29 = (v9 & 1) == 0;
              uint64_t v8 = v28 + v29;
              if (__OFADD__(v28, v29))
              {
                __break(1u);
LABEL_47:
                __break(1u);
                goto LABEL_48;
              }
              char v30 = v9;
              if (v15[3] >= v8)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  uint64_t v8 = (uint64_t)sub_22899903C();
                }
              }
              else
              {
                sub_228997BDC(v8, isUniquelyReferenced_nonNull_native & 1);
                uint64_t v8 = sub_2289D7094(v24, v23);
                if ((v30 & 1) != (v9 & 1))
                {
                  return sub_2289DF500();
                }
                unint64_t v27 = v8;
              }
              int64_t v15 = (void *)*v43;
              if (v30)
              {
                swift_bridgeObjectRelease();
                uint64_t v16 = v15[7];

                *(void *)(v16 + 8 * v27) = v26;
                char isUniquelyReferenced_nonNull_native = 1;
                if (!v7) {
                  goto LABEL_9;
                }
              }
              else
              {
                v15[(v27 >> 6) + 8] |= 1 << v27;
                uint64_t v31 = (uint64_t *)(v15[6] + 16 * v27);
                *uint64_t v31 = v24;
                v31[1] = v23;
                *(void *)(v15[7] + 8 * v27) = v26;
                uint64_t v32 = v15[2];
                BOOL v33 = __OFADD__(v32, 1);
                uint64_t v34 = v32 + 1;
                if (v33) {
                  goto LABEL_47;
                }
                long long v15[2] = v34;
                char isUniquelyReferenced_nonNull_native = 1;
                if (!v7) {
                  goto LABEL_9;
                }
              }
LABEL_8:
              unint64_t v17 = __clz(__rbit64(v7));
              v7 &= v7 - 1;
            }
          }
        }
      }
    }
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v2 = v39;
    uint64_t v0 = v40;
    v40[45] = v15;
LABEL_40:
    uint64_t v38 = (void *)swift_task_alloc();
    v0[46] = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_2289BE6F8;
    uint64_t v11 = v0[42];
    uint64_t v8 = (uint64_t)v2;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    int64_t v12 = v0 + 26;
    return MEMORY[0x270FA2058](v8, v9, v10, v11, v12);
  }
  (*(void (**)(void, void))(v0[43] + 8))(v0[44], v0[42]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v35 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v36 = v0[45];
  return v35(v36);
}

uint64_t sub_2289BEC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(v8 + 148) = v13;
  *(void *)(v8 + 304) = a8;
  *(void *)(v8 + 312) = v12;
  *(void *)(v8 + 288) = a6;
  *(void *)(v8 + 296) = a7;
  *(void *)(v8 + 272) = a4;
  *(void *)(v8 + 280) = a5;
  *(void *)(v8 + 256) = a2;
  *(void *)(v8 + 264) = a3;
  *(void *)(v8 + 248) = a1;
  sub_228952BB0(&qword_268284CF0);
  *(void *)(v8 + 320) = swift_task_alloc();
  *(void *)(v8 + 328) = swift_task_alloc();
  uint64_t v9 = sub_228952BB0(&qword_268284D48);
  *(void *)(v8 + 336) = v9;
  *(void *)(v8 + 344) = *(void *)(v9 - 8);
  *(void *)(v8 + 352) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2289BED88, 0, 0);
}

uint64_t sub_2289BED88()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_2289BC1D8(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_22897B9EC(v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = 100;
  if (v5 == 1) {
    uint64_t v6 = 150;
  }
  if (v6 >= v1) {
    uint64_t v7 = v1;
  }
  else {
    uint64_t v7 = v6;
  }
  if (v1 <= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_2289C6140(v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_2289C8610(0, v10[2], v8, v8, (uint64_t)v10);
  swift_release();
  int64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = MEMORY[0x263F8EE78];
LABEL_40:
    uint64_t v49 = MEMORY[0x263F8EE80];
    uint64_t v78 = *(void *)(v46 + 16);
    if (!v78)
    {
LABEL_53:
      swift_bridgeObjectRelease();
      sub_228952BB0(&qword_268284C88);
      sub_228952BB0(&qword_268284630);
      sub_2289DEF40();
      *(void *)(v0 + 360) = v49;
      uint64_t v71 = (void *)swift_task_alloc();
      *(void *)(v0 + 368) = v71;
      *uint64_t v71 = v0;
      v71[1] = sub_2289BF768;
      uint64_t v31 = *(void *)(v0 + 336);
      unint64_t v28 = v0 + 240;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v32 = v0 + 208;
      return MEMORY[0x270FA2058](v28, v29, v30, v31, v32);
    }
    uint64_t v76 = (_OWORD *)(v0 + 16);
    uint64_t v50 = sub_2289DEF20();
    uint64_t v51 = *(void *)(v50 - 8);
    uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56);
    uint64_t v73 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
    char v72 = (void (**)(uint64_t, uint64_t))(v51 + 8);
    swift_bridgeObjectRetain();
    uint64_t v52 = 0;
    while (1)
    {
      uint64_t v55 = *(void *)(v0 + 320);
      uint64_t v54 = *(void *)(v0 + 328);
      int v85 = *(_DWORD *)(v0 + 148);
      uint64_t v84 = *(void *)(v0 + 312);
      uint64_t v56 = *(void *)(v0 + 296);
      uint64_t v83 = *(void *)(v0 + 304);
      long long v81 = *(_OWORD *)(v0 + 280);
      uint64_t v57 = *(void *)(v0 + 272);
      uint64_t v58 = *(void *)(v46 + 8 * v52 + 32);
      v74(v54, 1, 1, v50);
      sub_2289C8B8C(v57, (uint64_t)v76);
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = 0;
      BOOL v60 = (void *)(v59 + 16);
      *(void *)(v59 + 24) = 0;
      long long v61 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v59 + 32) = *v76;
      *(_OWORD *)(v59 + 48) = v61;
      *(_OWORD *)(v59 + 64) = *(_OWORD *)(v0 + 48);
      *(void *)(v59 + 80) = *(void *)(v0 + 64);
      *(void *)(v59 + 88) = v58;
      *(_OWORD *)(v59 + 96) = v81;
      *(void *)(v59 + 112) = v56;
      *(void *)(v59 + 120) = v83;
      *(void *)(v59 + 128) = v84;
      *(_DWORD *)(v59 + 136) = v85;
      sub_2289C8CD4(v54, v55);
      LODWORD(v54) = (*v73)(v55, 1, v50);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v62 = *(void *)(v0 + 320);
      if (v54 == 1)
      {
        sub_2289C8D3C(*(void *)(v0 + 320));
        if (!*v60) {
          goto LABEL_47;
        }
      }
      else
      {
        sub_2289DEF10();
        (*v72)(v62, v50);
        if (!*v60)
        {
LABEL_47:
          uint64_t v63 = 0;
          uint64_t v65 = 0;
          goto LABEL_48;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v63 = sub_2289DEEE0();
      uint64_t v65 = v64;
      swift_unknownObjectRelease();
LABEL_48:
      uint64_t v66 = **(void **)(v0 + 248);
      sub_228952BB0(&qword_268284C88);
      uint64_t v67 = v65 | v63;
      if (v65 | v63)
      {
        uint64_t v67 = v0 + 72;
        *(void *)(v0 + 72) = 0;
        *(void *)(v0 + 80) = 0;
        *(void *)(v0 + 88) = v63;
        *(void *)(v0 + 96) = v65;
      }
      ++v52;
      uint64_t v53 = *(void *)(v0 + 328);
      *(void *)(v0 + 104) = 1;
      *(void *)(v0 + 112) = v67;
      *(void *)(v0 + 120) = v66;
      swift_task_create();
      swift_release();
      sub_2289C8D3C(v53);
      swift_bridgeObjectRelease();
      if (v78 == v52)
      {
        swift_bridgeObjectRelease();
        uint64_t v49 = MEMORY[0x263F8EE80];
        goto LABEL_53;
      }
    }
  }
  uint64_t v75 = (void *)(v0 + 232);
  uint64_t v86 = MEMORY[0x263F8EE78];
  sub_22896C4F8(0, v12, 0);
  uint64_t v13 = 0;
  int64_t v77 = v12;
  uint64_t v79 = v11 + 32;
  uint64_t v80 = v0;
  while (1)
  {
    uint64_t v82 = v13;
    uint64_t v14 = *(void *)(v79 + 8 * v13);
    int64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v88 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_22896C558(0, v15, 0);
      uint64_t v16 = v88;
      unint64_t v17 = (unsigned char *)(v14 + 48);
      do
      {
        uint64_t v18 = *((void *)v17 - 1);
        char v19 = *v17;
        *(void *)(v0 + 152) = *((void *)v17 - 2);
        *(void *)(v0 + 160) = v18;
        *(unsigned char *)(v0 + 168) = v19;
        swift_bridgeObjectRetain();
        sub_228952BB0(&qword_268284D00);
        sub_228952BB0(&qword_268284280);
        swift_dynamicCast();
        uint64_t v20 = *(void *)(v0 + 128);
        uint64_t v21 = *(void *)(v0 + 136);
        char v22 = *(unsigned char *)(v0 + 144);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_22896C558(0, *(void *)(v16 + 16) + 1, 1);
          uint64_t v16 = v88;
        }
        unint64_t v24 = *(void *)(v16 + 16);
        unint64_t v23 = *(void *)(v16 + 24);
        if (v24 >= v23 >> 1)
        {
          sub_22896C558(v23 > 1, v24 + 1, 1);
          uint64_t v16 = v88;
        }
        v17 += 24;
        *(void *)(v16 + 16) = v24 + 1;
        uint64_t v25 = v16 + 24 * v24;
        *(void *)(v25 + 32) = v20;
        *(void *)(v25 + 40) = v21;
        *(unsigned char *)(v25 + 48) = v22;
        --v15;
      }
      while (v15);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = MEMORY[0x263F8EE78];
    }
    if (*(void *)(v16 + 16))
    {
      sub_228952BB0(&qword_268284740);
      id v26 = (void *)sub_2289DF3B0();
      uint64_t v27 = *(void *)(v16 + 16);
    }
    else
    {
      uint64_t v27 = 0;
      id v26 = (void *)MEMORY[0x263F8EE80];
    }
    uint64_t v87 = v26;
    unint64_t v28 = swift_bridgeObjectRetain_n();
    if (v27) {
      break;
    }
LABEL_33:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v46 = v86;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_22896C4F8(0, *(void *)(v86 + 16) + 1, 1);
      uint64_t v46 = v86;
    }
    uint64_t v0 = v80;
    unint64_t v48 = *(void *)(v46 + 16);
    unint64_t v47 = *(void *)(v46 + 24);
    if (v48 >= v47 >> 1)
    {
      sub_22896C4F8(v47 > 1, v48 + 1, 1);
      uint64_t v46 = v86;
    }
    uint64_t v13 = v82 + 1;
    *(void *)(v46 + 16) = v48 + 1;
    *(void *)(v46 + 8 * v48 + 32) = v26;
    if (v82 + 1 == v77)
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
  }
  unint64_t v33 = 0;
  uint64_t v34 = (unsigned char *)(v16 + 48);
  while (v33 < *(void *)(v16 + 16))
  {
    char v35 = *v34;
    uint64_t v37 = *((void *)v34 - 2);
    uint64_t v36 = *((void *)v34 - 1);
    swift_bridgeObjectRetain();
    if (!v36) {
      goto LABEL_33;
    }
    *(void *)(v80 + 192) = v37;
    *(void *)(v80 + 200) = v36;
    unint64_t v28 = sub_2289D7094(v37, v36);
    uint64_t v38 = v26[2];
    BOOL v39 = (v29 & 1) == 0;
    BOOL v40 = __OFADD__(v38, v39);
    uint64_t v41 = v38 + v39;
    if (v40) {
      goto LABEL_63;
    }
    char v42 = v29;
    if (v26[3] < v41)
    {
      sub_2289978C4(v41, 1);
      id v26 = v87;
      unint64_t v28 = sub_2289D7094(v37, v36);
      if ((v42 & 1) != (v29 & 1))
      {
        return sub_2289DF500();
      }
    }
    if (v42)
    {
      uint64_t v68 = (void *)swift_allocError();
      swift_willThrow();
      *uint64_t v75 = v68;
      id v69 = v68;
      sub_228952BB0(&qword_268284630);
      if (swift_dynamicCast())
      {
        sub_2289DF250();
        *(void *)(v80 + 176) = 0;
        *(void *)(v80 + 184) = 0xE000000000000000;
        sub_2289DEC90();
        sub_2289DF320();
        sub_2289DEC90();
        return sub_2289DF340();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return swift_unexpectedError();
      }
    }
    v26[(v28 >> 6) + 8] |= 1 << v28;
    uint64_t v43 = (uint64_t *)(v26[6] + 16 * v28);
    *uint64_t v43 = v37;
    v43[1] = v36;
    *(unsigned char *)(v26[7] + v28) = v35;
    uint64_t v44 = v26[2];
    BOOL v40 = __OFADD__(v44, 1);
    uint64_t v45 = v44 + 1;
    if (v40) {
      goto LABEL_64;
    }
    ++v33;
    _OWORD v26[2] = v45;
    v34 += 24;
    if (v27 == v33) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
  return MEMORY[0x270FA2058](v28, v29, v30, v31, v32);
}

uint64_t sub_2289BF768()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = sub_2289C9408;
  }
  else
  {
    uint64_t v1 = sub_2289BF880;
  }
  return MEMORY[0x270FA2498](v1, 0, 0);
}

uint64_t sub_2289BF880()
{
  uint64_t v2 = v0 + 30;
  uint64_t v1 = v0[30];
  if (v1)
  {
    if (!*(void *)(v1 + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
    BOOL v39 = v0 + 30;
    uint64_t v43 = v0 + 27;
    uint64_t v3 = v0[45];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v0[27] = v3;
    uint64_t v41 = v1 + 64;
    uint64_t v5 = -1;
    uint64_t v6 = -1 << *(unsigned char *)(v1 + 32);
    if (-v6 < 64) {
      uint64_t v5 = ~(-1 << -(char)v6);
    }
    unint64_t v7 = v5 & *(void *)(v1 + 64);
    int64_t v42 = (unint64_t)(63 - v6) >> 6;
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v13 = v0;
    int64_t v14 = 0;
    BOOL v40 = v13;
    int64_t v15 = (void *)v13[45];
    if (v7) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return MEMORY[0x270FA2058](v8, v9, v10, v11, v12);
    }
    if (v19 < v42)
    {
      unint64_t v20 = *(void *)(v41 + 8 * v19);
      ++v14;
      if (v20) {
        goto LABEL_24;
      }
      int64_t v14 = v19 + 1;
      if (v19 + 1 < v42)
      {
        unint64_t v20 = *(void *)(v41 + 8 * v14);
        if (v20) {
          goto LABEL_24;
        }
        int64_t v14 = v19 + 2;
        if (v19 + 2 < v42)
        {
          unint64_t v20 = *(void *)(v41 + 8 * v14);
          if (v20) {
            goto LABEL_24;
          }
          int64_t v14 = v19 + 3;
          if (v19 + 3 < v42)
          {
            unint64_t v20 = *(void *)(v41 + 8 * v14);
            if (!v20)
            {
              int64_t v21 = v19 + 4;
              if (v21 < v42)
              {
                unint64_t v20 = *(void *)(v41 + 8 * v21);
                if (v20)
                {
                  int64_t v14 = v21;
                  goto LABEL_24;
                }
                while (1)
                {
                  int64_t v14 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_49;
                  }
                  if (v14 >= v42) {
                    goto LABEL_39;
                  }
                  unint64_t v20 = *(void *)(v41 + 8 * v14);
                  ++v21;
                  if (v20) {
                    goto LABEL_24;
                  }
                }
              }
              goto LABEL_39;
            }
LABEL_24:
            unint64_t v7 = (v20 - 1) & v20;
            for (unint64_t i = __clz(__rbit64(v20)) + (v14 << 6); ; unint64_t i = v17 | (v14 << 6))
            {
              char v22 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
              uint64_t v24 = *v22;
              uint64_t v23 = v22[1];
              uint64_t v25 = *(void **)(*(void *)(v1 + 56) + 8 * i);
              swift_bridgeObjectRetain();
              id v26 = v25;
              unint64_t v27 = sub_2289D7094(v24, v23);
              uint64_t v28 = v15[2];
              BOOL v29 = (v9 & 1) == 0;
              uint64_t v8 = v28 + v29;
              if (__OFADD__(v28, v29))
              {
                __break(1u);
LABEL_47:
                __break(1u);
                goto LABEL_48;
              }
              char v30 = v9;
              if (v15[3] >= v8)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  uint64_t v8 = (uint64_t)sub_228999048();
                }
              }
              else
              {
                sub_228997BE8(v8, isUniquelyReferenced_nonNull_native & 1);
                uint64_t v8 = sub_2289D7094(v24, v23);
                if ((v30 & 1) != (v9 & 1))
                {
                  return sub_2289DF500();
                }
                unint64_t v27 = v8;
              }
              int64_t v15 = (void *)*v43;
              if (v30)
              {
                swift_bridgeObjectRelease();
                uint64_t v16 = v15[7];

                *(void *)(v16 + 8 * v27) = v26;
                char isUniquelyReferenced_nonNull_native = 1;
                if (!v7) {
                  goto LABEL_9;
                }
              }
              else
              {
                v15[(v27 >> 6) + 8] |= 1 << v27;
                uint64_t v31 = (uint64_t *)(v15[6] + 16 * v27);
                *uint64_t v31 = v24;
                v31[1] = v23;
                *(void *)(v15[7] + 8 * v27) = v26;
                uint64_t v32 = v15[2];
                BOOL v33 = __OFADD__(v32, 1);
                uint64_t v34 = v32 + 1;
                if (v33) {
                  goto LABEL_47;
                }
                long long v15[2] = v34;
                char isUniquelyReferenced_nonNull_native = 1;
                if (!v7) {
                  goto LABEL_9;
                }
              }
LABEL_8:
              unint64_t v17 = __clz(__rbit64(v7));
              v7 &= v7 - 1;
            }
          }
        }
      }
    }
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v2 = v39;
    uint64_t v0 = v40;
    v40[45] = v15;
LABEL_40:
    uint64_t v38 = (void *)swift_task_alloc();
    v0[46] = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_2289BF768;
    uint64_t v11 = v0[42];
    uint64_t v8 = (uint64_t)v2;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    int64_t v12 = v0 + 26;
    return MEMORY[0x270FA2058](v8, v9, v10, v11, v12);
  }
  (*(void (**)(void, void))(v0[43] + 8))(v0[44], v0[42]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v35 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v36 = v0[45];
  return v35(v36);
}

uint64_t sub_2289BFCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(v8 + 148) = v13;
  *(void *)(v8 + 304) = a8;
  *(void *)(v8 + 312) = v12;
  *(void *)(v8 + 288) = a6;
  *(void *)(v8 + 296) = a7;
  *(void *)(v8 + 272) = a4;
  *(void *)(v8 + 280) = a5;
  *(void *)(v8 + 256) = a2;
  *(void *)(v8 + 264) = a3;
  *(void *)(v8 + 248) = a1;
  sub_228952BB0(&qword_268284CF0);
  *(void *)(v8 + 320) = swift_task_alloc();
  *(void *)(v8 + 328) = swift_task_alloc();
  uint64_t v9 = sub_228952BB0(&qword_268284D28);
  *(void *)(v8 + 336) = v9;
  *(void *)(v8 + 344) = *(void *)(v9 - 8);
  *(void *)(v8 + 352) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2289BFDF8, 0, 0);
}

uint64_t sub_2289BFDF8()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_2289BC1D8(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_22897B9EC(v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = 100;
  if (v5 == 1) {
    uint64_t v6 = 150;
  }
  if (v6 >= v1) {
    uint64_t v7 = v1;
  }
  else {
    uint64_t v7 = v6;
  }
  if (v1 <= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_2289C6140(v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_2289C8610(0, v10[2], v8, v8, (uint64_t)v10);
  swift_release();
  int64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = MEMORY[0x263F8EE78];
LABEL_40:
    uint64_t v49 = MEMORY[0x263F8EE80];
    uint64_t v78 = *(void *)(v46 + 16);
    if (!v78)
    {
LABEL_53:
      swift_bridgeObjectRelease();
      sub_228952BB0(&qword_268284CA8);
      sub_228952BB0(&qword_268284630);
      sub_2289DEF40();
      *(void *)(v0 + 360) = v49;
      uint64_t v71 = (void *)swift_task_alloc();
      *(void *)(v0 + 368) = v71;
      *uint64_t v71 = v0;
      v71[1] = sub_2289C07D8;
      uint64_t v31 = *(void *)(v0 + 336);
      unint64_t v28 = v0 + 240;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v32 = v0 + 208;
      return MEMORY[0x270FA2058](v28, v29, v30, v31, v32);
    }
    uint64_t v76 = (_OWORD *)(v0 + 16);
    uint64_t v50 = sub_2289DEF20();
    uint64_t v51 = *(void *)(v50 - 8);
    uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56);
    uint64_t v73 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
    char v72 = (void (**)(uint64_t, uint64_t))(v51 + 8);
    swift_bridgeObjectRetain();
    uint64_t v52 = 0;
    while (1)
    {
      uint64_t v55 = *(void *)(v0 + 320);
      uint64_t v54 = *(void *)(v0 + 328);
      int v85 = *(_DWORD *)(v0 + 148);
      uint64_t v84 = *(void *)(v0 + 312);
      uint64_t v56 = *(void *)(v0 + 296);
      uint64_t v83 = *(void *)(v0 + 304);
      long long v81 = *(_OWORD *)(v0 + 280);
      uint64_t v57 = *(void *)(v0 + 272);
      uint64_t v58 = *(void *)(v46 + 8 * v52 + 32);
      v74(v54, 1, 1, v50);
      sub_2289C8B8C(v57, (uint64_t)v76);
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = 0;
      BOOL v60 = (void *)(v59 + 16);
      *(void *)(v59 + 24) = 0;
      long long v61 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v59 + 32) = *v76;
      *(_OWORD *)(v59 + 48) = v61;
      *(_OWORD *)(v59 + 64) = *(_OWORD *)(v0 + 48);
      *(void *)(v59 + 80) = *(void *)(v0 + 64);
      *(void *)(v59 + 88) = v58;
      *(_OWORD *)(v59 + 96) = v81;
      *(void *)(v59 + 112) = v56;
      *(void *)(v59 + 120) = v83;
      *(void *)(v59 + 128) = v84;
      *(_DWORD *)(v59 + 136) = v85;
      sub_2289C8CD4(v54, v55);
      LODWORD(v54) = (*v73)(v55, 1, v50);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v62 = *(void *)(v0 + 320);
      if (v54 == 1)
      {
        sub_2289C8D3C(*(void *)(v0 + 320));
        if (!*v60) {
          goto LABEL_47;
        }
      }
      else
      {
        sub_2289DEF10();
        (*v72)(v62, v50);
        if (!*v60)
        {
LABEL_47:
          uint64_t v63 = 0;
          uint64_t v65 = 0;
          goto LABEL_48;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v63 = sub_2289DEEE0();
      uint64_t v65 = v64;
      swift_unknownObjectRelease();
LABEL_48:
      uint64_t v66 = **(void **)(v0 + 248);
      sub_228952BB0(&qword_268284CA8);
      uint64_t v67 = v65 | v63;
      if (v65 | v63)
      {
        uint64_t v67 = v0 + 72;
        *(void *)(v0 + 72) = 0;
        *(void *)(v0 + 80) = 0;
        *(void *)(v0 + 88) = v63;
        *(void *)(v0 + 96) = v65;
      }
      ++v52;
      uint64_t v53 = *(void *)(v0 + 328);
      *(void *)(v0 + 104) = 1;
      *(void *)(v0 + 112) = v67;
      *(void *)(v0 + 120) = v66;
      swift_task_create();
      swift_release();
      sub_2289C8D3C(v53);
      swift_bridgeObjectRelease();
      if (v78 == v52)
      {
        swift_bridgeObjectRelease();
        uint64_t v49 = MEMORY[0x263F8EE80];
        goto LABEL_53;
      }
    }
  }
  uint64_t v75 = (void *)(v0 + 232);
  uint64_t v86 = MEMORY[0x263F8EE78];
  sub_22896C4F8(0, v12, 0);
  uint64_t v13 = 0;
  int64_t v77 = v12;
  uint64_t v79 = v11 + 32;
  uint64_t v80 = v0;
  while (1)
  {
    uint64_t v82 = v13;
    uint64_t v14 = *(void *)(v79 + 8 * v13);
    int64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v88 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_22896C558(0, v15, 0);
      uint64_t v16 = v88;
      unint64_t v17 = (unsigned char *)(v14 + 48);
      do
      {
        uint64_t v18 = *((void *)v17 - 1);
        char v19 = *v17;
        *(void *)(v0 + 152) = *((void *)v17 - 2);
        *(void *)(v0 + 160) = v18;
        *(unsigned char *)(v0 + 168) = v19;
        swift_bridgeObjectRetain();
        sub_228952BB0(&qword_268284D00);
        sub_228952BB0(&qword_268284280);
        swift_dynamicCast();
        uint64_t v20 = *(void *)(v0 + 128);
        uint64_t v21 = *(void *)(v0 + 136);
        char v22 = *(unsigned char *)(v0 + 144);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_22896C558(0, *(void *)(v16 + 16) + 1, 1);
          uint64_t v16 = v88;
        }
        unint64_t v24 = *(void *)(v16 + 16);
        unint64_t v23 = *(void *)(v16 + 24);
        if (v24 >= v23 >> 1)
        {
          sub_22896C558(v23 > 1, v24 + 1, 1);
          uint64_t v16 = v88;
        }
        v17 += 24;
        *(void *)(v16 + 16) = v24 + 1;
        uint64_t v25 = v16 + 24 * v24;
        *(void *)(v25 + 32) = v20;
        *(void *)(v25 + 40) = v21;
        *(unsigned char *)(v25 + 48) = v22;
        --v15;
      }
      while (v15);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = MEMORY[0x263F8EE78];
    }
    if (*(void *)(v16 + 16))
    {
      sub_228952BB0(&qword_268284740);
      id v26 = (void *)sub_2289DF3B0();
      uint64_t v27 = *(void *)(v16 + 16);
    }
    else
    {
      uint64_t v27 = 0;
      id v26 = (void *)MEMORY[0x263F8EE80];
    }
    uint64_t v87 = v26;
    unint64_t v28 = swift_bridgeObjectRetain_n();
    if (v27) {
      break;
    }
LABEL_33:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v46 = v86;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_22896C4F8(0, *(void *)(v86 + 16) + 1, 1);
      uint64_t v46 = v86;
    }
    uint64_t v0 = v80;
    unint64_t v48 = *(void *)(v46 + 16);
    unint64_t v47 = *(void *)(v46 + 24);
    if (v48 >= v47 >> 1)
    {
      sub_22896C4F8(v47 > 1, v48 + 1, 1);
      uint64_t v46 = v86;
    }
    uint64_t v13 = v82 + 1;
    *(void *)(v46 + 16) = v48 + 1;
    *(void *)(v46 + 8 * v48 + 32) = v26;
    if (v82 + 1 == v77)
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
  }
  unint64_t v33 = 0;
  uint64_t v34 = (unsigned char *)(v16 + 48);
  while (v33 < *(void *)(v16 + 16))
  {
    char v35 = *v34;
    uint64_t v37 = *((void *)v34 - 2);
    uint64_t v36 = *((void *)v34 - 1);
    swift_bridgeObjectRetain();
    if (!v36) {
      goto LABEL_33;
    }
    *(void *)(v80 + 192) = v37;
    *(void *)(v80 + 200) = v36;
    unint64_t v28 = sub_2289D7094(v37, v36);
    uint64_t v38 = v26[2];
    BOOL v39 = (v29 & 1) == 0;
    BOOL v40 = __OFADD__(v38, v39);
    uint64_t v41 = v38 + v39;
    if (v40) {
      goto LABEL_63;
    }
    char v42 = v29;
    if (v26[3] < v41)
    {
      sub_2289978C4(v41, 1);
      id v26 = v87;
      unint64_t v28 = sub_2289D7094(v37, v36);
      if ((v42 & 1) != (v29 & 1))
      {
        return sub_2289DF500();
      }
    }
    if (v42)
    {
      uint64_t v68 = (void *)swift_allocError();
      swift_willThrow();
      *uint64_t v75 = v68;
      id v69 = v68;
      sub_228952BB0(&qword_268284630);
      if (swift_dynamicCast())
      {
        sub_2289DF250();
        *(void *)(v80 + 176) = 0;
        *(void *)(v80 + 184) = 0xE000000000000000;
        sub_2289DEC90();
        sub_2289DF320();
        sub_2289DEC90();
        return sub_2289DF340();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return swift_unexpectedError();
      }
    }
    v26[(v28 >> 6) + 8] |= 1 << v28;
    uint64_t v43 = (uint64_t *)(v26[6] + 16 * v28);
    *uint64_t v43 = v37;
    v43[1] = v36;
    *(unsigned char *)(v26[7] + v28) = v35;
    uint64_t v44 = v26[2];
    BOOL v40 = __OFADD__(v44, 1);
    uint64_t v45 = v44 + 1;
    if (v40) {
      goto LABEL_64;
    }
    ++v33;
    _OWORD v26[2] = v45;
    v34 += 24;
    if (v27 == v33) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
  return MEMORY[0x270FA2058](v28, v29, v30, v31, v32);
}

uint64_t sub_2289C07D8()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = sub_2289C9408;
  }
  else
  {
    uint64_t v1 = sub_2289C08F0;
  }
  return MEMORY[0x270FA2498](v1, 0, 0);
}

uint64_t sub_2289C08F0()
{
  uint64_t v2 = v0 + 30;
  uint64_t v1 = v0[30];
  if (v1)
  {
    if (!*(void *)(v1 + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
    BOOL v39 = v0 + 30;
    uint64_t v43 = v0 + 27;
    uint64_t v3 = v0[45];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v0[27] = v3;
    uint64_t v41 = v1 + 64;
    uint64_t v5 = -1;
    uint64_t v6 = -1 << *(unsigned char *)(v1 + 32);
    if (-v6 < 64) {
      uint64_t v5 = ~(-1 << -(char)v6);
    }
    unint64_t v7 = v5 & *(void *)(v1 + 64);
    int64_t v42 = (unint64_t)(63 - v6) >> 6;
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v13 = v0;
    int64_t v14 = 0;
    BOOL v40 = v13;
    int64_t v15 = (void *)v13[45];
    if (v7) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return MEMORY[0x270FA2058](v8, v9, v10, v11, v12);
    }
    if (v19 < v42)
    {
      unint64_t v20 = *(void *)(v41 + 8 * v19);
      ++v14;
      if (v20) {
        goto LABEL_24;
      }
      int64_t v14 = v19 + 1;
      if (v19 + 1 < v42)
      {
        unint64_t v20 = *(void *)(v41 + 8 * v14);
        if (v20) {
          goto LABEL_24;
        }
        int64_t v14 = v19 + 2;
        if (v19 + 2 < v42)
        {
          unint64_t v20 = *(void *)(v41 + 8 * v14);
          if (v20) {
            goto LABEL_24;
          }
          int64_t v14 = v19 + 3;
          if (v19 + 3 < v42)
          {
            unint64_t v20 = *(void *)(v41 + 8 * v14);
            if (!v20)
            {
              int64_t v21 = v19 + 4;
              if (v21 < v42)
              {
                unint64_t v20 = *(void *)(v41 + 8 * v21);
                if (v20)
                {
                  int64_t v14 = v21;
                  goto LABEL_24;
                }
                while (1)
                {
                  int64_t v14 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_49;
                  }
                  if (v14 >= v42) {
                    goto LABEL_39;
                  }
                  unint64_t v20 = *(void *)(v41 + 8 * v14);
                  ++v21;
                  if (v20) {
                    goto LABEL_24;
                  }
                }
              }
              goto LABEL_39;
            }
LABEL_24:
            unint64_t v7 = (v20 - 1) & v20;
            for (unint64_t i = __clz(__rbit64(v20)) + (v14 << 6); ; unint64_t i = v17 | (v14 << 6))
            {
              char v22 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
              uint64_t v24 = *v22;
              uint64_t v23 = v22[1];
              uint64_t v25 = *(void **)(*(void *)(v1 + 56) + 8 * i);
              swift_bridgeObjectRetain();
              id v26 = v25;
              unint64_t v27 = sub_2289D7094(v24, v23);
              uint64_t v28 = v15[2];
              BOOL v29 = (v9 & 1) == 0;
              uint64_t v8 = v28 + v29;
              if (__OFADD__(v28, v29))
              {
                __break(1u);
LABEL_47:
                __break(1u);
                goto LABEL_48;
              }
              char v30 = v9;
              if (v15[3] >= v8)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  uint64_t v8 = (uint64_t)sub_228999054();
                }
              }
              else
              {
                sub_228997BF4(v8, isUniquelyReferenced_nonNull_native & 1);
                uint64_t v8 = sub_2289D7094(v24, v23);
                if ((v30 & 1) != (v9 & 1))
                {
                  return sub_2289DF500();
                }
                unint64_t v27 = v8;
              }
              int64_t v15 = (void *)*v43;
              if (v30)
              {
                swift_bridgeObjectRelease();
                uint64_t v16 = v15[7];

                *(void *)(v16 + 8 * v27) = v26;
                char isUniquelyReferenced_nonNull_native = 1;
                if (!v7) {
                  goto LABEL_9;
                }
              }
              else
              {
                v15[(v27 >> 6) + 8] |= 1 << v27;
                uint64_t v31 = (uint64_t *)(v15[6] + 16 * v27);
                *uint64_t v31 = v24;
                v31[1] = v23;
                *(void *)(v15[7] + 8 * v27) = v26;
                uint64_t v32 = v15[2];
                BOOL v33 = __OFADD__(v32, 1);
                uint64_t v34 = v32 + 1;
                if (v33) {
                  goto LABEL_47;
                }
                long long v15[2] = v34;
                char isUniquelyReferenced_nonNull_native = 1;
                if (!v7) {
                  goto LABEL_9;
                }
              }
LABEL_8:
              unint64_t v17 = __clz(__rbit64(v7));
              v7 &= v7 - 1;
            }
          }
        }
      }
    }
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v2 = v39;
    uint64_t v0 = v40;
    v40[45] = v15;
LABEL_40:
    uint64_t v38 = (void *)swift_task_alloc();
    v0[46] = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_2289C07D8;
    uint64_t v11 = v0[42];
    uint64_t v8 = (uint64_t)v2;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    int64_t v12 = v0 + 26;
    return MEMORY[0x270FA2058](v8, v9, v10, v11, v12);
  }
  (*(void (**)(void, void))(v0[43] + 8))(v0[44], v0[42]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v35 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v36 = v0[45];
  return v35(v36);
}

uint64_t sub_2289C0D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(v8 + 148) = v13;
  *(void *)(v8 + 304) = a8;
  *(void *)(v8 + 312) = v12;
  *(void *)(v8 + 288) = a6;
  *(void *)(v8 + 296) = a7;
  *(void *)(v8 + 272) = a4;
  *(void *)(v8 + 280) = a5;
  *(void *)(v8 + 256) = a2;
  *(void *)(v8 + 264) = a3;
  *(void *)(v8 + 248) = a1;
  sub_228952BB0(&qword_268284CF0);
  *(void *)(v8 + 320) = swift_task_alloc();
  *(void *)(v8 + 328) = swift_task_alloc();
  uint64_t v9 = sub_228952BB0(&qword_268284CF8);
  *(void *)(v8 + 336) = v9;
  *(void *)(v8 + 344) = *(void *)(v9 - 8);
  *(void *)(v8 + 352) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2289C0E68, 0, 0);
}

uint64_t sub_2289C0E68()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_2289BC1D8(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_22897B9EC(v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = 100;
  if (v5 == 1) {
    uint64_t v6 = 150;
  }
  if (v6 >= v1) {
    uint64_t v7 = v1;
  }
  else {
    uint64_t v7 = v6;
  }
  if (v1 <= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_2289C6140(v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_2289C8610(0, v10[2], v8, v8, (uint64_t)v10);
  swift_release();
  int64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = MEMORY[0x263F8EE78];
LABEL_40:
    uint64_t v49 = MEMORY[0x263F8EE80];
    uint64_t v78 = *(void *)(v46 + 16);
    if (!v78)
    {
LABEL_53:
      swift_bridgeObjectRelease();
      sub_228952BB0(&qword_268284CC8);
      sub_228952BB0(&qword_268284630);
      sub_2289DEF40();
      *(void *)(v0 + 360) = v49;
      uint64_t v71 = (void *)swift_task_alloc();
      *(void *)(v0 + 368) = v71;
      *uint64_t v71 = v0;
      v71[1] = sub_2289C1848;
      uint64_t v31 = *(void *)(v0 + 336);
      unint64_t v28 = v0 + 240;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v32 = v0 + 208;
      return MEMORY[0x270FA2058](v28, v29, v30, v31, v32);
    }
    uint64_t v76 = (_OWORD *)(v0 + 16);
    uint64_t v50 = sub_2289DEF20();
    uint64_t v51 = *(void *)(v50 - 8);
    uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56);
    uint64_t v73 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
    char v72 = (void (**)(uint64_t, uint64_t))(v51 + 8);
    swift_bridgeObjectRetain();
    uint64_t v52 = 0;
    while (1)
    {
      uint64_t v55 = *(void *)(v0 + 320);
      uint64_t v54 = *(void *)(v0 + 328);
      int v85 = *(_DWORD *)(v0 + 148);
      uint64_t v84 = *(void *)(v0 + 312);
      uint64_t v56 = *(void *)(v0 + 296);
      uint64_t v83 = *(void *)(v0 + 304);
      long long v81 = *(_OWORD *)(v0 + 280);
      uint64_t v57 = *(void *)(v0 + 272);
      uint64_t v58 = *(void *)(v46 + 8 * v52 + 32);
      v74(v54, 1, 1, v50);
      sub_2289C8B8C(v57, (uint64_t)v76);
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = 0;
      BOOL v60 = (void *)(v59 + 16);
      *(void *)(v59 + 24) = 0;
      long long v61 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v59 + 32) = *v76;
      *(_OWORD *)(v59 + 48) = v61;
      *(_OWORD *)(v59 + 64) = *(_OWORD *)(v0 + 48);
      *(void *)(v59 + 80) = *(void *)(v0 + 64);
      *(void *)(v59 + 88) = v58;
      *(_OWORD *)(v59 + 96) = v81;
      *(void *)(v59 + 112) = v56;
      *(void *)(v59 + 120) = v83;
      *(void *)(v59 + 128) = v84;
      *(_DWORD *)(v59 + 136) = v85;
      sub_2289C8CD4(v54, v55);
      LODWORD(v54) = (*v73)(v55, 1, v50);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v62 = *(void *)(v0 + 320);
      if (v54 == 1)
      {
        sub_2289C8D3C(*(void *)(v0 + 320));
        if (!*v60) {
          goto LABEL_47;
        }
      }
      else
      {
        sub_2289DEF10();
        (*v72)(v62, v50);
        if (!*v60)
        {
LABEL_47:
          uint64_t v63 = 0;
          uint64_t v65 = 0;
          goto LABEL_48;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v63 = sub_2289DEEE0();
      uint64_t v65 = v64;
      swift_unknownObjectRelease();
LABEL_48:
      uint64_t v66 = **(void **)(v0 + 248);
      sub_228952BB0(&qword_268284CC8);
      uint64_t v67 = v65 | v63;
      if (v65 | v63)
      {
        uint64_t v67 = v0 + 72;
        *(void *)(v0 + 72) = 0;
        *(void *)(v0 + 80) = 0;
        *(void *)(v0 + 88) = v63;
        *(void *)(v0 + 96) = v65;
      }
      ++v52;
      uint64_t v53 = *(void *)(v0 + 328);
      *(void *)(v0 + 104) = 1;
      *(void *)(v0 + 112) = v67;
      *(void *)(v0 + 120) = v66;
      swift_task_create();
      swift_release();
      sub_2289C8D3C(v53);
      swift_bridgeObjectRelease();
      if (v78 == v52)
      {
        swift_bridgeObjectRelease();
        uint64_t v49 = MEMORY[0x263F8EE80];
        goto LABEL_53;
      }
    }
  }
  uint64_t v75 = (void *)(v0 + 232);
  uint64_t v86 = MEMORY[0x263F8EE78];
  sub_22896C4F8(0, v12, 0);
  uint64_t v13 = 0;
  int64_t v77 = v12;
  uint64_t v79 = v11 + 32;
  uint64_t v80 = v0;
  while (1)
  {
    uint64_t v82 = v13;
    uint64_t v14 = *(void *)(v79 + 8 * v13);
    int64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v88 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_22896C558(0, v15, 0);
      uint64_t v16 = v88;
      unint64_t v17 = (unsigned char *)(v14 + 48);
      do
      {
        uint64_t v18 = *((void *)v17 - 1);
        char v19 = *v17;
        *(void *)(v0 + 152) = *((void *)v17 - 2);
        *(void *)(v0 + 160) = v18;
        *(unsigned char *)(v0 + 168) = v19;
        swift_bridgeObjectRetain();
        sub_228952BB0(&qword_268284D00);
        sub_228952BB0(&qword_268284280);
        swift_dynamicCast();
        uint64_t v20 = *(void *)(v0 + 128);
        uint64_t v21 = *(void *)(v0 + 136);
        char v22 = *(unsigned char *)(v0 + 144);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_22896C558(0, *(void *)(v16 + 16) + 1, 1);
          uint64_t v16 = v88;
        }
        unint64_t v24 = *(void *)(v16 + 16);
        unint64_t v23 = *(void *)(v16 + 24);
        if (v24 >= v23 >> 1)
        {
          sub_22896C558(v23 > 1, v24 + 1, 1);
          uint64_t v16 = v88;
        }
        v17 += 24;
        *(void *)(v16 + 16) = v24 + 1;
        uint64_t v25 = v16 + 24 * v24;
        *(void *)(v25 + 32) = v20;
        *(void *)(v25 + 40) = v21;
        *(unsigned char *)(v25 + 48) = v22;
        --v15;
      }
      while (v15);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = MEMORY[0x263F8EE78];
    }
    if (*(void *)(v16 + 16))
    {
      sub_228952BB0(&qword_268284740);
      id v26 = (void *)sub_2289DF3B0();
      uint64_t v27 = *(void *)(v16 + 16);
    }
    else
    {
      uint64_t v27 = 0;
      id v26 = (void *)MEMORY[0x263F8EE80];
    }
    uint64_t v87 = v26;
    unint64_t v28 = swift_bridgeObjectRetain_n();
    if (v27) {
      break;
    }
LABEL_33:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v46 = v86;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_22896C4F8(0, *(void *)(v86 + 16) + 1, 1);
      uint64_t v46 = v86;
    }
    uint64_t v0 = v80;
    unint64_t v48 = *(void *)(v46 + 16);
    unint64_t v47 = *(void *)(v46 + 24);
    if (v48 >= v47 >> 1)
    {
      sub_22896C4F8(v47 > 1, v48 + 1, 1);
      uint64_t v46 = v86;
    }
    uint64_t v13 = v82 + 1;
    *(void *)(v46 + 16) = v48 + 1;
    *(void *)(v46 + 8 * v48 + 32) = v26;
    if (v82 + 1 == v77)
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
  }
  unint64_t v33 = 0;
  uint64_t v34 = (unsigned char *)(v16 + 48);
  while (v33 < *(void *)(v16 + 16))
  {
    char v35 = *v34;
    uint64_t v37 = *((void *)v34 - 2);
    uint64_t v36 = *((void *)v34 - 1);
    swift_bridgeObjectRetain();
    if (!v36) {
      goto LABEL_33;
    }
    *(void *)(v80 + 192) = v37;
    *(void *)(v80 + 200) = v36;
    unint64_t v28 = sub_2289D7094(v37, v36);
    uint64_t v38 = v26[2];
    BOOL v39 = (v29 & 1) == 0;
    BOOL v40 = __OFADD__(v38, v39);
    uint64_t v41 = v38 + v39;
    if (v40) {
      goto LABEL_63;
    }
    char v42 = v29;
    if (v26[3] < v41)
    {
      sub_2289978C4(v41, 1);
      id v26 = v87;
      unint64_t v28 = sub_2289D7094(v37, v36);
      if ((v42 & 1) != (v29 & 1))
      {
        return sub_2289DF500();
      }
    }
    if (v42)
    {
      uint64_t v68 = (void *)swift_allocError();
      swift_willThrow();
      *uint64_t v75 = v68;
      id v69 = v68;
      sub_228952BB0(&qword_268284630);
      if (swift_dynamicCast())
      {
        sub_2289DF250();
        *(void *)(v80 + 176) = 0;
        *(void *)(v80 + 184) = 0xE000000000000000;
        sub_2289DEC90();
        sub_2289DF320();
        sub_2289DEC90();
        return sub_2289DF340();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return swift_unexpectedError();
      }
    }
    v26[(v28 >> 6) + 8] |= 1 << v28;
    uint64_t v43 = (uint64_t *)(v26[6] + 16 * v28);
    *uint64_t v43 = v37;
    v43[1] = v36;
    *(unsigned char *)(v26[7] + v28) = v35;
    uint64_t v44 = v26[2];
    BOOL v40 = __OFADD__(v44, 1);
    uint64_t v45 = v44 + 1;
    if (v40) {
      goto LABEL_64;
    }
    ++v33;
    _OWORD v26[2] = v45;
    v34 += 24;
    if (v27 == v33) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
  return MEMORY[0x270FA2058](v28, v29, v30, v31, v32);
}

uint64_t sub_2289C1848()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = sub_2289C1DB4;
  }
  else
  {
    uint64_t v1 = sub_2289C1960;
  }
  return MEMORY[0x270FA2498](v1, 0, 0);
}

uint64_t sub_2289C1960()
{
  uint64_t v2 = v0 + 30;
  uint64_t v1 = v0[30];
  if (v1)
  {
    if (!*(void *)(v1 + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
    BOOL v39 = v0 + 30;
    uint64_t v43 = v0 + 27;
    uint64_t v3 = v0[45];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v0[27] = v3;
    uint64_t v41 = v1 + 64;
    uint64_t v5 = -1;
    uint64_t v6 = -1 << *(unsigned char *)(v1 + 32);
    if (-v6 < 64) {
      uint64_t v5 = ~(-1 << -(char)v6);
    }
    unint64_t v7 = v5 & *(void *)(v1 + 64);
    int64_t v42 = (unint64_t)(63 - v6) >> 6;
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v13 = v0;
    int64_t v14 = 0;
    BOOL v40 = v13;
    int64_t v15 = (void *)v13[45];
    if (v7) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return MEMORY[0x270FA2058](v8, v9, v10, v11, v12);
    }
    if (v19 < v42)
    {
      unint64_t v20 = *(void *)(v41 + 8 * v19);
      ++v14;
      if (v20) {
        goto LABEL_24;
      }
      int64_t v14 = v19 + 1;
      if (v19 + 1 < v42)
      {
        unint64_t v20 = *(void *)(v41 + 8 * v14);
        if (v20) {
          goto LABEL_24;
        }
        int64_t v14 = v19 + 2;
        if (v19 + 2 < v42)
        {
          unint64_t v20 = *(void *)(v41 + 8 * v14);
          if (v20) {
            goto LABEL_24;
          }
          int64_t v14 = v19 + 3;
          if (v19 + 3 < v42)
          {
            unint64_t v20 = *(void *)(v41 + 8 * v14);
            if (!v20)
            {
              int64_t v21 = v19 + 4;
              if (v21 < v42)
              {
                unint64_t v20 = *(void *)(v41 + 8 * v21);
                if (v20)
                {
                  int64_t v14 = v21;
                  goto LABEL_24;
                }
                while (1)
                {
                  int64_t v14 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_49;
                  }
                  if (v14 >= v42) {
                    goto LABEL_39;
                  }
                  unint64_t v20 = *(void *)(v41 + 8 * v14);
                  ++v21;
                  if (v20) {
                    goto LABEL_24;
                  }
                }
              }
              goto LABEL_39;
            }
LABEL_24:
            unint64_t v7 = (v20 - 1) & v20;
            for (unint64_t i = __clz(__rbit64(v20)) + (v14 << 6); ; unint64_t i = v17 | (v14 << 6))
            {
              char v22 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
              uint64_t v24 = *v22;
              uint64_t v23 = v22[1];
              uint64_t v25 = *(void **)(*(void *)(v1 + 56) + 8 * i);
              swift_bridgeObjectRetain();
              id v26 = v25;
              unint64_t v27 = sub_2289D7094(v24, v23);
              uint64_t v28 = v15[2];
              BOOL v29 = (v9 & 1) == 0;
              uint64_t v8 = v28 + v29;
              if (__OFADD__(v28, v29))
              {
                __break(1u);
LABEL_47:
                __break(1u);
                goto LABEL_48;
              }
              char v30 = v9;
              if (v15[3] >= v8)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  uint64_t v8 = (uint64_t)sub_228999060();
                }
              }
              else
              {
                sub_228997C00(v8, isUniquelyReferenced_nonNull_native & 1);
                uint64_t v8 = sub_2289D7094(v24, v23);
                if ((v30 & 1) != (v9 & 1))
                {
                  return sub_2289DF500();
                }
                unint64_t v27 = v8;
              }
              int64_t v15 = (void *)*v43;
              if (v30)
              {
                swift_bridgeObjectRelease();
                uint64_t v16 = v15[7];

                *(void *)(v16 + 8 * v27) = v26;
                char isUniquelyReferenced_nonNull_native = 1;
                if (!v7) {
                  goto LABEL_9;
                }
              }
              else
              {
                v15[(v27 >> 6) + 8] |= 1 << v27;
                uint64_t v31 = (uint64_t *)(v15[6] + 16 * v27);
                *uint64_t v31 = v24;
                v31[1] = v23;
                *(void *)(v15[7] + 8 * v27) = v26;
                uint64_t v32 = v15[2];
                BOOL v33 = __OFADD__(v32, 1);
                uint64_t v34 = v32 + 1;
                if (v33) {
                  goto LABEL_47;
                }
                long long v15[2] = v34;
                char isUniquelyReferenced_nonNull_native = 1;
                if (!v7) {
                  goto LABEL_9;
                }
              }
LABEL_8:
              unint64_t v17 = __clz(__rbit64(v7));
              v7 &= v7 - 1;
            }
          }
        }
      }
    }
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v2 = v39;
    uint64_t v0 = v40;
    v40[45] = v15;
LABEL_40:
    uint64_t v38 = (void *)swift_task_alloc();
    v0[46] = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_2289C1848;
    uint64_t v11 = v0[42];
    uint64_t v8 = (uint64_t)v2;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    int64_t v12 = v0 + 26;
    return MEMORY[0x270FA2058](v8, v9, v10, v11, v12);
  }
  (*(void (**)(void, void))(v0[43] + 8))(v0[44], v0[42]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v35 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v36 = v0[45];
  return v35(v36);
}

uint64_t sub_2289C1DB4()
{
  (*(void (**)(void, void))(v0[43] + 8))(v0[44], v0[42]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_2289C1E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 208) = v13;
  *(void *)(v8 + 216) = v15;
  *(_DWORD *)(v8 + 36) = v14;
  *(void *)(v8 + 192) = a8;
  *(void *)(v8 + 200) = v12;
  *(void *)(v8 + 176) = a6;
  *(void *)(v8 + 184) = a7;
  *(void *)(v8 + 160) = a4;
  *(void *)(v8 + 168) = a5;
  *(void *)(v8 + 144) = a2;
  *(void *)(v8 + 152) = a3;
  *(void *)(v8 + 136) = a1;
  *(void *)(v8 + 224) = sub_2289DEAC0();
  *(void *)(v8 + 232) = sub_2289550A8(&qword_268284630);
  uint64_t v9 = sub_2289DEF60();
  *(void *)(v8 + 240) = v9;
  *(void *)(v8 + 248) = *(void *)(v9 - 8);
  *(void *)(v8 + 256) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2289C1F7C, 0, 0);
}

uint64_t sub_2289C1F7C()
{
  uint64_t v73 = v0;
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_2289BC1D8(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_22897B9EC(v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = 100;
  if (v5 == 1) {
    uint64_t v6 = 150;
  }
  if (v6 >= v1) {
    uint64_t v7 = v1;
  }
  else {
    uint64_t v7 = v6;
  }
  if (v1 <= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_2289C6140(v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_2289C8610(0, v10[2], v8, v8, (uint64_t)v10);
  swift_release();
  int64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    uint64_t v70 = MEMORY[0x263F8EE78];
    sub_22896C4F8(0, v12, 0);
    uint64_t v13 = 0;
    int64_t v62 = v12;
    uint64_t v63 = v11 + 32;
    do
    {
      uint64_t v14 = *(void *)(v63 + 8 * v13);
      int64_t v15 = *(void *)(v14 + 16);
      uint64_t v65 = v13;
      if (v15)
      {
        v72[0] = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        sub_22896C558(0, v15, 0);
        uint64_t v16 = v72[0];
        unint64_t v17 = (unsigned char *)(v14 + 48);
        do
        {
          uint64_t v18 = *((void *)v17 - 1);
          char v19 = *v17;
          *(void *)(v0 + 40) = *((void *)v17 - 2);
          *(void *)(v0 + 48) = v18;
          *(unsigned char *)(v0 + 56) = v19;
          swift_bridgeObjectRetain();
          sub_228952BB0(&qword_268284D00);
          sub_228952BB0(&qword_268284280);
          swift_dynamicCast();
          uint64_t v20 = *(void *)(v0 + 16);
          uint64_t v21 = *(void *)(v0 + 24);
          char v22 = *(unsigned char *)(v0 + 32);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_22896C558(0, *(void *)(v16 + 16) + 1, 1);
            uint64_t v16 = v72[0];
          }
          unint64_t v24 = *(void *)(v16 + 16);
          unint64_t v23 = *(void *)(v16 + 24);
          if (v24 >= v23 >> 1)
          {
            sub_22896C558(v23 > 1, v24 + 1, 1);
            uint64_t v16 = v72[0];
          }
          v17 += 24;
          *(void *)(v16 + 16) = v24 + 1;
          uint64_t v25 = v16 + 24 * v24;
          *(void *)(v25 + 32) = v20;
          *(void *)(v25 + 40) = v21;
          *(unsigned char *)(v25 + 48) = v22;
          --v15;
        }
        while (v15);
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = MEMORY[0x263F8EE78];
      }
      uint64_t v26 = *(void *)(v16 + 16);
      if (v26)
      {
        sub_228952BB0(&qword_268284740);
        unint64_t v27 = (void *)sub_2289DF3B0();
        uint64_t v26 = *(void *)(v16 + 16);
      }
      else
      {
        unint64_t v27 = (void *)MEMORY[0x263F8EE80];
      }
      uint64_t v71 = v27;
      unint64_t v28 = swift_bridgeObjectRetain_n();
      if (v26)
      {
        unint64_t v33 = 0;
        uint64_t v34 = (unsigned char *)(v16 + 48);
        while (1)
        {
          if (v33 >= *(void *)(v16 + 16))
          {
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
            return MEMORY[0x270FA2058](v28, v29, v30, v31, v32);
          }
          char v35 = *v34;
          uint64_t v37 = *((void *)v34 - 2);
          uint64_t v36 = *((void *)v34 - 1);
          swift_bridgeObjectRetain();
          if (!v36) {
            goto LABEL_33;
          }
          *(void *)(v0 + 80) = v37;
          *(void *)(v0 + 88) = v36;
          unint64_t v28 = sub_2289D7094(v37, v36);
          uint64_t v38 = v27[2];
          BOOL v39 = (v29 & 1) == 0;
          BOOL v40 = __OFADD__(v38, v39);
          uint64_t v41 = v38 + v39;
          if (v40) {
            goto LABEL_57;
          }
          char v42 = v29;
          if (v27[3] < v41)
          {
            sub_2289978C4(v41, 1);
            unint64_t v27 = v71;
            unint64_t v28 = sub_2289D7094(v37, v36);
            if ((v42 & 1) != (v29 & 1)) {
              break;
            }
          }
          if (v42)
          {
            uint64_t v59 = (void *)swift_allocError();
            swift_willThrow();
            *(void *)(v0 + 120) = v59;
            id v60 = v59;
            if (swift_dynamicCast())
            {
              sub_2289DF250();
              *(void *)(v0 + 64) = 0;
              *(void *)(v0 + 72) = 0xE000000000000000;
              sub_2289DEC90();
              sub_2289DF320();
              sub_2289DEC90();
              return sub_2289DF340();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              return swift_unexpectedError();
            }
          }
          v27[(v28 >> 6) + 8] |= 1 << v28;
          uint64_t v43 = (uint64_t *)(v27[6] + 16 * v28);
          *uint64_t v43 = v37;
          v43[1] = v36;
          *(unsigned char *)(v27[7] + v28) = v35;
          uint64_t v44 = v27[2];
          BOOL v40 = __OFADD__(v44, 1);
          uint64_t v45 = v44 + 1;
          if (v40) {
            goto LABEL_58;
          }
          ++v33;
          _OWORD v27[2] = v45;
          v34 += 24;
          if (v26 == v33) {
            goto LABEL_33;
          }
        }
        return sub_2289DF500();
      }
LABEL_33:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v46 = v70;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22896C4F8(0, *(void *)(v70 + 16) + 1, 1);
        uint64_t v46 = v70;
      }
      unint64_t v48 = *(void *)(v46 + 16);
      unint64_t v47 = *(void *)(v46 + 24);
      if (v48 >= v47 >> 1)
      {
        sub_22896C4F8(v47 > 1, v48 + 1, 1);
        uint64_t v46 = v70;
      }
      uint64_t v13 = v65 + 1;
      *(void *)(v46 + 16) = v48 + 1;
      *(void *)(v46 + 8 * v48 + 32) = v27;
    }
    while (v65 + 1 != v62);
    swift_bridgeObjectRelease();
    uint64_t v49 = *(void *)(v46 + 16);
    if (v49) {
      goto LABEL_40;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = MEMORY[0x263F8EE78];
    uint64_t v49 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v49)
    {
LABEL_40:
      swift_bridgeObjectRetain();
      uint64_t v50 = 0;
      uint64_t v64 = v49;
      uint64_t v66 = v46;
      do
      {
        uint64_t v51 = *(void *)(v0 + 216);
        int v52 = *(_DWORD *)(v0 + 36);
        uint64_t v68 = *(void *)(v0 + 200);
        uint64_t v69 = *(void *)(v0 + 208);
        uint64_t v53 = *(void *)(v0 + 184);
        uint64_t v67 = *(void *)(v0 + 192);
        uint64_t v55 = *(void *)(v0 + 168);
        uint64_t v54 = *(void *)(v0 + 176);
        uint64_t v56 = *(void *)(v0 + 144);
        uint64_t v57 = *(void *)(v66 + 8 * v50++ + 32);
        v72[0] = v57;
        swift_bridgeObjectRetain();
        sub_2289C2A78(v72, v56, v55, v54, v53, v67, v68, v69, v52, v51);
        swift_bridgeObjectRelease();
      }
      while (v64 != v50);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  *(void *)(v0 + 112) = sub_2289DEA60();
  *(void *)(v0 + 264) = swift_checkMetadataState();
  sub_2289DEF40();
  uint64_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v58;
  *uint64_t v58 = v0;
  v58[1] = sub_2289C2720;
  uint64_t v31 = *(void *)(v0 + 240);
  unint64_t v28 = v0 + 128;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v32 = v0 + 104;
  return MEMORY[0x270FA2058](v28, v29, v30, v31, v32);
}

uint64_t sub_2289C2720()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_2289C29F8;
  }
  else
  {
    uint64_t v2 = sub_2289C283C;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2289C283C()
{
  if (v0[16])
  {
    if (MEMORY[0x22A6A16A0](v0[16], MEMORY[0x263F8D310], v0[27], MEMORY[0x263F8D320]))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = v0[27];
      *(void *)(swift_task_alloc() + 16) = v4;
      sub_2289DEAA0();
      swift_task_dealloc();
    }
    uint64_t v5 = (void *)swift_task_alloc();
    v0[34] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_2289C2720;
    uint64_t v6 = v0[30];
    return MEMORY[0x270FA2058](v0 + 16, 0, 0, v6, v0 + 13);
  }
  else
  {
    uint64_t v1 = (void *)v0[17];
    (*(void (**)(void, void))(v0[31] + 8))(v0[32], v0[30]);
    *uint64_t v1 = v0[14];
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
}

uint64_t sub_2289C29F8()
{
  (*(void (**)(void, void))(v0[31] + 8))(v0[32], v0[30]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_2289C2A78(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  uint64_t v26 = a7;
  uint64_t v27 = a2;
  uint64_t v16 = sub_228952BB0(&qword_268284CF0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *a1;
  uint64_t v20 = sub_2289DEF20();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v18, 1, 1, v20);
  sub_2289C8B8C(a3, (uint64_t)v28);
  uint64_t v21 = swift_allocObject();
  long long v22 = v28[1];
  *(_OWORD *)(v21 + 40) = v28[0];
  *(void *)(v21 + 16) = 0;
  *(void *)(v21 + 24) = 0;
  *(void *)(v21 + 32) = a10;
  *(_OWORD *)(v21 + 56) = v22;
  *(_OWORD *)(v21 + 72) = v28[2];
  *(void *)(v21 + 88) = v29;
  *(void *)(v21 + 96) = v19;
  *(void *)(v21 + 104) = a4;
  *(void *)(v21 + 112) = a5;
  uint64_t v23 = v26;
  *(void *)(v21 + 120) = a6;
  *(void *)(v21 + 128) = v23;
  *(void *)(v21 + 136) = a8;
  *(_DWORD *)(v21 + 144) = a9;
  sub_2289DEAC0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2289550A8(&qword_268284630);
  sub_2289DEF70();
  sub_2289C2FA4((uint64_t)v18, (uint64_t)&unk_268284DA8, v21);
  return sub_2289C8D3C((uint64_t)v18);
}

uint64_t sub_2289C2C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 104) = v12;
  *(_DWORD *)(v8 + 36) = v11;
  *(_OWORD *)(v8 + 88) = v10;
  *(void *)(v8 + 72) = a7;
  *(void *)(v8 + 80) = a8;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 40) = a1;
  *(void *)(v8 + 48) = a4;
  return MEMORY[0x270FA2498](sub_2289C2CB4, 0, 0);
}

uint64_t sub_2289C2CB4()
{
  sub_2289DEF30();
  int v1 = *(_DWORD *)(v0 + 36);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v4 = *(void **)(v0 + 48);
  uint64_t v5 = v4[5];
  uint64_t v6 = v4[6];
  sub_22895598C(v4 + 2, v5);
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(_DWORD *)(v0 + 32) = v1;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 8) + **(int **)(v6 + 8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_2289C2E40;
  uint64_t v8 = *(void *)(v0 + 104);
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v11 = *(void *)(v0 + 64);
  uint64_t v12 = *(void *)(v0 + 56);
  return v14(v12, v11, v9, v10, v0 + 16, v8, v5, v6);
}

uint64_t sub_2289C2E40(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_2289C2F8C;
  }
  else
  {
    *(void *)(v4 + 128) = a1;
    uint64_t v5 = sub_2289C2F68;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_2289C2F68()
{
  **(void **)(v0 + 40) = *(void *)(v0 + 128);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2289C2F8C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2289C2FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_228952BB0(&qword_268284CF0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2289C8CD4(a1, (uint64_t)v9);
  uint64_t v10 = sub_2289DEF20();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_2289C8D3C((uint64_t)v9);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = sub_2289DEEE0();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_2289DEF10();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    v19[2] = v12;
    void v19[3] = v14;
  }
  v18[1] = 1;
  _OWORD v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t MCatalogService.fetch(bookAssets:audiobookAssets:relationships:views:additionalParameters:batchSize:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 40) = a3;
  *(void *)(v8 + 48) = a4;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + 32) = a2;
  uint64_t v9 = *a7;
  uint64_t v10 = a7[1];
  *(void *)(v8 + 72) = v7;
  *(void *)(v8 + 80) = v9;
  *(void *)(v8 + 88) = v10;
  *(_DWORD *)(v8 + 128) = *((_DWORD *)a7 + 4);
  return MEMORY[0x270FA2498](sub_2289C31B4, 0, 0);
}

uint64_t sub_2289C31B4()
{
  uint64_t v25 = v0;
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  if (v1)
  {
    v24[0] = 3;
    uint64_t v3 = sub_2289C4828(v24, v1, (void (*)(BOOL, unint64_t, uint64_t))sub_22896C588, &qword_2682848B8, (void (*)(void, void, void))sub_2289C5BF4);
    uint64_t v4 = v3;
    if (v2)
    {
      uint64_t v5 = *(void *)(v0 + 32);
      char v23 = 0;
      uint64_t v6 = sub_2289C4828(&v23, v5, (void (*)(BOOL, unint64_t, uint64_t))sub_22896C588, &qword_2682848B8, (void (*)(void, void, void))sub_2289C5BF4);
      uint64_t v7 = v6;
      if (v4)
      {
        if (v6)
        {
          swift_bridgeObjectRetain();
          uint64_t v8 = swift_bridgeObjectRetain();
          uint64_t v12 = sub_2289BC3B8(v8, v4);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v4 = v12;
        }
        goto LABEL_14;
      }
LABEL_8:
      uint64_t v4 = v7;
      if (!v7) {
        goto LABEL_11;
      }
LABEL_14:
      int v13 = *(_DWORD *)(v0 + 128);
      uint64_t v15 = *(void *)(v0 + 80);
      uint64_t v14 = *(void *)(v0 + 88);
      uint64_t v16 = *(void *)(v0 + 56);
      long long v21 = *(_OWORD *)(v0 + 40);
      long long v22 = *(_OWORD *)(v0 + 64);
      unint64_t v17 = sub_2289A67E4(v4);
      *(void *)(v0 + 96) = v17;
      swift_bridgeObjectRelease();
      uint64_t v18 = sub_228952BB0(&qword_268284C40);
      uint64_t v19 = swift_task_alloc();
      *(void *)(v0 + 104) = v19;
      *(void *)(v19 + 16) = v17;
      *(_OWORD *)(v19 + 24) = v22;
      *(_OWORD *)(v19 + 40) = v21;
      *(void *)(v19 + 56) = v16;
      *(void *)(v19 + 64) = v15;
      *(void *)(v19 + 72) = v14;
      *(_DWORD *)(v19 + 80) = v13;
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 112) = v20;
      *uint64_t v20 = v0;
      v20[1] = sub_2289C34CC;
      uint64_t v27 = v18;
      return MEMORY[0x270FA22B8](v0 + 16, v18, v18, 0, 0, &unk_268284C50, v19, v18);
    }
    if (v3) {
      goto LABEL_14;
    }
  }
  else if (v2)
  {
    char v23 = 0;
    uint64_t v7 = sub_2289C4828(&v23, v2, (void (*)(BOOL, unint64_t, uint64_t))sub_22896C588, &qword_2682848B8, (void (*)(void, void, void))sub_2289C5BF4);
    goto LABEL_8;
  }
LABEL_11:
  sub_228973FB0();
  swift_allocError();
  *uint64_t v9 = 8;
  swift_willThrow();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_2289C34CC()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_2289C3650;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_2289C35E8;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2289C35E8()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_2289C3650()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t MCatalogService.fetch(adamID:type:relationships:views:additionalParameters:metadata:)(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 128) = a6;
  *(void *)(v8 + 136) = v7;
  *(void *)(v8 + 112) = a4;
  *(void *)(v8 + 120) = a5;
  *(void *)(v8 + 96) = a1;
  *(void *)(v8 + 104) = a2;
  *(unsigned char *)(v8 + 192) = *a3;
  uint64_t v9 = *(void *)(a7 + 8);
  *(void *)(v8 + 144) = *(void *)a7;
  *(void *)(v8 + 152) = v9;
  *(_DWORD *)(v8 + 92) = *(_DWORD *)(a7 + 16);
  return MEMORY[0x270FA2498](sub_2289C36FC, 0, 0);
}

uint64_t sub_2289C36FC()
{
  int v1 = *(unsigned __int8 *)(v0 + 192);
  if (v1 == 3 || v1 == 0)
  {
    int v3 = *(_DWORD *)(v0 + 92);
    uint64_t v5 = *(void *)(v0 + 144);
    uint64_t v4 = *(void *)(v0 + 152);
    uint64_t v6 = *(void **)(v0 + 136);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 104);
    uint64_t v9 = v6[5];
    uint64_t v10 = v6[6];
    sub_22895598C(v6 + 2, v9);
    sub_228952BB0(&qword_268284278);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2289E0340;
    *(void *)(inited + 32) = v7;
    *(void *)(inited + 40) = v8;
    *(unsigned char *)(inited + 48) = v1;
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_22898AE2C(inited);
    *(void *)(v0 + 72) = v5;
    *(void *)(v0 + 160) = v12;
    *(void *)(v0 + 80) = v4;
    *(_DWORD *)(v0 + 88) = v3;
    long long v21 = (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 8) + **(int **)(v10 + 8));
    int v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v13;
    uint64_t v14 = type metadata accessor for MAsset();
    *int v13 = v0;
    v13[1] = sub_2289C391C;
    uint64_t v15 = *(void *)(v0 + 120);
    uint64_t v16 = *(void *)(v0 + 128);
    uint64_t v17 = *(void *)(v0 + 112);
    return v21(v12, v17, v15, v16, v0 + 72, v14, v9, v10);
  }
  else
  {
    sub_228973FB0();
    swift_allocError();
    unsigned char *v19 = v1;
    swift_willThrow();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
}

uint64_t sub_2289C391C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 176) = a1;
  *(void *)(v3 + 184) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v4 = sub_2289C3B08;
  }
  else {
    uint64_t v4 = sub_2289C3A40;
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t sub_2289C3A40()
{
  if (*(void *)(v0[22] + 16))
  {
    uint64_t v2 = v0[12];
    uint64_t v1 = v0[13];
    swift_bridgeObjectRetain();
    unint64_t v3 = sub_2289D7094(v2, v1);
    if (v4)
    {
      uint64_t v5 = *(void **)(*(void *)(v0[22] + 56) + 8 * v3);
      id v6 = v5;
    }
    else
    {
      uint64_t v5 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t (*)(void *))v0[1];
  return v7(v5);
}

uint64_t sub_2289C3B08()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MCatalogService.fetch(authorIDs:relationships:views:additionalParameters:batchSize:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 56) = a5;
  *(void *)(v7 + 64) = v6;
  *(void *)(v7 + 40) = a3;
  *(void *)(v7 + 48) = a4;
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a2;
  uint64_t v8 = *(void *)(a6 + 8);
  *(void *)(v7 + 72) = *(void *)a6;
  *(void *)(v7 + 80) = v8;
  *(_DWORD *)(v7 + 120) = *(_DWORD *)(a6 + 16);
  return MEMORY[0x270FA2498](sub_2289C3B58, 0, 0);
}

uint64_t sub_2289C3B58()
{
  uint64_t v15 = v0;
  int v1 = *(_DWORD *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 48);
  long long v12 = *(_OWORD *)(v0 + 32);
  long long v13 = *(_OWORD *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 24);
  char v14 = 2;
  uint64_t v6 = sub_2289C4828(&v14, v5, (void (*)(BOOL, unint64_t, uint64_t))sub_22896C588, &qword_2682848B8, (void (*)(void, void, void))sub_2289C5BF4);
  unint64_t v7 = sub_2289A67E4(v6);
  *(void *)(v0 + 88) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_228952BB0(&qword_268284C68);
  uint64_t v9 = swift_task_alloc();
  *(void *)(v0 + 96) = v9;
  *(void *)(v9 + 16) = v7;
  *(_OWORD *)(v9 + 24) = v13;
  *(_OWORD *)(v9 + 40) = v12;
  *(void *)(v9 + 56) = v4;
  *(void *)(v9 + 64) = v3;
  *(void *)(v9 + 72) = v2;
  *(_DWORD *)(v9 + 80) = v1;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v10;
  void *v10 = v0;
  v10[1] = sub_2289C3CFC;
  uint64_t v17 = v8;
  return MEMORY[0x270FA22B8](v0 + 16, v8, v8, 0, 0, &unk_268284C78, v9, v8);
}

uint64_t sub_2289C3CFC()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_2289C9404;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_2289C93F8;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t MCatalogService.fetch(genreIDs:relationships:views:additionalParameters:batchSize:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 56) = a5;
  *(void *)(v7 + 64) = v6;
  *(void *)(v7 + 40) = a3;
  *(void *)(v7 + 48) = a4;
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a2;
  uint64_t v8 = *(void *)(a6 + 8);
  *(void *)(v7 + 72) = *(void *)a6;
  *(void *)(v7 + 80) = v8;
  *(_DWORD *)(v7 + 120) = *(_DWORD *)(a6 + 16);
  return MEMORY[0x270FA2498](sub_2289C3E50, 0, 0);
}

uint64_t sub_2289C3E50()
{
  uint64_t v15 = v0;
  int v1 = *(_DWORD *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 48);
  long long v12 = *(_OWORD *)(v0 + 32);
  long long v13 = *(_OWORD *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 24);
  char v14 = 5;
  uint64_t v6 = sub_2289C4828(&v14, v5, (void (*)(BOOL, unint64_t, uint64_t))sub_22896C588, &qword_2682848B8, (void (*)(void, void, void))sub_2289C5BF4);
  unint64_t v7 = sub_2289A67E4(v6);
  *(void *)(v0 + 88) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_228952BB0(&qword_268284C88);
  uint64_t v9 = swift_task_alloc();
  *(void *)(v0 + 96) = v9;
  *(void *)(v9 + 16) = v7;
  *(_OWORD *)(v9 + 24) = v13;
  *(_OWORD *)(v9 + 40) = v12;
  *(void *)(v9 + 56) = v4;
  *(void *)(v9 + 64) = v3;
  *(void *)(v9 + 72) = v2;
  *(_DWORD *)(v9 + 80) = v1;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v10;
  void *v10 = v0;
  v10[1] = sub_2289C3CFC;
  uint64_t v17 = v8;
  return MEMORY[0x270FA22B8](v0 + 16, v8, v8, 0, 0, &unk_268284C98, v9, v8);
}

uint64_t MCatalogService.fetch(bookSeries:audiobookSeries:relationships:views:additionalParameters:batchSize:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 40) = a3;
  *(void *)(v8 + 48) = a4;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + 32) = a2;
  uint64_t v9 = *a7;
  uint64_t v10 = a7[1];
  *(void *)(v8 + 72) = v7;
  *(void *)(v8 + 80) = v9;
  *(void *)(v8 + 88) = v10;
  *(_DWORD *)(v8 + 128) = *((_DWORD *)a7 + 4);
  return MEMORY[0x270FA2498](sub_2289C4030, 0, 0);
}

uint64_t sub_2289C4030()
{
  uint64_t v25 = v0;
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  if (v1)
  {
    v24[0] = 4;
    uint64_t v3 = sub_2289C4828(v24, v1, (void (*)(BOOL, unint64_t, uint64_t))sub_22896C588, &qword_2682848B8, (void (*)(void, void, void))sub_2289C5BF4);
    uint64_t v4 = v3;
    if (v2)
    {
      uint64_t v5 = *(void *)(v0 + 32);
      char v23 = 1;
      uint64_t v6 = sub_2289C4828(&v23, v5, (void (*)(BOOL, unint64_t, uint64_t))sub_22896C588, &qword_2682848B8, (void (*)(void, void, void))sub_2289C5BF4);
      uint64_t v7 = v6;
      if (v4)
      {
        if (v6)
        {
          swift_bridgeObjectRetain();
          uint64_t v8 = swift_bridgeObjectRetain();
          uint64_t v12 = sub_2289BC3B8(v8, v4);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v4 = v12;
        }
        goto LABEL_14;
      }
LABEL_8:
      uint64_t v4 = v7;
      if (!v7) {
        goto LABEL_11;
      }
LABEL_14:
      int v13 = *(_DWORD *)(v0 + 128);
      uint64_t v15 = *(void *)(v0 + 80);
      uint64_t v14 = *(void *)(v0 + 88);
      uint64_t v16 = *(void *)(v0 + 56);
      long long v21 = *(_OWORD *)(v0 + 40);
      long long v22 = *(_OWORD *)(v0 + 64);
      unint64_t v17 = sub_2289A67E4(v4);
      *(void *)(v0 + 96) = v17;
      swift_bridgeObjectRelease();
      uint64_t v18 = sub_228952BB0(&qword_268284CA8);
      uint64_t v19 = swift_task_alloc();
      *(void *)(v0 + 104) = v19;
      *(void *)(v19 + 16) = v17;
      *(_OWORD *)(v19 + 24) = v22;
      *(_OWORD *)(v19 + 40) = v21;
      *(void *)(v19 + 56) = v16;
      *(void *)(v19 + 64) = v15;
      *(void *)(v19 + 72) = v14;
      *(_DWORD *)(v19 + 80) = v13;
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 112) = v20;
      *uint64_t v20 = v0;
      v20[1] = sub_2289C4350;
      uint64_t v27 = v18;
      return MEMORY[0x270FA22B8](v0 + 16, v18, v18, 0, 0, &unk_268284CB8, v19, v18);
    }
    if (v3) {
      goto LABEL_14;
    }
  }
  else if (v2)
  {
    char v23 = 1;
    uint64_t v7 = sub_2289C4828(&v23, v2, (void (*)(BOOL, unint64_t, uint64_t))sub_22896C588, &qword_2682848B8, (void (*)(void, void, void))sub_2289C5BF4);
    goto LABEL_8;
  }
LABEL_11:
  sub_228973FB0();
  swift_allocError();
  *uint64_t v9 = 8;
  swift_willThrow();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_2289C4350()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_2289C9410;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_2289C940C;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t MCatalogService.fetch(adamIDs:relationships:views:additionalParameters:batchSize:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 56) = a5;
  *(void *)(v7 + 64) = v6;
  *(void *)(v7 + 40) = a3;
  *(void *)(v7 + 48) = a4;
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a2;
  uint64_t v8 = *(void *)(a6 + 8);
  *(void *)(v7 + 72) = *(void *)a6;
  *(void *)(v7 + 80) = v8;
  *(_DWORD *)(v7 + 120) = *(_DWORD *)(a6 + 16);
  return MEMORY[0x270FA2498](sub_2289C44A4, 0, 0);
}

uint64_t sub_2289C44A4()
{
  uint64_t v14 = v0;
  int v1 = *(_DWORD *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 48);
  long long v11 = *(_OWORD *)(v0 + 32);
  long long v12 = *(_OWORD *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 24);
  char v13 = 6;
  uint64_t v6 = sub_2289C4828(&v13, v5, (void (*)(BOOL, unint64_t, uint64_t))sub_22896C558, &qword_268284740, (void (*)(void, void, void))sub_2289C5468);
  *(void *)(v0 + 88) = v6;
  uint64_t v7 = sub_228952BB0(&qword_268284CC8);
  uint64_t v8 = swift_task_alloc();
  *(void *)(v0 + 96) = v8;
  *(void *)(v8 + 16) = v6;
  *(_OWORD *)(v8 + 24) = v12;
  *(_OWORD *)(v8 + 40) = v11;
  *(void *)(v8 + 56) = v4;
  *(void *)(v8 + 64) = v3;
  *(void *)(v8 + 72) = v2;
  *(_DWORD *)(v8 + 80) = v1;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_2289C4638;
  uint64_t v16 = v7;
  return MEMORY[0x270FA22B8](v0 + 16, v7, v7, 0, 0, &unk_268284CD8, v8, v7);
}

uint64_t sub_2289C4638()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_2289C47BC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_2289C4754;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2289C4754()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_2289C47BC()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_2289C4828(char *a1, uint64_t a2, void (*a3)(BOOL, unint64_t, uint64_t), uint64_t *a4, void (*a5)(void, void, void))
{
  char v31 = *a1;
  LOBYTE(v33) = *a1;
  uint64_t v8 = sub_2289C4D9C((unsigned __int8 *)&v33, a2);
  unint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v29 = a4;
    uint64_t v30 = a5;
    uint64_t v33 = MEMORY[0x263F8EE78];
    unint64_t v28 = a3;
    a3(0, v9, 0);
    uint64_t v10 = v33;
    int64_t v11 = sub_2289C67D4(v8);
    int v13 = v12;
    char v15 = v14 & 1;
    while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(unsigned char *)(v8 + 32))
    {
      if (((*(void *)(v8 + 56 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_17;
      }
      if (*(_DWORD *)(v8 + 36) != v13) {
        goto LABEL_18;
      }
      char v32 = v15;
      uint64_t v16 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      uint64_t v33 = v10;
      unint64_t v20 = *(void *)(v10 + 16);
      unint64_t v19 = *(void *)(v10 + 24);
      swift_bridgeObjectRetain();
      if (v20 >= v19 >> 1)
      {
        v28(v19 > 1, v20 + 1, 1);
        uint64_t v10 = v33;
      }
      *(void *)(v10 + 16) = v20 + 1;
      unint64_t v21 = v10 + 24 * v20;
      *(void *)(v21 + 32) = v18;
      *(void *)(v21 + 40) = v17;
      *(unsigned char *)(v21 + 48) = v31;
      int64_t v22 = sub_2289C6874(v11, v13, v32 & 1, v8);
      int64_t v11 = v22;
      int v13 = v23;
      char v15 = v24 & 1;
      if (!--v9)
      {
        sub_2289C8D9C(v22, v23, v15);
        swift_bridgeObjectRelease();
        a4 = v29;
        a5 = v30;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
LABEL_12:
    if (*(void *)(v10 + 16))
    {
      sub_228952BB0(a4);
      uint64_t v25 = sub_2289DF3B0();
    }
    else
    {
      uint64_t v25 = MEMORY[0x263F8EE80];
    }
    uint64_t v33 = v25;
    uint64_t v26 = swift_bridgeObjectRetain();
    a5(v26, 1, &v33);
    swift_bridgeObjectRelease();
    return v33;
  }
  return result;
}

uint64_t MCatalogService.fetch(adamID:relationships:views:additionalParameters:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 128) = a5;
  *(void *)(v7 + 136) = v6;
  *(void *)(v7 + 112) = a3;
  *(void *)(v7 + 120) = a4;
  *(void *)(v7 + 96) = a1;
  *(void *)(v7 + 104) = a2;
  uint64_t v8 = *(void *)(a6 + 8);
  *(void *)(v7 + 144) = *(void *)a6;
  *(void *)(v7 + 152) = v8;
  *(_DWORD *)(v7 + 92) = *(_DWORD *)(a6 + 16);
  return MEMORY[0x270FA2498](sub_2289C4AAC, 0, 0);
}

uint64_t sub_2289C4AAC()
{
  int v1 = *(_DWORD *)(v0 + 92);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v4 = *(void **)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v7 = v4[5];
  uint64_t v8 = v4[6];
  sub_22895598C(v4 + 2, v7);
  sub_228952BB0(&qword_268284278);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2289E0340;
  *(void *)(inited + 32) = v6;
  *(void *)(inited + 40) = v5;
  *(unsigned char *)(inited + 48) = 6;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_22898AE2C(inited);
  *(void *)(v0 + 72) = v3;
  *(void *)(v0 + 160) = v10;
  *(void *)(v0 + 80) = v2;
  *(_DWORD *)(v0 + 88) = v1;
  uint64_t v17 = (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 + 8) + **(int **)(v8 + 8));
  int64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v11;
  uint64_t v12 = type metadata accessor for MResource();
  *int64_t v11 = v0;
  v11[1] = sub_2289C4C50;
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 112);
  return v17(v10, v15, v13, v14, v0 + 72, v12, v7, v8);
}

uint64_t sub_2289C4C50(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 176) = a1;
  *(void *)(v3 + 184) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v4 = sub_2289C4D84;
  }
  else {
    uint64_t v4 = sub_2289C3A40;
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t sub_2289C4D84()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2289C4D9C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v19 = *a1;
  uint64_t result = MEMORY[0x263F8EE88];
  uint64_t v21 = MEMORY[0x263F8EE88];
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = (unint64_t *)(a2 + 40);
    unint64_t v6 = 0x268283000uLL;
    do
    {
      uint64_t v7 = *(v5 - 1);
      unint64_t v8 = *v5;
      uint64_t v9 = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v10 = sub_2289BC444(v7, v8, v9);
      swift_bridgeObjectRelease();
      if (v10)
      {
        if (*(void *)(v6 + 3752) != -1) {
          swift_once();
        }
        uint64_t v11 = sub_2289DEA10();
        sub_228952BF4(v11, (uint64_t)qword_268284C08);
        os_log_type_t v12 = sub_2289DF090();
        swift_bridgeObjectRetain();
        uint64_t v13 = sub_2289DE9F0();
        if (os_log_type_enabled(v13, v12))
        {
          unint64_t v14 = v6;
          uint64_t v15 = swift_slowAlloc();
          uint64_t v16 = swift_slowAlloc();
          uint64_t v20 = v16;
          *(_DWORD *)uint64_t v15 = 136315394;
          swift_bridgeObjectRetain();
          *(void *)(v15 + 4) = sub_22897ACBC(v7, v8, &v20);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v15 + 12) = 2080;
          unint64_t v17 = 0xEB00000000736B6FLL;
          uint64_t v18 = 0x6F622D6F69647561;
          switch(v19)
          {
            case 1:
              unint64_t v17 = 0x80000002289E5C70;
              uint64_t v18 = 0xD000000000000011;
              break;
            case 2:
              unint64_t v17 = 0xE700000000000000;
              uint64_t v18 = 0x73726F68747561;
              break;
            case 3:
              unint64_t v17 = 0xE500000000000000;
              uint64_t v18 = 0x736B6F6F62;
              break;
            case 4:
              uint64_t v18 = 0x7265732D6B6F6F62;
              unint64_t v17 = 0xEB00000000736569;
              break;
            case 5:
              unint64_t v17 = 0xE600000000000000;
              uint64_t v18 = 0x7365726E6567;
              break;
            case 6:
              unint64_t v17 = 0xE90000000000003ELL;
              uint64_t v18 = 0x6E776F6E6B6E753CLL;
              break;
            default:
              break;
          }
          *(void *)(v15 + 14) = sub_22897ACBC(v18, v17, &v20);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_22894E000, v13, v12, "Duplicate id %s found for resource type: %s", (uint8_t *)v15, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x22A6A29E0](v16, -1, -1);
          MEMORY[0x22A6A29E0](v15, -1, -1);

          unint64_t v6 = v14;
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        sub_228952FEC(&v20, v7, v8);
        swift_bridgeObjectRelease();
      }
      v5 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v21;
  }
  return result;
}

void sub_2289C50F0()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    uint64_t v2 = sub_2289DEBC0();
    unint64_t v4 = v3;
  }
  else
  {
    unint64_t v4 = 0x80000002289E5780;
    uint64_t v2 = 0xD000000000000010;
  }
  qword_268284BF8 = v2;
  unk_268284C00 = v4;
}

uint64_t static Logger.bundleIdentifier.getter()
{
  if (qword_268283EA0 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_268284BF8;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_2289C51FC()
{
  uint64_t v0 = sub_2289DEA10();
  sub_228961850(v0, qword_268284C08);
  sub_228952BF4(v0, (uint64_t)qword_268284C08);
  if (qword_268283EA0 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return sub_2289DEA00();
}

uint64_t static Logger.catalogService.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_268283EA8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_2289DEA10();
  uint64_t v3 = sub_228952BF4(v2, (uint64_t)qword_268284C08);
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_2289C5368(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = v2[3];
  uint64_t v5 = v2[5];
  uint64_t v11 = v2[4];
  uint64_t v6 = v2[6];
  uint64_t v7 = v2[7];
  uint64_t v8 = v2[8];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_228974080;
  return sub_2289C1E50(a1, a2, v12, v11, v5, v6, v7, v8);
}

void sub_2289C5468(uint64_t a1, char a2, void *a3)
{
  LOBYTE(v4) = a2;
  uint64_t v6 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_23;
  }
  LOBYTE(v7) = *(unsigned char *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_23;
  }
  char v10 = (void *)*a3;
  unint64_t v11 = sub_2289D7094(v9, v8);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  BOOL v15 = __OFADD__(v13, v14);
  uint64_t v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v17 = v12;
  if (v10[3] < v16)
  {
    sub_2289978C4(v16, v4 & 1);
    unint64_t v11 = sub_2289D7094(v9, v8);
    if ((v17 & 1) == (v18 & 1)) {
      goto LABEL_8;
    }
LABEL_6:
    unint64_t v11 = sub_2289DF500();
    __break(1u);
  }
  if (v4)
  {
LABEL_8:
    if (v17) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  unint64_t v21 = v11;
  sub_228998E84();
  unint64_t v11 = v21;
  if (v17)
  {
LABEL_9:
    uint64_t v19 = (void *)swift_allocError();
    swift_willThrow();
    id v20 = v19;
    sub_228952BB0(&qword_268284630);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
LABEL_12:
  int64_t v22 = (void *)*a3;
  *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  uint64_t v23 = (uint64_t *)(v22[6] + 16 * v11);
  *uint64_t v23 = v9;
  v23[1] = v8;
  *(unsigned char *)(v22[7] + v11) = v7;
  uint64_t v24 = v22[2];
  BOOL v15 = __OFADD__(v24, 1);
  uint64_t v25 = v24 + 1;
  if (v15)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    sub_2289DF250();
    sub_2289DEC90();
    sub_2289DF320();
    sub_2289DEC90();
    sub_2289DF340();
    __break(1u);
    return;
  }
  _OWORD v22[2] = v25;
  if (v6 != 1)
  {
    unint64_t v4 = (unsigned char *)(a1 + 72);
    unint64_t v7 = 1;
    while (v7 < *(void *)(a1 + 16))
    {
      char v26 = *v4;
      uint64_t v9 = *((void *)v4 - 2);
      uint64_t v8 = *((void *)v4 - 1);
      swift_bridgeObjectRetain();
      if (!v8) {
        goto LABEL_23;
      }
      uint64_t v27 = (void *)*a3;
      unint64_t v28 = sub_2289D7094(v9, v8);
      uint64_t v30 = v27[2];
      BOOL v31 = (v29 & 1) == 0;
      BOOL v15 = __OFADD__(v30, v31);
      uint64_t v32 = v30 + v31;
      if (v15) {
        goto LABEL_25;
      }
      char v17 = v29;
      if (v27[3] < v32)
      {
        sub_2289978C4(v32, 1);
        unint64_t v28 = sub_2289D7094(v9, v8);
        if ((v17 & 1) != (v33 & 1)) {
          goto LABEL_6;
        }
      }
      if (v17) {
        goto LABEL_9;
      }
      uint64_t v34 = (void *)*a3;
      *(void *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      char v35 = (uint64_t *)(v34[6] + 16 * v28);
      uint64_t *v35 = v9;
      v35[1] = v8;
      *(unsigned char *)(v34[7] + v28) = v26;
      uint64_t v36 = v34[2];
      BOOL v15 = __OFADD__(v36, 1);
      uint64_t v37 = v36 + 1;
      if (v15) {
        goto LABEL_26;
      }
      ++v7;
      _OWORD v34[2] = v37;
      v4 += 24;
      if (v6 == v7) {
        goto LABEL_23;
      }
    }
    goto LABEL_27;
  }
LABEL_23:
  swift_bridgeObjectRelease_n();
}

void sub_2289C57F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v52 = v8;
  uint64_t v53 = 0;
  uint64_t v54 = v11 & v9;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_2289C6970((uint64_t)&v47);
  uint64_t v12 = v48;
  if (!v48) {
    goto LABEL_23;
  }
  uint64_t v13 = v47;
  char v46 = v49;
  BOOL v14 = (void *)*a5;
  unint64_t v16 = sub_2289D7094(v47, v48);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v20 = v15;
  if (v14[3] >= v19)
  {
    if (a4)
    {
      if ((v15 & 1) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      sub_228999030();
      if ((v20 & 1) == 0) {
        goto LABEL_15;
      }
    }
LABEL_12:
    sub_228973FB0();
    uint64_t v23 = (void *)swift_allocError();
    *uint64_t v24 = 7;
    swift_willThrow();
    id v57 = v23;
    id v25 = v23;
    sub_228952BB0(&qword_268284630);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_22898D2D0();
      swift_release();

      return;
    }
    goto LABEL_28;
  }
  sub_228997BD0(v19, a4 & 1);
  unint64_t v21 = sub_2289D7094(v13, v12);
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_27:
    sub_2289DF500();
    __break(1u);
LABEL_28:
    sub_2289DF250();
    sub_2289DEC90();
    sub_2289DF320();
    sub_2289DEC90();
    sub_2289DF340();
    __break(1u);
    return;
  }
  unint64_t v16 = v21;
  if (v20) {
    goto LABEL_12;
  }
LABEL_15:
  char v26 = (void *)*a5;
  *(void *)(*a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
  uint64_t v27 = (uint64_t *)(v26[6] + 16 * v16);
  *uint64_t v27 = v13;
  v27[1] = v12;
  *(unsigned char *)(v26[7] + v16) = v46;
  uint64_t v28 = v26[2];
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  _OWORD v26[2] = v30;
  sub_2289C6970((uint64_t)&v47);
  for (uint64_t i = v48; v48; uint64_t i = v48)
  {
    uint64_t v32 = v47;
    char v33 = v49;
    uint64_t v34 = (void *)*a5;
    unint64_t v35 = sub_2289D7094(v47, i);
    uint64_t v37 = v34[2];
    BOOL v38 = (v36 & 1) == 0;
    BOOL v29 = __OFADD__(v37, v38);
    uint64_t v39 = v37 + v38;
    if (v29) {
      goto LABEL_25;
    }
    char v40 = v36;
    if (v34[3] < v39)
    {
      sub_228997BD0(v39, 1);
      unint64_t v35 = sub_2289D7094(v32, i);
      if ((v40 & 1) != (v41 & 1)) {
        goto LABEL_27;
      }
    }
    if (v40) {
      goto LABEL_12;
    }
    char v42 = (void *)*a5;
    *(void *)(*a5 + 8 * (v35 >> 6) + 64) |= 1 << v35;
    uint64_t v43 = (uint64_t *)(v42[6] + 16 * v35);
    *uint64_t v43 = v32;
    v43[1] = i;
    *(unsigned char *)(v42[7] + v35) = v33;
    uint64_t v44 = v42[2];
    BOOL v29 = __OFADD__(v44, 1);
    uint64_t v45 = v44 + 1;
    if (v29) {
      goto LABEL_26;
    }
    v42[2] = v45;
    sub_2289C6970((uint64_t)&v47);
  }
LABEL_23:
  swift_release();
  swift_bridgeObjectRelease();
  sub_22898D2D0();
  swift_release();
}

void sub_2289C5BF4(uint64_t a1, char a2, void *a3)
{
  LOBYTE(v4) = a2;
  uint64_t v6 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_23;
  }
  LOBYTE(v7) = *(unsigned char *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v10 = (void *)*a3;
  unint64_t v11 = sub_2289D7094(v9, v8);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  BOOL v15 = __OFADD__(v13, v14);
  uint64_t v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v17 = v12;
  if (v10[3] < v16)
  {
    sub_228997BD0(v16, v4 & 1);
    unint64_t v11 = sub_2289D7094(v9, v8);
    if ((v17 & 1) == (v18 & 1)) {
      goto LABEL_8;
    }
LABEL_6:
    unint64_t v11 = sub_2289DF500();
    __break(1u);
  }
  if (v4)
  {
LABEL_8:
    if (v17) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  unint64_t v21 = v11;
  sub_228999030();
  unint64_t v11 = v21;
  if (v17)
  {
LABEL_9:
    uint64_t v19 = (void *)swift_allocError();
    swift_willThrow();
    id v20 = v19;
    sub_228952BB0(&qword_268284630);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
LABEL_12:
  char v22 = (void *)*a3;
  *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  uint64_t v23 = (uint64_t *)(v22[6] + 16 * v11);
  *uint64_t v23 = v9;
  v23[1] = v8;
  *(unsigned char *)(v22[7] + v11) = v7;
  uint64_t v24 = v22[2];
  BOOL v15 = __OFADD__(v24, 1);
  uint64_t v25 = v24 + 1;
  if (v15)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    sub_2289DF250();
    sub_2289DEC90();
    sub_2289DF320();
    sub_2289DEC90();
    sub_2289DF340();
    __break(1u);
    return;
  }
  _OWORD v22[2] = v25;
  if (v6 != 1)
  {
    unint64_t v4 = (unsigned char *)(a1 + 72);
    unint64_t v7 = 1;
    while (v7 < *(void *)(a1 + 16))
    {
      char v26 = *v4;
      uint64_t v9 = *((void *)v4 - 2);
      uint64_t v8 = *((void *)v4 - 1);
      swift_bridgeObjectRetain();
      if (!v8) {
        goto LABEL_23;
      }
      uint64_t v27 = (void *)*a3;
      unint64_t v28 = sub_2289D7094(v9, v8);
      uint64_t v30 = v27[2];
      BOOL v31 = (v29 & 1) == 0;
      BOOL v15 = __OFADD__(v30, v31);
      uint64_t v32 = v30 + v31;
      if (v15) {
        goto LABEL_25;
      }
      char v17 = v29;
      if (v27[3] < v32)
      {
        sub_228997BD0(v32, 1);
        unint64_t v28 = sub_2289D7094(v9, v8);
        if ((v17 & 1) != (v33 & 1)) {
          goto LABEL_6;
        }
      }
      if (v17) {
        goto LABEL_9;
      }
      uint64_t v34 = (void *)*a3;
      *(void *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      unint64_t v35 = (uint64_t *)(v34[6] + 16 * v28);
      uint64_t *v35 = v9;
      v35[1] = v8;
      *(unsigned char *)(v34[7] + v28) = v26;
      uint64_t v36 = v34[2];
      BOOL v15 = __OFADD__(v36, 1);
      uint64_t v37 = v36 + 1;
      if (v15) {
        goto LABEL_26;
      }
      ++v7;
      _OWORD v34[2] = v37;
      v4 += 24;
      if (v6 == v7) {
        goto LABEL_23;
      }
    }
    goto LABEL_27;
  }
LABEL_23:
  swift_bridgeObjectRelease_n();
}

void *sub_2289C5F80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_228952BB0(&qword_268284248);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_2289C6238((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_22898D2D0();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t sub_2289C6068(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  sub_228952BB0(&qword_2682842C8);
  uint64_t v3 = swift_allocObject();
  size_t v4 = j__malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * v4 - 64;
  uint64_t v5 = sub_2289C6438(&v7, (unsigned char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_22898D2D0();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x263F8EE78];
  }
  return v3;
}

void *sub_2289C6140(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_228952BB0(&qword_268284D18);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = j__malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  uint64_t v5 = sub_2289C65CC((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_22898D2D0();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t sub_2289C6238(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    _OWORD v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    id v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_2289C6438(void *result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(unsigned char *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_2289C65CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    _OWORD v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    id v20 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    LOBYTE(v20) = *(unsigned char *)(*(void *)(a4 + 56) + v16);
    *(void *)uint64_t v11 = v22;
    *(void *)(v11 + 8) = v21;
    *(unsigned char *)(v11 + 16) = (_BYTE)v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 24;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_2289C67D4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_2289C6874(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2289C6958@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  *(unsigned char *)(a2 + 16) = *((unsigned char *)a1 + 16);
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2289C6970@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  int64_t v6 = v5;
  if (!v4)
  {
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v16 = (unint64_t)(v1[2] + 64) >> 6;
    if (v15 < v16)
    {
      uint64_t v17 = v1[1];
      unint64_t v18 = *(void *)(v17 + 8 * v15);
      if (v18)
      {
LABEL_9:
        uint64_t v7 = (v18 - 1) & v18;
        unint64_t v8 = __clz(__rbit64(v18)) + (v15 << 6);
        int64_t v6 = v15;
        goto LABEL_3;
      }
      int64_t v19 = v5 + 2;
      int64_t v6 = v5 + 1;
      if (v5 + 2 < v16)
      {
        unint64_t v18 = *(void *)(v17 + 8 * v19);
        if (v18)
        {
LABEL_12:
          int64_t v15 = v19;
          goto LABEL_9;
        }
        int64_t v6 = v5 + 2;
        if (v5 + 3 < v16)
        {
          unint64_t v18 = *(void *)(v17 + 8 * (v5 + 3));
          if (v18)
          {
            int64_t v15 = v5 + 3;
            goto LABEL_9;
          }
          int64_t v19 = v5 + 4;
          int64_t v6 = v5 + 3;
          if (v5 + 4 < v16)
          {
            unint64_t v18 = *(void *)(v17 + 8 * v19);
            if (v18) {
              goto LABEL_12;
            }
            int64_t v15 = v5 + 5;
            int64_t v6 = v5 + 4;
            if (v5 + 5 < v16)
            {
              unint64_t v18 = *(void *)(v17 + 8 * v15);
              if (v18) {
                goto LABEL_9;
              }
              int64_t v6 = v16 - 1;
              int64_t v20 = v5 + 6;
              while (v16 != v20)
              {
                unint64_t v18 = *(void *)(v17 + 8 * v20++);
                if (v18)
                {
                  int64_t v15 = v20 - 1;
                  goto LABEL_9;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    return result;
  }
  uint64_t v7 = (v4 - 1) & v4;
  unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
  unint64_t v9 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  char v12 = *(unsigned char *)(*(void *)(v3 + 56) + v8);
  v1[3] = v6;
  v1[4] = v7;
  uint64_t v13 = (void (*)(void *))v1[5];
  v21[0] = v10;
  v21[1] = v11;
  char v22 = v12;
  swift_bridgeObjectRetain();
  v13(v21);

  return swift_bridgeObjectRelease();
}

uint64_t sub_2289C6B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 16) = a1;
  int64_t v15 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v15;
  void *v15 = v8;
  v15[1] = sub_2289C93FC;
  return sub_2289BCB84(a2, a3, a4, a5, a6, a7, a8, v19);
}

void sub_2289C6C0C()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_228974080;
  uint64_t v2 = (char *)&dword_268284C48 + dword_268284C48;
  __asm { BR              X9; sub_2289C6B0C }
}

uint64_t sub_2289C6D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(v8 + 36) = v12;
  *(void *)(v8 + 88) = v10;
  *(void *)(v8 + 96) = v11;
  *(void *)(v8 + 72) = a7;
  *(void *)(v8 + 80) = a8;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 40) = a1;
  *(void *)(v8 + 48) = a4;
  return MEMORY[0x270FA2498](sub_2289C6D50, 0, 0);
}

uint64_t sub_2289C6D50()
{
  sub_2289DEF30();
  int v1 = *(_DWORD *)(v0 + 36);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  unint64_t v4 = *(void **)(v0 + 48);
  uint64_t v5 = v4[5];
  uint64_t v6 = v4[6];
  sub_22895598C(v4 + 2, v5);
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(_DWORD *)(v0 + 32) = v1;
  int64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 8) + **(int **)(v6 + 8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  uint64_t v8 = type metadata accessor for MAsset();
  *uint64_t v7 = v0;
  v7[1] = sub_2289C6EE4;
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v11 = *(void *)(v0 + 56);
  uint64_t v12 = *(void *)(v0 + 64);
  return v14(v11, v12, v9, v10, v0 + 16, v8, v5, v6);
}

uint64_t sub_2289C6EE4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_2289C9400;
  }
  else
  {
    *(void *)(v4 + 120) = a1;
    uint64_t v5 = sub_2289C93F4;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_2289C700C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 16) = a1;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v15;
  void *v15 = v8;
  v15[1] = sub_2289C93FC;
  return sub_2289BDBF4(a2, a3, a4, a5, a6, a7, a8, v19);
}

void sub_2289C710C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_228974080;
  uint64_t v2 = (char *)&dword_268284C70 + dword_268284C70;
  __asm { BR              X9; sub_2289C700C }
}

uint64_t sub_2289C7214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(v8 + 36) = v12;
  *(void *)(v8 + 88) = v10;
  *(void *)(v8 + 96) = v11;
  *(void *)(v8 + 72) = a7;
  *(void *)(v8 + 80) = a8;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 40) = a1;
  *(void *)(v8 + 48) = a4;
  return MEMORY[0x270FA2498](sub_2289C7250, 0, 0);
}

uint64_t sub_2289C7250()
{
  sub_2289DEF30();
  int v1 = *(_DWORD *)(v0 + 36);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v4 = *(void **)(v0 + 48);
  uint64_t v5 = v4[5];
  uint64_t v6 = v4[6];
  sub_22895598C(v4 + 2, v5);
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(_DWORD *)(v0 + 32) = v1;
  int64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 8) + **(int **)(v6 + 8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  uint64_t v8 = type metadata accessor for MAuthor();
  *uint64_t v7 = v0;
  v7[1] = sub_2289C6EE4;
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v11 = *(void *)(v0 + 56);
  uint64_t v12 = *(void *)(v0 + 64);
  return v14(v11, v12, v9, v10, v0 + 16, v8, v5, v6);
}

uint64_t sub_2289C73E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 16) = a1;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v15;
  void *v15 = v8;
  v15[1] = sub_2289C93FC;
  return sub_2289BEC64(a2, a3, a4, a5, a6, a7, a8, v19);
}

void sub_2289C74E4()
{
  int v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *int v1 = v0;
  v1[1] = sub_228974080;
  uint64_t v2 = (char *)&dword_268284C90 + dword_268284C90;
  __asm { BR              X9; sub_2289C73E4 }
}

uint64_t sub_2289C75EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(v8 + 36) = v12;
  *(void *)(v8 + 88) = v10;
  *(void *)(v8 + 96) = v11;
  *(void *)(v8 + 72) = a7;
  *(void *)(v8 + 80) = a8;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 40) = a1;
  *(void *)(v8 + 48) = a4;
  return MEMORY[0x270FA2498](sub_2289C7628, 0, 0);
}

uint64_t sub_2289C7628()
{
  sub_2289DEF30();
  int v1 = *(_DWORD *)(v0 + 36);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v4 = *(void **)(v0 + 48);
  uint64_t v5 = v4[5];
  uint64_t v6 = v4[6];
  sub_22895598C(v4 + 2, v5);
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(_DWORD *)(v0 + 32) = v1;
  int64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 8) + **(int **)(v6 + 8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  uint64_t v8 = type metadata accessor for MGenre();
  *uint64_t v7 = v0;
  v7[1] = sub_2289C6EE4;
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v11 = *(void *)(v0 + 56);
  uint64_t v12 = *(void *)(v0 + 64);
  return v14(v11, v12, v9, v10, v0 + 16, v8, v5, v6);
}

uint64_t sub_2289C77BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 16) = a1;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v15;
  void *v15 = v8;
  v15[1] = sub_2289C93FC;
  return sub_2289BFCD4(a2, a3, a4, a5, a6, a7, a8, v19);
}

void sub_2289C78BC()
{
  int v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *int v1 = v0;
  v1[1] = sub_228974080;
  uint64_t v2 = (char *)&dword_268284CB0 + dword_268284CB0;
  __asm { BR              X9; sub_2289C77BC }
}

uint64_t sub_2289C79C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(v8 + 36) = v12;
  *(void *)(v8 + 88) = v10;
  *(void *)(v8 + 96) = v11;
  *(void *)(v8 + 72) = a7;
  *(void *)(v8 + 80) = a8;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 40) = a1;
  *(void *)(v8 + 48) = a4;
  return MEMORY[0x270FA2498](sub_2289C7A00, 0, 0);
}

uint64_t sub_2289C7A00()
{
  sub_2289DEF30();
  int v1 = *(_DWORD *)(v0 + 36);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v4 = *(void **)(v0 + 48);
  uint64_t v5 = v4[5];
  uint64_t v6 = v4[6];
  sub_22895598C(v4 + 2, v5);
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(_DWORD *)(v0 + 32) = v1;
  int64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 8) + **(int **)(v6 + 8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  uint64_t v8 = type metadata accessor for MSeries();
  *uint64_t v7 = v0;
  v7[1] = sub_2289C6EE4;
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v11 = *(void *)(v0 + 56);
  uint64_t v12 = *(void *)(v0 + 64);
  return v14(v11, v12, v9, v10, v0 + 16, v8, v5, v6);
}

uint64_t sub_2289C7B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 16) = a1;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v15;
  void *v15 = v8;
  v15[1] = sub_2289C7C94;
  return sub_2289C0D44(a2, a3, a4, a5, a6, a7, a8, v19);
}

uint64_t sub_2289C7C94(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

void sub_2289C7DA4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_228973B58;
  uint64_t v2 = (char *)&dword_268284CD0 + dword_268284CD0;
  __asm { BR              X9; sub_2289C7B94 }
}

uint64_t destroy for MCatalogService(uint64_t a1)
{
  return sub_2289559D0(a1 + 16);
}

uint64_t initializeWithCopy for MCatalogService(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = a2 + 16;
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  id v9 = v3;
  v8(v4, v5, v7);
  return a1;
}

uint64_t assignWithCopy for MCatalogService(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  id v6 = v5;

  sub_228963660((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  return a1;
}

__n128 initializeWithTake for MCatalogService(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MCatalogService(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  sub_2289559D0(a1 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for MCatalogService(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MCatalogService(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MCatalogService()
{
  return &type metadata for MCatalogService;
}

uint64_t getEnumTagSinglePayload for MCatalogService.FetchError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF8)
  {
    unsigned int v2 = a2 + 8;
    if (a2 + 8 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 8;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 8;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2289C8198);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 8;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 6) {
    unsigned int v8 = v7 - 5;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 4) {
    return v8 - 3;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for MCatalogService.FetchError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 8;
  if (a3 + 8 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xF8) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v7 = ((a2 - 248) >> 8) + 1;
    *__n128 result = a2 + 8;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x2289C8280);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *__n128 result = a2 + 8;
        break;
    }
  }
  return result;
}

uint64_t sub_2289C82A8(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 6) {
    return v1 - 5;
  }
  else {
    return 0;
  }
}

unsigned char *sub_2289C82BC(unsigned char *result, int a2)
{
  if (a2) {
    *__n128 result = a2 + 5;
  }
  return result;
}

ValueMetadata *type metadata accessor for MCatalogService.FetchError()
{
  return &type metadata for MCatalogService.FetchError;
}

uint64_t sub_2289C82DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(v8 + 36) = v12;
  *(void *)(v8 + 88) = v10;
  *(void *)(v8 + 96) = v11;
  *(void *)(v8 + 72) = a7;
  *(void *)(v8 + 80) = a8;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 40) = a1;
  *(void *)(v8 + 48) = a4;
  return MEMORY[0x270FA2498](sub_2289C8318, 0, 0);
}

uint64_t sub_2289C8318()
{
  sub_2289DEF30();
  int v1 = *(_DWORD *)(v0 + 36);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  int v4 = *(void **)(v0 + 48);
  uint64_t v5 = v4[5];
  uint64_t v6 = v4[6];
  sub_22895598C(v4 + 2, v5);
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(_DWORD *)(v0 + 32) = v1;
  int64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 8) + **(int **)(v6 + 8));
  unsigned int v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  uint64_t v8 = type metadata accessor for MResource();
  *unsigned int v7 = v0;
  v7[1] = sub_2289C84AC;
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v11 = *(void *)(v0 + 56);
  uint64_t v12 = *(void *)(v0 + 64);
  return v14(v11, v12, v9, v10, v0 + 16, v8, v5, v6);
}

uint64_t sub_2289C84AC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_2289C85F8;
  }
  else
  {
    *(void *)(v4 + 120) = a1;
    uint64_t v5 = sub_2289C85D4;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_2289C85D4()
{
  **(void **)(v0 + 40) = *(void *)(v0 + 120);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2289C85F8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2289C8610(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a3;
  int64_t v7 = a1;
  int64_t v8 = 0;
  int64_t v9 = a1;
  while (1)
  {
    BOOL v10 = v9 <= a2;
    if (a3 > 0) {
      BOOL v10 = v9 >= a2;
    }
    if (v10) {
      break;
    }
    BOOL v11 = __OFADD__(v9, a3);
    v9 += a3;
    if (v11) {
      int64_t v9 = (v9 >> 63) ^ 0x8000000000000000;
    }
    BOOL v11 = __OFADD__(v8++, 1);
    if (v11)
    {
      __break(1u);
      break;
    }
  }
  uint64_t v44 = MEMORY[0x263F8EE78];
  sub_22896C528(0, v8, 0);
  uint64_t result = v44;
  if (v8)
  {
    uint64_t v40 = *(void *)(a5 + 16);
    int64_t v13 = a2;
    while (1)
    {
      BOOL v14 = v7 <= v13;
      if (v6 > 0) {
        BOOL v14 = v7 >= v13;
      }
      if (v14) {
        break;
      }
      if (__OFADD__(v7, v6)) {
        int64_t v15 = ((v7 + v6) >> 63) ^ 0x8000000000000000;
      }
      else {
        int64_t v15 = v7 + v6;
      }
      if (__OFADD__(v7, a4)) {
        goto LABEL_72;
      }
      if (v40 >= v7 + a4) {
        uint64_t v16 = v7 + a4;
      }
      else {
        uint64_t v16 = v40;
      }
      uint64_t v17 = v16 - v7;
      if (v16 < v7) {
        goto LABEL_73;
      }
      if (v7 < 0) {
        goto LABEL_74;
      }
      uint64_t v43 = result;
      uint64_t v18 = v6;
      sub_2289DF4A0();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      uint64_t v19 = swift_dynamicCastClass();
      if (!v19)
      {
        swift_bridgeObjectRelease();
        uint64_t v19 = MEMORY[0x263F8EE78];
      }
      uint64_t v20 = *(void *)(v19 + 16);
      swift_release();
      if (v20 == v17)
      {
        uint64_t v21 = (void *)swift_dynamicCastClass();
        uint64_t v6 = v18;
        int64_t v13 = a2;
        if (!v21)
        {
          swift_bridgeObjectRelease();
          uint64_t v21 = (void *)MEMORY[0x263F8EE78];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v21 = (void *)MEMORY[0x263F8EE78];
        uint64_t v6 = v18;
        int64_t v13 = a2;
        if (v16 != v7)
        {
          if (v17 < 1)
          {
            if (v17 < 0) {
              goto LABEL_78;
            }
          }
          else
          {
            sub_228952BB0(&qword_268284D18);
            uint64_t v21 = (void *)swift_allocObject();
            size_t v24 = j__malloc_size(v21);
            void v21[2] = v17;
            void v21[3] = 2 * ((uint64_t)(v24 - 32) / 24);
          }
          unint64_t v25 = a5 + 32 + 24 * v7;
          if (v25 < (unint64_t)&v21[3 * v17 + 4] && (unint64_t)(v21 + 4) < v25 + 24 * v17) {
            goto LABEL_78;
          }
          sub_228952BB0(&qword_268284D00);
          swift_arrayInitWithCopy();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t result = v43;
      unint64_t v23 = *(void *)(v43 + 16);
      unint64_t v22 = *(void *)(v43 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_22896C528(v22 > 1, v23 + 1, 1);
        int64_t v13 = a2;
        uint64_t result = v43;
      }
      *(void *)(result + 16) = v23 + 1;
      *(void *)(result + 8 * v23 + 32) = v21;
      int64_t v7 = v15;
      if (!--v8) {
        goto LABEL_41;
      }
    }
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
  }
  else
  {
    int64_t v15 = v7;
    int64_t v13 = a2;
LABEL_41:
    BOOL v26 = v15 <= v13;
    if (v6 > 0) {
      BOOL v26 = v15 >= v13;
    }
    if (v26) {
      return result;
    }
    while (1)
    {
      int64_t v27 = __OFADD__(v15, v6) ? ((v15 + v6) >> 63) ^ 0x8000000000000000 : v15 + v6;
      if (__OFADD__(v15, a4)) {
        break;
      }
      if (*(void *)(a5 + 16) >= v15 + a4) {
        uint64_t v28 = v15 + a4;
      }
      else {
        uint64_t v28 = *(void *)(a5 + 16);
      }
      uint64_t v29 = v28 - v15;
      if (v28 < v15) {
        goto LABEL_76;
      }
      if (v15 < 0) {
        goto LABEL_77;
      }
      uint64_t v30 = result;
      sub_2289DF4A0();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      uint64_t v31 = swift_dynamicCastClass();
      if (!v31)
      {
        swift_bridgeObjectRelease();
        uint64_t v31 = MEMORY[0x263F8EE78];
      }
      uint64_t v32 = *(void *)(v31 + 16);
      swift_release();
      if (v32 == v29)
      {
        char v33 = (void *)swift_dynamicCastClass();
        if (!v33)
        {
          swift_bridgeObjectRelease();
          char v33 = (void *)MEMORY[0x263F8EE78];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        char v33 = (void *)MEMORY[0x263F8EE78];
        if (v28 != v15)
        {
          if (v29 < 1)
          {
            if (v29 < 0) {
              goto LABEL_78;
            }
          }
          else
          {
            sub_228952BB0(&qword_268284D18);
            char v33 = (void *)swift_allocObject();
            size_t v38 = j__malloc_size(v33);
            _OWORD v33[2] = v29;
            v33[3] = 2 * ((uint64_t)(v38 - 32) / 24);
          }
          unint64_t v39 = a5 + 32 + 24 * v15;
          if (v39 < (unint64_t)&v33[3 * v29 + 4] && (unint64_t)(v33 + 4) < v39 + 24 * v29) {
            goto LABEL_78;
          }
          sub_228952BB0(&qword_268284D00);
          swift_arrayInitWithCopy();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t result = v30;
      uint64_t v45 = v30;
      unint64_t v35 = *(void *)(v30 + 16);
      unint64_t v34 = *(void *)(v30 + 24);
      int64_t v36 = a2;
      if (v35 >= v34 >> 1)
      {
        sub_22896C528(v34 > 1, v35 + 1, 1);
        int64_t v36 = a2;
        uint64_t result = v45;
      }
      *(void *)(result + 16) = v35 + 1;
      *(void *)(result + 8 * v35 + 32) = v33;
      BOOL v37 = v27 <= v36;
      if (v6 > 0) {
        BOOL v37 = v27 >= v36;
      }
      int64_t v15 = v27;
      if (v37) {
        return result;
      }
    }
  }
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  uint64_t result = sub_2289DF3C0();
  __break(1u);
  return result;
}

uint64_t sub_2289C8B8C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_2289C8BC8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_228974080;
  uint64_t v2 = (char *)&dword_268284D08 + dword_268284D08;
  __asm { BR              X9; sub_2289C82DC }
}

uint64_t sub_2289C8CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_228952BB0(&qword_268284CF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2289C8D3C(uint64_t a1)
{
  uint64_t v2 = sub_228952BB0(&qword_268284CF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2289C8D9C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_2289C8DAC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_228974080;
  uint64_t v2 = (char *)&dword_268284D30 + dword_268284D30;
  __asm { BR              X9; sub_2289C79C4 }
}

void sub_2289C8EBC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_228974080;
  uint64_t v2 = (char *)&dword_268284D50 + dword_268284D50;
  __asm { BR              X9; sub_2289C75EC }
}

void sub_2289C8FCC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_228974080;
  uint64_t v2 = (char *)&dword_268284D70 + dword_268284D70;
  __asm { BR              X9; sub_2289C7214 }
}

uint64_t sub_2289C90DC()
{
  swift_unknownObjectRelease();

  sub_2289559D0(v0 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 140, 7);
}

void sub_2289C914C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_228974080;
  uint64_t v2 = (char *)&dword_268284D90 + dword_268284D90;
  __asm { BR              X9; sub_2289C6D14 }
}

id sub_2289C9258@<X0>(void **a1@<X1>, void **a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = *a1;
  return v2;
}

uint64_t sub_2289C9288()
{
  swift_unknownObjectRelease();

  sub_2289559D0(v0 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 148, 7);
}

uint64_t sub_2289C92F8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = v1 + 40;
  long long v10 = *(_OWORD *)(v1 + 112);
  long long v11 = *(_OWORD *)(v1 + 96);
  long long v9 = *(_OWORD *)(v1 + 128);
  int v6 = *(_DWORD *)(v1 + 144);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *(void *)uint64_t v7 = v2;
  *(void *)(v7 + 8) = sub_228974080;
  *(void *)(v7 + 104) = v4;
  *(_DWORD *)(v7 + 36) = v6;
  *(_OWORD *)(v7 + 88) = v9;
  *(_OWORD *)(v7 + 72) = v10;
  *(_OWORD *)(v7 + 56) = v11;
  *(void *)(v7 + 40) = a1;
  *(void *)(v7 + 48) = v5;
  return MEMORY[0x270FA2498](sub_2289C2CB4, 0, 0);
}

uint64_t CommonLibraryAssetInfoEmbedding.author.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v5 + 52)];
  swift_bridgeObjectRetain();
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t type metadata accessor for CommonLibraryAssetInfo()
{
  uint64_t result = qword_268284DC8;
  if (!qword_268284DC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2289C9528(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CommonLibraryAssetInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CommonLibraryAssetInfoEmbedding.coverAspectRatio.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v5 + 56)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.coverURLString.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v5 + 60)];
  swift_bridgeObjectRetain();
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.dateFinished.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  long long v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  sub_22898A6C0((uint64_t)&v9[*(int *)(v7 + 64)], a3, &qword_26AECF7E0);
  return sub_2289C9528((uint64_t)v9);
}

uint64_t CommonLibraryAssetInfoEmbedding.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v5 + 68)];
  swift_bridgeObjectRetain();
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.filePath.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v5 + 72)];
  swift_bridgeObjectRetain();
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.finishedDateKind.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  long long v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  LOBYTE(a2) = v9[*(int *)(v7 + 76)];
  uint64_t result = sub_2289C9528((uint64_t)v9);
  *a3 = a2;
  return result;
}

uint64_t CommonLibraryAssetInfoEmbedding.hasSpecifiedFinishedDate.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = v7[*(int *)(v5 + 84)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.isDownloading.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = v7[*(int *)(v5 + 88)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.isExplicit.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = v7[*(int *)(v5 + 92)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.isFinished.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = v7[*(int *)(v5 + 96)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.isLocal.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = v7[*(int *)(v5 + 100)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.isManaged.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = v7[*(int *)(v5 + 104)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.isPartOfSeries.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = v7[*(int *)(v5 + 108)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.isPreorder.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = v7[*(int *)(v5 + 112)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.isPurchased.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = v7[*(int *)(v5 + 116)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.isInSamples.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = v7[*(int *)(v5 + 120)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.isSideloaded.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = v7[*(int *)(v5 + 124)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.language.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v5 + 128)];
  swift_bridgeObjectRetain();
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.lastEngagedDate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  long long v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  sub_22898A6C0((uint64_t)&v9[*(int *)(v7 + 132)], a3, &qword_26AECF7E0);
  return sub_2289C9528((uint64_t)v9);
}

uint64_t CommonLibraryAssetInfoEmbedding.rating.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v5 + 136)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

double CommonLibraryAssetInfoEmbedding.readingProgress.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  double v8 = *(double *)&v7[*(int *)(v5 + 140)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.releaseDate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  long long v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  sub_22898A6C0((uint64_t)&v9[*(int *)(v7 + 144)], a3, &qword_26AECF7E0);
  return sub_2289C9528((uint64_t)v9);
}

uint64_t CommonLibraryAssetInfoEmbedding.sequenceLabel.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v5 + 148)];
  swift_bridgeObjectRetain();
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.sequenceNumber.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v5 + 152)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.seriesSortKey.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v5 + 156)];
  sub_2289C9528((uint64_t)v7);
  return v8;
}

unint64_t CommonLibraryAssetInfoEmbedding.versionNumber.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = &v7[*(int *)(v5 + 160)];
  uint64_t v9 = *(unsigned int *)v8;
  unsigned __int8 v10 = v8[4];
  sub_2289C9528((uint64_t)v7);
  return v9 | ((unint64_t)v10 << 32);
}

uint64_t CommonLibraryAssetInfoEmbedding.assetLogID.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v7 = *v6;
  swift_bridgeObjectRetain();
  sub_2289C9528((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.collectionMemberships.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v7 = *((void *)v6 + 2);
  swift_bridgeObjectRetain();
  sub_2289C9528((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.id.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v7 = *((void *)v6 + 3);
  swift_bridgeObjectRetain();
  sub_2289C9528((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.genreNames.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v8 = *(void *)&v7[*(int *)(v5 + 80)];
  swift_bridgeObjectRetain();
  sub_2289C9528((uint64_t)v7);
  return v8;
}

uint64_t CommonLibraryAssetInfoEmbedding.sortTitle.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v7 = *((void *)v6 + 5);
  swift_bridgeObjectRetain();
  sub_2289C9528((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.storeID.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v7 = *((void *)v6 + 7);
  swift_bridgeObjectRetain();
  sub_2289C9528((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.title.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v7 = *((void *)v6 + 9);
  swift_bridgeObjectRetain();
  sub_2289C9528((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.url.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  sub_22898A6C0((uint64_t)&v9[*(int *)(v7 + 48)], a3, &qword_2682841E0);
  return sub_2289C9528((uint64_t)v9);
}

uint64_t sub_2289CAE88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_22898A6C0(v1 + *(int *)(v3 + 56), a1, &qword_26AECF7E0);
}

uint64_t sub_2289CAEC8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for CommonLibraryAssetInfo();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 68));
  return result;
}

uint64_t sub_2289CAEFC()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 76));
}

uint64_t sub_2289CAF20()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 80));
}

uint64_t sub_2289CAF44()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 84));
}

uint64_t sub_2289CAF68()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 88));
}

uint64_t sub_2289CAF8C()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 92));
}

uint64_t sub_2289CAFB0()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 96));
}

uint64_t sub_2289CAFD4()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 100));
}

uint64_t sub_2289CAFF8()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 104));
}

uint64_t sub_2289CB01C()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 108));
}

uint64_t sub_2289CB040()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 112));
}

uint64_t sub_2289CB064()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 116));
}

uint64_t sub_2289CB088@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_22898A6C0(v1 + *(int *)(v3 + 124), a1, &qword_26AECF7E0);
}

double sub_2289CB0C8()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 132));
}

uint64_t sub_2289CB0EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_22898A6C0(v1 + *(int *)(v3 + 136), a1, &qword_26AECF7E0);
}

uint64_t sub_2289CB12C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_22898A6C0(v1 + *(int *)(v3 + 40), a1, &qword_2682841E0);
}

uint64_t LibraryAssetInfo.enriched(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a4, v4, a2);
  sub_228955928(a1, (uint64_t)v9);
  return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a3 + 224))(v9, a2, a3);
}

uint64_t CommonLibraryAssetInfo.assetLogID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.collectionMemberships.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommonLibraryAssetInfo.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.sortTitle.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.storeID.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.title.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_22898A6C0(v1 + *(int *)(v3 + 40), a1, &qword_2682841E0);
}

uint64_t CommonLibraryAssetInfo.author.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.coverAspectRatio.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 48));
}

uint64_t CommonLibraryAssetInfo.coverURLString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.dateFinished.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_22898A6C0(v1 + *(int *)(v3 + 56), a1, &qword_26AECF7E0);
}

uint64_t CommonLibraryAssetInfo.description.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.filePath.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.finishedDateKind.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for CommonLibraryAssetInfo();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 68));
  return result;
}

uint64_t CommonLibraryAssetInfo.genreNames.getter()
{
  type metadata accessor for CommonLibraryAssetInfo();

  return swift_bridgeObjectRetain();
}

uint64_t CommonLibraryAssetInfo.hasSpecifiedFinishedDate.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 76));
}

uint64_t CommonLibraryAssetInfo.isDownloading.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 80));
}

uint64_t CommonLibraryAssetInfo.isExplicit.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 84));
}

uint64_t CommonLibraryAssetInfo.isFinished.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 88));
}

uint64_t CommonLibraryAssetInfo.isLocal.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 92));
}

uint64_t CommonLibraryAssetInfo.isManaged.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 96));
}

uint64_t CommonLibraryAssetInfo.isPartOfSeries.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 100));
}

uint64_t CommonLibraryAssetInfo.isPreorder.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 104));
}

uint64_t CommonLibraryAssetInfo.isPurchased.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 108));
}

uint64_t CommonLibraryAssetInfo.isInSamples.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 112));
}

uint64_t CommonLibraryAssetInfo.isSideloaded.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 116));
}

uint64_t CommonLibraryAssetInfo.language.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 120));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.lastEngagedDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_22898A6C0(v1 + *(int *)(v3 + 124), a1, &qword_26AECF7E0);
}

uint64_t CommonLibraryAssetInfo.rating.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 128));
}

double CommonLibraryAssetInfo.readingProgress.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 132));
}

uint64_t CommonLibraryAssetInfo.releaseDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_22898A6C0(v1 + *(int *)(v3 + 136), a1, &qword_26AECF7E0);
}

uint64_t CommonLibraryAssetInfo.sequenceLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 140));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.sequenceNumber.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 144));
}

double CommonLibraryAssetInfo.seriesInfo.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t _s14BookFoundation14LibraryPDFInfoV10seriesInfoAA0c6SeriesF0_pSgvs_0(uint64_t a1)
{
  uint64_t v2 = sub_228952BB0(&qword_2682841B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*CommonLibraryAssetInfo.seriesInfo.modify(void *a1))(uint64_t *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  return sub_2289CB908;
}

void sub_2289CB908(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  _s14BookFoundation14LibraryPDFInfoV10seriesInfoAA0c6SeriesF0_pSgvs_0(*a1);

  free(v1);
}

uint64_t CommonLibraryAssetInfo.seriesSortKey.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 148));
}

unint64_t CommonLibraryAssetInfo.versionNumber.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 152));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t CommonLibraryAssetInfo.init(assetLogID:collectionMemberships:id:sortTitle:storeID:title:url:author:coverAspectRatio:coverURLString:dateFinished:description:filePath:finishedDateKind:genreNames:hasSpecifiedFinishedDate:isDownloading:isExplicit:isFinished:isInSamples:isLocal:isManaged:isPartOfSeries:isPreorder:isPurchased:isSideloaded:language:lastEngagedDate:rating:readingProgress:releaseDate:sequenceLabel:sequenceNumber:seriesSortKey:versionNumber:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,char a27,char a28,char a29,char a30,char a31,char a32,char a33,char a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,char a49,uint64_t a50,char a51,int a52,int a53,char a54)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  char v69 = *a25;
  *(_OWORD *)(a9 + 64) = a11;
  *(void *)(a9 + 80) = a12;
  uint64_t v56 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  sub_2289CBD2C(a13, a9 + v56[10], &qword_2682841E0);
  id v57 = (void *)(a9 + v56[11]);
  *id v57 = a14;
  v57[1] = a15;
  uint64_t v58 = a9 + v56[12];
  *(void *)uint64_t v58 = a16;
  *(unsigned char *)(v58 + 8) = a17 & 1;
  uint64_t v59 = (void *)(a9 + v56[13]);
  *uint64_t v59 = a18;
  v59[1] = a19;
  sub_2289CBD2C(a20, a9 + v56[14], &qword_26AECF7E0);
  id v60 = (void *)(a9 + v56[15]);
  *id v60 = a21;
  v60[1] = a22;
  long long v61 = (void *)(a9 + v56[16]);
  *long long v61 = a23;
  v61[1] = a24;
  *(unsigned char *)(a9 + v56[17]) = v69;
  *(void *)(a9 + v56[18]) = a26;
  *(unsigned char *)(a9 + v56[19]) = a27;
  *(unsigned char *)(a9 + v56[20]) = a28;
  *(unsigned char *)(a9 + v56[21]) = a29;
  *(unsigned char *)(a9 + v56[22]) = a30;
  *(unsigned char *)(a9 + v56[28]) = a31;
  *(unsigned char *)(a9 + v56[23]) = a32;
  *(unsigned char *)(a9 + v56[24]) = a33;
  *(unsigned char *)(a9 + v56[25]) = a34;
  *(unsigned char *)(a9 + v56[26]) = a35;
  *(unsigned char *)(a9 + v56[27]) = a36;
  *(unsigned char *)(a9 + v56[29]) = a37;
  int64_t v62 = (void *)(a9 + v56[30]);
  *int64_t v62 = a38;
  v62[1] = a39;
  sub_2289CBD2C(a40, a9 + v56[31], &qword_26AECF7E0);
  uint64_t v63 = a9 + v56[32];
  *(void *)uint64_t v63 = a41;
  *(unsigned char *)(v63 + 8) = a42 & 1;
  *(double *)(a9 + v56[33]) = a10;
  uint64_t result = sub_2289CBD2C(a43, a9 + v56[34], &qword_26AECF7E0);
  uint64_t v65 = (void *)(a9 + v56[35]);
  void *v65 = a44;
  v65[1] = a45;
  uint64_t v66 = a9 + v56[36];
  *(void *)uint64_t v66 = a46;
  *(void *)(v66 + 8) = a47;
  *(_DWORD *)(v66 + 16) = a48;
  *(unsigned char *)(v66 + 20) = a49 & 1;
  uint64_t v67 = a9 + v56[37];
  *(void *)uint64_t v67 = a50;
  *(unsigned char *)(v67 + 8) = a51 & 1;
  uint64_t v68 = a9 + v56[38];
  *(_DWORD *)uint64_t v68 = a53;
  *(unsigned char *)(v68 + 4) = a54 & 1;
  return result;
}

uint64_t sub_2289CBD2C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_228952BB0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2289CBD90(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 44));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_2289CBDC8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 48));
}

uint64_t sub_2289CBDDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 52));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_2289CBE14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22898A6C0(v2 + *(int *)(a1 + 56), a2, &qword_26AECF7E0);
}

uint64_t sub_2289CBE40(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 60));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_2289CBE78(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 64));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_2289CBEB0@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(v2 + *(int *)(result + 68));
  return result;
}

uint64_t sub_2289CBEC0(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 76));
}

uint64_t sub_2289CBECC(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 80));
}

uint64_t sub_2289CBED8(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 84));
}

uint64_t sub_2289CBEE4(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 88));
}

uint64_t sub_2289CBEF0(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 92));
}

uint64_t sub_2289CBEFC(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 96));
}

uint64_t sub_2289CBF08(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 100));
}

uint64_t sub_2289CBF14(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 104));
}

uint64_t sub_2289CBF20(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 108));
}

uint64_t sub_2289CBF2C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 112));
}

uint64_t sub_2289CBF38(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 116));
}

uint64_t sub_2289CBF44(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 120));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_2289CBF7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22898A6C0(v2 + *(int *)(a1 + 124), a2, &qword_26AECF7E0);
}

uint64_t sub_2289CBFA8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 128));
}

double sub_2289CBFBC(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 132));
}

uint64_t sub_2289CBFC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22898A6C0(v2 + *(int *)(a1 + 136), a2, &qword_26AECF7E0);
}

uint64_t sub_2289CBFF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 140));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_2289CC02C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 144));
}

double sub_2289CC058@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void (*sub_2289CC06C(void *a1))(uint64_t *)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  return sub_2289CEDA8;
}

uint64_t sub_2289CC0C0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 148));
}

unint64_t sub_2289CC0D4(uint64_t a1)
{
  return *(unsigned int *)(v1 + *(int *)(a1 + 152)) | ((unint64_t)*(unsigned __int8 *)(v1 + *(int *)(a1 + 152) + 4) << 32);
}

uint64_t sub_2289CC0FC(uint64_t a1)
{
  uint64_t result = sub_2289CC200(&qword_268284DB0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2289CC140()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_2289CC14C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22898A6C0(v2 + *(int *)(a1 + 40), a2, &qword_2682841E0);
}

uint64_t sub_2289CC178(uint64_t a1)
{
  uint64_t result = sub_2289CC200(&qword_268284DB8);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2289CC1BC(uint64_t a1)
{
  uint64_t result = sub_2289CC200(&qword_268284DC0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2289CC200(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CommonLibraryAssetInfo();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_2289CC248@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t dispatch thunk of LibraryAssetInfo.author.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LibraryAssetInfo.coverAspectRatio.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of LibraryAssetInfo.coverURLString.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LibraryAssetInfo.dateFinished.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of LibraryAssetInfo.description.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of LibraryAssetInfo.filePath.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of LibraryAssetInfo.finishedDateKind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of LibraryAssetInfo.hasSpecifiedFinishedDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isDownloading.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isExplicit.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isFinished.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isLocal.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isManaged.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isPartOfSeries.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isPreorder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isPurchased.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isInSamples.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isSideloaded.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of LibraryAssetInfo.language.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of LibraryAssetInfo.lastEngagedDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of LibraryAssetInfo.rating.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of LibraryAssetInfo.readingProgress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of LibraryAssetInfo.releaseDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t dispatch thunk of LibraryAssetInfo.sequenceLabel.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of LibraryAssetInfo.sequenceNumber.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of LibraryAssetInfo.seriesInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t dispatch thunk of LibraryAssetInfo.seriesInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 224))();
}

uint64_t dispatch thunk of LibraryAssetInfo.seriesInfo.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 232))();
}

uint64_t dispatch thunk of LibraryAssetInfo.seriesSortKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t dispatch thunk of LibraryAssetInfo.versionNumber.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (*(uint64_t (**)(void))(a2 + 248))();
  return v2 | ((HIDWORD(v2) & 1) << 32);
}

uint64_t dispatch thunk of CommonLibraryAssetInfoEmbedding.commonInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void *initializeBufferWithCopyOfBuffer for CommonLibraryAssetInfo(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    uint64_t v12 = a3[10];
    uint64_t v83 = (char *)a2 + v12;
    __dst = (char *)a1 + v12;
    a1[10] = a2[10];
    uint64_t v13 = sub_2289DE880();
    uint64_t v80 = *(void *)(v13 - 8);
    long long v81 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48);
    uint64_t v14 = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v81(v83, 1, v14))
    {
      uint64_t v15 = sub_228952BB0(&qword_2682841E0);
      memcpy(__dst, v83, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(__dst, v83, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v17 = a3[11];
    uint64_t v18 = a3[12];
    uint64_t v19 = (void *)((char *)v4 + v17);
    uint64_t v20 = (void *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    unint64_t v22 = (char *)v4 + v18;
    unint64_t v23 = (char *)a2 + v18;
    v22[8] = v23[8];
    *(void *)unint64_t v22 = *(void *)v23;
    uint64_t v24 = a3[13];
    uint64_t v25 = a3[14];
    BOOL v26 = (void *)((char *)v4 + v24);
    int64_t v27 = (void *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    void *v26 = *v27;
    v26[1] = v28;
    uint64_t v82 = (char *)v4 + v25;
    uint64_t v29 = (char *)a2 + v25;
    uint64_t v30 = sub_2289DE910();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __dsta = (void (**)(void *, const void *, uint64_t))v31;
    if (v32(v29, 1, v30))
    {
      uint64_t v33 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v82, v29, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v82, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v82, 0, 1, v30);
    }
    uint64_t v34 = a3[15];
    uint64_t v35 = a3[16];
    int64_t v36 = (void *)((char *)v4 + v34);
    BOOL v37 = (void *)((char *)a2 + v34);
    uint64_t v38 = v37[1];
    *int64_t v36 = *v37;
    v36[1] = v38;
    unint64_t v39 = (void *)((char *)v4 + v35);
    uint64_t v40 = (void *)((char *)a2 + v35);
    uint64_t v41 = v40[1];
    *unint64_t v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = a3[18];
    *((unsigned char *)v4 + a3[17]) = *((unsigned char *)a2 + a3[17]);
    *(void *)((char *)v4 + v42) = *(void *)((char *)a2 + v42);
    uint64_t v43 = a3[20];
    *((unsigned char *)v4 + a3[19]) = *((unsigned char *)a2 + a3[19]);
    *((unsigned char *)v4 + v43) = *((unsigned char *)a2 + v43);
    uint64_t v44 = a3[22];
    *((unsigned char *)v4 + a3[21]) = *((unsigned char *)a2 + a3[21]);
    *((unsigned char *)v4 + v44) = *((unsigned char *)a2 + v44);
    uint64_t v45 = a3[24];
    *((unsigned char *)v4 + a3[23]) = *((unsigned char *)a2 + a3[23]);
    *((unsigned char *)v4 + v45) = *((unsigned char *)a2 + v45);
    uint64_t v46 = a3[26];
    *((unsigned char *)v4 + a3[25]) = *((unsigned char *)a2 + a3[25]);
    *((unsigned char *)v4 + v46) = *((unsigned char *)a2 + v46);
    uint64_t v47 = a3[28];
    *((unsigned char *)v4 + a3[27]) = *((unsigned char *)a2 + a3[27]);
    *((unsigned char *)v4 + v47) = *((unsigned char *)a2 + v47);
    uint64_t v48 = a3[30];
    *((unsigned char *)v4 + a3[29]) = *((unsigned char *)a2 + a3[29]);
    char v49 = (void *)((char *)v4 + v48);
    uint64_t v50 = (void *)((char *)a2 + v48);
    uint64_t v51 = v50[1];
    *char v49 = *v50;
    v49[1] = v51;
    uint64_t v52 = a3[31];
    uint64_t v53 = (char *)v4 + v52;
    uint64_t v54 = (char *)a2 + v52;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32(v54, 1, v30))
    {
      uint64_t v55 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
      uint64_t v56 = __dsta;
    }
    else
    {
      uint64_t v56 = __dsta;
      __dsta[2](v53, v54, v30);
      ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v53, 0, 1, v30);
    }
    uint64_t v57 = a3[32];
    uint64_t v58 = a3[33];
    uint64_t v59 = (char *)v4 + v57;
    id v60 = (char *)a2 + v57;
    *(void *)uint64_t v59 = *(void *)v60;
    uint64_t v61 = *(void *)((char *)a2 + v58);
    v59[8] = v60[8];
    *(void *)((char *)v4 + v58) = v61;
    uint64_t v62 = a3[34];
    uint64_t v63 = (char *)v4 + v62;
    uint64_t v64 = (char *)a2 + v62;
    if (v32((char *)a2 + v62, 1, v30))
    {
      uint64_t v65 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
    }
    else
    {
      v56[2](v63, v64, v30);
      ((void (*)(char *, void, uint64_t, uint64_t))v56[7])(v63, 0, 1, v30);
    }
    uint64_t v66 = a3[35];
    uint64_t v67 = a3[36];
    uint64_t v68 = (void *)((char *)v4 + v66);
    char v69 = (void *)((char *)a2 + v66);
    uint64_t v70 = v69[1];
    *uint64_t v68 = *v69;
    v68[1] = v70;
    uint64_t v71 = (char *)v4 + v67;
    char v72 = (char *)a2 + v67;
    *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
    *(void *)(v71 + 13) = *(void *)(v72 + 13);
    uint64_t v73 = a3[37];
    uint64_t v74 = a3[38];
    uint64_t v75 = (char *)v4 + v73;
    uint64_t v76 = (char *)a2 + v73;
    *(void *)uint64_t v75 = *(void *)v76;
    v75[8] = v76[8];
    int64_t v77 = (char *)v4 + v74;
    uint64_t v78 = (char *)a2 + v74;
    *(_DWORD *)int64_t v77 = *(_DWORD *)v78;
    v77[4] = v78[4];
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for CommonLibraryAssetInfo(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[10];
  uint64_t v5 = sub_2289DE880();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[14];
  uint64_t v8 = sub_2289DE910();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = a1 + a2[31];
  if (!v10(v11, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  }
  uint64_t v12 = a1 + a2[34];
  if (!v10(v12, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CommonLibraryAssetInfo(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  uint64_t v11 = a3[10];
  long long v81 = (char *)a2 + v11;
  __dst = (char *)a1 + v11;
  a1[10] = a2[10];
  uint64_t v12 = sub_2289DE880();
  uint64_t v78 = *(void *)(v12 - 8);
  uint64_t v79 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
  uint64_t v13 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v79(v81, 1, v13))
  {
    uint64_t v14 = sub_228952BB0(&qword_2682841E0);
    memcpy(__dst, v81, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(__dst, v81, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v15 = a3[11];
  uint64_t v16 = a3[12];
  uint64_t v17 = (void *)((char *)a1 + v15);
  uint64_t v18 = (void *)((char *)a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = (char *)a1 + v16;
  uint64_t v21 = (char *)a2 + v16;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = a3[13];
  uint64_t v23 = a3[14];
  uint64_t v24 = (void *)((char *)a1 + v22);
  uint64_t v25 = (void *)((char *)a2 + v22);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v80 = (char *)a1 + v23;
  int64_t v27 = (char *)a2 + v23;
  uint64_t v28 = sub_2289DE910();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __dsta = (void (**)(void *, const void *, uint64_t))v29;
  if (v30(v27, 1, v28))
  {
    uint64_t v31 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v80, v27, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v80, v27, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v80, 0, 1, v28);
  }
  uint64_t v32 = a3[15];
  uint64_t v33 = a3[16];
  uint64_t v34 = (void *)((char *)a1 + v32);
  uint64_t v35 = (void *)((char *)a2 + v32);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  BOOL v37 = (void *)((char *)a1 + v33);
  uint64_t v38 = (void *)((char *)a2 + v33);
  uint64_t v39 = v38[1];
  *BOOL v37 = *v38;
  v37[1] = v39;
  uint64_t v40 = a3[18];
  *((unsigned char *)a1 + a3[17]) = *((unsigned char *)a2 + a3[17]);
  *(void *)((char *)a1 + v40) = *(void *)((char *)a2 + v40);
  uint64_t v41 = a3[20];
  *((unsigned char *)a1 + a3[19]) = *((unsigned char *)a2 + a3[19]);
  *((unsigned char *)a1 + v41) = *((unsigned char *)a2 + v41);
  uint64_t v42 = a3[22];
  *((unsigned char *)a1 + a3[21]) = *((unsigned char *)a2 + a3[21]);
  *((unsigned char *)a1 + v42) = *((unsigned char *)a2 + v42);
  uint64_t v43 = a3[24];
  *((unsigned char *)a1 + a3[23]) = *((unsigned char *)a2 + a3[23]);
  *((unsigned char *)a1 + v43) = *((unsigned char *)a2 + v43);
  uint64_t v44 = a3[26];
  *((unsigned char *)a1 + a3[25]) = *((unsigned char *)a2 + a3[25]);
  *((unsigned char *)a1 + v44) = *((unsigned char *)a2 + v44);
  uint64_t v45 = a3[28];
  *((unsigned char *)a1 + a3[27]) = *((unsigned char *)a2 + a3[27]);
  *((unsigned char *)a1 + v45) = *((unsigned char *)a2 + v45);
  uint64_t v46 = a3[30];
  *((unsigned char *)a1 + a3[29]) = *((unsigned char *)a2 + a3[29]);
  uint64_t v47 = (void *)((char *)a1 + v46);
  uint64_t v48 = (void *)((char *)a2 + v46);
  uint64_t v49 = v48[1];
  *uint64_t v47 = *v48;
  v47[1] = v49;
  uint64_t v50 = a3[31];
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v30(v52, 1, v28))
  {
    uint64_t v53 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
    uint64_t v54 = __dsta;
  }
  else
  {
    uint64_t v54 = __dsta;
    __dsta[2](v51, v52, v28);
    ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v51, 0, 1, v28);
  }
  uint64_t v55 = a3[32];
  uint64_t v56 = a3[33];
  uint64_t v57 = (char *)a1 + v55;
  uint64_t v58 = (char *)a2 + v55;
  *(void *)uint64_t v57 = *(void *)v58;
  uint64_t v59 = *(void *)((char *)a2 + v56);
  v57[8] = v58[8];
  *(void *)((char *)a1 + v56) = v59;
  uint64_t v60 = a3[34];
  uint64_t v61 = (char *)a1 + v60;
  uint64_t v62 = (char *)a2 + v60;
  if (v30((char *)a2 + v60, 1, v28))
  {
    uint64_t v63 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    v54[2](v61, v62, v28);
    ((void (*)(char *, void, uint64_t, uint64_t))v54[7])(v61, 0, 1, v28);
  }
  uint64_t v64 = a3[35];
  uint64_t v65 = a3[36];
  uint64_t v66 = (void *)((char *)a1 + v64);
  uint64_t v67 = (void *)((char *)a2 + v64);
  uint64_t v68 = v67[1];
  *uint64_t v66 = *v67;
  v66[1] = v68;
  char v69 = (char *)a1 + v65;
  uint64_t v70 = (char *)a2 + v65;
  *(_OWORD *)char v69 = *(_OWORD *)v70;
  *(void *)(v69 + 13) = *(void *)(v70 + 13);
  uint64_t v71 = a3[37];
  uint64_t v72 = a3[38];
  uint64_t v73 = (char *)a1 + v71;
  uint64_t v74 = (char *)a2 + v71;
  *(void *)uint64_t v73 = *(void *)v74;
  v73[8] = v74[8];
  uint64_t v75 = (char *)a1 + v72;
  uint64_t v76 = (char *)a2 + v72;
  *(_DWORD *)uint64_t v75 = *(_DWORD *)v76;
  v75[4] = v76[4];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CommonLibraryAssetInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[10];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2289DE880();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_228952BB0(&qword_2682841E0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[11];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[12];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  uint64_t v22 = a3[13];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[14];
  uint64_t v26 = (char *)a1 + v25;
  int64_t v27 = (char *)a2 + v25;
  uint64_t v28 = sub_2289DE910();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
LABEL_12:
    uint64_t v33 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v26, v27, v28);
LABEL_13:
  uint64_t v34 = a3[15];
  uint64_t v35 = (void *)((char *)a1 + v34);
  uint64_t v36 = (void *)((char *)a2 + v34);
  void *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[16];
  uint64_t v38 = (void *)((char *)a1 + v37);
  uint64_t v39 = (void *)((char *)a2 + v37);
  *uint64_t v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[17]) = *((unsigned char *)a2 + a3[17]);
  *(void *)((char *)a1 + a3[18]) = *(void *)((char *)a2 + a3[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[19]) = *((unsigned char *)a2 + a3[19]);
  *((unsigned char *)a1 + a3[20]) = *((unsigned char *)a2 + a3[20]);
  *((unsigned char *)a1 + a3[21]) = *((unsigned char *)a2 + a3[21]);
  *((unsigned char *)a1 + a3[22]) = *((unsigned char *)a2 + a3[22]);
  *((unsigned char *)a1 + a3[23]) = *((unsigned char *)a2 + a3[23]);
  *((unsigned char *)a1 + a3[24]) = *((unsigned char *)a2 + a3[24]);
  *((unsigned char *)a1 + a3[25]) = *((unsigned char *)a2 + a3[25]);
  *((unsigned char *)a1 + a3[26]) = *((unsigned char *)a2 + a3[26]);
  *((unsigned char *)a1 + a3[27]) = *((unsigned char *)a2 + a3[27]);
  *((unsigned char *)a1 + a3[28]) = *((unsigned char *)a2 + a3[28]);
  *((unsigned char *)a1 + a3[29]) = *((unsigned char *)a2 + a3[29]);
  uint64_t v40 = a3[30];
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  *uint64_t v41 = *v42;
  v41[1] = v42[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[31];
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = (char *)a2 + v43;
  int v46 = v30((char *)a1 + v43, 1, v28);
  int v47 = v30(v45, 1, v28);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v44, v45, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v44, 0, 1, v28);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v44, v28);
LABEL_18:
    uint64_t v48 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v44, v45, v28);
LABEL_19:
  uint64_t v49 = a3[32];
  uint64_t v50 = (char *)a1 + v49;
  uint64_t v51 = (char *)a2 + v49;
  uint64_t v52 = *(void *)v51;
  v50[8] = v51[8];
  *(void *)uint64_t v50 = v52;
  *(void *)((char *)a1 + a3[33]) = *(void *)((char *)a2 + a3[33]);
  uint64_t v53 = a3[34];
  uint64_t v54 = (char *)a1 + v53;
  uint64_t v55 = (char *)a2 + v53;
  int v56 = v30((char *)a1 + v53, 1, v28);
  int v57 = v30(v55, 1, v28);
  if (!v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v54, v55, v28);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v54, v28);
    goto LABEL_24;
  }
  if (v57)
  {
LABEL_24:
    uint64_t v58 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v54, v55, v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
LABEL_25:
  uint64_t v59 = a3[35];
  uint64_t v60 = (void *)((char *)a1 + v59);
  uint64_t v61 = (void *)((char *)a2 + v59);
  *uint64_t v60 = *v61;
  v60[1] = v61[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v62 = a3[36];
  uint64_t v63 = (char *)a1 + v62;
  uint64_t v64 = (char *)a2 + v62;
  long long v65 = *(_OWORD *)v64;
  *(void *)(v63 + 13) = *(void *)(v64 + 13);
  *(_OWORD *)uint64_t v63 = v65;
  uint64_t v66 = a3[37];
  uint64_t v67 = (char *)a1 + v66;
  uint64_t v68 = (char *)a2 + v66;
  char v69 = v68[8];
  *(void *)uint64_t v67 = *(void *)v68;
  v67[8] = v69;
  uint64_t v70 = a3[38];
  uint64_t v71 = (char *)a1 + v70;
  uint64_t v72 = (char *)a2 + v70;
  int v73 = *(_DWORD *)v72;
  v71[4] = v72[4];
  *(_DWORD *)uint64_t v71 = v73;
  return a1;
}

uint64_t initializeWithTake for CommonLibraryAssetInfo(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v9 = sub_2289DE880();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_228952BB0(&qword_2682841E0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t v15 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = sub_2289DE910();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
  if (v20(v17, 1, v18))
  {
    uint64_t v21 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v22 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v22) = *(_OWORD *)(a2 + v22);
  uint64_t v23 = a3[18];
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  *(void *)(a1 + v23) = *(void *)(a2 + v23);
  uint64_t v24 = a3[20];
  *(unsigned char *)(a1 + a3[19]) = *(unsigned char *)(a2 + a3[19]);
  *(unsigned char *)(a1 + v24) = *(unsigned char *)(a2 + v24);
  uint64_t v25 = a3[22];
  *(unsigned char *)(a1 + a3[21]) = *(unsigned char *)(a2 + a3[21]);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  uint64_t v26 = a3[24];
  *(unsigned char *)(a1 + a3[23]) = *(unsigned char *)(a2 + a3[23]);
  *(unsigned char *)(a1 + v26) = *(unsigned char *)(a2 + v26);
  uint64_t v27 = a3[26];
  *(unsigned char *)(a1 + a3[25]) = *(unsigned char *)(a2 + a3[25]);
  *(unsigned char *)(a1 + v27) = *(unsigned char *)(a2 + v27);
  uint64_t v28 = a3[28];
  *(unsigned char *)(a1 + a3[27]) = *(unsigned char *)(a2 + a3[27]);
  *(unsigned char *)(a1 + v28) = *(unsigned char *)(a2 + v28);
  uint64_t v29 = a3[30];
  *(unsigned char *)(a1 + a3[29]) = *(unsigned char *)(a2 + a3[29]);
  *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
  uint64_t v30 = a3[31];
  int v31 = (void *)(a1 + v30);
  int v32 = (const void *)(a2 + v30);
  if (v20((const void *)(a2 + v30), 1, v18))
  {
    uint64_t v33 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v31, v32, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v31, 0, 1, v18);
  }
  uint64_t v34 = a3[32];
  uint64_t v35 = a3[33];
  uint64_t v36 = a1 + v34;
  uint64_t v37 = a2 + v34;
  *(void *)uint64_t v36 = *(void *)v37;
  uint64_t v38 = *(void *)(a2 + v35);
  *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
  *(void *)(a1 + v35) = v38;
  uint64_t v39 = a3[34];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (const void *)(a2 + v39);
  if (v20((const void *)(a2 + v39), 1, v18))
  {
    uint64_t v42 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v40, v41, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v40, 0, 1, v18);
  }
  uint64_t v43 = a3[36];
  *(_OWORD *)(a1 + a3[35]) = *(_OWORD *)(a2 + a3[35]);
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  *(void *)(v44 + 13) = *(void *)(v45 + 13);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  uint64_t v46 = a3[37];
  uint64_t v47 = a3[38];
  uint64_t v48 = a1 + v46;
  uint64_t v49 = a2 + v46;
  *(unsigned char *)(v48 + 8) = *(unsigned char *)(v49 + 8);
  *(void *)uint64_t v48 = *(void *)v49;
  uint64_t v50 = a1 + v47;
  uint64_t v51 = a2 + v47;
  *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
  *(unsigned char *)(v50 + 4) = *(unsigned char *)(v51 + 4);
  return a1;
}

void *assignWithTake for CommonLibraryAssetInfo(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[6];
  a1[5] = a2[5];
  a1[6] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[8];
  a1[7] = a2[7];
  a1[8] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[10];
  a1[9] = a2[9];
  a1[10] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[10];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_2289DE880();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    uint64_t v19 = sub_228952BB0(&qword_2682841E0);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_7:
  uint64_t v20 = a3[11];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[12];
  uint64_t v26 = a3[13];
  uint64_t v27 = (char *)a1 + v25;
  uint64_t v28 = (char *)a2 + v25;
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  uint64_t v29 = (void *)((char *)a1 + v26);
  uint64_t v30 = (void *)((char *)a2 + v26);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *uint64_t v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[14];
  uint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = sub_2289DE910();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v36);
LABEL_12:
    uint64_t v41 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v34, v35, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v34, v35, v36);
LABEL_13:
  uint64_t v42 = a3[15];
  uint64_t v43 = (void *)((char *)a1 + v42);
  uint64_t v44 = (void *)((char *)a2 + v42);
  uint64_t v46 = *v44;
  uint64_t v45 = v44[1];
  *uint64_t v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[16];
  uint64_t v48 = (void *)((char *)a1 + v47);
  uint64_t v49 = (void *)((char *)a2 + v47);
  uint64_t v51 = *v49;
  uint64_t v50 = v49[1];
  *uint64_t v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  uint64_t v52 = a3[18];
  *((unsigned char *)a1 + a3[17]) = *((unsigned char *)a2 + a3[17]);
  *(void *)((char *)a1 + v52) = *(void *)((char *)a2 + v52);
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[20];
  *((unsigned char *)a1 + a3[19]) = *((unsigned char *)a2 + a3[19]);
  *((unsigned char *)a1 + v53) = *((unsigned char *)a2 + v53);
  uint64_t v54 = a3[22];
  *((unsigned char *)a1 + a3[21]) = *((unsigned char *)a2 + a3[21]);
  *((unsigned char *)a1 + v54) = *((unsigned char *)a2 + v54);
  uint64_t v55 = a3[24];
  *((unsigned char *)a1 + a3[23]) = *((unsigned char *)a2 + a3[23]);
  *((unsigned char *)a1 + v55) = *((unsigned char *)a2 + v55);
  uint64_t v56 = a3[26];
  *((unsigned char *)a1 + a3[25]) = *((unsigned char *)a2 + a3[25]);
  *((unsigned char *)a1 + v56) = *((unsigned char *)a2 + v56);
  uint64_t v57 = a3[28];
  *((unsigned char *)a1 + a3[27]) = *((unsigned char *)a2 + a3[27]);
  *((unsigned char *)a1 + v57) = *((unsigned char *)a2 + v57);
  uint64_t v58 = a3[30];
  *((unsigned char *)a1 + a3[29]) = *((unsigned char *)a2 + a3[29]);
  uint64_t v59 = (void *)((char *)a1 + v58);
  uint64_t v60 = (void *)((char *)a2 + v58);
  uint64_t v62 = *v60;
  uint64_t v61 = v60[1];
  *uint64_t v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease();
  uint64_t v63 = a3[31];
  uint64_t v64 = (char *)a1 + v63;
  long long v65 = (char *)a2 + v63;
  int v66 = v38((char *)a1 + v63, 1, v36);
  int v67 = v38(v65, 1, v36);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v64, v65, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v64, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v67)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v64, v36);
LABEL_18:
    uint64_t v68 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v64, v65, v36);
LABEL_19:
  uint64_t v69 = a3[32];
  uint64_t v70 = a3[33];
  uint64_t v71 = (char *)a1 + v69;
  uint64_t v72 = (char *)a2 + v69;
  *(void *)uint64_t v71 = *(void *)v72;
  uint64_t v73 = *(void *)((char *)a2 + v70);
  v71[8] = v72[8];
  *(void *)((char *)a1 + v70) = v73;
  uint64_t v74 = a3[34];
  uint64_t v75 = (char *)a1 + v74;
  uint64_t v76 = (char *)a2 + v74;
  int v77 = v38((char *)a1 + v74, 1, v36);
  int v78 = v38(v76, 1, v36);
  if (!v77)
  {
    if (!v78)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v75, v76, v36);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v75, v36);
    goto LABEL_24;
  }
  if (v78)
  {
LABEL_24:
    uint64_t v79 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v75, v76, v36);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v75, 0, 1, v36);
LABEL_25:
  uint64_t v80 = a3[35];
  long long v81 = (void *)((char *)a1 + v80);
  uint64_t v82 = (void *)((char *)a2 + v80);
  uint64_t v84 = *v82;
  uint64_t v83 = v82[1];
  *long long v81 = v84;
  v81[1] = v83;
  swift_bridgeObjectRelease();
  uint64_t v85 = a3[36];
  uint64_t v86 = a3[37];
  uint64_t v87 = (char *)a1 + v85;
  uint64_t v88 = (char *)a2 + v85;
  *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
  *(void *)(v87 + 13) = *(void *)(v88 + 13);
  uint64_t v89 = (char *)a1 + v86;
  uint64_t v90 = (char *)a2 + v86;
  *(void *)uint64_t v89 = *(void *)v90;
  v89[8] = v90[8];
  uint64_t v91 = a3[38];
  uint64_t v92 = (char *)a1 + v91;
  uint64_t v93 = (char *)a2 + v91;
  *(_DWORD *)uint64_t v92 = *(_DWORD *)v93;
  v92[4] = v93[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for CommonLibraryAssetInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2289CE64C);
}

uint64_t sub_2289CE64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_228952BB0(&qword_2682841E0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 40);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_228952BB0(&qword_26AECF7E0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 56);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for CommonLibraryAssetInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2289CE794);
}

uint64_t sub_2289CE794(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_228952BB0(&qword_2682841E0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 40);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_228952BB0(&qword_26AECF7E0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 56);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_2289CE8C8()
{
  sub_2289CEA64(319, (unint64_t *)&qword_268284850, MEMORY[0x263F06EA8]);
  if (v0 <= 0x3F)
  {
    sub_2289CEA64(319, &qword_268284DD8, MEMORY[0x263F07490]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_2289CEA64(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_2289DF130();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_2289CEAB8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2289CEAF8()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 48));
}

uint64_t sub_2289CEB24()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2289CEB64()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2289CEBA4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2289CEBE4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 120));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2289CEC24()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 128));
}

uint64_t sub_2289CEC50()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 140));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2289CEC90()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 144));
}

uint64_t sub_2289CECD4()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 148));
}

unint64_t sub_2289CED00()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 152));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t sub_2289CED40()
{
  type metadata accessor for CommonLibraryAssetInfo();

  return swift_bridgeObjectRetain();
}

uint64_t MAudiobook.narrator.getter()
{
  swift_getObjectType();
  uint64_t v0 = sub_2289D49E0(0);
  sub_2289CEE30();
  sub_2289B3B60(v0, MEMORY[0x263F8D310], (uint64_t)&v2);
  swift_bridgeObjectRelease();
  return v2;
}

unint64_t sub_2289CEE30()
{
  unint64_t result = qword_268284DE0;
  if (!qword_268284DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284DE0);
  }
  return result;
}

uint64_t sub_2289CEE84()
{
  return sub_228979EEC();
}

uint64_t sub_2289CEE9C()
{
  return sub_2289DEC40();
}

uint64_t sub_2289CEEB4()
{
  return sub_228979F5C();
}

uint64_t sub_2289CEECC@<X0>(BOOL *a1@<X8>)
{
  return sub_228979FB4(a1);
}

void sub_2289CEED8(void *a1@<X8>)
{
  *a1 = 0x726F74617272616ELL;
  a1[1] = 0xE800000000000000;
}

id MAudiobook.__allocating_init(with:config:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  uint64_t v6 = *(void *)(a2 + 8);
  v8[0] = *(unsigned char *)a2;
  uint64_t v9 = v6;
  return MAsset.init(with:config:)(a1, v8);
}

id MAudiobook.init(with:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  v4[0] = *(unsigned char *)a2;
  uint64_t v5 = v2;
  return MAsset.init(with:config:)(a1, v4);
}

void static MAudiobook.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_2289CEF8C()
{
  return sub_228979EEC();
}

uint64_t sub_2289CEFA8()
{
  return sub_2289DEC40();
}

uint64_t sub_2289CEFC4()
{
  return sub_228979F5C();
}

uint64_t sub_2289CEFE0@<X0>(BOOL *a1@<X8>)
{
  return sub_228979FB4(a1);
}

void sub_2289CEFEC(void *a1@<X8>)
{
  *a1 = 0x6E49736569726573;
  a1[1] = 0xEA00000000006F66;
}

uint64_t sub_2289CF00C()
{
  swift_getObjectType();
  uint64_t v0 = MAsset.seriesResource.getter();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    uint64_t v2 = sub_2289D49E0(3);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = sub_228952BB0(&qword_268284000);
  sub_2289CF3B0();
  sub_2289B3B60(v2, v3, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  uint64_t result = v6;
  if (!v6)
  {
    uint64_t v5 = sub_2289D49E0(3);
    sub_2289B3B60(v5, v3, (uint64_t)&v6);
    swift_bridgeObjectRelease();
    return v6;
  }
  return result;
}

unint64_t MAudiobook.seriesName.getter()
{
  if (!sub_22897A970()) {
    return 0;
  }
  unint64_t result = sub_2289D47F8();
  unint64_t v1 = result;
  if (!result)
  {
    swift_release();
    return v1;
  }
  if (!(result >> 62))
  {
    if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  unint64_t result = sub_2289DF380();
  if (!result) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = MEMORY[0x22A6A1E70](0, v1);
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v1 = *(void *)(v3 + OBJC_IVAR____TtC14BookFoundation7MSeries_name);
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    return v1;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v2 = (char *)*(id *)(v1 + 32);
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v1 = *(void *)&v2[OBJC_IVAR____TtC14BookFoundation7MSeries_name];
    swift_bridgeObjectRetain();

    return v1;
  }
  __break(1u);
  return result;
}

id MAudiobook.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_2289CF2F0()
{
  return type metadata accessor for MAudiobook();
}

uint64_t type metadata accessor for MAudiobook()
{
  uint64_t result = qword_268284DE8;
  if (!qword_268284DE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for MAudiobook.Attributes()
{
  return &type metadata for MAudiobook.Attributes;
}

unint64_t sub_2289CF35C()
{
  unint64_t result = qword_268284DF8;
  if (!qword_268284DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284DF8);
  }
  return result;
}

unint64_t sub_2289CF3B0()
{
  unint64_t result = qword_268284E00;
  if (!qword_268284E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284E00);
  }
  return result;
}

unsigned char *_s14BookFoundation10MAudiobookC10AttributesOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2289CF4A0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MAudiobook.Meta()
{
  return &type metadata for MAudiobook.Meta;
}

unint64_t sub_2289CF4DC()
{
  unint64_t result = qword_268284E08;
  if (!qword_268284E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284E08);
  }
  return result;
}

uint64_t LibraryPDFInfo.commonInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2289618C0(v1, a1);
}

uint64_t LibraryPDFInfo.commonInfo.setter(uint64_t a1)
{
  return sub_22896192C(a1, v1);
}

uint64_t (*LibraryPDFInfo.commonInfo.modify())()
{
  return nullsub_1;
}

double LibraryPDFInfo.seriesInfo.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void (*LibraryPDFInfo.seriesInfo.modify(void *a1))(uint64_t *a1)
{
  objc_super v2 = malloc(0x28uLL);
  *a1 = v2;
  *objc_super v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  return sub_2289CB908;
}

uint64_t LibraryPDFInfo.init(commonInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_228961C84(a1, a2);
}

uint64_t sub_2289CF5D4(uint64_t a1)
{
  uint64_t result = sub_2289CF730(&qword_268284650);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for LibraryPDFInfo()
{
  uint64_t result = qword_268284E20;
  if (!qword_268284E20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2289CF664(uint64_t a1)
{
  uint64_t result = sub_2289CF730(&qword_268284640);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2289CF6A8(uint64_t a1)
{
  uint64_t result = sub_2289CF730(&qword_268284E10);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2289CF6EC(uint64_t a1)
{
  uint64_t result = sub_2289CF730(&qword_268284E18);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2289CF730(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LibraryPDFInfo();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_2289CF778@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void *initializeBufferWithCopyOfBuffer for LibraryPDFInfo(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    a1[10] = a2[10];
    uint64_t v12 = *(int *)(v4 + 40);
    uint64_t v75 = (char *)a2 + v12;
    __dst = (char *)a1 + v12;
    uint64_t v13 = sub_2289DE880();
    uint64_t v72 = *(void *)(v13 - 8);
    uint64_t v73 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
    uint64_t v14 = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v73(v75, 1, v14))
    {
      uint64_t v15 = sub_228952BB0(&qword_2682841E0);
      memcpy(__dst, v75, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v72 + 16))(__dst, v75, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v17 = v6[11];
    int v18 = (void *)((char *)a1 + v17);
    uint64_t v19 = (void *)((char *)a2 + v17);
    uint64_t v20 = v19[1];
    *int v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = v6[12];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    v22[8] = v23[8];
    *(void *)uint64_t v22 = *(void *)v23;
    uint64_t v24 = v6[13];
    uint64_t v25 = (void *)((char *)a1 + v24);
    uint64_t v26 = (void *)((char *)a2 + v24);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = v6[14];
    uint64_t v74 = (char *)a1 + v28;
    uint64_t v29 = (char *)a2 + v28;
    uint64_t v30 = sub_2289DE910();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __dsta = (void (**)(void *, const void *, uint64_t))v31;
    if (v32(v29, 1, v30))
    {
      uint64_t v33 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v74, v29, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v74, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v74, 0, 1, v30);
    }
    uint64_t v34 = v6[15];
    uint64_t v35 = (void *)((char *)a1 + v34);
    uint64_t v36 = (void *)((char *)a2 + v34);
    uint64_t v37 = v36[1];
    void *v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = v6[16];
    int v39 = (void *)((char *)a1 + v38);
    int v40 = (void *)((char *)a2 + v38);
    uint64_t v41 = v40[1];
    *int v39 = *v40;
    v39[1] = v41;
    *((unsigned char *)a1 + v6[17]) = *((unsigned char *)a2 + v6[17]);
    *(void *)((char *)a1 + v6[18]) = *(void *)((char *)a2 + v6[18]);
    *((unsigned char *)a1 + v6[19]) = *((unsigned char *)a2 + v6[19]);
    *((unsigned char *)a1 + v6[20]) = *((unsigned char *)a2 + v6[20]);
    *((unsigned char *)a1 + v6[21]) = *((unsigned char *)a2 + v6[21]);
    *((unsigned char *)a1 + v6[22]) = *((unsigned char *)a2 + v6[22]);
    *((unsigned char *)a1 + v6[23]) = *((unsigned char *)a2 + v6[23]);
    *((unsigned char *)a1 + v6[24]) = *((unsigned char *)a2 + v6[24]);
    *((unsigned char *)a1 + v6[25]) = *((unsigned char *)a2 + v6[25]);
    *((unsigned char *)a1 + v6[26]) = *((unsigned char *)a2 + v6[26]);
    *((unsigned char *)a1 + v6[27]) = *((unsigned char *)a2 + v6[27]);
    *((unsigned char *)a1 + v6[28]) = *((unsigned char *)a2 + v6[28]);
    *((unsigned char *)a1 + v6[29]) = *((unsigned char *)a2 + v6[29]);
    uint64_t v42 = v6[30];
    uint64_t v43 = (void *)((char *)a1 + v42);
    uint64_t v44 = (void *)((char *)a2 + v42);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = v6[31];
    uint64_t v47 = (char *)a1 + v46;
    uint64_t v48 = (char *)a2 + v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32(v48, 1, v30))
    {
      uint64_t v49 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
      uint64_t v50 = __dsta;
    }
    else
    {
      uint64_t v50 = __dsta;
      __dsta[2](v47, v48, v30);
      ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v47, 0, 1, v30);
    }
    uint64_t v51 = v6[32];
    uint64_t v52 = (char *)a1 + v51;
    uint64_t v53 = (char *)a2 + v51;
    *(void *)uint64_t v52 = *(void *)v53;
    v52[8] = v53[8];
    *(void *)((char *)a1 + v6[33]) = *(void *)((char *)a2 + v6[33]);
    uint64_t v54 = v6[34];
    uint64_t v55 = (char *)a1 + v54;
    uint64_t v56 = (char *)a2 + v54;
    if (v32((char *)a2 + v54, 1, v30))
    {
      uint64_t v57 = sub_228952BB0(&qword_26AECF7E0);
      memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      v50[2](v55, v56, v30);
      ((void (*)(char *, void, uint64_t, uint64_t))v50[7])(v55, 0, 1, v30);
    }
    uint64_t v58 = v6[35];
    uint64_t v59 = (void *)((char *)a1 + v58);
    uint64_t v60 = (void *)((char *)a2 + v58);
    uint64_t v61 = v60[1];
    *uint64_t v59 = *v60;
    v59[1] = v61;
    uint64_t v62 = v6[36];
    uint64_t v63 = (char *)a1 + v62;
    uint64_t v64 = (char *)a2 + v62;
    *(void *)(v63 + 13) = *(void *)(v64 + 13);
    *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
    uint64_t v65 = v6[37];
    int v66 = (char *)a1 + v65;
    int v67 = (char *)a2 + v65;
    v66[8] = v67[8];
    *(void *)int v66 = *(void *)v67;
    uint64_t v68 = v6[38];
    uint64_t v69 = (char *)a1 + v68;
    uint64_t v70 = (char *)a2 + v68;
    v69[4] = v70[4];
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for LibraryPDFInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  objc_super v2 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v3 = a1 + v2[10];
  uint64_t v4 = sub_2289DE880();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + v2[14];
  uint64_t v7 = sub_2289DE910();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + v2[31];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v11 = a1 + v2[34];
  if (!v9(v11, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for LibraryPDFInfo(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  a1[10] = a2[10];
  uint64_t v9 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v10 = v9[10];
  __dst = (char *)a1 + v10;
  uint64_t v11 = (char *)a2 + v10;
  uint64_t v12 = sub_2289DE880();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v70(v11, 1, v12))
  {
    uint64_t v14 = sub_228952BB0(&qword_2682841E0);
    memcpy(__dst, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  uint64_t v15 = v9[11];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = v9[12];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = v9[13];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = v9[14];
  uint64_t v71 = (char *)a1 + v26;
  uint64_t v27 = (char *)a2 + v26;
  uint64_t v28 = sub_2289DE910();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __dsta = (void (**)(void *, const void *, uint64_t))v29;
  if (v30(v27, 1, v28))
  {
    uint64_t v31 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v71, v27, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v71, v27, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v71, 0, 1, v28);
  }
  uint64_t v32 = v9[15];
  uint64_t v33 = (void *)((char *)a1 + v32);
  uint64_t v34 = (void *)((char *)a2 + v32);
  uint64_t v35 = v34[1];
  void *v33 = *v34;
  v33[1] = v35;
  uint64_t v36 = v9[16];
  uint64_t v37 = (void *)((char *)a1 + v36);
  uint64_t v38 = (void *)((char *)a2 + v36);
  uint64_t v39 = v38[1];
  *uint64_t v37 = *v38;
  v37[1] = v39;
  *((unsigned char *)a1 + v9[17]) = *((unsigned char *)a2 + v9[17]);
  *(void *)((char *)a1 + v9[18]) = *(void *)((char *)a2 + v9[18]);
  *((unsigned char *)a1 + v9[19]) = *((unsigned char *)a2 + v9[19]);
  *((unsigned char *)a1 + v9[20]) = *((unsigned char *)a2 + v9[20]);
  *((unsigned char *)a1 + v9[21]) = *((unsigned char *)a2 + v9[21]);
  *((unsigned char *)a1 + v9[22]) = *((unsigned char *)a2 + v9[22]);
  *((unsigned char *)a1 + v9[23]) = *((unsigned char *)a2 + v9[23]);
  *((unsigned char *)a1 + v9[24]) = *((unsigned char *)a2 + v9[24]);
  *((unsigned char *)a1 + v9[25]) = *((unsigned char *)a2 + v9[25]);
  *((unsigned char *)a1 + v9[26]) = *((unsigned char *)a2 + v9[26]);
  *((unsigned char *)a1 + v9[27]) = *((unsigned char *)a2 + v9[27]);
  *((unsigned char *)a1 + v9[28]) = *((unsigned char *)a2 + v9[28]);
  *((unsigned char *)a1 + v9[29]) = *((unsigned char *)a2 + v9[29]);
  uint64_t v40 = v9[30];
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  uint64_t v43 = v42[1];
  *uint64_t v41 = *v42;
  v41[1] = v43;
  uint64_t v44 = v9[31];
  uint64_t v45 = (char *)a1 + v44;
  uint64_t v46 = (char *)a2 + v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v30(v46, 1, v28))
  {
    uint64_t v47 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    uint64_t v48 = __dsta;
  }
  else
  {
    uint64_t v48 = __dsta;
    __dsta[2](v45, v46, v28);
    ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v45, 0, 1, v28);
  }
  uint64_t v49 = v9[32];
  uint64_t v50 = (char *)a1 + v49;
  uint64_t v51 = (char *)a2 + v49;
  *(void *)uint64_t v50 = *(void *)v51;
  v50[8] = v51[8];
  *(void *)((char *)a1 + v9[33]) = *(void *)((char *)a2 + v9[33]);
  uint64_t v52 = v9[34];
  uint64_t v53 = (char *)a1 + v52;
  uint64_t v54 = (char *)a2 + v52;
  if (v30((char *)a2 + v52, 1, v28))
  {
    uint64_t v55 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    v48[2](v53, v54, v28);
    ((void (*)(char *, void, uint64_t, uint64_t))v48[7])(v53, 0, 1, v28);
  }
  uint64_t v56 = v9[35];
  uint64_t v57 = (void *)((char *)a1 + v56);
  uint64_t v58 = (void *)((char *)a2 + v56);
  uint64_t v59 = v58[1];
  *uint64_t v57 = *v58;
  v57[1] = v59;
  uint64_t v60 = v9[36];
  uint64_t v61 = (char *)a1 + v60;
  uint64_t v62 = (char *)a2 + v60;
  *(void *)(v61 + 13) = *(void *)(v62 + 13);
  *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
  uint64_t v63 = v9[37];
  uint64_t v64 = (char *)a1 + v63;
  uint64_t v65 = (char *)a2 + v63;
  char v64[8] = v65[8];
  *(void *)uint64_t v64 = *(void *)v65;
  uint64_t v66 = v9[38];
  int v67 = (char *)a1 + v66;
  uint64_t v68 = (char *)a2 + v66;
  v67[4] = v68[4];
  *(_DWORD *)int v67 = *(_DWORD *)v68;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LibraryPDFInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4[10];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_2289DE880();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
LABEL_6:
    uint64_t v13 = sub_228952BB0(&qword_2682841E0);
    memcpy(v6, v7, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(v6, v7, v8);
LABEL_7:
  uint64_t v14 = v4[11];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  void *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = v4[12];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)uint64_t v18 = v20;
  uint64_t v21 = v4[13];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = v4[14];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = sub_2289DE910();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_12:
    uint64_t v32 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v25, v26, v27);
LABEL_13:
  uint64_t v33 = v4[15];
  uint64_t v34 = (void *)((char *)a1 + v33);
  uint64_t v35 = (void *)((char *)a2 + v33);
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = v4[16];
  uint64_t v37 = (void *)((char *)a1 + v36);
  uint64_t v38 = (void *)((char *)a2 + v36);
  *uint64_t v37 = *v38;
  v37[1] = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v4[17]) = *((unsigned char *)a2 + v4[17]);
  *(void *)((char *)a1 + v4[18]) = *(void *)((char *)a2 + v4[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v4[19]) = *((unsigned char *)a2 + v4[19]);
  *((unsigned char *)a1 + v4[20]) = *((unsigned char *)a2 + v4[20]);
  *((unsigned char *)a1 + v4[21]) = *((unsigned char *)a2 + v4[21]);
  *((unsigned char *)a1 + v4[22]) = *((unsigned char *)a2 + v4[22]);
  *((unsigned char *)a1 + v4[23]) = *((unsigned char *)a2 + v4[23]);
  *((unsigned char *)a1 + v4[24]) = *((unsigned char *)a2 + v4[24]);
  *((unsigned char *)a1 + v4[25]) = *((unsigned char *)a2 + v4[25]);
  *((unsigned char *)a1 + v4[26]) = *((unsigned char *)a2 + v4[26]);
  *((unsigned char *)a1 + v4[27]) = *((unsigned char *)a2 + v4[27]);
  *((unsigned char *)a1 + v4[28]) = *((unsigned char *)a2 + v4[28]);
  *((unsigned char *)a1 + v4[29]) = *((unsigned char *)a2 + v4[29]);
  uint64_t v39 = v4[30];
  uint64_t v40 = (void *)((char *)a1 + v39);
  uint64_t v41 = (void *)((char *)a2 + v39);
  void *v40 = *v41;
  v40[1] = v41[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = v4[31];
  uint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = (char *)a2 + v42;
  int v45 = v29((char *)a1 + v42, 1, v27);
  int v46 = v29(v44, 1, v27);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v43, v44, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v43, 0, 1, v27);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v43, v27);
LABEL_18:
    uint64_t v47 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v43, v44, v27);
LABEL_19:
  uint64_t v48 = v4[32];
  uint64_t v49 = (char *)a1 + v48;
  uint64_t v50 = (char *)a2 + v48;
  uint64_t v51 = *(void *)v50;
  v49[8] = v50[8];
  *(void *)uint64_t v49 = v51;
  *(void *)((char *)a1 + v4[33]) = *(void *)((char *)a2 + v4[33]);
  uint64_t v52 = v4[34];
  uint64_t v53 = (char *)a1 + v52;
  uint64_t v54 = (char *)a2 + v52;
  int v55 = v29((char *)a1 + v52, 1, v27);
  int v56 = v29(v54, 1, v27);
  if (!v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v53, v54, v27);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v53, v27);
    goto LABEL_24;
  }
  if (v56)
  {
LABEL_24:
    uint64_t v57 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v53, v54, v27);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v53, 0, 1, v27);
LABEL_25:
  uint64_t v58 = v4[35];
  uint64_t v59 = (void *)((char *)a1 + v58);
  uint64_t v60 = (void *)((char *)a2 + v58);
  *uint64_t v59 = *v60;
  v59[1] = v60[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v61 = v4[36];
  uint64_t v62 = (char *)a1 + v61;
  uint64_t v63 = (char *)a2 + v61;
  long long v64 = *(_OWORD *)v63;
  *(void *)(v62 + 13) = *(void *)(v63 + 13);
  *(_OWORD *)uint64_t v62 = v64;
  uint64_t v65 = v4[37];
  uint64_t v66 = (char *)a1 + v65;
  int v67 = (char *)a2 + v65;
  char v68 = v67[8];
  *(void *)uint64_t v66 = *(void *)v67;
  v66[8] = v68;
  uint64_t v69 = v4[38];
  uint64_t v70 = (char *)a1 + v69;
  uint64_t v71 = (char *)a2 + v69;
  int v72 = *(_DWORD *)v71;
  v70[4] = v71[4];
  *(_DWORD *)uint64_t v70 = v72;
  return a1;
}

uint64_t initializeWithTake for LibraryPDFInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v4 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = v4[10];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_2289DE880();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = sub_228952BB0(&qword_2682841E0);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  *(_OWORD *)(a1 + v4[11]) = *(_OWORD *)(a2 + v4[11]);
  uint64_t v11 = v4[12];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(_OWORD *)(a1 + v4[13]) = *(_OWORD *)(a2 + v4[13]);
  uint64_t v14 = v4[14];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  uint64_t v17 = sub_2289DE910();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
  if (v19(v16, 1, v17))
  {
    uint64_t v20 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_OWORD *)(a1 + v4[15]) = *(_OWORD *)(a2 + v4[15]);
  *(_OWORD *)(a1 + v4[16]) = *(_OWORD *)(a2 + v4[16]);
  *(unsigned char *)(a1 + v4[17]) = *(unsigned char *)(a2 + v4[17]);
  *(void *)(a1 + v4[18]) = *(void *)(a2 + v4[18]);
  *(unsigned char *)(a1 + v4[19]) = *(unsigned char *)(a2 + v4[19]);
  *(unsigned char *)(a1 + v4[20]) = *(unsigned char *)(a2 + v4[20]);
  *(unsigned char *)(a1 + v4[21]) = *(unsigned char *)(a2 + v4[21]);
  *(unsigned char *)(a1 + v4[22]) = *(unsigned char *)(a2 + v4[22]);
  *(unsigned char *)(a1 + v4[23]) = *(unsigned char *)(a2 + v4[23]);
  *(unsigned char *)(a1 + v4[24]) = *(unsigned char *)(a2 + v4[24]);
  *(unsigned char *)(a1 + v4[25]) = *(unsigned char *)(a2 + v4[25]);
  *(unsigned char *)(a1 + v4[26]) = *(unsigned char *)(a2 + v4[26]);
  *(unsigned char *)(a1 + v4[27]) = *(unsigned char *)(a2 + v4[27]);
  *(unsigned char *)(a1 + v4[28]) = *(unsigned char *)(a2 + v4[28]);
  *(unsigned char *)(a1 + v4[29]) = *(unsigned char *)(a2 + v4[29]);
  *(_OWORD *)(a1 + v4[30]) = *(_OWORD *)(a2 + v4[30]);
  uint64_t v21 = v4[31];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (const void *)(a2 + v21);
  if (v19((const void *)(a2 + v21), 1, v17))
  {
    uint64_t v24 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v22, v23, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v22, 0, 1, v17);
  }
  uint64_t v25 = v4[32];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  *(void *)(a1 + v4[33]) = *(void *)(a2 + v4[33]);
  uint64_t v28 = v4[34];
  uint64_t v29 = (void *)(a1 + v28);
  int v30 = (const void *)(a2 + v28);
  if (v19((const void *)(a2 + v28), 1, v17))
  {
    uint64_t v31 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v29, v30, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v29, 0, 1, v17);
  }
  *(_OWORD *)(a1 + v4[35]) = *(_OWORD *)(a2 + v4[35]);
  uint64_t v32 = v4[36];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(void *)(v33 + 13) = *(void *)(v34 + 13);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  uint64_t v35 = v4[37];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  *(void *)uint64_t v36 = *(void *)v37;
  *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
  uint64_t v38 = v4[38];
  uint64_t v39 = a1 + v38;
  uint64_t v40 = a2 + v38;
  *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
  *(unsigned char *)(v39 + 4) = *(unsigned char *)(v40 + 4);
  return a1;
}

void *assignWithTake for LibraryPDFInfo(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[6];
  a1[5] = a2[5];
  a1[6] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[8];
  a1[7] = a2[7];
  a1[8] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[10];
  a1[9] = a2[9];
  a1[10] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v10 = v9[10];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_2289DE880();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    uint64_t v18 = sub_228952BB0(&qword_2682841E0);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  uint64_t v19 = v9[11];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = v9[12];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v26[8];
  uint64_t v27 = v9[13];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *uint64_t v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = v9[14];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = sub_2289DE910();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
LABEL_12:
    uint64_t v40 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v33, v34, v35);
LABEL_13:
  uint64_t v41 = v9[15];
  uint64_t v42 = (void *)((char *)a1 + v41);
  uint64_t v43 = (void *)((char *)a2 + v41);
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  *uint64_t v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = v9[16];
  uint64_t v47 = (void *)((char *)a1 + v46);
  uint64_t v48 = (void *)((char *)a2 + v46);
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  *uint64_t v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v9[17]) = *((unsigned char *)a2 + v9[17]);
  *(void *)((char *)a1 + v9[18]) = *(void *)((char *)a2 + v9[18]);
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v9[19]) = *((unsigned char *)a2 + v9[19]);
  *((unsigned char *)a1 + v9[20]) = *((unsigned char *)a2 + v9[20]);
  *((unsigned char *)a1 + v9[21]) = *((unsigned char *)a2 + v9[21]);
  *((unsigned char *)a1 + v9[22]) = *((unsigned char *)a2 + v9[22]);
  *((unsigned char *)a1 + v9[23]) = *((unsigned char *)a2 + v9[23]);
  *((unsigned char *)a1 + v9[24]) = *((unsigned char *)a2 + v9[24]);
  *((unsigned char *)a1 + v9[25]) = *((unsigned char *)a2 + v9[25]);
  *((unsigned char *)a1 + v9[26]) = *((unsigned char *)a2 + v9[26]);
  *((unsigned char *)a1 + v9[27]) = *((unsigned char *)a2 + v9[27]);
  *((unsigned char *)a1 + v9[28]) = *((unsigned char *)a2 + v9[28]);
  *((unsigned char *)a1 + v9[29]) = *((unsigned char *)a2 + v9[29]);
  uint64_t v51 = v9[30];
  uint64_t v52 = (void *)((char *)a1 + v51);
  uint64_t v53 = (void *)((char *)a2 + v51);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  *uint64_t v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = v9[31];
  uint64_t v57 = (char *)a1 + v56;
  uint64_t v58 = (char *)a2 + v56;
  int v59 = v37((char *)a1 + v56, 1, v35);
  int v60 = v37(v58, 1, v35);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v57, v58, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v57, 0, 1, v35);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v60)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v57, v35);
LABEL_18:
    uint64_t v61 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v57, v58, v35);
LABEL_19:
  uint64_t v62 = v9[32];
  uint64_t v63 = (char *)a1 + v62;
  long long v64 = (char *)a2 + v62;
  *(void *)uint64_t v63 = *(void *)v64;
  v63[8] = v64[8];
  *(void *)((char *)a1 + v9[33]) = *(void *)((char *)a2 + v9[33]);
  uint64_t v65 = v9[34];
  uint64_t v66 = (char *)a1 + v65;
  int v67 = (char *)a2 + v65;
  int v68 = v37((char *)a1 + v65, 1, v35);
  int v69 = v37(v67, 1, v35);
  if (!v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v66, v67, v35);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v66, v35);
    goto LABEL_24;
  }
  if (v69)
  {
LABEL_24:
    uint64_t v70 = sub_228952BB0(&qword_26AECF7E0);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v66, v67, v35);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v66, 0, 1, v35);
LABEL_25:
  uint64_t v71 = v9[35];
  int v72 = (void *)((char *)a1 + v71);
  uint64_t v73 = (void *)((char *)a2 + v71);
  uint64_t v75 = *v73;
  uint64_t v74 = v73[1];
  *int v72 = v75;
  v72[1] = v74;
  swift_bridgeObjectRelease();
  uint64_t v76 = v9[36];
  int v77 = (char *)a1 + v76;
  int v78 = (char *)a2 + v76;
  *(_OWORD *)int v77 = *(_OWORD *)v78;
  *(void *)(v77 + 13) = *(void *)(v78 + 13);
  uint64_t v79 = v9[37];
  uint64_t v80 = (char *)a1 + v79;
  long long v81 = (char *)a2 + v79;
  v80[8] = v81[8];
  *(void *)uint64_t v80 = *(void *)v81;
  uint64_t v82 = v9[38];
  uint64_t v83 = (char *)a1 + v82;
  uint64_t v84 = (char *)a2 + v82;
  v83[4] = v84[4];
  *(_DWORD *)uint64_t v83 = *(_DWORD *)v84;
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryPDFInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2289D1958);
}

uint64_t sub_2289D1958(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for LibraryPDFInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2289D19D8);
}

uint64_t sub_2289D19D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonLibraryAssetInfo();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_2289D1A48()
{
  uint64_t result = type metadata accessor for CommonLibraryAssetInfo();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void __swiftcall GenreInfo.init(id:name:parentId:parentName:)(BookFoundation::GenreInfo *__return_ptr retstr, Swift::String_optional id, Swift::String name, Swift::String_optional parentId, Swift::String_optional parentName)
{
  retstr->id = id;
  retstr->name = name;
  retstr->parentId = parentId;
  retstr->parentName = parentName;
}

uint64_t GenreInfo.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenreInfo.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenreInfo.parentId.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenreInfo.parentName.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t destroy for GenreInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for GenreInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GenreInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for GenreInfo(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GenreInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenreInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenreInfo()
{
  return &type metadata for GenreInfo;
}

uint64_t sub_2289D1E1C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = *(void *)(result - 8);
    uint64_t result = swift_checkMetadataState();
    if (v3 <= 0x3F)
    {
      uint64_t v4 = *(void *)(result - 8) + 64;
      swift_getTupleTypeLayout2();
      uint64_t v6 = &v5;
      uint64_t v7 = v2 + 64;
      uint64_t v8 = v4;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_2289D1F08(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  int v10 = *(_DWORD *)(v8 + 80);
  uint64_t v11 = v10;
  unint64_t v12 = v6 + v10;
  unint64_t v13 = *(void *)(v8 + 64);
  if (v6 <= ((v6 + v11) & ~v11) + v13) {
    unint64_t v6 = ((v6 + v10) & ~(unint64_t)v10) + v13;
  }
  if (v13 <= v6) {
    unint64_t v14 = v6;
  }
  else {
    unint64_t v14 = *(void *)(v8 + 64);
  }
  int v15 = *(_DWORD *)(v5 + 80) | v10;
  uint64_t v16 = v15;
  int v17 = v15 & 0x100000;
  if (v16 > 7 || v17 != 0 || v14 + 1 > 0x18)
  {
    uint64_t v20 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v20 + ((v16 + 16) & ~v16));
    swift_retain();
  }
  else
  {
    unsigned int v21 = a2[v14];
    unsigned int v22 = v21 - 3;
    if (v21 >= 3)
    {
      if (v14 <= 3) {
        uint64_t v23 = v14;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *a2;
          goto LABEL_24;
        case 2:
          int v24 = *(unsigned __int16 *)a2;
          goto LABEL_24;
        case 3:
          int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_24;
        case 4:
          int v24 = *(_DWORD *)a2;
LABEL_24:
          int v25 = (v24 | (v22 << (8 * v14))) + 3;
          unsigned int v21 = v24 + 3;
          if (v14 < 4) {
            unsigned int v21 = v25;
          }
          break;
        default:
          break;
      }
    }
    if (v21 == 2)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v9 + 16))(a1, a2, v7);
      *((unsigned char *)v4 + v14) = 2;
    }
    else if (v21 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(a1, a2);
      *((unsigned char *)v4 + v14) = 1;
    }
    else
    {
      uint64_t v26 = ~v11;
      (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(a1, a2);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)v4 + v12) & v26, (unint64_t)&a2[v12] & v26, v7);
      *((unsigned char *)v4 + v14) = 0;
    }
  }
  return v4;
}

uint64_t sub_2289D216C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = v4 + v8;
  if (v4 <= ((v4 + v8) & ~v8) + v9) {
    unint64_t v4 = ((v4 + v8) & ~v8) + v9;
  }
  if (v9 > v4) {
    unint64_t v4 = *(void *)(v6 + 64);
  }
  unsigned int v11 = a1[v4];
  unsigned int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v13 = v4;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        goto LABEL_14;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v14 = *(_DWORD *)a1;
LABEL_14:
        int v15 = (v14 | (v12 << (8 * v4))) + 3;
        unsigned int v11 = v14 + 3;
        if (v4 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 2)
  {
    uint64_t v18 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v7 + 8);
  }
  else
  {
    if (v11 == 1)
    {
      uint64_t v16 = *(uint64_t (**)(void))(v3 + 8);
      return v16();
    }
    uint64_t v20 = v7;
    uint64_t v19 = ~v8;
    (*(void (**)(unsigned __int8 *))(v3 + 8))(a1);
    a1 = (unsigned __int8 *)((unint64_t)&v2[v10] & v19);
    uint64_t v18 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v20 + 8);
  }

  return v18(a1, v5);
}

uint64_t sub_2289D2374(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  unint64_t v12 = *(void *)(v8 + 64);
  if (v6 <= ((v6 + v10) & ~v10) + v12) {
    unint64_t v6 = ((v6 + v10) & ~v10) + v12;
  }
  if (v12 <= v6) {
    unint64_t v13 = v6;
  }
  else {
    unint64_t v13 = *(void *)(v8 + 64);
  }
  unsigned int v14 = a2[v13];
  unsigned int v15 = v14 - 3;
  if (v14 >= 3)
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        goto LABEL_15;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        goto LABEL_15;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_15;
      case 4:
        int v17 = *(_DWORD *)a2;
LABEL_15:
        int v18 = (v17 | (v15 << (8 * v13))) + 3;
        unsigned int v14 = v17 + 3;
        if (v13 < 4) {
          unsigned int v14 = v18;
        }
        break;
      default:
        break;
    }
  }
  if (v14 == 2)
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v9 + 16))(a1, a2, v7);
    char v19 = 2;
  }
  else if (v14 == 1)
  {
    (*(void (**)(uint64_t, unsigned __int8 *))(v5 + 16))(a1, a2);
    char v19 = 1;
  }
  else
  {
    uint64_t v20 = ~v10;
    (*(void (**)(uint64_t, unsigned __int8 *))(v5 + 16))(a1, a2);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))((v11 + a1) & v20, (unint64_t)&a2[v11] & v20, v7);
    char v19 = 0;
  }
  *(unsigned char *)(a1 + v13) = v19;
  return a1;
}

unsigned __int8 *sub_2289D2590(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v6 - 8);
    unint64_t v8 = *(void *)(v7 + 64);
    uint64_t v9 = *(void *)(v5 - 8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v11 = v8 + v10;
    unint64_t v12 = *(void *)(v9 + 64);
    if (v8 <= ((v8 + v10) & ~v10) + v12) {
      unint64_t v8 = ((v8 + v10) & ~v10) + v12;
    }
    if (v12 <= v8) {
      unint64_t v13 = v8;
    }
    else {
      unint64_t v13 = *(void *)(v9 + 64);
    }
    unsigned int v14 = a1[v13];
    unsigned int v15 = v14 - 3;
    if (v14 >= 3)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a1;
          goto LABEL_16;
        case 2:
          int v17 = *(unsigned __int16 *)a1;
          goto LABEL_16;
        case 3:
          int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_16;
        case 4:
          int v17 = *(_DWORD *)a1;
LABEL_16:
          int v18 = (v17 | (v15 << (8 * v13))) + 3;
          unsigned int v14 = v17 + 3;
          if (v13 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v19 = ~v10;
    if (v14 == 2)
    {
      uint64_t v20 = *(void (**)(void))(v9 + 8);
    }
    else if (v14 == 1)
    {
      uint64_t v20 = *(void (**)(void))(v7 + 8);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
      uint64_t v20 = *(void (**)(void))(v9 + 8);
    }
    v20();
    unsigned int v21 = a2[v13];
    unsigned int v22 = v21 - 3;
    if (v21 >= 3)
    {
      if (v13 <= 3) {
        uint64_t v23 = v13;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *a2;
          goto LABEL_32;
        case 2:
          int v24 = *(unsigned __int16 *)a2;
          goto LABEL_32;
        case 3:
          int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_32;
        case 4:
          int v24 = *(_DWORD *)a2;
LABEL_32:
          int v25 = (v24 | (v22 << (8 * v13))) + 3;
          unsigned int v21 = v24 + 3;
          if (v13 < 4) {
            unsigned int v21 = v25;
          }
          break;
        default:
          break;
      }
    }
    if (v21 == 2)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v9 + 16))(a1, a2, v5);
      char v26 = 2;
    }
    else if (v21 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      char v26 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((unint64_t)&a1[v11] & v19, (unint64_t)&a2[v11] & v19, v5);
      char v26 = 0;
    }
    a1[v13] = v26;
  }
  return a1;
}

uint64_t sub_2289D28B4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  unint64_t v12 = *(void *)(v8 + 64);
  if (v6 <= ((v6 + v10) & ~v10) + v12) {
    unint64_t v6 = ((v6 + v10) & ~v10) + v12;
  }
  if (v12 <= v6) {
    unint64_t v13 = v6;
  }
  else {
    unint64_t v13 = *(void *)(v8 + 64);
  }
  unsigned int v14 = a2[v13];
  unsigned int v15 = v14 - 3;
  if (v14 >= 3)
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        goto LABEL_15;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        goto LABEL_15;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_15;
      case 4:
        int v17 = *(_DWORD *)a2;
LABEL_15:
        int v18 = (v17 | (v15 << (8 * v13))) + 3;
        unsigned int v14 = v17 + 3;
        if (v13 < 4) {
          unsigned int v14 = v18;
        }
        break;
      default:
        break;
    }
  }
  if (v14 == 2)
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v9 + 32))(a1, a2, v7);
    char v19 = 2;
  }
  else if (v14 == 1)
  {
    (*(void (**)(uint64_t, unsigned __int8 *))(v5 + 32))(a1, a2);
    char v19 = 1;
  }
  else
  {
    uint64_t v20 = ~v10;
    (*(void (**)(uint64_t, unsigned __int8 *))(v5 + 32))(a1, a2);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))((v11 + a1) & v20, (unint64_t)&a2[v11] & v20, v7);
    char v19 = 0;
  }
  *(unsigned char *)(a1 + v13) = v19;
  return a1;
}

unsigned __int8 *sub_2289D2AD0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v6 - 8);
    unint64_t v8 = *(void *)(v7 + 64);
    uint64_t v9 = *(void *)(v5 - 8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v11 = v8 + v10;
    unint64_t v12 = *(void *)(v9 + 64);
    if (v8 <= ((v8 + v10) & ~v10) + v12) {
      unint64_t v8 = ((v8 + v10) & ~v10) + v12;
    }
    if (v12 <= v8) {
      unint64_t v13 = v8;
    }
    else {
      unint64_t v13 = *(void *)(v9 + 64);
    }
    unsigned int v14 = a1[v13];
    unsigned int v15 = v14 - 3;
    if (v14 >= 3)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a1;
          goto LABEL_16;
        case 2:
          int v17 = *(unsigned __int16 *)a1;
          goto LABEL_16;
        case 3:
          int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_16;
        case 4:
          int v17 = *(_DWORD *)a1;
LABEL_16:
          int v18 = (v17 | (v15 << (8 * v13))) + 3;
          unsigned int v14 = v17 + 3;
          if (v13 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v19 = ~v10;
    if (v14 == 2)
    {
      uint64_t v20 = *(void (**)(void))(v9 + 8);
    }
    else if (v14 == 1)
    {
      uint64_t v20 = *(void (**)(void))(v7 + 8);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
      uint64_t v20 = *(void (**)(void))(v9 + 8);
    }
    v20();
    unsigned int v21 = a2[v13];
    unsigned int v22 = v21 - 3;
    if (v21 >= 3)
    {
      if (v13 <= 3) {
        uint64_t v23 = v13;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *a2;
          goto LABEL_32;
        case 2:
          int v24 = *(unsigned __int16 *)a2;
          goto LABEL_32;
        case 3:
          int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_32;
        case 4:
          int v24 = *(_DWORD *)a2;
LABEL_32:
          int v25 = (v24 | (v22 << (8 * v13))) + 3;
          unsigned int v21 = v24 + 3;
          if (v13 < 4) {
            unsigned int v21 = v25;
          }
          break;
        default:
          break;
      }
    }
    if (v21 == 2)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v9 + 32))(a1, a2, v5);
      char v26 = 2;
    }
    else if (v21 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
      char v26 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&a1[v11] & v19, (unint64_t)&a2[v11] & v19, v5);
      char v26 = 0;
    }
    a1[v13] = v26;
  }
  return a1;
}

uint64_t sub_2289D2DF4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  unint64_t v6 = ((v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
  if (v3 > v6) {
    unint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (v5 <= v6) {
    unint64_t v5 = v6;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_24;
  }
  unint64_t v7 = v5 + 1;
  char v8 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 253) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v11 < 2)
    {
LABEL_24:
      unsigned int v13 = *((unsigned __int8 *)a1 + v5);
      if (v13 >= 3) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_24;
  }
LABEL_16:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 254;
}

void sub_2289D2F7C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  unint64_t v8 = ((v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + v7;
  if (v5 > v8) {
    unint64_t v8 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  }
  if (v7 > v8) {
    unint64_t v8 = *(void *)(v6 + 64);
  }
  size_t v9 = v8 + 1;
  if (a3 < 0xFE)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 253) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v11 = a2 - 254;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v8 != -1)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8 + 1);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_36:
        __break(1u);
        JUMPOUT(0x2289D3198);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_24;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      default:
LABEL_24:
        if (a2) {
LABEL_25:
        }
          a1[v8] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_2289D31C0(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = ((v2 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v2 > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  if (v4 <= v5) {
    unint64_t v4 = v5;
  }
  uint64_t v6 = a1[v4];
  int v7 = v6 - 3;
  if (v6 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v8 = v4;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_14;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_14:
        unsigned int v10 = (v9 | (v7 << (8 * v4))) + 3;
        LODWORD(v6) = v9 + 3;
        if (v4 >= 4) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v10;
        }
        break;
      default:
        return v6;
    }
  }
  return v6;
}

void sub_2289D32CC(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 2)
  {
    size_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    uint64_t v9 = *(void *)(*(void *)(a3 + 24) - 8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    size_t v11 = *(void *)(v9 + 64);
    if (v8 <= ((v8 + v10) & ~v10) + v11) {
      size_t v8 = ((v8 + v10) & ~v10) + v11;
    }
    if (v11 <= v8) {
      size_t v12 = v8;
    }
    else {
      size_t v12 = v11;
    }
    unsigned int v13 = a2 - 3;
    if (v12 < 4)
    {
      unsigned int v14 = v13 >> (8 * v12);
      int v15 = v13 & ~(-1 << (8 * v12));
      a1[v12] = v14 + 3;
      bzero(a1, v12);
      if (v12 == 3)
      {
        *(_WORD *)a1 = v15;
        a1[2] = BYTE2(v15);
      }
      else if (v12 == 2)
      {
        *(_WORD *)a1 = v15;
      }
      else
      {
        *a1 = v15;
      }
    }
    else
    {
      a1[v12] = 3;
      bzero(a1, v12);
      *(_DWORD *)a1 = v13;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v5 = *(void *)(v4 + 64);
    unint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    unint64_t v7 = ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
    if (v6 <= v7) {
      unint64_t v6 = v7;
    }
    if (v5 > v6) {
      unint64_t v6 = v5;
    }
    a1[v6] = a2;
  }
}

uint64_t type metadata accessor for ContentDataSource()
{
  return sub_22897D5C8();
}

id sub_2289D3490()
{
  id result = objc_msgSend(objc_allocWithZone((Class)BooksSettings), sel_init);
  qword_268284EB0 = (uint64_t)result;
  return result;
}

void __swiftcall BooksSettings.init()(BooksSettings *__return_ptr retstr)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  objc_msgSend(v1, sel_init);
}

id static BooksSettings.shared()()
{
  return sub_2289D3A30(&qword_268283EB0, (void **)&qword_268284EB0);
}

id BooksSettings.init()()
{
  uint64_t v1 = OBJC_IVAR___BooksSettings_defaults;
  uint64_t v2 = qword_268283EB8;
  uint64_t v3 = v0;
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_268284EB8;
  *(void *)&v3[v1] = qword_268284EB8;
  id v5 = v4;

  v7.receiver = v3;
  v7.super_class = (Class)BooksSettings;
  return objc_msgSendSuper2(&v7, sel_init);
}

unint64_t static NSUserDefaults.booksFilterBrightImagesKey.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static NSUserDefaults.booksMenuOnLeftKey.getter()
{
  return 0x6E4F756E654D4B42;
}

id sub_2289D3738()
{
  uint64_t v0 = (void *)sub_2289DEB90();

  return v0;
}

id sub_2289D3784()
{
  id result = sub_2289D37A4();
  qword_268284EB8 = (uint64_t)result;
  return result;
}

id sub_2289D37A4()
{
  uint64_t v0 = sub_2289DE880();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = objc_msgSend(self, sel_mainBundle);
  id v5 = objc_msgSend(v4, sel_bundlePath);

  uint64_t v6 = sub_2289DEBC0();
  uint64_t v8 = v7;

  _OWORD v18[2] = v6;
  v18[3] = v8;
  v18[0] = 0x736B6F6F42;
  v18[1] = 0xE500000000000000;
  sub_2289550F0();
  LOBYTE(v6) = sub_2289DF190();
  swift_bridgeObjectRelease();
  uint64_t v9 = self;
  uint64_t v10 = v9;
  if (v6)
  {
    id v11 = objc_msgSend(v9, sel_bu_groupUserDefaults);
    return v11;
  }
  else
  {
    unsigned int v13 = (void *)sub_2289DEB90();
    id v14 = objc_msgSend(self, sel_books);
    id v15 = objc_msgSend(v14, sel_containerURL);

    sub_2289DE840();
    uint64_t v16 = (void *)sub_2289DE820();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    id v17 = objc_msgSend(v10, sel_bu_createWithSuiteName_container_, v13, v16);

    return v17;
  }
}

id static NSUserDefaults.booksAppGroup.getter()
{
  return sub_2289D3A30(&qword_268283EB8, (void **)&qword_268284EB8);
}

id sub_2289D3A30(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;

  return v3;
}

id sub_2289D3A7C(uint64_t a1, uint64_t a2)
{
  return sub_2289D3AA0(a1, a2, &qword_268283EB8, (void **)&qword_268284EB8);
}

id sub_2289D3AA0(uint64_t a1, uint64_t a2, void *a3, void **a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  id v5 = *a4;

  return v5;
}

id sub_2289D3AF0(void *a1)
{
  return sub_2289D3BCC(a1);
}

id NSUserDefaults.booksMenuOnLeft.getter()
{
  uint64_t v1 = (void *)sub_2289DEB90();
  id v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  return v2;
}

void sub_2289D3B70(void *a1)
{
}

void NSUserDefaults.booksMenuOnLeft.setter()
{
}

id sub_2289D3BB0(void *a1)
{
  return sub_2289D3BCC(a1);
}

id sub_2289D3BCC(void *a1)
{
  id v1 = a1;
  id v2 = (void *)sub_2289DEB90();
  id v3 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  return v3;
}

id NSUserDefaults.booksFilterBrightImages.getter()
{
  id v1 = (void *)sub_2289DEB90();
  id v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  return v2;
}

void sub_2289D3C90(void *a1)
{
}

void sub_2289D3CAC(void *a1)
{
  id v1 = a1;
  id v2 = (void *)sub_2289DEED0();
  id v3 = (id)sub_2289DEB90();
  objc_msgSend(v1, sel_setValue_forKey_, v2, v3);
}

void NSUserDefaults.booksFilterBrightImages.setter()
{
}

void sub_2289D3D58()
{
  id v1 = (void *)sub_2289DEED0();
  id v2 = (id)sub_2289DEB90();
  objc_msgSend(v0, sel_setValue_forKey_, v1, v2);
}

void _sSo14NSUserDefaultsC14BookFoundationE29books_registerReadingSettingsyyFZ_0()
{
  id v0 = _sSo14NSUserDefaultsC14BookFoundationE05booksB16NeedingMigrationABSgyFZ_0();
  if (qword_268283EB8 != -1) {
    swift_once();
  }
  id v1 = (void *)qword_268284EB8;
  sub_228952BB0(&qword_268284ED0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2289E4580;
  *(void *)(inited + 32) = 0xD00000000000001BLL;
  *(void *)(inited + 40) = 0x80000002289E61A0;
  uint64_t v3 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 48) = 1;
  *(void *)(inited + 72) = v3;
  strcpy((char *)(inited + 80), "BKMenuOnLeft");
  *(unsigned char *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  *(void *)(inited + 120) = v3;
  *(unsigned char *)(inited + 96) = 0;
  sub_22898AA34(inited);
  id v4 = (void *)sub_2289DEA70();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_registerDefaults_, v4);

  if (v0)
  {
    id v5 = v0;
    _sSo14NSUserDefaultsC14BookFoundationE012booksMigrateC25ReadingSettingsToAppGroupyyABFZ_0(v5);
  }
}

char *sub_2289D3F1C()
{
  return sel_BKMenuOnLeft;
}

id sub_2289D3F28@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_BKMenuOnLeft);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2289D3F5C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setBKMenuOnLeft_, *a1);
}

char *sub_2289D3F70()
{
  return sel_BKSettingFilterBrightImages;
}

id sub_2289D3F7C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_BKSettingFilterBrightImages);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2289D3FB0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setBKSettingFilterBrightImages_, *a1);
}

unint64_t type metadata accessor for BooksSettings()
{
  unint64_t result = qword_268284EC8;
  if (!qword_268284EC8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268284EC8);
  }
  return result;
}

uint64_t MSeries.itemCountForDisplay.getter()
{
  return sub_2289D4018();
}

uint64_t MSeries.itemMinimumCountForDisplay.getter()
{
  return sub_2289D4018();
}

uint64_t sub_2289D4018()
{
  swift_getObjectType();
  uint64_t v0 = sub_2289D49E0(0);
  sub_2289D4D60();
  sub_2289B3B60(v0, MEMORY[0x263F8D6C8], (uint64_t)&v2);
  swift_bridgeObjectRelease();
  return v2;
}

id MSeries.authorCount.getter()
{
  swift_getObjectType();
  char v7 = 0;
  uint64_t v0 = sub_2289D49E0(0);
  uint64_t v1 = sub_228952BB0(&qword_268284000);
  sub_2289D4D60();
  sub_2289B3B60(v0, v1, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  uint64_t v2 = v6;
  sub_2289D4DB4();
  uint64_t v3 = sub_2289B3DD4((uint64_t)&v7, v2);
  swift_bridgeObjectRelease();
  if (!v3) {
    return 0;
  }
  id v4 = objc_msgSend(v3, sel_integerValue);

  return v4;
}

uint64_t MSeries.contentsForArtwork.getter()
{
  return sub_22896BAB0(@"contents-for-artwork");
}

uint64_t MSeries.assetsResourceSet.getter()
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v15);
  uint64_t v1 = BFMCatalogRequestRelationshipAudiobooks;
  if (v15 == 4) {
    uint64_t v1 = BFMCatalogRequestRelationshipBooks;
  }
  uint64_t v2 = *v1;
  uint64_t v3 = sub_22898B564();
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = sub_2289DEBC0();
    if (*(void *)(v4 + 16))
    {
      unint64_t v7 = sub_2289D7094(v5, v6);
      if (v8)
      {
        uint64_t v9 = *(void *)(*(void *)(v4 + 56) + 8 * v7);
        swift_retain();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (qword_268283E70 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_2289DEA10();
  sub_228952BF4(v10, (uint64_t)qword_268284188);
  id v11 = sub_2289DE9F0();
  os_log_type_t v12 = sub_2289DF0A0();
  if (os_log_type_enabled(v11, v12))
  {
    unsigned int v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned int v13 = 0;
    MEMORY[0x22A6A29E0](v13, -1, -1);
  }

  return 0;
}

uint64_t MSeries.currentSort.getter()
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v11);
  uint64_t v1 = BFMCatalogRequestRelationshipBooks;
  if (v11 == 1) {
    uint64_t v1 = BFMCatalogRequestRelationshipAudiobooks;
  }
  uint64_t v2 = *v1;
  uint64_t v3 = sub_22898B564();
  if (!v3)
  {
LABEL_10:

    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = sub_2289DEBC0();
  if (*(void *)(v4 + 16))
  {
    sub_2289D7094(v5, v6);
    if (v7)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = sub_228971D5C();
      if (v8)
      {
        uint64_t v9 = v8;
        sub_2289D710C();
        sub_2289B3B60(v9, MEMORY[0x263F8D310], (uint64_t)&v11);
        swift_release();

        swift_bridgeObjectRelease();
        return v11;
      }
      swift_release();
      goto LABEL_10;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t MSeries.mappedSeries.getter()
{
  unint64_t v0 = sub_2289D4FAC(@"mapped-series");
  if (!v0) {
    return 0;
  }
  unint64_t v1 = v0;
  uint64_t v2 = v0 & 0xFFFFFFFFFFFFFF8;
  if (!(v0 >> 62))
  {
    uint64_t result = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  uint64_t result = sub_2289DF380();
  if (!result)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_4:
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x22A6A1E70](0, v1);
    goto LABEL_7;
  }
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = *(void *)(v1 + 32);
    swift_retain();
LABEL_7:
    swift_bridgeObjectRelease();
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t MSeries.assetsEnrichedWithSeries.getter()
{
  unint64_t v1 = v0;
  if (!MSeries.assetsResourceSet.getter()) {
    return 0;
  }
  unint64_t v2 = sub_2289D4858((void (*)(void))type metadata accessor for MAsset);
  swift_release();
  if (!v2) {
    return 0;
  }
  id v3 = v1;
  uint64_t v4 = sub_2289D7D6C(v2);
  swift_bridgeObjectRelease();

  return v4;
}

uint64_t sub_2289D4608()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_228952BB0(&qword_2682843E0);
  sub_228971CBC();
  sub_2289B3B60(v1, v2, (uint64_t)&v12);
  uint64_t v3 = v12;
  if (v12)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v6 = *(void **)(v0 + 32);
        char v7 = *(unsigned char *)(v0 + 24);
        sub_228952BB0(&qword_268284F50);
        swift_allocObject();
        id v8 = v6;
        uint64_t v9 = swift_bridgeObjectRetain();
        if (sub_2289D59AC(v9, v7, v6))
        {
          MEMORY[0x22A6A19F0]();
          if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_2289DEE40();
          }
          sub_2289DEE80();
          sub_2289DEE30();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v10 = v12;
    }
    else
    {
      swift_retain();
      uint64_t v10 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v10;
}

uint64_t sub_2289D47F8()
{
  return sub_2289D4858((void (*)(void))type metadata accessor for MSeries);
}

uint64_t sub_2289D4810()
{
  return sub_2289D4858((void (*)(void))type metadata accessor for MAsset);
}

uint64_t sub_2289D4828()
{
  return sub_2289D4858((void (*)(void))type metadata accessor for MAuthor);
}

uint64_t sub_2289D4840()
{
  return sub_2289D4858((void (*)(void))type metadata accessor for MGenre);
}

uint64_t sub_2289D4858(void (*a1)(void))
{
  unint64_t v2 = sub_2289732E4();
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v2;
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (!(v2 >> 62))
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_4;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
LABEL_19:
    swift_bridgeObjectRelease();
    return v9;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_2289DF380();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_18;
  }
LABEL_4:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v7 = (id)MEMORY[0x22A6A1E70](i, v3);
      }
      else {
        id v7 = *(id *)(v3 + 8 * i + 32);
      }
      id v8 = v7;
      a1(0);
      if (swift_dynamicCastClass())
      {
        MEMORY[0x22A6A19F0]();
        if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_2289DEE40();
        }
        sub_2289DEE80();
        sub_2289DEE30();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v9 = v10;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_2289D49E0(char a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource_data);
  unint64_t v3 = 0xEA00000000007365;
  unint64_t v4 = 0x7475626972747461;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xED00007370696873;
      unint64_t v4 = 0x6E6F6974616C6572;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v4 = 0x7377656976;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v4 = 1635018093;
      break;
    case 4:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v4 = 1701869940;
      break;
    case 5:
      unint64_t v3 = 0xE200000000000000;
      unint64_t v4 = 25705;
      break;
    case 6:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v4 = 1717924456;
      break;
    case 7:
      unint64_t v3 = 0x80000002289E5110;
      unint64_t v4 = 0xD000000000000011;
      break;
    default:
      break;
  }
  *(void *)&v9[0] = v4;
  *((void *)&v9[0] + 1) = v3;
  swift_bridgeObjectRetain();
  sub_2289DF200();
  if (*(void *)(v2 + 16) && (unint64_t v5 = sub_2289D7160((uint64_t)v10), (v6 & 1) != 0)) {
    sub_228952C2C(*(void *)(v2 + 56) + 32 * v5, (uint64_t)v9);
  }
  else {
    memset(v9, 0, sizeof(v9));
  }
  swift_bridgeObjectRelease();
  sub_228952AFC((uint64_t)v10);
  sub_228952BB0(&qword_26AECF7D8);
  sub_228952BB0(&qword_268284000);
  if (swift_dynamicCast()) {
    return v8;
  }
  else {
    return 0;
  }
}

uint64_t sub_2289D4BA4(char a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource_data);
  unint64_t v3 = 0xEA00000000007365;
  unint64_t v4 = 0x7475626972747461;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xED00007370696873;
      unint64_t v4 = 0x6E6F6974616C6572;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v4 = 0x7377656976;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v4 = 1635018093;
      break;
    case 4:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v4 = 1701869940;
      break;
    case 5:
      unint64_t v3 = 0xE200000000000000;
      unint64_t v4 = 25705;
      break;
    case 6:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v4 = 1717924456;
      break;
    case 7:
      unint64_t v3 = 0x80000002289E5110;
      unint64_t v4 = 0xD000000000000011;
      break;
    default:
      break;
  }
  *(void *)&v9[0] = v4;
  *((void *)&v9[0] + 1) = v3;
  swift_bridgeObjectRetain();
  sub_2289DF200();
  if (*(void *)(v2 + 16) && (unint64_t v5 = sub_2289D7160((uint64_t)v10), (v6 & 1) != 0)) {
    sub_228952C2C(*(void *)(v2 + 56) + 32 * v5, (uint64_t)v9);
  }
  else {
    memset(v9, 0, sizeof(v9));
  }
  swift_bridgeObjectRelease();
  sub_228952AFC((uint64_t)v10);
  sub_228952BB0(&qword_26AECF7D8);
  if (swift_dynamicCast()) {
    return v8;
  }
  else {
    return 0;
  }
}

unint64_t sub_2289D4D60()
{
  unint64_t result = qword_268284ED8;
  if (!qword_268284ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284ED8);
  }
  return result;
}

unint64_t sub_2289D4DB4()
{
  unint64_t result = qword_268284EE0;
  if (!qword_268284EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268284EE0);
  }
  return result;
}

uint64_t MSeries.trimmed()()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = *(void *)(v0 + OBJC_IVAR____TtC14BookFoundation9MResource_data);
  LOBYTE(v10[0]) = 1;
  sub_2289D7EE4();
  swift_bridgeObjectRetain();
  sub_2289DF200();
  sub_2289D75D8((uint64_t)v8, v10);
  sub_228952AFC((uint64_t)v8);
  sub_22896EABC((uint64_t)v10, &qword_26AECF7D8);
  LOBYTE(v10[0]) = 2;
  sub_2289DF200();
  sub_2289D75D8((uint64_t)v8, v10);
  sub_228952AFC((uint64_t)v8);
  sub_22896EABC((uint64_t)v10, &qword_26AECF7D8);
  uint64_t v3 = v11;
  unint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource_config + 8);
  v8[0] = *(unsigned char *)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource_config);
  uint64_t v9 = v4;
  unint64_t v5 = *(uint64_t (**)(uint64_t, unsigned char *))(ObjectType + 128);
  id v6 = v4;
  return v5(v3, v8);
}

uint64_t MSeries.assets.getter()
{
  if (!MSeries.assetsResourceSet.getter()) {
    return 0;
  }
  uint64_t v0 = sub_2289D4858((void (*)(void))type metadata accessor for MAsset);
  swift_release();
  return v0;
}

uint64_t MSeries.genres.getter()
{
  return sub_22896BAE0(@"genres");
}

uint64_t sub_2289D4FAC(void *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_22898B564();
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = sub_2289DEBC0();
    if (*(void *)(v4 + 16))
    {
      sub_2289D7094(v5, v6);
      if (v7)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v8 = sub_2289D4608();
        swift_release();
        return v8;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (qword_268283E70 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_2289DEA10();
  sub_228952BF4(v10, (uint64_t)qword_268284188);
  id v11 = a1;
  uint64_t v12 = sub_2289DE9F0();
  os_log_type_t v13 = sub_2289DF0A0();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v20 = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v16 = sub_2289DEBC0();
    sub_22897ACBC(v16, v17, &v20);
    sub_2289DF150();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    unint64_t v18 = sub_22898C79C(ObjectType);
    sub_22897ACBC(v18, v19, &v20);
    sub_2289DF150();
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    MEMORY[0x22A6A29E0](v15, -1, -1);
    MEMORY[0x22A6A29E0](v14, -1, -1);
  }
  else
  {
  }
  return 0;
}

id MSeries.init(with:config:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = sub_228952BB0(&qword_2682841E0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2289DE880();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v39 = *a2;
  os_log_type_t v13 = (void *)*((void *)a2 + 1);
  LOBYTE(v43) = 0;
  id v14 = v2;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_228952BB0(&qword_268284000);
  sub_22897B700();
  sub_2289B3B60(a1, v15, (uint64_t)&v41);
  swift_bridgeObjectRelease();
  uint64_t v16 = (uint64_t)v41;
  if (!v41)
  {

LABEL_12:
    if (qword_26AECF788 != -1) {
      swift_once();
    }
    if (qword_268283E70 != -1) {
      swift_once();
    }
    uint64_t v20 = sub_2289DEA10();
    sub_228952BF4(v20, (uint64_t)qword_268284188);
    swift_bridgeObjectRetain();
    unsigned int v21 = sub_2289DE9F0();
    os_log_type_t v22 = sub_2289DF0A0();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      id v40 = (id)swift_slowAlloc();
      id v41 = v40;
      *(_DWORD *)uint64_t v23 = 136315394;
      unint64_t v24 = sub_2289D6234(ObjectType);
      uint64_t v43 = sub_22897ACBC(v24, v25, (uint64_t *)&v41);
      sub_2289DF150();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_2289DEA90();
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      uint64_t v43 = sub_22897ACBC(v26, v28, (uint64_t *)&v41);
      sub_2289DF150();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22894E000, v21, v22, "Invalid data for %s: %s", (uint8_t *)v23, 0x16u);
      id v29 = v40;
      swift_arrayDestroy();
      MEMORY[0x22A6A29E0](v29, -1, -1);
      MEMORY[0x22A6A29E0](v23, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for MSeries();
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v38 = v10;
  id v40 = v13;
  LOBYTE(v43) = 3;
  sub_2289D4D60();
  swift_bridgeObjectRetain();
  sub_2289B3B60(v16, MEMORY[0x263F8D4F8], (uint64_t)&v41);
  swift_bridgeObjectRelease();
  char v17 = (char)v41;
  if (v41 == 2)
  {
    swift_bridgeObjectRelease();
LABEL_11:

    goto LABEL_12;
  }
  id v37 = v14;
  LOBYTE(v43) = 7;
  swift_bridgeObjectRetain();
  sub_2289B3B60(v16, MEMORY[0x263F8D310], (uint64_t)&v41);
  swift_bridgeObjectRelease();
  id v18 = v42;
  if (!v42)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    id v14 = v37;
    goto LABEL_11;
  }
  id v36 = v41;
  LOBYTE(v43) = 8;
  swift_bridgeObjectRetain();
  sub_2289B3B60(v16, MEMORY[0x263F8D310], (uint64_t)&v41);
  swift_bridgeObjectRelease();
  if (!v42)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_2289DE860();
  swift_bridgeObjectRelease();
  uint64_t v19 = v38;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v8, 1, v9) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_22896EABC((uint64_t)v8, &qword_2682841E0);
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v12, v8, v9);
  uint64_t v32 = v37;
  *((unsigned char *)v37 + OBJC_IVAR____TtC14BookFoundation7MSeries_isOrdered) = v17 & 1;
  v32[OBJC_IVAR____TtC14BookFoundation7MSeries_kind] = 2;
  uint64_t v33 = &v32[OBJC_IVAR____TtC14BookFoundation7MSeries_name];
  void *v33 = v36;
  v33[1] = v18;
  (*(void (**)(unsigned char *, char *, uint64_t))(v19 + 16))(&v32[OBJC_IVAR____TtC14BookFoundation7MSeries_url], v12, v9);
  LOBYTE(v43) = 1;
  sub_2289B3B60(v16, MEMORY[0x263F8D4F8], (uint64_t)&v41);
  swift_bridgeObjectRelease();
  v32[OBJC_IVAR____TtC14BookFoundation7MSeries_hasUniqueAuthors] = v41 & 1;

  LOBYTE(v41) = v39;
  id v42 = v40;
  id v30 = MResource.init(with:config:)(a1, (char *)&v41);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v19 + 8);
  id v35 = v30;
  v34(v12, v9);
  if (v30) {

  }
  return v30;
}

BOOL sub_2289D5904()
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v2);
  return v2 == 4;
}

BOOL sub_2289D5958()
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v2);
  return v2 == 1;
}

uint64_t sub_2289D59AC(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  sub_228952BB0(&qword_268284F58);
  sub_2289D858C();
  sub_2289B3B60(a1, MEMORY[0x263F8D310], (uint64_t)&v26);
  swift_bridgeObjectRelease();
  unint64_t v8 = v27;
  if (v27)
  {
    uint64_t v9 = v26;
    uint64_t v10 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0) {
      uint64_t v10 = v26 & 0xFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      swift_bridgeObjectRetain();
      sub_2289B3B60(a1, MEMORY[0x263F8D310], (uint64_t)&v26);
      swift_bridgeObjectRelease();
      unint64_t v11 = v27;
      if (v27)
      {
        uint64_t v25 = v26;
        swift_bridgeObjectRetain();
        sub_2289B3B60(a1, MEMORY[0x263F8D310], (uint64_t)&v26);
        swift_bridgeObjectRelease();
        uint64_t v12 = v27;
        if (v27)
        {
          uint64_t v13 = v26;
          swift_bridgeObjectRetain();
          sub_2289DA77C(v13, v12, (char *)&v26);
          char v14 = v26;
          if (v26 == 6)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v24 = static MResourceType.classType(for:)(v13, v12);
            swift_bridgeObjectRelease();
            if (v24)
            {
              type metadata accessor for MSeries();
              if (swift_dynamicCastMetatype())
              {
                *(void *)(v4 + 40) = v9;
                *(void *)(v4 + 48) = v8;
                *(unsigned char *)(v4 + 56) = v14;
                *(void *)(v4 + 64) = v25;
                *(void *)(v4 + 72) = v11;
                uint64_t result = v4;
                *(void *)(v4 + 16) = a1;
                *(unsigned char *)(v4 + 24) = a2;
                *(void *)(v4 + 32) = a3;
                return result;
              }
            }
          }
        }
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
  }

  if (qword_26AECF788 != -1) {
    swift_once();
  }
  if (qword_268283E70 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_2289DEA10();
  sub_228952BF4(v15, (uint64_t)qword_268284188);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_2289DE9F0();
  os_log_type_t v17 = sub_2289DF0A0();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v26 = v19;
    *(_DWORD *)id v18 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_2289DEA90();
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    sub_22897ACBC(v20, v22, &v26);
    sub_2289DF150();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22894E000, v16, v17, "Invalid data for sparse resource: %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A6A29E0](v19, -1, -1);
    MEMORY[0x22A6A29E0](v18, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_228952BB0(&qword_268284F50);
  swift_deallocPartialClassInstance();
  return 0;
}

void sub_2289D5DDC()
{
}

unint64_t sub_2289D5E38(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x52746E65746E6F63;
      break;
    case 3:
      unint64_t result = 0x65726564724F7369;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 1684957547;
      break;
    case 6:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 7:
      unint64_t result = 1701667182;
      break;
    case 8:
      unint64_t result = 7107189;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2289D5F54(char *a1, char *a2)
{
  return sub_228965708(*a1, *a2);
}

uint64_t sub_2289D5F60()
{
  return sub_2289DF590();
}

uint64_t sub_2289D5FA8()
{
  return sub_2289B0DE0();
}

uint64_t sub_2289D5FB0()
{
  return sub_2289DF590();
}

uint64_t sub_2289D5FF4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2289D8540();
  *a1 = result;
  return result;
}

unint64_t sub_2289D6024@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_2289D5E38(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t MSeries.hasUniqueAuthors.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14BookFoundation7MSeries_hasUniqueAuthors);
}

uint64_t MSeries.isOrdered.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14BookFoundation7MSeries_isOrdered);
}

void MSeries.kind.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR____TtC14BookFoundation7MSeries_kind);
}

uint64_t MSeries.name.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14BookFoundation7MSeries_name);
  swift_bridgeObjectRetain();
  return v1;
}