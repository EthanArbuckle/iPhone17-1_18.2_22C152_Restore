uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  unsigned char v13[24];
  uint64_t vars8;

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        v12 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v12;
      }
      else
      {
        v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(void *)(v4 - 8);
      v7 = *(void *)(v5 - 8);
      v8 = v7;
      v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t *__swift_allocate_boxed_opaque_existential_0Tm(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t objectdestroy_8Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void std::__tree<unsigned long long>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<unsigned long long>::destroy(*a1);
    std::__tree<unsigned long long>::destroy(a1[1]);
    operator delete(a1);
  }
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    long long v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        __n128 result = (uint64_t *)swift_release();
        *long long v3 = v12;
      }
      else
      {
        v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *__n128 result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *long long v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t SparseValues.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t SparseValues.startIndex.getter(uint64_t a1)
{
  return 0;
}

uint64_t SparseValues.endIndex.getter(uint64_t a1)
{
  return sub_1D1657194(a1, MEMORY[0x1E4FBB318]);
}

uint64_t SparseValues.isEmpty.getter(uint64_t a1)
{
  (*(void (**)(void, void))(*(void *)(a1 + 24) + 32))(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_getAssociatedTypeWitness();
  sub_1D17BE260();
  swift_getWitnessTable();
  char v1 = sub_1D17BE4A0();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t SparseValues.count.getter(uint64_t a1)
{
  return sub_1D1657194(a1, MEMORY[0x1E4FBB310]);
}

uint64_t sub_1D1657194(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 24) + 32))(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = a2(v3, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  return v5;
}

Swift::Int __swiftcall SparseValues.index(after:)(Swift::Int after)
{
  return after + 1;
}

Swift::Int __swiftcall SparseValues.index(before:)(Swift::Int before)
{
  return before - 1;
}

Swift::Int __swiftcall SparseValues.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  (*(void (**)(void))(*(void *)(v2 + 24) + 32))(*(void *)(v2 + 16));
  swift_bridgeObjectRelease();
  Swift::Int result = _ + offsetBy;
  if (__OFADD__(_, offsetBy)) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall SparseValues.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  (*(void (**)(void))(*(void *)(v3 + 24) + 32))(*(void *)(v3 + 16));
  Swift::Int v7 = swift_bridgeObjectRelease();
  Swift::Int v9 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v9 > 0 || v9 <= offsetBy)
    {
LABEL_9:
      Swift::Int v7 = _ + offsetBy;
      if (!__OFADD__(_, offsetBy))
      {
        Swift::Bool v8 = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v9 < 0 || v9 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  Swift::Int v7 = 0;
  Swift::Bool v8 = 1;
LABEL_13:
  result.value = v7;
  result.is_nil = v8;
  return result;
}

uint64_t SparseValues.subscript.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790]();
  Swift::Bool v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 40))(v5, v10);
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(result + 16) > a2)
  {
    uint64_t v12 = *(void *)(result + 8 * a2 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v5, v10);
    swift_getAssociatedTypeWitness();
    sub_1D17BE2C0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D16574B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41842C8](a1, a2, a3, a4, MEMORY[0x1E4FBB590]);
}

void *sub_1D16574BC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result - 1;
  return result;
}

void *sub_1D16574CC(void *result)
{
  return result;
}

Swift::Int sub_1D16574DC@<X0>(Swift::Int *a1@<X0>, Swift::Int a2@<X1>, Swift::Int *a3@<X8>)
{
  Swift::Int result = SparseValues.index(_:offsetBy:)(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D1657508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];
  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1D165757C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = SparseValues.startIndex.getter(a1);
  *a2 = 0;
  return result;
}

uint64_t sub_1D16575A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = SparseValues.endIndex.getter(a1);
  *a2 = result;
  return result;
}

void (*sub_1D16575CC(uint64_t **a1, unint64_t *a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6[4] = TupleTypeMetadata2;
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  v6[5] = v9;
  uint64_t v10 = (char *)malloc(*(void *)(v9 + 64));
  v6[6] = (uint64_t)v10;
  v6[7] = (uint64_t)sub_1D1657794(v6, *a2, a3);
  *(void *)uint64_t v10 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(&v10[*(int *)(TupleTypeMetadata2 + 48)], v12, AssociatedTypeWitness);
  return sub_1D165771C;
}

void sub_1D165771C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  (*(void (**)(void, void))(*(void *)(*a1 + 40) + 8))(*(void *)(*a1 + 48), *(void *)(*a1 + 32));
  uint64_t v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);
  free((void *)v3);
}

void (*sub_1D1657794(uint64_t *a1, unint64_t a2, uint64_t a3))(void *a1)
{
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v7 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v7;
  Swift::Bool v8 = malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  *Swift::Bool v8 = SparseValues.subscript.getter((uint64_t)v8 + *(int *)(TupleTypeMetadata2 + 48), a2, a3);
  return sub_1D1657898;
}

void sub_1D1657898(void *a1)
{
  char v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t sub_1D16578E8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v3 = MEMORY[0x1E4FBB590];
  return MEMORY[0x1F41842C0](a1, WitnessTable, v3);
}

void sub_1D165795C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

Swift::Int sub_1D165796C@<X0>(Swift::Int *a1@<X0>, Swift::Int a2@<X1>, Swift::Int *a3@<X2>, uint64_t a4@<X8>)
{
  Swift::Int_optional v6 = SparseValues.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = v6.value;
  *(unsigned char *)(a4 + 8) = v6.is_nil;
  return v6.value;
}

void *sub_1D16579B0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result + 1;
  return result;
}

void *sub_1D16579C0(void *result)
{
  return result;
}

uint64_t sub_1D16579D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  SparseValues.startIndex.getter(a1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  swift_getWitnessTable();
  uint64_t result = sub_1D17BE9F0();
  *(void *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t sub_1D1657AB0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t sub_1D1657B04()
{
  return 2;
}

uint64_t sub_1D1657B0C(uint64_t a1)
{
  swift_getWitnessTable();
  uint64_t v3 = sub_1D165C0E0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

uint64_t sub_1D1657B9C()
{
  return sub_1D17BE0B0();
}

uint64_t SparseArrayProtocol.reduce<A>(into:update:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[2] = a4;
  v8[3] = a5;
  v8[4] = a6;
  v8[5] = a7;
  v8[6] = a1;
  v8[7] = a2;
  v8[8] = a3;
  return (*(uint64_t (**)(void *(*)@<X0>(uint64_t@<X8>), void *, uint64_t, uint64_t, uint64_t))(a6 + 24))(sub_1D1657D20, v8, a5, a4, a6);
}

void *sub_1D1657C2C@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, char *)@<X2>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for SparseBuffer();
  return SparseBuffer.reduce<A>(into:update:)(a1, a2, v6, a3);
}

void *sub_1D1657D20@<X0>(uint64_t a1@<X8>)
{
  return sub_1D1657C2C(*(void *)(v1 + 48), *(void (**)(uint64_t, char *))(v1 + 56), a1);
}

uint64_t SparseArrayProtocol.union<A>(with:combine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a7;
  v12[6] = a1;
  v12[7] = a2;
  v12[8] = a3;
  uint64_t v9 = *(uint64_t (**)(uint64_t (*)(_OWORD *), void *, uint64_t, uint64_t, uint64_t))(a6 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for SparseArray();
  return v9(sub_1D1657F48, v12, v10, a4, a6);
}

uint64_t sub_1D1657E2C(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v10 = a1[1];
  v23[0] = *a1;
  v23[1] = v10;
  long long v11 = a1[3];
  v23[2] = a1[2];
  v23[3] = v11;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  uint64_t v19 = a8;
  v20 = v23;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v12 = *(uint64_t (**)(uint64_t (*)@<X0>(_OWORD *@<X0>, void *@<X8>), unsigned char *, uint64_t, uint64_t, uint64_t))(a8 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for SparseArray();
  return v12(sub_1D165C324, v15, v13, a6, a8);
}

uint64_t sub_1D1657F48(_OWORD *a1)
{
  return sub_1D1657E2C(a1, v1[6], v1[7], v1[8], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1D1657F70@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  long long v8 = a2[1];
  v14[4] = *a2;
  v14[5] = v8;
  long long v9 = a2[3];
  v14[6] = a2[2];
  v14[7] = v9;
  long long v10 = a1[1];
  v14[0] = *a1;
  v14[1] = v10;
  long long v11 = a1[3];
  v14[2] = a1[2];
  v14[3] = v11;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for SparseBuffer();
  return SparseBuffer.union(with:combine:)((uint64_t)v14, a3, a4, v12, a5);
}

uint64_t SparseArrayProtocol.intersection<A, B>(with:combine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = a6;
  v14[5] = a7;
  v14[6] = a8;
  v14[7] = a9;
  _OWORD v14[8] = a1;
  v14[9] = a2;
  v14[10] = a3;
  long long v11 = *(uint64_t (**)(uint64_t (*)(_OWORD *), void *, uint64_t, uint64_t, uint64_t))(a7 + 24);
  uint64_t v12 = type metadata accessor for SparseArray();
  return v11(sub_1D1658100, v14, v12, a4, a7);
}

uint64_t sub_1D1658100(_OWORD *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  long long v6 = a1[1];
  v17[0] = *a1;
  v17[1] = v6;
  long long v7 = a1[3];
  v17[2] = a1[2];
  v17[3] = v7;
  v11[2] = v2;
  v11[3] = v3;
  long long v12 = *(_OWORD *)(v1 + 32);
  uint64_t v13 = v5;
  uint64_t v14 = v4;
  v15 = v17;
  long long v16 = *(_OWORD *)(v1 + 72);
  long long v8 = *(uint64_t (**)(uint64_t (*)(uint64_t), void *, uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v9 = type metadata accessor for SparseArray();
  return v8(sub_1D165C2B8, v11, v9, v3, v5);
}

uint64_t sub_1D16581D0@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, void *a6@<X8>, uint64_t a7, uint64_t a8)
{
  long long v9 = a2[1];
  v20[4] = *a2;
  v20[5] = v9;
  long long v10 = a2[3];
  v20[6] = a2[2];
  v20[7] = v10;
  long long v11 = a1[1];
  v20[0] = *a1;
  v20[1] = v11;
  long long v12 = a1[3];
  v20[2] = a1[2];
  v20[3] = v12;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for SparseBuffer();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return SparseBuffer.intersection<A, B>(with:combine:)((uint64_t)v20, a3, a4, v13, AssociatedTypeWitness, a5, AssociatedConformanceWitness, a8, a6);
}

uint64_t SparseArrayProtocol.mapSparseValues<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v11[2] = a3;
  v11[3] = a4;
  void v11[4] = a5;
  v11[5] = a6;
  v11[6] = a1;
  v11[7] = a2;
  long long v8 = *(uint64_t (**)(uint64_t (*)@<X0>(void *@<X8>), void *, uint64_t, uint64_t, uint64_t))(a5 + 24);
  uint64_t v9 = type metadata accessor for SparseArray();
  return v8(sub_1D16584A4, v11, v9, a3, a5);
}

uint64_t sub_1D16583BC@<X0>(uint64_t a1@<X4>, void *a2@<X8>)
{
  return sub_1D16B8C64(a1, a2);
}

uint64_t sub_1D16584A4@<X0>(void *a1@<X8>)
{
  return sub_1D16583BC(*(void *)(v1 + 24), a1);
}

uint64_t SparseArrayProtocol<>.transposed()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v102 = a4;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v141 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness, v8);
  uint64_t v137 = (uint64_t)&v100 - v9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v136 = *(char **)(TupleTypeMetadata2 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](TupleTypeMetadata2, v10);
  v129 = (uint64_t *)((char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v11, v13);
  v139 = (uint64_t *)((char *)&v100 - v14);
  uint64_t v15 = swift_checkMetadataState();
  uint64_t v135 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15, v16);
  v116 = (char *)&v100 - v17;
  uint64_t v18 = type metadata accessor for SparseValues();
  v128 = *(void (***)(char *, uint64_t, uint64_t))(v18 - 8);
  MEMORY[0x1F4188790](v18, v19);
  v115 = (char *)&v100 - v20;
  swift_getWitnessTable();
  uint64_t v132 = v18;
  uint64_t v119 = sub_1D17BE9F0();
  v122 = *(void **)(v119 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v119, v21);
  v114 = (char *)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22, v24);
  v143 = (char *)&v100 - v25;
  uint64_t v118 = swift_getTupleTypeMetadata2();
  v127 = *(void (***)(uint64_t *, uint64_t))(v118 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v118, v26);
  v113 = (uint64_t *)((char *)&v100 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v30 = MEMORY[0x1F4188790](v27, v29);
  v120 = (uint64_t *)((char *)&v100 - v31);
  uint64_t v32 = a1;
  uint64_t v134 = a1;
  uint64_t v33 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v30, v32);
  v35 = (char *)&v100 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = a2;
  uint64_t v36 = type metadata accessor for SparseValues();
  uint64_t v37 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36, v38);
  v40 = (char *)&v100 - v39;
  swift_getWitnessTable();
  uint64_t v41 = sub_1D17BE9F0();
  uint64_t v103 = *(void *)(v41 - 8);
  uint64_t v43 = MEMORY[0x1F4188790](v41, v42);
  v45 = (char *)&v100 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v43, v46);
  v121 = (char *)&v100 - v47;
  uint64_t v131 = a3;
  uint64_t v117 = v15;
  uint64_t v48 = v36;
  swift_getAssociatedConformanceWitness();
  uint64_t v138 = AssociatedTypeWitness;
  uint64_t v49 = type metadata accessor for SparseArray();
  swift_getTupleTypeMetadata2();
  sub_1D17BE1A0();
  uint64_t v133 = v49;
  uint64_t v124 = sub_1D17BDE70();
  uint64_t v50 = v134;
  (*(void (**)(char *, double (*)@<D0>(_OWORD *@<X8>), uint64_t))(v33 + 16))(v35, v142, v134);
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v40, v35, v50);
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v45, v40, v36);
  (*(void (**)(void))(*(void *)(v36 + 24) + 32))(*(void *)(v36 + 16));
  swift_bridgeObjectRelease();
  v51 = v121;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v36);
  *(void *)&v45[*(int *)(v41 + 36)] = 0;
  (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v51, v45, v41);
  uint64_t v101 = v41;
  uint64_t v52 = *(int *)(v41 + 36);
  unint64_t v53 = *(void *)&v51[v52];
  uint64_t v54 = SparseValues.endIndex.getter(v48);
  unint64_t v55 = v53;
  if (v53 == v54)
  {
    v142 = 0;
LABEL_3:
    (*(void (**)(char *, uint64_t))(v103 + 8))(v51, v101);
    uint64_t v56 = v133;
    uint64_t WitnessTable = swift_getWitnessTable();
    SparseArray.init(_:)(v124, v56, WitnessTable, v102);
    return sub_1D165B3A4((uint64_t)v142);
  }
  else
  {
    v142 = 0;
    v59 = 0;
    uint64_t v60 = v118;
    v123 = (char *)v120 + *(int *)(v118 + 48);
    v112 = (void (**)(char *, uint64_t, uint64_t))(v135 + 16);
    v111 = v127 + 1;
    v110 = (void (**)(char *, char *, uint64_t))(v135 + 32);
    v109 = (void (**)(char *, char *, uint64_t))(v128 + 2);
    v108 = (void (**)(char *, uint64_t))(v128 + 1);
    v107 = (void (**)(char *, char *, uint64_t))(v122 + 4);
    v128 = (void (**)(char *, uint64_t, uint64_t))(v141 + 16);
    v127 = (void (**)(uint64_t *, uint64_t))(v136 + 8);
    v126 = (void (**)(uint64_t, char *, uint64_t))(v141 + 32);
    v125 = (void (**)(uint64_t, uint64_t))(v141 + 8);
    v104 = (void (**)(char *, uint64_t))(v122 + 1);
    uint64_t v61 = v132;
    uint64_t v62 = v119;
    v63 = v143;
    uint64_t v106 = v48;
    uint64_t v105 = v52;
    while (1)
    {
      v122 = v59;
      v70 = v113;
      uint64_t v71 = (uint64_t)v113 + *(int *)(v60 + 48);
      uint64_t v72 = SparseValues.subscript.getter(v71, v55, v48);
      uint64_t *v70 = v72;
      v73 = v120;
      uint64_t *v120 = v72;
      uint64_t v74 = v117;
      (*v112)(v123, v71, v117);
      (*v111)(v70, v60);
      ++*(void *)&v51[v52];
      uint64_t v141 = *v73;
      v75 = *v110;
      v76 = v116;
      (*v110)(v116, v123, v74);
      v77 = v115;
      v75(v115, v76, v74);
      v78 = v114;
      (*v109)(v114, v77, v61);
      (*(void (**)(void))(*(void *)(v61 + 24) + 32))(*(void *)(v61 + 16));
      swift_bridgeObjectRelease();
      (*v108)(v77, v61);
      *(void *)&v78[*(int *)(v62 + 36)] = 0;
      (*v107)(v63, v78, v62);
      uint64_t v79 = *(int *)(v62 + 36);
      unint64_t v80 = *(void *)&v63[v79];
      v81 = v63;
      if (v80 != SparseValues.endIndex.getter(v61)) {
        break;
      }
      v64 = v122;
      v65 = v142;
      uint64_t v66 = v124;
LABEL_6:
      uint64_t v124 = v66;
      v142 = v65;
      uint64_t v62 = v119;
      (*v104)(v81, v119);
      v63 = v81;
      v51 = v121;
      uint64_t v52 = v105;
      unint64_t v67 = *(void *)&v121[v105];
      uint64_t v48 = v106;
      uint64_t v68 = SparseValues.endIndex.getter(v106);
      unint64_t v55 = v67;
      v59 = v64;
      BOOL v69 = v67 == v68;
      uint64_t v60 = v118;
      if (v69) {
        goto LABEL_3;
      }
    }
    v136 = (char *)v139 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v83 = v137;
    uint64_t v82 = v138;
    v65 = v142;
    uint64_t v66 = v124;
    uint64_t v135 = v79;
    while (1)
    {
      v142 = v65;
      uint64_t v85 = TupleTypeMetadata2;
      uint64_t v86 = v61;
      v87 = v129;
      uint64_t v88 = (uint64_t)v129 + *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v89 = SparseValues.subscript.getter(v88, v80, v86);
      uint64_t *v87 = v89;
      v90 = v139;
      uint64_t *v139 = v89;
      v91 = v136;
      (*v128)(v136, v88, v82);
      v92 = v143;
      (*v127)(v87, v85);
      ++*(void *)&v92[v79];
      uint64_t v93 = *v90;
      (*v126)(v83, v91, v82);
      v64 = (void *)swift_allocObject();
      uint64_t v94 = v130;
      v64[2] = v134;
      v64[3] = v94;
      v64[4] = v131;
      sub_1D165B3A4((uint64_t)v142);
      swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v145 = v66;
      sub_1D165AB04(v93);
      if (__OFADD__(*(void *)(v66 + 16), (v95 & 1) == 0)) {
        break;
      }
      char v96 = v95;
      uint64_t v97 = v133;
      sub_1D17BEA20();
      char v98 = sub_1D17BEA00();
      uint64_t v66 = v145;
      uint64_t v82 = v138;
      if (v98)
      {
        sub_1D165AB04(v93);
        if ((v96 & 1) != (v99 & 1)) {
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      if ((v96 & 1) == 0)
      {
        sub_1D1659264(&v145);
        uint64_t v144 = v93;
        sub_1D17BEA10();
      }
      swift_bridgeObjectRelease();
      uint64_t v83 = v137;
      SparseArray.append(offset:value:)(v141, v137, v97);
      (*v125)(v83, v82);
      uint64_t v79 = v135;
      v81 = v143;
      unint64_t v80 = *(void *)&v143[v135];
      uint64_t v61 = v132;
      uint64_t v84 = SparseValues.endIndex.getter(v132);
      v65 = sub_1D165B398;
      if (v80 == v84) {
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_17:
    uint64_t result = sub_1D17BEC60();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for SparseValues()
{
  return __swift_instantiateGenericMetadata();
}

double sub_1D1659264@<D0>(_OWORD *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1D17BE1A0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return SparseArray.init(arrayLiteral:)(v3, AssociatedTypeWitness, AssociatedConformanceWitness, a1);
}

uint64_t + infix<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1D1659358(a1, a2, a3, a4, a5, a6, a7, (uint64_t)sub_1D165B3B4);
}

uint64_t - infix<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1D1659358(a1, a2, a3, a4, a5, a6, a7, (uint64_t)sub_1D165B3CC);
}

uint64_t sub_1D1659358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v15 = a6;
  uint64_t v16 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return SparseArrayProtocol.union<A>(with:combine:)(a2, a8, (uint64_t)&v11, v12, v13, v14, v15);
}

uint64_t SparseArrayProtocol<>.sum()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness, v8);
  uint64_t v11 = &v14[-v10];
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v20 = a1;
  uint64_t v21 = AssociatedTypeWitness;
  uint64_t v22 = a2;
  uint64_t v23 = AssociatedConformanceWitness;
  uint64_t v24 = v11;
  uint64_t v25 = sub_1D165B3E4;
  uint64_t v26 = v14;
  (*(void (**)(void *(*)@<X0>(uint64_t@<X8>), unsigned char *, uint64_t, uint64_t, uint64_t))(a2 + 24))(sub_1D1657D20, v19, AssociatedTypeWitness, a1, a2);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v11, AssociatedTypeWitness);
}

uint64_t SparseArrayProtocol<>.sum(along:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    if (a1 == 1)
    {
      SparseArrayProtocol<>.transposed()(a2, a3, a4, v16);
      v15[7] = v16[0];
      v15[8] = v16[1];
      swift_getAssociatedTypeWitness();
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      type metadata accessor for SparseArray();
      swift_getWitnessTable();
      uint64_t v12 = type metadata accessor for SparseArray();
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v14 = swift_getWitnessTable();
      SparseArrayProtocol<>.sum(along:)(0, v12, WitnessTable, v14, a5);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      type metadata accessor for MatrixAxis(0);
      uint64_t result = sub_1D17BEBF0();
      __break(1u);
    }
  }
  else
  {
    MEMORY[0x1F4188790](0, a2);
    v15[2] = a2;
    v15[3] = a3;
    v15[4] = a4;
    v15[5] = a5;
    swift_getAssociatedTypeWitness();
    v16[2] = a2;
    v16[3] = swift_getAssociatedTypeWitness();
    v16[4] = a3;
    v16[5] = swift_getAssociatedConformanceWitness();
    v16[6] = (uint64_t)sub_1D165B458;
    v16[7] = (uint64_t)v15;
    uint64_t v9 = *(uint64_t (**)(uint64_t (*)@<X0>(void *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t))(a3 + 24);
    uint64_t v10 = type metadata accessor for SparseArray();
    return v9(sub_1D16584A4, v16, v10, a2, a3);
  }
  return result;
}

uint64_t * infix<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  uint64_t v14 = a6;
  uint64_t v15 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return SparseArrayProtocol.intersection<A, B>(with:combine:)(a2, (uint64_t)sub_1D165B4C8, (uint64_t)v10, v11, v12, AssociatedTypeWitness, v13, v14, AssociatedConformanceWitness);
}

void * infix<A>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  v23[1] = a1;
  uint64_t v24 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness, v12);
  uint64_t v14 = (char *)v23 - v13;
  v23[0] = a5;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v17 = a2;
  swift_getAssociatedConformanceWitness();
  sub_1D17BEC00();
  sub_1D17BEBA0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(a5) = sub_1D17BDFA0();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  if (a5)
  {
    uint64_t v19 = sub_1D17BE1A0();
    SparseArray.init(arrayLiteral:)(v19, AssociatedTypeWitness, AssociatedConformanceWitness, v24);
  }
  else
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
    Vector.init(elements:)(v20, &v25);
    static Vector<A>.*= infix(_:_:)(&v25, v17, AssociatedTypeWitness, v23[0]);
    uint64_t v21 = v25;
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
    SparseArray.init(values:offsets:)(v21, v22, AssociatedTypeWitness, v24);
  }
}

double *= infix<A>(_:_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a1[1];
  v14[0] = *a1;
  v14[1] = v10;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for SparseArray();
  uint64_t WitnessTable = swift_getWitnessTable();
  * infix<A, B>(_:_:)((uint64_t)v14, a2, v11, a3, WitnessTable, a4, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double result = *(double *)&v15;
  *(_OWORD *)a1 = v15;
  return result;
}

uint64_t SparseArrayProtocol<>.scalingRows(with:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v16 = *a1;
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for SparseArray();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = swift_getWitnessTable();
  return SparseArrayProtocol.intersection<A, B>(with:combine:)((uint64_t)&v16, (uint64_t)sub_1D165B4CC, (uint64_t)v11, a2, v7, v7, a3, WitnessTable, v9);
}

uint64_t SparseArrayProtocol<>.scalingColumns(with:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  SparseArrayProtocol<>.transposed()(a2, a3, a4, &v16);
  uint64_t v14 = v16;
  uint64_t v15 = v17;
  long long v13 = *a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for SparseArray();
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for SparseArray();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = swift_getWitnessTable();
  SparseArrayProtocol<>.scalingRows(with:)(&v13, v9, WitnessTable, v11, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = v18;
  uint64_t v17 = v19;
  SparseArrayProtocol<>.transposed()(v9, WitnessTable, v11, a6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SparseArrayProtocol.mapIntersection<A, B>(with:initialValue:update:combine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v12[2] = a7;
  v12[3] = a8;
  v12[4] = a9;
  v12[5] = a10;
  v12[6] = a11;
  v12[7] = a1;
  v12[8] = a2;
  v12[9] = a3;
  void v12[10] = a4;
  v12[11] = a5;
  v12[12] = a6;
  return (*(uint64_t (**)(uint64_t (*)(_OWORD *), void *, uint64_t, uint64_t, uint64_t))(a10 + 24))(sub_1D165B54C, v12, a9, a7, a10);
}

uint64_t sub_1D165A044(_OWORD *a1, _OWORD *a2, uint64_t a3, void (*a4)(uint64_t, char *), uint64_t a5, void (*a6)(char *, char *), uint64_t a7)
{
  long long v10 = a2[1];
  v18[4] = *a2;
  v18[5] = v10;
  long long v11 = a2[3];
  v18[6] = a2[2];
  v18[7] = v11;
  long long v12 = a1[1];
  v18[0] = *a1;
  v18[1] = v12;
  long long v13 = a1[3];
  v18[2] = a1[2];
  v18[3] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for SparseBuffer();
  return SparseBuffer.mapIntersection<A>(with:initialValue:update:combine:)((uint64_t)v18, a3, a4, a5, a6, a7, v14);
}

uint64_t SparseArrayProtocol.dotProduct<A>(with:add:multiply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void v14[2] = a6;
  v14[3] = a7;
  v14[4] = a8;
  v14[5] = a9;
  v14[6] = a1;
  v14[7] = a2;
  _OWORD v14[8] = a3;
  v14[9] = a4;
  v14[10] = a5;
  long long v11 = *(uint64_t (**)(uint64_t (*)(_OWORD *), void *, uint64_t, uint64_t, uint64_t))(a8 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v11(sub_1D165B5E0, v14, AssociatedTypeWitness, a6, a8);
}

uint64_t sub_1D165A1FC(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  long long v11 = a1[1];
  v17[0] = *a1;
  v17[1] = v11;
  long long v12 = a1[3];
  v17[2] = a1[2];
  v17[3] = v12;
  v16[2] = a7;
  v16[3] = a8;
  v16[4] = a9;
  v16[5] = a10;
  v16[6] = v17;
  v16[7] = a3;
  uint64_t v16[8] = a4;
  v16[9] = a5;
  v16[10] = a6;
  long long v13 = *(uint64_t (**)(uint64_t (*)(_OWORD *), void *, uint64_t, uint64_t, uint64_t))(a10 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v13(sub_1D165C240, v16, AssociatedTypeWitness, a8, a10);
}

uint64_t sub_1D165A2D0(_OWORD *a1, _OWORD *a2, void (*a3)(uint64_t, char *), uint64_t a4, void (*a5)(char *, char *), uint64_t a6)
{
  long long v10 = a2[1];
  v16[4] = *a2;
  v16[5] = v10;
  long long v11 = a2[3];
  v16[6] = a2[2];
  v16[7] = v11;
  long long v12 = a1[1];
  v16[0] = *a1;
  v16[1] = v12;
  long long v13 = a1[3];
  v16[2] = a1[2];
  v16[3] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for SparseBuffer();
  return SparseBuffer.dotProduct(with:add:multiply:)((uint64_t)v16, a3, a4, a5, a6, v14);
}

uint64_t SparseArrayProtocol<>.dotProduct<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = v16;
  uint64_t v10 = v17;
  uint64_t v11 = v18;
  uint64_t v12 = v19;
  uint64_t v13 = v20;
  uint64_t v14 = AssociatedTypeWitness;
  return SparseArrayProtocol.dotProduct<A>(with:add:multiply:)(a1, (uint64_t)sub_1D165B3B4, (uint64_t)v15, (uint64_t)sub_1D165B4C8, (uint64_t)v8, v16, v17, v18, v19);
}

uint64_t SparseArrayProtocol.sparseKroneckerMap<A, B>(with:combine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void v14[2] = a4;
  v14[3] = a5;
  v14[4] = a6;
  v14[5] = a7;
  v14[6] = a8;
  v14[7] = a9;
  _OWORD v14[8] = a1;
  v14[9] = a2;
  v14[10] = a3;
  uint64_t v11 = *(uint64_t (**)(uint64_t (*)(_OWORD *), void *, uint64_t, uint64_t, uint64_t))(a7 + 24);
  type metadata accessor for SparseArray();
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for SparseArray();
  return v11(sub_1D165B700, v14, v12, a4, a7);
}

uint64_t sub_1D165A58C(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  long long v11 = a1[1];
  v17[0] = *a1;
  v17[1] = v11;
  long long v12 = a1[3];
  v17[2] = a1[2];
  v17[3] = v12;
  v16[2] = a5;
  v16[3] = a6;
  v16[4] = a7;
  v16[5] = a8;
  v16[6] = a9;
  v16[7] = a10;
  _OWORD v16[8] = v17;
  v16[9] = a3;
  v16[10] = a4;
  uint64_t v13 = *(uint64_t (**)(uint64_t (*)(uint64_t), void *, uint64_t, uint64_t, uint64_t))(a9 + 24);
  type metadata accessor for SparseArray();
  swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for SparseArray();
  return v13(sub_1D165C214, v16, v14, a6, a9);
}

uint64_t sub_1D165A684@<X0>(void *a1@<X8>)
{
  return SparseBuffer.sparseKroneckerMap<A, B>(with:combine:)(a1);
}

uint64_t *sub_1D165A7D0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 - *result;
  if (*a2 >= (unint64_t)*result)
  {
    if (*a2 - *result >= 0) {
      return (uint64_t *)(v4 == 0);
    }
  }
  else
  {
    if (v2 - v3 >= 0)
    {
      uint64_t v4 = v3 - v2;
      return (uint64_t *)(v4 == 0);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1D165A808@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1D165A818(void *a1@<X8>)
{
  *a1 = *v1;
}

unint64_t sub_1D165A824(uint64_t a1)
{
  uint64_t v2 = sub_1D17BE7E0();
  return sub_1D165ABF4(a1, v2);
}

unint64_t sub_1D165A868(uint64_t a1, uint64_t a2)
{
  sub_1D17BED20();
  sub_1D17BE020();
  uint64_t v4 = sub_1D17BED80();
  return sub_1D165ACBC(a1, a2, v4);
}

unint64_t sub_1D165A8E0(uint64_t a1)
{
  sub_1D17BED20();
  sub_1D17BED30();
  uint64_t v2 = sub_1D17BED80();
  return sub_1D165ADA0(a1, v2);
}

unint64_t sub_1D165A94C(uint64_t a1)
{
  sub_1D17BDD40();
  sub_1D165C0E4((unint64_t *)&qword_1EA6514E0);
  uint64_t v2 = sub_1D17BDF00();
  return sub_1D165AE3C(a1, v2);
}

unint64_t sub_1D165A9D0(uint64_t a1)
{
  uint64_t v2 = sub_1D17BE5B0();
  return sub_1D165B14C(a1, v2, (unint64_t *)&qword_1EA652D30);
}

unint64_t sub_1D165AA20(uint64_t a1)
{
  sub_1D17BED20();
  (*(void (**)(unsigned char *))(*(void *)a1 + 272))(v4);
  uint64_t v2 = sub_1D17BED80();
  return sub_1D165AFE8(a1, v2);
}

unint64_t sub_1D165AAB4(uint64_t a1)
{
  uint64_t v2 = sub_1D17BE5B0();
  return sub_1D165B14C(a1, v2, (unint64_t *)&qword_1EA6514F0);
}

unint64_t sub_1D165AB04(uint64_t a1)
{
  uint64_t v2 = sub_1D17BED10();
  return sub_1D165ADA0(a1, v2);
}

unint64_t sub_1D165AB40(double a1)
{
  uint64_t v2 = sub_1D17BED10();
  return sub_1D165B260(v2, a1);
}

unint64_t sub_1D165AB88(unint64_t a1)
{
  sub_1D17BED20();
  sub_1D17BED30();
  uint64_t v2 = sub_1D17BED80();
  return sub_1D165B2F8(a1, v2);
}

unint64_t sub_1D165ABF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1D165C164(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x1D25F91A0](v9, a1);
      sub_1D165C1C0((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1D165ACBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1D17BEBC0() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1D17BEBC0() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1D165ADA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1D165AE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t v4 = sub_1D17BDD40();
  uint64_t v5 = *(void *)(v4 - 8);
  v7.n128_f64[0] = MEMORY[0x1F4188790](v4, v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v2;
  uint64_t v10 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = a2 & ~v10;
  uint64_t v20 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v12 = ~v10;
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    uint64_t v14 = v5 + 16;
    uint64_t v13 = v15;
    uint64_t v16 = *(void *)(v14 + 56);
    do
    {
      v13(v9, *(void *)(v22 + 48) + v16 * v11, v4, v7);
      sub_1D165C0E4(&qword_1EA6518F0);
      char v17 = sub_1D17BDFA0();
      (*(void (**)(char *, uint64_t))(v14 - 8))(v9, v4);
      if (v17) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }
    while (((*(void *)(v20 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

unint64_t sub_1D165AFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v6 = v2;
    uint64_t v8 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v2 + 48) + 8 * i) + 280);
    swift_retain();
    LOBYTE(v8) = v8(a1);
    swift_release();
    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        uint64_t v10 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v6 + 48) + 8 * i) + 280);
        swift_retain();
        char v11 = v10(a1);
        swift_release();
        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1D165B14C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_1D165C128(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = sub_1D17BE5C0();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = sub_1D17BE5C0();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1D165B260(uint64_t a1, double a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a1 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = *(void *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      uint64_t v7 = ~v4;
      for (unint64_t result = (result + 1) & v7;
            ((*(void *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1D165B2F8(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
    return result;
  }
  uint64_t v6 = ~v4;
  while (1)
  {
    unint64_t v7 = *(void *)(*(void *)(v2 + 48) + 8 * result);
    if (v7 > a1) {
      break;
    }
    unint64_t v8 = a1 - v7;
    if ((uint64_t)(a1 - v7) < 0) {
      goto LABEL_12;
    }
LABEL_7:
    if (v8)
    {
      unint64_t result = (result + 1) & v6;
      if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result)) {
        continue;
      }
    }
    return result;
  }
  if ((uint64_t)(v7 - a1) >= 0)
  {
    unint64_t v8 = a1 - v7;
    goto LABEL_7;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1D165B388()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

double sub_1D165B398@<D0>(_OWORD *a1@<X8>)
{
  return sub_1D1659264(a1);
}

uint64_t sub_1D165B3A4(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1D165B3B4(uint64_t a1, uint64_t a2)
{
  return sub_1D165B618(a1, a2, MEMORY[0x1E4FBBCE0]);
}

uint64_t sub_1D165B3CC(uint64_t a1, uint64_t a2)
{
  return sub_1D165B618(a1, a2, MEMORY[0x1E4FBBCE8]);
}

uint64_t sub_1D165B3E4()
{
  return sub_1D17BEA70();
}

void type metadata accessor for MatrixAxis(uint64_t a1)
{
}

uint64_t sub_1D165B458()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return SparseArrayProtocol<>.sum()(AssociatedTypeWitness, v2, v1);
}

void sub_1D165B4CC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v7 = *(void *)(v3 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  * infix<A>(_:_:)(a1, a2, AssociatedTypeWitness, v8, v7, a3);
}

uint64_t sub_1D165B54C(_OWORD *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 96);
  long long v6 = a1[1];
  v17[0] = *a1;
  v17[1] = v6;
  long long v7 = a1[3];
  v17[2] = a1[2];
  v17[3] = v7;
  v10[2] = v3;
  v10[3] = v2;
  long long v11 = *(_OWORD *)(v1 + 32);
  uint64_t v12 = v4;
  uint64_t v13 = v17;
  long long v8 = *(_OWORD *)(v1 + 80);
  long long v14 = *(_OWORD *)(v1 + 64);
  long long v15 = v8;
  uint64_t v16 = v5;
  return (*(uint64_t (**)(uint64_t (*)(_OWORD *), void *, void))(v4 + 24))(sub_1D165C278, v10, v11);
}

uint64_t sub_1D165B5E0(_OWORD *a1)
{
  return sub_1D165A1FC(a1, v1[6], v1[7], v1[8], v1[9], v1[10], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1D165B618(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, void))
{
  uint64_t v7 = *(void *)(v3 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return a3(a1, a2, AssociatedTypeWitness, *(void *)(v7 + 8));
}

uint64_t sub_1D165B68C()
{
  return sub_1D17BE3C0();
}

uint64_t sub_1D165B700(_OWORD *a1)
{
  return sub_1D165A58C(a1, v1[8], v1[9], v1[10], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1D165B738()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D165B754()
{
  return sub_1D165B8FC();
}

unint64_t sub_1D165B76C()
{
  unint64_t result = qword_1EA651438[0];
  if (!qword_1EA651438[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA651438);
  }
  return result;
}

uint64_t sub_1D165B7C0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D165B824()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D165B840()
{
  return sub_1D165B8FC();
}

uint64_t sub_1D165B858()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D165B8BC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D165B8D8()
{
  return MEMORY[0x1E4FBB568];
}

uint64_t sub_1D165B8E4()
{
  return sub_1D165B8FC();
}

uint64_t sub_1D165B8FC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D165B948()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D165B964()
{
  return swift_getWitnessTable();
}

uint64_t dispatch thunk of SparseArrayProtocol.withBuffer<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of SparseArrayProtocol.sparseValues.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SparseArrayProtocol.sparseValueIndices.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_1D165B9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t sub_1D165B9D8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1D165BA68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1D165BB20(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1D165BB4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1D165BB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1D165BBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1D165BC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1D165BC8C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_1D165BDE8(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1D165C000);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for SeededRandomNumberGenerator(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SeededRandomNumberGenerator(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for KGElementIdentifierSetIndex(uint64_t a1)
{
}

void type metadata accessor for KGElementIdentifier(uint64_t a1)
{
}

void sub_1D165C098(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1D165C0E4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1D17BDD40();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D165C128(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1D165C164(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1D165C1C0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1D165C214(uint64_t a1)
{
  return sub_1D165C2E4(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void))sub_1D165A684);
}

uint64_t sub_1D165C240(_OWORD *a1)
{
  return sub_1D165A2D0(a1, *(_OWORD **)(v1 + 48), *(void (**)(uint64_t, char *))(v1 + 56), *(void *)(v1 + 64), *(void (**)(char *, char *))(v1 + 72), *(void *)(v1 + 80));
}

uint64_t sub_1D165C278(_OWORD *a1)
{
  return sub_1D165A044(a1, *(_OWORD **)(v1 + 56), *(void *)(v1 + 64), *(void (**)(uint64_t, char *))(v1 + 72), *(void *)(v1 + 80), *(void (**)(char *, char *))(v1 + 88), *(void *)(v1 + 96));
}

uint64_t sub_1D165C2B8(uint64_t a1)
{
  return sub_1D165C2E4(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void))sub_1D16581D0);
}

uint64_t sub_1D165C2E4(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void, void, void))
{
  return a2(a1, v2[8], v2[9], v2[10], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_1D165C324@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  return sub_1D1657F70(a1, *(_OWORD **)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), a2);
}

ValueMetadata *type metadata accessor for AnyNode()
{
  return &type metadata for AnyNode;
}

unint64_t sub_1D165C370(uint64_t a1)
{
  return sub_1D165C4B4(a1, &qword_1EA651578);
}

unint64_t sub_1D165C37C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    char v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651560);
  uint64_t v2 = sub_1D17BEB10();
  char v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1D166075C(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1D165A868(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    int v11 = (uint64_t *)(v3[6] + 16 * result);
    *int v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1D16607C4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D165C4A8(uint64_t a1)
{
  return sub_1D165C4B4(a1, (uint64_t *)&unk_1EA6515E0);
}

unint64_t sub_1D165C4B4(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    char v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  char v3 = (void *)sub_1D17BEB10();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t result = sub_1D165A868(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    int v11 = (uint64_t *)(v3[6] + 16 * result);
    *int v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D165C5CC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651600);
  uint64_t v2 = (void *)sub_1D17BEB10();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    long long v18 = *(_OWORD *)(v4 + 1);
    char v8 = *((unsigned char *)v4 + 24);
    uint64_t v9 = v4[4];
    uint64_t v10 = v4[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1D1660A34(v9);
    unint64_t result = sub_1D165A868(v5, v6);
    if (v12) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v13 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v13 = v5;
    v13[1] = v6;
    uint64_t v14 = v2[7] + 48 * result;
    *(void *)uint64_t v14 = v7;
    *(_OWORD *)(v14 + 8) = v18;
    *(unsigned char *)(v14 + 24) = v8;
    *(void *)(v14 + 32) = v9;
    *(void *)(v14 + 40) = v10;
    uint64_t v15 = v2[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v2[2] = v17;
    v4 += 8;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D165C73C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD272E0);
  uint64_t v2 = (void *)sub_1D17BEB10();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1D165A868(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D165C858(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D40);
  uint64_t v2 = (void *)sub_1D17BEB10();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_1D165C34C((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D165C964(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA6515F0);
  uint64_t v2 = (void *)sub_1D17BEB10();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = sub_1D165A9D0((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t DirectedBinaryAdjacency.adjacency.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

KnowledgeGraphKit::DirectedBinaryAdjacency __swiftcall DirectedBinaryAdjacency.init()()
{
  uint64_t v1 = v0;
  result.adjacency.targetsBySource._rawValue = (void *)sub_1D165F754(MEMORY[0x1E4FBC860]);
  v1->adjacency.targetsBySource._rawValue = result.adjacency.targetsBySource._rawValue;
  return result;
}

KnowledgeGraphKit::DirectedBinaryAdjacency __swiftcall DirectedBinaryAdjacency.init(adjacency:)(KnowledgeGraphKit::DirectedBinaryAdjacency adjacency)
{
  *uint64_t v1 = *(void *)adjacency.adjacency.targetsBySource._rawValue;
  return adjacency;
}

void DirectedBinaryAdjacency.sources.getter(uint64_t *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_1D165E5B8(v2, a1);
}

uint64_t DirectedBinaryAdjacency.targets.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  id v4 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  uint64_t v7 = v3;
  uint64_t v8 = v5;
  uint64_t result = sub_1D165CB78(&v7, (uint64_t)&v8);
  *a1 = v8;
  return result;
}

uint64_t sub_1D165CB78(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(*a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  uint64_t v19 = MEMORY[0x1E4FBC840] + 8;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_21;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_21:
    uint64_t v16 = *(void *)(*(void *)(v3 + 56) + 8 * v12);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      id v17 = *(id *)(*(void *)a2 + 16);
      objc_msgSend(v17, sel_mutableCopy);
      sub_1D17BE690();
      swift_unknownObjectRelease();
      sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
      swift_dynamicCast();

      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = v20;
      *(void *)a2 = v18;
      swift_release();
    }
    objc_msgSend(*(id *)(*(void *)a2 + 16), sel_unionWithIdentifierSet_, *(void *)(v16 + 16), v19);
    uint64_t result = swift_release();
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v8) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t DirectedBinaryAdjacency.enumerateTargetsBySource(with:)(void (*a1)(uint64_t *, uint64_t *, char *))
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *v1;
  char v20 = 0;
  uint64_t v4 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (v7)
  {
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v9 << 6);
LABEL_5:
    uint64_t v12 = 8 * v11;
    uint64_t v13 = *(void *)(*(void *)(v3 + 48) + v12);
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + v12);
    uint64_t v19 = v13;
    swift_retain();
    a1(&v19, &v18, &v20);
    swift_release();
    if (v20 == 1) {
      return swift_release();
    }
  }
  int64_t v14 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v14 >= v8) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v4 + 8 * v14);
  ++v9;
  if (v15) {
    goto LABEL_20;
  }
  int64_t v9 = v14 + 1;
  if (v14 + 1 >= v8) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v4 + 8 * v9);
  if (v15) {
    goto LABEL_20;
  }
  int64_t v9 = v14 + 2;
  if (v14 + 2 >= v8) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v4 + 8 * v9);
  if (v15)
  {
LABEL_20:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v9 << 6);
    goto LABEL_5;
  }
  int64_t v16 = v14 + 3;
  if (v16 < v8)
  {
    unint64_t v15 = *(void *)(v4 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v9 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          break;
        }
        if (v9 >= v8) {
          return swift_release();
        }
        unint64_t v15 = *(void *)(v4 + 8 * v9);
        ++v16;
        if (v15) {
          goto LABEL_20;
        }
      }
LABEL_23:
      __break(1u);
    }
    int64_t v9 = v16;
    goto LABEL_20;
  }
  return swift_release();
}

uint64_t DirectedBinaryAdjacency.sourcesCount.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

uint64_t sub_1D165CF6C@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = sub_1D165F754(MEMORY[0x1E4FBC860]);
  unint64_t v16 = v4;
  uint64_t v5 = *(void **)(v3 + 16);
  swift_retain();
  id v6 = objc_msgSend(v5, sel_startIndex);
  uint64_t v8 = v7;
  if (v6 != objc_msgSend(*(id *)(v3 + 16), sel_endIndex))
  {
    do
    {
      id v9 = objc_msgSend(*(id *)(v3 + 16), sel_indexAfterIndex_, v6, v8);
      uint64_t v8 = v10;
      id v12 = v6;
      id v13 = v6;
      ElementIdentifierTupleSet.insert(_:)(&v15, &v14, (uint64_t *)&v13, (uint64_t *)&v12);
      id v6 = v9;
    }
    while (v9 != objc_msgSend(*(id *)(v3 + 16), sel_endIndex));
    unint64_t v4 = v16;
  }
  uint64_t result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t DirectedBinaryAdjacency.intersectingTargets(with:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_1D165D530(a1, (void (*)(uint64_t *, unint64_t *, uint64_t))sub_1D165F854, a2);
}

unint64_t DirectedBinaryAdjacency.setTargets(_:for:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = v2;
  swift_retain();
  return ElementIdentifierTupleSet.subscript.setter(&v5, &v4);
}

uint64_t DirectedBinaryAdjacency.intersectingSources(with:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  id v6 = (void *)sub_1D165F754(MEMORY[0x1E4FBC860]);
  uint64_t v49 = v6;
  if ((uint64_t)objc_msgSend(*(id *)(v4 + 16), sel_count) >= *(void *)(v5 + 16))
  {
    uint64_t v48 = (void *)v5;
    swift_retain();
    sub_1D165FAD8((uint64_t *)&v48, v4, (uint64_t *)&v49);
    uint64_t result = swift_release();
    id v6 = v49;
    goto LABEL_5;
  }
  v45 = a2;
  uint64_t v7 = *(void **)(v4 + 16);
  swift_retain();
  id v8 = objc_msgSend(v7, sel_startIndex);
  uint64_t v10 = v9;
  unint64_t v11 = &selRef_writeDataToURL_error_;
  if (v8 == objc_msgSend(*(id *)(v4 + 16), sel_endIndex))
  {
LABEL_3:
    uint64_t result = swift_release();
    a2 = v45;
LABEL_5:
    *a2 = v6;
    return result;
  }
  id v13 = &selRef_writeDataToURL_error_;
  id v14 = v8;
  while (1)
  {
    id v47 = objc_msgSend(*(id *)(v4 + 16), v13[353], v14, v10);
    uint64_t v10 = v16;
    if (*(void *)(v5 + 16) && (unint64_t v17 = sub_1D165A8E0((uint64_t)v8), (v18 & 1) != 0))
    {
      uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      swift_retain();
    }
    else
    {
      id v20 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
      swift_bridgeObjectRetain();
      id v21 = objc_msgSend(v20, sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = v21;
      swift_bridgeObjectRelease();
    }
    unsigned __int8 v22 = objc_msgSend(*(id *)(v19 + 16), sel_isEmpty);
    unsigned __int8 v23 = v22;
    if (v6[2])
    {
      sub_1D165A8E0((uint64_t)v8);
      if (v23)
      {
        char v25 = v24;
        swift_release();
        if (v25)
        {
          unint64_t v26 = sub_1D165A8E0((uint64_t)v8);
          if (v27)
          {
            unint64_t v28 = v26;
            uint64_t v48 = v6;
            if (!swift_isUniquelyReferenced_nonNull_native())
            {
              sub_1D16A6448();
              id v6 = v48;
            }
            sub_1D16A8E0C(v28, (uint64_t)v6);
            swift_release();
            swift_bridgeObjectRelease();
          }
        }
        goto LABEL_9;
      }
    }
    else if (v22)
    {
      swift_release();
      goto LABEL_9;
    }
    uint64_t v46 = v10;
    uint64_t v29 = v5;
    uint64_t v30 = v4;
    uint64_t v31 = v11;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v48 = v6;
    unint64_t v34 = sub_1D165A8E0((uint64_t)v8);
    uint64_t v35 = v6[2];
    BOOL v36 = (v33 & 1) == 0;
    uint64_t v37 = v35 + v36;
    if (__OFADD__(v35, v36)) {
      break;
    }
    char v38 = v33;
    if (v6[3] >= v37)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        id v6 = v48;
        if ((v33 & 1) == 0) {
          goto LABEL_30;
        }
      }
      else
      {
        sub_1D16A6448();
        id v6 = v48;
        if ((v38 & 1) == 0) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      sub_1D16A1F40(v37, isUniquelyReferenced_nonNull_native);
      unint64_t v39 = sub_1D165A8E0((uint64_t)v8);
      if ((v38 & 1) != (v40 & 1)) {
        goto LABEL_36;
      }
      unint64_t v34 = v39;
      id v6 = v48;
      if ((v38 & 1) == 0)
      {
LABEL_30:
        v6[(v34 >> 6) + 8] |= 1 << v34;
        uint64_t v41 = 8 * v34;
        *(void *)(v6[6] + v41) = v8;
        *(void *)(v6[7] + v41) = v19;
        uint64_t v42 = v6[2];
        BOOL v43 = __OFADD__(v42, 1);
        uint64_t v44 = v42 + 1;
        if (v43) {
          goto LABEL_35;
        }
        v6[2] = v44;
        goto LABEL_8;
      }
    }
    uint64_t v15 = v6[7];
    swift_release();
    *(void *)(v15 + 8 * v34) = v19;
LABEL_8:
    swift_bridgeObjectRelease();
    unint64_t v11 = v31;
    uint64_t v4 = v30;
    uint64_t v5 = v29;
    uint64_t v10 = v46;
    id v13 = &selRef_writeDataToURL_error_;
LABEL_9:
    id v14 = v47;
    id v8 = v47;
    if (v47 == [*(id *)(v4 + 16) v11[352]]) {
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

uint64_t DirectedBinaryAdjacency.targets(forSourceIdentifier:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_1D165A8E0(*a1), (v6 & 1) != 0))
  {
    *a2 = *(void *)(*(void *)(v4 + 56) + 8 * v5);
    return swift_retain();
  }
  else
  {
    id v8 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
    swift_bridgeObjectRetain();
    id v9 = objc_msgSend(v8, sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v9;
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v10;
  }
  return result;
}

uint64_t DirectedBinaryAdjacency.subtractingTargets(with:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_1D165D530(a1, (void (*)(uint64_t *, unint64_t *, uint64_t))sub_1D165FEA4, a2);
}

uint64_t sub_1D165D530@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *, unint64_t *, uint64_t)@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v8 = *v3;
  unint64_t v9 = sub_1D165F754(MEMORY[0x1E4FBC860]);
  swift_retain();
  a2(&v8, &v9, v6);
  uint64_t result = swift_release();
  *a3 = v9;
  return result;
}

uint64_t DirectedBinaryAdjacency.subtractingSources(with:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *v2;
  unint64_t v7 = sub_1D165F754(MEMORY[0x1E4FBC860]);
  swift_retain();
  sub_1D166011C(&v6, v4, (uint64_t *)&v7);
  uint64_t result = swift_release();
  *a2 = v7;
  return result;
}

KnowledgeGraphKit::DirectedBinaryAdjacency __swiftcall DirectedBinaryAdjacency.joinOnTargets(_:)(KnowledgeGraphKit::DirectedBinaryAdjacency a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *v2;
  uint64_t v6 = *(void *)a1.adjacency.targetsBySource._rawValue;
  uint64_t v7 = v4;
  static ElementIdentifierTupleSet.joinOnTargets(_:_:)(&v7, &v6, &v8);
  *uint64_t v3 = v8;
  return result;
}

Swift::Bool __swiftcall DirectedBinaryAdjacency.contains(source:target:)(KnowledgeGraphKit::ElementIdentifier source, KnowledgeGraphKit::ElementIdentifier target)
{
  uint64_t v3 = *v2;
  if (*(void *)(v3 + 16)
    && (uint64_t v4 = *(void *)target.rawValue, v5 = sub_1D165A8E0(*(void *)source.rawValue), (v6 & 1) != 0))
  {
    return objc_msgSend(*(id *)(*(void *)(*(void *)(v3 + 56) + 8 * v5) + 16), sel_containsIdentifier_, v4);
  }
  else
  {
    return 0;
  }
}

uint64_t DirectedBinaryAdjacency.targets(forSources:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  if (objc_msgSend(*(id *)(*a1 + 16), sel_count) == (id)1)
  {
    char v6 = *(void **)(v4 + 16);
    swift_retain();
    id v7 = objc_msgSend(v6, sel_startIndex);
    id v8 = objc_msgSend(*(id *)(v4 + 16), sel_endIndex);
    uint64_t result = swift_release();
    if (v7 == v8)
    {
      __break(1u);
    }
    else if (*(void *)(v5 + 16) && (unint64_t v10 = sub_1D165A8E0((uint64_t)v7), (v11 & 1) != 0))
    {
      *a2 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
      return swift_retain();
    }
    else
    {
      id v18 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
      swift_bridgeObjectRetain();
      id v19 = objc_msgSend(v18, sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v19;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = v20;
    }
  }
  else
  {
    id v12 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    uint64_t v30 = v13;
    if ((uint64_t)objc_msgSend(*(id *)(v4 + 16), sel_count) >= *(void *)(v5 + 16))
    {
      v29[0] = v5;
      swift_retain();
      sub_1D16604E8(v29, v4, (uint64_t)&v30);
      uint64_t result = swift_release();
      uint64_t v13 = v30;
    }
    else
    {
      char v27 = a2;
      id v14 = *(void **)(v4 + 16);
      swift_retain();
      id v15 = objc_msgSend(v14, sel_startIndex);
      uint64_t v17 = v16;
      if (v15 != objc_msgSend(*(id *)(v4 + 16), sel_endIndex))
      {
        id v21 = v15;
        do
        {
          id v21 = objc_msgSend(*(id *)(v4 + 16), sel_indexAfterIndex_, v21, v17);
          uint64_t v17 = v23;
          if (*(void *)(v5 + 16))
          {
            unint64_t v24 = sub_1D165A8E0((uint64_t)v15);
            if (v25)
            {
              uint64_t v26 = *(void *)(*(void *)(v5 + 56) + 8 * v24);
              swift_retain_n();
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v13 = v30;
              }
              else
              {
                id v22 = *(id *)(v13 + 16);
                objc_msgSend(v22, sel_mutableCopy);
                sub_1D17BE690();
                swift_unknownObjectRelease();
                sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
                swift_dynamicCast();

                uint64_t v13 = swift_allocObject();
                *(void *)(v13 + 16) = v28;
                uint64_t v30 = v13;
                swift_release();
              }
              objc_msgSend(*(id *)(v13 + 16), sel_unionWithIdentifierSet_, *(void *)(v26 + 16));
              swift_release_n();
            }
          }
          id v15 = v21;
        }
        while (v21 != objc_msgSend(*(id *)(v4 + 16), sel_endIndex));
      }
      uint64_t result = swift_release();
      a2 = v27;
    }
    *a2 = v13;
  }
  return result;
}

KnowledgeGraphKit::DirectedBinaryAdjacency __swiftcall DirectedBinaryAdjacency.transposed()()
{
  id v22 = v0;
  uint64_t v2 = *v1;
  unint64_t v29 = sub_1D165F754(MEMORY[0x1E4FBC860]);
  uint64_t v23 = v2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v2 + 64);
  int64_t v24 = (unint64_t)(v3 + 63) >> 6;
  result.adjacency.targetsBySource._rawValue = (void *)swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_21;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v10 >= v24) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v23 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v24) {
        goto LABEL_24;
      }
      unint64_t v11 = *(void *)(v23 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v24) {
          goto LABEL_24;
        }
        unint64_t v11 = *(void *)(v23 + 8 * v7);
        if (!v11) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_21:
    uint64_t v13 = 8 * v9;
    uint64_t v14 = *(void *)(*(void *)(v2 + 48) + v13);
    uint64_t v15 = *(void *)(*(void *)(v2 + 56) + v13);
    uint64_t v16 = *(void **)(v15 + 16);
    swift_retain();
    id v17 = objc_msgSend(v16, sel_startIndex);
    uint64_t v19 = v18;
    if (v17 != objc_msgSend(*(id *)(v15 + 16), sel_endIndex))
    {
      do
      {
        id v20 = objc_msgSend(*(id *)(v15 + 16), sel_indexAfterIndex_, v17, v19, v22);
        uint64_t v19 = v21;
        uint64_t v25 = v14;
        id v26 = v17;
        ElementIdentifierTupleSet.insert(_:)(&v28, &v27, (uint64_t *)&v26, &v25);
        id v17 = v20;
      }
      while (v20 != objc_msgSend(*(id *)(v15 + 16), sel_endIndex));
    }
    result.adjacency.targetsBySource._rawValue = (void *)swift_release();
  }
  int64_t v12 = v10 + 3;
  if (v12 >= v24)
  {
LABEL_24:
    result.adjacency.targetsBySource._rawValue = (void *)swift_release();
    *id v22 = v29;
    return result;
  }
  unint64_t v11 = *(void *)(v23 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v24) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v23 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

KnowledgeGraphKit::DirectedBinaryAdjacency __swiftcall DirectedBinaryAdjacency.subtracting(_:)(KnowledgeGraphKit::DirectedBinaryAdjacency a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(void *)a1.adjacency.targetsBySource._rawValue;
  uint64_t v5 = *v2;
  uint64_t v7 = v4;
  uint64_t v8 = v5;
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.subtract(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)&v7);
  *uint64_t v3 = v8;
  return result;
}

KnowledgeGraphKit::DirectedBinaryAdjacency __swiftcall DirectedBinaryAdjacency.union(with:)(KnowledgeGraphKit::DirectedBinaryAdjacency with)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(void *)with.adjacency.targetsBySource._rawValue;
  uint64_t v5 = *v2;
  uint64_t v7 = v4;
  uint64_t v8 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result.adjacency.targetsBySource._rawValue = (void *)ElementIdentifierTupleSet.formUnion(_:)(&v7);
  *uint64_t v3 = v8;
  return result;
}

uint64_t DirectedBinaryAdjacency.targets(minCount:)@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *v2;
  uint64_t v82 = *v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(*v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(*v2 + 64);
  int64_t v83 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  int64_t v8 = 0;
  uint64_t v9 = MEMORY[0x1E4FBC868];
  int64_t v10 = &selRef_writeDataToURL_error_;
  uint64_t v81 = v3;
  while (1)
  {
    if (v6)
    {
      unint64_t v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v84 = v8;
      unint64_t v12 = v11 | (v8 << 6);
    }
    else
    {
      int64_t v13 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_84;
      }
      if (v13 >= v83)
      {
LABEL_57:
        swift_release();
        id v60 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
        uint64_t v61 = swift_allocObject();
        int64_t v62 = 0;
        *(void *)(v61 + 16) = v60;
        uint64_t v63 = v9 + 64;
        uint64_t v64 = 1 << *(unsigned char *)(v9 + 32);
        uint64_t v65 = -1;
        if (v64 < 64) {
          uint64_t v65 = ~(-1 << v64);
        }
        unint64_t v66 = v65 & *(void *)(v9 + 64);
        int64_t v67 = (unint64_t)(v64 + 63) >> 6;
        uint64_t v68 = &off_1E68DD000;
        while (1)
        {
          if (v66)
          {
            unint64_t v69 = __clz(__rbit64(v66));
            v66 &= v66 - 1;
            unint64_t v70 = v69 | (v62 << 6);
          }
          else
          {
            int64_t v71 = v62 + 1;
            if (__OFADD__(v62, 1)) {
              goto LABEL_85;
            }
            if (v71 >= v67)
            {
LABEL_80:
              swift_release();
              uint64_t result = sub_1D165B3A4((uint64_t)v7);
              *a2 = v61;
              return result;
            }
            unint64_t v72 = *(void *)(v63 + 8 * v71);
            ++v62;
            if (!v72)
            {
              int64_t v62 = v71 + 1;
              if (v71 + 1 >= v67) {
                goto LABEL_80;
              }
              unint64_t v72 = *(void *)(v63 + 8 * v62);
              if (!v72)
              {
                int64_t v62 = v71 + 2;
                if (v71 + 2 >= v67) {
                  goto LABEL_80;
                }
                unint64_t v72 = *(void *)(v63 + 8 * v62);
                if (!v72)
                {
                  int64_t v73 = v71 + 3;
                  if (v73 >= v67) {
                    goto LABEL_80;
                  }
                  unint64_t v72 = *(void *)(v63 + 8 * v73);
                  if (!v72)
                  {
                    while (1)
                    {
                      int64_t v62 = v73 + 1;
                      if (__OFADD__(v73, 1)) {
                        goto LABEL_86;
                      }
                      if (v62 >= v67) {
                        goto LABEL_80;
                      }
                      unint64_t v72 = *(void *)(v63 + 8 * v62);
                      ++v73;
                      if (v72) {
                        goto LABEL_76;
                      }
                    }
                  }
                  int64_t v62 = v73;
                }
              }
            }
LABEL_76:
            unint64_t v66 = (v72 - 1) & v72;
            unint64_t v70 = __clz(__rbit64(v72)) + (v62 << 6);
          }
          if (*(void *)(*(void *)(v9 + 56) + 8 * v70) >= a1)
          {
            uint64_t v74 = *(void *)(*(void *)(v9 + 48) + 8 * v70);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              id v75 = *(id *)(v61 + 16);
              objc_msgSend(v75, sel_mutableCopy);
              sub_1D17BE690();
              swift_unknownObjectRelease();
              sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
              swift_dynamicCast();

              uint64_t v76 = swift_allocObject();
              *(void *)(v76 + 16) = v85;
              uint64_t v68 = &off_1E68DD000;
              swift_release();
              uint64_t v61 = v76;
            }
            id v77 = *(id *)(v61 + 16);
            objc_msgSend(v77, (SEL)v68[204], v74);
            objc_msgSend(v77, sel_addIdentifier_, v74);
          }
        }
      }
      unint64_t v14 = *(void *)(v82 + 8 * v13);
      int64_t v15 = v8 + 1;
      if (!v14)
      {
        int64_t v15 = v8 + 2;
        if (v8 + 2 >= v83) {
          goto LABEL_57;
        }
        unint64_t v14 = *(void *)(v82 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 3;
          if (v8 + 3 >= v83) {
            goto LABEL_57;
          }
          unint64_t v14 = *(void *)(v82 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v8 + 4;
            if (v8 + 4 >= v83) {
              goto LABEL_57;
            }
            unint64_t v14 = *(void *)(v82 + 8 * v15);
            if (!v14)
            {
              uint64_t v16 = v8 + 5;
              if (v8 + 5 >= v83) {
                goto LABEL_57;
              }
              unint64_t v14 = *(void *)(v82 + 8 * v16);
              if (!v14)
              {
                while (1)
                {
                  int64_t v15 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_87;
                  }
                  if (v15 >= v83) {
                    goto LABEL_57;
                  }
                  unint64_t v14 = *(void *)(v82 + 8 * v15);
                  ++v16;
                  if (v14) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v15 = v8 + 5;
            }
          }
        }
      }
LABEL_23:
      unint64_t v6 = (v14 - 1) & v14;
      int64_t v84 = v15;
      unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    }
    uint64_t v17 = *(void *)(*(void *)(v3 + 56) + 8 * v12);
    uint64_t v18 = *(void **)(v17 + 16);
    swift_retain_n();
    id v19 = [v18 v10[351]];
    uint64_t v21 = v20;
    if (v19 != objc_msgSend(*(id *)(v17 + 16), sel_endIndex)) {
      break;
    }
LABEL_5:
    swift_release_n();
    int64_t v8 = v84;
  }
  id v22 = objc_msgSend(*(id *)(v17 + 16), sel_indexAfterIndex_, v19, v21);
  uint64_t v24 = v23;
  sub_1D165B3A4((uint64_t)v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v27 = sub_1D165A8E0((uint64_t)v19);
  uint64_t v28 = *(void *)(v9 + 16);
  BOOL v29 = (v26 & 1) == 0;
  uint64_t v30 = v28 + v29;
  if (__OFADD__(v28, v29)) {
    goto LABEL_81;
  }
  char v31 = v26;
  if (*(void *)(v9 + 24) >= v30)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_1D16A65EC();
    }
  }
  else
  {
    sub_1D16A221C(v30, isUniquelyReferenced_nonNull_native);
    unint64_t v32 = sub_1D165A8E0((uint64_t)v19);
    if ((v31 & 1) != (v33 & 1)) {
      goto LABEL_88;
    }
    unint64_t v27 = v32;
  }
  swift_bridgeObjectRelease();
  if (v31)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    *(void *)(v9 + 8 * (v27 >> 6) + 64) |= 1 << v27;
    uint64_t v34 = 8 * v27;
    *(void *)(*(void *)(v9 + 48) + v34) = v19;
    *(void *)(*(void *)(v9 + 56) + v34) = 0;
    uint64_t v35 = *(void *)(v9 + 16);
    uint64_t v36 = v35 + 1;
    BOOL v37 = __OFADD__(v35, 1);
    swift_bridgeObjectRetain();
    if (v37) {
      goto LABEL_83;
    }
    *(void *)(v9 + 16) = v36;
  }
  uint64_t v38 = *(void *)(v9 + 56);
  swift_bridgeObjectRelease();
  uint64_t v39 = *(void *)(v38 + 8 * v27);
  BOOL v40 = __CFADD__(v39, 1);
  uint64_t v41 = v39 + 1;
  if (v40) {
    goto LABEL_82;
  }
  *(void *)(v38 + 8 * v27) = v41;
  if (v22 == objc_msgSend(*(id *)(v17 + 16), sel_endIndex))
  {
LABEL_4:
    uint64_t v7 = sub_1D165E444;
    uint64_t v3 = v81;
    int64_t v10 = &selRef_writeDataToURL_error_;
    goto LABEL_5;
  }
  id v42 = v22;
  while (1)
  {
    id v42 = objc_msgSend(*(id *)(v17 + 16), sel_indexAfterIndex_, v42, v24);
    uint64_t v24 = v43;
    sub_1D165B3A4((uint64_t)sub_1D165E444);
    char v44 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v46 = sub_1D165A8E0((uint64_t)v22);
    uint64_t v47 = *(void *)(v9 + 16);
    BOOL v48 = (v45 & 1) == 0;
    uint64_t v49 = v47 + v48;
    if (__OFADD__(v47, v48)) {
      break;
    }
    char v50 = v45;
    if (*(void *)(v9 + 24) >= v49)
    {
      if ((v44 & 1) == 0) {
        sub_1D16A65EC();
      }
    }
    else
    {
      sub_1D16A221C(v49, v44);
      unint64_t v51 = sub_1D165A8E0((uint64_t)v22);
      if ((v50 & 1) != (v52 & 1)) {
        goto LABEL_88;
      }
      unint64_t v46 = v51;
    }
    swift_bridgeObjectRelease();
    if (v50)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      *(void *)(v9 + 8 * (v46 >> 6) + 64) |= 1 << v46;
      uint64_t v53 = 8 * v46;
      *(void *)(*(void *)(v9 + 48) + v53) = v22;
      *(void *)(*(void *)(v9 + 56) + v53) = 0;
      uint64_t v54 = *(void *)(v9 + 16);
      uint64_t v55 = v54 + 1;
      BOOL v56 = __OFADD__(v54, 1);
      swift_bridgeObjectRetain();
      if (v56) {
        goto LABEL_83;
      }
      *(void *)(v9 + 16) = v55;
    }
    uint64_t v57 = *(void *)(v9 + 56);
    swift_bridgeObjectRelease();
    uint64_t v58 = *(void *)(v57 + 8 * v46);
    BOOL v40 = __CFADD__(v58, 1);
    uint64_t v59 = v58 + 1;
    if (v40) {
      goto LABEL_82;
    }
    *(void *)(v57 + 8 * v46) = v59;
    id v22 = v42;
    if (v42 == objc_msgSend(*(id *)(v17 + 16), sel_endIndex)) {
      goto LABEL_4;
    }
  }
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

void sub_1D165E444(void *a1@<X8>)
{
  *a1 = 0;
}

Swift::Void __swiftcall DirectedBinaryAdjacency.insert(source:target:)(KnowledgeGraphKit::ElementIdentifier source, KnowledgeGraphKit::ElementIdentifier target)
{
  uint64_t v2 = *(void *)source.rawValue;
  uint64_t v3 = *(void *)target.rawValue;
  uint64_t v4 = v2;
  ElementIdentifierTupleSet.insert(_:)(&v6, &v5, &v4, &v3);
}

Swift::Void __swiftcall DirectedBinaryAdjacency.remove(source:target:)(KnowledgeGraphKit::ElementIdentifier source, KnowledgeGraphKit::ElementIdentifier target)
{
  uint64_t v2 = *(void *)source.rawValue;
  uint64_t v4 = *(void *)target.rawValue;
  uint64_t v5 = v2;
  v3._0.rawValue = (Swift::UInt)&v5;
  v3._1.rawValue = (Swift::UInt)&v4;
  ElementIdentifierTupleSet.remove(_:)(v3);
}

Swift::Void __swiftcall DirectedBinaryAdjacency.formUnion(_:)(KnowledgeGraphKit::DirectedBinaryAdjacency a1)
{
  uint64_t v1 = *(void *)a1.adjacency.targetsBySource._rawValue;
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.formUnion(_:)(&v1);
}

Swift::Void __swiftcall DirectedBinaryAdjacency.subtract(_:)(KnowledgeGraphKit::DirectedBinaryAdjacency a1)
{
  uint64_t v1 = *(void *)a1.adjacency.targetsBySource._rawValue;
  ElementIdentifierTupleSet.subtract(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)&v1);
}

Swift::Void __swiftcall DirectedBinaryAdjacency.removeTargets(for:)(KnowledgeGraphKit::ElementIdentifier a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1D165A8E0(*(void *)a1.rawValue);
  if (v4)
  {
    unint64_t v5 = v3;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = *v1;
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1D16A6448();
      uint64_t v7 = v8;
    }
    sub_1D16A8E0C(v5, v7);
    *uint64_t v2 = v7;
    swift_release();
    swift_bridgeObjectRelease();
  }
}

void sub_1D165E5B8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t v4 = swift_allocObject();
  int64_t v5 = 0;
  *(void *)(v4 + 16) = v3;
  uint64_t v6 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 64);
  int64_t v20 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_23;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v13 >= v20) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v20) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v20) {
          goto LABEL_25;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14)
        {
          int64_t v5 = v13 + 3;
          if (v13 + 3 >= v20) {
            goto LABEL_25;
          }
          unint64_t v14 = *(void *)(v6 + 8 * v5);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_23:
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8 * v12);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      id v17 = *(id *)(v4 + 16);
      objc_msgSend(v17, sel_mutableCopy);
      sub_1D17BE690();
      swift_unknownObjectRelease();
      sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
      swift_dynamicCast();

      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = v21;
      swift_release();
      uint64_t v4 = v18;
    }
    id v10 = *(id *)(v4 + 16);
    objc_msgSend(v10, sel_containsIdentifier_, v16);
    objc_msgSend(v10, sel_addIdentifier_, v16);
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v20)
  {
LABEL_25:
    swift_release();
    *a2 = v4;
    return;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v20) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
}

unint64_t sub_1D165E85C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1D165A8E0(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1D16A6448();
    goto LABEL_7;
  }
  sub_1D16A1F40(v13, a3 & 1);
  unint64_t v19 = sub_1D165A8E0(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = sub_1D17BEC60();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  return sub_1D16A616C(v10, a2, a1, v16);
}

uint64_t sub_1D165E984(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int64_t v5 = (void **)v4;
  uint64_t v29 = a2;
  uint64_t v9 = sub_1D17BDD40();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (void *)*v4;
  unint64_t v16 = sub_1D165A94C(a3);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    id v22 = *v5;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = (uint64_t *)(v22[7] + 16 * v16);
      uint64_t result = swift_release();
      uint64_t v25 = v29;
      *uint64_t v23 = a1;
      v23[1] = v25;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    sub_1D16A677C();
    goto LABEL_7;
  }
  sub_1D16A24EC(v19, a4 & 1);
  unint64_t v26 = sub_1D165A94C(a3);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = sub_1D17BEC60();
    __break(1u);
    return result;
  }
  unint64_t v16 = v26;
  id v22 = *v5;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
  return sub_1D16A61B4(v16, (uint64_t)v13, a1, v29, v22);
}

_OWORD *sub_1D165EB3C(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1D165A824(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1D16A6BF8();
      goto LABEL_7;
    }
    sub_1D16A2BC8(v13, a3 & 1);
    unint64_t v19 = sub_1D165A824(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      unint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_1D165C164(a2, (uint64_t)v21);
      return sub_1D16A6274(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)sub_1D17BEC60();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  return sub_1D16607C4(a1, v17);
}

id sub_1D165EC88(void *a1, char a2, double a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_1D165A9D0((uint64_t)a1);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  id result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= (uint64_t)result && (a2 & 1) != 0)
  {
LABEL_7:
    uint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      *(double *)(v15[7] + 8 * v9) = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v14 >= (uint64_t)result && (a2 & 1) == 0)
  {
    id result = sub_1D16A6A54();
    goto LABEL_7;
  }
  sub_1D16A28F8((uint64_t)result, a2 & 1);
  id result = (id)sub_1D165A9D0((uint64_t)a1);
  if ((v13 & 1) != (v16 & 1))
  {
LABEL_15:
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    id result = (id)sub_1D17BEC60();
    __break(1u);
    return result;
  }
  unint64_t v9 = (unint64_t)result;
  uint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1D16A62F0(v9, (uint64_t)a1, v15, a3);
  return a1;
}

id sub_1D165EDC4(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_1D165A9D0((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      id result = (id)swift_bridgeObjectRelease();
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1D16A6DE0();
    goto LABEL_7;
  }
  sub_1D16A2EE0(v12, a3 & 1);
  unint64_t v18 = sub_1D165A9D0((uint64_t)a2);
  if ((v13 & 1) != (v19 & 1))
  {
LABEL_15:
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    id result = (id)sub_1D17BEC60();
    __break(1u);
    return result;
  }
  unint64_t v9 = v18;
  uint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1D16A6338(v9, (uint64_t)a2, a1, v15);
  return a2;
}

uint64_t sub_1D165EF04(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_1D165AA20(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1D16A6DEC();
    goto LABEL_7;
  }
  sub_1D16A2EEC(v13, a3 & 1);
  unint64_t v19 = sub_1D165AA20(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    type metadata accessor for MASlice();
    uint64_t result = sub_1D17BEC60();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1D16A6338(v10, a2, a1, v16);
  return swift_retain();
}

uint64_t sub_1D165F034(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1D165AA20(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      unint64_t v19 = (uint64_t *)(v18[7] + 16 * v12);
      uint64_t result = swift_release();
      *unint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1D16A71B0();
    goto LABEL_7;
  }
  sub_1D16A3598(v15, a4 & 1);
  unint64_t v21 = sub_1D165AA20(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    type metadata accessor for MASlice();
    uint64_t result = sub_1D17BEC60();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  unint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1D16A633C(v12, a3, a1, a2, v18);
  return swift_retain();
}

id sub_1D165F16C(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_1D165AAB4((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  id result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= (uint64_t)result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      *(void *)(v15[7] + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v14 >= (uint64_t)result && (a3 & 1) == 0)
  {
    id result = sub_1D16A76FC();
    goto LABEL_7;
  }
  sub_1D16A3ED8((uint64_t)result, a3 & 1);
  id result = (id)sub_1D165AAB4((uint64_t)a2);
  if ((v13 & 1) != (v16 & 1))
  {
LABEL_15:
    sub_1D165C128(0, (unint64_t *)&qword_1EA6514F0);
    id result = (id)sub_1D17BEC60();
    __break(1u);
    return result;
  }
  unint64_t v9 = (unint64_t)result;
  uint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1D16A616C(v9, (uint64_t)a2, a1, v15);
  return a2;
}

uint64_t sub_1D165F2A0(uint64_t a1, char a2, double a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_1D165A824(a1);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= result && (a2 & 1) != 0)
    {
LABEL_7:
      char v16 = *v4;
      if (v14)
      {
LABEL_8:
        *(double *)(v16[7] + 8 * v10) = a3;
        return result;
      }
      goto LABEL_11;
    }
    if (v15 >= result && (a2 & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1D16A7A34();
      goto LABEL_7;
    }
    sub_1D16A4458(result, a2 & 1);
    uint64_t result = sub_1D165A824(a1);
    if ((v14 & 1) == (v17 & 1))
    {
      unint64_t v10 = result;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1D165C164(a1, (uint64_t)v18);
      return sub_1D16A6384(v10, (uint64_t)v18, v16, a3);
    }
  }
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

_OWORD *sub_1D165F3B0(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  int64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1D165A868(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1D16A82C8();
      goto LABEL_7;
    }
    sub_1D16A52E8(v15, a4 & 1);
    unint64_t v21 = sub_1D165A868(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_1D17BEC60();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    unint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
    return sub_1D16607C4(a1, v19);
  }
LABEL_13:
  sub_1D16A63DC(v12, a2, a3, a1, v18);
  return (_OWORD *)swift_bridgeObjectRetain();
}

unint64_t sub_1D165F504(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_1D165AB04(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1D16A84B0();
    goto LABEL_7;
  }
  sub_1D16A55E8(v13, a3 & 1);
  unint64_t v19 = sub_1D165AB04(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = sub_1D17BEC60();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  return sub_1D16A616C(v10, a2, a1, v16);
}

void sub_1D165F62C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_1D165AB88(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1D16A89BC();
    goto LABEL_7;
  }
  sub_1D16A5E98(v13, a3 & 1);
  unint64_t v18 = sub_1D165AB88(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_15:
    type metadata accessor for KGElementIdentifier(0);
    sub_1D17BEC60();
    __break(1u);
    return;
  }
  unint64_t v10 = v18;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1D16A616C(v10, a2, a1, v16);
}

unint64_t sub_1D165F754(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27530);
  id v3 = (void *)sub_1D17BEB10();
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = sub_1D165A8E0(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  char v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    uint64_t v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_retain();
    unint64_t result = sub_1D165A8E0(v5);
    char v8 = v13;
    uint64_t v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1D165F854(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v23 = v3 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v3 + 64);
  int64_t v24 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v26 = v3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v20 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v20 >= v24) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v23 + 8 * v20);
    ++v8;
    if (!v21)
    {
      int64_t v8 = v20 + 1;
      if (v20 + 1 >= v24) {
        return swift_release();
      }
      unint64_t v21 = *(void *)(v23 + 8 * v8);
      if (!v21)
      {
        int64_t v8 = v20 + 2;
        if (v20 + 2 >= v24) {
          return swift_release();
        }
        unint64_t v21 = *(void *)(v23 + 8 * v8);
        if (!v21) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v21 - 1) & v21;
    unint64_t v10 = __clz(__rbit64(v21)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = 8 * v10;
    uint64_t v12 = *(void *)(*(void *)(v26 + 48) + v11);
    uint64_t v13 = *(void **)(*(void *)(*(void *)(v26 + 56) + v11) + 16);
    uint64_t v14 = *(void **)(a3 + 16);
    swift_retain_n();
    id v15 = v13;
    id v16 = v14;
    id v17 = objc_msgSend(v15, sel_identifierSetByIntersectingIdentifierSet_, v16);
    objc_msgSend(v17, sel_mutableCopy);
    sub_1D17BE690();
    swift_unknownObjectRelease();
    sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
    swift_dynamicCast();
    uint64_t v18 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v18;
    swift_release();

    uint64_t v27 = v12;
    v28[0] = v19;
    ElementIdentifierTupleSet.subscript.setter(v28, &v27);
    uint64_t result = swift_release();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v24) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v23 + 8 * v22);
  if (v21)
  {
    int64_t v8 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v8 >= v24) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v23 + 8 * v8);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1D165FAD8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(*a1 + 64);
  int64_t v53 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  uint64_t v51 = v6;
  uint64_t v52 = v5;
  while (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v12 = v11 | (v10 << 6);
LABEL_21:
    uint64_t v16 = 8 * v12;
    uint64_t v17 = *(void *)(*(void *)(v5 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + v16);
    uint64_t v19 = *(void **)(a2 + 16);
    swift_retain();
    if (!objc_msgSend(v19, sel_containsIdentifier_, v17)) {
      goto LABEL_4;
    }
    int64_t v20 = *(void **)(v18 + 16);
    swift_retain();
    unsigned __int8 v21 = objc_msgSend(v20, sel_isEmpty);
    unsigned __int8 v22 = v21;
    if (*(void *)(*a3 + 16))
    {
      sub_1D165A8E0(v17);
      if ((v22 & 1) == 0) {
        goto LABEL_31;
      }
      char v24 = v23;
      swift_release();
      if (v24 & 1) != 0 && (unint64_t v25 = sub_1D165A8E0(v17), (v26))
      {
        unint64_t v27 = v25;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v29 = *a3;
        uint64_t v54 = *a3;
        *a3 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1D16A6448();
          uint64_t v29 = v54;
        }
        sub_1D16A8E0C(v27, v29);
        *a3 = v29;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_4:
        swift_release();
      }
    }
    else if (v21)
    {
      swift_release_n();
    }
    else
    {
LABEL_31:
      uint64_t v30 = a2;
      char v31 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v32 = a3;
      char v33 = v31;
      uint64_t v34 = (void *)*v32;
      uint64_t v55 = (void *)*v32;
      uint64_t v35 = v32;
      *unint64_t v32 = 0x8000000000000000;
      unint64_t v37 = sub_1D165A8E0(v17);
      uint64_t v38 = v34[2];
      BOOL v39 = (v36 & 1) == 0;
      uint64_t v40 = v38 + v39;
      if (__OFADD__(v38, v39)) {
        goto LABEL_47;
      }
      char v41 = v36;
      if (v34[3] >= v40)
      {
        if (v33)
        {
          char v44 = v55;
          if (v36) {
            goto LABEL_38;
          }
        }
        else
        {
          sub_1D16A6448();
          char v44 = v55;
          if (v41) {
            goto LABEL_38;
          }
        }
      }
      else
      {
        sub_1D16A1F40(v40, v33);
        unint64_t v42 = sub_1D165A8E0(v17);
        if ((v41 & 1) != (v43 & 1)) {
          goto LABEL_50;
        }
        unint64_t v37 = v42;
        char v44 = v55;
        if (v41)
        {
LABEL_38:
          uint64_t v45 = v44[7];
          swift_release();
          *(void *)(v45 + 8 * v37) = v18;
          goto LABEL_42;
        }
      }
      v44[(v37 >> 6) + 8] |= 1 << v37;
      uint64_t v46 = 8 * v37;
      *(void *)(v44[6] + v46) = v17;
      *(void *)(v44[7] + v46) = v18;
      uint64_t v47 = v44[2];
      BOOL v48 = __OFADD__(v47, 1);
      uint64_t v49 = v47 + 1;
      if (v48) {
        goto LABEL_48;
      }
      v44[2] = v49;
LABEL_42:
      uint64_t *v35 = (uint64_t)v44;
      a3 = v35;
      swift_release();
      swift_bridgeObjectRelease();
      a2 = v30;
      uint64_t v6 = v51;
      uint64_t v5 = v52;
    }
  }
  int64_t v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    uint64_t result = sub_1D17BEC60();
    __break(1u);
    return result;
  }
  if (v13 >= v53) {
    goto LABEL_43;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v13);
  ++v10;
  if (v14) {
    goto LABEL_20;
  }
  int64_t v10 = v13 + 1;
  if (v13 + 1 >= v53) {
    goto LABEL_43;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v10);
  if (v14) {
    goto LABEL_20;
  }
  int64_t v10 = v13 + 2;
  if (v13 + 2 >= v53) {
    goto LABEL_43;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v10);
  if (v14)
  {
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_21;
  }
  int64_t v15 = v13 + 3;
  if (v15 < v53)
  {
    unint64_t v14 = *(void *)(v6 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v10 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_49;
        }
        if (v10 >= v53) {
          goto LABEL_43;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v10);
        ++v15;
        if (v14) {
          goto LABEL_20;
        }
      }
    }
    int64_t v10 = v15;
    goto LABEL_20;
  }
LABEL_43:
  return swift_release();
}

uint64_t sub_1D165FEA4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v23 = v3 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v3 + 64);
  int64_t v24 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v26 = v3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v20 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v20 >= v24) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v23 + 8 * v20);
    ++v8;
    if (!v21)
    {
      int64_t v8 = v20 + 1;
      if (v20 + 1 >= v24) {
        return swift_release();
      }
      unint64_t v21 = *(void *)(v23 + 8 * v8);
      if (!v21)
      {
        int64_t v8 = v20 + 2;
        if (v20 + 2 >= v24) {
          return swift_release();
        }
        unint64_t v21 = *(void *)(v23 + 8 * v8);
        if (!v21) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v21 - 1) & v21;
    unint64_t v10 = __clz(__rbit64(v21)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = 8 * v10;
    uint64_t v12 = *(void *)(*(void *)(v26 + 48) + v11);
    int64_t v13 = *(void **)(*(void *)(*(void *)(v26 + 56) + v11) + 16);
    unint64_t v14 = *(void **)(a3 + 16);
    swift_retain();
    id v15 = v13;
    id v16 = v14;
    id v17 = objc_msgSend(v15, sel_identifierSetBySubtractingIdentifierSet_, v16);
    objc_msgSend(v17, sel_mutableCopy);
    sub_1D17BE690();
    swift_unknownObjectRelease();
    sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
    swift_dynamicCast();
    uint64_t v18 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v18;

    uint64_t v27 = v12;
    v28[0] = v19;
    ElementIdentifierTupleSet.subscript.setter(v28, &v27);
    uint64_t result = swift_release();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v24) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v23 + 8 * v22);
  if (v21)
  {
    int64_t v8 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v8 >= v24) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v23 + 8 * v8);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1D166011C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(*a1 + 64);
  int64_t v53 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  uint64_t v51 = v6;
  uint64_t v52 = v5;
  while (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v12 = v11 | (v10 << 6);
LABEL_21:
    uint64_t v16 = 8 * v12;
    uint64_t v17 = *(void *)(*(void *)(v5 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + v16);
    uint64_t v19 = *(void **)(a2 + 16);
    swift_retain();
    if (objc_msgSend(v19, sel_containsIdentifier_, v17)) {
      goto LABEL_4;
    }
    int64_t v20 = *(void **)(v18 + 16);
    swift_retain();
    unsigned __int8 v21 = objc_msgSend(v20, sel_isEmpty);
    unsigned __int8 v22 = v21;
    if (*(void *)(*a3 + 16))
    {
      sub_1D165A8E0(v17);
      if ((v22 & 1) == 0) {
        goto LABEL_31;
      }
      char v24 = v23;
      swift_release();
      if (v24 & 1) != 0 && (unint64_t v25 = sub_1D165A8E0(v17), (v26))
      {
        unint64_t v27 = v25;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v29 = *a3;
        uint64_t v54 = *a3;
        *a3 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1D16A6448();
          uint64_t v29 = v54;
        }
        sub_1D16A8E0C(v27, v29);
        *a3 = v29;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_4:
        swift_release();
      }
    }
    else if (v21)
    {
      swift_release_n();
    }
    else
    {
LABEL_31:
      uint64_t v30 = a2;
      char v31 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v32 = a3;
      char v33 = v31;
      uint64_t v34 = (void *)*v32;
      uint64_t v55 = (void *)*v32;
      uint64_t v35 = v32;
      *unint64_t v32 = 0x8000000000000000;
      unint64_t v37 = sub_1D165A8E0(v17);
      uint64_t v38 = v34[2];
      BOOL v39 = (v36 & 1) == 0;
      uint64_t v40 = v38 + v39;
      if (__OFADD__(v38, v39)) {
        goto LABEL_47;
      }
      char v41 = v36;
      if (v34[3] >= v40)
      {
        if (v33)
        {
          char v44 = v55;
          if (v36) {
            goto LABEL_38;
          }
        }
        else
        {
          sub_1D16A6448();
          char v44 = v55;
          if (v41) {
            goto LABEL_38;
          }
        }
      }
      else
      {
        sub_1D16A1F40(v40, v33);
        unint64_t v42 = sub_1D165A8E0(v17);
        if ((v41 & 1) != (v43 & 1)) {
          goto LABEL_50;
        }
        unint64_t v37 = v42;
        char v44 = v55;
        if (v41)
        {
LABEL_38:
          uint64_t v45 = v44[7];
          swift_release();
          *(void *)(v45 + 8 * v37) = v18;
          goto LABEL_42;
        }
      }
      v44[(v37 >> 6) + 8] |= 1 << v37;
      uint64_t v46 = 8 * v37;
      *(void *)(v44[6] + v46) = v17;
      *(void *)(v44[7] + v46) = v18;
      uint64_t v47 = v44[2];
      BOOL v48 = __OFADD__(v47, 1);
      uint64_t v49 = v47 + 1;
      if (v48) {
        goto LABEL_48;
      }
      v44[2] = v49;
LABEL_42:
      uint64_t *v35 = (uint64_t)v44;
      a3 = v35;
      swift_release();
      swift_bridgeObjectRelease();
      a2 = v30;
      uint64_t v6 = v51;
      uint64_t v5 = v52;
    }
  }
  int64_t v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    uint64_t result = sub_1D17BEC60();
    __break(1u);
    return result;
  }
  if (v13 >= v53) {
    goto LABEL_43;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v13);
  ++v10;
  if (v14) {
    goto LABEL_20;
  }
  int64_t v10 = v13 + 1;
  if (v13 + 1 >= v53) {
    goto LABEL_43;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v10);
  if (v14) {
    goto LABEL_20;
  }
  int64_t v10 = v13 + 2;
  if (v13 + 2 >= v53) {
    goto LABEL_43;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v10);
  if (v14)
  {
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_21;
  }
  int64_t v15 = v13 + 3;
  if (v15 < v53)
  {
    unint64_t v14 = *(void *)(v6 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v10 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_49;
        }
        if (v10 >= v53) {
          goto LABEL_43;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v10);
        ++v15;
        if (v14) {
          goto LABEL_20;
        }
      }
    }
    int64_t v10 = v15;
    goto LABEL_20;
  }
LABEL_43:
  return swift_release();
}

uint64_t sub_1D16604E8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(*a1 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v24 = MEMORY[0x1E4FBC840] + 8;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_22;
    }
    int64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v15 >= v10) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v12;
    if (!v16)
    {
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v10) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v6 + 8 * v12);
      if (!v16)
      {
        int64_t v12 = v15 + 2;
        if (v15 + 2 >= v10) {
          return swift_release();
        }
        unint64_t v16 = *(void *)(v6 + 8 * v12);
        if (!v16) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_22:
    uint64_t v18 = 8 * v14;
    uint64_t v19 = *(void *)(*(void *)(v5 + 48) + v18);
    uint64_t v20 = *(void *)(*(void *)(v5 + 56) + v18);
    unsigned __int8 v21 = *(void **)(a2 + 16);
    swift_retain();
    if (objc_msgSend(v21, sel_containsIdentifier_, v19))
    {
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        id v22 = *(id *)(*(void *)a3 + 16);
        objc_msgSend(v22, sel_mutableCopy);
        sub_1D17BE690();
        swift_unknownObjectRelease();
        sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
        swift_dynamicCast();

        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
        uint64_t v23 = swift_allocObject();
        *(void *)(v23 + 16) = v25;
        *(void *)a3 = v23;
        swift_release();
      }
      objc_msgSend(*(id *)(*(void *)a3 + 16), sel_unionWithIdentifierSet_, *(void *)(v20 + 16), v24);
      swift_release();
    }
    uint64_t result = swift_release();
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v12 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for DirectedBinaryAdjacency()
{
  return &type metadata for DirectedBinaryAdjacency;
}

uint64_t sub_1D166075C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA651568);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1D16607C4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1D16607D4(uint64_t *a1, void (*a2)(uint64_t, void *, char *))
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  char v21 = 0;
  uint64_t v18 = v3 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v3 + 64);
  int64_t v19 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (v6)
  {
    unint64_t v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v9 = v8 | (v7 << 6);
LABEL_5:
    uint64_t v10 = 8 * v9;
    uint64_t v11 = *(void *)(*(void *)(v3 + 48) + v10);
    int64_t v12 = *(void **)(*(void *)(*(void *)(v3 + 56) + v10) + 16);
    swift_retain();
    id v13 = v12;
    objc_msgSend(v13, sel_copy);
    sub_1D17BE690();
    swift_unknownObjectRelease();
    sub_1D165C128(0, &qword_1EBD27510);
    swift_dynamicCast();

    a2(v11, v20, &v21);
    swift_release();

    if (v21 == 1) {
      return swift_release();
    }
  }
  int64_t v14 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v14 >= v19) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v18 + 8 * v14);
  ++v7;
  if (v15) {
    goto LABEL_20;
  }
  int64_t v7 = v14 + 1;
  if (v14 + 1 >= v19) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v18 + 8 * v7);
  if (v15) {
    goto LABEL_20;
  }
  int64_t v7 = v14 + 2;
  if (v14 + 2 >= v19) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v18 + 8 * v7);
  if (v15)
  {
LABEL_20:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v9 = __clz(__rbit64(v15)) + (v7 << 6);
    goto LABEL_5;
  }
  int64_t v16 = v14 + 3;
  if (v16 < v19)
  {
    unint64_t v15 = *(void *)(v18 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v7 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          break;
        }
        if (v7 >= v19) {
          return swift_release();
        }
        unint64_t v15 = *(void *)(v18 + 8 * v7);
        ++v16;
        if (v15) {
          goto LABEL_20;
        }
      }
LABEL_23:
      __break(1u);
    }
    int64_t v7 = v16;
    goto LABEL_20;
  }
  return swift_release();
}

uint64_t sub_1D1660A34(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t _s17KnowledgeGraphKit27MAMutableFloatVectorWrapperC05floatF0AA0F0VySfGvg_0@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  return swift_bridgeObjectRetain();
}

id MAFloatVectorWrapper.__allocating_init(floatVector:)(void *a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = *a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id MAFloatVectorWrapper.init(floatVector:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = *a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for MAFloatVectorWrapper()
{
  return self;
}

id MAFloatVectorWrapper.__allocating_init(array:)(uint64_t a1)
{
  objc_super v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id MAFloatVectorWrapper.init(array:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v3, sel_init);
}

id MAFloatVectorWrapper.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id MAFloatVectorWrapper.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = MEMORY[0x1E4FBC860];
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v2, sel_init);
}

id MAFloatVectorWrapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t MAMutableFloatVectorWrapper.floatVector.setter(void *a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector) = *a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MAMutableFloatVectorWrapper.floatVector.modify(void *a1))(void *a1)
{
  uint64_t v2 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  a1[2] = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  *a1 = *(void *)(v1 + v2);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return sub_1D1660D84;
}

uint64_t sub_1D1660D84(void *a1)
{
  *(void *)(a1[1] + a1[2]) = *a1;
  return swift_bridgeObjectRelease();
}

id MAMutableFloatVectorWrapper.__allocating_init(floatVector:)(void *a1)
{
  objc_super v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = *a1;
  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v5, sel_init);
}

id MAMutableFloatVectorWrapper.init(floatVector:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = *a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v3, sel_init);
}

id MAMutableFloatVectorWrapper.__allocating_init(array:)(uint64_t a1)
{
  objc_super v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = a1;
  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v5, sel_init);
}

id MAMutableFloatVectorWrapper.init(array:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  return objc_msgSendSuper2(&v3, sel_init);
}

id MAMutableFloatVectorWrapper.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id MAMutableFloatVectorWrapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id MAFloatVectorWrapper.__allocating_init(floats:count:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return objc_msgSend(v5, sel_initWithFloats_count_, a1, a2);
}

uint64_t MAFloatVectorWrapper.init(floats:count:)(char *a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = sub_1D1666A30(a1, a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t *))(ObjectType + 120))(&v7);
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t static MAFloatVectorWrapper.zeros(count:)(unint64_t a1)
{
  uint64_t v3 = sub_1D1665A14(a1, 0);
  return (*(uint64_t (**)(uint64_t *))(v1 + 120))(&v3);
}

uint64_t static MAFloatVectorWrapper.ones(count:)(unint64_t a1, int32x2_t a2)
{
  a2.i32[0] = 1.0;
  uint64_t v4 = sub_1D1665A14(a1, a2);
  return (*(uint64_t (**)(uint64_t *))(v2 + 120))(&v4);
}

uint64_t static MAFloatVectorWrapper.repeating(float:count:)(unint64_t a1, int32x2_t a2)
{
  uint64_t v4 = sub_1D1665A14(a1, a2);
  return (*(uint64_t (**)(uint64_t *))(v2 + 120))(&v4);
}

id MAFloatVectorWrapper.copy(with:)@<X0>(void *a1@<X8>)
{
  a1[3] = type metadata accessor for MAFloatVectorWrapper();
  *a1 = v3;
  return v3;
}

id MAFloatVectorWrapper.mutableCopy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  uint64_t v4 = (objc_class *)type metadata accessor for MAMutableFloatVectorWrapper();
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  *(void *)&v5[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v3;
  v7.receiver = v5;
  v7.super_class = (Class)type metadata accessor for MAFloatVectorWrapper();
  swift_bridgeObjectRetain();
  id result = objc_msgSendSuper2(&v7, sel_init);
  a1[3] = v4;
  *a1 = result;
  return result;
}

id MAMutableFloatVectorWrapper.copy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  uint64_t v4 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  *(void *)&v5[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v3;
  v7.receiver = v5;
  v7.super_class = v4;
  swift_bridgeObjectRetain();
  id result = objc_msgSendSuper2(&v7, sel_init);
  a1[3] = v4;
  *a1 = result;
  return result;
}

Swift::Float __swiftcall MAFloatVectorWrapper.float(at:)(Swift::Int at)
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(&v5);
  if (at < 0)
  {
    __break(1u);
  }
  else if (*(void *)(v5 + 16) > (unint64_t)at)
  {
    float v4 = *(float *)(v5 + 4 * at + 32);
    swift_bridgeObjectRelease();
    return v4;
  }
  __break(1u);
  return result;
}

void *MAFloatVectorWrapper.vectorBySubtractingVector(_:)(void *a1)
{
  return sub_1D1661B84(a1, (uint64_t (*)(void *, uint64_t *))sub_1D1667BC0);
}

void *MAFloatVectorWrapper.vectorByAddingVector(_:)(void *a1)
{
  return sub_1D1661B84(a1, (uint64_t (*)(void *, uint64_t *))sub_1D1667BE4);
}

id MAFloatVectorWrapper.vectorBySubtractingScalar(_:)()
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(&v10);
  uint64_t v1 = v10;
  uint64_t v9 = v10;
  uint64_t v2 = sub_1D16672CC(*(void *)(v10 + 16), (uint64_t (*)(void *, uint64_t *))sub_1D1667C1C);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v2 + 16);
  id result = (id)swift_bridgeObjectRelease();
  if (v3 == v4)
  {
    unint64_t v6 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
    objc_super v7 = (char *)objc_allocWithZone(v6);
    *(void *)&v7[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v2;
    v8.receiver = v7;
    v8.super_class = v6;
    return objc_msgSendSuper2(&v8, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id MAFloatVectorWrapper.vectorByAddingScalar(_:)()
{
  return sub_1D16618E8((uint64_t (*)(void *, uint64_t *))sub_1D16681F8);
}

id MAFloatVectorWrapper.vectorByMultiplyingByScalar(_:)()
{
  return sub_1D16618E8((uint64_t (*)(void *, uint64_t *))sub_1D1667C40);
}

id sub_1D16618E8(uint64_t (*a1)(void *, uint64_t *))
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(&v12);
  uint64_t v3 = v12;
  uint64_t v11 = v12;
  uint64_t v4 = sub_1D16672CC(*(void *)(v12 + 16), a1);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v4 + 16);
  id result = (id)swift_bridgeObjectRelease();
  if (v5 == v6)
  {
    objc_super v8 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
    uint64_t v9 = (char *)objc_allocWithZone(v8);
    *(void *)&v9[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v4;
    v10.receiver = v9;
    v10.super_class = v8;
    return objc_msgSendSuper2(&v10, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id MAFloatVectorWrapper.vectorByDividingByScalar(_:)()
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(&v10);
  uint64_t v1 = v10;
  uint64_t v9 = v10;
  uint64_t v2 = sub_1D16672CC(*(void *)(v10 + 16), (uint64_t (*)(void *, uint64_t *))sub_1D1667C64);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v2 + 16);
  id result = (id)swift_bridgeObjectRelease();
  if (v3 == v4)
  {
    uint64_t v6 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
    objc_super v7 = (char *)objc_allocWithZone(v6);
    *(void *)&v7[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v2;
    v8.receiver = v7;
    v8.super_class = v6;
    return objc_msgSendSuper2(&v8, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *MAFloatVectorWrapper.vectorByElementwiseMultiplyingByWrapper(_:)(void *a1)
{
  return sub_1D1661B84(a1, (uint64_t (*)(void *, uint64_t *))sub_1D1667C88);
}

void *sub_1D1661B84(void *a1, uint64_t (*a2)(void *, uint64_t *))
{
  uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v6 = (*(void *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x70))(&v19);
  uint64_t v7 = v19;
  id result = (*(void *(**)(uint64_t *__return_ptr, void *))((*v5 & *a1) + 0x70))(&v18, v6);
  uint64_t v10 = *(void *)(v7 + 16);
  if (v10 == *(void *)(v18 + 16))
  {
    uint64_t v16 = v18;
    uint64_t v17 = v7;
    MEMORY[0x1F4188790](result, v9);
    uint64_t v11 = sub_1D16672CC(v10, a2);
    uint64_t v12 = *(void *)(v11 + 16);
    swift_bridgeObjectRelease();
    id result = (void *)swift_bridgeObjectRelease();
    if (v10 == v12)
    {
      id v13 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
      int64_t v14 = (char *)objc_allocWithZone(v13);
      *(void *)&v14[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v11;
      v15.receiver = v14;
      v15.super_class = v13;
      return objc_msgSendSuper2(&v15, sel_init);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id MAFloatVectorWrapper.vectorByElementwiseRaisingToExponent(_:)(float a1)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(v11);
  uint64_t v3 = v11[0];
  if (*(void *)(v11[0] + 16) >> 31)
  {
    __break(1u);
    goto LABEL_5;
  }
  int v10 = *(void *)(v11[0] + 16);
  float v9 = a1;
  swift_bridgeObjectRetain();
  uint64_t v4 = (char *)v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_5:
  }
    uint64_t v4 = sub_1D166762C(v3);
  vvpowsf((float *)v4 + 8, &v9, (const float *)v4 + 8, &v10);
  swift_bridgeObjectRelease();
  uint64_t v5 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  *(void *)&v6[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v4;
  v8.receiver = v6;
  v8.super_class = v5;
  return objc_msgSendSuper2(&v8, sel_init);
}

float MAFloatVectorWrapper.dotProductWithWrapper(_:)(void *a1)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = (*(void *(**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(v11);
  uint64_t v5 = v11[0];
  (*(void (**)(uint64_t *__return_ptr, void *))((*v3 & *a1) + 0x70))(&v10, v4);
  uint64_t v6 = v10;
  vDSP_Length v7 = *(void *)(v5 + 16);
  if (v7 != *(void *)(v10 + 16)) {
    __break(1u);
  }
  float __C = NAN;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  vDSP_dotpr((const float *)(v5 + 32), 1, (const float *)(v6 + 32), 1, &__C, v7);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return __C;
}

id MAFloatVectorWrapper.slice(from:to:)(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x70))(&v15);
  if (a2 < a1)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (a1 < 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_1D1666B8C(v2, v2 + 32, a1, (2 * a2) | 1);
    goto LABEL_12;
  }
  uint64_t v2 = v15;
  unint64_t v6 = *(void *)(v15 + 16);
  if (v6 < a1 || (uint64_t)v6 < a2) {
    goto LABEL_15;
  }
  sub_1D17BEBD0();
  swift_unknownObjectRetain_n();
  uint64_t v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x1E4FBC860];
  }
  uint64_t v9 = *(void *)(v8 + 16);
  swift_release();
  if (v9 != a2 - a1) {
    goto LABEL_16;
  }
  uint64_t v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x1E4FBC860];
  }
LABEL_12:
  swift_bridgeObjectRelease();
  uint64_t v11 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
  uint64_t v12 = (char *)objc_allocWithZone(v11);
  *(void *)&v12[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v10;
  v14.receiver = v12;
  v14.super_class = v11;
  return objc_msgSendSuper2(&v14, sel_init);
}

uint64_t MAFloatVectorWrapper.count.getter()
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(&v3);
  uint64_t v1 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease();
  return v1;
}

Swift::Float __swiftcall MAFloatVectorWrapper.sum()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, float *, uint64_t))MEMORY[0x1E4F16A38];
  return sub_1D1662510(v0);
}

Swift::Float __swiftcall MAFloatVectorWrapper.sumOfSquares()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, float *, uint64_t))MEMORY[0x1E4F16A80];
  return sub_1D1662510(v0);
}

Swift::Float __swiftcall MAFloatVectorWrapper.mean()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, float *, uint64_t))MEMORY[0x1E4F169A0];
  return sub_1D1662510(v0);
}

float sub_1D1662510(void (*a1)(uint64_t, uint64_t, float *, uint64_t))
{
  v7[1] = *MEMORY[0x1E4F143B8];
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(v7);
  uint64_t v3 = *(void *)(v7[0] + 16);
  float v6 = NAN;
  uint64_t v4 = v7[0] + 32;
  swift_bridgeObjectRetain();
  a1(v4, 1, &v6, v3);
  swift_bridgeObjectRelease_n();
  return v6;
}

float sub_1D1662654(void *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, float *, uint64_t))
{
  v10[1] = *MEMORY[0x1E4F143B8];
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70))(v10);
  uint64_t v5 = *(void *)(v10[0] + 16);
  float v9 = NAN;
  uint64_t v6 = v10[0] + 32;
  vDSP_Length v7 = a1;
  swift_bridgeObjectRetain();
  a3(v6, 1, &v9, v5);

  swift_bridgeObjectRelease_n();
  return v9;
}

Swift::Float __swiftcall MAFloatVectorWrapper.standardDeviation()()
{
  v5[1] = *MEMORY[0x1E4F143B8];
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(v5);
  uint64_t __StandardDeviation = 0;
  uint64_t v1 = (const float *)(v5[0] + 32);
  vDSP_Length v2 = *(void *)(v5[0] + 16);
  swift_bridgeObjectRetain();
  vDSP_normalize(v1, 1, 0, 1, (float *)&__StandardDeviation + 1, (float *)&__StandardDeviation, v2);
  swift_bridgeObjectRelease_n();
  return *(float *)&__StandardDeviation;
}

uint64_t MAFloatVectorWrapper.array()()
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(&v2);
  return v2;
}

void *MAFloatVectorWrapper.data()()
{
  id result = (*(void *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(&v4);
  unint64_t v2 = *(void *)(v4 + 16);
  if (v2 >> 61)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = sub_1D16629E0(v4 + 32, v4 + 32 + 4 * v2);
    swift_bridgeObjectRelease();
    return (void *)v3;
  }
  return result;
}

uint64_t sub_1D16629E0(uint64_t a1, uint64_t a2)
{
  v8[3] = MEMORY[0x1E4FBB2B8];
  v8[4] = MEMORY[0x1E4F27EF0];
  v8[0] = a1;
  v8[1] = a2;
  unint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E4FBB2B8]);
  uint64_t v3 = (unsigned char *)*v2;
  if (*v2 && (uint64_t v4 = (unsigned char *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_1D1667CEC(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_1D1667E34((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      uint64_t v6 = sub_1D1667DB0((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  return v6;
}

uint64_t MAFloatVectorWrapper.description.getter()
{
  return sub_1D1662C34(MEMORY[0x1E4FBB300]);
}

id sub_1D1662B50(void *a1, uint64_t a2, void (*a3)(uint64_t, void))
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70))(&v9);
  uint64_t v5 = v9;
  uint64_t v6 = a1;
  a3(v5, MEMORY[0x1E4FBB470]);

  swift_bridgeObjectRelease();
  vDSP_Length v7 = (void *)sub_1D17BDFE0();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t MAFloatVectorWrapper.debugDescription.getter()
{
  return sub_1D1662C34(MEMORY[0x1E4FBB308]);
}

uint64_t sub_1D1662C34(uint64_t (*a1)(uint64_t, void))
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(&v5);
  uint64_t v3 = a1(v5, MEMORY[0x1E4FBB470]);
  swift_bridgeObjectRelease();
  return v3;
}

id MAFloatVectorWrapper.naturalLogarithm()()
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(&v10);
  uint64_t v1 = v10;
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_1D1665DDC(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v3 + 16);
  id result = (id)swift_bridgeObjectRelease();
  if (v4 == v5)
  {
    vDSP_Length v7 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
    uint64_t v8 = (char *)objc_allocWithZone(v7);
    *(void *)&v8[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v3;
    v9.receiver = v8;
    v9.super_class = v7;
    return objc_msgSendSuper2(&v9, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id MAFloatVectorWrapper.naturalLogarithmIfPositive()()
{
  void (*v1)(void **__return_ptr);
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  unsigned char *v14;
  objc_class *v15;
  char *v16;
  objc_super v18;
  void *v19;

  uint64_t v1 = *(void (**)(void **__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70);
  v1(&v19);
  uint64_t v2 = v19;
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  uint64_t v5 = sub_1D1665DDC(v3);
  swift_bridgeObjectRelease();
  uint64_t v6 = v2[2];
  vDSP_Length v7 = *(void *)(v5 + 16);
  swift_bridgeObjectRelease();
  if (v6 != v7)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_1D1665FC8(v8);
  objc_super v9 = swift_bridgeObjectRelease();
  ((void (*)(void **__return_ptr, uint64_t))v1)(&v19, v9);
  uint64_t v10 = *(void *)(v4 + 16);
  if (v10 != *(void *)(v5 + 16))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v0 = v19;
  if (v19[2] != v10)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v11 = *(void *)(v4 + 16);
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_6;
  }
LABEL_13:
  uint64_t v5 = (uint64_t)sub_1D166762C(v5);
  uint64_t v11 = *(void *)(v4 + 16);
  if (!v11) {
    goto LABEL_14;
  }
LABEL_6:
  uint64_t v12 = (_DWORD *)(v5 + 32);
  id v13 = v0 + 4;
  objc_super v14 = (unsigned char *)(v4 + 32);
  do
  {
    if (*v14 == 1) {
      *uint64_t v12 = *v13;
    }
    ++v12;
    ++v13;
    ++v14;
    --v11;
  }
  while (v11);
LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
  uint64_t v16 = (char *)objc_allocWithZone(v15);
  *(void *)&v16[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v5;
  v18.receiver = v16;
  v18.super_class = v15;
  return objc_msgSendSuper2(&v18, sel_init);
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.append(float:)(Swift::Float a1)
{
  uint64_t v3 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  uint64_t v4 = *(char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = sub_1D169C88C(0, *((void *)v4 + 2) + 1, 1, v4);
  }
  unint64_t v6 = *((void *)v4 + 2);
  unint64_t v5 = *((void *)v4 + 3);
  if (v6 >= v5 >> 1) {
    uint64_t v4 = sub_1D169C88C((char *)(v5 > 1), v6 + 1, 1, v4);
  }
  *((void *)v4 + 2) = v6 + 1;
  *(Swift::Float *)&v4[4 * v6 + 32] = a1;
  *(void *)(v1 + v3) = v4;
  swift_bridgeObjectRelease();
}

uint64_t MAMutableFloatVectorWrapper.append(floats:count:)(char *a1, char *a2)
{
  uint64_t v5 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  swift_bridgeObjectRetain();
  sub_1D16631F0(a1, a2);
  *(void *)(v2 + v5) = v7;
  return swift_bridgeObjectRelease();
}

char *sub_1D16631F0(char *result, char *a2)
{
  uint64_t v3 = *v2;
  int64_t v4 = *((void *)*v2 + 2);
  int64_t v5 = (int64_t)&a2[v4];
  if (__OFADD__(v4, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = (uint64_t)a2;
  uint64_t v7 = result;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v9 = *((void *)v3 + 3) >> 1, v9 < v5))
  {
    if (v4 <= v5) {
      int64_t v10 = v5;
    }
    else {
      int64_t v10 = v4;
    }
    uint64_t v3 = sub_1D169C88C(isUniquelyReferenced_nonNull_native, v10, 1, v3);
    int64_t v9 = *((void *)v3 + 3) >> 1;
  }
  uint64_t v11 = *((void *)v3 + 2);
  uint64_t v12 = v9 - v11;
  id result = sub_1D1667AB0(&v3[4 * v11 + 32], v9 - v11, v7, v6);
  if (v13 < v6) {
    goto LABEL_15;
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *((void *)v3 + 2);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
LABEL_33:
      uint64_t v22 = v7 + 1;
LABEL_34:
      *((void *)v3 + 2) = v22;
      goto LABEL_13;
    }
    *((void *)v3 + 2) = v16;
  }
  if (v13 != v12) {
    goto LABEL_13;
  }
LABEL_16:
  if (result) {
    BOOL v17 = result == a2;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
    uint64_t v7 = (char *)*((void *)v3 + 2);
    int v19 = *(_DWORD *)result;
    result += 4;
    int v18 = v19;
    while (1)
    {
      unint64_t v20 = *((void *)v3 + 3);
      char v21 = (char *)(v20 >> 1);
      uint64_t v22 = v7 + 1;
      if ((uint64_t)(v20 >> 1) < (uint64_t)(v7 + 1))
      {
        uint64_t v28 = result;
        char v26 = a2;
        unint64_t v27 = sub_1D169C88C((char *)(v20 > 1), (int64_t)(v7 + 1), 1, v3);
        a2 = v26;
        uint64_t v3 = v27;
        id result = v28;
        char v21 = (char *)(*((void *)v3 + 3) >> 1);
        if ((uint64_t)v7 >= (uint64_t)v21) {
          goto LABEL_21;
        }
LABEL_24:
        *(_DWORD *)&v3[4 * (void)v7 + 32] = v18;
        if (result == a2) {
          goto LABEL_34;
        }
        uint64_t v23 = result;
        result += 4;
        while (1)
        {
          int v24 = *(_DWORD *)v23;
          v23 += 4;
          int v25 = v24;
          if (v21 - 1 == v7) {
            break;
          }
          *(_DWORD *)&v3[4 * (void)v7++ + 36] = v25;
          result += 4;
          if (v23 == a2) {
            goto LABEL_33;
          }
        }
        int v18 = v25;
        uint64_t v7 = v21;
        *((void *)v3 + 2) = v21;
      }
      else
      {
        if ((uint64_t)v7 < (uint64_t)v21) {
          goto LABEL_24;
        }
LABEL_21:
        *((void *)v3 + 2) = v7;
      }
    }
  }
LABEL_13:
  *uint64_t v2 = v3;
  return result;
}

uint64_t sub_1D16633B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1D169C88C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int64_t v9 = &v3[4 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 4 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 4 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D16634F8(uint64_t result)
{
  int64_t v4 = v2;
  uint64_t v5 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    uint64_t result = sub_1D17BE760();
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = *(void *)(result + 16);
  }
  if ((unint64_t)*v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_1D17BEAD0();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v8 = v20 + v6;
    if (!__OFADD__(v20, v6)) {
      goto LABEL_6;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v7 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 + v6;
  if (__OFADD__(v7, v6)) {
    goto LABEL_24;
  }
LABEL_6:
  unint64_t v9 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *int64_t v4 = v9;
  uint64_t v11 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v11 = 1;
  }
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v13 <= v8) {
    uint64_t v13 = v8;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = MEMORY[0x1D25F9270](v11, v13, 1, v9);
  swift_bridgeObjectRelease();
  *int64_t v4 = v14;
  uint64_t v12 = v14 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
  uint64_t v15 = *(void *)(v12 + 16);
  uint64_t v16 = (*(void *)(v12 + 24) >> 1) - v15;
  uint64_t result = (uint64_t)sub_1D16F7668(&v44, (void *)(v12 + 8 * v15 + 32), v16, v5);
  if (result < v6)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (result >= 1)
  {
    uint64_t v17 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v18 = __OFADD__(v17, result);
    uint64_t v19 = v17 + result;
    if (v18)
    {
      __break(1u);
LABEL_33:
      if (!sub_1D17BE7A0()) {
        goto LABEL_21;
      }
      sub_1D1668090();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      int v24 = v43;
      swift_unknownObjectRelease();
      while (2)
      {
        if (!v24) {
          goto LABEL_21;
        }
        while (1)
        {
          uint64_t v26 = *v4 & 0xFFFFFFFFFFFFFF8;
          if (v3 + 1 > *(void *)(v26 + 0x18) >> 1)
          {
            sub_1D17BE170();
            uint64_t v26 = *v4 & 0xFFFFFFFFFFFFFF8;
          }
          uint64_t v27 = *(void *)(v26 + 24) >> 1;
          if (v3 < v27) {
            break;
          }
LABEL_37:
          *(void *)(v26 + 16) = v3;
        }
        uint64_t v28 = v26 + 32;
        while (1)
        {
          *(void *)(v28 + 8 * v3++) = v24;
          int64_t v29 = v47;
          if (v44 < 0)
          {
            if (!sub_1D17BE7A0()) {
              goto LABEL_74;
            }
            sub_1D1668090();
            swift_unknownObjectRetain();
            swift_dynamicCast();
            int v24 = v43;
            swift_unknownObjectRelease();
            goto LABEL_49;
          }
          if (!v48) {
            break;
          }
          unint64_t v30 = (v48 - 1) & v48;
          unint64_t v31 = __clz(__rbit64(v48)) | (v47 << 6);
LABEL_45:
          int v24 = *(void **)(*(void *)(v44 + 48) + 8 * v31);
          id v32 = v24;
LABEL_46:
          int64_t v47 = v29;
          unint64_t v48 = v30;
LABEL_49:
          if (!v24)
          {
LABEL_74:
            *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v3;
            goto LABEL_21;
          }
          if (v3 >= v27)
          {
            uint64_t v26 = *v4 & 0xFFFFFFFFFFFFFF8;
            goto LABEL_37;
          }
        }
        int64_t v33 = v47 + 1;
        if (__OFADD__(v47, 1))
        {
          __break(1u);
LABEL_98:
          int v24 = 0;
          unint64_t v22 = 0;
          int64_t v21 = v1;
LABEL_30:
          int64_t v47 = v21;
          unint64_t v48 = v22;
          continue;
        }
        break;
      }
      int64_t v34 = (unint64_t)(v46 + 64) >> 6;
      if (v33 >= v34)
      {
        int v24 = 0;
        unint64_t v30 = 0;
        goto LABEL_46;
      }
      unint64_t v35 = *(void *)(v45 + 8 * v33);
      if (!v35)
      {
        int64_t v36 = v47 + 2;
        if (v47 + 2 >= v34) {
          goto LABEL_71;
        }
        unint64_t v35 = *(void *)(v45 + 8 * v36);
        if (!v35)
        {
          int64_t v1 = v47 + 3;
          if (v47 + 3 >= v34) {
            goto LABEL_72;
          }
          unint64_t v35 = *(void *)(v45 + 8 * v1);
          if (v35)
          {
            int64_t v33 = v47 + 3;
            goto LABEL_55;
          }
          int64_t v36 = v47 + 4;
          if (v47 + 4 >= v34)
          {
            int v24 = 0;
            unint64_t v30 = 0;
            int64_t v29 = v47 + 3;
            goto LABEL_46;
          }
          unint64_t v35 = *(void *)(v45 + 8 * v36);
          if (!v35)
          {
            int64_t v33 = v47 + 5;
            if (v47 + 5 >= v34)
            {
LABEL_72:
              int v24 = 0;
              unint64_t v30 = 0;
              int64_t v29 = v36;
              goto LABEL_46;
            }
            unint64_t v35 = *(void *)(v45 + 8 * v33);
            if (!v35)
            {
              int64_t v33 = v34 - 1;
              uint64_t v37 = v47 + 6;
              while (v34 != v37)
              {
                unint64_t v35 = *(void *)(v45 + 8 * v37++);
                if (v35)
                {
                  int64_t v33 = v37 - 1;
                  goto LABEL_55;
                }
              }
LABEL_71:
              int v24 = 0;
              unint64_t v30 = 0;
              int64_t v29 = v33;
              goto LABEL_46;
            }
            goto LABEL_55;
          }
        }
        int64_t v33 = v36;
      }
LABEL_55:
      unint64_t v30 = (v35 - 1) & v35;
      unint64_t v31 = __clz(__rbit64(v35)) + (v33 << 6);
      int64_t v29 = v33;
      goto LABEL_45;
    }
    *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
  }
  if (result != v16)
  {
LABEL_21:
    sub_1D1668088();
    return sub_1D17BE150();
  }
LABEL_26:
  uint64_t v3 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  int64_t v21 = v47;
  if (v44 < 0) {
    goto LABEL_33;
  }
  if (v48)
  {
    unint64_t v22 = (v48 - 1) & v48;
    unint64_t v23 = __clz(__rbit64(v48)) | (v47 << 6);
LABEL_29:
    int v24 = *(void **)(*(void *)(v44 + 48) + 8 * v23);
    id v25 = v24;
    goto LABEL_30;
  }
  int64_t v38 = v47 + 1;
  if (!__OFADD__(v47, 1))
  {
    int64_t v39 = (unint64_t)(v46 + 64) >> 6;
    if (v38 >= v39)
    {
      int v24 = 0;
      unint64_t v22 = 0;
      goto LABEL_30;
    }
    unint64_t v40 = *(void *)(v45 + 8 * v38);
    if (v40) {
      goto LABEL_79;
    }
    int64_t v41 = v47 + 2;
    if (v47 + 2 >= v39)
    {
LABEL_95:
      int v24 = 0;
      unint64_t v22 = 0;
      int64_t v21 = v38;
      goto LABEL_30;
    }
    unint64_t v40 = *(void *)(v45 + 8 * v41);
    if (v40) {
      goto LABEL_83;
    }
    int64_t v1 = v47 + 3;
    if (v47 + 3 < v39)
    {
      unint64_t v40 = *(void *)(v45 + 8 * v1);
      if (v40)
      {
        int64_t v38 = v47 + 3;
        goto LABEL_79;
      }
      int64_t v41 = v47 + 4;
      if (v47 + 4 >= v39) {
        goto LABEL_98;
      }
      unint64_t v40 = *(void *)(v45 + 8 * v41);
      if (v40)
      {
LABEL_83:
        int64_t v38 = v41;
LABEL_79:
        unint64_t v22 = (v40 - 1) & v40;
        unint64_t v23 = __clz(__rbit64(v40)) + (v38 << 6);
        int64_t v21 = v38;
        goto LABEL_29;
      }
      int64_t v38 = v47 + 5;
      if (v47 + 5 < v39)
      {
        unint64_t v40 = *(void *)(v45 + 8 * v38);
        if (!v40)
        {
          int64_t v38 = v39 - 1;
          uint64_t v42 = v47 + 6;
          do
          {
            if (v39 == v42) {
              goto LABEL_95;
            }
            unint64_t v40 = *(void *)(v45 + 8 * v42++);
          }
          while (!v40);
          int64_t v38 = v42 - 1;
        }
        goto LABEL_79;
      }
    }
    int v24 = 0;
    unint64_t v22 = 0;
    int64_t v21 = v41;
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D1663AD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native)
  {
    int64_t v8 = v3[3] >> 1;
    if (v8 >= v5)
    {
      if (*(void *)(a1 + 16)) {
        goto LABEL_5;
      }
      goto LABEL_18;
    }
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_1D169CAB4(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  int64_t v8 = v3[3] >> 1;
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if (v8 - v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v2 && v10 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6516D8);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v2);
  uint64_t v14 = v12 + v2;
  if (!v13)
  {
    v3[2] = v14;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1663C44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1D169CBC4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6516D0);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1663DB0(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_1D169CCE8(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1663F08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1D169CDF8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D90);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1664074(unint64_t a1)
{
  return sub_1D16640A4(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1D1667690);
}

uint64_t sub_1D166408C(unint64_t a1)
{
  return sub_1D16640A4(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1D16678A0);
}

uint64_t sub_1D16640A4(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    uint64_t v8 = v7 + v5;
    if (!__OFADD__(v7, v5)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v6 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v6;
  uint64_t v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v7 = 1;
  }
  if (v6 >> 62) {
    goto LABEL_27;
  }
  uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8) {
      uint64_t v11 = v8;
    }
    swift_bridgeObjectRetain();
    unint64_t v6 = MEMORY[0x1D25F9270](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *uint64_t v2 = v6;
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();
  return sub_1D17BE150();
}

uint64_t MAMutableFloatVectorWrapper.append(doubles:count:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  int64_t v4 = *(char **)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  int64_t v5 = *((void *)v4 + 2);
  int64_t v6 = v5 + a2;
  if (__OFADD__(v5, a2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = (double *)result;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v6 > *((void *)v4 + 3) >> 1)
    {
      if (v5 <= v6) {
        int64_t v10 = v6;
      }
      else {
        int64_t v10 = v5;
      }
      int64_t v4 = sub_1D169C88C(isUniquelyReferenced_nonNull_native, v10, 0, v4);
    }
    *(void *)(v2 + v3) = v4;
    uint64_t result = swift_bridgeObjectRelease();
    if (a2)
    {
      uint64_t v11 = 8 * a2;
      do
      {
        double v12 = *v8;
        uint64_t v13 = *(char **)(v2 + v3);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = sub_1D169C88C(0, *((void *)v13 + 2) + 1, 1, v13);
        }
        unint64_t v15 = *((void *)v13 + 2);
        unint64_t v14 = *((void *)v13 + 3);
        if (v15 >= v14 >> 1) {
          uint64_t v13 = sub_1D169C88C((char *)(v14 > 1), v15 + 1, 1, v13);
        }
        ++v8;
        float v16 = v12;
        *((void *)v13 + 2) = v15 + 1;
        *(float *)&v13[4 * v15 + 32] = v16;
        *(void *)(v2 + v3) = v13;
        uint64_t result = swift_bridgeObjectRelease();
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t MAMutableFloatVectorWrapper.append(vector:)(void *a1)
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70))(&v6);
  uint64_t v2 = v6;
  uint64_t v3 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  swift_bridgeObjectRetain();
  sub_1D16633B0(v2);
  *(void *)(v1 + v3) = v5;
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.append(array:)(Swift::OpaquePointer array)
{
  uint64_t v3 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D16633B0((uint64_t)array._rawValue);
  *(void *)(v1 + v3) = v4;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.setFloat(_:at:)(Swift::Float _, Swift::Int at)
{
  uint64_t v5 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  uint64_t v6 = *(char **)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  swift_bridgeObjectRetain();
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((at & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = sub_1D166762C((uint64_t)v6);
  if (at < 0) {
    goto LABEL_8;
  }
LABEL_3:
  if (*((void *)v6 + 2) <= (unint64_t)at)
  {
LABEL_9:
    __break(1u);
    return;
  }
  *(Swift::Float *)&v6[4 * at + 32] = _;
  *(void *)(v2 + v5) = v6;
  swift_bridgeObjectRelease();
}

uint64_t MAMutableFloatVectorWrapper.subtract(_:)(void *a1)
{
  uint64_t v2 = v1;
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70))(&v9);
  uint64_t v3 = v9;
  uint64_t v4 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  vDSP_Length v6 = *(void *)(v5 + 16);
  if (v6 == *(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v7 = (char *)v5;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v7 = sub_1D166762C(v5);
LABEL_3:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  vDSP_vsub((const float *)(v3 + 32), 1, (const float *)(v5 + 32), 1, (float *)v7 + 8, 1, v6);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  *(void *)(v2 + v4) = v7;
  return swift_bridgeObjectRelease();
}

uint64_t MAMutableFloatVectorWrapper.add(_:)(void *a1)
{
  uint64_t v2 = v1;
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70))(&v9);
  uint64_t v3 = v9;
  uint64_t v4 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  vDSP_Length v6 = *(void *)(v5 + 16);
  if (v6 == *(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v7 = (char *)v5;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v7 = sub_1D166762C(v5);
LABEL_3:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  vDSP_vadd((const float *)(v5 + 32), 1, (const float *)(v3 + 32), 1, (float *)v7 + 8, 1, v6);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  *(void *)(v2 + v4) = v7;
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.subtract(_:)(Swift::Float a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  vDSP_Length v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain_n();
  vDSP_Length v6 = (char *)v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    vDSP_Length v6 = sub_1D166762C(v4);
  }
  float __B = -a1;
  swift_bridgeObjectRetain();
  vDSP_vsadd((const float *)(v4 + 32), 1, &__B, (float *)v6 + 8, 1, v5);
  swift_bridgeObjectRelease_n();
  *(void *)(v1 + v3) = v6;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.add(_:)(Swift::Float a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  vDSP_Length v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain_n();
  vDSP_Length v6 = (char *)v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    vDSP_Length v6 = sub_1D166762C(v4);
  }
  Swift::Float __B = a1;
  swift_bridgeObjectRetain();
  vDSP_vsadd((const float *)(v4 + 32), 1, &__B, (float *)v6 + 8, 1, v5);
  swift_bridgeObjectRelease_n();
  *(void *)(v1 + v3) = v6;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.multiply(_:)(Swift::Float a1)
{
  uint64_t v2 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  Swift::Float v6 = a1;
  void v5[2] = &v6;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1D1665EAC((void (*)(int *__return_ptr, int *))sub_1D1667CD4, (uint64_t)v5, v3);
  swift_bridgeObjectRelease();
  *(void *)(v1 + v2) = v4;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.divide(_:)(Swift::Float a1)
{
  uint64_t v3 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  vDSP_Length v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain_n();
  Swift::Float v6 = (char *)v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::Float v6 = sub_1D166762C(v4);
  }
  Swift::Float v7 = a1;
  swift_bridgeObjectRetain();
  vDSP_vsdiv((const float *)(v4 + 32), 1, &v7, (float *)v6 + 8, 1, v5);
  swift_bridgeObjectRelease_n();
  *(void *)(v1 + v3) = v6;
  swift_bridgeObjectRelease();
}

uint64_t MAMutableFloatVectorWrapper.elementwiseMultiplyByWrapper(_:)(void *a1)
{
  uint64_t v2 = v1;
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70))(&v9);
  uint64_t v3 = v9;
  uint64_t v4 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  vDSP_Length v6 = *(void *)(v5 + 16);
  if (*(void *)(v9 + 16) == v6)
  {
    swift_bridgeObjectRetain_n();
    Swift::Float v7 = (char *)v5;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  Swift::Float v7 = sub_1D166762C(v5);
LABEL_3:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  vDSP_vmul((const float *)(v5 + 32), 1, (const float *)(v3 + 32), 1, (float *)v7 + 8, 1, v6);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  *(void *)(v2 + v4) = v7;
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatVectorWrapper.elementwiseRaiseToExponent(_:)(Swift::Float a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector;
  uint64_t v3 = *(char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector);
  if (*((void *)v3 + 2) >> 31)
  {
    __break(1u);
    goto LABEL_5;
  }
  int v5 = *((void *)v3 + 2);
  Swift::Float v4 = a1;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_5:
  }
    uint64_t v3 = sub_1D166762C((uint64_t)v3);
  vvpowsf((float *)v3 + 8, &v4, (const float *)v3 + 8, &v5);
  *(void *)(v1 + v2) = v3;
  swift_bridgeObjectRelease();
}

uint64_t MAFloatVectorWrapper.isApproximatelyEqual(to:)(void *a1)
{
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  Swift::Float v4 = (*(void *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(&v10);
  uint64_t v5 = v10;
  (*(void (**)(uint64_t *__return_ptr, void *))((*v3 & *a1) + 0x70))(&v9, v4);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6 == *(void *)(v9 + 16)) {
    unsigned __int8 v7 = sub_1D1667EB0((float *)(v9 + 32), v6, (float *)(v5 + 32), 0.00000011921, 0.00000011921);
  }
  else {
    unsigned __int8 v7 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t MAFloatVectorWrapper.isApproximatelyEqual(to:epsilon:)(void *a1, float a2)
{
  uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v6 = (*(void *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x70))(&v12);
  uint64_t v7 = v12;
  (*(void (**)(uint64_t *__return_ptr, void *))((*v5 & *a1) + 0x70))(&v11, v6);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8 == *(void *)(v11 + 16)) {
    unsigned __int8 v9 = sub_1D1667EB0((float *)(v11 + 32), v8, (float *)(v7 + 32), 0.0, a2);
  }
  else {
    unsigned __int8 v9 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

BOOL MAFloatVectorWrapper.isEqual(_:)(uint64_t a1)
{
  sub_1D1667F54(a1, (uint64_t)v9);
  if (!v9[3])
  {
    sub_1D166817C((uint64_t)v9, &qword_1EBD272F8);
    return 0;
  }
  type metadata accessor for MAFloatVectorWrapper();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v2 = v8;
  if (v8 == v1)
  {

    return 1;
  }
  else
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
    Swift::Float v4 = (*(void *(**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(v9);
    uint64_t v5 = v9[0];
    (*(void (**)(void **__return_ptr, void *))((*v3 & *v8) + 0x70))(&v8, v4);
    BOOL v6 = sub_1D1666884(v5, (uint64_t)v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t MAFloatVectorWrapper.hash.getter()
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(&v5);
  uint64_t v1 = v5;
  sub_1D17BED20();
  sub_1D16668F8((uint64_t)&v4, v1);
  uint64_t v2 = sub_1D17BED80();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1D1665914(unint64_t a1, double a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
    return result;
  }
  if (!a1) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t result = sub_1D17BE1C0();
  *(void *)(result + 16) = a1;
  uint64_t v4 = (double *)(result + 32);
  if (a1 < 4)
  {
    unint64_t v5 = 0;
    double v6 = a2;
LABEL_9:
    unint64_t v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  double v6 = a2;
  int64x2_t v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  uint64_t v8 = (int64x2_t *)(result + 48);
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1D1665A08(unint64_t a1, unint64_t a2)
{
  return sub_1D1665B14(a1, a2);
}

uint64_t sub_1D1665A14(unint64_t a1, int32x2_t a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
    return result;
  }
  if (!a1) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t result = sub_1D17BE1C0();
  *(void *)(result + 16) = a1;
  uint64_t v4 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    unint64_t v5 = 0;
    __int32 v6 = a2.i32[0];
LABEL_9:
    unint64_t v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 += a1 & 0xFFFFFFFFFFFFFFF8;
  __int32 v6 = a2.i32[0];
  int32x4_t v7 = vdupq_lane_s32(a2, 0);
  uint64_t v8 = (int32x4_t *)(result + 48);
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1D1665B08(unint64_t a1, unint64_t a2)
{
  return sub_1D1665B14(a1, a2);
}

uint64_t sub_1D1665B14(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t result = sub_1D17BE1C0();
  *(void *)(result + 16) = a2;
  unint64_t v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v7 = vdupq_n_s64(a1);
  uint64_t v8 = (int64x2_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1D1665BFC(unsigned int a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t result = sub_1D17BE1C0();
  *(void *)(result + 16) = a2;
  unint64_t v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  int32x4_t v7 = vdupq_n_s32(a1);
  uint64_t v8 = (int32x4_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1D1665CE8(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6516E8);
      uint64_t v4 = (void *)sub_1D17BE1C0();
      unint64_t v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        uint64_t v6 = a2 - 2;
        if (v6)
        {
          int32x4_t v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x1E4FBC860];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_1D1665DDC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    sub_1D168264C(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = (float *)(a1 + 32);
    do
    {
      float v5 = logf(*v4);
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      if (v7 >= v6 >> 1) {
        sub_1D168264C(v6 > 1, v7 + 1, 1);
      }
      *(void *)(v9 + 16) = v7 + 1;
      *(float *)(v9 + 4 * v7 + 32) = v5;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1D1665EAC(void (*a1)(int *__return_ptr, int *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v16 = MEMORY[0x1E4FBC860];
    sub_1D168264C(0, v5, 0);
    uint64_t v6 = v16;
    for (unint64_t i = (int *)(a3 + 32); ; ++i)
    {
      int v14 = *i;
      a1(&v15, &v14);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      int v10 = v15;
      uint64_t v16 = v6;
      unint64_t v12 = *(void *)(v6 + 16);
      unint64_t v11 = *(void *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1D168264C(v11 > 1, v12 + 1, 1);
        uint64_t v6 = v16;
      }
      *(void *)(v6 + 16) = v12 + 1;
      *(_DWORD *)(v6 + 4 * v12 + 32) = v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_1D1665FC8(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    sub_1D168266C(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (int *)(a1 + 32);
    do
    {
      int v6 = *v4++;
      int v5 = v6;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_1D168266C(v7 > 1, v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(unsigned char *)(result + v8 + 32) = (~v5 & 0x7F800000) == 0;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1D166609C(void (*a1)(uint64_t *__return_ptr, _OWORD *), uint64_t a2, uint64_t a3)
{
  int64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  if (!v4) {
    return v5;
  }
  uint64_t v37 = MEMORY[0x1E4FBC860];
  sub_1D168271C(0, v4, 0);
  uint64_t result = sub_1D1684B84(a3);
  uint64_t v9 = result;
  uint64_t v10 = 0;
  uint64_t v11 = a3 + 64;
  char v12 = *(unsigned char *)(a3 + 32);
  int64_t v25 = v4;
  int v26 = v8;
  uint64_t v27 = a3 + 64;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << v12)
  {
    unint64_t v15 = (unint64_t)v9 >> 6;
    if ((*(void *)(v11 + 8 * ((unint64_t)v9 >> 6)) & (1 << v9)) == 0) {
      goto LABEL_27;
    }
    if (*(_DWORD *)(a3 + 36) != v8) {
      goto LABEL_28;
    }
    uint64_t v16 = *(void *)(*(void *)(a3 + 48) + 8 * v9);
    sub_1D1668120(*(void *)(a3 + 56) + 32 * v9, (uint64_t)v35);
    uint64_t v34 = v16;
    *(void *)&v32[0] = v16;
    sub_1D1668120((uint64_t)v35, (uint64_t)v32 + 8);
    v30[0] = v32[0];
    v30[1] = v32[1];
    uint64_t v31 = v33;
    sub_1D166817C((uint64_t)&v34, &qword_1EA651718);
    uint64_t v5 = a2;
    a1(&v36, v30);
    sub_1D166817C((uint64_t)v30, &qword_1EA651718);
    if (v3)
    {
      swift_release();
      return v5;
    }
    uint64_t v17 = v36;
    uint64_t v5 = v37;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_1D168271C(0, *(void *)(v5 + 16) + 1, 1);
      uint64_t v5 = v37;
    }
    unint64_t v19 = *(void *)(v5 + 16);
    unint64_t v18 = *(void *)(v5 + 24);
    if (v19 >= v18 >> 1)
    {
      uint64_t result = sub_1D168271C(v18 > 1, v19 + 1, 1);
      uint64_t v5 = v37;
    }
    *(void *)(v5 + 16) = v19 + 1;
    *(void *)(v5 + 8 * v19 + 32) = v17;
    char v12 = *(unsigned char *)(a3 + 32);
    unint64_t v13 = 1 << v12;
    if (v9 >= 1 << v12) {
      goto LABEL_29;
    }
    uint64_t v11 = a3 + 64;
    uint64_t v20 = *(void *)(v27 + 8 * v15);
    if ((v20 & (1 << v9)) == 0) {
      goto LABEL_30;
    }
    int v8 = v26;
    if (*(_DWORD *)(a3 + 36) != v26) {
      goto LABEL_31;
    }
    unint64_t v21 = v20 & (-2 << (v9 & 0x3F));
    if (v21)
    {
      unint64_t v13 = __clz(__rbit64(v21)) | v9 & 0xFFFFFFFFFFFFFFC0;
      int64_t v14 = v25;
    }
    else
    {
      unint64_t v22 = v15 + 1;
      unint64_t v23 = (v13 + 63) >> 6;
      int64_t v14 = v25;
      if (v15 + 1 < v23)
      {
        unint64_t v24 = *(void *)(v27 + 8 * v22);
        if (v24)
        {
LABEL_23:
          unint64_t v13 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v15)
          {
            unint64_t v24 = *(void *)(a3 + 80 + 8 * v15++);
            if (v24)
            {
              unint64_t v22 = v15 + 1;
              goto LABEL_23;
            }
          }
        }
      }
    }
    ++v10;
    uint64_t v9 = v13;
    if (v10 == v14) {
      return v5;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1D1666360(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v16 = MEMORY[0x1E4FBC860];
    sub_1D168271C(0, v5, 0);
    uint64_t v6 = v16;
    for (unint64_t i = (uint64_t *)(a3 + 32); ; ++i)
    {
      uint64_t v14 = *i;
      a1(&v15, &v14);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v10 = v15;
      uint64_t v16 = v6;
      unint64_t v12 = *(void *)(v6 + 16);
      unint64_t v11 = *(void *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1D168271C(v11 > 1, v12 + 1, 1);
        uint64_t v6 = v16;
      }
      *(void *)(v6 + 16) = v12 + 1;
      *(void *)(v6 + 8 * v12 + 32) = v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

unint64_t sub_1D166647C(unint64_t result, uint64_t a2)
{
  uint64_t v4 = result;
  unint64_t v5 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_1D17BEAD0();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_1D17BEAD0();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6 == v21) {
      goto LABEL_5;
    }
    return 0;
  }
  if (v6 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return 0;
  }
LABEL_5:
  if (!v6) {
    return 1;
  }
  uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v4 < 0) {
    uint64_t v7 = v4;
  }
  if (v5) {
    uint64_t v8 = v7;
  }
  uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v10 = v9;
  }
  if (v8 == v10) {
    return 1;
  }
  if (v6 < 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    uint64_t result = MEMORY[0x1D25F9260](0, v4);
    unint64_t v11 = result;
    unint64_t v12 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0) {
      goto LABEL_19;
    }
LABEL_42:
    uint64_t v13 = MEMORY[0x1D25F9260](0, a2);
LABEL_21:
    char v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 280))(v13);
    swift_release();
    swift_release();
    if (v14)
    {
      uint64_t v15 = 1 - v6;
      for (uint64_t i = 5; ; ++i)
      {
        uint64_t v6 = v15 + i == 5;
        if (v15 + i == 5) {
          return v6;
        }
        unint64_t v19 = i - 4;
        if (v2)
        {
          uint64_t v20 = MEMORY[0x1D25F9260](i - 4, v4);
          if (v12) {
            goto LABEL_23;
          }
        }
        else
        {
          if (v19 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v20 = *(void *)(v4 + 8 * i);
          swift_retain();
          if (v12)
          {
LABEL_23:
            uint64_t v17 = MEMORY[0x1D25F9260](i - 4, a2);
            goto LABEL_24;
          }
        }
        if (v19 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_39;
        }
        uint64_t v17 = *(void *)(a2 + 8 * i);
        swift_retain();
LABEL_24:
        char v18 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 280))(v17);
        swift_release();
        swift_release();
        if ((v18 & 1) == 0) {
          return v6;
        }
      }
    }
    return 0;
  }
  unint64_t v2 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0) {
    goto LABEL_41;
  }
  if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_44;
  }
  unint64_t v11 = *(void *)(v4 + 32);
  uint64_t result = swift_retain();
  unint64_t v12 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0) {
    goto LABEL_42;
  }
LABEL_19:
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v13 = *(void *)(a2 + 32);
    swift_retain();
    goto LABEL_21;
  }
LABEL_44:
  __break(1u);
  return result;
}

BOOL sub_1D1666740(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 32) != *(unsigned __int16 *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (unsigned __int16 *)(a1 + 34);
  uint64_t v4 = (unsigned __int16 *)(a2 + 34);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

BOOL sub_1D16667AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (double *)(a1 + 40);
  uint64_t v4 = (double *)(a2 + 40);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    double v7 = *v3++;
    double v8 = v7;
    double v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

BOOL sub_1D1666818(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  uint64_t v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

BOOL sub_1D1666884(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (float *)(a1 + 36);
  uint64_t v6 = (float *)(a2 + 36);
  do
  {
    float v7 = *v5++;
    float v8 = v7;
    float v9 = *v6++;
    float v10 = v9;
    BOOL v12 = v4-- != 0;
    BOOL result = v8 == v10;
  }
  while (v8 == v10 && v12);
  return result;
}

uint64_t sub_1D16668F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_1D17BED30();
  if (v3)
  {
    uint64_t v5 = a2 + 32;
    do
    {
      v5 += 4;
      uint64_t result = sub_1D17BED60();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1D1666950(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(a1 + 16), sel_count);
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = (uint64_t)v2;
  if ((uint64_t)v2 <= 0)
  {
    uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651710);
    uint64_t v4 = (void *)swift_allocObject();
    int64_t v5 = _swift_stdlib_malloc_size(v4);
    uint64_t v6 = v5 - 32;
    if (v5 < 32) {
      uint64_t v6 = v5 - 25;
    }
    v4[2] = v3;
    v4[3] = 2 * (v6 >> 3);
  }
  swift_retain();
  id v7 = sub_1D16F6FD4(v9, (uint64_t)(v4 + 4), v3, a1);
  uint64_t result = swift_release();
  if (v7 == (id)v3) {
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D1666A30(char *a1, uint64_t a2)
{
  if (!a2) {
    return MEMORY[0x1E4FBC860];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD271F0);
    uint64_t v4 = 4 * a2;
    int64_t v5 = (char *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 29;
    }
    *((void *)v5 + 2) = a2;
    *((void *)v5 + 3) = 2 * (v7 >> 2);
    float v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 4 * a2);
      return (uint64_t)v5;
    }
  }
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MAMutableFloatVectorWrapper()
{
  return self;
}

uint64_t sub_1D1666B8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x1E4FBC860];
    }
    uint64_t v8 = 4 * v5;
    if (v5 <= 0)
    {
      float v9 = (char *)MEMORY[0x1E4FBC860];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        BOOL v12 = v9 + 32;
        uint64_t v13 = (char *)(a2 + 4 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8]) {
          goto LABEL_19;
        }
        memcpy(v12, v13, 4 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD271F0);
      float v9 = (char *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 29;
      }
      *((void *)v9 + 2) = v5;
      *((void *)v9 + 3) = 2 * (v11 >> 2);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1666CF8(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = sub_1D17BE760();
    if (v2) {
      goto LABEL_3;
    }
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  int64_t v6 = sub_1D16F7668(&v8, v3 + 4, v2, a1);
  uint64_t result = sub_1D1668088();
  if (v6 == (void *)v2) {
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void *sub_1D1666DF4(uint64_t a1)
{
  return sub_1D16671D8(a1, (uint64_t *)&unk_1EA651720, (uint64_t (*)(void *, void *, uint64_t, uint64_t))sub_1D16F7684, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1D16681F0);
}

int64_t *sub_1D1666E28(int64_t *result, int64_t a2)
{
  int64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2) {
      return (int64_t *)MEMORY[0x1E4FBC860];
    }
    int64_t v4 = (int64_t)result;
    if (v2 <= 0)
    {
      uint64_t v5 = (int64_t *)MEMORY[0x1E4FBC860];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD272F0);
      uint64_t v5 = (int64_t *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      void v5[2] = v2;
      void v5[3] = 2 * (v7 >> 3);
    }
    uint64_t result = sub_1D16F7884(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1D1666EF0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x1E4FBC860];
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      float v9 = (void *)MEMORY[0x1E4FBC860];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        sub_1D1668090();
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
      float v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      v9[2] = v5;
      void v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1667074(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = sub_1D17BE760();
    if (v2) {
      goto LABEL_3;
    }
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  int64_t v6 = sub_1D16F79B4(&v8, v3 + 4, v2, a1);
  uint64_t result = sub_1D1668088();
  if (v6 == (void *)v2) {
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void *sub_1D1667170(uint64_t a1)
{
  return sub_1D16671D8(a1, &qword_1EA6516F0, (uint64_t (*)(void *, void *, uint64_t, uint64_t))sub_1D16F7CCC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1D1668088);
}

void *sub_1D16671A4(uint64_t a1)
{
  return sub_1D16671D8(a1, &qword_1EA6516E0, (uint64_t (*)(void *, void *, uint64_t, uint64_t))sub_1D16F7EE4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1D1668088);
}

void *sub_1D16671D8(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void *, void *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v8 = (void *)swift_allocObject();
  int64_t v9 = _swift_stdlib_malloc_size(v8);
  uint64_t v10 = v9 - 32;
  if (v9 < 32) {
    uint64_t v10 = v9 - 17;
  }
  v8[2] = v4;
  int64_t v8[3] = 2 * (v10 >> 4);
  uint64_t v11 = a3(v18, v8 + 4, v4, a1);
  uint64_t v12 = v18[0];
  uint64_t v13 = v18[1];
  uint64_t v14 = v18[2];
  uint64_t v15 = v18[3];
  uint64_t v16 = v18[4];
  swift_bridgeObjectRetain();
  a4(v12, v13, v14, v15, v16);
  if (v11 != v4)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v8;
}

uint64_t sub_1D16672CC(uint64_t result, uint64_t (*a2)(void *, uint64_t *))
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v4 = result;
  if (result)
  {
    uint64_t v5 = sub_1D17BE1C0();
    *(void *)(v5 + 16) = v4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
  }
  uint64_t v6 = v5 + 32;
  v7[1] = v4;
  uint64_t v8 = 0;
  v7[0] = v5 + 32;
  uint64_t result = a2(v7, &v8);
  if (v2)
  {
    if (v8 <= v4)
    {
      if (!v7[0])
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      if (v6 == v7[0])
      {
        *(void *)(v5 + 16) = v8;
        swift_bridgeObjectRelease();
        return v5;
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 > v4)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v7[0])
  {
    if (v6 == v7[0])
    {
      *(void *)(v5 + 16) = v8;
      return v5;
    }
    goto LABEL_19;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_1D16673CC(uint64_t a1, vDSP_Length *a2, uint64_t a3, float a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  vDSP_Length v4 = *(void *)(a1 + 8);
  if (*(void *)(a3 + 16) != v4)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  float __B = a4;
  uint64_t v5 = *(float **)a1;
  if (!*(void *)a1) {
    goto LABEL_5;
  }
  uint64_t v7 = (const float *)(a3 + 32);
  swift_bridgeObjectRetain();
  vDSP_vsmul(v7, 1, &__B, v5, 1, v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1D1667494(uint64_t result, vDSP_Length *a2, uint64_t a3, float a4)
{
  vDSP_Length v4 = *(void *)(result + 8);
  if (*(void *)(a3 + 16) == v4)
  {
    float v8 = a4;
    uint64_t v5 = *(float **)result;
    if (*(void *)result)
    {
      uint64_t v7 = (const float *)(a3 + 32);
      swift_bridgeObjectRetain();
      vDSP_vsdiv(v7, 1, &v8, v5, 1, v4);
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1D1667538(uint64_t *result, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = result[1];
  if (*(void *)(a3 + 16) != v5)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(void *)(a4 + 16) != v5)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v7 = *result;
  if (*result)
  {
    uint64_t v10 = a3 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a5(v10, 1, a4 + 32, 1, v7, 1, v5);
    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    *a2 = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void *sub_1D1667604(void *a1)
{
  return sub_1D169C770(0, a1[2], 0, a1);
}

void *sub_1D1667618(void *a1)
{
  return sub_1D169C880(0, a1[2], 0, a1);
}

char *sub_1D166762C(uint64_t a1)
{
  return sub_1D169C88C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1D1667640(void *a1)
{
  return sub_1D169C99C(0, a1[2], 0, a1);
}

void *sub_1D1667654(void *a1)
{
  return sub_1D169D02C(0, a1[2], 0, a1);
}

void *sub_1D1667668(void *a1)
{
  return sub_1D169D040(0, a1[2], 0, a1);
}

void *sub_1D166767C(void *a1)
{
  return sub_1D169D280(0, a1[2], 0, a1);
}

uint64_t sub_1D1667690(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1D16680D0(&qword_1EA651708, (uint64_t *)&unk_1EA652DB0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652DB0);
          uint64_t v12 = sub_1D167B194(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1D1668090();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D16678A0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1D16680D0(&qword_1EA651700, &qword_1EA6516F8);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6516F8);
          uint64_t v12 = sub_1D167B200(v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for MADistribution();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

char *sub_1D1667AB0(char *a1, uint64_t a2, char *__src, uint64_t a4)
{
  vDSP_Length v4 = __src;
  if (!a4 || !a2) {
    return v4;
  }
  if (a4 >= a2) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a4;
  }
  if ((v5 & 0x8000000000000000) == 0 && (&a1[4 * v5] <= __src || &__src[4 * v5] <= a1))
  {
    memcpy(a1, __src, 4 * v5);
    v4 += 4 * v5;
    return v4;
  }
  uint64_t result = (char *)sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1667BC0(uint64_t a1, vDSP_Length *a2)
{
  return sub_1D16B05B8(a1, a2, **(void **)(v2 + 16), **(void **)(v2 + 24));
}

uint64_t *sub_1D1667BE4(uint64_t *a1, void *a2)
{
  return sub_1D1667538(a1, a2, **(void **)(v2 + 16), **(void **)(v2 + 24), MEMORY[0x1E4F16AB0]);
}

uint64_t sub_1D1667C1C(uint64_t a1, vDSP_Length *a2)
{
  return sub_1D16B0740(a1, a2, **(void **)(v2 + 24), *(float *)(v2 + 16));
}

uint64_t sub_1D1667C40(uint64_t a1, vDSP_Length *a2)
{
  return sub_1D16673CC(a1, a2, **(void **)(v2 + 24), *(float *)(v2 + 16));
}

uint64_t sub_1D1667C64(uint64_t a1, vDSP_Length *a2)
{
  return sub_1D1667494(a1, a2, **(void **)(v2 + 16), *(float *)(v2 + 24));
}

uint64_t *sub_1D1667C88(uint64_t *a1, void *a2)
{
  return sub_1D1667538(a1, a2, **(void **)(v2 + 16), **(void **)(v2 + 24), MEMORY[0x1E4F16D48]);
}

float sub_1D1667CC0@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result = *a1 * *a2;
  *a3 = result;
  return result;
}

float sub_1D1667CD4@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float result = *a1 * **(float **)(v2 + 16);
  *a2 = result;
  return result;
}

uint64_t sub_1D1667CEC(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1D1667DB0(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_1D17BDCE0();
  swift_allocObject();
  uint64_t result = sub_1D17BDCA0();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1D1667E34(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_1D17BDCE0();
  swift_allocObject();
  uint64_t result = sub_1D17BDCA0();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1D17BDD50();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

float *sub_1D1667EB0(float *result, uint64_t a2, float *a3, float a4, float a5)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
    {
      float v5 = vabds_f32(*a3, *result);
      if (*a3 == *result || v5 <= a4) {
        goto LABEL_5;
      }
      float v7 = fabsf(*a3) + fabsf(*result);
      if (v7 <= 3.4028e38)
      {
        if (v7 <= 1.1755e-38)
        {
          if ((float)(v5 * 8.5071e37) > a5) {
            return 0;
          }
          goto LABEL_5;
        }
      }
      else
      {
        float v7 = 3.4028e38;
      }
      if ((float)(v5 / v7) > a5) {
        return 0;
      }
LABEL_5:
      ++a3;
      ++result;
    }
    return (float *)1;
  }
  return result;
}

uint64_t sub_1D1667F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD272F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t method lookup function for MAFloatVectorWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MAFloatVectorWrapper);
}

uint64_t dispatch thunk of MAFloatVectorWrapper.floatVector.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of MAFloatVectorWrapper.__allocating_init(floatVector:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of MAFloatVectorWrapper.__allocating_init(array:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_1D1668030(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1D1668088()
{
  return swift_release();
}

unint64_t sub_1D1668090()
{
  unint64_t result = qword_1EA652D30;
  if (!qword_1EA652D30)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA652D30);
  }
  return result;
}

uint64_t sub_1D16680D0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D1668120(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1D166817C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

float sub_1D16681D8@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  return sub_1D1667CD4(a1, a2);
}

uint64_t sub_1D16681F8(uint64_t a1, vDSP_Length *a2)
{
  return sub_1D1667C1C(a1, a2);
}

uint64_t sub_1D1668214()
{
  type metadata accessor for GraphStoreManager.GraphStoreManagerRepository();
  uint64_t v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  *(void *)(v0 + 112) = MEMORY[0x1E4FBC868];
  qword_1EA651730 = v0;
  return result;
}

BOOL sub_1D1668260(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D1668274()
{
  return sub_1D17BED80();
}

uint64_t sub_1D16682BC()
{
  return sub_1D17BED30();
}

uint64_t sub_1D16682E8()
{
  return sub_1D17BED80();
}

uint64_t sub_1D166833C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v37 = a1;
  uint64_t v4 = sub_1D17BDDF0();
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v45 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_1D17BE580();
  uint64_t v46 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44, v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1D17BE560();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  swift_defaultActor_initialize();
  *(void *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readRunningCount) = 0;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) = 1;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_closed) = 0;
  uint64_t v13 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking;
  uint64_t v14 = sub_1D17BE1C0();
  *(void *)(v14 + 16) = 4;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(void *)(v2 + v13) = v14;
  *(void *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores) = MEMORY[0x1E4FBC860];
  *(void *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readWriteStore) = 0;
  uint64_t v15 = v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_url;
  uint64_t v36 = sub_1D17BDD40();
  uint64_t v38 = *(void *)(v36 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v15, a1, v36);
  uint64_t v40 = sub_1D165C128(0, &qword_1EA651958);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651960);
  uint64_t v16 = *(void *)(v11 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v42 = v17 | 7;
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1D17C91E0;
  sub_1D17BE540();
  sub_1D17BE550();
  uint64_t v47 = v19;
  uint64_t v39 = sub_1D166F8A0(&qword_1EA651968, MEMORY[0x1E4FBCC10]);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651970);
  uint64_t v30 = sub_1D166F850(&qword_1EA651978, &qword_1EA651970);
  uint64_t v33 = v10;
  sub_1D17BE6D0();
  unsigned int v41 = *MEMORY[0x1E4FBCC68];
  id v32 = *(void (**)(char *))(v46 + 104);
  v46 += 104;
  uint64_t v20 = v44;
  v32(v9);
  sub_1D17BDDE0();
  dispatch_object_t v35 = (dispatch_object_t)sub_1D17BE5A0();
  *(void *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_executionQueue) = v35;
  uint64_t v29 = v18;
  uint64_t v31 = v18 + v16;
  uint64_t v21 = swift_allocObject();
  long long v28 = xmmword_1D17C91F0;
  *(_OWORD *)(v21 + 16) = xmmword_1D17C91F0;
  sub_1D17BE550();
  uint64_t v47 = v21;
  sub_1D17BE6D0();
  uint64_t v22 = v20;
  unint64_t v23 = v32;
  ((void (*)(char *, void, uint64_t))v32)(v9, v41, v22);
  sub_1D17BDDE0();
  unint64_t v24 = sub_1D17BE5A0();
  *(void *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeederQueue) = v24;
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = v28;
  sub_1D17BE550();
  uint64_t v47 = v25;
  sub_1D17BE6D0();
  ((void (*)(char *, void, uint64_t))v23)(v9, v41, v44);
  sub_1D17BDDE0();
  int v26 = sub_1D17BE5A0();
  *(void *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_writeFeederQueue) = v26;
  dispatch_activate(v35);
  dispatch_activate(v24);
  dispatch_activate(v26);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v36);
  return v2;
}

uint64_t sub_1D1668900()
{
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) & 1) == 0) {
    dispatch_resume(*(dispatch_object_t *)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeederQueue));
  }
  uint64_t v1 = v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_url;
  uint64_t v2 = sub_1D17BDD40();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1D16689F0()
{
  sub_1D1668900();
  return MEMORY[0x1F4188210](v0);
}

uint64_t sub_1D1668A1C()
{
  return type metadata accessor for GraphStoreManager();
}

uint64_t type metadata accessor for GraphStoreManager()
{
  uint64_t result = qword_1EA6517F0;
  if (!qword_1EA6517F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1D1668A70()
{
  uint64_t result = sub_1D17BDD40();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_1D1668B50()
{
  uint64_t v3 = v0;
  v22[1] = *(id *)MEMORY[0x1E4F143B8];
  int v4 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_closed);
  uint64_t v5 = (void *)0x1EA651000;
  unint64_t v6 = 0x1EA651000uLL;
  if (v4 == 1)
  {
    *(unsigned char *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_closed) = 0;
    *(void *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores) = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRelease();
    uint64_t v1 = 4;
    uint64_t v7 = sub_1D17BE1C0();
    *(void *)(v7 + 16) = 4;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(void *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking) = v7;
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking;
  uint64_t v9 = *(void **)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking);
  unint64_t v10 = v9[2];
  if (v10)
  {
    if (v9[4])
    {
      if (v10 < 2)
      {
        __break(1u);
        goto LABEL_36;
      }
      if (v9[5])
      {
        if (v10 < 3)
        {
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if (v9[6])
        {
          if (v10 < 4)
          {
LABEL_41:
            __break(1u);
            goto LABEL_42;
          }
          if (v9[7])
          {
            sub_1D166F118();
            swift_allocError();
            *uint64_t v11 = 0;
LABEL_32:
            swift_willThrow();
            return v2;
          }
          unint64_t v6 = 3;
        }
        else
        {
          unint64_t v6 = 2;
        }
      }
      else
      {
        unint64_t v6 = 1;
      }
    }
    else
    {
      unint64_t v6 = 0;
    }
    uint64_t v1 = v3 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores;
    if (!(*(void *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores) >> 62))
    {
      id v2 = *(id *)((*(void *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores) & 0xFFFFFFFFFFFFFF8)
                 + 0x10);
      if ((uint64_t)v6 < (uint64_t)v2) {
        goto LABEL_18;
      }
LABEL_24:
      id v2 = objc_allocWithZone((Class)KGDegasGraphStore);
      uint64_t v14 = (void *)sub_1D17BDD20();
      id v15 = objc_msgSend(v2, sel_initWithURL_, v14);

      if (!v15)
      {
        sub_1D166F118();
        swift_allocError();
        *uint64_t v19 = 1;
        goto LABEL_32;
      }
      v22[0] = 0;
      unsigned int v16 = objc_msgSend(v15, sel_openWithMode_error_, 1, v22);
      id v2 = v22[0];
      if (!v16)
      {
        id v20 = v22[0];
        sub_1D17BDCF0();

        swift_willThrow();
        return v2;
      }
      id v17 = v22[0];
      id v2 = v15;
      MEMORY[0x1D25F8AB0]();
      if (*(void *)((*(void *)v1 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)v1 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      {
LABEL_27:
        sub_1D17BE1F0();
        sub_1D17BE150();
        goto LABEL_28;
      }
LABEL_42:
      sub_1D17BE170();
      goto LABEL_27;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  id v2 = (id)sub_1D17BEAD0();
  swift_bridgeObjectRelease();
  if ((uint64_t)v6 >= (uint64_t)v2) {
    goto LABEL_24;
  }
LABEL_18:
  uint64_t v12 = *(void *)v1;
  if ((*(void *)v1 & 0xC000000000000001) != 0) {
    goto LABEL_38;
  }
  if (v6 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_40;
  }
  for (id i = *(id *)(v12 + 8 * v6 + 32); ; id i = (id)MEMORY[0x1D25F9260](v6))
  {
    id v2 = i;
LABEL_28:
    uint64_t v5 = *(void **)(v3 + v8);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + v8) = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
LABEL_36:
    }
      uint64_t v5 = sub_1D1667640(v5);
    if (v6 < v5[2]) {
      break;
    }
    __break(1u);
LABEL_38:
    ;
  }
  v5[v6 + 4] = 1;
  *(void *)(v3 + v8) = v5;
  return v2;
}

uint64_t sub_1D1668ECC(unint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if (v4 < 0)
    {
      __break(1u);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_retain();
  id v5 = (id)a1;
  sub_1D166F46C(0, v4, v1);
  a1 = v6;
  char v8 = v7;
  swift_release();

  if ((v8 & 1) == 0)
  {
    unint64_t v3 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking;
    uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v1 + v3) = v4;
    if (result)
    {
      if ((a1 & 0x8000000000000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
LABEL_10:
    uint64_t result = (uint64_t)sub_1D1667640((void *)v4);
    uint64_t v4 = result;
    if ((a1 & 0x8000000000000000) == 0)
    {
LABEL_6:
      if (a1 < *(void *)(v4 + 16))
      {
        *(void *)(v4 + 8 * a1 + 32) = 0;
        *(void *)(v1 + v3) = v4;
        return result;
      }
      goto LABEL_12;
    }
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  uint64_t result = sub_1D17BEA40();
  __break(1u);
  return result;
}

uint64_t sub_1D1669024()
{
  uint64_t v1 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readWriteStore;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readWriteStore);
  if (v2)
  {
    objc_msgSend(v2, sel_close);
    unint64_t v3 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = 0;
  }
  uint64_t v4 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores;
  unint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_1D17BEAD0();
    uint64_t v6 = result;
    if (!result) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v6) {
      goto LABEL_12;
    }
  }
  if (v6 >= 1)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v9 = (id)MEMORY[0x1D25F9260](i, v5);
      }
      else {
        id v9 = *(id *)(v5 + 8 * i + 32);
      }
      unint64_t v10 = v9;
      objc_msgSend(v9, sel_close);
    }
LABEL_12:
    swift_bridgeObjectRelease();
    *(void *)(v0 + v4) = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRelease();
    uint64_t v11 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking;
    uint64_t v12 = *(void **)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readStoreBooking);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v0 + v11) = v12;
    if (result)
    {
      unint64_t v13 = v12[2];
      if (v13) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t result = (uint64_t)sub_1D1667640(v12);
      uint64_t v12 = (void *)result;
      unint64_t v13 = *(void *)(result + 16);
      if (v13)
      {
LABEL_14:
        v12[4] = 0;
        if (v13 != 1)
        {
          v12[5] = 0;
          if (v13 >= 3)
          {
            v12[6] = 0;
            if (v13 != 3)
            {
              v12[7] = 0;
              *(void *)(v0 + v11) = v12;
              *(unsigned char *)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_closed) = 1;
              return result;
            }
            goto LABEL_22;
          }
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1D16691BC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return MEMORY[0x1F4188298](sub_1D16691D8);
}

uint64_t sub_1D16691D8()
{
  sub_1D1669024();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D166923C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return MEMORY[0x1F4188298](sub_1D1669264);
}

uint64_t sub_1D1669264()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 64) = v2;
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1D1669358;
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 16);
  v3[7] = *(void *)(v0 + 24);
  v3[8] = v5;
  v3[5] = v2;
  v3[6] = v4;
  v3[3] = v6;
  v3[4] = &unk_1EA651828;
  return MEMORY[0x1F4188298](sub_1D166E04C);
}

uint64_t sub_1D1669358()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1D1669500;
  }
  else {
    uint64_t v2 = sub_1D166946C;
  }
  return MEMORY[0x1F4188298](v2);
}

uint64_t sub_1D166946C()
{
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  return result;
}

uint64_t sub_1D1669500()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D1669564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  return MEMORY[0x1F4188298](sub_1D16695F0);
}

uint64_t sub_1D16695F0()
{
  sub_1D1669024();
  return MEMORY[0x1F4188298](sub_1D1669684);
}

uint64_t sub_1D1669684()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = (void *)sub_1D17BDD20();
  v0[2] = 0;
  LODWORD(v1) = objc_msgSend(v1, sel_copyToURL_error_, v2, v0 + 2);

  uint64_t v3 = (void *)v0[2];
  if (v1)
  {
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    id v4 = v3;
    uint64_t v5 = v8;
  }
  else
  {
    id v6 = v3;
    sub_1D17BDCF0();

    swift_willThrow();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
  }
  return v5();
}

uint64_t sub_1D16697AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  void v5[3] = a2;
  v5[4] = a3;
  void v5[2] = a1;
  uint64_t v6 = sub_1D17BDDD0();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D1669874);
}

uint64_t sub_1D1669874()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeederQueue);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  long long v5 = *(_OWORD *)(v0 + 24);
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  *(_OWORD *)(v4 + 32) = v5;
  sub_1D166A6AC();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1D1669988;
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 16);
  v6[6] = *(void *)(v0 + 40);
  v6[7] = v3;
  v6[4] = &unk_1EA6518B8;
  v6[5] = v4;
  v6[2] = v8;
  v6[3] = v7;
  return MEMORY[0x1F4188298](sub_1D1669264);
}

uint64_t sub_1D1669988()
{
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v5 = *v1;
  *(void *)(v5 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1D1669B3C);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_1D1669B3C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D1669BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1D166FB94;
  return sub_1D1669D28(a1, a3, a4);
}

uint64_t sub_1D1669C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_1D166FB94;
  return sub_1D166A174(a1, a3, a4, a5);
}

uint64_t sub_1D1669D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = sub_1D17BDDD0();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D1669DEC);
}

void sub_1D1669DEC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readRunningCount;
  *(void *)(v0 + 80) = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readRunningCount;
  uint64_t v3 = *(void *)(v1 + v2);
  BOOL v4 = __OFADD__(v3, 1);
  uint64_t v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + v2) = v5;
    uint64_t v6 = *(void *)(v0 + 48);
    if (v5 == 4 && *(unsigned char *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) == 1)
    {
      *(unsigned char *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) = 0;
      dispatch_suspend(*(dispatch_object_t *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeederQueue));
      uint64_t v6 = *(void *)(v0 + 48);
    }
    uint64_t v7 = swift_task_alloc();
    *(void *)(v0 + 88) = v7;
    long long v8 = *(_OWORD *)(v0 + 32);
    *(void *)(v7 + 16) = v6;
    *(_OWORD *)(v7 + 24) = v8;
    *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
    sub_1D166F8A0(&qword_1EA651880, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651888);
    sub_1D166F850(&qword_1EA651890, &qword_1EA651888);
    sub_1D17BE6D0();
    uint64_t v12 = (void (*)(uint64_t, uint64_t, void *, uint64_t))((char *)&dword_1EA652548 + dword_1EA652548);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1D1669FE8;
    uint64_t v10 = *(void *)(v0 + 72);
    uint64_t v11 = *(void *)(v0 + 24);
    v12(v11, v10, &unk_1EA651938, v7);
  }
}

uint64_t sub_1D1669FE8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    uint64_t v5 = sub_1D166FB9C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v5 = sub_1D166FB98;
  }
  return MEMORY[0x1F4188298](v5);
}

uint64_t sub_1D166A174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  void v5[3] = a2;
  v5[4] = a3;
  void v5[2] = a1;
  uint64_t v6 = sub_1D17BDDD0();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D166A23C);
}

uint64_t sub_1D166A23C(uint64_t (*a1)())
{
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readRunningCount;
  *(void *)(v1 + 80) = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readRunningCount;
  uint64_t v4 = *(void *)(v2 + v3);
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + v3) = v6;
    uint64_t v7 = *(void *)(v1 + 48);
    if (v6 == 4 && *(unsigned char *)(v7 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) == 1)
    {
      *(unsigned char *)(v7 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) = 0;
      dispatch_suspend(*(dispatch_object_t *)(v7 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeederQueue));
      uint64_t v7 = *(void *)(v1 + 48);
    }
    uint64_t v8 = *(void *)(v1 + 40);
    uint64_t v9 = *(void *)(v7 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_executionQueue);
    uint64_t v10 = swift_task_alloc();
    *(void *)(v1 + 88) = v10;
    long long v11 = *(_OWORD *)(v1 + 24);
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = v7;
    *(_OWORD *)(v10 + 32) = v11;
    sub_1D166A6AC();
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v1 + 96) = v12;
    *uint64_t v12 = v1;
    v12[1] = sub_1D166A3AC;
    uint64_t v13 = *(void *)(v1 + 72);
    uint64_t v14 = *(void *)(v1 + 16);
    v12[6] = *(void *)(v1 + 40);
    v12[7] = v9;
    v12[4] = &unk_1EA6518D0;
    v12[5] = v10;
    v12[2] = v14;
    v12[3] = v13;
    a1 = sub_1D1669264;
  }
  return MEMORY[0x1F4188298](a1);
}

uint64_t sub_1D166A3AC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    BOOL v5 = sub_1D166A5EC;
  }
  else
  {
    swift_task_dealloc();
    BOOL v5 = sub_1D166A538;
  }
  return MEMORY[0x1F4188298](v5);
}

uint64_t sub_1D166A538()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[6];
  uint64_t v3 = *(void *)(v2 + v1);
  BOOL v4 = __OFSUB__(v3, 1);
  uint64_t v5 = v3 - 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + v1) = v5;
    if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) & 1) == 0 && v5 < 4)
    {
      uint64_t v6 = v0[6];
      *(unsigned char *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) = 1;
      dispatch_resume(*(dispatch_object_t *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeederQueue));
    }
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  return result;
}

uint64_t sub_1D166A5EC()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[6];
  uint64_t result = swift_task_dealloc();
  uint64_t v4 = *(void *)(v2 + v1);
  uint64_t v5 = v4 - 1;
  if (__OFSUB__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v0[6];
    *(void *)(v6 + v0[10]) = v5;
    if ((*(unsigned char *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) & 1) == 0 && v5 < 4)
    {
      uint64_t v7 = v0[6];
      *(unsigned char *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeeding) = 1;
      dispatch_resume(*(dispatch_object_t *)(v7 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readFeederQueue));
    }
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  return result;
}

uint64_t sub_1D166A6AC()
{
  return sub_1D17BE6D0();
}

uint64_t sub_1D166A774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[5] = a2;
  return MEMORY[0x1F4188298](sub_1D166A808);
}

uint64_t sub_1D166A808()
{
  id v1 = sub_1D1668B50();
  v0[8] = v1;
  uint64_t v2 = v1;
  v0[2] = 0;
  unsigned int v3 = objc_msgSend(v1, sel_beginTransactionWithError_, v0 + 2);
  uint64_t v4 = (void *)v0[2];
  if (v3)
  {
    uint64_t v10 = (uint64_t (*)(void))(v0[5] + *(int *)v0[5]);
    id v5 = v4;
    v2;
    uint64_t v6 = (void *)swift_task_alloc();
    v0[9] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1D166A9D4;
    return v10();
  }
  else
  {
    id v8 = v4;
    sub_1D17BDCF0();

    swift_willThrow();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_1D166A9D4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unsigned int v3 = sub_1D166AC68;
  }
  else
  {

    unsigned int v3 = sub_1D166AB44;
  }
  return MEMORY[0x1F4188298](v3);
}

uint64_t sub_1D166AB44()
{
  *(void *)(v0 + 32) = 0;
  unsigned int v1 = objc_msgSend(*(id *)(v0 + 64), sel_commitTransactionWithError_, v0 + 32);
  uint64_t v2 = *(void **)(v0 + 32);
  unsigned int v3 = *(void **)(v0 + 64);
  if (v1)
  {
    id v4 = v2;
  }
  else
  {
    id v6 = v2;
    sub_1D17BDCF0();

    swift_willThrow();
  }
  sub_1D1668ECC((unint64_t)v3);

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1D166AC68()
{
  unsigned int v1 = (void *)v0[8];

  v0[3] = 0;
  unsigned __int8 v2 = objc_msgSend(v1, sel_rollbackTransactionWithError_, v0 + 3);
  unsigned int v3 = (void *)v0[3];
  id v4 = (void *)v0[10];
  uint64_t v5 = (void *)v0[8];
  if (v2)
  {
    id v6 = v3;
    swift_willThrow();
  }
  else
  {
    id v7 = v3;
    sub_1D17BDCF0();

    swift_willThrow();
  }
  sub_1D1668ECC((unint64_t)v5);

  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1D166AD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  v5[10] = *(void *)(a4 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D166AE94);
}

uint64_t sub_1D166AE94()
{
  id v1 = sub_1D1668B50();
  v0[13] = v1;
  unsigned __int8 v2 = v1;
  v0[2] = 0;
  unsigned int v3 = objc_msgSend(v1, sel_beginTransactionWithError_, v0 + 2);
  uint64_t v4 = (void *)v0[2];
  if (v3)
  {
    uint64_t v12 = (uint64_t (*)(uint64_t, id, _UNKNOWN **))(v0[6] + *(int *)v0[6]);
    id v5 = v4;
    id v6 = v2;
    uint64_t v7 = (void *)swift_task_alloc();
    v0[14] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1D166B078;
    uint64_t v8 = v0[11];
    return v12(v8, v6, &off_1F27FED58);
  }
  else
  {
    id v10 = v4;
    sub_1D17BDCF0();

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_1D166B078()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unsigned int v3 = sub_1D166B39C;
  }
  else
  {

    unsigned int v3 = sub_1D166B1EC;
  }
  return MEMORY[0x1F4188298](v3);
}

uint64_t sub_1D166B1EC()
{
  id v1 = (void *)v0[13];
  uint64_t v2 = *(void (**)(void, void, void))(v0[10] + 32);
  v2(v0[12], v0[11], v0[8]);
  v0[4] = 0;
  unsigned int v3 = objc_msgSend(v1, sel_commitTransactionWithError_, v0 + 4);
  uint64_t v4 = (void *)v0[4];
  uint64_t v6 = v0[12];
  uint64_t v5 = (void *)v0[13];
  uint64_t v7 = v0[8];
  if (v3)
  {
    v2(v0[5], v0[12], v0[8]);
    id v8 = v4;
  }
  else
  {
    uint64_t v10 = v0[10];
    id v11 = v4;
    sub_1D17BDCF0();

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v6, v7);
  }
  sub_1D1668ECC((unint64_t)v5);

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1D166B39C()
{
  id v1 = (void *)v0[13];

  v0[3] = 0;
  unsigned int v2 = objc_msgSend(v1, sel_rollbackTransactionWithError_, v0 + 3);
  unsigned int v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[15];
  uint64_t v5 = (void *)v0[13];
  if (v2)
  {
    id v6 = v3;
    swift_willThrow();
  }
  else
  {
    id v7 = v3;
    sub_1D17BDCF0();

    swift_willThrow();
  }
  sub_1D1668ECC((unint64_t)v5);

  swift_task_dealloc();
  swift_task_dealloc();
  id v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1D166B4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *id v8 = v4;
  v8[1] = sub_1D166FB94;
  v8[6] = a4;
  v8[7] = a2;
  void v8[5] = a3;
  return MEMORY[0x1F4188298](sub_1D166A808);
}

uint64_t sub_1D166B598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_1D166B660;
  return sub_1D166AD94(a1, a3, a4, a5);
}

uint64_t sub_1D166B660()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1D166B754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  void v5[3] = a2;
  v5[4] = a3;
  void v5[2] = a1;
  uint64_t v6 = sub_1D17BDDD0();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D166B81C);
}

uint64_t sub_1D166B81C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_writeFeederQueue);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  long long v5 = *(_OWORD *)(v0 + 24);
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  *(_OWORD *)(v4 + 32) = v5;
  sub_1D166A6AC();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1D166B930;
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 16);
  v6[6] = *(void *)(v0 + 40);
  v6[7] = v3;
  v6[4] = &unk_1EA651878;
  v6[5] = v4;
  v6[2] = v8;
  v6[3] = v7;
  return MEMORY[0x1F4188298](sub_1D1669264);
}

uint64_t sub_1D166B930()
{
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v5 = *v1;
  *(void *)(v5 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1D166FB8C);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_1D166BAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  void v5[3] = a2;
  v5[4] = a3;
  void v5[2] = a1;
  uint64_t v6 = sub_1D17BDDD0();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D166BBAC);
}

uint64_t sub_1D166BBAC()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_executionQueue;
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 24);
  uint64_t v6 = *(void *)(*(void *)(v0 + 24) + v3);
  *(void *)(v0 + 80) = v4;
  *(void *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 40) = v2;
  sub_1D166A6AC();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1D166BCC8;
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 16);
  v7[6] = *(void *)(v0 + 48);
  v7[7] = v6;
  v7[4] = &unk_1EA6518A0;
  v7[5] = v4;
  void v7[2] = v9;
  v7[3] = v8;
  return MEMORY[0x1F4188298](sub_1D1669264);
}

uint64_t sub_1D166BCC8()
{
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v5 = *v1;
  *(void *)(v5 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1D1669B3C);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_1D166BE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_1D166FB94;
  return sub_1D166BF44(a1, a3, a4, a5);
}

uint64_t sub_1D166BF44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  v5[11] = *(void *)(a4 - 8);
  v5[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D166C02C);
}

uint64_t sub_1D166C02C()
{
  uint64_t v1 = v0[10];
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_closed) == 1)
  {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_closed) = 0;
    uint64_t v1 = v0[10];
  }
  uint64_t v2 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readWriteStore;
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readWriteStore);
  if (v3)
  {
    id v4 = *(id *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readWriteStore);
    goto LABEL_5;
  }
  id v13 = objc_allocWithZone((Class)KGDegasGraphStore);
  uint64_t v14 = (void *)sub_1D17BDD20();
  id v4 = objc_msgSend(v13, sel_initWithURL_, v14);

  if (!v4)
  {
    sub_1D166F118();
    swift_allocError();
    *uint64_t v19 = 1;
    swift_willThrow();
    goto LABEL_14;
  }
  v0[2] = 0;
  unsigned __int8 v15 = objc_msgSend(v4, sel_openWithMode_error_, 134, v0 + 2);
  uint64_t v7 = (void *)v0[2];
  if (v15)
  {
    uint64_t v16 = *(void **)(v1 + v2);
    *(void *)(v1 + v2) = v4;
    id v17 = v7;
    id v4 = v4;

    uint64_t v3 = 0;
LABEL_5:
    v0[13] = v4;
    v0[3] = 0;
    id v5 = v3;
    unsigned __int8 v6 = objc_msgSend(v4, sel_beginTransactionWithError_, v0 + 3);
    uint64_t v7 = (void *)v0[3];
    if (v6)
    {
      uint64_t v21 = (uint64_t (*)(uint64_t, id, _UNKNOWN **))(v0[7] + *(int *)v0[7]);
      id v8 = v7;
      id v9 = v4;
      uint64_t v10 = (void *)swift_task_alloc();
      v0[14] = v10;
      *uint64_t v10 = v0;
      v10[1] = sub_1D166C2F8;
      uint64_t v11 = v0[12];
      return v21(v11, v9, &off_1F27FED58);
    }
  }
  id v18 = v7;
  sub_1D17BDCF0();

  swift_willThrow();
LABEL_14:
  swift_task_dealloc();
  id v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_1D166C2F8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1D166C5DC;
  }
  else
  {

    uint64_t v3 = sub_1D166C46C;
  }
  return MEMORY[0x1F4188298](v3);
}

uint64_t sub_1D166C46C()
{
  uint64_t v1 = (void *)v0[13];
  (*(void (**)(void, void, void))(v0[11] + 32))(v0[6], v0[12], v0[9]);
  v0[5] = 0;
  unsigned int v2 = objc_msgSend(v1, sel_commitTransactionWithError_, v0 + 5);
  uint64_t v3 = (void *)v0[5];
  id v4 = (void *)v0[13];
  if (v2)
  {
    id v5 = v3;
  }
  else
  {
    uint64_t v7 = v0[11];
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[6];
    id v10 = v3;
    sub_1D17BDCF0();

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
  }
  swift_task_dealloc();
  unsigned __int8 v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1D166C5DC()
{
  uint64_t v1 = (void *)v0[13];

  v0[4] = 0;
  unsigned int v2 = objc_msgSend(v1, sel_rollbackTransactionWithError_, v0 + 4);
  uint64_t v3 = (void *)v0[4];
  id v4 = (void *)v0[15];
  id v5 = (void *)v0[13];
  if (v2)
  {
    id v6 = v3;
    swift_willThrow();
  }
  else
  {
    id v7 = v3;
    sub_1D17BDCF0();

    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1D166C6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  void v5[3] = a2;
  v5[4] = a3;
  void v5[2] = a1;
  uint64_t v6 = sub_1D17BDDD0();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D166C7B8);
}

uint64_t sub_1D166C7B8()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_executionQueue);
  long long v9 = *(_OWORD *)(v0 + 24);
  sub_1D17BDDC0();
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  *(_OWORD *)(v4 + 32) = v9;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v5;
  *id v5 = v0;
  v5[1] = sub_1D166C8D0;
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 16);
  v5[6] = *(void *)(v0 + 40);
  v5[7] = v3;
  v5[4] = &unk_1EA651810;
  v5[5] = v4;
  void v5[2] = v7;
  void v5[3] = v6;
  return MEMORY[0x1F4188298](sub_1D1669264);
}

uint64_t sub_1D166C8D0()
{
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v5 = *v1;
  *(void *)(v5 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1D166CA94);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_1D166CA94()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_1D166CAF8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1D17BDD40();
  uint64_t v5 = *(void *)(v4 - 8);
  v7.n128_f64[0] = MEMORY[0x1F4188790](v4, v6);
  long long v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v1 + 112);
  if (!*(void *)(v10 + 16) || (unint64_t result = sub_1D165A94C(a1), (v12 & 1) == 0))
  {
    id v18 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    v18(v9, a1, v4, v7);
    type metadata accessor for GraphStoreManager();
    swift_allocObject();
    uint64_t v16 = a1;
    uint64_t v17 = sub_1D166833C((uint64_t)v9);
    uint64_t v15 = 1;
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v10 + 56);
  uint64_t v14 = *(void *)(v13 + 16 * result + 8);
  uint64_t v15 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    uint64_t v16 = a1;
    uint64_t v17 = *(void *)(v13 + 16 * result);
    id v18 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    swift_retain_n();
LABEL_6:
    ((void (*)(char *, uint64_t, uint64_t))v18)(v9, v16, v4);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *(void *)(v2 + 112);
    *(void *)(v2 + 112) = 0x8000000000000000;
    sub_1D165E984(v17, v15, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 112) = v21;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    swift_release();
    return v17;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D166CCEC(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_1D17BDDD0();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = sub_1D17BDD40();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D166CE18);
}

uint64_t sub_1D166CE18()
{
  uint64_t v1 = v0[3];
  uint64_t v4 = *(void *)(v1 + 112);
  uint64_t v3 = (uint64_t *)(v1 + 112);
  uint64_t v2 = v4;
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_1D165A94C(v0[2]), (v6 & 1) != 0))
  {
    __n128 v7 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v5);
    uint64_t v8 = *v7;
    v0[11] = *v7;
    uint64_t v9 = v7[1];
    if (v9 < 2)
    {
      uint64_t v16 = v0[2];
      swift_retain();
      sub_1D16A8BFC(v16);
      swift_release();
      return MEMORY[0x1F4188298](sub_1D166D0D8);
    }
    else
    {
      uint64_t v10 = v0[10];
      uint64_t v11 = v0[7];
      uint64_t v12 = v0[8];
      (*(void (**)(uint64_t, void, uint64_t))(v12 + 16))(v10, v0[2], v11);
      swift_retain_n();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      sub_1D165E984(v8, v9 - 1, v10, isUniquelyReferenced_nonNull_native);
      *uint64_t v3 = v17;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v14 = (uint64_t (*)(void))v0[1];
      return v14();
    }
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 16))(v0[9], v0[2], v0[7]);
    sub_1D17BE850();
    swift_bridgeObjectRelease();
    sub_1D166F8A0(&qword_1EA651980, MEMORY[0x1E4F276F0]);
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    return sub_1D17BEA40();
  }
}

uint64_t sub_1D166D0D8()
{
  sub_1D17BDDC0();
  unint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EA652548 + dword_1EA652548);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1D166D1AC;
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[6];
  return v5((uint64_t)v5, v3, (uint64_t)&unk_1EA651990, v2);
}

uint64_t sub_1D166D1AC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  uint64_t v2 = *(void *)(*(void *)v0 + 40);
  uint64_t v3 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return MEMORY[0x1F4188298](sub_1D166D318);
}

uint64_t sub_1D166D318()
{
  return MEMORY[0x1F4188298](sub_1D166D334);
}

uint64_t sub_1D166D334()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D166D3B0(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = sub_1D17BDD40();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = sub_1D17BDDD0();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D166D4D0);
}

uint64_t sub_1D166D4D0()
{
  uint64_t v16 = v0;
  sub_1D166F8A0(&qword_1EA6518F0, MEMORY[0x1E4F276F0]);
  if (sub_1D17BDFA0())
  {
    (*(void (**)(void, void, void))(v0[8] + 16))(v0[9], v0[4], v0[7]);
    sub_1D165C128(0, &qword_1EA651920);
    uint64_t v1 = sub_1D17BE600();
    os_log_type_t v2 = sub_1D17BE530();
    BOOL v3 = os_log_type_enabled(v1, v2);
    uint64_t v5 = v0[8];
    uint64_t v4 = v0[9];
    uint64_t v6 = v0[7];
    if (v3)
    {
      os_log_type_t type = v2;
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v15 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      uint64_t v9 = sub_1D17BDD30();
      v0[3] = sub_1D16C513C(v9, v10, &v15);
      sub_1D17BE650();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
      _os_log_impl(&dword_1D1654000, v1, type, "Swapping graph store from %s to same location, doing nothing", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D25FAD70](v8, -1, -1);
      MEMORY[0x1D25FAD70](v7, -1, -1);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    uint64_t v11 = v0[5];
    v0[13] = sub_1D166CAF8(v0[4]);
    v0[14] = sub_1D166CAF8(v11);
    return MEMORY[0x1F4188298](sub_1D166D79C);
  }
}

uint64_t sub_1D166D79C()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  BOOL v3 = (void *)swift_task_alloc();
  v0[15] = v3;
  v3[2] = v2;
  v3[3] = &unk_1EA651900;
  v3[4] = v1;
  v0[2] = MEMORY[0x1E4FBC860];
  sub_1D166F8A0(&qword_1EA651880, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651888);
  sub_1D166F850(&qword_1EA651890, &qword_1EA651888);
  sub_1D17BE6D0();
  uint64_t v6 = (uint64_t (*)(void))((char *)&dword_1EA652548 + dword_1EA652548);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[16] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1D166D944;
  return v6();
}

uint64_t sub_1D166D944()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96);
  uint64_t v3 = *(void *)(*(void *)v1 + 88);
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    uint64_t v5 = sub_1D166DE50;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v5 = sub_1D166DAD0;
  }
  return MEMORY[0x1F4188298](v5);
}

uint64_t sub_1D166DAD0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1D166DB68;
  uint64_t v2 = *(void *)(v0 + 32);
  return sub_1D166CCEC(v2);
}

uint64_t sub_1D166DB68()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 152) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1D166DCC0;
  uint64_t v4 = *(void *)(v1 + 40);
  return sub_1D166CCEC(v4);
}

uint64_t sub_1D166DCC0()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D166DDD0);
}

uint64_t sub_1D166DDD0()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D166DE50()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D166DEBC);
}

uint64_t sub_1D166DEBC()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D166DF48(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1D166FB94;
  return v6(a1);
}

uint64_t sub_1D166E024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  return MEMORY[0x1F4188298](sub_1D166E04C);
}

uint64_t sub_1D166E04C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  *(_OWORD *)(v3 + 32) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA651838);
  uint64_t v6 = MEMORY[0x1E4FBC0F0];
  sub_1D17BE320();
  sub_1D17BE590();
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v0 + 16);
  *(void *)(v0 + 72) = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1D166E198;
  uint64_t v9 = *(void *)(v0 + 64);
  uint64_t v10 = *(void *)(v0 + 24);
  return MEMORY[0x1F4187D90](v10, v7, v9, v5, v6);
}

uint64_t sub_1D166E198()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1D166E310;
  }
  else {
    uint64_t v2 = sub_1D166E2AC;
  }
  return MEMORY[0x1F4188298](v2);
}

uint64_t sub_1D166E2AC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D166E310()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D166E374@<X0>(NSObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651840);
  MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_suspend(a1);
  uint64_t v14 = sub_1D17BE300();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = a4;
  v15[5] = a1;
  v15[6] = a2;
  v15[7] = a3;
  uint64_t v16 = a1;
  swift_retain();
  uint64_t result = sub_1D166E76C((uint64_t)v13, (uint64_t)&unk_1EA651850, (uint64_t)v15);
  *a5 = result;
  return result;
}

uint64_t sub_1D166E4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  *(void *)(v5 + 16) = a4;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a5 + *a5);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_1D166E590;
  return v9(a1);
}

uint64_t sub_1D166E590()
{
  *(void *)(*(void *)v1 + 32) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1D166E708;
  }
  else {
    uint64_t v2 = sub_1D166E6A4;
  }
  return MEMORY[0x1F4188298](v2);
}

uint64_t sub_1D166E6A4()
{
  dispatch_resume(*(dispatch_object_t *)(v0 + 16));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D166E708()
{
  dispatch_resume(*(dispatch_object_t *)(v0 + 16));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D166E76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1D17BE300();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1D17BE2F0();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1D166F0B8(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D17BE2D0();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1D166E8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a2;
  uint64_t v5 = sub_1D17BDDD0();
  v4[5] = v5;
  v4[6] = *(void *)(v5 - 8);
  v4[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D166E9B0);
}

uint64_t sub_1D166E9B0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  long long v6 = *(_OWORD *)(v0 + 16);
  sub_1D17BDDC0();
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EA652548 + dword_1EA652548);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1D166EAB0;
  uint64_t v4 = *(void *)(v0 + 56);
  return v7((uint64_t)v7, v4, (uint64_t)&unk_1EA651950, v2);
}

uint64_t sub_1D166EAB0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  uint64_t v3 = *(void *)(*(void *)v1 + 48);
  uint64_t v4 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  if (v0) {
    uint64_t v5 = sub_1D166ECC0;
  }
  else {
    uint64_t v5 = sub_1D166EC5C;
  }
  return MEMORY[0x1F4188298](v5);
}

uint64_t sub_1D166EC5C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D166ECC0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D166ED24()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return MEMORY[0x1F4188210](v0);
}

uint64_t type metadata accessor for GraphStoreManager.GraphStoreManagerRepository()
{
  return self;
}

uint64_t sub_1D166ED80()
{
  return v0;
}

uint64_t sub_1D166ED8C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1D166FB94;
  return sub_1D166BE7C(a1, v5, v7, v6, v4);
}

uint64_t sub_1D166EE4C()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1D166EE5C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 24);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1D166FB94;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA651820 + dword_1EA651820);
  return v6(a1, v4);
}

uint64_t sub_1D166EF24@<X0>(uint64_t *a1@<X8>)
{
  return sub_1D166E374(*(NSObject **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16), a1);
}

uint64_t sub_1D166EF44()
{
  swift_unknownObjectRelease();

  swift_release();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1D166EF8C(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v4 = *(int **)(v1 + 48);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_1D166FB94;
  v6[2] = v5;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v7 = (void *)swift_task_alloc();
  v6[3] = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_1D166E590;
  return v9(a1);
}

uint64_t sub_1D166F0B8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651840);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1D166F118()
{
  unint64_t result = qword_1EA651860;
  if (!qword_1EA651860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1EA651860);
  }
  return result;
}

uint64_t sub_1D166F16C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1D166FB94;
  return sub_1D166BAE4(a1, v5, v7, v6, v4);
}

uint64_t sub_1D166F22C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1D166FB94;
  return sub_1D166BE7C(a1, v5, v7, v6, v4);
}

uint64_t sub_1D166F2EC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1D166FB94;
  return sub_1D1669C60(a1, v5, v7, v6, v4);
}

uint64_t sub_1D166F3AC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1D166FB94;
  return sub_1D166B598(a1, v5, v7, v6, v4);
}

void sub_1D166F46C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unint64_t v4 = a1;
    if (a2 >= a1)
    {
      sub_1D165C128(0, &qword_1EA6518E0);
      uint64_t v6 = OBJC_IVAR____TtC17KnowledgeGraphKit17GraphStoreManager_readOnlyStores;
      while ((uint64_t)v4 < a2)
      {
        uint64_t v7 = *(void *)(a3 + v6);
        if ((v7 & 0xC000000000000001) != 0)
        {
          id v8 = (id)MEMORY[0x1D25F9260](v4);
        }
        else
        {
          if ((v4 & 0x8000000000000000) != 0) {
            goto LABEL_15;
          }
          if (v4 >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_16;
          }
          id v8 = *(id *)(v7 + 8 * v4 + 32);
        }
        uint64_t v9 = v8;
        char v10 = sub_1D17BE5C0();

        if ((v10 & 1) == 0 && a2 != ++v4) {
          continue;
        }
        return;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_1D166F588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *id v8 = v4;
  v8[1] = sub_1D166FB94;
  return sub_1D166E8E8(a1, a2, a3, v3);
}

uint64_t sub_1D166F63C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1D166FB94;
  return sub_1D1669BA8(a1, v4, v5, v6);
}

uint64_t sub_1D166F6F0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1D166FB94;
  return sub_1D166B4D8(a1, v4, v5, v6);
}

uint64_t sub_1D166F7A4()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_1D166B660;
  *(_OWORD *)(v2 + 24) = v3;
  return MEMORY[0x1F4188298](sub_1D16695F0);
}

uint64_t sub_1D166F850(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D166F8A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D166F8E8()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1D166FB94;
  v2[2] = v0;
  return MEMORY[0x1F4188298](sub_1D16691D8);
}

uint64_t getEnumTagSinglePayload for GraphStoreManager.Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GraphStoreManager.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D166FAE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t sub_1D166FB10(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1D166FB1C(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GraphStoreManager.Error()
{
  return &type metadata for GraphStoreManager.Error;
}

unint64_t sub_1D166FB38()
{
  unint64_t result = qword_1EA651998;
  if (!qword_1EA651998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651998);
  }
  return result;
}

uint64_t sub_1D166FC80()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_1D165E5B8(v0, &v4);
  id v1 = *(id *)(v4 + 16);
  objc_msgSend(v1, sel_copy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, &qword_1EBD27510);
  swift_dynamicCast();

  swift_release();
  return v3;
}

uint64_t sub_1D166FD84()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  id v2 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
  swift_bridgeObjectRetain();
  id v3 = objc_msgSend(v2, sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  v8[0] = v4;
  uint64_t v9 = v1;
  sub_1D165CB78(&v9, (uint64_t)v8);
  swift_bridgeObjectRelease();
  id v5 = *(id *)(v8[0] + 16);
  objc_msgSend(v5, sel_copy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, &qword_1EBD27510);
  swift_dynamicCast();

  uint64_t v6 = v9;
  swift_release();
  return v6;
}

id sub_1D166FEB0(void *a1)
{
  return sub_1D16700B8(a1, (void (*)(uint64_t *, unint64_t *, uint64_t))sub_1D165F854);
}

id sub_1D166FF28(void *a1)
{
  void v11[4] = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  swift_bridgeObjectRetain();
  id v3 = a1;
  objc_msgSend(v3, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v10;
  uint64_t v10 = inited;
  DirectedBinaryAdjacency.intersectingSources(with:)(&v10, v11);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = v11[0];
  uint64_t v6 = (objc_class *)type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  BOOL v7 = (char *)objc_allocWithZone(v6);
  *(void *)&v7[OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue] = v5;
  v9.receiver = v7;
  v9.super_class = v6;
  return objc_msgSendSuper2(&v9, sel_init);
}

id sub_1D16700A0(void *a1)
{
  return sub_1D16700B8(a1, (void (*)(uint64_t *, unint64_t *, uint64_t))sub_1D165FEA4);
}

id sub_1D16700B8(void *a1, void (*a2)(uint64_t *, unint64_t *, uint64_t))
{
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  swift_bridgeObjectRetain();
  id v6 = a1;
  objc_msgSend(v6, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v13;
  uint64_t v13 = v5;
  v14[0] = sub_1D165F754(MEMORY[0x1E4FBC860]);
  a2(&v13, v14, inited);
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v8 = v14[0];
  objc_super v9 = (objc_class *)type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  *(void *)&v10[OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue] = v8;
  v12.receiver = v10;
  v12.super_class = v9;
  return objc_msgSendSuper2(&v12, sel_init);
}

id sub_1D167024C(void *a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  swift_bridgeObjectRetain();
  id v4 = a1;
  objc_msgSend(v4, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v11;
  uint64_t v11 = v3;
  v12[0] = sub_1D165F754(MEMORY[0x1E4FBC860]);
  sub_1D166011C(&v11, inited, (uint64_t *)v12);
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v6 = v12[0];
  BOOL v7 = (objc_class *)type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  unint64_t v8 = (char *)objc_allocWithZone(v7);
  *(void *)&v8[OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue] = v6;
  v10.receiver = v8;
  v10.super_class = v7;
  return objc_msgSendSuper2(&v10, sel_init);
}

id sub_1D16703D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  uint64_t v9 = v2;
  static ElementIdentifierTupleSet.joinOnTargets(_:_:)(&v9, &v8, &v10);
  unint64_t v3 = v10;
  id v4 = (objc_class *)type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  *(void *)&v5[OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue] = v3;
  v7.receiver = v5;
  v7.super_class = v4;
  return objc_msgSendSuper2(&v7, sel_init);
}

id sub_1D167053C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  if (*(void *)(v3 + 16) && (unint64_t v5 = sub_1D165A8E0(a1), (v6 & 1) != 0)) {
    return objc_msgSend(*(id *)(*(void *)(*(void *)(v3 + 56) + 8 * v5) + 16), sel_containsIdentifier_, a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_1D16705EC(void *a1)
{
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  swift_bridgeObjectRetain();
  id v3 = a1;
  objc_msgSend(v3, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v10;
  v8[0] = inited;
  DirectedBinaryAdjacency.targets(forSources:)(v8, &v10);
  swift_release();
  swift_bridgeObjectRelease();
  id v5 = *(id *)(v10 + 16);
  objc_msgSend(v5, sel_copy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, &qword_1EBD27510);
  swift_dynamicCast();

  uint64_t v6 = v9;
  swift_release();
  return v6;
}

uint64_t sub_1D16707B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  if (*(void *)(v2 + 16) && (unint64_t v3 = sub_1D165A8E0(a1), (v4 & 1) != 0))
  {
    id v5 = *(id *)(*(void *)(*(void *)(v2 + 56) + 8 * v3) + 16);
    swift_retain();
  }
  else
  {
    id v5 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
    *(void *)(swift_allocObject() + 16) = v5;
  }
  id v6 = v5;
  objc_msgSend(v6, sel_copy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, &qword_1EBD27510);
  swift_dynamicCast();

  swift_release();
  return v8;
}

id sub_1D1670A60(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  uint64_t v9 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.formUnion(_:)(&v8);
  uint64_t v3 = v9;
  char v4 = (objc_class *)type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  id v5 = (char *)objc_allocWithZone(v4);
  *(void *)&v5[OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue] = v3;
  v7.receiver = v5;
  v7.super_class = v4;
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t sub_1D1670B48(unint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  DirectedBinaryAdjacency.targets(minCount:)(a1, &v6);
  id v2 = *(id *)(v6 + 16);
  objc_msgSend(v2, sel_copy, v4);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, &qword_1EBD27510);
  swift_dynamicCast();

  swift_release();
  return v5;
}

uint64_t sub_1D1670C58(uint64_t a1)
{
  sub_1D1667F54(a1, (uint64_t)v7);
  if (!v8)
  {
    sub_1D167133C((uint64_t)v7);
    goto LABEL_5;
  }
  type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    char v4 = 0;
    return v4 & 1;
  }
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue);
  uint64_t v3 = *(void *)&v6[OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v4 = sub_1D169FF94(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v4 & 1;
}

id sub_1D1670F24()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for KGWrapperDirectedBinaryAdjacency()
{
  return self;
}

unint64_t sub_1D16710A0(void *a1, uint64_t a2)
{
  id v3 = a1;
  objc_msgSend(v3, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v6;
  uint64_t v6 = a2;
  v7[0] = v4;
  return ElementIdentifierTupleSet.subscript.setter(v7, &v6);
}

id sub_1D167128C()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for KGWrapperMutableDirectedBinaryAdjacency()
{
  return self;
}

unint64_t sub_1D16712E8()
{
  unint64_t result = qword_1EA651FB0;
  if (!qword_1EA651FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651FB0);
  }
  return result;
}

uint64_t sub_1D167133C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD272F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D167139C()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

id sub_1D16713B8(void *a1)
{
  id v1 = a1;
  objc_msgSend(v1, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();
  uint64_t v2 = v9;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v9;
  uint64_t v9 = (void *)inited;
  sub_1D165CF6C((uint64_t *)&v9, v10);

  unint64_t v4 = v10[0];
  uint64_t v5 = (objc_class *)type metadata accessor for KGWrapperDirectedBinaryAdjacency();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  *(void *)&v6[OBJC_IVAR____TtC17KnowledgeGraphKit32KGWrapperDirectedBinaryAdjacency_wrappedValue] = v4;
  v8.receiver = v6;
  v8.super_class = v5;
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t MAGraphMatrix.mcl(directed:iterations:power:inflation:tolerance:selfLoop:progressClosure:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *, double), vDSP_Stride a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a8 + 8))(a1, a7, a8);
  uint64_t v17 = MASquareMatrixRepresentation.mcl(iterations:power:inflation:tolerance:selfLoop:progressClosure:)(a2, a3, a4, a5, a6, a9, a10);
  swift_release();
  return v17;
}

uint64_t MASquareMatrixRepresentation.mcl(iterations:power:inflation:tolerance:selfLoop:progressClosure:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, double), vDSP_Stride a5, double a6, double a7)
{
  uint64_t v8 = (uint64_t)v7;
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  int64_t v12 = v7[2];
  uint64_t v11 = v7[3];
  vDSP_Stride v13 = v7[4];
  uint64_t v78 = v12;
  uint64_t v79 = v11;
  unint64_t v80 = (void *)v13;
  swift_bridgeObjectRetain();
  if (a7 != 0.0)
  {
    uint64_t v84 = 1;
    uint64_t v85 = v11;
    uint64_t v86 = sub_1D1665914(v11, a7);
    v88.rows = (Swift::Int)&v84;
    MAMatrix.setDiag(vector:)(v88);
    swift_bridgeObjectRelease();
    int64_t v12 = v78;
    uint64_t v11 = v79;
    vDSP_Stride v13 = (vDSP_Stride)v80;
  }
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_1D1665914(v11, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_107;
  }
  if (v11 < 0)
  {
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
  }
  while (1)
  {
    if (v11)
    {
      uint64_t v15 = (const double *)(v13 + 32);
      uint64_t v16 = (double *)(v14 + 32);
      uint64_t v17 = v11;
      do
      {
        if (v12 < 0) {
          goto LABEL_112;
        }
        vDSP_sveD(v15++, v11, v16++, v12);
        --v17;
      }
      while (v17);
    }
    swift_bridgeObjectRelease();
    uint64_t v84 = 1;
    uint64_t v85 = v11;
    uint64_t v86 = v14;
    /= infix(_:_:)((vDSP_Length *)&v78, (uint64_t)&v84);
    swift_bridgeObjectRelease();
    uint64_t v67 = v8;
    if (a1 < 1 || a6 + 1.0 <= a6) {
      break;
    }
    if (a2 < 1) {
      goto LABEL_110;
    }
    uint64_t v18 = 0;
    int64_t v19 = v78;
    vDSP_Stride v13 = v79;
    uint64_t v20 = v80;
    unint64_t v14 = 0x7FFFFFFFLL;
LABEL_13:
    unint64_t v72 = v20;
    uint64_t v74 = v18;
    if (a2 == 1)
    {
      uint64_t v21 = (double *)swift_bridgeObjectRetain();
      goto LABEL_33;
    }
    int64_t v12 = v19 * v13;
    BOOL v23 = v19 < (uint64_t)0xFFFFFFFF80000000 || v13 < (uint64_t)0xFFFFFFFF80000000;
    uint64_t v24 = swift_bridgeObjectRetain();
    if (v13 != v19) {
      goto LABEL_101;
    }
    if ((unsigned __int128)(v19 * (__int128)v13) >> 64 != (v19 * v13) >> 63) {
      goto LABEL_102;
    }
    if (v12 < 0) {
      goto LABEL_113;
    }
    uint64_t v8 = 8 * v13 * v13;
    uint64_t v25 = a2 - 1;
    uint64_t v11 = v24;
    do
    {
      swift_bridgeObjectRetain();
      if (v12)
      {
        uint64_t v21 = (double *)sub_1D17BE1C0();
        *((void *)v21 + 2) = v12;
        bzero(v21 + 4, 8 * v13 * v13);
        if (v19 > 0x7FFFFFFF) {
          goto LABEL_95;
        }
      }
      else
      {
        uint64_t v21 = (double *)MEMORY[0x1E4FBC860];
        if (v19 > 0x7FFFFFFF) {
          goto LABEL_95;
        }
      }
      if (v23)
      {
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
        __break(1u);
LABEL_99:
        __break(1u);
        goto LABEL_100;
      }
      if (v13 > 0x7FFFFFFF) {
        goto LABEL_97;
      }
      cblas_dgemm_NEWLAPACK();
      swift_bridgeObjectRelease_n();
      uint64_t v11 = (uint64_t)v21;
      --v25;
    }
    while (v25);
    uint64_t v78 = v13;
    uint64_t v79 = v13;
    uint64_t v8 = v67;
LABEL_33:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v80 = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v21 = (double *)sub_1D1667604(v21);
      unint64_t v80 = v21;
    }
    uint64_t v27 = v21 + 4;
    if (a3 == 2)
    {
      vDSP_Length v28 = v19 * v13;
      if ((unsigned __int128)(v19 * (__int128)v13) >> 64 == (v19 * v13) >> 63)
      {
        if ((v28 & 0x8000000000000000) == 0)
        {
          vDSP_vsqD(v27, 1, v21 + 4, 1, v28);
          goto LABEL_43;
        }
LABEL_112:
        sub_1D17BEA30();
        __break(1u);
LABEL_113:
        uint64_t result = sub_1D17BEA30();
        __break(1u);
        return result;
      }
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
    uint64_t v29 = v19 * v13;
    if ((unsigned __int128)(v19 * (__int128)v13) >> 64 != (v19 * v13) >> 63) {
      goto LABEL_104;
    }
    if (v29 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v29 > 0x7FFFFFFF) {
        goto LABEL_106;
      }
      v81[0] = v19 * v13;
      *(double *)&uint64_t v84 = (double)a3;
      vvpows(v27, (const double *)&v84, v21 + 4, v81);
LABEL_43:
      unint64_t v80 = v21;
      if (v13 < 0) {
        goto LABEL_113;
      }
      swift_bridgeObjectRetain();
      if (v13)
      {
        uint64_t v30 = sub_1D17BE1C0();
        *(void *)(v30 + 16) = v13;
        bzero((void *)(v30 + 32), 8 * v13);
        uint64_t v31 = 4;
        vDSP_Stride v32 = v13;
        while ((v19 & 0x8000000000000000) == 0)
        {
          vDSP_sveD(&v21[v31], v13, (double *)(v30 + v31 * 8), v19);
          ++v31;
          if (!--v32) {
            goto LABEL_50;
          }
        }
        goto LABEL_112;
      }
      uint64_t v30 = MEMORY[0x1E4FBC860];
LABEL_50:
      swift_bridgeObjectRelease();
      uint64_t v84 = 1;
      uint64_t v85 = v13;
      uint64_t v86 = v30;
      /= infix(_:_:)((vDSP_Length *)&v78, (uint64_t)&v84);
      swift_bridgeObjectRelease();
      int64_t v12 = v78;
      uint64_t v11 = v79;
      uint64_t v33 = v80;
      uint64_t v84 = v78;
      uint64_t v85 = v79;
      uint64_t v86 = (uint64_t)v80;
      *(void *)uint64_t v81 = v19;
      vDSP_Stride v82 = v13;
      int64_t v83 = v72;
      LOBYTE(v77) = 1;
      v89.rows = (Swift::Int)v81;
      v89.columns = (Swift::Int)&v77;
      double v35 = MAMatrix.euclideanDistance(matrix:axe:)(v89, v34);
      swift_bridgeObjectRelease();
      LOBYTE(v84) = 0;
      uint64_t v18 = v74 + 1;
      vDSP_Stride v13 = a5;
      a4(&v84, (double)(v74 + 1) / (double)a1 * 0.8);
      if (v84 == 1) {
        goto LABEL_90;
      }
      if (v18 >= a1) {
        break;
      }
      uint64_t v20 = v33;
      vDSP_Stride v13 = v11;
      int64_t v19 = v12;
      if (v35 <= a6) {
        break;
      }
      goto LABEL_13;
    }
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    unint64_t v14 = (unint64_t)sub_1D1667604((void *)v14);
    if (v11 < 0) {
      goto LABEL_108;
    }
  }
  uint64_t v77 = MEMORY[0x1E4FBC870];
  if (v12 < 0) {
    goto LABEL_109;
  }
  uint64_t v62 = MEMORY[0x1E4FBC870];
  if (!v12) {
    goto LABEL_88;
  }
  if (v11 < 0) {
    goto LABEL_111;
  }
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  a6 = (double)v12;
  a3 = v12;
  do
  {
    if (v37 == v12) {
      goto LABEL_99;
    }
    uint64_t v65 = v37;
    *(double *)&uint64_t v84 = MEMORY[0x1E4FBC870];
    uint64_t v85 = 0;
    if (v11)
    {
      uint64_t v38 = v37 * v11;
      if ((unsigned __int128)(v37 * (__int128)v11) >> 64 != (v37 * v11) >> 63)
      {
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      unint64_t v14 = 0;
      uint64_t v39 = (uint64_t)v80;
      uint64_t v40 = (uint64_t)(v80 + 4);
      a1 = (uint64_t)v80;
      uint64_t v73 = v37 * v11;
      a2 = (uint64_t)(v80 + 4);
      uint64_t v75 = v36;
      while (1)
      {
        if (v14 == v11)
        {
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
          goto LABEL_96;
        }
        if (v36 < 0) {
          goto LABEL_93;
        }
        if (v38 + v14 >= *(void *)(v39 + 16)) {
          goto LABEL_94;
        }
        if (*(double *)(v40 + 8 * (v38 + v14)) > 0.0) {
          break;
        }
LABEL_63:
        if (++v14 == v11) {
          goto LABEL_85;
        }
      }
      uint64_t v43 = *(void *)(v8 + 40);
      if ((v43 & 0xC000000000000001) != 0)
      {
        id v44 = (id)MEMORY[0x1D25F9260](v14);
      }
      else
      {
        if (v14 >= *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_98;
        }
        id v44 = *(id *)(v43 + 8 * v14 + 32);
      }
      uint64_t v45 = v44;
      uint64_t v46 = v84;
      if ((v84 & 0xC000000000000001) != 0)
      {
        vDSP_Stride v13 = (vDSP_Stride)v44;
        char v47 = sub_1D17BE7B0();

        if (v47)
        {

          goto LABEL_62;
        }
LABEL_61:
        id v41 = v45;
        vDSP_Stride v13 = (vDSP_Stride)&v84;
        sub_1D1671FA0(v81, v41);
        uint64_t v42 = *(void **)v81;

LABEL_62:
        int64_t v12 = a3;
        uint64_t v40 = a2;
        uint64_t v38 = v73;
        uint64_t v36 = v75;
        uint64_t v39 = a1;
        goto LABEL_63;
      }
      if (!*(void *)(v84 + 16)) {
        goto LABEL_61;
      }
      uint64_t v48 = sub_1D17BE5B0();
      uint64_t v49 = -1 << *(unsigned char *)(v46 + 32);
      unint64_t v50 = v48 & ~v49;
      uint64_t v68 = v46 + 56;
      if (((*(void *)(v46 + 56 + ((v50 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v50) & 1) == 0) {
        goto LABEL_61;
      }
      vDSP_Stride v13 = sub_1D1668090();
      id v51 = *(id *)(*(void *)(v46 + 48) + 8 * v50);
      char v52 = sub_1D17BE5C0();

      if ((v52 & 1) == 0)
      {
        uint64_t v66 = ~v49;
        unint64_t v53 = (v50 + 1) & ~v49;
        uint64_t v8 = v67;
        if (((*(void *)(v68 + ((v53 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v53) & 1) == 0) {
          goto LABEL_61;
        }
        id v54 = *(id *)(*(void *)(v46 + 48) + 8 * v53);
        char v55 = sub_1D17BE5C0();

        if ((v55 & 1) == 0)
        {
          for (unint64_t i = v53 + 1; ; unint64_t i = v57 + 1)
          {
            uint64_t v8 = v67;
            unint64_t v57 = i & v66;
            if (((*(void *)(v68 + (((i & v66) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v66)) & 1) == 0) {
              break;
            }
            id v58 = *(id *)(*(void *)(v46 + 48) + 8 * v57);
            char v59 = sub_1D17BE5C0();

            if (v59) {
              goto LABEL_79;
            }
          }
          goto LABEL_61;
        }
      }
LABEL_79:

      uint64_t v8 = v67;
      goto LABEL_62;
    }
LABEL_85:
    uint64_t v37 = v65 + 1;
    char v76 = 0;
    a4((uint64_t *)&v76, (double)(v65 + 1) / a6 * 0.2 + 0.8);
    if (v76 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_90:
      sub_1D1672594();
      swift_allocError();
      *id v60 = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      return v62;
    }
    sub_1D167239C((uint64_t *)v81, v84, v85);
    vDSP_Stride v13 = v82;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36 += v11;
  }
  while (v37 != v12);
  uint64_t v62 = v77;
LABEL_88:
  swift_bridgeObjectRelease();
  return v62;
}

uint64_t sub_1D1671E50(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v3 = a1;
    char v4 = sub_1D17BE7B0();

    return v4 & 1;
  }
  if (!*(void *)(a2 + 16)
    || (uint64_t v6 = sub_1D17BE5B0(),
        uint64_t v7 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v8 = v6 & ~v7,
        uint64_t v9 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    char v12 = 0;
    return v12 & 1;
  }
  sub_1D1668090();
  id v10 = *(id *)(*(void *)(a2 + 48) + 8 * v8);
  char v11 = sub_1D17BE5C0();

  if ((v11 & 1) == 0)
  {
    uint64_t v13 = ~v7;
    unint64_t v14 = (v8 + 1) & v13;
    if ((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      do
      {
        id v15 = *(id *)(*(void *)(a2 + 48) + 8 * v14);
        char v12 = sub_1D17BE5C0();

        if (v12) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v13;
      }
      while (((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  char v12 = 1;
  return v12 & 1;
}

uint64_t sub_1D1671FA0(void *a1, void *a2)
{
  id v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = sub_1D17BE770();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_1D1668090();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v26;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = sub_1D17BE760();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v21 = sub_1D1672BAC(v7, result + 1);
    uint64_t v27 = v21;
    if (*(void *)(v21 + 24) <= *(void *)(v21 + 16))
    {
      id v25 = v8;
      sub_1D16FCB9C();
      uint64_t v22 = v27;
    }
    else
    {
      uint64_t v22 = v21;
      id v23 = v8;
    }
    sub_1D1672FD0((uint64_t)v8, v22);
    *id v3 = v22;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1D17BE5B0();
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      sub_1D1668090();
      id v14 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
      char v15 = sub_1D17BE5C0();

      if (v15)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        int64_t v19 = *(void **)(*(void *)(*v2 + 48) + 8 * v13);
        *a1 = v19;
        id v20 = v19;
        return 0;
      }
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
        char v18 = sub_1D17BE5C0();

        if (v18) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    id v8 = a2;
    sub_1D1680398((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v28;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_1D1672220(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = *v2;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1D17BE7E0();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    while (1)
    {
      sub_1D165C164(*(void *)(v6 + 48) + 40 * v9, (uint64_t)v16);
      char v11 = MEMORY[0x1D25F91A0](v16, a2);
      sub_1D165C1C0((uint64_t)v16);
      if (v11) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    sub_1D165C1C0(a2);
    sub_1D165C164(*(void *)(*v3 + 48) + 40 * v9, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1D165C164(a2, (uint64_t)v16);
    uint64_t v15 = *v3;
    *id v3 = 0x8000000000000000;
    sub_1D1680520((uint64_t)v16, v9, isUniquelyReferenced_nonNull_native);
    *id v3 = v15;
    swift_bridgeObjectRelease();
    long long v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return 1;
  }
}

uint64_t sub_1D167239C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  sub_1D17BED20();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D1675190((uint64_t)v23, a2);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_1D17BED80();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = swift_bridgeObjectRetain();
    sub_1D1673874(v10, a2);
    char v12 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v12)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v17 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v9);
      uint64_t v18 = v17[1];
      *a1 = *v17;
      a1[1] = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v13 = ~v8;
    while (1)
    {
      unint64_t v9 = (v9 + 1) & v13;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        break;
      }
      swift_bridgeObjectRetain();
      uint64_t v14 = swift_bridgeObjectRetain();
      sub_1D1673874(v14, a2);
      char v16 = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_6;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v23[0] = *v3;
  *id v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  uint64_t v21 = swift_bridgeObjectRetain();
  sub_1D168068C(v21, a3, v9, isUniquelyReferenced_nonNull_native);
  *id v3 = v23[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

unint64_t sub_1D1672594()
{
  unint64_t result = qword_1EA652D60;
  if (!qword_1EA652D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA652D60);
  }
  return result;
}

uint64_t sub_1D16725E8(uint64_t *a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_1D17BED10();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *id v3 = 0x8000000000000000;
    sub_1D1680860(a2, v9, isUniquelyReferenced_nonNull_native);
    *id v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1D16726E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_1D17BED20();
  swift_bridgeObjectRetain();
  sub_1D17BE020();
  uint64_t v8 = sub_1D17BED80();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    char v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1D17BEBC0() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1D17BEBC0() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *id v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1D1680984(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *id v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1D1672894(uint64_t *a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = sub_1D17BE770();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v21[9] = v8;
      type metadata accessor for MASlice();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21[0];
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = sub_1D17BE760();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v17 = sub_1D1672D94(v7, result + 1);
    v21[0] = v17;
    if (*(void *)(v17 + 24) <= *(void *)(v17 + 16))
    {
      swift_retain();
      sub_1D16FD8D0();
      uint64_t v18 = v21[0];
    }
    else
    {
      uint64_t v18 = v17;
      swift_retain();
    }
    sub_1D1673054(a2, v18);
    *id v3 = v18;
  }
  else
  {
    sub_1D17BED20();
    unint64_t v10 = *(void (**)(void *))(*(void *)a2 + 272);
    swift_bridgeObjectRetain();
    v10(v21);
    uint64_t v11 = sub_1D17BED80();
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      uint64_t v14 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v6 + 48) + 8 * v13) + 280);
      swift_retain();
      LOBYTE(v14) = v14(a2);
      swift_release();
      if (v14)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      uint64_t v15 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v15;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        char v16 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v6 + 48) + 8 * v13) + 280);
        swift_retain();
        LOBYTE(v16) = v16(a2);
        swift_release();
        if (v16) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21[0] = *v2;
    *uint64_t v2 = 0x8000000000000000;
    uint64_t v20 = swift_retain();
    sub_1D1680B20(v20, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v21[0];
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_1D1672BAC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651A70);
    uint64_t v2 = sub_1D17BE830();
    uint64_t v14 = v2;
    sub_1D17BE710();
    if (sub_1D17BE7A0())
    {
      sub_1D1668090();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_1D16FCB9C();
          uint64_t v2 = v14;
        }
        uint64_t result = sub_1D17BE5B0();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (sub_1D17BE7A0());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v2;
}

uint64_t sub_1D1672D94(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651A68);
    uint64_t v2 = sub_1D17BE830();
    uint64_t v17 = v2;
    sub_1D17BE710();
    uint64_t v3 = sub_1D17BE7A0();
    if (v3)
    {
      uint64_t v4 = v3;
      type metadata accessor for MASlice();
      do
      {
        v16[0] = v4;
        swift_dynamicCast();
        uint64_t v2 = v17;
        if (*(void *)(v17 + 24) <= *(void *)(v17 + 16))
        {
          sub_1D16FD8D0();
          uint64_t v2 = v17;
        }
        uint64_t v5 = v16[9];
        sub_1D17BED20();
        (*(void (**)(void *))(*(void *)v5 + 272))(v16);
        uint64_t result = sub_1D17BED80();
        uint64_t v7 = v2 + 56;
        uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v9 = result & ~v8;
        unint64_t v10 = v9 >> 6;
        if (((-1 << v9) & ~*(void *)(v2 + 56 + 8 * (v9 >> 6))) != 0)
        {
          unint64_t v11 = __clz(__rbit64((-1 << v9) & ~*(void *)(v2 + 56 + 8 * (v9 >> 6)))) | v9 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v12 = 0;
          unint64_t v13 = (unint64_t)(63 - v8) >> 6;
          do
          {
            if (++v10 == v13 && (v12 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v14 = v10 == v13;
            if (v10 == v13) {
              unint64_t v10 = 0;
            }
            v12 |= v14;
            uint64_t v15 = *(void *)(v7 + 8 * v10);
          }
          while (v15 == -1);
          unint64_t v11 = __clz(__rbit64(~v15)) + (v10 << 6);
        }
        *(void *)(v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
        *(void *)(*(void *)(v2 + 48) + 8 * v11) = v5;
        ++*(void *)(v2 + 16);
        uint64_t v4 = sub_1D17BE7A0();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v2;
}

unint64_t sub_1D1672FD0(uint64_t a1, uint64_t a2)
{
  sub_1D17BE5B0();
  unint64_t result = sub_1D17BE6F0();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_1D1673054(uint64_t a1, uint64_t a2)
{
  sub_1D17BED20();
  (*(void (**)(unsigned char *))(*(void *)a1 + 272))(v5);
  sub_1D17BED80();
  unint64_t result = sub_1D17BE6F0();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

BOOL static ElementIdentifier.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t ElementIdentifier.hash(into:)()
{
  return sub_1D17BED30();
}

uint64_t ElementIdentifier.hashValue.getter()
{
  return sub_1D17BED80();
}

BOOL sub_1D16731A8(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D16731BC()
{
  return sub_1D17BED80();
}

uint64_t sub_1D1673204()
{
  return sub_1D17BED30();
}

uint64_t sub_1D1673230()
{
  return sub_1D17BED80();
}

unint64_t sub_1D1673278()
{
  unint64_t result = qword_1EBD27520;
  if (!qword_1EBD27520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBD27520);
  }
  return result;
}

ValueMetadata *type metadata accessor for ElementIdentifier()
{
  return &type metadata for ElementIdentifier;
}

void MACluster.init()(void *a1@<X8>)
{
  *a1 = MEMORY[0x1E4FBC870];
  a1[1] = 0;
}

Swift::Void __swiftcall MACluster.add(node:)(MANode node)
{
  Class isa = node.super.isa;
  if ((sub_1D1671E50(node.super.isa, *v1) & 1) == 0)
  {
    sub_1D1671FA0(&v3, isa);
  }
}

uint64_t MACluster.nodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MACluster.descriptionNodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MACluster.descriptionNodes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*MACluster.descriptionNodes.modify())()
{
  return nullsub_1;
}

uint64_t MACluster.init(nodes:descriptionNodes:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void MACluster.subset(slices:)(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v32 = MEMORY[0x1E4FBC870];
  if ((v4 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1D17BE710();
    sub_1D1668090();
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v4 = v33;
    uint64_t v30 = v34;
    uint64_t v5 = v35;
    uint64_t v6 = v36;
    unint64_t v7 = v37;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v30 = v4 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(v4 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
  }
  int64_t v29 = (unint64_t)(v5 + 64) >> 6;
  uint64_t v26 = v5;
  unint64_t v11 = a1 & 0xC000000000000001;
  uint64_t v28 = v4;
  if ((v4 & 0x8000000000000000) == 0) {
    goto LABEL_12;
  }
LABEL_30:
  if (!sub_1D17BE7A0()) {
    goto LABEL_54;
  }
  sub_1D1668090();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v19 = v31;
  swift_unknownObjectRelease();
  uint64_t v15 = v6;
  uint64_t v13 = v7;
  if (!v19) {
    goto LABEL_54;
  }
  while (1)
  {
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_1D17BEAD0();
      if (!v20)
      {
LABEL_51:

        swift_bridgeObjectRelease();
LABEL_11:
        uint64_t v6 = v15;
        unint64_t v7 = v13;
        if (v4 < 0) {
          goto LABEL_30;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v20) {
        goto LABEL_51;
      }
    }
    if (v11)
    {
      uint64_t v21 = MEMORY[0x1D25F9260](0, a1);
    }
    else
    {
      if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_57;
      }
      uint64_t v21 = *(void *)(a1 + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(id))(*(void *)v21 + 248))(v19))
    {
LABEL_10:
      swift_bridgeObjectRelease();
      id v12 = v19;
      sub_1D1671FA0(&v31, v12);

      swift_release();
      goto LABEL_11;
    }
    swift_release();
    if (v20 != 1) {
      break;
    }
LABEL_48:

    swift_bridgeObjectRelease();
    uint64_t v6 = v15;
    unint64_t v7 = v13;
    uint64_t v4 = v28;
    if (v28 < 0) {
      goto LABEL_30;
    }
LABEL_12:
    if (v7)
    {
      uint64_t v13 = (v7 - 1) & v7;
      unint64_t v14 = __clz(__rbit64(v7)) | (v6 << 6);
      uint64_t v15 = v6;
    }
    else
    {
      int64_t v16 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_58;
      }
      if (v16 >= v29) {
        goto LABEL_53;
      }
      unint64_t v17 = *(void *)(v30 + 8 * v16);
      uint64_t v15 = v6 + 1;
      if (!v17)
      {
        uint64_t v15 = v6 + 2;
        if (v6 + 2 >= v29) {
          goto LABEL_53;
        }
        unint64_t v17 = *(void *)(v30 + 8 * v15);
        if (!v17)
        {
          uint64_t v15 = v6 + 3;
          if (v6 + 3 >= v29) {
            goto LABEL_53;
          }
          unint64_t v17 = *(void *)(v30 + 8 * v15);
          if (!v17)
          {
            uint64_t v15 = v6 + 4;
            if (v6 + 4 >= v29) {
              goto LABEL_53;
            }
            unint64_t v17 = *(void *)(v30 + 8 * v15);
            if (!v17)
            {
              uint64_t v18 = v6 + 5;
              while (v29 != v18)
              {
                unint64_t v17 = *(void *)(v30 + 8 * v18++);
                if (v17)
                {
                  uint64_t v15 = v18 - 1;
                  goto LABEL_27;
                }
              }
LABEL_53:
              unint64_t v7 = 0;
LABEL_54:
              sub_1D16681F0(v4, v30, v26, v6, v7);
              *a2 = v32;
              a2[1] = 0;
              return;
            }
          }
        }
      }
LABEL_27:
      uint64_t v13 = (v17 - 1) & v17;
      unint64_t v14 = __clz(__rbit64(v17)) + (v15 << 6);
    }
    id v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    if (!v19) {
      goto LABEL_54;
    }
  }
  uint64_t v22 = 5;
  while (1)
  {
    unint64_t v23 = v22 - 4;
    if (!v11) {
      break;
    }
    uint64_t v24 = MEMORY[0x1D25F9260](v22 - 4, a1);
    uint64_t v25 = v22 - 3;
    if (__OFADD__(v23, 1)) {
      goto LABEL_55;
    }
LABEL_46:
    if ((*(uint64_t (**)(id))(*(void *)v24 + 248))(v19))
    {
      uint64_t v4 = v28;
      goto LABEL_10;
    }
    swift_release();
    ++v22;
    if (v25 == v20) {
      goto LABEL_48;
    }
  }
  if (v23 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_56;
  }
  uint64_t v24 = *(void *)(a1 + 8 * v22);
  swift_retain();
  uint64_t v25 = v22 - 3;
  if (!__OFADD__(v23, 1)) {
    goto LABEL_46;
  }
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
}

uint64_t MACluster.count.getter()
{
  if ((*(void *)v0 & 0xC000000000000001) != 0) {
    return sub_1D17BE760();
  }
  else {
    return *(void *)(*(void *)v0 + 16);
  }
}

uint64_t MACluster.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1D1675190(a1, v3);
  return swift_bridgeObjectRelease();
}

void static MACluster.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
}

void sub_1D1673874(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = a2 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0) {
      uint64_t v5 = a1;
    }
    else {
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    if (v4)
    {
      if (a2 < 0) {
        unint64_t v6 = a2;
      }
      else {
        unint64_t v6 = a2 & 0xFFFFFFFFFFFFFF8;
      }
      goto LABEL_55;
    }
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    goto LABEL_18;
  }
  if (v4)
  {
    if (a2 < 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v8 = a1;
LABEL_18:
    sub_1D167503C(v7, v8);
    return;
  }
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  uint64_t v28 = a1 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(a1 + 56);
  unint64_t v6 = sub_1D1668090();
  int64_t v12 = 0;
  int64_t v29 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = a2 + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_44;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    if (v16 >= v29) {
      return;
    }
    unint64_t v17 = *(void *)(v28 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v29) {
        return;
      }
      unint64_t v17 = *(void *)(v28 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v29) {
          return;
        }
        unint64_t v17 = *(void *)(v28 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_43:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_44:
    id v19 = *(id *)(*(void *)(a1 + 48) + 8 * v15);
    uint64_t v20 = sub_1D17BE5B0();
    uint64_t v21 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v22 = v20 & ~v21;
    if (((*(void *)(v13 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
      goto LABEL_51;
    }
    int64_t v30 = v12;
    id v23 = *(id *)(*(void *)(a2 + 48) + 8 * v22);
    char v24 = sub_1D17BE5C0();

    if ((v24 & 1) == 0)
    {
      uint64_t v25 = ~v21;
      while (1)
      {
        unint64_t v22 = (v22 + 1) & v25;
        if (((*(void *)(v13 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
          break;
        }
        id v26 = *(id *)(*(void *)(a2 + 48) + 8 * v22);
        char v27 = sub_1D17BE5C0();

        if (v27) {
          goto LABEL_27;
        }
      }
LABEL_51:

      return;
    }
LABEL_27:

    int64_t v12 = v30;
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29) {
    return;
  }
  unint64_t v17 = *(void *)(v28 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_43;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v29) {
      return;
    }
    unint64_t v17 = *(void *)(v28 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_43;
    }
  }
LABEL_54:
  __break(1u);
LABEL_55:
  MEMORY[0x1F4184BB8](v6, v5);
}

uint64_t MACluster.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1D17BE710();
    sub_1D1668090();
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t result = v12;
    uint64_t v5 = v13;
    long long v6 = v14;
    uint64_t v7 = v15;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(v3 + 32);
    uint64_t v5 = v3 + 56;
    uint64_t v9 = ~v8;
    uint64_t v10 = -v8;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    uint64_t v7 = v11 & *(void *)(v3 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    long long v6 = (unint64_t)v9;
  }
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v7;
  return result;
}

BOOL MACluster.singleton.getter()
{
  if ((*(void *)v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v1 = sub_1D17BE760();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v1 = *(void *)(*(void *)v0 + 16);
  }
  return v1 == 1;
}

Swift::Bool __swiftcall MACluster.covers(slices:)(Swift::OpaquePointer slices)
{
  uint64_t v3 = *v1;
  uint64_t v39 = MEMORY[0x1E4FBC860];
  if ((unint64_t)slices._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1D17BEAD0();
    uint64_t v4 = v5;
    if (!v5) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(((unint64_t)slices._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    LOBYTE(v5) = swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v4 < 1)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (((unint64_t)slices._rawValue & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      MEMORY[0x1D25F9260](i, slices._rawValue);
      type metadata accessor for MASlices();
      if (swift_dynamicCastClass())
      {
        sub_1D17BE8F0();
        sub_1D17BE930();
        sub_1D17BE940();
        sub_1D17BE900();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    type metadata accessor for MASlices();
    for (uint64_t j = 0; j != v4; ++j)
    {
      if (swift_dynamicCastClass())
      {
        swift_retain();
        sub_1D17BE8F0();
        sub_1D17BE930();
        sub_1D17BE940();
        sub_1D17BE900();
      }
    }
  }
LABEL_15:
  swift_bridgeObjectRelease();
  if (v39 < 0 || (v39 & 0x4000000000000000) != 0)
  {
LABEL_62:
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1D17BEAD0();
    swift_release();
  }
  else
  {
    uint64_t v8 = *(void *)(v39 + 16);
  }
  LOBYTE(v5) = swift_release();
  if (v8)
  {
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (v4)
  {
    unint64_t v9 = v3 & 0xC000000000000001;
    unint64_t v10 = (unint64_t)slices._rawValue & 0xC000000000000001;
    uint64_t v33 = v3 + 56;
    LOBYTE(v5) = swift_bridgeObjectRetain();
    unint64_t v11 = 0;
    unint64_t v31 = v3 & 0xC000000000000001;
    uint64_t v32 = v3;
    while (2)
    {
      if (v10)
      {
        uint64_t v5 = MEMORY[0x1D25F9260](v11, slices._rawValue);
        uint64_t v12 = v5;
        BOOL v13 = __OFADD__(v11, 1);
        unint64_t v14 = v11 + 1;
        if (!v13)
        {
LABEL_27:
          unint64_t v34 = v14;
          if (v9)
          {
            swift_bridgeObjectRetain();
            sub_1D17BE710();
            sub_1D1668090();
            sub_1D1674A20();
            sub_1D17BE390();
            uint64_t v3 = v39;
            uint64_t v37 = v40;
            uint64_t v15 = v41;
            uint64_t v16 = v42;
            unint64_t v17 = v43;
          }
          else
          {
            uint64_t v18 = -1 << *(unsigned char *)(v3 + 32);
            uint64_t v15 = ~v18;
            uint64_t v19 = -v18;
            if (v19 < 64) {
              uint64_t v20 = ~(-1 << v19);
            }
            else {
              uint64_t v20 = -1;
            }
            unint64_t v17 = v20 & *(void *)(v3 + 56);
            swift_bridgeObjectRetain();
            uint64_t v16 = 0;
            uint64_t v37 = v33;
          }
          uint64_t v35 = v15;
          int64_t v36 = (unint64_t)(v15 + 64) >> 6;
          do
          {
            unint64_t v21 = v17;
            uint64_t v22 = v16;
            if (v3 < 0)
            {
              if (!sub_1D17BE7A0()) {
                goto LABEL_60;
              }
              sub_1D1668090();
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v25 = v38;
              swift_unknownObjectRelease();
              if (!v38) {
                goto LABEL_60;
              }
            }
            else
            {
              if (v17)
              {
                unint64_t v23 = __clz(__rbit64(v17));
                v17 &= v17 - 1;
                unint64_t v24 = v23 | (v16 << 6);
              }
              else
              {
                int64_t v26 = v16 + 1;
                if (__OFADD__(v16, 1))
                {
                  __break(1u);
                  goto LABEL_62;
                }
                if (v26 >= v36) {
                  goto LABEL_59;
                }
                unint64_t v27 = *(void *)(v37 + 8 * v26);
                ++v16;
                if (!v27)
                {
                  uint64_t v16 = v22 + 2;
                  if (v22 + 2 >= v36) {
                    goto LABEL_59;
                  }
                  unint64_t v27 = *(void *)(v37 + 8 * v16);
                  if (!v27)
                  {
                    uint64_t v16 = v22 + 3;
                    if (v22 + 3 >= v36) {
                      goto LABEL_59;
                    }
                    unint64_t v27 = *(void *)(v37 + 8 * v16);
                    if (!v27)
                    {
                      uint64_t v16 = v22 + 4;
                      if (v22 + 4 >= v36) {
                        goto LABEL_59;
                      }
                      unint64_t v27 = *(void *)(v37 + 8 * v16);
                      if (!v27)
                      {
                        uint64_t v28 = v22 + 5;
                        while (v36 != v28)
                        {
                          unint64_t v27 = *(void *)(v37 + 8 * v28++);
                          if (v27)
                          {
                            uint64_t v16 = v28 - 1;
                            goto LABEL_53;
                          }
                        }
LABEL_59:
                        unint64_t v21 = 0;
LABEL_60:
                        sub_1D16681F0(v3, v37, v35, v22, v21);
                        swift_bridgeObjectRelease();
                        swift_release();
                        LOBYTE(v5) = 0;
                        return v5;
                      }
                    }
                  }
                }
LABEL_53:
                unint64_t v17 = (v27 - 1) & v27;
                unint64_t v24 = __clz(__rbit64(v27)) + (v16 << 6);
              }
              id v25 = *(id *)(*(void *)(v3 + 48) + 8 * v24);
              if (!v25) {
                goto LABEL_60;
              }
            }
            char v29 = (*(uint64_t (**)(id))(*(void *)v12 + 248))(v25);
          }
          while ((v29 & 1) == 0);
          sub_1D16681F0(v3, v37, v35, v22, v21);
          LOBYTE(v5) = swift_release();
          unint64_t v11 = v34;
          unint64_t v9 = v31;
          uint64_t v3 = v32;
          unint64_t v10 = (unint64_t)slices._rawValue & 0xC000000000000001;
          if (v34 != v4) {
            continue;
          }
          swift_bridgeObjectRelease();
          break;
        }
      }
      else
      {
        if (v11 >= *(void *)(((unint64_t)slices._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_66:
          __break(1u);
          return v5;
        }
        uint64_t v12 = *((void *)slices._rawValue + v11 + 4);
        LOBYTE(v5) = swift_retain();
        BOOL v13 = __OFADD__(v11, 1);
        unint64_t v14 = v11 + 1;
        if (!v13) {
          goto LABEL_27;
        }
      }
      goto LABEL_64;
    }
  }
  LOBYTE(v5) = 1;
  return v5;
}

uint64_t MACluster.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_1D17BED20();
  swift_bridgeObjectRetain();
  sub_1D1675190((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1D17BED80();
}

uint64_t sub_1D167424C()
{
  uint64_t v1 = *v0;
  sub_1D17BED20();
  swift_bridgeObjectRetain();
  sub_1D1675190((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1D17BED80();
}

uint64_t sub_1D16742A4(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1D1675190(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D16742F0()
{
  uint64_t v1 = *v0;
  sub_1D17BED20();
  swift_bridgeObjectRetain();
  sub_1D1675190((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1D17BED80();
}

void sub_1D1674344(uint64_t *a1, uint64_t *a2)
{
}

double sub_1D1674350@<D0>(uint64_t a1@<X8>)
{
  MACluster.makeIterator()((uint64_t)v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_1D16743A4()
{
  return 0;
}

id sub_1D16743AC()
{
  id v1 = sub_1D1694354(*v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

id sub_1D16743F8(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1D16F70D0(a1, a2, a3);
}

void MACluster.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  sub_1D17BE850();
  swift_bridgeObjectRelease();
  unint64_t v25 = 0xD000000000000013;
  unint64_t v26 = 0x80000001D17D4E90;
  if ((v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D17BE760();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  unint64_t v23 = v25;
  unint64_t v24 = v26;
  *(void *)&v22[0] = v1;
  *((void *)&v22[0] + 1) = v2;
  MACluster.makeIterator()((uint64_t)&v25);
  unint64_t v3 = v25;
  uint64_t v4 = v28;
  unint64_t v5 = v29;
  uint64_t v18 = v27;
  int64_t v19 = (unint64_t)(v27 + 64) >> 6;
  unint64_t v20 = v26;
  while ((v3 & 0x8000000000000000) != 0)
  {
    uint64_t v10 = sub_1D17BE7A0();
    if (!v10) {
      goto LABEL_30;
    }
    *(void *)&long long v21 = v10;
    sub_1D1668090();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v11 = *(id *)&v22[0];
    swift_unknownObjectRelease();
    uint64_t v9 = v4;
    uint64_t v7 = v5;
    if (!v11) {
      goto LABEL_30;
    }
LABEL_27:
    uint64_t v15 = (void *)sub_1D17BDFE0();
    id v16 = objc_msgSend(v11, sel_propertyForKey_, v15);

    if (v16)
    {
      sub_1D17BE690();
      swift_unknownObjectRelease();
      sub_1D16607C4(&v21, v22);
      *(void *)&long long v21 = 0;
      *((void *)&v21 + 1) = 0xE000000000000000;
      sub_1D17BE030();
      sub_1D17BE9E0();
      sub_1D17BE030();
      id v17 = objc_msgSend(v11, sel_visualString);
      sub_1D17BDFF0();

      sub_1D17BE030();
      swift_bridgeObjectRelease();
      sub_1D17BE030();

      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
    }
    else
    {
      *(void *)&v22[0] = 2314;
      *((void *)&v22[0] + 1) = 0xE200000000000000;
      id v6 = objc_msgSend(v11, sel_visualString);
      sub_1D17BDFF0();

      sub_1D17BE030();
      swift_bridgeObjectRelease();
      sub_1D17BE030();
      swift_bridgeObjectRelease();
    }
    uint64_t v4 = v9;
    unint64_t v5 = v7;
  }
  if (v5)
  {
    uint64_t v7 = (v5 - 1) & v5;
    unint64_t v8 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v9 = v4;
LABEL_26:
    id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v8);
    if (!v11) {
      goto LABEL_30;
    }
    goto LABEL_27;
  }
  int64_t v12 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v12 >= v19) {
      goto LABEL_29;
    }
    unint64_t v13 = *(void *)(v20 + 8 * v12);
    uint64_t v9 = v4 + 1;
    if (!v13)
    {
      uint64_t v9 = v4 + 2;
      if (v4 + 2 >= v19) {
        goto LABEL_29;
      }
      unint64_t v13 = *(void *)(v20 + 8 * v9);
      if (!v13)
      {
        uint64_t v9 = v4 + 3;
        if (v4 + 3 >= v19) {
          goto LABEL_29;
        }
        unint64_t v13 = *(void *)(v20 + 8 * v9);
        if (!v13)
        {
          uint64_t v9 = v4 + 4;
          if (v4 + 4 >= v19) {
            goto LABEL_29;
          }
          unint64_t v13 = *(void *)(v20 + 8 * v9);
          if (!v13)
          {
            uint64_t v14 = v4 + 5;
            while (v19 != v14)
            {
              unint64_t v13 = *(void *)(v20 + 8 * v14++);
              if (v13)
              {
                uint64_t v9 = v14 - 1;
                goto LABEL_25;
              }
            }
LABEL_29:
            unint64_t v5 = 0;
LABEL_30:
            sub_1D16681F0(v3, v20, v18, v4, v5);
            return;
          }
        }
      }
    }
LABEL_25:
    uint64_t v7 = (v13 - 1) & v13;
    unint64_t v8 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_26;
  }
  __break(1u);
}

uint64_t _s17KnowledgeGraphKit9MAClusterV6remove4nodeSo6MANodeCSgAG_tF_0(void *a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v4 = a1;
    char v5 = sub_1D17BE7B0();

    if (v5)
    {
      uint64_t v6 = sub_1D1674B84();
      swift_bridgeObjectRelease();
      return v6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1D17BE5B0();
  uint64_t v8 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    goto LABEL_12;
  }
  sub_1D1668090();
  id v10 = *(id *)(*(void *)(v3 + 48) + 8 * v9);
  char v11 = sub_1D17BE5C0();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v12;
      if (((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_12;
      }
      id v13 = *(id *)(*(void *)(v3 + 48) + 8 * v9);
      char v14 = sub_1D17BE5C0();
    }
    while ((v14 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *v1;
  uint64_t v18 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1D16FDBC0();
    uint64_t v16 = v18;
  }
  uint64_t v6 = *(void *)(*(void *)(v16 + 48) + 8 * v9);
  sub_1D1674D10(v9);
  *uint64_t v1 = v18;
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_1D1674A20()
{
  unint64_t result = qword_1EA651A78;
  if (!qword_1EA651A78)
  {
    sub_1D1668090();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651A78);
  }
  return result;
}

uint64_t sub_1D1674A78(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = sub_1D17BED10();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v8 + 8 * v7) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1D16FE0F8();
    uint64_t v11 = v14;
  }
  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  sub_1D1674EB4(v7);
  *uint64_t v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1D1674B84()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_1D17BE760();
  uint64_t v3 = swift_unknownObjectRetain();
  uint64_t v4 = sub_1D1672BAC(v3, v2);
  uint64_t v15 = v4;
  swift_retain();
  uint64_t v5 = sub_1D17BE5B0();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if ((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    sub_1D1668090();
    id v8 = *(id *)(*(void *)(v4 + 48) + 8 * v7);
    char v9 = sub_1D17BE5C0();

    if (v9)
    {
LABEL_6:
      swift_release();
      uint64_t v13 = *(void *)(*(void *)(v4 + 48) + 8 * v7);
      sub_1D1674D10(v7);
      if (sub_1D17BE5C0())
      {
        *uint64_t v1 = v15;
        return v13;
      }
      __break(1u);
    }
    else
    {
      uint64_t v10 = ~v6;
      while (1)
      {
        unint64_t v7 = (v7 + 1) & v10;
        if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          break;
        }
        id v11 = *(id *)(*(void *)(v4 + 48) + 8 * v7);
        char v12 = sub_1D17BE5C0();

        if (v12) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_1D1674D10(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_1D17BE6E0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        uint64_t v11 = sub_1D17BE5B0();

        unint64_t v12 = v11 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= (uint64_t)v12)
          {
LABEL_16:
            uint64_t v15 = *(void *)(v3 + 48);
            uint64_t v16 = (void *)(v15 + 8 * v2);
            id v17 = (void *)(v15 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1D1674EB4(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_1D17BE6E0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = sub_1D17BED10() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              void *v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_1D167503C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 != sub_1D17BE760()) {
    return;
  }
  int64_t v4 = 0;
  uint64_t v5 = a2 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a2 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v4 << 6);
LABEL_6:
    id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v11);
    char v13 = sub_1D17BE7B0();

    if ((v13 & 1) == 0) {
      return;
    }
  }
  int64_t v14 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v14 >= v9) {
    return;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v14);
  ++v4;
  if (v15) {
    goto LABEL_19;
  }
  int64_t v4 = v14 + 1;
  if (v14 + 1 >= v9) {
    return;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v4);
  if (v15)
  {
LABEL_19:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_6;
  }
  int64_t v16 = v14 + 2;
  if (v16 >= v9) {
    return;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v9) {
      return;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_23:
  __break(1u);
}

void sub_1D1675190(uint64_t a1, uint64_t a2)
{
  sub_1D17BED80();
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1D17BE710();
    sub_1D1668090();
    sub_1D1674A20();
    sub_1D17BE390();
    a2 = v22;
    uint64_t v3 = v23;
    uint64_t v4 = v24;
    int64_t v5 = v25;
    unint64_t v6 = v26;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v3 = a2 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    int64_t v5 = 0;
  }
  uint64_t v10 = 0;
  uint64_t v20 = v4;
  int64_t v11 = (unint64_t)(v4 + 64) >> 6;
  while (a2 < 0)
  {
    if (!sub_1D17BE7A0()) {
      goto LABEL_27;
    }
    sub_1D1668090();
    swift_dynamicCast();
    unint64_t v15 = v21;
    if (!v21) {
      goto LABEL_27;
    }
    int64_t v14 = v5;
    uint64_t v12 = v6;
LABEL_10:
    uint64_t v17 = sub_1D17BE5B0();

    v10 ^= v17;
    int64_t v5 = v14;
    unint64_t v6 = v12;
  }
  if (v6)
  {
    uint64_t v12 = (v6 - 1) & v6;
    unint64_t v13 = __clz(__rbit64(v6)) | (v5 << 6);
    int64_t v14 = v5;
LABEL_9:
    unint64_t v15 = *(void **)(*(void *)(a2 + 48) + 8 * v13);
    long long v21 = v15;
    id v16 = v15;
    if (!v15) {
      goto LABEL_27;
    }
    goto LABEL_10;
  }
  int64_t v14 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v14 >= v11) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v3 + 8 * v14);
    if (!v18)
    {
      int64_t v14 = v5 + 2;
      if (v5 + 2 >= v11) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v3 + 8 * v14);
      if (!v18)
      {
        int64_t v19 = v5 + 3;
        while (v11 != v19)
        {
          unint64_t v18 = *(void *)(v3 + 8 * v19++);
          if (v18)
          {
            int64_t v14 = v19 - 1;
            goto LABEL_22;
          }
        }
LABEL_26:
        unint64_t v6 = 0;
LABEL_27:
        sub_1D16681F0(a2, v3, v20, v5, v6);
        sub_1D17BED30();
        return;
      }
    }
LABEL_22:
    uint64_t v12 = (v18 - 1) & v18;
    unint64_t v13 = __clz(__rbit64(v18)) + (v14 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

unint64_t sub_1D16753E8()
{
  unint64_t result = qword_1EA651A80;
  if (!qword_1EA651A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651A80);
  }
  return result;
}

unint64_t sub_1D1675440()
{
  unint64_t result = qword_1EA651A88;
  if (!qword_1EA651A88)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA651A90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651A88);
  }
  return result;
}

uint64_t destroy for MACluster()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *_s17KnowledgeGraphKit9MAClusterVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MACluster(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for MACluster(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MACluster(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MACluster(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MACluster()
{
  return &type metadata for MACluster;
}

uint64_t AccelerateBuffer<>.approximatelyEqual<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x1F4188790](AssociatedTypeWitness, v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v11);
  unint64_t v13 = (char *)&v17 - v12;
  _sSF17KnowledgeGraphKitE23absoluteDifferenceBoundxvgZ_0();
  _sSF17KnowledgeGraphKitE23absoluteDifferenceBoundxvgZ_0();
  char v14 = AccelerateBuffer<>.approximatelyEqual<A>(to:maxAbsoluteDifference:maxRelativeDifference:)();
  unint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v10, AssociatedTypeWitness);
  v15(v13, AssociatedTypeWitness);
  return v14 & 1;
}

uint64_t AccelerateBuffer<>.approximatelyEqual<A>(to:maxAbsoluteDifference:maxRelativeDifference:)()
{
  uint64_t v0 = sub_1D17BDB60();
  if (v0 != sub_1D17BDB60()) {
    return 0;
  }
  uint64_t v1 = sub_1D17BDB60();
  MEMORY[0x1F4188790](v1, v2);
  sub_1D17BDB50();
  return v4;
}

uint64_t sub_1D16758F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v21[2] = a3;
  v21[1] = a5;
  uint64_t v6 = *(void *)(a4 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v7, v10);
  unint64_t v13 = (char *)v21 - v12;
  MEMORY[0x1F4188790](v11, v14);
  id v16 = (char *)v21 - v15;
  sub_1D17BEC10();
  sub_1D17BEC10();
  sub_1D17BEA50();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v9, a4);
  v17(v13, a4);
  sub_1D17BDEE0();
  sub_1D17BEC30();
  v17(v9, a4);
  v17(v16, a4);
  uint64_t v18 = v6 + 32;
  int64_t v19 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v21[0] = v18;
  v19(v16, v13, a4);
  sub_1D17BDED0();
  sub_1D17BEC20();
  v17(v9, a4);
  v17(v16, a4);
  v19(v16, v13, a4);
  sub_1D17BDEC0();
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, a4);
}

uint64_t static FloatingPoint.approximatelyEqual(_:_:maxAbsoluteDifference:maxRelativeDifference:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v20[3] = a3;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1, a2);
  unint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v14);
  id v16 = (char *)v20 - v15;
  if (sub_1D17BDFA0())
  {
    char v17 = 1;
  }
  else
  {
    v20[1] = v5;
    v20[2] = a4;
    sub_1D17BEA60();
    sub_1D17BEC10();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
    v18(v13, a5);
    if (sub_1D17BDF30())
    {
      sub_1D16758F0(a1, a2, (uint64_t)v16, a5, (uint64_t)v13);
      char v17 = sub_1D17BDF50();
      v18(v13, a5);
    }
    else
    {
      char v17 = 1;
    }
    v18(v16, a5);
  }
  return v17 & 1;
}

uint64_t static FloatingPoint.approximatelyEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v10);
  uint64_t v12 = (char *)&v16 - v11;
  _sSF17KnowledgeGraphKitE23absoluteDifferenceBoundxvgZ_0();
  _sSF17KnowledgeGraphKitE23absoluteDifferenceBoundxvgZ_0();
  char v13 = static FloatingPoint.approximatelyEqual(_:_:maxAbsoluteDifference:maxRelativeDifference:)(a1, a2, (uint64_t)v12, (uint64_t)v9, a3);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v9, a3);
  v14(v12, a3);
  return v13 & 1;
}

uint64_t sub_1D1675EC4()
{
  return sub_1D17BDB50();
}

uint64_t sub_1D1675F44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, char *a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v38 = a5;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v35 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = MEMORY[0x1F4188790](AssociatedTypeWitness, v14);
  char v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v15, v18);
  uint64_t v22 = (char *)v31 - v21;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v31[0] = a6;
      v31[1] = v10;
      uint64_t v23 = 0;
      unint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
      uint64_t v24 = v20 + 16;
      int64_t v25 = v26;
      uint64_t v27 = (void (**)(char *, uint64_t))(v24 - 8);
      uint64_t v33 = a10;
      uint64_t v34 = v24;
      uint64_t v32 = *(void *)(v24 + 56);
      while (1)
      {
        v25(v22, v36 + v23, AssociatedTypeWitness);
        v25(v17, v35 + v23, AssociatedTypeWitness);
        char v28 = static FloatingPoint.approximatelyEqual(_:_:maxAbsoluteDifference:maxRelativeDifference:)((uint64_t)v22, (uint64_t)v17, v37, v38, AssociatedTypeWitness);
        unint64_t v29 = *v27;
        (*v27)(v17, AssociatedTypeWitness);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v22, AssociatedTypeWitness);
        if ((v28 & 1) == 0) {
          break;
        }
        v23 += v32;
        if (!--a2)
        {
          char v30 = 1;
          goto LABEL_9;
        }
      }
      char v30 = 0;
LABEL_9:
      a6 = (char *)v31[0];
    }
    else
    {
      char v30 = 1;
    }
    *a6 = v30;
  }
  return result;
}

uint64_t sub_1D1676140@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_1D1675F44(a1, v2[7], v2[8], v2[10], v2[11], a2, v2[3], v2[4], v2[5], v2[6]);
}

BOOL static MAFeatureDefinitionType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t MAFeatureDefinitionType.hash(into:)()
{
  return sub_1D17BED30();
}

uint64_t MAFeatureDefinitionType.hashValue.getter()
{
  return sub_1D17BED80();
}

BOOL sub_1D1676210(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t MAGraph.featureDefinition(source:targets:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for MAFeatureDefinition();
  swift_allocObject();
  id v5 = v2;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1D167B504(v5, a1, a2);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t type metadata accessor for MAFeatureDefinition()
{
  return self;
}

uint64_t MANode.featureExtraction(definition:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D170FCDC(v4, a4, 0);
}

uint64_t sub_1D16762FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D170FCDC(*v4, a4, 0);
}

uint64_t Dictionary<>.featureExtraction(definition:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1D167B8E8(a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1D1676364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1D167B8E8(a2, a3, a4, a5, a6, a7, *v7);
}

uint64_t Array<A>.featureExtraction(definition:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for MASlice();
  unint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1D167B3C0(v10);
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_1D16FF934(v11, 1.0);
  if (!v12) {
    return 0;
  }
  char v13 = (void *)v12;
  uint64_t v14 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1D1660A34(a6);
  sub_1D165B3A4(a6);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v14 + 40);
  if (*(void *)(v15 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v16 = sub_1D165AA20(a4);
    if (v17)
    {
      long long v24 = *(_OWORD *)(*(void *)(v15 + 56) + 16 * v16);
      swift_retain();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = v24;
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = sub_1D167B9E0;
      *(void *)(v19 + 24) = v18;
      swift_retain();
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v25 = v13[5];
      v13[5] = 0x8000000000000000;
      sub_1D165F034((uint64_t)sub_1D167BA28, v19, a4, isUniquelyReferenced_nonNull_native);
      uint64_t v21 = v13[5];
      v13[5] = v25;
      swift_release();
      swift_bridgeObjectRelease();
      sub_1D1701444(a4, 0, v13, 1.0);
      if (v6)
      {
        swift_release();
        swift_release();
      }
      else
      {
        uint64_t v22 = swift_bridgeObjectRetain();
        uint64_t v21 = sub_1D1676E90(v22);
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    swift_release();
    swift_release();
    return 0;
  }
  return v21;
}

void sub_1D167661C(uint64_t a1)
{
  sub_1D1668090();
  sub_1D1674A20();
  int64_t v2 = 0;
  v13[1] = (id)sub_1D17BE360();
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    sub_1D1671FA0(v13, *(id *)(*(void *)(a1 + 48) + 8 * v9));
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    int64_t v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v2 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v2);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_1D16767AC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA651FE0);
    uint64_t v2 = sub_1D17BEB10();
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  uint64_t v25 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_26;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v26) {
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v13);
    ++v8;
    if (!v14)
    {
      int64_t v8 = v13 + 1;
      if (v13 + 1 >= v26) {
        goto LABEL_35;
      }
      unint64_t v14 = *(void *)(v25 + 8 * v8);
      if (!v14)
      {
        int64_t v8 = v13 + 2;
        if (v13 + 2 >= v26) {
          goto LABEL_35;
        }
        unint64_t v14 = *(void *)(v25 + 8 * v8);
        if (!v14) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v8 << 6);
LABEL_26:
    unint64_t v16 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v17 = v16[1];
    *(void *)&v35[0] = *v16;
    *((void *)&v35[0] + 1) = v17;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v31 = v27;
    long long v32 = v28;
    uint64_t v33 = v29;
    sub_1D16607C4(&v30, v34);
    long long v27 = v31;
    long long v28 = v32;
    uint64_t v29 = v33;
    sub_1D16607C4(v34, v35);
    sub_1D16607C4(v35, &v31);
    uint64_t result = sub_1D17BE7E0();
    uint64_t v18 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v6 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v19) & ~*(void *)(v6 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v6 + 8 * v20);
      }
      while (v24 == -1);
      unint64_t v9 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v27;
    *(_OWORD *)(v10 + 16) = v28;
    *(void *)(v10 + 32) = v29;
    uint64_t result = (uint64_t)sub_1D16607C4(&v31, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v26)
  {
LABEL_35:
    swift_release();
    swift_release();
    return v2;
  }
  unint64_t v14 = *(void *)(v25 + 8 * v15);
  if (v14)
  {
    int64_t v8 = v15;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v8 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v8 >= v26) {
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v8);
    ++v15;
    if (v14) {
      goto LABEL_25;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1D1676B28(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651560);
    uint64_t v2 = (void *)sub_1D17BEB10();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v37;
  int64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = MEMORY[0x1E4FBC838] + 8;
  uint64_t v11 = MEMORY[0x1E4FBC840] + 8;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_1D1668088();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    uint64_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    sub_1D16607C4(v6, v7);
    sub_1D16607C4(v7, v40);
    sub_1D16607C4(v40, &v38);
    unint64_t result = sub_1D165A868(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      unint64_t v12 = v7;
      int64_t v13 = v6;
      uint64_t v14 = v1;
      uint64_t v15 = v11;
      uint64_t v16 = v10;
      uint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v17 = v35;
      v17[1] = v36;
      uint64_t v10 = v16;
      uint64_t v11 = v15;
      uint64_t v1 = v14;
      uint64_t v6 = v13;
      int64_t v7 = v12;
      int64_t i = v33;
      uint64_t v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
      unint64_t result = (unint64_t)sub_1D16607C4(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v27 = (uint64_t *)(v2[6] + 16 * result);
    *long long v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)sub_1D16607C4(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1D1676E90(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651AB8);
    uint64_t v2 = sub_1D17BEB10();
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(63 - v3) >> 6;
  uint64_t v7 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v9 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v12 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v6) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v6) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v6) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v6) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v28 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    int64_t v9 = v16;
LABEL_28:
    uint64_t v18 = *(void **)(*(void *)(a1 + 48) + 8 * v13);
    uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
    sub_1D1668090();
    id v20 = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    uint64_t result = sub_1D17BE7E0();
    uint64_t v21 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v7 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v22) & ~*(void *)(v7 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v7 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v11 = *(void *)(v2 + 48) + 40 * v10;
    *(_OWORD *)uint64_t v11 = v29;
    *(_OWORD *)(v11 + 16) = v30;
    *(void *)(v11 + 32) = v31;
    *(void *)(*(void *)(v2 + 56) + 8 * v10) = v19;
    ++*(void *)(v2 + 16);
  }
  int64_t v17 = v9 + 5;
  if (v9 + 5 >= v6)
  {
LABEL_37:
    swift_release();
    sub_1D1668088();
    return v2;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v16 >= v6) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1D16771C0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA651FE0);
    uint64_t v2 = sub_1D17BEB10();
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    int64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_1D1668120(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1D16607C4(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_1D16607C4(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_1D16607C4(v36, v37);
    sub_1D16607C4(v37, &v33);
    uint64_t result = sub_1D17BE7E0();
    uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_1D16607C4(&v33, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_1D1668088();
    return v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t Array<A>.featureExtraction(definition:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v62 = a7;
  uint64_t v66 = a6;
  uint64_t v65 = a4;
  uint64_t v64 = a3;
  uint64_t v72 = a2;
  uint64_t v63 = a1;
  uint64_t v73 = *(void *)(a9 - 8);
  uint64_t v12 = *(void *)(v73 + 64);
  uint64_t v13 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v15 = MEMORY[0x1F4188790](v13, v14);
  int64_t v17 = (char *)&v56 - v16;
  MEMORY[0x1F4188790](v15, v18);
  uint64_t v20 = (char *)&v56 - v19;
  int v22 = *v21;
  sub_1D1668090();
  if (sub_1D17BEB40())
  {
    uint64_t v25 = Array<A>.featureExtraction(definition:target:)(v63, v23, v64, v65, v24, v66);
    swift_bridgeObjectRelease();
    return v25;
  }
  int v60 = v22;
  unint64_t v70 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v71 = v20;
  uint64_t v74 = v17;
  uint64_t v56 = v12;
  uint64_t v26 = swift_bridgeObjectRetain();
  if (!MEMORY[0x1D25F8C00](v26, a9))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v27 = 0;
  uint64_t v28 = v73;
  uint64_t v75 = (void (**)(char *, unint64_t, uint64_t))(v73 + 16);
  uint64_t v68 = (void (**)(char *, char *, uint64_t))(v73 + 32);
  uint64_t v69 = v10;
  uint64_t v67 = (void (**)(uint64_t, uint64_t))(v73 + 8);
  uint64_t v61 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v59 = a10;
  uint64_t v58 = a10 + 8;
  long long v29 = v71;
  uint64_t v30 = v66;
  uint64_t v57 = a8;
  while (1)
  {
    char v32 = sub_1D17BE1E0();
    sub_1D17BE160();
    if (v32)
    {
      long long v33 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
      v33(v29, a8+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v27, a9);
    }
    else
    {
      uint64_t v54 = sub_1D17BE8A0();
      if (v56 != 8) {
        goto LABEL_35;
      }
      *(void *)&v79[0] = v54;
      long long v33 = *v75;
      (*v75)(v29, (unint64_t)v79, a9);
      swift_unknownObjectRelease();
    }
    uint64_t v34 = v27 + 1;
    uint64_t v35 = v72;
    if (__OFADD__(v27, 1)) {
      break;
    }
    uint64_t v25 = (uint64_t)v74;
    (*v68)(v74, v29, a9);
    v33(v70, v25, a9);
    if (swift_dynamicCast())
    {
      v79[0] = v76;
      v79[1] = v77;
      uint64_t v80 = v78;
      LOBYTE(v76) = v60;
      uint64_t v36 = v69;
      uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 8))(v63, v35, v64, v65, &v76, v30, v62, a9, v59);
      if (v36)
      {
        sub_1D165C1C0((uint64_t)v79);
        (*v67)(v25, a9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v25;
      }
      uint64_t v38 = v37;
      uint64_t v69 = 0;
      if (v37)
      {
        sub_1D165C164((uint64_t)v79, (uint64_t)&v76);
        long long v39 = v61;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v81 = v39;
        unint64_t v42 = sub_1D165A824((uint64_t)&v76);
        uint64_t v43 = v39[2];
        BOOL v44 = (v41 & 1) == 0;
        uint64_t v45 = v43 + v44;
        if (__OFADD__(v43, v44)) {
          goto LABEL_33;
        }
        char v46 = v41;
        if (v39[3] >= v45)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_1D16A7370();
          }
        }
        else
        {
          sub_1D16A38B8(v45, isUniquelyReferenced_nonNull_native);
          unint64_t v47 = sub_1D165A824((uint64_t)&v76);
          if ((v46 & 1) != (v48 & 1)) {
            goto LABEL_36;
          }
          unint64_t v42 = v47;
        }
        uint64_t v49 = v81;
        a8 = v57;
        uint64_t v61 = v81;
        if (v46)
        {
          uint64_t v50 = v81[7];
          swift_bridgeObjectRelease();
          *(void *)(v50 + 8 * v42) = v38;
        }
        else
        {
          v81[(v42 >> 6) + 8] |= 1 << v42;
          sub_1D165C164((uint64_t)&v76, v49[6] + 40 * v42);
          *(void *)(v49[7] + 8 * v42) = v38;
          uint64_t v51 = v49[2];
          BOOL v52 = __OFADD__(v51, 1);
          uint64_t v53 = v51 + 1;
          if (v52) {
            goto LABEL_34;
          }
          v49[2] = v53;
        }
        swift_bridgeObjectRelease();
        sub_1D165C1C0((uint64_t)&v76);
        sub_1D165C1C0((uint64_t)v79);
        (*v67)((uint64_t)v74, a9);
      }
      else
      {
        sub_1D165C1C0((uint64_t)v79);
        (*v67)(v25, a9);
      }
      uint64_t v30 = v66;
    }
    else
    {
      uint64_t v78 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      (*v67)(v25, a9);
      sub_1D166817C((uint64_t)&v76, &qword_1EA651A98);
    }
    long long v29 = v71;
    uint64_t v31 = MEMORY[0x1D25F8C00](a8, a9);
    ++v27;
    uint64_t v28 = v73;
    if (v34 == v31)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v61;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

id MAFeatureDefinition.graph.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t MAFeatureDefinition.source.getter()
{
  return swift_retain();
}

uint64_t MAFeatureDefinition.targets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D1677BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(v3 + 40);
  if (!*(void *)(v5 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1D165A868(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    uint64_t v12 = 0;
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(v5 + 56) + 48 * v8;
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *(void *)(v10 + 8);
  uint64_t v13 = *(void *)(v10 + 16);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 24);
  uint64_t v15 = *(void *)(v10 + 32);
  uint64_t v16 = *(void *)(v10 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1D1660A34(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v15)
  {
LABEL_7:
    uint64_t v18 = 0;
    uint64_t result = 0;
    goto LABEL_8;
  }
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v15;
  *(void *)(result + 24) = v16;
  uint64_t v18 = sub_1D167BA68;
LABEL_8:
  *a3 = v12;
  a3[1] = v11;
  a3[2] = v13;
  a3[3] = v14;
  a3[4] = v18;
  a3[5] = result;
  return result;
}

uint64_t sub_1D1677CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v6 = *(void *)(v2 + 40);
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_1D165A868(a1, a2);
    if (v10)
    {
      uint64_t v11 = (void *)(*(void *)(v6 + 56) + 48 * v9);
      uint64_t v12 = (void *)v11[2];
      uint64_t v14 = v11[4];
      uint64_t v13 = v11[5];
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1D1660A34(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14)
      {
        uint64_t v15 = swift_allocObject();
        *(void *)(v15 + 16) = v14;
        *(void *)(v15 + 24) = v13;
        uint64_t v16 = (uint64_t (*)(void))sub_1D167BA68;
      }
      else
      {
        uint64_t v16 = 0;
      }
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1D1660A34((uint64_t)v16);
      sub_1D165B3A4((uint64_t)v16);
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(v5 + 48);
      if (*(void *)(v17 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v18 = sub_1D165AA20((uint64_t)v12);
        if (v19)
        {
          uint64_t v14 = *(void *)(*(void *)(v17 + 56) + 8 * v18);
          swift_bridgeObjectRetain();
LABEL_20:
          swift_bridgeObjectRelease();
          swift_release_n();
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1D1660A34((uint64_t)v16);
      swift_bridgeObjectRelease();
      uint64_t v20 = swift_release();
      if (v14)
      {
        sub_1D1701444(*(void *)(v5 + 24), 0, v12, 1.0);
        if (v4)
        {
          sub_1D165B3A4((uint64_t)v16);
          swift_release();
          swift_bridgeObjectRelease();
          sub_1D165B3A4((uint64_t)v16);
          return v14;
        }
        uint64_t v21 = v16();
        if (v21)
        {
          uint64_t v14 = sub_1D1666CF8(v21);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_retain();
          sub_1D1660A34((uint64_t)v16);
          sub_1D165B3A4((uint64_t)v16);
          swift_bridgeObjectRelease();
          swift_retain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v26 = *(void *)(v5 + 48);
          *(void *)(v5 + 48) = 0x8000000000000000;
          sub_1D165EF04(v14, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
          *(void *)(v5 + 48) = v26;
          swift_release();
          swift_bridgeObjectRelease();
          sub_1D165B3A4((uint64_t)v16);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
LABEL_21:
          sub_1D165B3A4((uint64_t)v16);
          return v14;
        }
        swift_release();
        uint64_t v20 = sub_1D165B3A4((uint64_t)v16);
      }
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*v12 + 216))(v20);
      uint64_t v14 = sub_1D1666CF8(v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1D1660A34((uint64_t)v16);
      sub_1D165B3A4((uint64_t)v16);
      swift_bridgeObjectRelease();
      swift_retain();
      char v24 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v27 = *(void *)(v5 + 48);
      *(void *)(v5 + 48) = 0x8000000000000000;
      sub_1D165EF04(v14, (uint64_t)v12, v24);
      *(void *)(v5 + 48) = v27;
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t sub_1D1678098()
{
  if (*(void *)(v0 + 56))
  {
    uint64_t v1 = *(void **)(v0 + 56);
LABEL_32:
    swift_bridgeObjectRetain();
    return (uint64_t)v1;
  }
  if (!objc_msgSend(*(id *)(v0 + 16), sel_hasPendingRead)) {
    goto LABEL_37;
  }
  uint64_t v2 = *(void *)(*(void *)(v0 + 32) + 16);
  if (!v2)
  {
    uint64_t v1 = (void *)MEMORY[0x1E4FBC868];
LABEL_31:
    *(void *)(v0 + 56) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  uint64_t v29 = v0;
  uint64_t v3 = 0;
  uint64_t v4 = (void *)(swift_bridgeObjectRetain() + 72);
  uint64_t v1 = (void *)MEMORY[0x1E4FBC868];
  while (1)
  {
    uint64_t v30 = v2;
    uint64_t v6 = *(v4 - 5);
    uint64_t v7 = *(v4 - 4);
    char v33 = *((unsigned char *)v4 - 16);
    uint64_t v9 = *(v4 - 1);
    uint64_t v8 = *v4;
    uint64_t v34 = v3;
    if (v9)
    {
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = v8;
      uint64_t v11 = sub_1D167BA68;
    }
    else
    {
      uint64_t v11 = 0;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1D1660A34(v9);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v32 = v9;
    sub_1D1660A34(v9);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1D1660A34((uint64_t)v11);
    uint64_t v31 = (uint64_t)v11;
    sub_1D165B3A4((uint64_t)v11);
    swift_release();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = v6;
    unint64_t v15 = sub_1D165A868(v6, v7);
    uint64_t v16 = v1[2];
    BOOL v17 = (v14 & 1) == 0;
    uint64_t v18 = v16 + v17;
    if (__OFADD__(v16, v17)) {
      break;
    }
    char v19 = v14;
    if (v1[3] >= v18)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v14) {
          goto LABEL_18;
        }
      }
      else
      {
        sub_1D16A754C();
        if (v19) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      sub_1D16A3BCC(v18, isUniquelyReferenced_nonNull_native);
      unint64_t v20 = sub_1D165A868(v13, v7);
      if ((v19 & 1) != (v21 & 1)) {
        goto LABEL_38;
      }
      unint64_t v15 = v20;
      if (v19)
      {
LABEL_18:
        uint64_t v22 = v34;
        *(void *)(v1[7] + 8 * v15) = v34;
        goto LABEL_22;
      }
    }
    v1[(v15 >> 6) + 8] |= 1 << v15;
    uint64_t v23 = (uint64_t *)(v1[6] + 16 * v15);
    *uint64_t v23 = v13;
    v23[1] = v7;
    uint64_t v22 = v34;
    *(void *)(v1[7] + 8 * v15) = v34;
    uint64_t v24 = v1[2];
    BOOL v5 = __OFADD__(v24, 1);
    uint64_t v25 = v24 + 1;
    if (v5) {
      goto LABEL_34;
    }
    v1[2] = v25;
    swift_bridgeObjectRetain();
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v33)
    {
      unint64_t v26 = sub_1D1677CC8(v13, v7);
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v27 = sub_1D17BEAD0();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_release();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1D165B3A4(v31);
      swift_release();
      swift_bridgeObjectRelease();
      sub_1D165B3A4(v32);
      BOOL v5 = __OFADD__(v22, v27);
      uint64_t v3 = v22 + v27;
      if (v5) {
        goto LABEL_36;
      }
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
      sub_1D165B3A4(v31);
      swift_release();
      swift_bridgeObjectRelease();
      sub_1D165B3A4(v9);
      BOOL v5 = __OFADD__(v22, 1);
      uint64_t v3 = v22 + 1;
      if (v5) {
        goto LABEL_35;
      }
    }
    v4 += 6;
    uint64_t v2 = v30 - 1;
    if (v30 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v0 = v29;
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

id sub_1D16784C4()
{
  if (*(unsigned char *)(v0 + 72) != 1) {
    return *(id *)(v0 + 64);
  }
  id result = objc_msgSend(*(id *)(v0 + 16), sel_hasPendingRead);
  if (!result) {
    goto LABEL_23;
  }
  uint64_t v2 = *(void *)(*(void *)(v0 + 32) + 16);
  if (!v2)
  {
    id result = 0;
LABEL_20:
    *(void *)(v0 + 64) = result;
    *(unsigned char *)(v0 + 72) = 0;
    return result;
  }
  uint64_t v13 = v0;
  char v14 = 0;
  uint64_t v3 = (uint64_t *)(swift_bridgeObjectRetain() + 72);
  while (1)
  {
    uint64_t v5 = *(v3 - 5);
    uint64_t v6 = *(v3 - 4);
    int v7 = *((unsigned __int8 *)v3 - 16);
    uint64_t v8 = *(v3 - 1);
    uint64_t v9 = *v3;
    if (v8)
    {
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = v8;
      *(void *)(v10 + 24) = v9;
      unint64_t v15 = sub_1D167BA68;
    }
    else
    {
      unint64_t v15 = 0;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1D1660A34(v8);
    if (!v7) {
      break;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1D1660A34(v8);
    unint64_t v11 = sub_1D1677CC8(v5, v6);
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = sub_1D17BEAD0();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1D165B3A4((uint64_t)v15);
    swift_release();
    swift_bridgeObjectRelease();
    id result = (id)sub_1D165B3A4(v8);
    BOOL v4 = __OFADD__(v14, v12);
    v14 += v12;
    if (v4) {
      goto LABEL_22;
    }
LABEL_6:
    v3 += 6;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      uint64_t v0 = v13;
      id result = v14;
      goto LABEL_20;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  id result = (id)sub_1D165B3A4((uint64_t)v15);
  BOOL v4 = __OFADD__(v14++, 1);
  if (!v4) {
    goto LABEL_6;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1D1678740(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  *(unsigned char *)(v1 + 72) = 0;
  return result;
}

void *(*sub_1D167874C(id *a1))(void *result)
{
  a1[1] = v1;
  *a1 = sub_1D16784C4();
  return sub_1D1678794;
}

void *sub_1D1678794(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 64) = *result;
  *(unsigned char *)(v1 + 72) = 0;
  return result;
}

uint64_t sub_1D16787A4()
{
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = *(void *)(v0 + 80);
  }
  else
  {
    uint64_t v1 = sub_1D1678804(v0);
    *(void *)(v0 + 80) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1D1678804(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1D168268C(0, v2, 0);
    uint64_t v3 = v12;
    BOOL v4 = (uint64_t *)(v1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      uint64_t v7 = v4[3];
      swift_bridgeObjectRetain();
      swift_retain();
      if (v7)
      {
        sub_1D1660A34(v7);
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1D1660A34(v7);
        sub_1D165B3A4(v7);
      }
      else
      {
        sub_1D1660A34(0);
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1D1660A34(0);
      }
      swift_bridgeObjectRelease();
      swift_release_n();
      sub_1D165B3A4(v7);
      unint64_t v9 = *(void *)(v12 + 16);
      unint64_t v8 = *(void *)(v12 + 24);
      if (v9 >= v8 >> 1) {
        sub_1D168268C(v8 > 1, v9 + 1, 1);
      }
      v4 += 6;
      *(void *)(v12 + 16) = v9 + 1;
      uint64_t v10 = v12 + 16 * v9;
      *(void *)(v10 + 32) = v6;
      *(void *)(v10 + 40) = v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_1D1678980(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1D1678990(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16787A4();
  return sub_1D16789D8;
}

uint64_t sub_1D16789D8(void *a1)
{
  *(void *)(a1[1] + 80) = *a1;
  return swift_bridgeObjectRelease();
}

void *sub_1D16789E8(unint64_t a1, void (*a2)(unsigned char *, double), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v49 = a3;
  uint64_t v50 = a5;
  char v48 = a2;
  uint64_t v54 = sub_1D17BE620();
  uint64_t v8 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54, v9);
  unint64_t v11 = (char *)&v46 - v10;
  id result = objc_msgSend(*(id *)(v5 + 16), sel_hasPendingRead);
  if (!result) {
    goto LABEL_40;
  }
  uint64_t v51 = v5;
  uint64_t v13 = *(void *)(v5 + 32);
  uint64_t v14 = *(void *)(v13 + 16);
  v62[0] = 0;
  uint64_t v61 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = MEMORY[0x1D25F8C00](v15, a4);
  unint64_t v55 = a1;
  uint64_t v47 = v13;
  if (!v16)
  {
    uint64_t v19 = *(void *)(a4 - 8);
LABEL_17:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v11, 1, 1, a4);
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void *)(v13 + 16);
    if (v24)
    {
      double v25 = (double)v14;
      swift_bridgeObjectRetain();
      unint64_t v26 = (uint64_t *)(v13 + 72);
      double v27 = 0.0;
      while (1)
      {
        uint64_t v28 = *(v26 - 4);
        uint64_t v54 = *(v26 - 5);
        uint64_t v29 = *(v26 - 3);
        LODWORD(v53) = *((unsigned __int8 *)v26 - 16);
        uint64_t v30 = *(v26 - 1);
        uint64_t v31 = *v26;
        if (v30)
        {
          uint64_t v32 = swift_allocObject();
          *(void *)(v32 + 16) = v30;
          *(void *)(v32 + 24) = v31;
          char v33 = sub_1D167BA68;
        }
        else
        {
          char v33 = 0;
          uint64_t v32 = 0;
        }
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v34 = sub_1D1660A34(v30);
        uint64_t v35 = (void *)MEMORY[0x1D25F9BA0](v34);
        v56[0] = v54;
        v56[1] = v28;
        v56[2] = v29;
        char v57 = (char)v53;
        uint64_t v58 = v33;
        uint64_t v59 = v32;
        uint64_t v36 = v52;
        sub_1D1678FC8(v51, (uint64_t)v56, v55, (uint64_t *)&v61, a4, v50);
        uint64_t v52 = v36;
        if (v36)
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1D165B3A4((uint64_t)v33);
          swift_bridgeObjectRelease();
          return v33;
        }
        double v27 = v27 + 1.0;
        v48(v62, v27 / v25);
        char v37 = v62[0];
        swift_release();
        swift_bridgeObjectRelease();
        if (v37) {
          break;
        }
        v26 += 6;
        sub_1D165B3A4((uint64_t)v33);
        if (!--v24)
        {
          swift_bridgeObjectRelease();
          goto LABEL_26;
        }
      }
      swift_bridgeObjectRelease();
      sub_1D165B3A4((uint64_t)v33);
    }
    else
    {
LABEL_26:
      uint64_t v38 = (uint64_t)v61;
      uint64_t v39 = v61[2];
      uint64_t v40 = v51;
      if (v39)
      {
        swift_bridgeObjectRetain();
        uint64_t v41 = 0;
        char v33 = (void *)MEMORY[0x1E4FBC860];
        do
        {
          uint64_t v42 = *(void *)(v38 + 8 * v41 + 32);
          swift_bridgeObjectRetain();
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v33 = sub_1D169CF1C(0, v33[2] + 1, 1, v33);
          }
          unint64_t v44 = v33[2];
          unint64_t v43 = v33[3];
          if (v44 >= v43 >> 1) {
            char v33 = sub_1D169CF1C((void *)(v43 > 1), v44 + 1, 1, v33);
          }
          ++v41;
          v33[2] = v44 + 1;
          uint64_t v45 = &v33[4 * v44];
          v45[4] = v40;
          v45[5] = v42;
          v45[6] = 0;
          v45[7] = 0;
        }
        while (v39 != v41);
        swift_bridgeObjectRelease_n();
        return v33;
      }
    }
    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v46 = (a4 - 8) & 0xFFFFFFFFFFFFLL | 0x2E3F000000000000;
  uint64_t v17 = 0;
  uint64_t v53 = (void (**)(char *, uint64_t))(v8 + 8);
  while (1)
  {
    char v18 = sub_1D17BE1E0();
    sub_1D17BE160();
    if ((v18 & 1) == 0) {
      break;
    }
    uint64_t v19 = *(void *)(a4 - 8);
    id result = (void *)(*(uint64_t (**)(char *, unint64_t, uint64_t))(v19 + 16))(v11, a1+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(void *)(v19 + 72) * v17, a4);
    uint64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_39;
    }
LABEL_6:
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v11, 0, 1, a4);
    char v21 = v61;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v21 = sub_1D169D02C(0, v21[2] + 1, 1, v21);
    }
    unint64_t v23 = v21[2];
    unint64_t v22 = v21[3];
    if (v23 >= v22 >> 1) {
      char v21 = sub_1D169D02C((void *)(v22 > 1), v23 + 1, 1, v21);
    }
    v21[2] = v23 + 1;
    v21[v23 + 4] = MEMORY[0x1E4FBC860];
    uint64_t v61 = v21;
    (*v53)(v11, v54);
    a1 = v55;
    ++v17;
    if (v20 == MEMORY[0x1D25F8C00](v55, a4))
    {
      uint64_t v13 = v47;
      goto LABEL_17;
    }
  }
  id result = (void *)sub_1D17BE8A0();
  uint64_t v19 = *(void *)(a4 - 8);
  if (*(void *)(v19 + 64) != 8) {
    goto LABEL_41;
  }
  id v60 = result;
  (*(void (**)(char *, id *, uint64_t))(v19 + 16))(v11, &v60, a4);
  id result = (void *)swift_unknownObjectRelease();
  uint64_t v20 = v17 + 1;
  if (!__OFADD__(v17, 1)) {
    goto LABEL_6;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1D1678FC8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v134 = a6;
  v120 = a4;
  unint64_t v139 = a3;
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v135 = *(void *)(a2 + 16);
  int v119 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v10 = *(void **)(a5 - 8);
  uint64_t v11 = *(void *)(a2 + 40);
  unint64_t v132 = *(void *)(a2 + 32);
  uint64_t v133 = v11;
  v140 = v10;
  uint64_t v12 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v141 = (char *)v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v16 = (char *)v115 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v18 = sub_1D17BE620();
  uint64_t v131 = *(id **)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18, v19);
  uint64_t v22 = (uint64_t)v115 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20, v23);
  double v25 = (char *)v115 - v24;
  uint64_t v136 = v9;
  uint64_t v137 = v8;
  uint64_t v26 = v143;
  uint64_t result = sub_1D1677CC8(v8, v9);
  if (v26) {
    return result;
  }
  uint64_t v28 = v131;
  uint64_t v143 = result;
  v128 = v25;
  uint64_t v129 = v22;
  uint64_t v142 = v18;
  uint64_t v130 = TupleTypeMetadata2;
  uint64_t v138 = v16;
  LOBYTE(v22) = v119;
  LOBYTE(v144[0]) = v119;
  unint64_t v117 = a5;
  uint64_t v114 = a5;
  unint64_t v29 = v139;
  uint64_t v30 = Array<A>.featureExtraction(definition:target:)(a1, v137, v136, v135, (uint64_t)v144, v132, v133, v139, v114, v134);
  unint64_t v31 = v29;
  v115[2] = 0;
  uint64_t v32 = v120;
  uint64_t v33 = v142;
  unint64_t v34 = (unint64_t)v140;
  if (!v30) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v35 = (unint64_t)v28;
  uint64_t v133 = v30;
  v144[5] = v31;
  unint64_t v36 = v117;
  uint64_t v37 = sub_1D17BE260();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x1D25F8A40](v144, v37, WitnessTable);
  v144[10] = v144[0];
  sub_1D17BEAC0();
  sub_1D17BEA90();
  uint64_t v39 = *v32;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v32 = v39;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_171;
  }
LABEL_4:
  *uint64_t v32 = v39;
  uint64_t v127 = sub_1D17BEAB0();
  v126 = (void (**)(char *, uint64_t, uint64_t))(v35 + 32);
  uint64_t v41 = v130;
  uint64_t v125 = v130 - 8;
  uint64_t v124 = (void (**)(char *, uint64_t, unint64_t))(v34 + 32);
  v123 = (void (**)(char *, unint64_t, unint64_t))(v34 + 16);
  uint64_t v42 = v143 & 0xFFFFFFFFFFFFFF8;
  uint64_t v135 = v143 & 0xFFFFFFFFFFFFFF8;
  if (v143 < 0) {
    uint64_t v42 = v143;
  }
  v115[1] = v42;
  unint64_t v118 = v143 & 0xC000000000000001;
  uint64_t v131 = (id *)(v143 + 32);
  v122 = (void (**)(char *, unint64_t))(v34 + 8);
  unint64_t v121 = (unint64_t)v143 >> 62;
  unint64_t v43 = v141;
  while (1)
  {
    uint64_t v44 = v129;
    sub_1D17BEAA0();
    uint64_t v39 = (uint64_t)v128;
    (*v126)(v128, v44, v33);
    int v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v39, 1, v41);
    unint64_t v34 = (unint64_t)v138;
    if (v45 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    unint64_t v35 = *(void *)v39;
    (*v124)(v138, v39 + *(int *)(v41 + 48), v36);
    if ((v35 & 0x8000000000000000) != 0) {
      goto LABEL_165;
    }
    uint64_t v46 = *v32;
    if (v35 >= *(void *)(*v32 + 16))
    {
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      uint64_t v39 = (uint64_t)sub_1D1667654((void *)v39);
      goto LABEL_4;
    }
    uint64_t v136 = v35;
    uint64_t v47 = *(void **)(v46 + 8 * v35 + 32);
    (*v123)(v43, v34, v36);
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    uint64_t v39 = v133;
    if (*(void *)(v133 + 16))
    {
      unint64_t v48 = sub_1D165A824((uint64_t)v144);
      if (v49) {
        break;
      }
    }
    sub_1D165C1C0((uint64_t)v144);
    if ((v22 & 1) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v47 = sub_1D169C99C(0, v47[2] + 1, 1, v47);
      }
      goto LABEL_57;
    }
    if (v121)
    {
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_1D17BEAD0();
      if (!v39)
      {
LABEL_151:
        swift_bridgeObjectRelease();
        goto LABEL_154;
      }
    }
    else
    {
      uint64_t v39 = *(void *)(v135 + 16);
      swift_bridgeObjectRetain();
      if (!v39) {
        goto LABEL_151;
      }
    }
    if (v39 < 1) {
      goto LABEL_168;
    }
    if (v118)
    {
      uint64_t v68 = 0;
      do
      {
        MEMORY[0x1D25F9260](v68, v143);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v47 = sub_1D169C99C(0, v47[2] + 1, 1, v47);
        }
        unint64_t v34 = v47[2];
        unint64_t v69 = v47[3];
        unint64_t v35 = v34 + 1;
        if (v34 >= v69 >> 1) {
          uint64_t v47 = sub_1D169C99C((void *)(v69 > 1), v34 + 1, 1, v47);
        }
        ++v68;
        v47[2] = v35;
        v47[v34 + 4] = 0;
        swift_unknownObjectRelease();
      }
      while (v39 != v68);
      swift_bridgeObjectRelease();
      goto LABEL_63;
    }
    unint64_t v34 = 0;
    do
    {
      id v77 = *(id *)(v143 + 8 * v34 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v47 = sub_1D169C99C(0, v47[2] + 1, 1, v47);
      }
      unint64_t v35 = v47[2];
      unint64_t v78 = v47[3];
      if (v35 >= v78 >> 1) {
        uint64_t v47 = sub_1D169C99C((void *)(v78 > 1), v35 + 1, 1, v47);
      }
      ++v34;
      v47[2] = v35 + 1;
      v47[v35 + 4] = 0;

      uint64_t v33 = v142;
    }
    while (v39 != v34);
    swift_bridgeObjectRelease();
    unint64_t v43 = v141;
LABEL_154:
    uint64_t v39 = *v32;
    swift_bridgeObjectRetain();
    char v113 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v32 = v39;
    if ((v113 & 1) == 0)
    {
      uint64_t v39 = (uint64_t)sub_1D1667654((void *)v39);
      *uint64_t v32 = v39;
    }
    if (v136 >= *(void *)(v39 + 16)) {
      goto LABEL_167;
    }
    *(void *)(v39 + 8 * v136 + 32) = v47;
    swift_bridgeObjectRelease();
    (*v122)(v138, v36);
    swift_bridgeObjectRelease();
    uint64_t v41 = v130;
  }
  char v50 = v22;
  uint64_t v22 = *(void *)(*(void *)(v133 + 56) + 8 * v48);
  swift_bridgeObjectRetain();
  sub_1D165C1C0((uint64_t)v144);
  if (v50)
  {
    uint64_t v32 = (uint64_t *)v143;
    if (!v121)
    {
      unint64_t v34 = *(void *)(v135 + 16);
      swift_bridgeObjectRetain();
      if (v34) {
        goto LABEL_15;
      }
      goto LABEL_153;
    }
    swift_bridgeObjectRetain();
    unint64_t v34 = sub_1D17BEAD0();
    if (!v34)
    {
LABEL_153:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v36 = v117;
      uint64_t v32 = v120;
      LOBYTE(v22) = v119;
      goto LABEL_154;
    }
LABEL_15:
    unint64_t v132 = sub_1D1668090();
    unint64_t v139 = v22 & 0xC000000000000001;
    uint64_t v51 = v22 & 0xFFFFFFFFFFFFFF8;
    if (v22 < 0) {
      uint64_t v51 = v22;
    }
    uint64_t v137 = v51;
    uint64_t v134 = v22 + 56;
    v140 = (void *)v34;
    if (v118)
    {
      uint64_t v33 = 0;
      while (1)
      {
        uint64_t v53 = MEMORY[0x1D25F9260](v33, v32);
        if (__OFADD__(v33++, 1))
        {
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
          goto LABEL_166;
        }
        unint64_t v36 = v53;
        if (v139)
        {
          if ((sub_1D17BE7B0() & 1) == 0) {
            goto LABEL_38;
          }
        }
        else
        {
          if (!*(void *)(v22 + 16)) {
            goto LABEL_38;
          }
          uint64_t v56 = sub_1D17BE5B0();
          uint64_t v57 = -1 << *(unsigned char *)(v22 + 32);
          unint64_t v58 = v56 & ~v57;
          if (((*(void *)(v134 + ((v58 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v58) & 1) == 0)
          {
LABEL_37:
            uint64_t v32 = (uint64_t *)v143;
LABEL_38:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v47 = sub_1D169C99C(0, v47[2] + 1, 1, v47);
            }
            unint64_t v35 = (unint64_t)v140;
            unint64_t v43 = v141;
            unint64_t v34 = v47[2];
            unint64_t v67 = v47[3];
            uint64_t v39 = v34 + 1;
            if (v34 >= v67 >> 1) {
              uint64_t v47 = sub_1D169C99C((void *)(v67 > 1), v34 + 1, 1, v47);
            }
            uint64_t v52 = 0;
            goto LABEL_20;
          }
          id v59 = *(id *)(*(void *)(v22 + 48) + 8 * v58);
          char v60 = sub_1D17BE5C0();

          if (v60)
          {
            uint64_t v32 = (uint64_t *)v143;
          }
          else
          {
            uint64_t v61 = ~v57;
            unint64_t v62 = (v58 + 1) & ~v57;
            if (((*(void *)(v134 + ((v62 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v62) & 1) == 0) {
              goto LABEL_37;
            }
            id v63 = *(id *)(*(void *)(v22 + 48) + 8 * v62);
            char v64 = sub_1D17BE5C0();

            uint64_t v32 = (uint64_t *)v143;
            if ((v64 & 1) == 0)
            {
              do
              {
                unint64_t v62 = (v62 + 1) & v61;
                if (((*(void *)(v134 + ((v62 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v62) & 1) == 0) {
                  goto LABEL_38;
                }
                id v65 = *(id *)(*(void *)(v22 + 48) + 8 * v62);
                char v66 = sub_1D17BE5C0();
              }
              while ((v66 & 1) == 0);
            }
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v47 = sub_1D169C99C(0, v47[2] + 1, 1, v47);
        }
        unint64_t v35 = (unint64_t)v140;
        unint64_t v43 = v141;
        unint64_t v34 = v47[2];
        unint64_t v55 = v47[3];
        uint64_t v39 = v34 + 1;
        if (v34 >= v55 >> 1) {
          uint64_t v47 = sub_1D169C99C((void *)(v55 > 1), v34 + 1, 1, v47);
        }
        uint64_t v52 = 1;
LABEL_20:
        v47[2] = v39;
        v47[v34 + 4] = v52;
        swift_unknownObjectRelease();
        if (v33 == v35)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v36 = v117;
          uint64_t v32 = v120;
          LOBYTE(v22) = v119;
          uint64_t v33 = v142;
          goto LABEL_154;
        }
      }
    }
    unint64_t v36 = 0;
    while (1)
    {
      if (v36 >= *(void *)(v135 + 16)) {
        goto LABEL_164;
      }
      unint64_t v35 = (unint64_t)v131[v36];
      if (v139)
      {
        id v90 = (id)v35;
        if ((sub_1D17BE7B0() & 1) == 0) {
          goto LABEL_111;
        }
      }
      else
      {
        if (!*(void *)(v22 + 16))
        {
          id v98 = (id)v35;
LABEL_111:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v47 = sub_1D169C99C(0, v47[2] + 1, 1, v47);
          }
          unint64_t v43 = v141;
          uint64_t v33 = v142;
          unint64_t v34 = v47[2];
          unint64_t v104 = v47[3];
          uint64_t v39 = v34 + 1;
          if (v34 >= v104 >> 1) {
            uint64_t v47 = sub_1D169C99C((void *)(v104 > 1), v34 + 1, 1, v47);
          }
          uint64_t v89 = 0;
          goto LABEL_91;
        }
        id v92 = (id)v35;
        uint64_t v93 = sub_1D17BE5B0();
        uint64_t v94 = -1 << *(unsigned char *)(v22 + 32);
        unint64_t v95 = v93 & ~v94;
        if (((*(void *)(v134 + ((v95 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v95) & 1) == 0) {
          goto LABEL_110;
        }
        id v96 = *(id *)(*(void *)(v22 + 48) + 8 * v95);
        char v97 = sub_1D17BE5C0();

        if (v97)
        {
          uint64_t v32 = (uint64_t *)v143;
        }
        else
        {
          uint64_t v116 = ~v94;
          unint64_t v99 = (v95 + 1) & ~v94;
          if (((*(void *)(v134 + ((v99 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v99) & 1) == 0)
          {
LABEL_110:
            uint64_t v32 = (uint64_t *)v143;
            goto LABEL_111;
          }
          id v100 = *(id *)(*(void *)(v22 + 48) + 8 * v99);
          char v101 = sub_1D17BE5C0();

          uint64_t v32 = (uint64_t *)v143;
          if ((v101 & 1) == 0)
          {
            do
            {
              unint64_t v99 = (v99 + 1) & v116;
              if (((*(void *)(v134 + ((v99 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v99) & 1) == 0) {
                goto LABEL_111;
              }
              id v102 = *(id *)(*(void *)(v22 + 48) + 8 * v99);
              char v103 = sub_1D17BE5C0();
            }
            while ((v103 & 1) == 0);
          }
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v47 = sub_1D169C99C(0, v47[2] + 1, 1, v47);
      }
      unint64_t v43 = v141;
      uint64_t v33 = v142;
      unint64_t v34 = v47[2];
      unint64_t v91 = v47[3];
      uint64_t v39 = v34 + 1;
      if (v34 >= v91 >> 1) {
        uint64_t v47 = sub_1D169C99C((void *)(v91 > 1), v34 + 1, 1, v47);
      }
      uint64_t v89 = 1;
LABEL_91:
      ++v36;
      v47[2] = v39;
      v47[v34 + 4] = v89;

      if ((void *)v36 == v140) {
        goto LABEL_153;
      }
    }
  }
  unint64_t v71 = v22 & 0xC000000000000001;
  if ((v22 & 0xC000000000000001) != 0)
  {
    uint64_t v39 = sub_1D17BE700();
    uint64_t v73 = v72;
    uint64_t v74 = sub_1D17BE7C0();
    char v76 = MEMORY[0x1D25F90E0](v39, v73, v74, v75);
    swift_bridgeObjectRelease();
    unint64_t v35 = v39;
    if (v76) {
      goto LABEL_141;
    }
    goto LABEL_75;
  }
  char v79 = *(unsigned char *)(v22 + 32);
  uint64_t v39 = 1 << v79;
  unint64_t v80 = *(void *)(v22 + 56);
  if (v80)
  {
    uint64_t v81 = 0;
    goto LABEL_74;
  }
  if ((v79 & 0x3Fu) < 7)
  {
LABEL_140:
    uint64_t v73 = *(unsigned int *)(v22 + 36);
LABEL_141:
    sub_1D167C268(v39, v73, v71 != 0);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v47 = sub_1D169C99C(0, v47[2] + 1, 1, v47);
    }
    unint64_t v36 = v117;
    uint64_t v32 = v120;
    LOBYTE(v22) = v119;
    unint64_t v43 = v141;
    uint64_t v33 = v142;
LABEL_57:
    unint64_t v34 = v47[2];
    unint64_t v70 = v47[3];
    if (v34 >= v70 >> 1) {
      uint64_t v47 = sub_1D169C99C((void *)(v70 > 1), v34 + 1, 1, v47);
    }
    v47[2] = v34 + 1;
    v47[v34 + 4] = 0;
    goto LABEL_154;
  }
  unint64_t v80 = *(void *)(v22 + 64);
  if (v80)
  {
    uint64_t v81 = 1;
  }
  else
  {
    uint64_t v108 = 0;
    unint64_t v109 = (unint64_t)(v39 + 63) >> 6;
    if (v109 <= 2) {
      unint64_t v109 = 2;
    }
    unint64_t v110 = v109 - 2;
    do
    {
      if (v110 == v108) {
        goto LABEL_140;
      }
      unint64_t v80 = *(void *)(v22 + 72 + 8 * v108++);
    }
    while (!v80);
    uint64_t v81 = v108 + 1;
  }
LABEL_74:
  unint64_t v35 = __clz(__rbit64(v80)) + (v81 << 6);
  uint64_t v73 = *(unsigned int *)(v22 + 36);
  if (v35 == v39) {
    goto LABEL_141;
  }
LABEL_75:
  unint64_t v34 = v71 != 0;
  sub_1D170F378(v35, v73, v71 != 0, v22);
  int64_t v83 = v82;
  sub_1D167C268(v35, v73, v71 != 0);
  swift_bridgeObjectRelease();
  if (v121)
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v33 = *(void *)(v135 + 16);
  }
  unint64_t v36 = v117;
  uint64_t v32 = v120;
  LOBYTE(v22) = v119;
  if (!v33) {
    goto LABEL_145;
  }
  if (v118)
  {
    id v84 = (id)MEMORY[0x1D25F9260](0, v143);
  }
  else
  {
    if (!*(void *)(v135 + 16)) {
      goto LABEL_170;
    }
    id v84 = *v131;
  }
  unint64_t v35 = (unint64_t)v84;
  uint64_t v39 = sub_1D1668090();
  char v85 = sub_1D17BE5C0();

  if (v85)
  {
    unint64_t v35 = 0;
    goto LABEL_83;
  }
  if (v33 == 1)
  {
LABEL_145:
    char v111 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v33 = v142;
    if ((v111 & 1) == 0) {
      uint64_t v47 = sub_1D169C99C(0, v47[2] + 1, 1, v47);
    }
    unint64_t v34 = v47[2];
    unint64_t v112 = v47[3];
    if (v34 >= v112 >> 1) {
      uint64_t v47 = sub_1D169C99C((void *)(v112 > 1), v34 + 1, 1, v47);
    }
    v47[2] = v34 + 1;
    v47[v34 + 4] = 0;

    unint64_t v43 = v141;
    goto LABEL_154;
  }
  if (v118)
  {
    uint64_t v32 = (uint64_t *)v143;
    id v105 = (id)MEMORY[0x1D25F9260](1, v143);
  }
  else
  {
    uint64_t v32 = (uint64_t *)v143;
    if (*(void *)(v135 + 16) < 2uLL) {
      goto LABEL_175;
    }
    id v105 = *(id *)(v143 + 40);
  }
  uint64_t v106 = v105;
  unint64_t v34 = sub_1D17BE5C0();

  if (v34)
  {
    unint64_t v35 = 1;
LABEL_83:
    unint64_t v34 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      goto LABEL_174;
    }
    char v86 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v36 = v117;
    uint64_t v32 = v120;
    LOBYTE(v22) = v119;
    if ((v86 & 1) == 0) {
      uint64_t v47 = sub_1D169C99C(0, v47[2] + 1, 1, v47);
    }
    unint64_t v88 = v47[2];
    unint64_t v87 = v47[3];
    if (v88 >= v87 >> 1) {
      uint64_t v47 = sub_1D169C99C((void *)(v87 > 1), v88 + 1, 1, v47);
    }
    v47[2] = v88 + 1;
    v47[v88 + 4] = v34;

LABEL_63:
    unint64_t v43 = v141;
    uint64_t v33 = v142;
    goto LABEL_154;
  }
  uint64_t v22 = 1;
  while (1)
  {
    unint64_t v35 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      goto LABEL_169;
    }
    if (v35 == v33)
    {
      unint64_t v36 = v117;
      uint64_t v32 = v120;
      LOBYTE(v22) = v119;
      goto LABEL_145;
    }
    if (v118)
    {
      id v107 = (id)MEMORY[0x1D25F9260](v22 + 1, v32);
      goto LABEL_127;
    }
    if ((v35 & 0x8000000000000000) != 0) {
      break;
    }
    if (v35 >= *(void *)(v135 + 16)) {
      goto LABEL_173;
    }
    id v107 = v131[v35];
LABEL_127:
    unint64_t v36 = (unint64_t)v107;
    unint64_t v34 = sub_1D17BE5C0();

    ++v22;
    if (v34) {
      goto LABEL_83;
    }
  }
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

id sub_1D167A1A0(unint64_t a1)
{
  id v3 = *(id *)(a1 + 16);
  id result = sub_1D16784C4();
  if (v3 == result)
  {
    id result = (id)MEMORY[0x1E4FBC860];
    unint64_t v17 = 0;
    unint64_t v18 = MEMORY[0x1E4FBC860];
    uint64_t v5 = *(void *)(v1 + 32);
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = (void *)(v5 + 72);
      do
      {
        uint64_t v8 = *(v7 - 4);
        uint64_t v9 = *(v7 - 3);
        char v10 = *((unsigned char *)v7 - 16);
        uint64_t v11 = *(v7 - 1);
        uint64_t v12 = *v7;
        v13[0] = *(v7 - 5);
        v13[1] = v8;
        id v13[2] = v9;
        char v14 = v10;
        uint64_t v15 = v11;
        uint64_t v16 = v12;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1D1660A34(v11);
        sub_1D167A2AC((uint64_t)v13, v1, a1, &v17, &v18);
        swift_release();
        swift_bridgeObjectRelease();
        sub_1D165B3A4(v11);
        v7 += 6;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      return (id)v18;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D167A2AC(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v6 = v5;
  uint64_t v75 = a5;
  unint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  int v10 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  if (v11)
  {
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v11;
    *(void *)(v13 + 24) = v12;
    id v65 = sub_1D167BA68;
  }
  else
  {
    id v65 = 0;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1D1660A34(v11);
  unint64_t v14 = sub_1D1677CC8(v8, v9);
  int64_t v15 = v9;
  if (v5)
  {

    swift_release();
    swift_bridgeObjectRelease();
    return sub_1D165B3A4((uint64_t)v65);
  }
  unint64_t v17 = v14;
  if (!v10)
  {
    unint64_t v43 = *a4;
    if ((*a4 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v43 < *(void *)(a3 + 16))
    {
      uint64_t v44 = *(void *)(a3 + 8 * v43 + 32);
      int64_t v15 = v44 - 1;
      if (!__OFSUB__(v44, 1))
      {
        if (v15 < 0) {
          goto LABEL_77;
        }
        if (!(v14 >> 62))
        {
          int v45 = *(void **)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v15 < (uint64_t)v45) {
            goto LABEL_51;
          }
          goto LABEL_77;
        }
LABEL_76:
        swift_bridgeObjectRetain();
        int v45 = (void *)sub_1D17BEAD0();
        swift_bridgeObjectRelease();
        if (v15 < (uint64_t)v45)
        {
LABEL_51:
          if ((v17 & 0xC000000000000001) != 0)
          {
            id v46 = (id)MEMORY[0x1D25F9260](v15, v17);
          }
          else
          {
            if ((unint64_t)v15 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_87;
            }
            id v46 = *(id *)(v17 + 8 * v15 + 32);
          }
          int v45 = v46;
          swift_bridgeObjectRelease();
          uint64_t v72 = (uint64_t)objc_msgSend(v45, sel_identifier);
          uint64_t v6 = (void *)sub_1D17BEB70();
          int64_t v15 = (int64_t)v47;
          unint64_t v48 = (void *)sub_1D17BDFE0();
          id v49 = objc_msgSend(v45, sel_propertyForKey_, v48);

          if (v49)
          {
            sub_1D17BE690();
            swift_unknownObjectRelease();
          }
          else
          {
            long long v70 = 0u;
            long long v71 = 0u;
          }
          sub_1D167C1AC((uint64_t)&v70, (uint64_t)&v72);
          if (v74)
          {
            if (swift_dynamicCast())
            {
              swift_bridgeObjectRelease();
              goto LABEL_63;
            }
          }
          else
          {
            sub_1D166817C((uint64_t)&v72, &qword_1EBD272F8);
          }
          id v50 = objc_msgSend(v45, sel_label, v64);
          if (!v50) {
            goto LABEL_64;
          }
          uint64_t v51 = v50;
          swift_bridgeObjectRelease();
          sub_1D17BDFF0();

LABEL_63:
          uint64_t v6 = (void *)sub_1D17BE010();
          int64_t v15 = (int64_t)v52;
          swift_bridgeObjectRelease();
LABEL_64:
          uint64_t v53 = v75;
          unint64_t v8 = *v75;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v53 = v8;
          if (isUniquelyReferenced_nonNull_native)
          {
LABEL_65:
            unint64_t v56 = *(void *)(v8 + 16);
            unint64_t v55 = *(void *)(v8 + 24);
            if (v56 >= v55 >> 1)
            {
              unint64_t v8 = (unint64_t)sub_1D169CCE8((void *)(v55 > 1), v56 + 1, 1, (void *)v8);
              *uint64_t v75 = v8;
            }
            *(void *)(v8 + 16) = v56 + 1;
            unint64_t v57 = v8 + 16 * v56;
            *(void *)(v57 + 32) = v6;
            *(void *)(v57 + 40) = v15;
            swift_release();
            swift_bridgeObjectRelease();

            uint64_t v58 = (uint64_t)v65;
            goto LABEL_81;
          }
LABEL_87:
          unint64_t v8 = (unint64_t)sub_1D169CCE8(0, *(void *)(v8 + 16) + 1, 1, (void *)v8);
          *uint64_t v75 = v8;
          goto LABEL_65;
        }
LABEL_77:
        swift_bridgeObjectRelease();
        id v59 = v75;
        int64_t v15 = *v75;
        char v60 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t *v59 = v15;
        if ((v60 & 1) == 0) {
          goto LABEL_84;
        }
        while (1)
        {
          unint64_t v62 = *(void *)(v15 + 16);
          unint64_t v61 = *(void *)(v15 + 24);
          if (v62 >= v61 >> 1)
          {
            int64_t v15 = (int64_t)sub_1D169CCE8((void *)(v61 > 1), v62 + 1, 1, (void *)v15);
            *uint64_t v75 = v15;
          }
          *(void *)(v15 + 16) = v62 + 1;
          id v63 = (void *)(v15 + 16 * v62);
          v63[4] = 1701736302;
          v63[5] = 0xE400000000000000;
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v58 = (uint64_t)v65;
LABEL_81:
          uint64_t result = sub_1D165B3A4(v58);
          if (!__OFADD__(*a4, 1)) {
            break;
          }
          __break(1u);
LABEL_84:
          int64_t v15 = (int64_t)sub_1D169CCE8(0, *(void *)(v15 + 16) + 1, 1, (void *)v15);
          *uint64_t v75 = v15;
        }
        ++*a4;
        return result;
      }
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    __break(1u);
    goto LABEL_74;
  }
  if (v14 >> 62) {
    goto LABEL_70;
  }
  uint64_t v18 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v18)
  {
    char v64 = v6;
    if (v18 < 1) {
      goto LABEL_75;
    }
    uint64_t v19 = 0;
    unint64_t v67 = a3 + 32;
    a3 = *(void *)(a3 + 16);
    uint64_t v66 = v18;
    while (1)
    {
      id v20 = (v17 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1D25F9260](v19, v17)
          : *(id *)(v17 + 8 * v19 + 32);
      uint64_t v6 = v20;
      uint64_t v72 = (uint64_t)objc_msgSend(v20, sel_identifier, v64);
      sub_1D167C214();
      uint64_t v21 = sub_1D17BE680();
      unint64_t v23 = v22;
      unint64_t v8 = sub_1D17BDFE0();
      int64_t v15 = (int64_t)objc_msgSend(v6, sel_propertyForKey_, v8);

      if (v15)
      {
        sub_1D17BE690();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v70 = 0u;
        long long v71 = 0u;
      }
      sub_1D167C1AC((uint64_t)&v70, (uint64_t)&v72);
      if (v74)
      {
        if (swift_dynamicCast())
        {
          swift_bridgeObjectRelease();
          int64_t v15 = (int64_t)v69;
          goto LABEL_23;
        }
      }
      else
      {
        sub_1D166817C((uint64_t)&v72, &qword_1EBD272F8);
      }
      id v24 = objc_msgSend(v6, sel_label);
      if (!v24) {
        goto LABEL_24;
      }
      unint64_t v8 = (unint64_t)v24;
      swift_bridgeObjectRelease();
      sub_1D17BDFF0();
      int64_t v15 = (int64_t)v25;

LABEL_23:
      uint64_t v21 = sub_1D17BE010();
      unint64_t v23 = v26;
      swift_bridgeObjectRelease();
LABEL_24:
      if (*a4 >= a3) {
        break;
      }
      uint64_t v27 = *(void *)(v67 + 8 * *a4);
      if (v27 == 1)
      {
        unint64_t v34 = v75;
        int64_t v15 = *v75;
        char v35 = swift_isUniquelyReferenced_nonNull_native();
        *unint64_t v34 = v15;
        if ((v35 & 1) == 0)
        {
          int64_t v15 = (int64_t)sub_1D169CCE8(0, *(void *)(v15 + 16) + 1, 1, (void *)v15);
          *uint64_t v75 = v15;
        }
        unint64_t v37 = *(void *)(v15 + 16);
        unint64_t v36 = *(void *)(v15 + 24);
        unint64_t v8 = v37 + 1;
        if (v37 >= v36 >> 1)
        {
          int64_t v15 = (int64_t)sub_1D169CCE8((void *)(v36 > 1), v37 + 1, 1, (void *)v15);
          *uint64_t v75 = v15;
        }
        *(void *)(v15 + 16) = v8;
        uint64_t v38 = (void *)(v15 + 16 * v37);
        v38[4] = v21;
        uint64_t v33 = v38 + 4;
        uint64_t v18 = v66;
      }
      else if (v27)
      {
        swift_bridgeObjectRelease();
        uint64_t v39 = v75;
        int64_t v15 = *v75;
        char v40 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v39 = v15;
        if ((v40 & 1) == 0)
        {
          int64_t v15 = (int64_t)sub_1D169CCE8(0, *(void *)(v15 + 16) + 1, 1, (void *)v15);
          *uint64_t v75 = v15;
        }
        unint64_t v8 = *(void *)(v15 + 16);
        unint64_t v41 = *(void *)(v15 + 24);
        if (v8 >= v41 >> 1)
        {
          int64_t v15 = (int64_t)sub_1D169CCE8((void *)(v41 > 1), v8 + 1, 1, (void *)v15);
          *uint64_t v75 = v15;
        }
        *(void *)(v15 + 16) = v8 + 1;
        uint64_t v42 = (void *)(v15 + 16 * v8);
        v42[4] = 1701736302;
        uint64_t v33 = v42 + 4;
        unint64_t v23 = 0xE400000000000000;
      }
      else
      {
        uint64_t v72 = 542396238;
        unint64_t v73 = 0xE400000000000000;
        sub_1D17BE030();
        swift_bridgeObjectRelease();
        unint64_t v8 = v72;
        unint64_t v23 = v73;
        uint64_t v28 = v75;
        int64_t v15 = *v75;
        char v29 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v28 = v15;
        if ((v29 & 1) == 0)
        {
          int64_t v15 = (int64_t)sub_1D169CCE8(0, *(void *)(v15 + 16) + 1, 1, (void *)v15);
          *uint64_t v75 = v15;
        }
        unint64_t v31 = *(void *)(v15 + 16);
        unint64_t v30 = *(void *)(v15 + 24);
        if (v31 >= v30 >> 1)
        {
          int64_t v15 = (int64_t)sub_1D169CCE8((void *)(v30 > 1), v31 + 1, 1, (void *)v15);
          *uint64_t v75 = v15;
        }
        *(void *)(v15 + 16) = v31 + 1;
        uint64_t v32 = (void *)(v15 + 16 * v31);
        v32[4] = v8;
        uint64_t v33 = v32 + 4;
        uint64_t v18 = v66;
      }
      v33[1] = v23;

      if (__OFADD__(*a4, 1)) {
        goto LABEL_69;
      }
      ++v19;
      ++*a4;
      if (v18 == v19) {
        goto LABEL_44;
      }
    }
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
LABEL_44:
  swift_release();
  swift_bridgeObjectRelease();
  sub_1D165B3A4((uint64_t)v65);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D167ABB8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 + 40);
  if (!*(void *)(v5 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_1D165A868(a2, a3);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v11 = *(void *)(v5 + 56) + 48 * v9;
  uint64_t v12 = *(void *)v11;
  int v42 = *(unsigned __int8 *)(v11 + 24);
  uint64_t v14 = *(void *)(v11 + 32);
  uint64_t v13 = *(void *)(v11 + 40);
  uint64_t v15 = *(void *)(v11 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1D1660A34(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v13;
    unint64_t v17 = sub_1D167BA68;
  }
  else
  {
    unint64_t v17 = 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1D1678098();
  if (!*(void *)(v18 + 16) || (unint64_t v19 = sub_1D165A868(a2, a3), (v20 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v24 = (uint64_t)v17;
LABEL_12:
    sub_1D165B3A4(v24);
    return 0;
  }
  unint64_t v21 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = v4;
  unint64_t v23 = sub_1D1677CC8(v12, v15);
  unint64_t v27 = v23;
  if (v42)
  {
    uint64_t v44 = MEMORY[0x1E4FBC860];
    if (v23 >> 62) {
      goto LABEL_46;
    }
    uint64_t v28 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v28)
    {
      uint64_t v29 = 0;
      unint64_t v30 = a1[2];
      BOOL v31 = v30 >= v21;
      unint64_t v32 = v30 - v21;
      if (v31) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = 0;
      }
      unint64_t v21 = (unint64_t)&a1[v21 + 4];
      unint64_t v43 = v21;
      while (1)
      {
        unint64_t v34 = (v27 & 0xC000000000000001) != 0
            ? (void *)MEMORY[0x1D25F9260](v29, v27)
            : *(id *)(v27 + 8 * v29 + 32);
        a1 = v34;
        if (v33 == v29) {
          break;
        }
        uint64_t v35 = *(void *)(v21 + 8 * v29);
        if (v35)
        {
          if (v35 != 1)
          {
            swift_release();
            swift_bridgeObjectRelease();
            sub_1D165B3A4((uint64_t)v17);
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            return 0;
          }
          unint64_t v36 = v34;
          MEMORY[0x1D25F8AB0]();
          if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_1D17BE170();
          }
          sub_1D17BE1F0();
          sub_1D17BE150();
          unint64_t v21 = v43;
        }
        ++v29;

        if (v28 == v29)
        {
          swift_release();
          swift_bridgeObjectRelease();
          sub_1D165B3A4((uint64_t)v17);
          swift_bridgeObjectRelease();
          return v44;
        }
      }
      __break(1u);
LABEL_46:
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_bridgeObjectRelease();
    sub_1D165B3A4((uint64_t)v17);
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  if ((v21 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_49;
  }
  if (v21 >= a1[2])
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v37 = a1[v21 + 4];
  uint64_t v22 = v37 - 1;
  if (__OFSUB__(v37, 1))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v22 < 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v15 = (uint64_t)v17;
  if (!(v23 >> 62))
  {
    if (v22 < *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_38;
    }
    goto LABEL_52;
  }
LABEL_51:
  swift_bridgeObjectRetain();
  uint64_t v41 = sub_1D17BEAD0();
  swift_bridgeObjectRelease();
  if (v22 >= v41)
  {
LABEL_52:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = v15;
    goto LABEL_12;
  }
LABEL_38:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
  uint64_t result = swift_allocObject();
  uint64_t v38 = result;
  *(_OWORD *)(result + 16) = xmmword_1D17C9600;
  if ((v27 & 0xC000000000000001) != 0)
  {
    id v39 = (id)MEMORY[0x1D25F9260](v22, v27);
    goto LABEL_41;
  }
  if ((unint64_t)v22 < *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v39 = *(id *)(v27 + 8 * v22 + 32);
LABEL_41:
    id v40 = v39;
    swift_bridgeObjectRelease();
    *(void *)(v38 + 32) = v40;
    sub_1D17BE150();
    uint64_t v25 = v38;
    swift_release();
    swift_bridgeObjectRelease();
    sub_1D165B3A4(v15);
    return v25;
  }
  __break(1u);
  return result;
}

uint64_t MAFeatureDefinition.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MAFeatureDefinition.__deallocating_deinit()
{
  MAFeatureDefinition.deinit();
  return MEMORY[0x1F4186488](v0, 88, 7);
}

uint64_t sub_1D167B150@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void, void, void, void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = a3(*a1, a1[1], *a2, a2[1]);
  *a4 = result;
  return result;
}

void (*sub_1D167B194(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *)
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1D167B2B0(v6, a2, a3);
  return sub_1D167B1FC;
}

void (*sub_1D167B200(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(void *)
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1D167B338(v6, a2, a3);
  return sub_1D167B1FC;
}

void sub_1D167B268(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1D167B2B0(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x1D25F9260](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_1D167B330;
  }
  __break(1u);
  return result;
}

void sub_1D167B330(id *a1)
{
}

uint64_t (*sub_1D167B338(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x1D25F9260](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return sub_1D167B3B8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D167B3B8()
{
  return swift_release();
}

uint64_t sub_1D167B3C0(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  sub_1D1668090();
  sub_1D1674A20();
  uint64_t result = sub_1D17BE360();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1D17BEAD0();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v6 = (void *)MEMORY[0x1D25F9260](i, a1);
        sub_1D1671FA0(&v9, v6);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        unint64_t v8 = *v7++;
        sub_1D1671FA0(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D167B504(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(unsigned char *)(v3 + 72) = 1;
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  id v5 = a1;
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1D165C5CC(MEMORY[0x1E4FBC860]);
  uint64_t v7 = *(void *)(a3 + 16);
  if (!v7)
  {
    swift_bridgeObjectRetain();

    swift_release();
    unint64_t v27 = (void *)v6;
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v33 = MEMORY[0x1E4FBC868];
    *(void *)(v3 + 40) = v27;
    *(void *)(v3 + 48) = v33;
    return v3;
  }
  uint64_t v35 = v5;
  uint64_t v36 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v8 = (void *)(a3 + 72);
  while (1)
  {
    uint64_t v38 = v7;
    uint64_t v11 = *(v8 - 5);
    long long v42 = *((_OWORD *)v8 - 2);
    char v41 = *((unsigned char *)v8 - 16);
    uint64_t v12 = *(v8 - 1);
    uint64_t v13 = *v8;
    if (v12)
    {
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v12;
      *(void *)(v14 + 24) = v13;
      uint64_t v15 = sub_1D167BA68;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v14 = 0;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1D1660A34(v12);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1D1660A34(v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1D1660A34((uint64_t)v15);
    sub_1D165B3A4((uint64_t)v15);
    swift_release();
    uint64_t v37 = v12;
    if (v12)
    {
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = v14;
      id v39 = sub_1D167C274;
      uint64_t v40 = v16;
    }
    else
    {
      id v39 = 0;
      uint64_t v40 = 0;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = v11;
    unint64_t v20 = sub_1D165A868(v11, v42);
    uint64_t v21 = *(void *)(v6 + 16);
    BOOL v22 = (v19 & 1) == 0;
    uint64_t v23 = v21 + v22;
    if (__OFADD__(v21, v22)) {
      break;
    }
    char v24 = v19;
    if (*(void *)(v6 + 24) >= v23)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        unint64_t v27 = (void *)v6;
        if (v19) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_1D16A6FA4();
        unint64_t v27 = (void *)v6;
        if (v24) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_1D16A3224(v23, isUniquelyReferenced_nonNull_native);
      unint64_t v25 = sub_1D165A868(v18, v42);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_27;
      }
      unint64_t v20 = v25;
      unint64_t v27 = (void *)v6;
      if (v24)
      {
LABEL_3:
        uint64_t v9 = v27[7] + 48 * v20;
        uint64_t v10 = *(void *)(v9 + 32);
        swift_release();
        swift_bridgeObjectRelease();
        sub_1D165B3A4(v10);
        *(void *)uint64_t v9 = v18;
        *(_OWORD *)(v9 + 8) = v42;
        *(unsigned char *)(v9 + 24) = v41;
        *(void *)(v9 + 32) = v39;
        *(void *)(v9 + 40) = v40;
        goto LABEL_4;
      }
    }
    v27[(v20 >> 6) + 8] |= 1 << v20;
    uint64_t v28 = (uint64_t *)(v27[6] + 16 * v20);
    *uint64_t v28 = v18;
    v28[1] = v42;
    uint64_t v29 = v27[7] + 48 * v20;
    *(void *)uint64_t v29 = v18;
    *(_OWORD *)(v29 + 8) = v42;
    *(unsigned char *)(v29 + 24) = v41;
    *(void *)(v29 + 32) = v39;
    *(void *)(v29 + 40) = v40;
    uint64_t v30 = v27[2];
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_26;
    }
    v27[2] = v32;
    swift_bridgeObjectRetain();
LABEL_4:
    v8 += 6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1D165B3A4(v37);
    swift_bridgeObjectRelease();
    unint64_t v6 = (unint64_t)v27;
    uint64_t v7 = v38 - 1;
    if (v38 == 1)
    {

      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v3 = v36;
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

uint64_t sub_1D167B8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1D1660A34(a5);
  sub_1D165B3A4(a5);
  swift_release();
  if (*(void *)(a7 + 16) && (unint64_t v11 = sub_1D165A868(a1, a2), (v12 & 1) != 0))
  {
    uint64_t v13 = *(void *)(*(void *)(a7 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v13 = 0;
  }
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1D167B9A8()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D167B9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v5)(uint64_t *__return_ptr, void *, void *);
  uint64_t v7;
  void v8[2];
  void v9[2];

  id v5 = *(void (**)(uint64_t *__return_ptr, void *, void *))(v4 + 16);
  v9[0] = a1;
  v9[1] = a2;
  v8[0] = a3;
  v8[1] = a4;
  v5(&v7, v9, v8);
  return v7;
}

uint64_t sub_1D167BA28@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void))(v3 + 16))(*a1, a1[1], *a2, a2[1]);
  *a3 = result;
  return result;
}

unint64_t sub_1D167BA70()
{
  unint64_t result = qword_1EA651AA0;
  if (!qword_1EA651AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651AA0);
  }
  return result;
}

id sub_1D167BAC4@<X0>(void *a1@<X8>)
{
  id result = sub_1D16784C4();
  *a1 = result;
  return result;
}

void *sub_1D167BAF0(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)(v2 + 64) = *result;
  *(unsigned char *)(v2 + 72) = 0;
  return result;
}

uint64_t sub_1D167BB04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D16787A4();
  *a1 = result;
  return result;
}

uint64_t sub_1D167BB30(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 80) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for MAFeatureDefinitionType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MAFeatureDefinitionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D167BCD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1D167BCF8(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MAFeatureDefinitionType()
{
  return &type metadata for MAFeatureDefinitionType;
}

uint64_t dispatch thunk of MAFeatureDefinitionExtraction.featureExtraction(definition:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t))(a9 + 8))(a1);
}

uint64_t method lookup function for MAFeatureDefinition(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MAFeatureDefinition);
}

uint64_t dispatch thunk of MAFeatureDefinition.target(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MAFeatureDefinition.space.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of MAFeatureDefinition.space.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of MAFeatureDefinition.space.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of MAFeatureDefinition.keys.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of MAFeatureDefinition.keys.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of MAFeatureDefinition.keys.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of MAFeatureDefinition.extract<A>(items:progress:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of MAFeatureDefinition.stringValues(from:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of MAFeatureDefinition.nodes(from:forKey:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t sub_1D167BF18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_1D17BE360();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      sub_1D165C164(v4, (uint64_t)v5);
      sub_1D1672220((uint64_t)v6, (uint64_t)v5);
      sub_1D165C1C0((uint64_t)v6);
      v4 += 40;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1D167BFA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_1D17BE360();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      sub_1D16725E8(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1D167C018(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_1D17BE360();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1D16726E4(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1D167C0B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1D167C158();
  uint64_t result = sub_1D17BE360();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D167239C(&v7, v5, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_1D167C158()
{
  unint64_t result = qword_1EA651AA8;
  if (!qword_1EA651AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651AA8);
  }
  return result;
}

uint64_t sub_1D167C1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD272F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1D167C214()
{
  unint64_t result = qword_1EA651AB0;
  if (!qword_1EA651AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651AB0);
  }
  return result;
}

uint64_t sub_1D167C268(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D167C274@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1D167C2A8(uint64_t a1)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  uint64_t v5 = a1;
  v2(&v4, &v5);
  return v4;
}

KnowledgeGraphKit::BernoulliSampledIndexSequence __swiftcall BernoulliSampledIndexSequence.init(p:max:)(Swift::Double p, Swift::Int max)
{
  BOOL v5 = p <= 0.0;
  double v4 = 1.0;
  BOOL v5 = v5 || p > 1.0;
  if (v5 || max < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = v2;
    double v4 = 0.0;
    if (p != 1.0) {
      double v4 = 1.0 / log(1.0 - p);
    }
    *(void *)uint64_t v7 = -1;
    *(Swift::Double *)(v7 + 8) = p;
    *(void *)(v7 + 16) = max;
    *(double *)(v7 + 24) = v4;
  }
  result.cachedDenominator = v9;
  result.p = v4;
  result.max = v8;
  result.currentElement = max;
  return result;
}

Swift::Int_optional __swiftcall BernoulliSampledIndexSequence.next()()
{
  if (*((double *)v1 + 1) != 1.0)
  {
LABEL_5:
    sub_1D167C4C8(v0, 0.0, 1.0);
    double v6 = ceil(*((double *)v1 + 3) * log(1.0 - v3));
    if ((~*(void *)&v6 & 0x7FF0000000000000) != 0)
    {
      if (v6 > -9.22337204e18)
      {
        if (v6 < 9.22337204e18)
        {
          uint64_t v2 = *v1 + (uint64_t)v6;
          if (!__OFADD__(*v1, (uint64_t)v6)) {
            goto LABEL_9;
          }
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v2 = *v1 + 1;
  if (__OFADD__(*v1, 1))
  {
    __break(1u);
    goto LABEL_5;
  }
LABEL_9:
  *uint64_t v1 = v2;
  uint64_t v7 = v1[2];
  Swift::Bool v5 = v7 < v2;
  if (v7 >= v2) {
    Swift::Int v4 = v2;
  }
  else {
    Swift::Int v4 = 0;
  }
LABEL_16:
  result.value = v4;
  result.is_nil = v5;
  return result;
}

double sub_1D167C44C@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(double *)(a1 + 8) = result;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  return result;
}

void sub_1D167C470()
{
  sub_1D1694858(*(void *)v0, *(void *)(v0 + 16), *(double *)(v0 + 8), *(double *)(v0 + 24));
}

void sub_1D167C484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1D16F73A0(a1, a2, a3, *(void *)v3, *(void *)(v3 + 16), *(double *)(v3 + 8), *(double *)(v3 + 24));
}

Swift::Int sub_1D167C498@<X0>(uint64_t a1@<X8>)
{
  Swift::Int_optional v3 = BernoulliSampledIndexSequence.next()();
  *(void *)a1 = v3.value;
  *(unsigned char *)(a1 + 8) = v3.is_nil;
  return v3.value;
}

uint64_t sub_1D167C4C8(uint64_t result, double a2, double a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  double v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = 0;
  double result = MEMORY[0x1D25FAD90](&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3) {
    return sub_1D167C4C8(v6, a2, a3);
  }
  return result;
}

unint64_t sub_1D167C578()
{
  unint64_t result = qword_1EA651AC0;
  if (!qword_1EA651AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651AC0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for BernoulliSampledIndexSequence(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTagSinglePayload for BernoulliSampledIndexSequence(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BernoulliSampledIndexSequence(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BernoulliSampledIndexSequence()
{
  return &type metadata for BernoulliSampledIndexSequence;
}

uint64_t sub_1D167C65C@<X0>(uint64_t a1@<X8>)
{
  return sub_1D1668120(v1, a1);
}

_OWORD *BinaryPredicate.init(comparator:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  id v7 = objc_msgSend(objc_allocWithZone((Class)KGBinaryPredicate), sel_initWithComparator_value_, a1, sub_1D17BEBB0());
  swift_unknownObjectRelease();
  unint64_t v10 = sub_1D167C73C();
  *(void *)&long long v9 = v7;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  return sub_1D16607C4(&v9, a4);
}

unint64_t sub_1D167C73C()
{
  unint64_t result = qword_1EA651AC8[0];
  if (!qword_1EA651AC8[0])
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, qword_1EA651AC8);
  }
  return result;
}

_OWORD *< infix<A>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1D167C814(a1, a2, a3, a4, a5, a6, 3);
}

uint64_t sub_1D167C788(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *<= infix<A>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1D167C814(a1, a2, a3, a4, a5, a6, 4);
}

_OWORD *== infix<A>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1D167C814(a1, a2, a3, a4, a5, a6, 1);
}

_OWORD *!= infix<A>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1D167C814(a1, a2, a3, a4, a5, a6, 2);
}

_OWORD *> infix<A>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1D167C814(a1, a2, a3, a4, a5, a6, 5);
}

_OWORD *>= infix<A>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1D167C814(a1, a2, a3, a4, a5, a6, 6);
}

_OWORD *sub_1D167C814(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1, a1);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D167C788(v15, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, a5);
  return BinaryPredicate.init(comparator:value:)(a7, (uint64_t)v13, a5, a2);
}

_OWORD *< infix<A, B>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1D167C92C(a1, a2, a3, a4, a5, a6, a7, 3);
}

_OWORD *<= infix<A, B>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1D167C92C(a1, a2, a3, a4, a5, a6, a7, 4);
}

_OWORD *== infix<A, B>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1D167C92C(a1, a2, a3, a4, a5, a6, a7, 1);
}

_OWORD *!= infix<A, B>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1D167C92C(a1, a2, a3, a4, a5, a6, a7, 2);
}

_OWORD *> infix<A, B>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1D167C92C(a1, a2, a3, a4, a5, a6, a7, 5);
}

_OWORD *>= infix<A, B>(_:_:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1D167C92C(a1, a2, a3, a4, a5, a6, a7, 6);
}

_OWORD *sub_1D167C92C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (void *)MEMORY[0x1F4188790](a1, a2);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v14[1];
  *uint64_t v11 = *v14;
  v11[1] = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v17, v18);
  swift_bridgeObjectRetain();
  return BinaryPredicate.init(comparator:value:)(a8, (uint64_t)v13, a6, a2);
}

uint64_t sub_1D167CA18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *sub_1D167CA6C(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

_OWORD *sub_1D167CA94(_OWORD *a1, _OWORD *a2)
{
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

uint64_t sub_1D167CAC8(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1D167CB10(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for BinaryPredicate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t UniqueSortedBuffer.elements.getter()
{
  return *(void *)v0;
}

uint64_t UniqueSortedBuffer.count.getter()
{
  return sub_1D17BE450();
}

uint64_t static UniqueSortedBuffer.SearchResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2) {
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t UniqueSortedBuffer.binarySearchSeek(_:startOffset:endOffset:)(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = MEMORY[0x1F4188790](a1, a2);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v10;
  if (__OFSUB__(*v11, *v10))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v15 = *v11 - *v10 + ((uint64_t)(*v11 - *v10) < 0);
  uint64_t v16 = v14 + (*v11 - *v10) / 2;
  if (__OFADD__(v14, (*v11 - *v10) / 2))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  long long v17 = v4[1];
  long long v21 = *v4;
  long long v22 = v17;
  v20[1] = v14 + (v15 >> 1);
  sub_1D17BDFD0();
  swift_getWitnessTable();
  sub_1D17BECE0();
  sub_1D17BECF0();
  char v18 = sub_1D17BDFA0();
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    *a2 = v16;
    return v18 & 1;
  }
  char v19 = sub_1D17BDF40();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  if (v19)
  {
    *a3 = v16;
    return v18 & 1;
  }
  if (!__OFADD__(v16, 1))
  {
    *a2 = v16 + 1;
    return v18 & 1;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t UniqueSortedBuffer.linearSearch(_:startOffset:endOffset:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = MEMORY[0x1F4188790](a1, a2);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v13;
  if (*v13 < *v12)
  {
    long long v15 = *v4;
    long long v18 = v4[1];
    long long v19 = v15;
    sub_1D17BDFD0();
    uint64_t v16 = (uint64_t (**)(char *, uint64_t))(v8 + 8);
    while (1)
    {
      long long v21 = v19;
      long long v22 = v18;
      uint64_t v20 = v14;
      swift_getWitnessTable();
      sub_1D17BECE0();
      sub_1D17BECF0();
      if ((sub_1D17BDF30() & 1) == 0) {
        break;
      }
      uint64_t result = (*v16)(v11, v7);
      uint64_t v14 = *a2 + 1;
      if (__OFADD__(*a2, 1))
      {
        __break(1u);
        return result;
      }
      *a2 = v14;
      if (v14 >= *a3) {
        return result;
      }
    }
    char v17 = sub_1D17BDF40();
    uint64_t result = (*v16)(v11, v7);
    if (v17) {
      *a3 = *a2;
    }
  }
  return result;
}

uint64_t UniqueSortedBuffer.binarySearch(_:startOffset:endOffset:)(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (__OFSUB__(*a3, *a2))
  {
LABEL_9:
    __break(1u);
  }
  else
  {
    uint64_t v7 = result;
    if (*a3 - *a2 < 129)
    {
      return UniqueSortedBuffer.linearSearch(_:startOffset:endOffset:)(v7, a2, a3, a4);
    }
    else
    {
      while (1)
      {
        uint64_t result = UniqueSortedBuffer.binarySearchSeek(_:startOffset:endOffset:)(v7, a2, a3, a4);
        if (result) {
          break;
        }
        if (__OFSUB__(*a3, *a2))
        {
          __break(1u);
          goto LABEL_9;
        }
        if (*a3 - *a2 <= 128) {
          return UniqueSortedBuffer.linearSearch(_:startOffset:endOffset:)(v7, a2, a3, a4);
        }
      }
    }
  }
  return result;
}

uint64_t UniqueSortedBuffer.find(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *v3;
  uint64_t v8 = v3[1];
  uint64_t v9 = v3[2];
  uint64_t v10 = v3[3];
  sub_1D17BDFD0();
  swift_getWitnessTable();
  uint64_t v11 = sub_1D17BECE0();
  sub_1D17BECB0();
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  uint64_t v17 = v9;
  uint64_t v18 = v10;
  MEMORY[0x1D25F9670](&v14, v11);
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  uint64_t v17 = v9;
  uint64_t v18 = v10;
  uint64_t result = UniqueSortedBuffer.binarySearch(_:startOffset:endOffset:)(a1, &v19, &v14, a2);
  BOOL v13 = v19 != v14;
  *(void *)a3 = v19;
  *(unsigned char *)(a3 + 8) = v13;
  return result;
}

uint64_t UniqueSortedBuffer.contains(_:)(uint64_t a1, uint64_t a2)
{
  UniqueSortedBuffer.find(_:)(a1, a2, (uint64_t)v3);
  return v3[8];
}

uint64_t type metadata accessor for UniqueSortedBuffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D167D228(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1D167D27C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t type metadata accessor for UniqueSortedBuffer.SearchResult()
{
  return __swift_instantiateGenericMetadata();
}

void sub_1D167D2D8(uint64_t a1, unint64_t a2)
{
}

void sub_1D167D2EC(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v6 = (id)MEMORY[0x1D25F9260](0, a2);
      }
      else
      {
        if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v6 = *(id *)(a2 + 32);
      }
      uint64_t v7 = v6;
      sub_1D165C128(0, a3);
      char v8 = sub_1D17BE5C0();

      if ((v8 & 1) == 0)
      {
        for (uint64_t i = 0; ; ++i)
        {
          a3 = (unint64_t *)(i + 1);
          if (__OFADD__(i, 1)) {
            break;
          }
          if (a3 == (unint64_t *)v5) {
            return;
          }
          if ((a2 & 0xC000000000000001) != 0)
          {
            id v10 = (id)MEMORY[0x1D25F9260](i + 1, a2);
          }
          else
          {
            if (((unint64_t)a3 & 0x8000000000000000) != 0) {
              goto LABEL_18;
            }
            if ((unint64_t)a3 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_19;
            }
            id v10 = *(id *)(a2 + 32 + 8 * (void)a3);
          }
          uint64_t v11 = v10;
          char v12 = sub_1D17BE5C0();

          if (v12) {
            return;
          }
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        uint64_t v5 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
        if (v5) {
          continue;
        }
      }
      return;
    }
  }
}

BOOL static MATensorMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MATensorMode.hash(into:)()
{
  return sub_1D17BED30();
}

uint64_t MATensorMode.hashValue.getter()
{
  return sub_1D17BED80();
}

uint64_t MAGraph.adjencyTensor(directed:weighted:)(char a1, char a2)
{
  unsigned int v3 = v2;
  uint64_t v109 = MEMORY[0x1E4FBC860];
  unint64_t v110 = MEMORY[0x1E4FBC860];
  uint64_t v108 = MEMORY[0x1E4FBC860];
  id v4 = objc_msgSend(v2, sel_allNodes);
  sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
  sub_1D1680D38((unint64_t *)&qword_1EA651A78, (unint64_t *)&qword_1EA652D30);
  uint64_t v5 = sub_1D17BE350();

  sub_1D16634F8(v5);
  unint64_t v6 = v110;
  if (v110 >> 62) {
    goto LABEL_22;
  }
  uint64_t v7 = *(void *)((v110 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v7)
  {
    id v105 = v3;
    uint64_t v8 = 0;
    uint64_t v9 = (void *)MEMORY[0x1E4FBC868];
    while (1)
    {
      unsigned int v3 = (void *)(v8 + 1);
      if (__OFADD__(v8, 1)) {
        break;
      }
      id v10 = *(id *)(v110 + 8 * v8 + 32);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      char v111 = v9;
      unint64_t v13 = sub_1D165A9D0((uint64_t)v10);
      uint64_t v14 = v9[2];
      BOOL v15 = (v12 & 1) == 0;
      uint64_t v16 = v14 + v15;
      if (__OFADD__(v14, v15)) {
        goto LABEL_20;
      }
      char v17 = v12;
      if (v9[3] >= v16)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if (v12) {
            goto LABEL_4;
          }
        }
        else
        {
          sub_1D16A6F98();
          if (v17) {
            goto LABEL_4;
          }
        }
      }
      else
      {
        sub_1D16A3218(v16, isUniquelyReferenced_nonNull_native);
        unint64_t v18 = sub_1D165A9D0((uint64_t)v10);
        if ((v17 & 1) != (v19 & 1)) {
          goto LABEL_122;
        }
        unint64_t v13 = v18;
        if (v17)
        {
LABEL_4:
          *(void *)(v9[7] + 8 * v13) = v8;
          goto LABEL_5;
        }
      }
      v9[(v13 >> 6) + 8] |= 1 << v13;
      uint64_t v20 = 8 * v13;
      *(void *)(v9[6] + v20) = v10;
      *(void *)(v9[7] + v20) = v8;
      uint64_t v21 = v9[2];
      BOOL v22 = __OFADD__(v21, 1);
      uint64_t v23 = v21 + 1;
      if (v22) {
        goto LABEL_21;
      }
      v9[2] = v23;
      id v24 = v10;
LABEL_5:

      swift_bridgeObjectRelease();
      ++v8;
      if (v3 == (void *)v7)
      {
        swift_bridgeObjectRelease();
        unsigned int v3 = v105;
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain_n();
    uint64_t v7 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)MEMORY[0x1E4FBC868];
LABEL_24:
  id v25 = objc_msgSend(v3, sel_abstractEdges);
  uint64_t v26 = sub_1D165C128(0, (unint64_t *)&qword_1EA6514F0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651C50);
  sub_1D1680D38(&qword_1EA651C58, (unint64_t *)&qword_1EA6514F0);
  uint64_t v27 = sub_1D17BDE50();

  uint64_t v28 = 0;
  int64_t v29 = 0;
  uint64_t v30 = *(void *)(v27 + 64);
  uint64_t v92 = v27 + 64;
  uint64_t v31 = 1 << *(unsigned char *)(v27 + 32);
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  else {
    uint64_t v32 = -1;
  }
  unint64_t v33 = v32 & v30;
  int64_t v93 = (unint64_t)(v31 + 63) >> 6;
  uint64_t v94 = v27;
  unint64_t v34 = (void *)MEMORY[0x1E4FBC868];
  if ((v32 & v30) == 0) {
    goto LABEL_29;
  }
  while (2)
  {
    unint64_t v35 = __clz(__rbit64(v33));
    uint64_t v36 = (v33 - 1) & v33;
    unint64_t v37 = v35 | (v29 << 6);
LABEL_43:
    uint64_t v41 = 8 * v37;
    long long v42 = *(void **)(*(void *)(v94 + 48) + v41);
    unint64_t v43 = *(void *)(*(void *)(v94 + 56) + v41);
    id v100 = v42;
    if (v6 >> 62)
    {
      id v86 = v42;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_1D17BEAD0();
      uint64_t v44 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v44 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v45 = v42;
      swift_bridgeObjectRetain();
      uint64_t v46 = v44;
    }
    uint64_t v47 = &selRef_initWithNeighborRelation_;
    if ((unsigned __int128)(v46 * (__int128)v44) >> 64 != (v46 * v44) >> 63)
    {
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
      goto LABEL_113;
    }
    uint64_t v96 = v46;
    uint64_t v101 = v44;
    uint64_t v98 = v28;
    unint64_t v99 = v34;
    id v102 = (void *)sub_1D1665914(v46 * v44, 0.0);
    int64_t v95 = v29;
    if ((v43 & 0xC000000000000001) != 0)
    {
      sub_1D17BE710();
      sub_1D17BE390();
      unint64_t v43 = (unint64_t)v111;
      uint64_t v106 = v112;
      uint64_t v48 = v113;
      uint64_t v49 = v114;
      unint64_t v50 = v115;
    }
    else
    {
      uint64_t v49 = 0;
      uint64_t v51 = -1 << *(unsigned char *)(v43 + 32);
      uint64_t v106 = (void *)(v43 + 56);
      uint64_t v48 = ~v51;
      uint64_t v52 = -v51;
      if (v52 < 64) {
        uint64_t v53 = ~(-1 << v52);
      }
      else {
        uint64_t v53 = -1;
      }
      unint64_t v50 = v53 & *(void *)(v43 + 56);
    }
    unint64_t v97 = v36;
    int64_t v104 = (unint64_t)(v48 + 64) >> 6;
    char v103 = (void *)v43;
    while (1)
    {
      uint64_t v60 = v49;
      if ((v43 & 0x8000000000000000) == 0) {
        break;
      }
      if (!sub_1D17BE7A0()) {
        goto LABEL_100;
      }
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v63 = v107;
      swift_unknownObjectRelease();
      if (!v107) {
        goto LABEL_100;
      }
LABEL_78:
      id v59 = [v63 v47[382]];
      id v58 = objc_msgSend(v63, sel_targetNode);
      if (!v9[2]) {
        goto LABEL_56;
      }
      id v59 = v59;
      unint64_t v67 = sub_1D165A9D0((uint64_t)v59);
      if ((v68 & 1) == 0) {
        goto LABEL_55;
      }
      uint64_t v69 = *(void *)(v9[7] + 8 * v67);

      if (v9[2])
      {
        uint64_t v54 = v26;
        id v55 = v58;
        unint64_t v56 = sub_1D165A9D0((uint64_t)v55);
        if ((v57 & 1) == 0)
        {
          id v58 = v59;
          id v59 = v55;
          uint64_t v26 = v54;
          uint64_t v47 = &selRef_initWithNeighborRelation_;
          unint64_t v43 = (unint64_t)v103;
LABEL_55:

          id v58 = v59;
          goto LABEL_56;
        }
        uint64_t v70 = *(void *)(v9[7] + 8 * v56);

        double v71 = 1.0;
        if (a2)
        {
          objc_msgSend(v63, sel_weight);
          double v71 = v72;
        }
        unint64_t v73 = v102;
        uint64_t v74 = v69 * v101;
        if ((unsigned __int128)(v69 * (__int128)v101) >> 64 != (v69 * v101) >> 63) {
          goto LABEL_114;
        }
        uint64_t v90 = v70;
        BOOL v22 = __OFADD__(v74, v70);
        unint64_t v75 = v74 + v70;
        if (v22) {
          goto LABEL_115;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if ((v75 & 0x8000000000000000) != 0) {
            goto LABEL_116;
          }
        }
        else
        {
          unint64_t v73 = sub_1D1667604(v102);
          if ((v75 & 0x8000000000000000) != 0) {
            goto LABEL_116;
          }
        }
        if (v75 >= v73[2]) {
          goto LABEL_117;
        }
        id v102 = v73;
        char v76 = v73 + 4;
        *(double *)&v76[v75] = v71;
        if ((a1 & 1) == 0)
        {
          double v77 = 1.0;
          if (a2)
          {
            objc_msgSend(v63, sel_weight, 1.0);
            double v77 = v78;
          }
          uint64_t v79 = v90 * v101;
          if ((unsigned __int128)(v90 * (__int128)v101) >> 64 != (v90 * v101) >> 63) {
            goto LABEL_118;
          }
          BOOL v22 = __OFADD__(v79, v69);
          unint64_t v80 = v79 + v69;
          if (v22) {
            goto LABEL_119;
          }
          if ((v80 & 0x8000000000000000) != 0) {
            goto LABEL_120;
          }
          if (v80 >= v102[2]) {
            goto LABEL_121;
          }
          *(double *)&v76[v80] = v77;
        }

        uint64_t v26 = v54;
        uint64_t v47 = &selRef_initWithNeighborRelation_;
        unint64_t v43 = (unint64_t)v103;
      }
      else
      {
        unint64_t v43 = (unint64_t)v103;
LABEL_56:
      }
    }
    if (v50)
    {
      unint64_t v61 = __clz(__rbit64(v50));
      v50 &= v50 - 1;
      unint64_t v62 = v61 | (v49 << 6);
      goto LABEL_77;
    }
    int64_t v64 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
      __break(1u);
      goto LABEL_110;
    }
    if (v64 >= v104) {
      goto LABEL_100;
    }
    unint64_t v65 = v106[v64];
    ++v49;
    if (v65) {
      goto LABEL_76;
    }
    uint64_t v49 = v60 + 2;
    if (v60 + 2 >= v104) {
      goto LABEL_100;
    }
    unint64_t v65 = v106[v49];
    if (v65) {
      goto LABEL_76;
    }
    uint64_t v49 = v60 + 3;
    if (v60 + 3 >= v104) {
      goto LABEL_100;
    }
    unint64_t v65 = v106[v49];
    if (v65) {
      goto LABEL_76;
    }
    uint64_t v49 = v60 + 4;
    if (v60 + 4 >= v104) {
      goto LABEL_100;
    }
    unint64_t v65 = v106[v49];
    if (v65)
    {
LABEL_76:
      unint64_t v50 = (v65 - 1) & v65;
      unint64_t v62 = __clz(__rbit64(v65)) + (v49 << 6);
LABEL_77:
      id v63 = *(id *)(*(void *)(v43 + 48) + 8 * v62);
      if (!v63) {
        goto LABEL_100;
      }
      goto LABEL_78;
    }
    uint64_t v66 = v60 + 5;
    while (v104 != v66)
    {
      unint64_t v65 = v106[v66++];
      if (v65)
      {
        uint64_t v49 = v66 - 1;
        goto LABEL_76;
      }
    }
LABEL_100:
    sub_1D1668088();
    unint64_t v6 = v110;
    type metadata accessor for MASquareMatrixRepresentation();
    uint64_t v81 = (void *)swift_allocObject();
    int v81[2] = v96;
    v81[3] = v101;
    v81[4] = v102;
    v81[5] = v110;
    swift_bridgeObjectRetain();
    uint64_t v82 = swift_retain();
    MEMORY[0x1D25F8AB0](v82);
    if (*(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1D17BE170();
    }
    sub_1D17BE1F0();
    sub_1D17BE150();
    id v83 = v100;
    MEMORY[0x1D25F8AB0]();
    unint64_t v33 = v97;
    if (*(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1D17BE170();
    }
    sub_1D17BE1F0();
    sub_1D17BE150();
    id v84 = v83;
    char v85 = swift_isUniquelyReferenced_nonNull_native();
    id v107 = v99;
    sub_1D165F16C(v98, v84, v85);
    unint64_t v34 = v99;
    swift_release();

    swift_bridgeObjectRelease();
    uint64_t v28 = v98 + 1;
    if (__OFADD__(v98, 1)) {
      goto LABEL_111;
    }
    int64_t v29 = v95;
    if (v97) {
      continue;
    }
    break;
  }
LABEL_29:
  int64_t v38 = v29 + 1;
  if (__OFADD__(v29, 1)) {
    goto LABEL_112;
  }
  if (v38 >= v93) {
    goto LABEL_108;
  }
  unint64_t v39 = *(void *)(v92 + 8 * v38);
  ++v29;
  if (v39) {
    goto LABEL_42;
  }
  int64_t v29 = v38 + 1;
  if (v38 + 1 >= v93) {
    goto LABEL_108;
  }
  unint64_t v39 = *(void *)(v92 + 8 * v29);
  if (v39) {
    goto LABEL_42;
  }
  int64_t v29 = v38 + 2;
  if (v38 + 2 >= v93) {
    goto LABEL_108;
  }
  unint64_t v39 = *(void *)(v92 + 8 * v29);
  if (v39) {
    goto LABEL_42;
  }
  int64_t v40 = v38 + 3;
  if (v40 >= v93)
  {
LABEL_108:
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for MATensor();
    unint64_t v87 = (void *)swift_allocObject();
    v87[2] = v108;
    v87[3] = v6;
    v87[4] = v109;
    swift_bridgeObjectRelease();
    return (uint64_t)v87;
  }
  unint64_t v39 = *(void *)(v92 + 8 * v40);
  if (v39)
  {
    int64_t v29 = v40;
LABEL_42:
    uint64_t v36 = (v39 - 1) & v39;
    unint64_t v37 = __clz(__rbit64(v39)) + (v29 << 6);
    goto LABEL_43;
  }
  while (1)
  {
    int64_t v29 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v29 >= v93) {
      goto LABEL_108;
    }
    unint64_t v39 = *(void *)(v92 + 8 * v29);
    ++v40;
    if (v39) {
      goto LABEL_42;
    }
  }
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

uint64_t sub_1D167DF4C(char a1, char a2)
{
  return MAGraph.adjencyTensor(directed:weighted:)(a1, a2);
}

uint64_t MATensor.distributions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MATensor.entities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MATensor.relations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D167DF88()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (*(void *)(v0 + 32) >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t sub_1D167E034(uint64_t result, int64_t a2, uint64_t a3)
{
  unint64_t v6 = (void *)result;
  unint64_t v7 = v3[3];
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1D17BEAD0();
    uint64_t result = swift_bridgeObjectRelease();
    if (v11 <= (uint64_t)v6) {
      goto LABEL_26;
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if (v12 > a2) {
      goto LABEL_4;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v8 <= result) {
    goto LABEL_26;
  }
  if (v8 <= a2) {
    goto LABEL_17;
  }
LABEL_4:
  unint64_t v7 = v3[4];
  if (!(v7 >> 62))
  {
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) > a3) {
      goto LABEL_6;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_18:
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1D17BEAD0();
  swift_bridgeObjectRelease();
  if (v13 <= a3) {
    goto LABEL_19;
  }
LABEL_6:
  uint64_t v9 = v3[2];
  if ((v9 & 0xC000000000000001) == 0)
  {
    if (a3 < 0)
    {
      __break(1u);
    }
    else if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a3)
    {
      swift_retain();
      goto LABEL_10;
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_20:
  MEMORY[0x1D25F9260](a3);
LABEL_10:
  unint64_t v6 = (void *)sub_1D168B2BC((unint64_t)v6, a2);
  unsigned int v3 = v10;
  uint64_t result = swift_release();
  if ((v7 & 0xC000000000000001) != 0)
  {
LABEL_23:
    uint64_t v14 = v3;
    id v15 = v6;
    MEMORY[0x1D25F9260](a3, v7);

    return (uint64_t)v6;
  }
  if (a3 < 0)
  {
    __break(1u);
  }
  else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a3)
  {
    *(id *)(v7 + 8 * a3 + 32);
    return (uint64_t)v6;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1D167E228@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v9 = *(void *)(v4 + 32);
  swift_bridgeObjectRetain();
  sub_1D167D2EC(a3, v9, (unint64_t *)&qword_1EA6514F0);
  unint64_t v11 = v10;
  char v13 = v12;
  uint64_t result = swift_bridgeObjectRelease();
  if (v13)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    BOOL v27 = 1;
LABEL_20:
    *(void *)a4 = v23;
    *(void *)(a4 + 8) = v24;
    *(void *)(a4 + 16) = v25;
    *(void *)(a4 + 24) = v26;
    *(unsigned char *)(a4 + 32) = v27;
    return result;
  }
  uint64_t v15 = *(void *)(v4 + 16);
  if ((v15 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1D25F9260](v11);
    goto LABEL_6;
  }
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v11 < *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_6:
    uint64_t v16 = sub_1D168B3C4(a1, a2);
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    char v22 = v21;
    uint64_t result = swift_release();
    if (v22) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = v16;
    }
    if (v22) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = v18;
    }
    if (v22) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v20;
    }
    if (v22) {
      unint64_t v26 = 0;
    }
    else {
      unint64_t v26 = v11;
    }
    BOOL v27 = (v22 & 1) != 0;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D167E354(uint64_t result)
{
  unint64_t v2 = result;
  unint64_t v3 = *(void *)(v1 + 32);
  if (!(v3 >> 62))
  {
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result) {
      goto LABEL_3;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1D17BEAD0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v7 <= (uint64_t)v2) {
    goto LABEL_12;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v1 + 16);
  if ((v4 & 0xC000000000000001) == 0)
  {
    if ((v2 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) > v2)
    {
      uint64_t v5 = *(void *)(v4 + 8 * v2 + 32);
      uint64_t result = swift_retain();
      if ((v3 & 0xC000000000000001) == 0) {
        goto LABEL_7;
      }
LABEL_14:
      MEMORY[0x1D25F9260](v2, v3);
      return v5;
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_13:
  uint64_t result = MEMORY[0x1D25F9260](v2);
  uint64_t v5 = result;
  if ((v3 & 0xC000000000000001) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) > v2)
  {
    id v6 = *(id *)(v3 + 8 * v2 + 32);
    return v5;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1D167E460(uint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  sub_1D167D2EC(a1, v3, (unint64_t *)&qword_1EA6514F0);
  unint64_t v5 = v4;
  char v7 = v6;
  uint64_t result = swift_bridgeObjectRelease();
  if (v7) {
    return 0;
  }
  uint64_t v9 = *(void *)(v1 + 16);
  if ((v9 & 0xC000000000000001) != 0) {
    return MEMORY[0x1D25F9260](v5);
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v5 < *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return swift_retain();
  }
  __break(1u);
  return result;
}

uint64_t sub_1D167E514@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a2;
  if (!*a1)
  {
    unint64_t v8 = *(void *)(v3 + 24);
    unint64_t v4 = (void *)(v8 >> 62);
    if (!(v8 >> 62))
    {
      unint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((uint64_t)v9 <= a2)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
LABEL_10:
      unint64_t v12 = *(void *)(v3 + 32);
      uint64_t v13 = v12 >> 62;
      if (v12 >> 62) {
        goto LABEL_64;
      }
      uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v4) {
        goto LABEL_12;
      }
LABEL_65:
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
LABEL_66:
      if ((unsigned __int128)(v14 * (__int128)v15) >> 64 != (v14 * v15) >> 63) {
        goto LABEL_97;
      }
      uint64_t v38 = v6;
      uint64_t result = sub_1D1665914(v14 * v15, 0.0);
      uint64_t v6 = result;
      if (v13)
      {
        swift_bridgeObjectRetain();
        uint64_t v25 = sub_1D17BEAD0();
        uint64_t result = swift_bridgeObjectRelease();
        if (v25 < 0)
        {
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
LABEL_104:
          swift_bridgeObjectRetain();
LABEL_105:
          uint64_t result = sub_1D17BEA30();
          __break(1u);
          return result;
        }
      }
      else
      {
        uint64_t v25 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      unint64_t v34 = (uint64_t *)a3;
      if (!v25)
      {
LABEL_89:
        *unint64_t v34 = v14;
        v34[1] = v15;
        _OWORD v34[2] = v6;
        return result;
      }
      uint64_t v26 = *(void *)(v3 + 16);
      if ((v26 & 0xC000000000000001) == 0
        && (unint64_t)(v25 - 1) >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_103;
      }
      a3 = 0;
      while (1)
      {
        if ((v26 & 0xC000000000000001) != 0)
        {
          unint64_t v27 = *(void *)(MEMORY[0x1D25F9260](a3, v26) + 24);
          swift_bridgeObjectRetain();
          swift_unknownObjectRelease();
          if ((v27 & 0x8000000000000000) != 0) {
            goto LABEL_105;
          }
        }
        else
        {
          unint64_t v27 = *(void *)(*(void *)(v26 + 8 * a3 + 32) + 24);
          swift_bridgeObjectRetain();
          if ((v27 & 0x8000000000000000) != 0) {
            goto LABEL_105;
          }
        }
        if (v27)
        {
          uint64_t v28 = sub_1D17BE1C0();
          *(void *)(v28 + 16) = v27;
          bzero((void *)(v28 + 32), 8 * v27);
          if (v27 >> 31) {
            break;
          }
        }
        if ((unsigned __int128)(v38 * (__int128)(uint64_t)v27) >> 64 != (uint64_t)(v38 * v27) >> 63) {
          goto LABEL_90;
        }
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        if (v27 != v15) {
          goto LABEL_91;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = (uint64_t)sub_1D1667604((void *)v6);
        }
        if (v15 < (uint64_t)0xFFFFFFFF80000000) {
          goto LABEL_92;
        }
        if (v15 > 0x7FFFFFFF) {
          goto LABEL_93;
        }
        if ((unsigned __int128)(a3 * (__int128)v15) >> 64 != (a3 * v15) >> 63) {
          goto LABEL_94;
        }
        ++a3;
        cblas_dcopy_NEWLAPACK();
        uint64_t result = swift_bridgeObjectRelease();
        if (v25 == a3) {
          goto LABEL_89;
        }
      }
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      int64_t v29 = (void *)MEMORY[0x1D25F9260](v6);
      uint64_t v30 = v29[2];
      uint64_t v31 = v29[3];
      uint64_t v32 = v29[4];
      swift_bridgeObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      *(void *)a3 = v30;
      *(void *)(a3 + 8) = v31;
      *(void *)(a3 + 16) = v32;
      return result;
    }
LABEL_23:
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if ((uint64_t)v9 <= v6) {
      goto LABEL_24;
    }
    goto LABEL_10;
  }
  if (*a1 != 1)
  {
    unint64_t v9 = *(void *)(v3 + 32);
    if (!(v9 >> 62))
    {
      unint64_t v8 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((uint64_t)v8 <= a2)
      {
LABEL_26:
        __break(1u);
LABEL_27:
        swift_bridgeObjectRetain();
        uint64_t v10 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
        if (!v4) {
          goto LABEL_7;
        }
        goto LABEL_28;
      }
      goto LABEL_15;
    }
LABEL_25:
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if ((uint64_t)v8 <= v6) {
      goto LABEL_26;
    }
LABEL_15:
    uint64_t v16 = *(void *)(v3 + 16);
    if ((v16 & 0xC000000000000001) == 0)
    {
      if ((v6 & 0x8000000000000000) == 0)
      {
        if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)v6)
        {
          uint64_t v17 = *(void *)(v16 + 8 * v6 + 32);
          uint64_t v18 = *(void *)(v17 + 32);
          *(_OWORD *)a3 = *(_OWORD *)(v17 + 16);
          *(void *)(a3 + 16) = v18;
          return swift_bridgeObjectRetain();
        }
        goto LABEL_101;
      }
      goto LABEL_98;
    }
    goto LABEL_95;
  }
  unint64_t v8 = *(void *)(v3 + 24);
  unint64_t v4 = (void *)(v8 >> 62);
  if (!(v8 >> 62))
  {
    if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1D17BEAD0();
  swift_bridgeObjectRelease();
  if (v20 <= v6)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_5:
  unint64_t v9 = *(void *)(v3 + 32);
  unint64_t v5 = v9 >> 62;
  if (v9 >> 62) {
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
  {
LABEL_7:
    uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_29;
  }
LABEL_28:
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1D17BEAD0();
  swift_bridgeObjectRelease();
LABEL_29:
  uint64_t v37 = v11;
  if ((unsigned __int128)(v10 * (__int128)v11) >> 64 != (v10 * v11) >> 63)
  {
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  uint64_t result = sub_1D1665914(v10 * v11, 0.0);
  unint64_t v4 = (void *)result;
  if (!v5)
  {
    uint64_t v6 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1D17BEAD0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 < 0) {
    goto LABEL_99;
  }
LABEL_33:
  unint64_t v33 = (uint64_t *)a3;
  if (v6)
  {
    uint64_t v21 = *(void *)(v3 + 16);
    unint64_t v36 = v21 & 0xC000000000000001;
    if ((v21 & 0xC000000000000001) != 0
      || (unint64_t)(v6 - 1) < *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      a3 = 0;
      uint64_t v3 = 32;
      uint64_t v35 = v21;
      while (1)
      {
        if (v36)
        {
          uint64_t v22 = MEMORY[0x1D25F9260](a3);
          unint64_t v23 = *(void *)(v22 + 16);
          uint64_t v13 = *(void *)(v22 + 24);
          swift_bridgeObjectRetain();
          swift_unknownObjectRelease();
          if ((v23 & 0x8000000000000000) != 0) {
            goto LABEL_105;
          }
          if (!v23) {
            goto LABEL_44;
          }
        }
        else
        {
          uint64_t v24 = *(void *)(v21 + 8 * a3 + 32);
          unint64_t v23 = *(void *)(v24 + 16);
          if ((v23 & 0x8000000000000000) != 0) {
            goto LABEL_104;
          }
          uint64_t v13 = *(void *)(v24 + 24);
          swift_bridgeObjectRetain();
          if (!v23)
          {
LABEL_44:
            unint64_t v12 = MEMORY[0x1E4FBC860];
            unint64_t v8 = MEMORY[0x1E4FBC860] + 32;
            goto LABEL_45;
          }
        }
        unint64_t v12 = sub_1D17BE1C0();
        *(void *)(v12 + 16) = v23;
        unint64_t v8 = v12 + 32;
        bzero((void *)(v12 + 32), 8 * v23);
        if (v23 >> 31)
        {
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          swift_bridgeObjectRetain();
          uint64_t v14 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
          if (v4) {
            goto LABEL_65;
          }
LABEL_12:
          uint64_t v15 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_66;
        }
LABEL_45:
        if (v13 < (uint64_t)0xFFFFFFFF80000000) {
          goto LABEL_58;
        }
        if (v13 > 0x7FFFFFFF) {
          goto LABEL_59;
        }
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        uint64_t v13 = v37;
        if (a3 >= v37 || v23 != v10) {
          goto LABEL_60;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v4 = sub_1D1667604(v4);
        }
        if (v10 > 0x7FFFFFFF) {
          goto LABEL_61;
        }
        if (v10 < (uint64_t)0xFFFFFFFF80000000) {
          goto LABEL_62;
        }
        if (v37 > 0x7FFFFFFF) {
          goto LABEL_63;
        }
        ++a3;
        cblas_dcopy_NEWLAPACK();
        uint64_t result = swift_bridgeObjectRelease();
        v3 += 8;
        uint64_t v21 = v35;
        if (v6 == a3) {
          goto LABEL_57;
        }
      }
    }
    goto LABEL_102;
  }
  uint64_t v13 = v37;
LABEL_57:
  *unint64_t v33 = v10;
  v33[1] = v13;
  v33[2] = (uint64_t)v4;
  return result;
}

uint64_t sub_1D167EC6C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  if (!*(unsigned char *)result)
  {
    unint64_t v9 = *(void *)(v4 + 24);
    if (v9 >> 62) {
      goto LABEL_69;
    }
    if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2) {
      goto LABEL_70;
    }
LABEL_18:
    unint64_t v9 = *(void *)(v4 + 32);
    if (!(v9 >> 62))
    {
      uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v10 <= v6)
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
LABEL_20:
      uint64_t v13 = *(void *)(v4 + 16);
      if ((v13 & 0xC000000000000001) != 0)
      {
        uint64_t v14 = (void *)MEMORY[0x1D25F9260](v7);
      }
      else
      {
        if (v7 < 0)
        {
LABEL_84:
          __break(1u);
          goto LABEL_85;
        }
        if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)v7)
        {
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
          goto LABEL_92;
        }
        uint64_t v14 = *(void **)(v13 + 8 * v7 + 32);
        swift_retain();
      }
      int64_t v4 = v14[2];
      uint64_t v10 = v14[3];
      uint64_t v7 = v14[4];
      swift_bridgeObjectRetain();
      swift_release();
      unint64_t v9 = sub_1D1665914(v4, 0.0);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_25;
      }
      goto LABEL_87;
    }
LABEL_77:
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1D17BEAD0();
    uint64_t result = swift_bridgeObjectRelease();
    if (v10 <= v6) {
      goto LABEL_78;
    }
    goto LABEL_20;
  }
  if (*(unsigned char *)result == 1)
  {
    unint64_t v9 = *(void *)(v4 + 24);
    if (v9 >> 62) {
      goto LABEL_67;
    }
    if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2) {
      goto LABEL_68;
    }
LABEL_5:
    unint64_t v9 = *(void *)(v4 + 32);
    if (!(v9 >> 62))
    {
      uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v10 > v6) {
        goto LABEL_7;
      }
      goto LABEL_76;
    }
  }
  else
  {
    unint64_t v9 = *(void *)(v4 + 24);
    if (v9 >> 62) {
      goto LABEL_71;
    }
    uint64_t v15 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15 > a2)
    {
      if (v15 > a3) {
        goto LABEL_33;
      }
LABEL_73:
      __break(1u);
    }
LABEL_74:
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1D17BEAD0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v10 <= v6)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
LABEL_7:
  uint64_t v11 = *(void *)(v4 + 16);
  if ((v11 & 0xC000000000000001) != 0)
  {
LABEL_79:
    uint64_t v12 = MEMORY[0x1D25F9260](v6);
    goto LABEL_11;
  }
  if (v6 < 0)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)v6)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  uint64_t v12 = *(void *)(v11 + 8 * v6 + 32);
  swift_retain();
LABEL_11:
  int64_t v4 = *(void *)(v12 + 24);
  uint64_t v6 = *(void *)(v12 + 32);
  swift_bridgeObjectRetain();
  swift_release();
  unint64_t v9 = sub_1D1665914(v4, 0.0);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
LABEL_85:
    uint64_t result = (uint64_t)sub_1D1667604((void *)v9);
    unint64_t v9 = result;
  }
  if (v4 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (v4 <= 0x7FFFFFFF)
    {
      if ((unsigned __int128)(v7 * (__int128)v4) >> 64 == (v7 * v4) >> 63)
      {
        cblas_dcopy_NEWLAPACK();
        uint64_t result = swift_bridgeObjectRelease();
        *a4 = 1;
        a4[1] = v4;
        a4[2] = v9;
        return result;
      }
      goto LABEL_94;
    }
    goto LABEL_91;
  }
  __break(1u);
LABEL_87:
  uint64_t result = (uint64_t)sub_1D1667604((void *)v9);
  unint64_t v9 = result;
LABEL_25:
  if (v4 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_89;
  }
  if (v4 >= (uint64_t)0xFFFFFFFF80000000 && v10 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (v10 <= 0x7FFFFFFF)
    {
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      MAMatrix.transpose()();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_93;
  }
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
  while (1)
  {
    __break(1u);
LABEL_96:
    unint64_t v29 = v9;
    if (!v5) {
      break;
    }
    while (1)
    {
      int64_t v4 = *(void *)(v4 + 16);
      unint64_t v9 = v4 & 0xC000000000000001;
      if ((v4 & 0xC000000000000001) == 0
        && (unint64_t)(v5 - 1) >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        break;
      }
      unint64_t v17 = 0;
      while (1)
      {
        if (v9)
        {
          uint64_t v18 = (void *)MEMORY[0x1D25F9260](v17, v4);
        }
        else
        {
          uint64_t v18 = *(void **)(v4 + 8 * v17 + 32);
          swift_retain();
        }
        if (v18[2] < v7) {
          break;
        }
        uint64_t v19 = v18[3];
        if (v19 < v6) {
          goto LABEL_58;
        }
        uint64_t v20 = v7 * v19;
        if ((unsigned __int128)(v7 * (__int128)v19) >> 64 != (v7 * v19) >> 63) {
          goto LABEL_59;
        }
        unint64_t v21 = v20 + v6;
        if (__OFADD__(v20, v6)) {
          goto LABEL_60;
        }
        if ((v21 & 0x8000000000000000) != 0) {
          goto LABEL_61;
        }
        uint64_t v22 = v18[4];
        if (v21 >= *(void *)(v22 + 16)) {
          goto LABEL_62;
        }
        uint64_t v23 = *(void *)(v22 + 8 * v21 + 32);
        uint64_t v24 = v18[5];
        if ((v24 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1D25F9260](v7, v18[5]);
          MEMORY[0x1D25F9260](v6, v24);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
        }
        else
        {
          if (v7 < 0) {
            goto LABEL_63;
          }
          unint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_release();
          if (v25 <= v7) {
            goto LABEL_64;
          }
          if (v25 <= v6) {
            goto LABEL_66;
          }
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1D1667604((void *)v10);
          uint64_t v10 = result;
        }
        if (v17 >= *(void *)(v10 + 16)) {
          goto LABEL_65;
        }
        *(void *)(v10 + 8 * v17++ + 32) = v23;
        if (v5 == v17) {
          goto LABEL_97;
        }
      }
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_1D17BEAD0();
      uint64_t result = swift_bridgeObjectRelease();
      if (v26 > v7) {
        goto LABEL_5;
      }
LABEL_68:
      __break(1u);
LABEL_69:
      swift_bridgeObjectRetain();
      uint64_t v27 = sub_1D17BEAD0();
      uint64_t result = swift_bridgeObjectRelease();
      if (v27 > v7) {
        goto LABEL_18;
      }
LABEL_70:
      __break(1u);
LABEL_71:
      swift_bridgeObjectRetain();
      uint64_t v5 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
      if (v5 <= v7) {
        goto LABEL_74;
      }
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
      if (v28 <= v6) {
        goto LABEL_73;
      }
LABEL_33:
      unint64_t v16 = *(void *)(v4 + 32);
      if (v16 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v9 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
        uint64_t v10 = sub_1D1665914(v9, 0.0);
        swift_bridgeObjectRetain();
        uint64_t v5 = sub_1D17BEAD0();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v5 & 0x8000000000000000) == 0) {
          goto LABEL_96;
        }
        __break(1u);
        goto LABEL_83;
      }
      unint64_t v29 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = sub_1D1665914(v29, 0.0);
      uint64_t v10 = result;
      uint64_t v5 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v5) {
        goto LABEL_97;
      }
    }
  }
LABEL_97:
  *a4 = 1;
  a4[1] = v29;
  a4[2] = v10;
  return result;
}

uint64_t sub_1D167F29C@<X0>(unsigned char *a1@<X0>, void *a2@<X8>)
{
  int v2 = *a1;
  if (!*a1 || v2 == 1)
  {
    unint64_t v3 = *(void *)(v23 + 24);
    if (v3 >> 62) {
      goto LABEL_44;
    }
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_5;
  }
  unint64_t v7 = *(void *)(v23 + 24);
  if (v7 >> 62) {
    goto LABEL_47;
  }
  uint64_t v6 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v4 = v6;
  while (1)
  {
    if ((unsigned __int128)(v4 * (__int128)v6) >> 64 != (v4 * v6) >> 63)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    uint64_t v22 = v4 * v6;
    uint64_t result = sub_1D1665914(v4 * v6, 0.0);
    if ((v4 & 0x8000000000000000) == 0) {
      break;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
LABEL_5:
    unint64_t v5 = *(void *)(v23 + 32);
    if (v5 >> 62)
    {
LABEL_48:
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
  }
  unint64_t v9 = (void *)result;
  if (!v4)
  {
LABEL_35:
    *a2 = 1;
    a2[1] = v22;
    a2[2] = v9;
    return result;
  }
  if (v6 < 0)
  {
    __break(1u);
LABEL_47:
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  uint64_t v25 = 0;
  uint64_t v10 = 0;
  uint64_t v19 = v4;
  uint64_t v11 = 32;
  int v21 = v2;
  while (1)
  {
    if (v10 == v4)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v20 = v11;
    if (v6) {
      break;
    }
LABEL_14:
    ++v10;
    v25 += v6;
    uint64_t v4 = v19;
    uint64_t v11 = v20 + 8 * v6;
    if (v10 == v19) {
      goto LABEL_35;
    }
  }
  if ((unsigned __int128)(v10 * (__int128)v6) >> 64 != (v10 * v6) >> 63)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v12 = 0;
  uint64_t v24 = v10;
  while (1)
  {
    char v26 = v2;
    sub_1D167EC6C((uint64_t)&v26, v10, v12, &v27);
    vDSP_Length v14 = v27;
    vDSP_Length v13 = v28;
    int64_t v15 = v28 * v27;
    if ((unsigned __int128)(v28 * (__int128)v27) >> 64 != (v28 * v27) >> 63)
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 < 0) {
      goto LABEL_50;
    }
    uint64_t v16 = v29;
    if (v15)
    {
      uint64_t v17 = sub_1D17BE1C0();
      *(void *)(v17 + 16) = v15;
      bzero((void *)(v17 + 32), 8 * v15);
      if ((v13 & 0x8000000000000000) != 0) {
        break;
      }
    }
    else
    {
      uint64_t v17 = MEMORY[0x1E4FBC860];
      if (v28 < 0) {
        break;
      }
    }
    if ((v14 & 0x8000000000000000) != 0) {
      break;
    }
    vDSP_mtransD((const double *)(v16 + 32), 1, (double *)(v17 + 32), 1, v13, v14);
    swift_bridgeObjectRelease();
    int v2 = v22;
    if (v25 + v12 >= v22 || v14 != 1 || v13 != 1) {
      goto LABEL_37;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v9 = sub_1D1667604(v9);
    }
    if (v22 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_38;
    }
    if (v22 > 0x7FFFFFFF) {
      goto LABEL_39;
    }
    ++v12;
    cblas_dcopy_NEWLAPACK();
    uint64_t result = swift_bridgeObjectRelease();
    v11 += 8;
    int v2 = v21;
    uint64_t v10 = v24;
    if (v6 == v12) {
      goto LABEL_14;
    }
  }
  sub_1D17BEA30();
  __break(1u);
LABEL_50:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

unint64_t sub_1D167F664()
{
  unint64_t v2 = *(void *)(v0 + 24);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1D17BEAD0();
    uint64_t v3 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v4 = v3;
  }
  if ((unsigned __int128)(v4 * (__int128)v3) >> 64 == (v4 * v3) >> 63)
  {
    vDSP_Length v17 = v4;
    uint64_t v18 = v3;
    uint64_t v19 = sub_1D1665914(v4 * v3, 0.0);
    unint64_t v0 = *(void *)(v0 + 16);
    unint64_t v1 = v0 >> 62;
    if (!(v0 >> 62))
    {
      uint64_t v5 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
      unint64_t result = swift_bridgeObjectRetain();
      if (!v5) {
        goto LABEL_15;
      }
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  unint64_t result = sub_1D17BEAD0();
  uint64_t v5 = result;
  if (!result) {
    goto LABEL_15;
  }
LABEL_6:
  if (v5 < 1) {
    goto LABEL_22;
  }
  uint64_t v7 = 0;
  do
  {
    if ((v0 & 0xC000000000000001) != 0)
    {
      uint64_t v8 = MEMORY[0x1D25F9260](v7, v0);
    }
    else
    {
      uint64_t v8 = *(void *)(v0 + 8 * v7 + 32);
      swift_retain();
    }
    ++v7;
    uint64_t v9 = *(void *)(v8 + 32);
    long long v15 = *(_OWORD *)(v8 + 16);
    uint64_t v16 = v9;
    swift_bridgeObjectRetain();
    += infix(_:_:)(&v17, (uint64_t)&v15);
    swift_bridgeObjectRelease();
    swift_release();
  }
  while (v5 != v7);
LABEL_15:
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  vDSP_Length v10 = v17;
  uint64_t v11 = v18;
  uint64_t v12 = (void *)v19;
  swift_bridgeObjectRetain();
  vDSP_Length v13 = v12;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    vDSP_Length v13 = sub_1D1667604(v12);
  }
  unint64_t result = v12[2];
  if (!(result >> 31))
  {
    cblas_dscal_NEWLAPACK();
    swift_bridgeObjectRelease();
    type metadata accessor for MASquareMatrixRepresentation();
    vDSP_Length v14 = (void *)swift_allocObject();
    void v14[2] = v10;
    v14[3] = v11;
    unint64_t v14[4] = v13;
    v14[5] = v2;
    swift_bridgeObjectRetain();
    return (unint64_t)v14;
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t MATensor.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MATensor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 40, 7);
}

uint64_t MATensor.description.getter()
{
  uint64_t v1 = v0;
  sub_1D17BE850();
  swift_bridgeObjectRelease();
  strcpy((char *)v43, "[MATensor] [");
  BYTE5(v43[1]) = 0;
  HIWORD(v43[1]) = -5120;
  unint64_t v2 = *(void *)(v0 + 24);
  unint64_t v3 = v2 >> 62;
  if (v2 >> 62) {
    goto LABEL_61;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v42[0] = v4;
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v42[0] = v5;
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  unint64_t v6 = *(void *)(v1 + 32);
  unint64_t v33 = v6 >> 62;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v42[0] = v7;
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  uint64_t v48 = v43[0];
  uint64_t v49 = v43[1];
  v43[0] = 0;
  v43[1] = 0xE000000000000000;
  sub_1D17BE850();
  swift_bridgeObjectRelease();
  strcpy((char *)v43, "\n\t[Entities] (");
  HIBYTE(v43[1]) = -18;
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v35 = v6;
  v42[0] = v8;
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  unint64_t v34 = v2;
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = sub_1D17BEAD0();
    if (!v1) {
      goto LABEL_32;
    }
LABEL_15:
    unint64_t v2 = 0;
    unint64_t v36 = (void *)v1;
    while (1)
    {
      if ((v34 & 0xC000000000000001) != 0)
      {
        id v11 = (id)MEMORY[0x1D25F9260](v2, v34);
        BOOL v12 = __OFADD__(v2++, 1);
        if (v12) {
          goto LABEL_57;
        }
      }
      else
      {
        if (v2 >= *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_59;
        }
        id v11 = *(id *)(v34 + 32 + 8 * v2);
        BOOL v12 = __OFADD__(v2++, 1);
        if (v12)
        {
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          swift_bridgeObjectRetain();
          uint64_t v4 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
      }
      id v38 = v11;

      uint64_t v46 = 592138;
      unint64_t v47 = 0xE300000000000000;
      long long v44 = xmmword_1D17C9930;
      v43[0] = 1701667182;
      v43[1] = 0xE400000000000000;
      sub_1D17BE800();
      v43[0] = 25705;
      v43[1] = 0xE200000000000000;
      sub_1D17BE800();
      v43[0] = 1684632949;
      v43[1] = 0xE400000000000000;
      sub_1D17BE800();
      uint64_t v13 = sub_1D17BE360();
      for (uint64_t i = 0; i != 3; ++i)
      {
        sub_1D165C164((uint64_t)&v45[5 * i], (uint64_t)v43);
        swift_bridgeObjectRetain();
        uint64_t v16 = sub_1D17BE7E0();
        uint64_t v17 = -1 << *(unsigned char *)(v13 + 32);
        unint64_t v18 = v16 & ~v17;
        if ((*(void *)(v13 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18))
        {
          unint64_t v3 = ~v17;
          while (1)
          {
            sub_1D165C164(*(void *)(v13 + 48) + 40 * v18, (uint64_t)v42);
            char v19 = MEMORY[0x1D25F91A0](v42, v43);
            sub_1D165C1C0((uint64_t)v42);
            if (v19) {
              break;
            }
            unint64_t v18 = (v18 + 1) & v3;
            if (((*(void *)(v13 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
              goto LABEL_24;
            }
          }
        }
        else
        {
LABEL_24:
          swift_bridgeObjectRelease();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          sub_1D165C164((uint64_t)v43, (uint64_t)v42);
          uint64_t v41 = v13;
          sub_1D1680520((uint64_t)v42, v18, isUniquelyReferenced_nonNull_native);
          uint64_t v13 = v41;
        }
        swift_bridgeObjectRelease();
        sub_1D165C1C0((uint64_t)v43);
      }
      swift_arrayDestroy();
      uint64_t v9 = (void *)sub_1D17BE340();
      swift_bridgeObjectRelease();
      id v10 = objc_msgSend(v38, sel_visualStringWithName_andPropertyKeys_, 0, v9);

      sub_1D17BDFF0();
      sub_1D17BE030();
      swift_bridgeObjectRelease();
      sub_1D17BE030();

      swift_bridgeObjectRelease();
      uint64_t v1 = (uint64_t)v36;
      if ((void *)v2 == v36) {
        goto LABEL_32;
      }
    }
  }
  uint64_t v1 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v1) {
    goto LABEL_15;
  }
LABEL_32:
  swift_bridgeObjectRelease();
  v43[0] = 0;
  v43[1] = 0xE000000000000000;
  sub_1D17BE850();
  swift_bridgeObjectRelease();
  v43[0] = 0x74616C65525B090ALL;
  v43[1] = 0xEF28205D736E6F69;
  if (v33)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v42[0] = v20;
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  if (!v33)
  {
    uint64_t v1 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v1) {
      goto LABEL_56;
    }
LABEL_39:
    unint64_t v3 = 0;
    unint64_t v2 = (unint64_t)v40;
    uint64_t v37 = v1;
    while (1)
    {
      if ((v35 & 0xC000000000000001) != 0)
      {
        id v23 = (id)MEMORY[0x1D25F9260](v3, v35);
        BOOL v12 = __OFADD__(v3++, 1);
        if (v12) {
          goto LABEL_58;
        }
      }
      else
      {
        if (v3 >= *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_60;
        }
        id v23 = *(id *)(v35 + 32 + 8 * v3);
        BOOL v12 = __OFADD__(v3++, 1);
        if (v12) {
          goto LABEL_58;
        }
      }
      id v39 = v23;
      uint64_t v46 = 592138;
      unint64_t v47 = 0xE300000000000000;
      v43[0] = 1701667182;
      v43[1] = 0xE400000000000000;
      sub_1D17BE800();
      v43[0] = 25705;
      v43[1] = 0xE200000000000000;
      sub_1D17BE800();
      v43[0] = 1684632949;
      v43[1] = 0xE400000000000000;
      sub_1D17BE800();
      uint64_t v24 = sub_1D17BE360();
      for (uint64_t j = 0; j != 3; ++j)
      {
        sub_1D165C164((uint64_t)&v40[5 * j], (uint64_t)v43);
        swift_bridgeObjectRetain();
        uint64_t v27 = sub_1D17BE7E0();
        uint64_t v28 = -1 << *(unsigned char *)(v24 + 32);
        unint64_t v29 = v27 & ~v28;
        if ((*(void *)(v24 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29))
        {
          uint64_t v30 = ~v28;
          while (1)
          {
            sub_1D165C164(*(void *)(v24 + 48) + 40 * v29, (uint64_t)v42);
            char v31 = MEMORY[0x1D25F91A0](v42, v43);
            sub_1D165C1C0((uint64_t)v42);
            if (v31) {
              break;
            }
            unint64_t v29 = (v29 + 1) & v30;
            if (((*(void *)(v24 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0) {
              goto LABEL_48;
            }
          }
        }
        else
        {
LABEL_48:
          swift_bridgeObjectRelease();
          char v26 = swift_isUniquelyReferenced_nonNull_native();
          sub_1D165C164((uint64_t)v43, (uint64_t)v42);
          uint64_t v41 = v24;
          sub_1D1680520((uint64_t)v42, v29, v26);
          uint64_t v24 = v41;
        }
        swift_bridgeObjectRelease();
        sub_1D165C1C0((uint64_t)v43);
      }
      swift_arrayDestroy();
      int v21 = (void *)sub_1D17BE340();
      swift_bridgeObjectRelease();
      id v22 = objc_msgSend(v39, sel_visualStringWithName_andPropertyKeys_, 0, v21);

      sub_1D17BDFF0();
      sub_1D17BE030();
      swift_bridgeObjectRelease();
      sub_1D17BE030();

      swift_bridgeObjectRelease();
      uint64_t v1 = v37;
      if (v3 == v37) {
        goto LABEL_56;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_1D17BEAD0();
  if (v1) {
    goto LABEL_39;
  }
LABEL_56:
  swift_bridgeObjectRelease();
  return v48;
}

uint64_t sub_1D1680374()
{
  return MATensor.description.getter();
}

void sub_1D1680398(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1D16FCB9C();
  }
  else
  {
    if (v7 > v6)
    {
      sub_1D16FDBC0();
      goto LABEL_14;
    }
    sub_1D16FE5F0();
  }
  uint64_t v8 = *v3;
  uint64_t v9 = sub_1D17BE5B0();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = sub_1D17BE5C0();

    if (v12)
    {
LABEL_13:
      sub_1D17BEC50();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = sub_1D17BE5C0();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

uint64_t sub_1D1680520(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1D16FCE3C();
  }
  else
  {
    if (v8 > v7)
    {
      unint64_t result = (uint64_t)sub_1D16FDD6C();
      goto LABEL_12;
    }
    sub_1D16FE86C();
  }
  uint64_t v9 = *v3;
  unint64_t result = sub_1D17BE7E0();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    do
    {
      sub_1D165C164(*(void *)(v9 + 48) + 40 * a2, (uint64_t)v19);
      char v12 = MEMORY[0x1D25F91A0](v19, v6);
      unint64_t result = sub_1D165C1C0((uint64_t)v19);
      if (v12) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v11;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v13 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v14 = *(void *)(v13 + 48) + 40 * a2;
  long long v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v6;
  *(_OWORD *)(v14 + 16) = v15;
  *(void *)(v14 + 32) = *(void *)(v6 + 32);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v13 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  unint64_t result = sub_1D17BEC50();
  __break(1u);
  return result;
}

uint64_t sub_1D168068C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v7 = result;
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0) {
    goto LABEL_14;
  }
  if (a4)
  {
    sub_1D16FD108();
  }
  else
  {
    if (v9 > v8)
    {
      unint64_t result = (uint64_t)sub_1D16FDF3C();
      goto LABEL_14;
    }
    sub_1D16FEB00();
  }
  uint64_t v10 = *v4;
  sub_1D17BED20();
  swift_bridgeObjectRetain();
  sub_1D1675190((uint64_t)v24, v7);
  swift_bridgeObjectRelease();
  unint64_t result = sub_1D17BED80();
  uint64_t v11 = -1 << *(unsigned char *)(v10 + 32);
  a3 = result & ~v11;
  if ((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = swift_bridgeObjectRetain();
    sub_1D1673874(v12, v7);
    char v14 = v13;
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    if (v14)
    {
LABEL_13:
      unint64_t result = sub_1D17BEC50();
      __break(1u);
    }
    else
    {
      uint64_t v15 = ~v11;
      while (1)
      {
        a3 = (a3 + 1) & v15;
        if (((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        swift_bridgeObjectRetain();
        uint64_t v16 = swift_bridgeObjectRetain();
        sub_1D1673874(v16, v7);
        char v18 = v17;
        swift_bridgeObjectRelease();
        unint64_t result = swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v19 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v20 = (uint64_t *)(*(void *)(v19 + 48) + 16 * a3);
  uint64_t *v20 = v7;
  v20[1] = a2;
  uint64_t v21 = *(void *)(v19 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v23;
  }
  return result;
}

uint64_t sub_1D1680860(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1D16FD36C();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)sub_1D16FE0F8();
      goto LABEL_14;
    }
    sub_1D16FED34();
  }
  uint64_t v8 = *v3;
  unint64_t result = sub_1D17BED10();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      unint64_t result = sub_1D17BEC50();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_1D1680984(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1D16FD5F0();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (uint64_t)sub_1D16FE290();
      goto LABEL_22;
    }
    sub_1D16FEF98();
  }
  uint64_t v11 = *v4;
  sub_1D17BED20();
  sub_1D17BE020();
  unint64_t result = sub_1D17BED80();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = sub_1D17BEBC0(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = sub_1D17BEC50();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        char v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = sub_1D17BEBC0();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_1D1680B20(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1D16FD8D0();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)sub_1D16FE444();
      goto LABEL_14;
    }
    sub_1D16FF248();
  }
  uint64_t v8 = *v3;
  sub_1D17BED20();
  (*(void (**)(unsigned char *))(*(void *)v5 + 272))(v17);
  unint64_t result = sub_1D17BED80();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v8 + 48) + 8 * a2) + 280);
    swift_retain();
    LOBYTE(v10) = v10(v5);
    unint64_t result = swift_release();
    if (v10)
    {
LABEL_13:
      type metadata accessor for MASlice();
      unint64_t result = sub_1D17BEC50();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        uint64_t v12 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v8 + 48) + 8 * a2) + 280);
        swift_retain();
        LOBYTE(v12) = v12(v5);
        unint64_t result = swift_release();
        if (v12) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

uint64_t sub_1D1680D38(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1D165C128(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for MATensor()
{
  return self;
}

unint64_t sub_1D1680DB0()
{
  unint64_t result = qword_1EA651C60;
  if (!qword_1EA651C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651C60);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MATensorMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MATensorMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D1680F60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MATensorMode()
{
  return &type metadata for MATensorMode;
}

uint64_t dispatch thunk of MAGraphTensor.adjencyTensor(directed:weighted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t method lookup function for MATensor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MATensor);
}

uint64_t dispatch thunk of MATensor.size.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of MATensor.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MATensor.slice(mode:index:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MATensor.fiber(mode:indexI:indexJ:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of MATensor.unfoldedFiber(mode:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MATensor.flatten()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

int64_t MASquareMatrixRepresentation.kmedoid(k:iterations:progressClosure:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *, double), uint64_t a4)
{
  uint64_t v193 = a4;
  v192 = a3;
  uint64_t v194 = a2;
  uint64_t v213 = *MEMORY[0x1E4F143B8];
  if (a1 < 0) {
    goto LABEL_320;
  }
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = a1;
  BOOL v7 = (void *)MEMORY[0x1E4FBC860];
  if (!a1) {
    goto LABEL_10;
  }
  unint64_t v8 = v4[5];
  if (v8 >> 62) {
    goto LABEL_322;
  }
  int64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  BOOL v7 = sub_1D169C99C(0, 1, 1, MEMORY[0x1E4FBC860]);
  uint64_t v10 = 0;
  do
  {
    int64_t v11 = v10 * v9;
    if ((unsigned __int128)(v10 * (__int128)v9) >> 64 != (v10 * v9) >> 63) {
      goto LABEL_300;
    }
    unint64_t v13 = v7[2];
    unint64_t v12 = v7[3];
    if (v13 >= v12 >> 1) {
      BOOL v7 = sub_1D169C99C((void *)(v12 > 1), v13 + 1, 1, v7);
    }
    ++v10;
    void v7[2] = v13 + 1;
    v7[v13 + 4] = v11 / v6;
  }
  while (v6 != v10);
LABEL_10:
  v202 = (void *)v5;
  if (v194 < 1)
  {
    uint64_t v17 = MEMORY[0x1E4FBC868];
    goto LABEL_175;
  }
  unint64_t v14 = *(void *)(v5 + 40);
  if (v14 >> 62)
  {
    unint64_t v34 = (unint64_t)v7;
    uint64_t v17 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if (v15 < 0)
    {
      __break(1u);
LABEL_325:
      __break(1u);
LABEL_326:
      __break(1u);
LABEL_327:
      __break(1u);
      goto LABEL_328;
    }
LABEL_332:
    uint64_t v203 = v17;
    BOOL v7 = (void *)v34;
  }
  else
  {
    uint64_t v203 = v14 & 0xFFFFFFFFFFFFFF8;
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v190 = 0;
  double v16 = (double)v194;
  uint64_t v17 = MEMORY[0x1E4FBC868];
  unint64_t v204 = v14;
  unint64_t v208 = v14 & 0xC000000000000001;
  int64_t v198 = 1;
  uint64_t v191 = v6 & ~(v6 >> 63);
  uint64_t v195 = v6;
  uint64_t v196 = v15;
  do
  {
    if (v15)
    {
      uint64_t v18 = 0;
      v206 = v7;
      do
      {
        if (v18 == v15) {
          goto LABEL_311;
        }
        uint64_t v205 = v7[2];
        if (!v205)
        {
          uint64_t v15 = v18;
          if (!*(void *)(v17 + 16)) {
            goto LABEL_42;
          }
          goto LABEL_40;
        }
        if (*(void *)(v5 + 16) < v18) {
          goto LABEL_313;
        }
        int64_t v19 = *(void *)(v5 + 24);
        uint64_t v20 = v5;
        uint64_t v5 = v18 * v19;
        if ((unsigned __int128)(v18 * (__int128)v19) >> 64 != (v18 * v19) >> 63) {
          goto LABEL_314;
        }
        uint64_t v201 = v17;
        int64_t v207 = *(void *)(v20 + 32);
        if (!v208 && (unint64_t)v18 >= *(void *)(v203 + 16)) {
          goto LABEL_315;
        }
        int64_t v21 = v207 + 32;
        swift_bridgeObjectRetain();
        uint64_t v22 = 0;
        double v23 = INFINITY;
        uint64_t v15 = v18;
        do
        {
          int64_t v9 = v7[v22 + 4];
          if (v19 < v9)
          {
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
LABEL_280:
            __break(1u);
LABEL_281:
            __break(1u);
LABEL_282:
            __break(1u);
LABEL_283:
            __break(1u);
LABEL_284:
            __break(1u);
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            __break(1u);
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
LABEL_291:
            __break(1u);
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
LABEL_295:
            __break(1u);
LABEL_296:
            __break(1u);
LABEL_297:
            __break(1u);
LABEL_298:
            __break(1u);
LABEL_299:
            __break(1u);
LABEL_300:
            __break(1u);
LABEL_301:
            sub_1D1672594();
            uint64_t v184 = swift_allocError();
            unsigned char *v185 = 0;
            uint64_t v197 = v184;
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v9;
          }
          unint64_t v27 = v5 + v9;
          if (__OFADD__(v5, v9)) {
            goto LABEL_278;
          }
          if ((v27 & 0x8000000000000000) != 0) {
            goto LABEL_279;
          }
          if (v27 >= *(void *)(v207 + 16)) {
            goto LABEL_280;
          }
          double v28 = *(double *)(v21 + 8 * v27);
          if (v208)
          {
            uint64_t v24 = v18;
            uint64_t v25 = v18;
            unint64_t v26 = v204;
            MEMORY[0x1D25F9260](v24, v204);
            MEMORY[0x1D25F9260](v9, v26);
            swift_unknownObjectRelease();
            uint64_t v18 = v25;
            swift_unknownObjectRelease();
          }
          else
          {
            if (v9 < 0) {
              goto LABEL_297;
            }
            if ((unint64_t)v9 >= *(void *)(v203 + 16)) {
              goto LABEL_298;
            }
          }
          ++v22;
          if (v28 < v23)
          {
            uint64_t v15 = v9;
            double v23 = v28;
          }
          BOOL v7 = v206;
        }
        while (v205 != v22);
        swift_bridgeObjectRelease();
        uint64_t v17 = v201;
        uint64_t v5 = (uint64_t)v202;
        uint64_t v6 = v195;
        if (!*(void *)(v201 + 16))
        {
LABEL_42:
          BOOL v31 = 1;
          goto LABEL_43;
        }
LABEL_40:
        unint64_t v29 = sub_1D165AB04(v18);
        if ((v30 & 1) == 0) {
          goto LABEL_42;
        }
        BOOL v31 = *(void *)(*(void *)(v17 + 56) + 8 * v29) != v15;
LABEL_43:
        int64_t v198 = v31;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v211 = v17;
        unint64_t v34 = sub_1D165AB04(v18);
        uint64_t v35 = *(void *)(v17 + 16);
        BOOL v36 = (v33 & 1) == 0;
        uint64_t v37 = v35 + v36;
        if (__OFADD__(v35, v36)) {
          goto LABEL_312;
        }
        char v38 = v33;
        if (*(void *)(v17 + 24) >= v37)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v17 = v211;
            if ((v33 & 1) == 0) {
              goto LABEL_50;
            }
          }
          else
          {
            sub_1D16A78A4();
            uint64_t v17 = v211;
            if ((v38 & 1) == 0) {
              goto LABEL_50;
            }
          }
LABEL_16:
          *(void *)(*(void *)(v17 + 56) + 8 * v34) = v15;
          goto LABEL_17;
        }
        sub_1D16A41B0(v37, isUniquelyReferenced_nonNull_native);
        unint64_t v14 = v211;
        unint64_t v39 = sub_1D165AB04(v18);
        if ((v38 & 1) != (v40 & 1))
        {
          sub_1D17BEC60();
          __break(1u);
          goto LABEL_332;
        }
        unint64_t v34 = v39;
        uint64_t v17 = v211;
        if (v38) {
          goto LABEL_16;
        }
LABEL_50:
        *(void *)(v17 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        uint64_t v41 = 8 * v34;
        *(void *)(*(void *)(v17 + 48) + v41) = v18;
        *(void *)(*(void *)(v17 + 56) + v41) = v15;
        uint64_t v42 = *(void *)(v17 + 16);
        BOOL v43 = __OFADD__(v42, 1);
        uint64_t v44 = v42 + 1;
        if (v43) {
          goto LABEL_316;
        }
        *(void *)(v17 + 16) = v44;
LABEL_17:
        ++v18;
        swift_bridgeObjectRelease();
        uint64_t v15 = v196;
        BOOL v7 = v206;
      }
      while (v18 != v196);
    }
    if (v6 && v198)
    {
      unint64_t v45 = 0;
      uint64_t v46 = v17 + 64;
      uint64_t v187 = v17 + 64;
      while (1)
      {
        if (v45 == v191) {
          goto LABEL_326;
        }
        if (v45 >= v7[2]) {
          goto LABEL_327;
        }
        v206 = v7;
        unint64_t v189 = v45;
        uint64_t v6 = v7[v45 + 4];
        char v47 = *(unsigned char *)(v17 + 32);
        unsigned int v48 = v47 & 0x3F;
        unint64_t v49 = (unint64_t)((1 << v47) + 63) >> 6;
        size_t v50 = 8 * v49;
        uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
        if (v48 <= 0xD
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1F4188790](isStackAllocationSafe, v52);
          int64_t v9 = (int64_t)&v186 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0);
          bzero((void *)v9, v50);
          uint64_t v53 = 0;
          int64_t v54 = 0;
          uint64_t v55 = 1 << *(unsigned char *)(v17 + 32);
          if (v55 < 64) {
            uint64_t v56 = ~(-1 << v55);
          }
          else {
            uint64_t v56 = -1;
          }
          unint64_t v57 = v56 & *(void *)(v17 + 64);
          int64_t v58 = (unint64_t)(v55 + 63) >> 6;
          while (1)
          {
            if (v57)
            {
              unint64_t v59 = __clz(__rbit64(v57));
              v57 &= v57 - 1;
              unint64_t v60 = v59 | (v54 << 6);
            }
            else
            {
              BOOL v43 = __OFADD__(v54++, 1);
              if (v43)
              {
                __break(1u);
LABEL_311:
                __break(1u);
LABEL_312:
                __break(1u);
LABEL_313:
                __break(1u);
LABEL_314:
                __break(1u);
LABEL_315:
                __break(1u);
LABEL_316:
                __break(1u);
LABEL_317:
                __break(1u);
                goto LABEL_318;
              }
              if (v54 >= v58) {
                goto LABEL_86;
              }
              unint64_t v61 = *(void *)(v46 + 8 * v54);
              if (!v61)
              {
                int64_t v62 = v54 + 1;
                if (v54 + 1 >= v58) {
                  goto LABEL_86;
                }
                unint64_t v61 = *(void *)(v46 + 8 * v62);
                if (!v61)
                {
                  int64_t v62 = v54 + 2;
                  if (v54 + 2 >= v58) {
                    goto LABEL_86;
                  }
                  unint64_t v61 = *(void *)(v46 + 8 * v62);
                  if (!v61)
                  {
                    int64_t v62 = v54 + 3;
                    if (v54 + 3 >= v58)
                    {
LABEL_86:
                      uint64_t v64 = sub_1D1684148((unint64_t *)((char *)&v186 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0)), v49, v53, v17);
                      goto LABEL_113;
                    }
                    unint64_t v61 = *(void *)(v46 + 8 * v62);
                    if (!v61)
                    {
                      while (1)
                      {
                        int64_t v54 = v62 + 1;
                        if (__OFADD__(v62, 1)) {
                          break;
                        }
                        if (v54 >= v58) {
                          goto LABEL_86;
                        }
                        unint64_t v61 = *(void *)(v46 + 8 * v54);
                        ++v62;
                        if (v61) {
                          goto LABEL_78;
                        }
                      }
LABEL_318:
                      __break(1u);
LABEL_319:
                      __break(1u);
LABEL_320:
                      __break(1u);
LABEL_321:
                      __break(1u);
LABEL_322:
                      swift_bridgeObjectRetain();
                      int64_t v9 = sub_1D17BEAD0();
                      swift_bridgeObjectRelease();
                      goto LABEL_5;
                    }
                  }
                }
                int64_t v54 = v62;
              }
LABEL_78:
              unint64_t v63 = __clz(__rbit64(v61));
              unint64_t v57 = (v61 - 1) & v61;
              unint64_t v60 = v63 + (v54 << 6);
            }
            if (*(void *)(*(void *)(v17 + 56) + 8 * v60) == v6)
            {
              *(void *)(v9 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v60;
              BOOL v43 = __OFADD__(v53++, 1);
              if (v43) {
                goto LABEL_325;
              }
            }
          }
        }
        int64_t v9 = swift_slowAlloc();
        bzero((void *)v9, v50);
        uint64_t v65 = 0;
        int64_t v66 = 0;
        uint64_t v67 = 1 << *(unsigned char *)(v17 + 32);
        if (v67 < 64) {
          uint64_t v68 = ~(-1 << v67);
        }
        else {
          uint64_t v68 = -1;
        }
        unint64_t v69 = v68 & *(void *)(v17 + 64);
        int64_t v70 = (unint64_t)(v67 + 63) >> 6;
        while (1)
        {
          if (v69)
          {
            unint64_t v71 = __clz(__rbit64(v69));
            v69 &= v69 - 1;
            unint64_t v72 = v71 | (v66 << 6);
            goto LABEL_92;
          }
          BOOL v43 = __OFADD__(v66++, 1);
          if (v43) {
            goto LABEL_317;
          }
          if (v66 >= v70) {
            goto LABEL_112;
          }
          unint64_t v73 = *(void *)(v46 + 8 * v66);
          if (!v73) {
            break;
          }
LABEL_104:
          unint64_t v75 = __clz(__rbit64(v73));
          unint64_t v69 = (v73 - 1) & v73;
          unint64_t v72 = v75 + (v66 << 6);
LABEL_92:
          if (*(void *)(*(void *)(v17 + 56) + 8 * v72) == v6)
          {
            *(void *)(v9 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
            BOOL v43 = __OFADD__(v65++, 1);
            if (v43) {
              goto LABEL_329;
            }
          }
        }
        int64_t v74 = v66 + 1;
        if (v66 + 1 >= v70) {
          goto LABEL_112;
        }
        unint64_t v73 = *(void *)(v46 + 8 * v74);
        if (v73) {
          goto LABEL_103;
        }
        int64_t v74 = v66 + 2;
        if (v66 + 2 >= v70) {
          goto LABEL_112;
        }
        unint64_t v73 = *(void *)(v46 + 8 * v74);
        if (v73) {
          goto LABEL_103;
        }
        int64_t v74 = v66 + 3;
        if (v66 + 3 >= v70) {
          goto LABEL_112;
        }
        unint64_t v73 = *(void *)(v46 + 8 * v74);
        if (v73)
        {
LABEL_103:
          int64_t v66 = v74;
          goto LABEL_104;
        }
        while (1)
        {
          int64_t v66 = v74 + 1;
          if (__OFADD__(v74, 1)) {
            goto LABEL_321;
          }
          if (v66 >= v70) {
            break;
          }
          unint64_t v73 = *(void *)(v46 + 8 * v66);
          ++v74;
          if (v73) {
            goto LABEL_104;
          }
        }
LABEL_112:
        uint64_t v64 = sub_1D1684148((unint64_t *)v9, v49, v65, v17);
        MEMORY[0x1D25FAD70](v9, -1, -1);
LABEL_113:
        uint64_t v6 = 1;
        swift_bridgeObjectRelease();
        int64_t v76 = *(void *)(v64 + 16);
        if (v76) {
          break;
        }
        swift_release();
        uint64_t v89 = MEMORY[0x1E4FBC860];
LABEL_143:
        uint64_t v98 = *(void *)(v89 + 16);
        uint64_t v99 = v203;
        if (v98)
        {
          int64_t v207 = v89 + 32;
          swift_bridgeObjectRetain();
          int64_t v100 = 0;
          uint64_t v101 = 0;
          double v102 = INFINITY;
          do
          {
            int64_t v9 = *(void *)(v207 + 8 * v101++);
            swift_bridgeObjectRetain();
            uint64_t v103 = 0;
            double v104 = 0.0;
            do
            {
              unint64_t v105 = *(void *)(v89 + 8 * v103 + 32);
              if (v9 != v105)
              {
                if (*(void *)(v5 + 16) < v9) {
                  goto LABEL_289;
                }
                uint64_t v106 = *(void *)(v5 + 24);
                if (v106 < (uint64_t)v105) {
                  goto LABEL_290;
                }
                int64_t v107 = v9 * v106;
                if ((unsigned __int128)(v9 * (__int128)v106) >> 64 != (v9 * v106) >> 63) {
                  goto LABEL_291;
                }
                unint64_t v108 = v107 + v105;
                if (__OFADD__(v107, v105)) {
                  goto LABEL_292;
                }
                if ((v108 & 0x8000000000000000) != 0) {
                  goto LABEL_293;
                }
                uint64_t v109 = *(void *)(v5 + 32);
                if (v108 >= *(void *)(v109 + 16)) {
                  goto LABEL_294;
                }
                double v110 = *(double *)(v109 + 8 * v108 + 32);
                if (v208)
                {
                  uint64_t v205 = MEMORY[0x1D25F9260](v9, v204);
                  MEMORY[0x1D25F9260](v105, v204);
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  uint64_t v99 = v203;
                }
                else
                {
                  if (v9 < 0) {
                    goto LABEL_295;
                  }
                  unint64_t v111 = *(void *)(v99 + 16);
                  if (v9 >= v111 || v105 >= v111) {
                    goto LABEL_296;
                  }
                }
                double v104 = v104 + v110;
              }
              ++v103;
            }
            while (v98 != v103);
            swift_bridgeObjectRelease();
            uint64_t v99 = v203;
            if (v104 < v102)
            {
              double v102 = v104;
              int64_t v100 = v9;
            }
          }
          while (v101 != v98);
          swift_bridgeObjectRelease_n();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v206 = sub_1D1667640(v206);
          }
          uint64_t v6 = v195;
          unint64_t v112 = v189;
          uint64_t v46 = v187;
          BOOL v7 = v206;
          if (v189 >= v206[2]) {
            goto LABEL_330;
          }
          v206[v189 + 4] = v100;
        }
        else
        {
          swift_bridgeObjectRelease();
          BOOL v7 = v206;
          uint64_t v6 = v195;
          unint64_t v112 = v189;
        }
        unint64_t v45 = v112 + 1;
        if (v45 == v6) {
          goto LABEL_170;
        }
      }
      uint64_t v211 = MEMORY[0x1E4FBC860];
      uint64_t v201 = v64;
      sub_1D16826DC(0, v76, 0);
      uint64_t v77 = sub_1D1684B88(v201);
      uint64_t v78 = v201;
      int v80 = v79;
      uint64_t v81 = 0;
      uint64_t v82 = v201 + 64;
      char v83 = *(unsigned char *)(v201 + 32);
      uint64_t v199 = v79;
      uint64_t v188 = v201 + 88;
      uint64_t v200 = v76;
      while (1)
      {
        if (v77 < 0 || v77 >= 1 << v83)
        {
          __break(1u);
LABEL_303:
          __break(1u);
LABEL_304:
          __break(1u);
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
          goto LABEL_308;
        }
        uint64_t v5 = v17;
        unint64_t v87 = (unint64_t)v77 >> 6;
        uint64_t v17 = 1 << v77;
        if ((*(void *)(v82 + 8 * ((unint64_t)v77 >> 6)) & (1 << v77)) == 0) {
          goto LABEL_303;
        }
        if (*(_DWORD *)(v78 + 36) != v80) {
          goto LABEL_304;
        }
        uint64_t v205 = v81;
        uint64_t v88 = v82;
        int64_t v207 = *(void *)(*(void *)(v78 + 48) + 8 * v77);
        uint64_t v89 = v211;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1D16826DC(0, *(void *)(v89 + 16) + 1, 1);
          uint64_t v89 = v211;
        }
        unint64_t v91 = *(void *)(v89 + 16);
        unint64_t v90 = *(void *)(v89 + 24);
        int64_t v9 = v91 + 1;
        uint64_t v78 = v201;
        uint64_t v82 = v88;
        if (v91 >= v90 >> 1)
        {
          sub_1D16826DC(v90 > 1, v91 + 1, 1);
          uint64_t v82 = v88;
          uint64_t v78 = v201;
          uint64_t v89 = v211;
        }
        *(void *)(v89 + 16) = v9;
        *(void *)(v89 + 8 * v91 + 32) = v207;
        char v83 = *(unsigned char *)(v78 + 32);
        uint64_t v6 = 1;
        unint64_t v84 = 1 << v83;
        if (v77 >= 1 << v83) {
          goto LABEL_305;
        }
        uint64_t v92 = *(void *)(v82 + 8 * v87);
        if ((v92 & v17) == 0) {
          goto LABEL_306;
        }
        if (*(_DWORD *)(v78 + 36) != v80) {
          goto LABEL_307;
        }
        unint64_t v93 = v92 & (-2 << (v77 & 0x3F));
        if (v93)
        {
          unint64_t v84 = __clz(__rbit64(v93)) | v77 & 0xFFFFFFFFFFFFFFC0;
          int64_t v9 = (int64_t)v202;
          uint64_t v17 = v5;
        }
        else
        {
          unint64_t v94 = v87 + 1;
          unint64_t v95 = (v84 + 63) >> 6;
          int64_t v9 = (int64_t)v202;
          uint64_t v17 = v5;
          if (v87 + 1 < v95)
          {
            unint64_t v96 = *(void *)(v82 + 8 * v94);
            if (v96) {
              goto LABEL_132;
            }
            unint64_t v94 = v87 + 2;
            if (v87 + 2 < v95)
            {
              unint64_t v96 = *(void *)(v82 + 8 * v94);
              if (!v96)
              {
                unint64_t v97 = v95 - 3;
                uint64_t v86 = v205;
                while (v97 != v87)
                {
                  unint64_t v96 = *(void *)(v188 + 8 * v87++);
                  if (v96)
                  {
                    unint64_t v94 = v87 + 2;
                    uint64_t v85 = v200;
                    goto LABEL_133;
                  }
                }
                uint64_t v85 = v200;
                goto LABEL_117;
              }
LABEL_132:
              uint64_t v85 = v200;
              uint64_t v86 = v205;
LABEL_133:
              unint64_t v84 = __clz(__rbit64(v96)) + (v94 << 6);
              goto LABEL_117;
            }
          }
        }
        uint64_t v85 = v200;
        uint64_t v86 = v205;
LABEL_117:
        uint64_t v81 = v86 + 1;
        int v80 = v199;
        uint64_t v77 = v84;
        if (v81 == v85)
        {
          swift_release();
          uint64_t v5 = v9;
          uint64_t v46 = v187;
          goto LABEL_143;
        }
      }
    }
LABEL_170:
    int64_t v9 = (int64_t)v7;
    LOBYTE(v211) = 0;
    uint64_t v113 = v190 + 1;
    v192(&v211, (double)(v190 + 1) / v16);
    if (v211) {
      goto LABEL_301;
    }
    if (v113 >= v194) {
      goto LABEL_309;
    }
    uint64_t v190 = v113;
    uint64_t v15 = v196;
  }
  while (v198);
LABEL_175:
  while (2)
  {
    int64_t v209 = MEMORY[0x1E4FBC870];
    uint64_t v114 = swift_bridgeObjectRetain();
    uint64_t v115 = sub_1D167BFA4(v114);
    v206 = v7;
    swift_bridgeObjectRelease();
    uint64_t v116 = 0;
    uint64_t v117 = *(void *)(v115 + 56);
    uint64_t v196 = v115 + 56;
    uint64_t v118 = 1 << *(unsigned char *)(v115 + 32);
    if (v118 < 64) {
      uint64_t v119 = ~(-1 << v118);
    }
    else {
      uint64_t v119 = -1;
    }
    unint64_t v120 = v119 & v117;
    int64_t v198 = (unint64_t)(v118 + 63) >> 6;
    uint64_t v199 = v115;
    uint64_t v201 = v17;
LABEL_181:
    if (v120)
    {
      uint64_t v200 = (v120 - 1) & v120;
      uint64_t v203 = v116;
      unint64_t v121 = __clz(__rbit64(v120)) | (v116 << 6);
LABEL_194:
      uint64_t v125 = *(unint64_t **)(*(void *)(v199 + 48) + 8 * v121);
      uint64_t v126 = swift_bridgeObjectRetain();
      uint64_t v127 = v125;
      uint64_t v128 = v197;
      int64_t v9 = (int64_t)sub_1D1683E88(v126, v127);
      uint64_t v197 = v128;
      swift_bridgeObjectRelease();
      int64_t v129 = *(void *)(v9 + 16);
      if (v129)
      {
        uint64_t v211 = MEMORY[0x1E4FBC860];
        int64_t v207 = v129;
        unint64_t v208 = v9;
        sub_1D16826DC(0, v129, 0);
        uint64_t v130 = v211;
        uint64_t v6 = sub_1D1684B88(v208);
        int64_t v132 = v207;
        unint64_t v131 = v208;
        int v134 = v133;
        uint64_t v135 = 0;
        unint64_t v136 = v208 + 64;
        char v137 = *(unsigned char *)(v208 + 32);
        unint64_t v138 = v133;
        unint64_t v139 = v208 + 88;
        while (1)
        {
          if (v6 < 0 || v6 >= 1 << v137) {
            goto LABEL_283;
          }
          unint64_t v141 = (unint64_t)v6 >> 6;
          if ((*(void *)(v136 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
            goto LABEL_284;
          }
          if (*(_DWORD *)(v131 + 36) != v134) {
            goto LABEL_285;
          }
          uint64_t v142 = *(void *)(*(void *)(v131 + 48) + 8 * v6);
          uint64_t v211 = v130;
          int64_t v9 = *(void *)(v130 + 16);
          unint64_t v143 = *(void *)(v130 + 24);
          if (v9 >= v143 >> 1)
          {
            unint64_t v204 = v138;
            uint64_t v205 = v136;
            uint64_t v195 = v139;
            sub_1D16826DC(v143 > 1, v9 + 1, 1);
            unint64_t v139 = v195;
            unint64_t v138 = v204;
            unint64_t v136 = v205;
            int64_t v132 = v207;
            unint64_t v131 = v208;
            uint64_t v130 = v211;
          }
          *(void *)(v130 + 16) = v9 + 1;
          *(void *)(v130 + 8 * v9 + 32) = v142;
          char v137 = *(unsigned char *)(v131 + 32);
          unint64_t v140 = 1 << v137;
          if (v6 >= 1 << v137) {
            goto LABEL_286;
          }
          uint64_t v144 = *(void *)(v136 + 8 * v141);
          if ((v144 & (1 << v6)) == 0) {
            goto LABEL_287;
          }
          if (*(_DWORD *)(v131 + 36) != v134) {
            goto LABEL_288;
          }
          unint64_t v145 = v144 & (-2 << (v6 & 0x3F));
          if (v145)
          {
            unint64_t v140 = __clz(__rbit64(v145)) | v6 & 0xFFFFFFFFFFFFFFC0;
          }
          else
          {
            unint64_t v146 = v141 + 1;
            unint64_t v147 = (v140 + 63) >> 6;
            if (v141 + 1 < v147)
            {
              unint64_t v148 = *(void *)(v136 + 8 * v146);
              if (!v148)
              {
                unint64_t v146 = v141 + 2;
                if (v141 + 2 >= v147) {
                  goto LABEL_197;
                }
                unint64_t v148 = *(void *)(v136 + 8 * v146);
                if (!v148)
                {
                  while (v147 - 3 != v141)
                  {
                    unint64_t v148 = *(void *)(v139 + 8 * v141++);
                    if (v148)
                    {
                      unint64_t v146 = v141 + 2;
                      goto LABEL_210;
                    }
                  }
                  goto LABEL_197;
                }
              }
LABEL_210:
              unint64_t v140 = __clz(__rbit64(v148)) + (v146 << 6);
            }
          }
LABEL_197:
          ++v135;
          int v134 = v138;
          uint64_t v6 = v140;
          if (v135 == v132)
          {
            swift_release();
            uint64_t v5 = (uint64_t)v202;
            goto LABEL_218;
          }
        }
      }
      swift_release();
      uint64_t v130 = MEMORY[0x1E4FBC860];
LABEL_218:
      uint64_t v149 = sub_1D17BE360();
      uint64_t v150 = v149;
      uint64_t v151 = *(void *)(v130 + 16);
      if (v151)
      {
        uint64_t v152 = 0;
        uint64_t v6 = v130;
        uint64_t v153 = v130 + 32;
        uint64_t v154 = v149 + 56;
        while (1)
        {
          int64_t v9 = *(void *)(v153 + 8 * v152++);
          uint64_t v155 = sub_1D17BED10();
          uint64_t v156 = -1 << *(unsigned char *)(v150 + 32);
          unint64_t v157 = v155 & ~v156;
          if (((*(void *)(v154 + ((v157 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v157) & 1) == 0) {
            goto LABEL_227;
          }
          uint64_t v158 = *(void *)(v150 + 48);
          if (*(void *)(v158 + 8 * v157) == v9)
          {
LABEL_220:
            if (v152 == v151) {
              goto LABEL_229;
            }
          }
          else
          {
            uint64_t v159 = ~v156;
            while (1)
            {
              unint64_t v157 = (v157 + 1) & v159;
              if (((*(void *)(v154 + ((v157 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v157) & 1) == 0) {
                break;
              }
              if (*(void *)(v158 + 8 * v157) == v9) {
                goto LABEL_220;
              }
            }
LABEL_227:
            char v160 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v211 = v150;
            sub_1D1680860(v9, v157, v160);
            uint64_t v150 = v211;
            swift_bridgeObjectRelease();
            if (v152 == v151)
            {
LABEL_229:
              swift_bridgeObjectRelease();
              uint64_t v5 = (uint64_t)v202;
              if (*(void *)(v150 + 16)) {
                goto LABEL_230;
              }
LABEL_180:
              swift_bridgeObjectRelease();
              unint64_t v120 = v200;
              uint64_t v116 = v203;
              goto LABEL_181;
            }
            uint64_t v154 = v150 + 56;
          }
        }
      }
      swift_bridgeObjectRelease();
      if (!*(void *)(v150 + 16)) {
        goto LABEL_180;
      }
LABEL_230:
      uint64_t v17 = 0;
      uint64_t v211 = MEMORY[0x1E4FBC870];
      uint64_t v212 = 0;
      uint64_t v161 = *(void *)(v150 + 56);
      uint64_t v205 = v150 + 56;
      uint64_t v162 = 1 << *(unsigned char *)(v150 + 32);
      if (v162 < 64) {
        uint64_t v163 = ~(-1 << v162);
      }
      else {
        uint64_t v163 = -1;
      }
      unint64_t v164 = v163 & v161;
      int64_t v207 = (unint64_t)(v162 + 63) >> 6;
      unint64_t v208 = v150;
      if ((v163 & v161) == 0)
      {
LABEL_237:
        int64_t v167 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_299;
        }
        if (v167 >= v207) {
          goto LABEL_179;
        }
        unint64_t v168 = *(void *)(v205 + 8 * v167);
        ++v17;
        if (v168) {
          goto LABEL_250;
        }
        uint64_t v17 = v167 + 1;
        if (v167 + 1 >= v207) {
          goto LABEL_179;
        }
        unint64_t v168 = *(void *)(v205 + 8 * v17);
        if (v168) {
          goto LABEL_250;
        }
        uint64_t v17 = v167 + 2;
        if (v167 + 2 >= v207) {
          goto LABEL_179;
        }
        unint64_t v168 = *(void *)(v205 + 8 * v17);
        if (v168) {
          goto LABEL_250;
        }
        int64_t v169 = v167 + 3;
        if (v169 >= v207)
        {
LABEL_179:
          swift_release();
          sub_1D167239C((uint64_t *)&v210, v211, v212);
          swift_bridgeObjectRelease();
          goto LABEL_180;
        }
        unint64_t v168 = *(void *)(v205 + 8 * v169);
        if (v168)
        {
          uint64_t v17 = v169;
LABEL_250:
          unint64_t v164 = (v168 - 1) & v168;
          unint64_t v166 = __clz(__rbit64(v168)) + (v17 << 6);
          goto LABEL_251;
        }
        while (1)
        {
          uint64_t v17 = v169 + 1;
          if (__OFADD__(v169, 1)) {
            break;
          }
          if (v17 >= v207) {
            goto LABEL_179;
          }
          unint64_t v168 = *(void *)(v205 + 8 * v17);
          ++v169;
          if (v168) {
            goto LABEL_250;
          }
        }
LABEL_308:
        __break(1u);
LABEL_309:
        BOOL v7 = (void *)v9;
        continue;
      }
      while (1)
      {
        while (1)
        {
          unint64_t v165 = __clz(__rbit64(v164));
          v164 &= v164 - 1;
          unint64_t v166 = v165 | (v17 << 6);
LABEL_251:
          unint64_t v170 = *(void *)(*(void *)(v150 + 48) + 8 * v166);
          uint64_t v171 = *(void *)(v5 + 40);
          if ((v171 & 0xC000000000000001) != 0)
          {
            id v172 = (id)MEMORY[0x1D25F9260](v170);
          }
          else
          {
            if ((v170 & 0x8000000000000000) != 0) {
              goto LABEL_281;
            }
            if (v170 >= *(void *)((v171 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_282;
            }
            id v172 = *(id *)(v171 + 8 * v170 + 32);
          }
          int64_t v9 = (int64_t)v172;
          uint64_t v6 = v211;
          if ((v211 & 0xC000000000000001) != 0)
          {
            id v173 = v172;
            char v174 = sub_1D17BE7B0();

            if (v174) {
              goto LABEL_266;
            }
            goto LABEL_265;
          }
          if (*(void *)(v211 + 16))
          {
            uint64_t v175 = sub_1D17BE5B0();
            uint64_t v176 = -1 << *(unsigned char *)(v6 + 32);
            unint64_t v177 = v175 & ~v176;
            unint64_t v204 = v6 + 56;
            if ((*(void *)(v6 + 56 + ((v177 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v177)) {
              break;
            }
          }
LABEL_265:
          int64_t v9 = (int64_t)(id)v9;
          sub_1D1671FA0(&v210, (void *)v9);
          id v173 = v210;

LABEL_266:
          uint64_t v150 = v208;
          if (!v164) {
            goto LABEL_237;
          }
        }
        sub_1D1668090();
        id v178 = *(id *)(*(void *)(v6 + 48) + 8 * v177);
        char v179 = sub_1D17BE5C0();

        if ((v179 & 1) == 0)
        {
          uint64_t v180 = ~v176;
          do
          {
            unint64_t v177 = (v177 + 1) & v180;
            uint64_t v5 = (uint64_t)v202;
            if (((*(void *)(v204 + ((v177 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v177) & 1) == 0) {
              goto LABEL_265;
            }
            id v181 = *(id *)(*(void *)(v6 + 48) + 8 * v177);
            char v182 = sub_1D17BE5C0();
          }
          while ((v182 & 1) == 0);
        }

        uint64_t v5 = (uint64_t)v202;
        uint64_t v150 = v208;
        if (!v164) {
          goto LABEL_237;
        }
      }
    }
    break;
  }
  BOOL v43 = __OFADD__(v116, 1);
  int64_t v122 = v116 + 1;
  if (v43) {
    goto LABEL_319;
  }
  if (v122 < v198)
  {
    unint64_t v123 = *(void *)(v196 + 8 * v122);
    if (!v123)
    {
      int64_t v124 = v122 + 1;
      if (v122 + 1 >= v198) {
        goto LABEL_275;
      }
      unint64_t v123 = *(void *)(v196 + 8 * v124);
      if (!v123)
      {
        int64_t v124 = v122 + 2;
        if (v122 + 2 >= v198) {
          goto LABEL_275;
        }
        unint64_t v123 = *(void *)(v196 + 8 * v124);
        if (!v123)
        {
          int64_t v124 = v122 + 3;
          if (v122 + 3 >= v198) {
            goto LABEL_275;
          }
          unint64_t v123 = *(void *)(v196 + 8 * v124);
          if (!v123)
          {
            while (1)
            {
              int64_t v122 = v124 + 1;
              if (__OFADD__(v124, 1)) {
                break;
              }
              if (v122 >= v198) {
                goto LABEL_275;
              }
              unint64_t v123 = *(void *)(v196 + 8 * v122);
              ++v124;
              if (v123) {
                goto LABEL_193;
              }
            }
LABEL_328:
            __break(1u);
LABEL_329:
            __break(1u);
LABEL_330:
            __break(1u);
          }
        }
      }
      int64_t v122 = v124;
    }
LABEL_193:
    uint64_t v200 = (v123 - 1) & v123;
    uint64_t v203 = v122;
    unint64_t v121 = __clz(__rbit64(v123)) + (v122 << 6);
    goto LABEL_194;
  }
LABEL_275:
  swift_release();
  int64_t v9 = v209;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1D168264C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D1682854(a1, a2, a3, *v3);
  *int v3 = (char *)result;
  return result;
}

uint64_t sub_1D168266C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D16829B4(a1, a2, a3, *v3);
  *int v3 = (char *)result;
  return result;
}

uint64_t sub_1D168268C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D1682B04(a1, a2, a3, *v3);
  *int v3 = (char *)result;
  return result;
}

uint64_t sub_1D16826AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D16833A0(a1, a2, a3, (void *)*v3, &qword_1EA651C68, &qword_1EA6516D8);
  *int v3 = result;
  return result;
}

uint64_t sub_1D16826DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D1682C70(a1, a2, a3, *v3);
  *int v3 = (char *)result;
  return result;
}

uint64_t sub_1D16826FC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D1682DD0(a1, a2, a3, *v3);
  *int v3 = (char *)result;
  return result;
}

uint64_t sub_1D168271C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D1682F30(a1, a2, a3, *v3);
  *int v3 = (char *)result;
  return result;
}

uint64_t sub_1D168273C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D1683090(a1, a2, a3, *v3);
  *int v3 = (char *)result;
  return result;
}

uint64_t sub_1D168275C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D1683214(a1, a2, a3, (void *)*v3);
  *int v3 = result;
  return result;
}

uint64_t sub_1D168277C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D16833A0(a1, a2, a3, (void *)*v3, &qword_1EA651CC0, &qword_1EA651CC8);
  *int v3 = result;
  return result;
}

uint64_t sub_1D16827AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D1683D2C(a1, a2, a3, *v3, &qword_1EA651CB8);
  *int v3 = (char *)result;
  return result;
}

uint64_t sub_1D16827D4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D1683530(a1, a2, a3, (void *)*v3);
  *int v3 = result;
  return result;
}

uint64_t sub_1D16827F4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D16836BC(a1, a2, a3, (void *)*v3);
  *int v3 = result;
  return result;
}

uint64_t sub_1D1682814(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D1683864(a1, a2, a3, (void *)*v3);
  *int v3 = result;
  return result;
}

uint64_t sub_1D1682834(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D16839F0(a1, a2, a3, (void *)*v3);
  *int v3 = result;
  return result;
}

uint64_t sub_1D1682854(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD271F0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D16829B4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651CE8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1682B04(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA651720);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1682C70(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD272F0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1682DD0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651C70);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1682F30(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EBD27248);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1683090(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651CD0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1683214(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651CD8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651CE0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D16833A0(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 17;
    }
    id v13[2] = v11;
    void v13[3] = 2 * (v15 >> 4);
  }
  else
  {
    unint64_t v13 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 16 * v11) {
      memmove(v13 + 4, a4 + 4, 16 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 16 * v11 || v16 >= v17 + 16 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1683530(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651CA8);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651CB0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D16836BC(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651C98);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651CA0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1683864(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651C90);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD272D0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D16839F0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651C80);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651C88);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1683B94(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6516F0);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651C78);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1683D20(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1D1683D2C(a1, a2, a3, a4, &qword_1EA6516E0);
}

uint64_t sub_1D1683D2C(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    memcpy(v14, v15, 16 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

unint64_t *sub_1D1683E88(uint64_t isStackAllocationSafe, unint64_t *a2)
{
  int v3 = a2;
  uint64_t v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E4F143B8];
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe, a2);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    int64_t v8 = sub_1D1683FF4((void *)((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v4, (uint64_t)v3);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v8;
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    int v3 = sub_1D1683FF4((unint64_t *)v9, v6, v4, (uint64_t)v3);
    MEMORY[0x1D25FAD70](v9, -1, -1);
  }
  return v3;
}

unint64_t *sub_1D1683FF4(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11) {
      return (unint64_t *)sub_1D1684148(result, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        return (unint64_t *)sub_1D1684148(result, a2, v5, a3);
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          return (unint64_t *)sub_1D1684148(result, a2, v5, a3);
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    if (*(void *)(*(void *)(a3 + 56) + 8 * v13) == a4)
    {
      *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_1D1684148(result, a2, v5, a3);
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v11) {
    return (unint64_t *)sub_1D1684148(result, a2, v5, a3);
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      return (unint64_t *)sub_1D1684148(result, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1D1684148(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652030);
  uint64_t result = sub_1D17BEB10();
  uint64_t v9 = result;
  BOOL v31 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= a2) {
        return v9;
      }
      unint64_t v16 = v31[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= a2) {
          return v9;
        }
        unint64_t v16 = v31[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= a2) {
            return v9;
          }
          unint64_t v16 = v31[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= a2) {
              return v9;
            }
            unint64_t v16 = v31[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= a2) {
                  return v9;
                }
                unint64_t v16 = v31[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = 8 * v14;
    uint64_t v19 = *(void *)(*(void *)(v4 + 48) + v18);
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + v18);
    uint64_t result = sub_1D17BED10();
    uint64_t v21 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t v29 = 8 * v24;
    *(void *)(*(void *)(v9 + 48) + v29) = v19;
    *(void *)(*(void *)(v9 + 56) + v29) = v20;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1D16843B8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA6515F0);
  uint64_t result = sub_1D17BEB10();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v30) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v30) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v30) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v30) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_41;
                }
                if (v10 >= v30) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v10 = v16;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    uint64_t v17 = 8 * v13;
    uint64_t v18 = *(void *)(*(void *)(v4 + 56) + v17);
    id v19 = *(id *)(*(void *)(v4 + 48) + v17);
    swift_bridgeObjectRetain();
    uint64_t result = sub_1D17BE5B0();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = 8 * v23;
    *(void *)(*(void *)(v8 + 48) + v28) = v19;
    *(void *)(*(void *)(v8 + 56) + v28) = v18;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1D1684650(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D40);
  uint64_t result = sub_1D17BEB10();
  uint64_t v9 = result;
  BOOL v31 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= a2) {
        return v9;
      }
      unint64_t v16 = v31[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= a2) {
          return v9;
        }
        unint64_t v16 = v31[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= a2) {
            return v9;
          }
          unint64_t v16 = v31[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= a2) {
              return v9;
            }
            unint64_t v16 = v31[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= a2) {
                  return v9;
                }
                unint64_t v16 = v31[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = 8 * v14;
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + v18);
    id v20 = *(id *)(*(void *)(v4 + 48) + v18);
    uint64_t result = sub_1D17BE5B0();
    uint64_t v21 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t v29 = 8 * v24;
    *(void *)(*(void *)(v9 + 48) + v29) = v20;
    *(void *)(*(void *)(v9 + 56) + v29) = v19;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1D16848D0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA651FE0);
  uint64_t result = sub_1D17BEB10();
  uint64_t v9 = result;
  uint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= a2) {
        return v9;
      }
      unint64_t v16 = v29[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= a2) {
          return v9;
        }
        unint64_t v16 = v29[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= a2) {
            return v9;
          }
          unint64_t v16 = v29[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= a2) {
              return v9;
            }
            unint64_t v16 = v29[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= a2) {
                  return v9;
                }
                unint64_t v16 = v29[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    sub_1D165C164(*(void *)(v4 + 48) + 40 * v14, (uint64_t)v35);
    sub_1D1668120(*(void *)(v4 + 56) + 32 * v14, (uint64_t)v34);
    long long v31 = v35[0];
    long long v32 = v35[1];
    uint64_t v33 = v36;
    sub_1D16607C4(v34, v30);
    uint64_t result = sub_1D17BE7E0();
    uint64_t v18 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v12 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v12 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v12 + 8 * v20);
      }
      while (v25 == -1);
      unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(void *)(v12 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t v26 = *(void *)(v9 + 48) + 40 * v21;
    long long v27 = v32;
    *(_OWORD *)uint64_t v26 = v31;
    *(_OWORD *)(v26 + 16) = v27;
    *(void *)(v26 + 32) = v33;
    uint64_t result = (uint64_t)sub_1D16607C4(v30, (_OWORD *)(*(void *)(v9 + 56) + 32 * v21));
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1D1684B88(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t static NodeCollection<>.fetch(in:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void (*v9)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v12[2];
  long long v13;
  uint64_t v14;
  uint64_t WitnessTable;

  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v9 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a3 + 16);
  unint64_t v14 = type metadata accessor for Filter();
  v12[1] = *(void *)(a3 + 8);
  uint64_t WitnessTable = swift_getWitnessTable();
  v9(&v13, a2, a3);
  AbstractGraph.nodeIdentifiers(matching:)(&v13, v7, v8, v12);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v13);
  sub_1D167C788((uint64_t)a1, (uint64_t)&v13);
  return NodeCollection.init(with:in:)(v12, &v13, a4);
}

uint64_t static NodeCollection<>.fetch(with:in:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v10);
  sub_1D1684DD4(a1, a3, a4, v14);
  AbstractGraph.nodeIdentifiers(matching:)(v14, v10, v11, &v13);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
  sub_1D167C788((uint64_t)a2, (uint64_t)v14);
  return NodeCollection.init(with:in:)(&v13, (long long *)v14, a5);
}

__n128 sub_1D1684DD4@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v26, a2, a3);
  uint64_t v6 = v26;
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  *(void *)&long long v26 = v6;
  swift_bridgeObjectRetain();
  sub_1D1663DB0(v9);
  uint64_t v10 = sub_1D167C018(v26);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_1D1666DF4(v10);
  swift_bridgeObjectRelease();
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = sub_1D167C018(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
  uint64_t v17 = sub_1D16D0DCC(v16, v13);
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_1D1666DF4(v17);
  swift_release();
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v20 + 24))(&v25, v19, v20);
  Filter.init(with:anyOfLabels:properties:)((uint64_t)v11, (uint64_t)v18, &v25, &v26);
  unint64_t v21 = v27;
  uint64_t v22 = type metadata accessor for Filter();
  __n128 v24 = (__n128)v26;
  a4[1].n128_u64[1] = v22;
  a4[2].n128_u64[0] = swift_getWitnessTable();
  __n128 result = v24;
  *a4 = v24;
  a4[1].n128_u64[0] = v21;
  return result;
}

uint64_t static NodeCollection<>.fetch(with:in:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = (uint64_t)a2;
  uint64_t v8 = a5;
  uint64_t v9 = *a1;
  if ((a1[1] & 1) == 0)
  {
    unsigned int v48 = a5;
    uint64_t v60 = *a1;
    uint64_t v29 = a2[3];
    uint64_t v28 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v29);
    uint64_t v30 = type metadata accessor for Filter();
    uint64_t v65 = v30;
    v58[1] = *(void *)(a4 + 8);
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v66 = WitnessTable;
    sub_1D17BE260();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    sub_1D17BE500();
    sub_1D1684DD4(&v62, a3, a4, v67);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v62);
    AbstractGraph.nodeIdentifiers(matching:)(v67, v29, v28, &v59);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v67);
    uint64_t v31 = v60;
    if (MEMORY[0x1D25F8C00](v60, v30))
    {
      uint64_t v55 = a3;
      uint64_t v32 = 0;
      uint64_t v33 = (uint64_t *)(v31 + 48);
      uint64_t v51 = v31;
      while (1)
      {
        char v34 = sub_1D17BE1E0();
        uint64_t result = sub_1D17BE160();
        if ((v34 & 1) == 0) {
          goto LABEL_25;
        }
        uint64_t v36 = v32 + 1;
        if (__OFADD__(v32, 1)) {
          goto LABEL_26;
        }
        uint64_t v38 = *(v33 - 1);
        uint64_t v37 = *v33;
        uint64_t v39 = *(v33 - 2);
        uint64_t v40 = a2[3];
        uint64_t v41 = a2[4];
        __swift_project_boxed_opaque_existential_1(a2, v40);
        uint64_t v65 = v30;
        uint64_t v66 = WitnessTable;
        uint64_t v62 = v39;
        uint64_t v63 = v38;
        uint64_t v64 = v37;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1D1684DD4(&v62, v55, a4, v67);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v62);
        uint64_t v42 = v59;
        v58[0] = v59;
        AbstractGraph.nodeIdentifiers(matching:in:)(v67, (uint64_t)v58, v40, v41, &v62);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v67);
        uint64_t v43 = v62;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          id v44 = *(id *)(v42 + 16);
          objc_msgSend(v44, sel_mutableCopy);
          sub_1D17BE690();
          swift_unknownObjectRelease();
          sub_1D1685604();
          swift_dynamicCast();
          uint64_t v45 = v62;

          __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
          uint64_t v42 = swift_allocObject();
          *(void *)(v42 + 16) = v45;
          uint64_t v59 = v42;
          swift_release();
        }
        objc_msgSend(*(id *)(v42 + 16), sel_intersectWithIdentifierSet_, *(void *)(v43 + 16), v48);
        swift_release();
        ++v32;
        v33 += 3;
        if (v36 == MEMORY[0x1D25F8C00](v51, v30))
        {
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v62 = v59;
    sub_1D167C788((uint64_t)a2, (uint64_t)v67);
    uint64_t v46 = v48;
    return NodeCollection.init(with:in:)(&v62, (long long *)v67, v46);
  }
  id v10 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  uint64_t v12 = type metadata accessor for Filter();
  uint64_t v13 = swift_bridgeObjectRetain();
  if (!MEMORY[0x1D25F8C00](v13, v12))
  {
    swift_bridgeObjectRelease();
LABEL_19:
    uint64_t v62 = v11;
    sub_1D167C788(v7, (uint64_t)v67);
    uint64_t v46 = v8;
    return NodeCollection.init(with:in:)(&v62, (long long *)v67, v46);
  }
  char v47 = v8;
  uint64_t v54 = a3;
  uint64_t v14 = 0;
  uint64_t v15 = (uint64_t *)(v9 + 48);
  uint64_t v49 = v12;
  while (1)
  {
    char v16 = sub_1D17BE1E0();
    sub_1D17BE160();
    if ((v16 & 1) == 0) {
      break;
    }
    if (__OFADD__(v14, 1)) {
      goto LABEL_24;
    }
    uint64_t v50 = v14 + 1;
    uint64_t v52 = v11;
    uint64_t v18 = *(v15 - 1);
    uint64_t v17 = *v15;
    uint64_t v19 = *(v15 - 2);
    uint64_t v21 = a2[3];
    uint64_t v20 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v21);
    uint64_t v65 = v12;
    uint64_t v61 = *(void *)(a4 + 8);
    uint64_t v22 = swift_getWitnessTable();
    uint64_t v62 = v19;
    uint64_t v63 = v18;
    uint64_t v66 = v22;
    uint64_t v64 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D1684DD4(&v62, v54, a4, v67);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v62);
    uint64_t v23 = v21;
    uint64_t v11 = v52;
    AbstractGraph.nodeIdentifiers(matching:)(v67, v23, v20, &v62);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v67);
    uint64_t v24 = v62;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      id v25 = *(id *)(v52 + 16);
      objc_msgSend(v25, sel_mutableCopy);
      sub_1D17BE690();
      swift_unknownObjectRelease();
      sub_1D1685604();
      swift_dynamicCast();
      uint64_t v26 = v62;

      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v26;
      swift_release();
      uint64_t v11 = v27;
    }
    objc_msgSend(*(id *)(v11 + 16), sel_unionWithIdentifierSet_, *(void *)(v24 + 16), v47);
    swift_release_n();
    uint64_t v12 = v49;
    ++v14;
    v15 += 3;
    if (v50 == MEMORY[0x1D25F8C00](v9, v49))
    {
      swift_bridgeObjectRelease();
      uint64_t v8 = v47;
      uint64_t v7 = (uint64_t)a2;
      goto LABEL_19;
    }
  }
  sub_1D17BE8A0();
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  uint64_t result = sub_1D17BE8A0();
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_1D1685604()
{
  unint64_t result = qword_1EBD27518;
  if (!qword_1EBD27518)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBD27518);
  }
  return result;
}

uint64_t dispatch thunk of static FilterableNode.filter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static FilterableEdge.filter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1D168566C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  uint64_t v22 = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v7 = (uint64_t (*)(_OWORD *))result;
    unint64_t v8 = 0;
    uint64_t v9 = a3 + 32;
    uint64_t v15 = *(void *)(a3 + 16);
    while (v8 < *(void *)(v4 + 16))
    {
      sub_1D165C164(v9, (uint64_t)v20);
      char v10 = v7(v20);
      if (v3)
      {
        sub_1D165C1C0((uint64_t)v20);
        swift_release();
        swift_bridgeObjectRelease();
        return v5;
      }
      if (v10)
      {
        uint64_t v11 = v7;
        long long v17 = v20[0];
        long long v18 = v20[1];
        uint64_t v19 = v21;
        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0) {
          unint64_t result = sub_1D168273C(0, *(void *)(v5 + 16) + 1, 1);
        }
        uint64_t v5 = v22;
        unint64_t v13 = *(void *)(v22 + 16);
        unint64_t v12 = *(void *)(v22 + 24);
        if (v13 >= v12 >> 1)
        {
          unint64_t result = sub_1D168273C(v12 > 1, v13 + 1, 1);
          uint64_t v5 = v22;
        }
        *(void *)(v5 + 16) = v13 + 1;
        uint64_t v14 = v5 + 40 * v13;
        *(_OWORD *)(v14 + 32) = v17;
        *(_OWORD *)(v14 + 48) = v18;
        *(void *)(v14 + 64) = v19;
        uint64_t v7 = v11;
        uint64_t v6 = v15;
        uint64_t v4 = a3;
      }
      else
      {
        unint64_t result = sub_1D165C1C0((uint64_t)v20);
      }
      ++v8;
      v9 += 40;
      if (v6 == v8) {
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t sub_1D1685800(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  sub_1D168271C(0, v2, 0);
  uint64_t v3 = v10;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 40)
    {
      sub_1D165C164(i, (uint64_t)v9);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1D168271C(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v10;
      }
      unint64_t v6 = *(void *)(v3 + 16);
      unint64_t v5 = *(void *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1D168271C(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v10;
      }
      *(void *)(v3 + 16) = v6 + 1;
      *(void *)(v3 + 8 * v6 + 32) = v8;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    return 0;
  }
  return v3;
}

uint64_t MANaiveBayesClassifier.__allocating_init(classes:data:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  MANaiveBayesClassifier.init(classes:data:)(a1, a2);
  return v4;
}

void *MANaiveBayesClassifier.init(classes:data:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA651CF0);
  swift_getTupleTypeMetadata2();
  sub_1D17BE1A0();
  v2[4] = sub_1D17BDE70();
  return v2;
}

uint64_t sub_1D1685A30(void (*a1)(char *, double), uint64_t a2)
{
  void (*v34)(_OWORD *__return_ptr, uint64_t);
  void *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  long long v43;
  long long v44;
  char isUniquelyReferenced_nonNull_native;
  char v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  char *v57;
  double v58;
  uint64_t v59;
  unsigned char *v60;
  uint64_t v61;
  uint64_t i;
  void (**v63)(char *, char *, uint64_t);
  void *v64;
  uint64_t (**v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, double);
  uint64_t v71;
  uint64_t (**v72)(char *, char *, uint64_t);
  uint64_t v73;
  void (**v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  int64_t v85;
  uint64_t v86;
  void (*v87)(_OWORD *__return_ptr, uint64_t);
  uint64_t v88;
  void *v89;
  _OWORD v90[2];
  _OWORD v91[2];
  uint64_t v92;
  uint64_t v93;
  char v94;

  uint64_t v4 = v3;
  unint64_t v5 = v2;
  unint64_t v71 = a2;
  int64_t v70 = a1;
  uint64_t v6 = *v2;
  uint64_t v7 = *(void *)(v6 + 80);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1, a2);
  unint64_t v69 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v11);
  unsigned int v79 = (char *)&v61 - v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v78 = sub_1D17BE620();
  uint64_t v14 = *(void *)(v78 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v78, v15);
  uint64_t v77 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v16, v18);
  int64_t v76 = (uint64_t *)((char *)&v61 - v20);
  if (!*(void *)(v5[3] + 16)) {
    return result;
  }
  unint64_t v94 = 0;
  unint64_t v93 = v5[2];
  sub_1D17BE260();
  uint64_t v21 = *(void *)(v6 + 88);
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v68 = sub_1D17BE3B0();
  *(void *)&v90[0] = v68;
  uint64_t v66 = v21;
  uint64_t v22 = sub_1D17BE3A0();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x1D25F8A40](v91, v22, WitnessTable);
  *(void *)&v90[0] = *(void *)&v91[0];
  sub_1D17BEAC0();
  sub_1D17BEA90();
  unint64_t v84 = v5;
  uint64_t v64 = v5 + 4;
  unint64_t v75 = sub_1D17BEAB0();
  int64_t v74 = (void (**)(char *, char *, uint64_t))(v14 + 32);
  unint64_t v73 = TupleTypeMetadata2 - 8;
  unint64_t v72 = (uint64_t (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v63 = (void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v65 = (uint64_t (**)(char *, uint64_t))(v8 + 8);
  uint64_t v24 = v79;
  uint64_t v67 = v7;
  for (uint64_t i = TupleTypeMetadata2; ; TupleTypeMetadata2 = i)
  {
    id v25 = v77;
    sub_1D17BEAA0();
    uint64_t v26 = v76;
    (*v74)((char *)v76, v25, v78);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v26, 1, TupleTypeMetadata2) == 1)goto LABEL_32; {
    uint64_t v81 = *v26;
    }
    uint64_t v27 = (*v72)(v24, (char *)v26 + *(int *)(TupleTypeMetadata2 + 48), v7);
    uint64_t v28 = v84;
    MEMORY[0x1F4188790](v27, v29);
    *(&v61 - 2) = (uint64_t)v28;
    *(&v61 - 1) = (uint64_t)v24;
    uint64_t v30 = swift_bridgeObjectRetain();
    uint64_t v82 = sub_1D1687978(v30, (uint64_t (*)(unint64_t, uint64_t))sub_1D1687970);
    swift_bridgeObjectRelease();
    uint64_t v31 = v28[3];
    if (!*(void *)(v31 + 16))
    {
LABEL_37:
      __break(1u);
LABEL_38:
      uint64_t result = sub_1D17BEC60();
      __break(1u);
      return result;
    }
    int v80 = v4;
    uint64_t v88 = *(void *)(*(void *)(v31 + 32) + 16);
    if (v88) {
      break;
    }
    uint64_t v35 = (void *)MEMORY[0x1E4FBC868];
LABEL_29:
    swift_bridgeObjectRelease();
    unint64_t v57 = v79;
    uint64_t v7 = v67;
    (*v63)(v69, v79, v67);
    *(void *)&v91[0] = v35;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA651CF0);
    sub_1D17BDE90();
    sub_1D17BDEB0();
    int64_t v58 = (double)v81;
    uint64_t v59 = sub_1D17BE380();
    v70(&v94, v58 / (double)v59);
    if (v94)
    {
      swift_bridgeObjectRelease();
      sub_1D1672594();
      swift_allocError();
      *uint64_t v60 = 0;
      swift_willThrow();
      sub_1D1668088();
      return (*v65)(v57, v7);
    }
    (*v65)(v57, v7);
    uint64_t v4 = v80;
    uint64_t v24 = v57;
  }
  unint64_t v32 = 0;
  int64_t v33 = *(void *)(v82 + 16);
  char v34 = *(void (**)(_OWORD *__return_ptr, uint64_t))(*v28 + 224);
  uint64_t v86 = *v28 + 224;
  unint64_t v87 = v34;
  char v83 = v82 + 40;
  uint64_t v35 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v85 = v33;
  while (!v33)
  {
    uint64_t v37 = MEMORY[0x1E4FBC860];
LABEL_17:
    v87(v91, v37);
    swift_bridgeObjectRelease();
    sub_1D16607C4(v91, v90);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v89 = v35;
    char v47 = sub_1D165AB04(v32);
    unsigned int v48 = v35[2];
    uint64_t v49 = (v46 & 1) == 0;
    uint64_t v50 = v48 + v49;
    if (__OFADD__(v48, v49))
    {
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    uint64_t v51 = v46;
    if (v35[3] >= v50)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v35 = v89;
        if (v46) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_1D16A7C0C();
        uint64_t v35 = v89;
        if (v51) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      sub_1D16A4758(v50, isUniquelyReferenced_nonNull_native);
      uint64_t v52 = sub_1D165AB04(v32);
      if ((v51 & 1) != (v53 & 1)) {
        goto LABEL_38;
      }
      char v47 = v52;
      uint64_t v35 = v89;
      if (v51)
      {
LABEL_7:
        uint64_t v36 = (_OWORD *)(v35[7] + 32 * v47);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
        sub_1D16607C4(v90, v36);
        goto LABEL_8;
      }
    }
    v35[(v47 >> 6) + 8] |= 1 << v47;
    *(void *)(v35[6] + 8 * v47) = v32;
    sub_1D16607C4(v90, (_OWORD *)(v35[7] + 32 * v47));
    uint64_t v54 = v35[2];
    uint64_t v55 = __OFADD__(v54, 1);
    uint64_t v56 = v54 + 1;
    if (v55) {
      goto LABEL_36;
    }
    _OWORD v35[2] = v56;
LABEL_8:
    ++v32;
    swift_bridgeObjectRelease();
    int64_t v33 = v85;
    if (v32 == v88) {
      goto LABEL_29;
    }
  }
  *(void *)&v90[0] = MEMORY[0x1E4FBC860];
  sub_1D168273C(0, v33, 0);
  uint64_t v37 = *(void *)&v90[0];
  uint64_t v38 = v83;
  uint64_t v39 = v33;
  while (v32 < *(void *)(*(void *)v38 + 16))
  {
    sub_1D165C164(*(void *)v38 + 40 * v32 + 32, (uint64_t)v91);
    *(void *)&v90[0] = v37;
    uint64_t v41 = *(void *)(v37 + 16);
    uint64_t v40 = *(void *)(v37 + 24);
    if (v41 >= v40 >> 1)
    {
      sub_1D168273C(v40 > 1, v41 + 1, 1);
      uint64_t v37 = *(void *)&v90[0];
    }
    *(void *)(v37 + 16) = v41 + 1;
    uint64_t v42 = v37 + 40 * v41;
    uint64_t v43 = v91[0];
    id v44 = v91[1];
    *(void *)(v42 + 64) = v92;
    *(_OWORD *)(v42 + 32) = v43;
    *(_OWORD *)(v42 + 48) = v44;
    v38 += 16;
    if (!--v39) {
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_32:
  sub_1D1668088();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D1686324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)a3 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v6 = (char *)&v9 - v5;
  swift_bridgeObjectRetain();
  sub_1D17BE2C0();
  swift_bridgeObjectRelease();
  char v7 = sub_1D17BDFA0();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7 & 1;
}

uint64_t sub_1D168645C(uint64_t a1)
{
  uint64_t result = sub_1D1686534(a1, 1);
  if (!v1)
  {
    swift_getTupleTypeMetadata2();
    sub_1D17BE260();
    swift_getWitnessTable();
    sub_1D17BE460();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D1686534(uint64_t result, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[3];
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = v2;
    char v7 = (uint64_t *)result;
    if (*(void *)(result + 16) == *(void *)(*(void *)(v5 + 32) + 16))
    {
      uint64_t v76 = a2;
      uint64_t v8 = *(void **)(v4 + 80);
      uint64_t v9 = *(uint64_t **)(v4 + 88);
      uint64_t v82 = sub_1D17BDE00();
      uint64_t v10 = swift_bridgeObjectRetain();
      uint64_t v11 = MEMORY[0x1D25F8BB0](v10, v8);
      uint64_t v12 = swift_bridgeObjectRelease();
      unint64_t v75 = v72;
      *(void *)&long long v79 = v6[2];
      MEMORY[0x1F4188790](v12, v13);
      uint64_t v68 = v6;
      unint64_t v69 = &v82;
      int64_t v70 = (uint64_t *)v11;
      sub_1D17BE260();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      sub_1D17BE0D0();
      swift_bridgeObjectRelease();
      *(void *)&long long v79 = v6[4];
      uint64_t v15 = MEMORY[0x1F4188790](v79, v14);
      int64_t v70 = v7;
      unint64_t v71 = v6;
      MEMORY[0x1F4188790](v15, v16);
      uint64_t v64 = v8;
      uint64_t v65 = v9;
      uint64_t v66 = sub_1D1687B00;
      uint64_t v67 = v17;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA651CF0);
      uint64_t v18 = sub_1D17BDE90();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA6516E8);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v22 = sub_1D169A4DC((void (*)(char *, char *))sub_1D1687B08, (uint64_t)&v62, v18, TupleTypeMetadata2, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v21);
      uint64_t v23 = swift_bridgeObjectRelease();
      unint64_t v75 = v72;
      *(void *)&long long v79 = v22;
      uint64_t v25 = MEMORY[0x1F4188790](v23, v24);
      uint64_t v68 = v8;
      unint64_t v69 = v9;
      int64_t v70 = &v82;
      MEMORY[0x1F4188790](v25, v26);
      uint64_t v62 = v8;
      uint64_t v63 = v9;
      uint64_t v64 = sub_1D1687B2C;
      uint64_t v65 = v27;
      uint64_t v28 = sub_1D17BE260();
      uint64_t v29 = swift_getTupleTypeMetadata2();
      uint64_t v30 = swift_getWitnessTable();
      uint64_t v32 = sub_1D169A4DC((void (*)(char *, char *))sub_1D1687B38, (uint64_t)v61, v28, v29, MEMORY[0x1E4FBC248], v30, MEMORY[0x1E4FBC278], v31);
      uint64_t v33 = swift_bridgeObjectRelease();
      uint64_t v73 = v32;
      *(void *)&long long v79 = v32;
      MEMORY[0x1F4188790](v33, v34);
      int64_t v70 = (uint64_t *)v8;
      unint64_t v71 = v9;
      int64_t v74 = v9;
      unint64_t v75 = (void *)v29;
      uint64_t v35 = sub_1D17BE260();
      uint64_t v36 = swift_getWitnessTable();
      uint64_t v38 = sub_1D169A4DC((void (*)(char *, char *))sub_1D1687B5C, (uint64_t)&v68, v35, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBC248], v36, MEMORY[0x1E4FBC278], v37);
      uint64_t v39 = *(void *)(v38 + 16);
      if (v39)
      {
        if (v39 == 1)
        {
          uint64_t v40 = 0;
          double v41 = 0.0;
        }
        else
        {
          uint64_t v40 = v39 & 0x7FFFFFFFFFFFFFFELL;
          uint64_t v46 = (double *)(v38 + 40);
          double v41 = 0.0;
          uint64_t v47 = v39 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            double v41 = v41 + *(v46 - 1) + *v46;
            v46 += 2;
            v47 -= 2;
          }
          while (v47);
          if (v39 == v40) {
            goto LABEL_14;
          }
        }
        uint64_t v48 = v39 - v40;
        uint64_t v49 = (double *)(v38 + 8 * v40 + 32);
        do
        {
          double v50 = *v49++;
          double v41 = v41 + v50;
          --v48;
        }
        while (v48);
      }
      else
      {
        double v41 = 0.0;
      }
LABEL_14:
      uint64_t v51 = swift_bridgeObjectRelease();
      *(void *)&long long v79 = v73;
      uint64_t v53 = MEMORY[0x1F4188790](v51, v52);
      uint64_t v54 = v74;
      uint64_t v68 = v8;
      unint64_t v69 = v74;
      int64_t v70 = *(uint64_t **)&v41;
      MEMORY[0x1F4188790](v53, v55);
      uint64_t v62 = v8;
      uint64_t v63 = v54;
      uint64_t v64 = sub_1D1687B7C;
      uint64_t v65 = v56;
      uint64_t v58 = sub_1D169A4DC((void (*)(char *, char *))sub_1D1687BD0, (uint64_t)v61, v35, (uint64_t)v75, MEMORY[0x1E4FBC248], v36, MEMORY[0x1E4FBC278], v57);
      v72[1] = v3;
      uint64_t v59 = swift_bridgeObjectRelease();
      uint64_t v81 = v58;
      MEMORY[0x1F4188790](v59, v60);
      int64_t v70 = (uint64_t *)v8;
      unint64_t v71 = v54;
      swift_getWitnessTable();
      swift_getWitnessTable();
      sub_1D17BDF90();
      *(void *)&long long v77 = v81;
      sub_1D17BE490();
      long long v77 = v79;
      long long v78 = v80;
      sub_1D17BE6B0();
      swift_getWitnessTable();
      uint64_t v45 = sub_1D17BE290();
      swift_bridgeObjectRelease();
      return v45;
    }
    __swift_instantiateConcreteTypeFromMangledName(qword_1EA651CF8);
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_1D17C91F0;
    sub_1D17BE850();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)&long long v79 = 0xD00000000000001FLL;
    *((void *)&v79 + 1) = 0x80000001D17D5030;
    uint64_t v43 = v2[3];
    if (*(void *)(v43 + 16))
    {
      *(void *)&long long v77 = *(void *)(*(void *)(v43 + 32) + 16);
      sub_1D17BEB70();
      sub_1D17BE030();
      swift_bridgeObjectRelease();
      long long v44 = v79;
      *(void *)(v42 + 56) = MEMORY[0x1E4FBB1A0];
      *(_OWORD *)(v42 + 32) = v44;
      sub_1D17BED00();
      swift_bridgeObjectRelease();
      swift_getTupleTypeMetadata2();
      return sub_1D17BE1A0();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D1686D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a3;
  uint64_t v6 = *(void *)(*(void *)a2 + 80);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v10 = &v15[-v9];
  double v19 = *(double *)(v11 + 16);
  uint64_t v16 = v6;
  uint64_t v17 = *(void *)(v12 + 88);
  uint64_t v18 = v8;
  sub_1D17BE260();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_1D17BE8E0();
  uint64_t v13 = MEMORY[0x1D25F8BB0]();
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  double v19 = (double)v13 / (double)a4;
  char v20 = 0;
  sub_1D17BDE90();
  return sub_1D17BDEB0();
}

uint64_t sub_1D1686ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = *a5;
  void v10[2] = a4;
  v10[3] = a5;
  uint64_t v8 = sub_1D166609C((void (*)(uint64_t *__return_ptr, _OWORD *))sub_1D1687E84, (uint64_t)v10, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 80) - 8) + 16))(a1, a2);
  return v8;
}

uint64_t sub_1D1686F8C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v7 = *a1;
  sub_1D1668120((uint64_t)(a1 + 1), (uint64_t)v15 + 8);
  uint64_t result = (uint64_t)sub_1D16607C4((_OWORD *)((char *)v15 + 8), v17);
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v7 >= *(void *)(a2 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  sub_1D1687EA4(a2 + 40 * v7 + 32, (uint64_t)&v12);
  if (*((void *)&v13 + 1))
  {
    v15[0] = v12;
    v15[1] = v13;
    uint64_t v16 = v14;
    uint64_t v9 = (*(uint64_t (**)(_OWORD *, _OWORD *))(*(void *)a3 + 232))(v17, v15);
    if (v10) {
      uint64_t v11 = 0x3CB0000000000000;
    }
    else {
      uint64_t v11 = v9;
    }
    sub_1D165C1C0((uint64_t)v15);
    uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
    *a4 = v11;
  }
  else
  {
    sub_1D1687F0C((uint64_t)&v12);
    uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
    *a4 = 0x3CB0000000000000;
  }
  return result;
}

uint64_t sub_1D16870A4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA651CF0);
  uint64_t v6 = *(void *)(a1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA6516E8);
  uint64_t v7 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t result = a2(a3, a1, v6);
  *(void *)(a3 + v7) = result;
  return result;
}

double sub_1D1687168(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(a1, a2, a5);
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11)
  {
    long long v12 = (double *)(a3 + 32);
    double v13 = 1.0;
    do
    {
      double v14 = *v12++;
      double v13 = v13 * v14;
      --v11;
    }
    while (v11);
  }
  else
  {
    double v13 = 1.0;
  }
  MEMORY[0x1D25F8850](&v17, a2, *a4, a5, MEMORY[0x1E4FBB3D0], a6);
  double v15 = v17;
  if (v18) {
    double v15 = 0.0;
  }
  return v13 * v15;
}

void sub_1D1687244(uint64_t a1@<X0>, double (*a2)(uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA6516E8);
  uint64_t v6 = *(void *)(a1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  uint64_t v7 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  *(double *)(a3 + v7) = a2(a3, a1, v6);
}

uint64_t sub_1D16872FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x1F4188790](TupleTypeMetadata2 - 8, v7);
  char v10 = (char *)v15 - v9;
  uint64_t v11 = *(int *)(v8 + 56);
  uint64_t v12 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v15 - v9, a1, a2);
  uint64_t v13 = *(void *)(a1 + v11);
  *(void *)&v10[v11] = v13;
  *a3 = v13;
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v10, a2);
}

uint64_t MANaiveBayesClassifier.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MANaiveBayesClassifier.__deallocating_deinit()
{
  MANaiveBayesClassifier.deinit();
  return MEMORY[0x1F4186488](v0, 40, 7);
}

uint64_t sub_1D1687474@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v26 = a2;
  double v3 = (double)*(uint64_t *)(a1 + 16);
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_1D167BF18(v4);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v7 = 0;
  uint64_t v8 = v5 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v5 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = MEMORY[0x1E4FBC868];
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v7 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v7 >= v12) {
      goto LABEL_22;
    }
    unint64_t v22 = *(void *)(v8 + 8 * v7);
    if (!v22) {
      break;
    }
LABEL_17:
    unint64_t v11 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v7 << 6);
LABEL_5:
    sub_1D165C164(*(void *)(v5 + 48) + 40 * v15, (uint64_t)v30);
    uint64_t v16 = sub_1D165C164((uint64_t)v30, (uint64_t)v29);
    v27[0] = v30[0];
    v27[1] = v30[1];
    uint64_t v28 = v31;
    MEMORY[0x1F4188790](v16, v17);
    v25[2] = v27;
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_1D168566C((uint64_t)sub_1D1687E54, (uint64_t)v25, a1);
    sub_1D165C1C0((uint64_t)v27);
    uint64_t v19 = *(void *)(v18 + 16);
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v27[0] = v13;
    sub_1D165F2A0((uint64_t)v29, isUniquelyReferenced_nonNull_native, (double)v19 / v3);
    uint64_t v13 = *(void *)&v27[0];
    swift_bridgeObjectRelease();
    uint64_t result = sub_1D165C1C0((uint64_t)v29);
  }
  int64_t v23 = v7 + 1;
  if (v7 + 1 >= v12) {
    goto LABEL_22;
  }
  unint64_t v22 = *(void *)(v8 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v7 + 2;
  if (v7 + 2 >= v12) {
    goto LABEL_22;
  }
  unint64_t v22 = *(void *)(v8 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v7 + 3;
  if (v7 + 3 >= v12)
  {
LABEL_22:
    swift_release();
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E88);
    uint64_t v24 = v26;
    v26[3] = result;
    *uint64_t v24 = v13;
    return result;
  }
  unint64_t v22 = *(void *)(v8 + 8 * v23);
  if (v22)
  {
LABEL_16:
    int64_t v7 = v23;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v7 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_22;
    }
    unint64_t v22 = *(void *)(v8 + 8 * v7);
    ++v23;
    if (v22) {
      goto LABEL_17;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1D16876D4(uint64_t a1, uint64_t a2)
{
  sub_1D1668120(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E88);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    if (*(void *)(v7 + 16) && (unint64_t v4 = sub_1D165A824(a2), (v5 & 1) != 0)) {
      uint64_t v6 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
    }
    else {
      uint64_t v6 = 0;
    }
    swift_bridgeObjectRelease();
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D1687784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1D1685800(a1);
  if (result)
  {
    *(void *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E80);
    Swift::tuple_mean_Double_deviation_Double v4 = MAMatrix.sstddev()();
    uint64_t result = swift_bridgeObjectRelease();
    *(Swift::tuple_mean_Double_deviation_Double *)a2 = v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D1687808(uint64_t a1, uint64_t a2)
{
  sub_1D1668120(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E80);
  *(double *)&uint64_t result = COERCE_DOUBLE(swift_dynamicCast());
  if (result)
  {
    double v5 = v7;
    double v4 = v8;
    sub_1D165C164(a2, (uint64_t)v6);
    *(double *)&uint64_t result = COERCE_DOUBLE(swift_dynamicCast());
    if (result)
    {
      *(double *)&uint64_t result = exp(-((v7 - v5) * (v7 - v5)) / (v4 * v4 + v4 * v4)) / 2.50662827 / v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _s17KnowledgeGraphKit33MAMultinomialNaiveBayesClassifierC7classes4dataACyxGSayxG_SaySays11AnyHashableVGGtcfC_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  MANaiveBayesClassifier.init(classes:data:)(a1, a2);
  return v4;
}

uint64_t MAGaussianNaiveBayesClassifier.__deallocating_deinit()
{
  MANaiveBayesClassifier.deinit();
  return MEMORY[0x1F4186488](v0, 40, 7);
}

uint64_t sub_1D1687970(uint64_t a1, uint64_t a2)
{
  return sub_1D1686324(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1D1687978(uint64_t result, uint64_t (*a2)(unint64_t, uint64_t))
{
  unint64_t v2 = *(void *)(result + 16);
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v4 = 0;
  uint64_t v5 = result + 32;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  do
  {
    if (v4 <= v2) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v4;
    }
    for (unint64_t i = v4; ; ++i)
    {
      if (v7 == i)
      {
        __break(1u);
        return result;
      }
      uint64_t v9 = *(void *)(v5 + 8 * i);
      unint64_t v4 = i + 1;
      swift_bridgeObjectRetain();
      if (a2(i, v9)) {
        break;
      }
      uint64_t result = swift_bridgeObjectRelease();
      if (v2 == v4) {
        return v6;
      }
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      uint64_t result = sub_1D168275C(0, *(void *)(v6 + 16) + 1, 1);
    }
    unint64_t v11 = *(void *)(v6 + 16);
    unint64_t v10 = *(void *)(v6 + 24);
    unint64_t v12 = v11 + 1;
    if (v11 >= v10 >> 1)
    {
      uint64_t result = sub_1D168275C(v10 > 1, v11 + 1, 1);
      unint64_t v12 = v11 + 1;
    }
    *(void *)(v6 + 16) = v12;
    uint64_t v13 = v6 + 16 * v11;
    *(void *)(v13 + 32) = i;
    *(void *)(v13 + 40) = v9;
  }
  while (v2 - 1 != i);
  return v6;
}

uint64_t sub_1D1687AE0(uint64_t a1)
{
  return sub_1D1686D00(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1D1687B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D1686ED4(a1, a2, a3, *(void *)(v3 + 16), *(uint64_t **)(v3 + 24));
}

uint64_t sub_1D1687B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D16870A4(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32), a2);
}

double sub_1D1687B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D1687168(a1, a2, a3, *(void **)(v3 + 32), *(void *)(v3 + 16), *(void *)(v3 + 24));
}

void sub_1D1687B38(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1D1687244(a1, *(double (**)(uint64_t, uint64_t, uint64_t))(v2 + 32), a2);
}

uint64_t sub_1D1687B5C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1D16872FC(a1, *(void *)(v2 + 16), a2);
}

double sub_1D1687B7C(double a1)
{
  double v3 = *(double *)(v1 + 32);
  (*(void (**)(void))(*(void *)(*(void *)(v1 + 16) - 8) + 16))();
  return a1 / v3;
}

void sub_1D1687BD0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(double (**)(uint64_t, uint64_t, double))(v2 + 32);
  uint64_t v6 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  *(double *)(a2 + v6) = v5(a2, a1, *(double *)(a1 + v6));
}

BOOL sub_1D1687C48(uint64_t a1, uint64_t a2)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return *(double *)(a2 + *(int *)(TupleTypeMetadata2 + 48)) < *(double *)(a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_1D1687CB0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for MANaiveBayesClassifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for MANaiveBayesClassifier(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MANaiveBayesClassifier);
}

uint64_t dispatch thunk of MANaiveBayesClassifier.__allocating_init(classes:data:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of MANaiveBayesClassifier.train(progress:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MANaiveBayesClassifier.classify(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MANaiveBayesClassifier.classify(with:limit:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t type metadata accessor for MAMultinomialNaiveBayesClassifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D1687E04()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for MAGaussianNaiveBayesClassifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D1687E54(uint64_t a1)
{
  return MEMORY[0x1D25F91A0](a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1D1687E84@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D1686F8C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1D1687EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651A98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D1687F0C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651A98);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D1687F6C()
{
  return sub_1D17BDFA0() & 1;
}

uint64_t sub_1D1687FB8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1D16FA274(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_1D1692EC8(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1D1688024(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    sub_1D16FA29C();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1D1693554(v6);
  return sub_1D17BE900();
}

uint64_t MAVectorRepresentation.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D16880E8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1D1697A78);
}

{
  return sub_1D16880E8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1D1697D5C);
}

uint64_t MAVectorRepresentation.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D168819C(a1, a2, a3, (uint64_t (*)(void))sub_1D1697A78);
}

{
  return sub_1D168819C(a1, a2, a3, (uint64_t (*)(void))sub_1D1697D5C);
}

uint64_t sub_1D16880E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  swift_allocObject();
  uint64_t v8 = a4(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v8;
}

uint64_t sub_1D168819C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v6;
}

__n128 _s17KnowledgeGraphKit28MASquareMatrixRepresentationC6matrix5nodesAcA8MAMatrixV_SaySo6MANodeCGtcfC_0(__n128 *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  unint64_t v5 = a1[1].n128_u64[0];
  __n128 result = *a1;
  *(__n128 *)(v4 + 16) = *a1;
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = a2;
  return result;
}

unint64_t sub_1D168825C(unint64_t result)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 * v3 < (uint64_t)result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*(void *)(v1[4] + 16) <= result)
  {
LABEL_11:
    __break(1u);
    return MEMORY[0x1D25F9260]();
  }
  uint64_t v4 = v1[5];
  if ((v4 & 0xC000000000000001) != 0) {
    return MEMORY[0x1D25F9260]();
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) > result) {
    return (unint64_t)*(id *)(v4 + 8 * result + 32);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D16882F8(uint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + 40);
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a1, v3);
  unint64_t v5 = v4;
  LOBYTE(a1) = v6;
  uint64_t result = swift_bridgeObjectRelease();
  if (a1) {
    return 0;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = *(void *)(v1 + 32);
    if (v5 < *(void *)(v8 + 16)) {
      return *(void *)(v8 + 8 * v5 + 32);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1D1688384()
{
  return sub_1D168B6E4((void (*)(Swift::Int, Swift::Int, void *))type metadata accessor for MASquareMatrixRepresentation);
}

uint64_t sub_1D168839C(long long *a1)
{
  return sub_1D168B904(a1, (void (*)(void))type metadata accessor for MAVectorRepresentation);
}

unint64_t sub_1D16883B4()
{
  return sub_1D168B9BC((void (*)(uint64_t))type metadata accessor for MAVectorRepresentation);
}

unint64_t sub_1D16883CC(long long *a1)
{
  return sub_1D168BAB0(a1, (void (*)(void *__return_ptr, long long *, long long *))* infix(_:_:), (void (*)(uint64_t))type metadata accessor for MAVectorRepresentation);
}

uint64_t sub_1D16883F8()
{
  return sub_1D168BBBC((void (*)(uint64_t))type metadata accessor for MAVectorRepresentation);
}

unint64_t sub_1D1688410()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  unint64_t v3 = (void *)v0[4];
  swift_bridgeObjectRetain_n();
  unint64_t v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v4 = sub_1D1667604(v3);
  }
  unint64_t result = v3[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    swift_bridgeObjectRelease();
    uint64_t v6 = v0[5];
    type metadata accessor for MAVectorRepresentation();
    unint64_t v7 = (void *)swift_allocObject();
    void v7[2] = v1;
    v7[3] = v2;
    uint64_t v7[4] = v4;
    v7[5] = v6;
    swift_bridgeObjectRetain();
    return (unint64_t)v7;
  }
  return result;
}

unint64_t sub_1D16884D4()
{
  return sub_1D168BCAC((void (*)(uint64_t))type metadata accessor for MAVectorRepresentation);
}

uint64_t sub_1D16884EC(double a1)
{
  unint64_t v2 = v1;
  uint64_t v19 = MEMORY[0x1E4FBC860];
  unint64_t v4 = *(void *)(v1 + 40);
  if (v4 >> 62) {
    goto LABEL_24;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  while (1)
  {
    uint64_t result = swift_allocObject();
    uint64_t v7 = result;
    *(void *)(result + 16) = 0;
    if (!v5) {
      break;
    }
    if (v5 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v8 = *(void *)(v2 + 32);
    swift_retain();
    uint64_t v18 = v7;
    swift_retain();
    unint64_t v9 = 0;
    uint64_t v10 = MEMORY[0x1E4FBC860];
    while (1)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        id v11 = (id)MEMORY[0x1D25F9260](v9, v4);
      }
      else
      {
        if (v9 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_23;
        }
        id v11 = *(id *)(v4 + 8 * v9 + 32);
      }
      id v12 = v11;
      if (v9 >= *(void *)(v8 + 16)) {
        break;
      }
      double v13 = *(double *)(v8 + 32 + 8 * v9);
      if (v13 <= a1)
      {
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1D168277C(0, *(void *)(v10 + 16) + 1, 1);
          uint64_t v10 = v19;
        }
        unint64_t v2 = *(void *)(v10 + 16);
        unint64_t v14 = *(void *)(v10 + 24);
        if (v2 >= v14 >> 1)
        {
          sub_1D168277C(v14 > 1, v2 + 1, 1);
          uint64_t v10 = v19;
        }
        *(void *)(v10 + 16) = v2 + 1;
        unint64_t v15 = v10 + 16 * v2;
        *(void *)(v15 + 32) = v12;
        *(double *)(v15 + 40) = v13;
      }
      if (v5 == ++v9)
      {
        *(void *)(v18 + 16) = v5;
        swift_release_n();
        swift_release_n();
        uint64_t v16 = v19;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  uint64_t v16 = MEMORY[0x1E4FBC860];
LABEL_21:
  type metadata accessor for MAVectorRepresentation();
  swift_allocObject();
  uint64_t v17 = sub_1D1698098(v16);
  swift_release();
  return (uint64_t)v17;
}

void *sub_1D1688738()
{
  return sub_1D168BE3C((void (*)(void))type metadata accessor for MAVectorRepresentation);
}

uint64_t sub_1D16887A8(unint64_t a1, unint64_t a2)
{
  unint64_t v7 = v2;
  unint64_t v9 = *(void *)(v2 + 40);
  unint64_t v10 = v9 >> 62;
  if (v9 >> 62) {
    goto LABEL_94;
  }
  unint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  unint64_t v3 = sub_1D1666E28(0, v11);
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a2, v9);
  unint64_t v11 = v12;
  char v14 = v13;
  swift_bridgeObjectRelease();
  if (v14)
  {
    swift_retain();
    swift_release();
    return v7;
  }
  if ((v11 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = *(void *)(v7 + 32);
    if (v11 < *(void *)(v4 + 16))
    {
      int64_t v49 = v11;
      uint64_t v5 = *(void *)(v7 + 16);
      uint64_t v47 = *(void *)(v7 + 24);
      unint64_t v11 = a1;
      if (!(a1 >> 62))
      {
        uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        goto LABEL_8;
      }
      goto LABEL_99;
    }
    goto LABEL_98;
  }
  while (1)
  {
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_1D17BEAD0();
LABEL_8:
    unint64_t v7 = MEMORY[0x1E4FBC860];
    uint64_t v55 = v5;
    if (v15)
    {
      if (v10)
      {
        swift_bridgeObjectRetain();
        unint64_t v10 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      a2 = 0;
      unint64_t v57 = v11 & 0xC000000000000001;
      unint64_t v51 = v11 + 32;
      uint64_t v52 = v11 & 0xFFFFFFFFFFFFFF8;
      unint64_t v58 = v9 & 0xC000000000000001;
      uint64_t v53 = v4 + 32;
      double v16 = 0.0;
      uint64_t v54 = v15;
      uint64_t v48 = v4;
      while (1)
      {
        if (v57)
        {
          id v30 = (id)MEMORY[0x1D25F9260](a2, v11);
        }
        else
        {
          if (a2 >= *(void *)(v52 + 16)) {
            goto LABEL_93;
          }
          id v30 = *(id *)(v51 + 8 * a2);
        }
        uint64_t v31 = v30;
        if (__OFADD__(a2++, 1)) {
          goto LABEL_87;
        }
        if (v10)
        {
          if (v58)
          {
            swift_bridgeObjectRetain();
            id v34 = (id)MEMORY[0x1D25F9260](0, v9);
          }
          else
          {
            if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_88;
            }
            uint64_t v33 = *(void **)(v9 + 32);
            swift_bridgeObjectRetain();
            id v34 = v33;
          }
          uint64_t v35 = v34;
          unint64_t v11 = sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
          char v36 = sub_1D17BE5C0();

          uint64_t v5 = 0;
          if ((v36 & 1) == 0)
          {
            if (v10 == 1)
            {

              swift_bridgeObjectRelease();
              uint64_t v5 = v55;
LABEL_81:
              unint64_t v11 = a1;
              uint64_t v15 = v54;
              goto LABEL_45;
            }
            if (v58)
            {
              id v42 = (id)MEMORY[0x1D25F9260](1, v9);
            }
            else
            {
              if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
                goto LABEL_96;
              }
              id v42 = *(id *)(v9 + 40);
            }
            uint64_t v43 = v42;
            char v44 = sub_1D17BE5C0();

            if ((v44 & 1) == 0)
            {
              unint64_t v50 = v7;
              unint64_t v7 = 1;
              do
              {
                uint64_t v5 = v7 + 1;
                if (__OFADD__(v7, 1))
                {
                  __break(1u);
                  goto LABEL_86;
                }
                if (v5 == v10)
                {

                  swift_bridgeObjectRelease();
                  uint64_t v5 = v55;
                  uint64_t v4 = v48;
                  unint64_t v7 = v50;
                  goto LABEL_81;
                }
                if (v58)
                {
                  id v45 = (id)MEMORY[0x1D25F9260](v7 + 1, v9);
                }
                else
                {
                  if (v5 < 0) {
                    goto LABEL_89;
                  }
                  if ((unint64_t)v5 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                    goto LABEL_90;
                  }
                  id v45 = *(id *)(v9 + 32 + 8 * v5);
                }
                uint64_t v46 = v45;
                uint64_t v4 = sub_1D17BE5C0();

                ++v7;
              }
              while ((v4 & 1) == 0);
              swift_bridgeObjectRelease();
              uint64_t v4 = v48;
              unint64_t v7 = v50;
              if ((v5 & 0x8000000000000000) == 0) {
                goto LABEL_57;
              }
              goto LABEL_91;
            }
            uint64_t v5 = 1;
          }
          swift_bridgeObjectRelease();
LABEL_57:
          if ((unint64_t)v5 >= *(void *)(v4 + 16)) {
            goto LABEL_92;
          }
          double v6 = *(double *)(v53 + 8 * v5);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v7 = (unint64_t)sub_1D169C99C(0, *(void *)(v7 + 16) + 1, 1, (void *)v7);
          }
          uint64_t v15 = v54;
          uint64_t v37 = (void *)v7;
          unint64_t v38 = *(void *)(v7 + 16);
          uint64_t v39 = v37;
          unint64_t v40 = v37[3];
          if (v38 >= v40 >> 1) {
            uint64_t v39 = sub_1D169C99C((void *)(v40 > 1), v38 + 1, 1, v39);
          }
          double v16 = v16 + v6;
          v39[2] = v38 + 1;
          double v41 = &v39[v38];
          unint64_t v7 = (unint64_t)v39;
          v41[4] = v5;

          uint64_t v5 = v55;
          unint64_t v11 = a1;
        }
        else
        {
        }
LABEL_45:
        if (a2 == v15) {
          goto LABEL_13;
        }
      }
    }
    double v16 = 0.0;
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v17 = swift_retain();
    a2 = sub_1D1695B50(v17, v11);
    swift_bridgeObjectRelease();
    swift_release();
    v59[0] = v7;
    swift_bridgeObjectRetain_n();
    sub_1D1687FB8((uint64_t *)v59);
    swift_bridgeObjectRelease();
    uint64_t v18 = v59[0];
    unint64_t v9 = *(void *)(v59[0] + 16);
    if (!v9) {
      break;
    }
    uint64_t v15 = v7;
    swift_retain();
    unint64_t v10 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(v18 + 8 * v10 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v3 = sub_1D1667640(v3);
      }
      unint64_t v19 = v3[2];
      if (v7 >= v19) {
        break;
      }
      int64_t v20 = v19 - 1;
      uint64_t v21 = v19 - 1 - v7;
      if (v21 < 0) {
        goto LABEL_109;
      }
      memmove(&v3[v7 + 4], &v3[v7 + 5], 8 * v21);
      ++v10;
      v3[2] = v20;
      if (v9 == v10)
      {
        swift_release();
        goto LABEL_21;
      }
    }
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if ((v11 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
    __break(1u);
LABEL_96:
    __break(1u);
  }
LABEL_21:
  swift_release();
  if (v49 >= *(void *)(v4 + 16))
  {
    __break(1u);
  }
  else
  {
    double v6 = *(double *)(v4 + 8 * v49 + 32);
    swift_bridgeObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_23;
    }
  }
  uint64_t v4 = (uint64_t)sub_1D1667604((void *)v4);
LABEL_23:
  if (v49 >= *(void *)(v4 + 16))
  {
    __break(1u);
  }
  else
  {
    *(double *)(v4 + 32 + 8 * v49) = v16 + v6;
    uint64_t v15 = v3[2];
    if ((unsigned __int128)(v5 * (__int128)v15) >> 64 == (v5 * v15) >> 63)
    {
      swift_bridgeObjectRetain();
      unint64_t v9 = sub_1D1665914(v5 * v15, 0.0);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_26;
      }
      goto LABEL_104;
    }
  }
  __break(1u);
LABEL_104:
  unint64_t v9 = (unint64_t)sub_1D1667604((void *)v9);
LABEL_26:
  unint64_t v22 = v3[2];
  if (!v22)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void *)(a2 + 16);
    if (v25)
    {
      v59[0] = MEMORY[0x1E4FBC860];
      sub_1D17BE920();
      uint64_t v26 = 32;
      do
      {
        id v27 = *(id *)(a2 + v26);
        sub_1D17BE8F0();
        sub_1D17BE930();
        sub_1D17BE940();
        sub_1D17BE900();
        v26 += 16;
        --v25;
      }
      while (v25);
      uint64_t v28 = v59[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v5 = v55;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v28 = MEMORY[0x1E4FBC860];
    }
    type metadata accessor for MAVectorRepresentation();
    unint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v5;
    *(void *)(v7 + 24) = v15;
    *(void *)(v7 + 32) = v9;
    *(void *)(v7 + 40) = v28;
    return v7;
  }
  if (v5 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_106;
  }
  if (v47 > 0x7FFFFFFF)
  {
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  if (v5 < (uint64_t)0xFFFFFFFF80000000 || v47 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_107;
  }
  if (!(v22 >> 31))
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = 32;
    unint64_t v24 = v22;
    do
    {
      cblas_dcopy_NEWLAPACK();
      v23 += 8;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
LABEL_108:
  __break(1u);
LABEL_109:
  sub_1D17BEB20();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void *+ infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = (void *)sub_1D167B3C0(v4);
  swift_bridgeObjectRelease();
  double v6 = (uint64_t *)a2[5];
  unint64_t v7 = swift_bridgeObjectRetain();
  unint64_t v8 = sub_1D167B3C0(v7);
  swift_bridgeObjectRelease();
  sub_1D168963C(v8, v5);
  if ((v9 & 0xC000000000000001) != 0) {
    unint64_t v10 = (uint64_t *)sub_1D17BE760();
  }
  else {
    unint64_t v10 = *(uint64_t **)(v9 + 16);
  }
  swift_bridgeObjectRelease();
  unint64_t v11 = (void *)sub_1D1665914((unint64_t)v10, 0.0);
  uint64_t v48 = MEMORY[0x1E4FBC860];
  unint64_t v12 = v3 >> 62;
  if (v3 >> 62) {
    goto LABEL_92;
  }
  uint64_t v13 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  for (uint64_t result = (void *)swift_bridgeObjectRetain(); ; v13 = (uint64_t)result)
  {
    unint64_t v41 = (unint64_t)v6;
    id v42 = a2;
    unint64_t v40 = v10;
    if (!v13)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      if (v12)
      {
        swift_bridgeObjectRetain();
        unint64_t v10 = (uint64_t *)sub_1D17BEAD0();
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v10 = *(uint64_t **)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      unint64_t v20 = v41;
      if (v41 >> 62)
      {
        swift_bridgeObjectRetain();
        a2 = (uint64_t *)sub_1D17BEAD0();
        uint64_t v21 = v42;
        if (a2) {
          goto LABEL_24;
        }
      }
      else
      {
        a2 = *(uint64_t **)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        uint64_t v21 = v42;
        if (a2)
        {
LABEL_24:
          if (v12)
          {
            swift_bridgeObjectRetain();
            uint64_t v47 = sub_1D17BEAD0();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v47 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          unint64_t v22 = 0;
          char v44 = a2;
          unint64_t v46 = v3 & 0xC000000000000001;
          unint64_t v12 = (unint64_t)v10;
          do
          {
            if ((v41 & 0xC000000000000001) != 0)
            {
              uint64_t v23 = (uint64_t *)MEMORY[0x1D25F9260](v22, v20);
            }
            else
            {
              if (v22 >= *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_90;
              }
              uint64_t v23 = (uint64_t *)*(id *)(v41 + 32 + 8 * v22);
            }
            a2 = v23;
            double v6 = (uint64_t *)(v22 + 1);
            if (__OFADD__(v22, 1)) {
              goto LABEL_78;
            }
            if (!v47) {
              goto LABEL_50;
            }
            unint64_t v45 = v12;
            if (v46)
            {
              swift_bridgeObjectRetain();
              id v25 = (id)MEMORY[0x1D25F9260](0, v3);
            }
            else
            {
              if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_79;
              }
              unint64_t v24 = *(void **)(v3 + 32);
              swift_bridgeObjectRetain();
              id v25 = v24;
            }
            uint64_t v26 = v25;
            unint64_t v10 = (uint64_t *)sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
            unint64_t v12 = sub_1D17BE5C0();

            unint64_t v27 = 0;
            if ((v12 & 1) == 0)
            {
              if (v47 == 1)
              {
LABEL_49:
                swift_bridgeObjectRelease();
                unint64_t v20 = v41;
                uint64_t v21 = v42;
                unint64_t v12 = v45;
LABEL_50:
                uint64_t v31 = v21[4];
                if (v22 >= *(void *)(v31 + 16)) {
                  goto LABEL_80;
                }
                uint64_t v32 = *(void *)(v31 + 8 * v22 + 32);
                if (swift_isUniquelyReferenced_nonNull_native())
                {
                  if ((v12 & 0x8000000000000000) != 0) {
                    goto LABEL_82;
                  }
                }
                else
                {
                  unint64_t v11 = sub_1D1667604(v11);
                  if ((v12 & 0x8000000000000000) != 0) {
                    goto LABEL_82;
                  }
                }
                if (v12 >= v11[2]) {
                  goto LABEL_81;
                }
                v11[v12 + 4] = v32;
                uint64_t v33 = a2;
                MEMORY[0x1D25F8AB0]();
                if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  sub_1D17BE170();
                }
                sub_1D17BE1F0();
                unint64_t v10 = &v48;
                sub_1D17BE150();

                ++v12;
                goto LABEL_29;
              }
              if (v46)
              {
                id v34 = (id)MEMORY[0x1D25F9260](1, v3);
              }
              else
              {
                if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
                  goto LABEL_91;
                }
                id v34 = *(id *)(v3 + 40);
              }
              uint64_t v35 = v34;
              unint64_t v12 = sub_1D17BE5C0();

              if ((v12 & 1) == 0)
              {
                uint64_t v36 = 1;
                do
                {
                  unint64_t v27 = v36 + 1;
                  if (__OFADD__(v36, 1))
                  {
                    __break(1u);
                    goto LABEL_77;
                  }
                  if (v27 == v47) {
                    goto LABEL_49;
                  }
                  if (v46)
                  {
                    id v37 = (id)MEMORY[0x1D25F9260](v36 + 1, v3);
                  }
                  else
                  {
                    if ((v27 & 0x8000000000000000) != 0) {
                      goto LABEL_83;
                    }
                    if (v27 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                      goto LABEL_84;
                    }
                    id v37 = *(id *)(v3 + 32 + 8 * v27);
                  }
                  unint64_t v12 = (unint64_t)v37;
                  char v38 = sub_1D17BE5C0();

                  ++v36;
                }
                while ((v38 & 1) == 0);
                swift_bridgeObjectRelease();
                unint64_t v20 = v41;
                uint64_t v21 = v42;
                if ((v27 & 0x8000000000000000) == 0) {
                  goto LABEL_41;
                }
                goto LABEL_89;
              }
              unint64_t v27 = 1;
              unint64_t v20 = v41;
              uint64_t v21 = v42;
            }
            swift_bridgeObjectRelease();
LABEL_41:
            if (v27 >= *(void *)(*(void *)(a1 + 32) + 16)) {
              goto LABEL_85;
            }
            uint64_t v28 = v21[4];
            if (v22 >= *(void *)(v28 + 16)) {
              goto LABEL_86;
            }
            if (v27 >= v11[2]) {
              goto LABEL_87;
            }
            double v29 = *(double *)(v28 + 8 * v22 + 32);
            double v30 = *(double *)&v11[v27 + 4];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v11 = sub_1D1667604(v11);
            }
            unint64_t v12 = v45;
            if (v27 >= v11[2]) {
              goto LABEL_88;
            }
            *(double *)&v11[v27 + 4] = v29 + v30;

LABEL_29:
            ++v22;
          }
          while (v6 != v44);
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v39 = v48;
      type metadata accessor for MAVectorRepresentation();
      uint64_t result = (void *)swift_allocObject();
      result[2] = 1;
      result[3] = v40;
      result[4] = v11;
      result[5] = v39;
      return result;
    }
    if (v13 < 1) {
      break;
    }
    uint64_t v15 = *(void *)(a1 + 32);
    if ((unint64_t)(v13 - 1) >= *(void *)(v15 + 16)) {
      goto LABEL_96;
    }
    unint64_t v16 = 0;
    uint64_t v17 = v15 + 32;
    while (1)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        uint64_t v18 = (uint64_t *)MEMORY[0x1D25F9260](v16, v3);
      }
      else {
        uint64_t v18 = (uint64_t *)*(id *)(v3 + 8 * v16 + 32);
      }
      unint64_t v10 = v18;
      uint64_t v19 = *(void *)(v17 + 8 * v16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v11 = sub_1D1667604(v11);
      }
      if (v16 >= v11[2]) {
        break;
      }
      v11[v16 + 4] = v19;
      a2 = v10;
      MEMORY[0x1D25F8AB0]();
      double v6 = *(uint64_t **)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((unint64_t)v6 >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1D17BE170();
      }
      ++v16;
      sub_1D17BE1F0();
      sub_1D17BE150();

      if (v13 == v16) {
        goto LABEL_19;
      }
    }
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_1D17BEAD0();
  }
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

void sub_1D168963C(unint64_t a1, void *a2)
{
  unint64_t v2 = a1;
  v19[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    sub_1D1680D38((unint64_t *)&qword_1EA651A78, (unint64_t *)&qword_1EA652D30);
    sub_1D17BE390();
    unint64_t v2 = (unint64_t)v19[2];
    uint64_t v18 = v19[3];
    uint64_t v3 = (uint64_t)v19[4];
    id v4 = v19[5];
    unint64_t v5 = (unint64_t)v19[6];
  }
  else
  {
    id v4 = 0;
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = (void *)(a1 + 56);
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
  }
  uint64_t v17 = v3;
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  if ((v2 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | ((void)v4 << 6);
      unint64_t v12 = (char *)v4;
      goto LABEL_29;
    }
    uint64_t v14 = (uint64_t)v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v14 >= v9) {
      goto LABEL_32;
    }
    unint64_t v15 = v18[v14];
    unint64_t v12 = (char *)v4 + 1;
    if (!v15)
    {
      unint64_t v12 = (char *)v4 + 2;
      if ((uint64_t)v4 + 2 >= v9) {
        goto LABEL_32;
      }
      unint64_t v15 = v18[(void)v12];
      if (!v15)
      {
        unint64_t v12 = (char *)v4 + 3;
        if ((uint64_t)v4 + 3 >= v9) {
          goto LABEL_32;
        }
        unint64_t v15 = v18[(void)v12];
        if (!v15)
        {
          unint64_t v12 = (char *)v4 + 4;
          if ((uint64_t)v4 + 4 >= v9) {
            goto LABEL_32;
          }
          unint64_t v15 = v18[(void)v12];
          if (!v15)
          {
            unint64_t v12 = (char *)v4 + 5;
            if ((uint64_t)v4 + 5 >= v9) {
              goto LABEL_32;
            }
            unint64_t v15 = v18[(void)v12];
            if (!v15)
            {
              unint64_t v16 = (char *)v4 + 6;
              while ((char *)v9 != v16)
              {
                unint64_t v15 = v18[(void)v16++];
                if (v15)
                {
                  unint64_t v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              unint64_t v5 = 0;
LABEL_33:
              sub_1D16681F0(v2, v18, v17, v4, v5);
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + ((void)v12 << 6);
LABEL_29:
    id v13 = *(id *)(*(void *)(v2 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_33;
    }
    while (1)
    {
      sub_1D1671FA0(v19, v13);

      id v4 = v12;
      unint64_t v5 = v10;
      if ((v2 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (sub_1D17BE7A0())
      {
        sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v13 = v19[0];
        swift_unknownObjectRelease();
        unint64_t v12 = (char *)v4;
        uint64_t v10 = v5;
        if (v13) {
          continue;
        }
      }
      goto LABEL_33;
    }
  }
  __break(1u);
}

void *- infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = swift_bridgeObjectRetain();
  unint64_t v5 = (void *)sub_1D167B3C0(v4);
  swift_bridgeObjectRelease();
  uint64_t v42 = a2;
  unint64_t v6 = *(void *)(a2 + 40);
  unint64_t v7 = swift_bridgeObjectRetain();
  unint64_t v8 = sub_1D167B3C0(v7);
  swift_bridgeObjectRelease();
  sub_1D168963C(v8, v5);
  if ((v9 & 0xC000000000000001) != 0) {
    uint64_t v10 = (uint64_t *)sub_1D17BE760();
  }
  else {
    uint64_t v10 = *(uint64_t **)(v9 + 16);
  }
  swift_bridgeObjectRelease();
  unint64_t v11 = (void *)sub_1D1665914((unint64_t)v10, 0.0);
  uint64_t v48 = MEMORY[0x1E4FBC860];
  unint64_t v12 = (void *)(v3 >> 62);
  if (v3 >> 62) {
    goto LABEL_93;
  }
  uint64_t v13 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  for (uint64_t result = (void *)swift_bridgeObjectRetain(); ; v13 = (uint64_t)result)
  {
    unint64_t v41 = v6;
    unint64_t v40 = v10;
    if (!v13)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      if (v12)
      {
        swift_bridgeObjectRetain();
        unint64_t v20 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v20 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      unint64_t v21 = v41;
      if (v41 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = (uint64_t *)sub_1D17BEAD0();
        if (v10) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v10 = *(uint64_t **)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v10)
        {
LABEL_24:
          if (v12)
          {
            swift_bridgeObjectRetain();
            uint64_t v47 = sub_1D17BEAD0();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v47 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          unint64_t v22 = 0;
          unint64_t v45 = v10;
          unint64_t v46 = v3 & 0xC000000000000001;
          do
          {
            if ((v41 & 0xC000000000000001) != 0)
            {
              id v23 = (id)MEMORY[0x1D25F9260](v22, v21);
            }
            else
            {
              if (v22 >= *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_91;
              }
              id v23 = *(id *)(v41 + 32 + 8 * v22);
            }
            unint64_t v6 = (unint64_t)v23;
            unint64_t v24 = (uint64_t *)(v22 + 1);
            if (__OFADD__(v22, 1)) {
              goto LABEL_80;
            }
            if (!v47) {
              goto LABEL_53;
            }
            if (v46)
            {
              swift_bridgeObjectRetain();
              id v26 = (id)MEMORY[0x1D25F9260](0, v3);
            }
            else
            {
              if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_81;
              }
              id v25 = *(void **)(v3 + 32);
              swift_bridgeObjectRetain();
              id v26 = v25;
            }
            unint64_t v27 = v26;
            uint64_t v10 = (uint64_t *)sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
            unint64_t v12 = (void *)sub_1D17BE5C0();

            unint64_t v28 = 0;
            if ((v12 & 1) == 0)
            {
              unint64_t v44 = v20;
              if (v47 == 1)
              {
LABEL_52:
                swift_bridgeObjectRelease();
                unint64_t v21 = v41;
                unint64_t v20 = v44;
LABEL_53:
                if (swift_isUniquelyReferenced_nonNull_native())
                {
                  if ((v20 & 0x8000000000000000) != 0) {
                    goto LABEL_83;
                  }
                }
                else
                {
                  unint64_t v11 = sub_1D1667604(v11);
                  if ((v20 & 0x8000000000000000) != 0) {
                    goto LABEL_83;
                  }
                }
                if (v20 >= v11[2]) {
                  goto LABEL_82;
                }
                v11[v20 + 4] = 0;
                id v33 = (id)v6;
                MEMORY[0x1D25F8AB0]();
                unint64_t v6 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (v6 >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  sub_1D17BE170();
                }
                sub_1D17BE1F0();
                uint64_t v10 = &v48;
                sub_1D17BE150();

                ++v20;
                goto LABEL_29;
              }
              if (v46)
              {
                id v34 = (id)MEMORY[0x1D25F9260](1, v3);
              }
              else
              {
                if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
                  goto LABEL_92;
                }
                id v34 = *(id *)(v3 + 40);
              }
              uint64_t v35 = v34;
              unint64_t v12 = (void *)sub_1D17BE5C0();

              if ((v12 & 1) == 0)
              {
                uint64_t v36 = 1;
                do
                {
                  unint64_t v28 = v36 + 1;
                  if (__OFADD__(v36, 1))
                  {
                    __break(1u);
                    goto LABEL_79;
                  }
                  if (v28 == v47) {
                    goto LABEL_52;
                  }
                  if (v46)
                  {
                    id v37 = (id)MEMORY[0x1D25F9260](v36 + 1, v3);
                  }
                  else
                  {
                    if ((v28 & 0x8000000000000000) != 0) {
                      goto LABEL_84;
                    }
                    if (v28 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                      goto LABEL_85;
                    }
                    id v37 = *(id *)(v3 + 32 + 8 * v28);
                  }
                  unint64_t v12 = v37;
                  char v38 = sub_1D17BE5C0();

                  ++v36;
                }
                while ((v38 & 1) == 0);
                swift_bridgeObjectRelease();
                unint64_t v21 = v41;
                unint64_t v20 = v44;
                if ((v28 & 0x8000000000000000) == 0) {
                  goto LABEL_41;
                }
                goto LABEL_90;
              }
              unint64_t v28 = 1;
              unint64_t v21 = v41;
            }
            swift_bridgeObjectRelease();
LABEL_41:
            if (v28 >= *(void *)(*(void *)(a1 + 32) + 16)) {
              goto LABEL_86;
            }
            if (v28 >= v11[2]) {
              goto LABEL_87;
            }
            uint64_t v29 = *(void *)(v42 + 32);
            if (v22 >= *(void *)(v29 + 16)) {
              goto LABEL_88;
            }
            double v30 = (double *)&v11[v28];
            double v31 = *(double *)(v29 + 8 * v22 + 32);
            if (v30[4] - v31 > 0.0) {
              double v32 = v30[4] - v31;
            }
            else {
              double v32 = 0.0;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v11 = sub_1D1667604(v11);
            }
            if (v28 >= v11[2]) {
              goto LABEL_89;
            }
            *(double *)&v11[v28 + 4] = v32;

LABEL_29:
            ++v22;
          }
          while (v24 != v45);
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v39 = v48;
      type metadata accessor for MAVectorRepresentation();
      uint64_t result = (void *)swift_allocObject();
      result[2] = 1;
      result[3] = v40;
      result[4] = v11;
      result[5] = v39;
      return result;
    }
    if (v13 < 1) {
      break;
    }
    uint64_t v15 = *(void *)(a1 + 32);
    if ((unint64_t)(v13 - 1) >= *(void *)(v15 + 16)) {
      goto LABEL_97;
    }
    unint64_t v6 = 0;
    uint64_t v16 = v15 + 32;
    while (1)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        uint64_t v17 = (uint64_t *)MEMORY[0x1D25F9260](v6, v3);
      }
      else {
        uint64_t v17 = (uint64_t *)*(id *)(v3 + 8 * v6 + 32);
      }
      uint64_t v10 = v17;
      uint64_t v18 = *(void *)(v16 + 8 * v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v11 = sub_1D1667604(v11);
      }
      if (v6 >= v11[2]) {
        break;
      }
      v11[v6 + 4] = v18;
      uint64_t v19 = v10;
      MEMORY[0x1D25F8AB0]();
      if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1D17BE170();
      }
      ++v6;
      sub_1D17BE1F0();
      sub_1D17BE150();

      if (v13 == v6) {
        goto LABEL_19;
      }
    }
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_1D17BEAD0();
  }
  __break(1u);
LABEL_97:
  __break(1u);
  return result;
}

uint64_t MAVectorRepresentation.makeIterator()()
{
  unint64_t v1 = *(void *)(v0 + 40);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0;
  unint64_t v4 = (void *)swift_allocObject();
  _OWORD v4[2] = v3;
  v4[3] = v2;
  v4[4] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E90);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1D1698240;
  *(void *)(v5 + 24) = v4;
  swift_retain();
  return v5;
}

void *sub_1D168A044@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v6 = result[2];
  if (v6 == a2)
  {
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = a3;
    result[2] = v6 + 1;
    uint64_t v7 = *(void *)(a3 + 40);
    if ((v7 & 0xC000000000000001) == 0)
    {
      if ((v6 & 0x8000000000000000) == 0)
      {
        if (v6 < *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t result = *(id *)(v7 + 8 * v6 + 32);
          goto LABEL_8;
        }
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
  }
  uint64_t result = (void *)MEMORY[0x1D25F9260](v6);
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v8 = *(void *)(v4 + 32);
  if (v6 < *(void *)(v8 + 16))
  {
    uint64_t v9 = *(void *)(v8 + 8 * v6 + 32);
    *a4 = result;
    a4[1] = v9;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1D168A0F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = MAVectorRepresentation.makeIterator()();
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t sub_1D168A138()
{
  uint64_t v1 = sub_1D1694A44(*v0);
  swift_release();
  return v1;
}

uint64_t sub_1D168A170(uint64_t *a1, void *a2, uint64_t a3)
{
  return sub_1D16F74E4(a1, a2, a3);
}

uint64_t sub_1D168A194()
{
  return sub_1D17BE0B0();
}

Swift::Double __swiftcall MAVectorRepresentation.sum()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, uint64_t))MEMORY[0x1E4F16A48];
  sub_1D168D718(v0);
  return result;
}

Swift::Double __swiftcall MAVectorRepresentation.mean()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, uint64_t))MEMORY[0x1E4F169A8];
  sub_1D168D718(v0);
  return result;
}

Swift::Double __swiftcall MAVectorRepresentation.pstddev()()
{
  sub_1D168D8A8();
  return result;
}

uint64_t MAVectorRepresentation.min()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, void *, uint64_t))MEMORY[0x1E4F169E0];
  return sub_1D168A438(v0, (uint64_t (*)(uint64_t, void *, unsigned char *))sub_1D1695774);
}

uint64_t MAVectorRepresentation.max()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, void *, uint64_t))MEMORY[0x1E4F16988];
  return sub_1D168A438(v0, (uint64_t (*)(uint64_t, void *, unsigned char *))sub_1D1695774);
}

uint64_t sub_1D168A438(void (*a1)(uint64_t, uint64_t, void *, void *, uint64_t), uint64_t (*a2)(uint64_t, void *, unsigned char *))
{
  uint64_t v3 = v2;
  v16[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  v15[0] = 0;
  v16[0] = 0;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (((v4 * v5) & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    a1(v6 + 32, 1, v15, v16, v4 * v5);
    swift_bridgeObjectRelease();
    if ((v16[0] & 0x8000000000000000) == 0)
    {
      double v9 = *(double *)v15;
      v15[0] = v4;
      v15[1] = v5;
      void v15[2] = v6;
      uint64_t v10 = MAMatrix.indices(of:)(v9);
      swift_retain();
      unint64_t v11 = a2(v10, v3, v14);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v12 = sub_1D167B3C0(v11);
      swift_bridgeObjectRelease();
      return v12;
    }
LABEL_6:
    __break(1u);
  }
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t MAVectorRepresentation.min(length:)(uint64_t a1)
{
  return sub_1D168A5FC(a1, (void (*)(void *, uint64_t))sub_1D1696450);
}

uint64_t MAVectorRepresentation.max(length:)(uint64_t a1)
{
  return sub_1D168A5FC(a1, (void (*)(void *, uint64_t))sub_1D1697004);
}

uint64_t sub_1D168A5FC(uint64_t a1, void (*a2)(void *, uint64_t))
{
  unint64_t v5 = *(void *)(v2 + 40);
  swift_bridgeObjectRetain_n();
  swift_retain();
  uint64_t v6 = (void *)sub_1D1694CC4(v5);
  swift_bridgeObjectRelease();
  id v23 = v6;
  sub_1D1697820(&v23, v2, a2);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v7 = v23;
  uint64_t v8 = v23[2];
  if (v8)
  {
    id v23 = (void *)MEMORY[0x1E4FBC860];
    sub_1D17BE920();
    uint64_t v9 = 5;
    do
    {
      id v10 = (id)v7[v9];
      sub_1D17BE8F0();
      sub_1D17BE930();
      sub_1D17BE940();
      sub_1D17BE900();
      v9 += 2;
      --v8;
    }
    while (v8);
    unint64_t v11 = v23;
    swift_release();
  }
  else
  {
    swift_release();
    unint64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = sub_1D16978D4(a1, (unint64_t)v11);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0) {
    goto LABEL_7;
  }
  sub_1D17BEBD0();
  swift_unknownObjectRetain_n();
  uint64_t v20 = swift_dynamicCastClass();
  if (!v20)
  {
    swift_unknownObjectRelease();
    uint64_t v20 = MEMORY[0x1E4FBC860];
  }
  uint64_t v21 = *(void *)(v20 + 16);
  swift_release();
  if (__OFSUB__(v18 >> 1, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v21 != (v18 >> 1) - v16)
  {
LABEL_16:
    swift_unknownObjectRelease();
LABEL_7:
    uint64_t v19 = sub_1D1666EF0(v12, v14, v16, v18);
    goto LABEL_14;
  }
  uint64_t v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_unknownObjectRelease();
    uint64_t v19 = MEMORY[0x1E4FBC860];
  }
LABEL_14:
  swift_unknownObjectRelease();
  return v19;
}

uint64_t MAVectorRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(int a1, double a2, double a3)
{
  swift_retain();
  unint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_1D1695EC8(v7, v3, a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    unint64_t v15 = MEMORY[0x1E4FBC860];
    sub_1D17BE920();
    uint64_t v10 = 40;
    do
    {
      id v11 = *(id *)(v8 + v10);
      sub_1D17BE8F0();
      sub_1D17BE930();
      sub_1D17BE940();
      sub_1D17BE900();
      v10 += 16;
      --v9;
    }
    while (v9);
    unint64_t v12 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v12 = MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = sub_1D167B3C0(v12);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t MAVectorRepresentation.linearDeviation(innerRange:)(double a1, double a2)
{
  return MAVectorRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(0, a1, a2);
}

uint64_t MAVectorRepresentation.linearDeviation(outerRange:)(double a1, double a2)
{
  return MAVectorRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(1, a1, a2);
}

uint64_t MAVectorRepresentation.linearDeviation(mid:innerDeviation:)(double a1, double a2)
{
  return MAVectorRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(0, a1 - a2, a1 + a2);
}

uint64_t MAVectorRepresentation.linearDeviation(mid:outerDeviation:)(double a1, double a2)
{
  return MAVectorRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(1, a1 - a2, a1 + a2);
}

uint64_t MAVectorRepresentation.linearDeviation(lowerBound:)(double a1)
{
  return MAVectorRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(0, a1, INFINITY);
}

uint64_t MAVectorRepresentation.linearDeviation(upperBound:)(double a1)
{
  return MAVectorRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(0, -INFINITY, a1);
}

uint64_t MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:)(char a1, double a2, double a3)
{
  __C[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v4 = v3[2];
  uint64_t v5 = v3[3];
  uint64_t v6 = v3[4];
  __C[0] = 0.0;
  vDSP_Length v7 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63) {
    __break(1u);
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_meanvD((const double *)(v6 + 32), 1, __C, v7);
    swift_bridgeObjectRelease();
    double v11 = __C[0];
    double v12 = MAMatrixRepresentation.pstddev()();
    return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(a1 & 1, a2, a3, v11, v12);
  }
  return result;
}

uint64_t MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(char a1, double a2, double a3, double a4, double a5)
{
  unint64_t v6 = *(void *)(v5 + 40);
  if (a5 == 0.0)
  {
    swift_bridgeObjectRetain();
LABEL_44:
    uint64_t v30 = sub_1D167B3C0(v6);
    swift_bridgeObjectRelease();
    return v30;
  }
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_1D17BEAD0();
    uint64_t v11 = result;
  }
  else
  {
    uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v13 = MEMORY[0x1E4FBC860];
  if (!v11)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void *)(v13 + 16);
    if (v27)
    {
      unint64_t v34 = MEMORY[0x1E4FBC860];
      sub_1D17BE920();
      uint64_t v28 = 40;
      do
      {
        id v29 = *(id *)(v13 + v28);
        sub_1D17BE8F0();
        sub_1D17BE930();
        sub_1D17BE940();
        sub_1D17BE900();
        v28 += 16;
        --v27;
      }
      while (v27);
      unint64_t v6 = v34;
      swift_release();
    }
    else
    {
      swift_release();
      unint64_t v6 = MEMORY[0x1E4FBC860];
    }
    goto LABEL_44;
  }
  if (v11 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = *(void *)(v5 + 32);
    if ((unint64_t)(v11 - 1) < *(void *)(v14 + 16))
    {
      uint64_t v15 = 0;
      uint64_t v16 = v14 + 32;
      BOOL v17 = a3 <= 1.0 || a2 >= 1.0;
      char v18 = a1;
      BOOL v33 = v17;
      char v31 = v17 | a1 ^ 1;
      while (1)
      {
        if ((v6 & 0xC000000000000001) != 0) {
          id v19 = (id)MEMORY[0x1D25F9260](v15, v6);
        }
        else {
          id v19 = *(id *)(v6 + 8 * v15 + 32);
        }
        uint64_t v20 = v19;
        double v21 = erfc((a4 - *(double *)(v16 + 8 * v15)) / a5 * 0.707106781) * 0.5;
        if (v21 <= 1.0)
        {
          BOOL v22 = v21 < a2 || v21 > a3;
          if (!v22 && (v18 & 1) == 0)
          {
LABEL_34:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1D16827D4(0, *(void *)(v13 + 16) + 1, 1);
              char v18 = a1;
            }
            unint64_t v25 = *(void *)(v13 + 16);
            unint64_t v24 = *(void *)(v13 + 24);
            if (v25 >= v24 >> 1)
            {
              sub_1D16827D4(v24 > 1, v25 + 1, 1);
              char v18 = a1;
            }
            *(void *)(v13 + 16) = v25 + 1;
            uint64_t v26 = v13 + 16 * v25;
            *(void *)(v26 + 32) = v15;
            *(void *)(v26 + 40) = v20;
            goto LABEL_13;
          }
          if (v21 <= a2 || v21 >= a3) {
            goto LABEL_31;
          }
        }
        else
        {
          if (a2 > 1.0 || a3 < 1.0)
          {
            if (!v33) {
              goto LABEL_12;
            }
LABEL_31:
            if (v18) {
              goto LABEL_34;
            }
            goto LABEL_12;
          }
          if (v31) {
            goto LABEL_34;
          }
        }
LABEL_12:

LABEL_13:
        if (v11 == ++v15) {
          goto LABEL_39;
        }
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:inverse:)(char a1, double a2)
{
  __C[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v3 = v2[2];
  uint64_t v4 = v2[3];
  uint64_t v5 = v2[4];
  __C[0] = 0.0;
  vDSP_Length v6 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63) {
    __break(1u);
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_meanvD((const double *)(v5 + 32), 1, __C, v6);
    swift_bridgeObjectRelease();
    double v9 = __C[0];
    double v10 = MAMatrixRepresentation.pstddev()();
    return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(a1 & 1, a2, 1.0, v9, v10);
  }
  return result;
}

uint64_t MAVectorRepresentation.gaussianCumulative(upperBoundPercent:inverse:)(char a1, double a2)
{
  __C[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v3 = v2[2];
  uint64_t v4 = v2[3];
  uint64_t v5 = v2[4];
  __C[0] = 0.0;
  vDSP_Length v6 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63) {
    __break(1u);
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_meanvD((const double *)(v5 + 32), 1, __C, v6);
    swift_bridgeObjectRelease();
    double v9 = __C[0];
    double v10 = MAMatrixRepresentation.pstddev()();
    return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(a1 & 1, 0.0, a2, v9, v10);
  }
  return result;
}

uint64_t MAVectorRepresentation.gaussianCumulative(innerRange:mu:sigma:)(double a1, double a2, double a3, double a4)
{
  return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(0, a1, a2, a3, a4);
}

uint64_t MAVectorRepresentation.gaussianCumulative(outerRange:mu:sigma:)(double a1, double a2, double a3, double a4)
{
  return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(1, a1, a2, a3, a4);
}

uint64_t MAVectorRepresentation.gaussianCumulative(mid:innerDeviation:mu:sigma:)(double a1, double a2, double a3, double a4)
{
  return sub_1D168B030(0, a1, a2, a3, a4);
}

uint64_t MAVectorRepresentation.gaussianCumulative(mid:outerDeviation:mu:sigma:)(double a1, double a2, double a3, double a4)
{
  return sub_1D168B030(1, a1, a2, a3, a4);
}

uint64_t sub_1D168B030(char a1, double a2, double a3, double a4, double a5)
{
  return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(a1, a2 - a3, a2 + a3, a4, a5);
}

uint64_t MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:mu:sigma:)(double a1, double a2, double a3)
{
  return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(1, a1, 1.0, a2, a3);
}

uint64_t MAVectorRepresentation.gaussianCumulative(upperBoundPercent:mu:sigma:)(double a1, double a2, double a3)
{
  return MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(1, 0.0, a1, a2, a3);
}

uint64_t MAVectorRepresentation.description.getter()
{
  return sub_1D168CCBC(32, 0xD00000000000001ALL, 0x80000001D17D50C0, (uint64_t (*)(uint64_t, double *, char *))sub_1D1695774, (void (*)(uint64_t))MAVectorRepresentation.pstddev());
}

uint64_t sub_1D168B108()
{
  return MAVectorRepresentation.description.getter();
}

uint64_t _s17KnowledgeGraphKit22MAVectorRepresentationC6vector5nodesAcA8MAMatrixV_SaySo6MANodeCGtcfc_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = a2;
  return v2;
}

uint64_t sub_1D168B148(uint64_t result)
{
  uint64_t v3 = v1[2];
  uint64_t v2 = v1[3];
  if ((unsigned __int128)(v3 * (__int128)v2) >> 64 != (v3 * v2) >> 63)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v3 * v2 < result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v4 = result * v2;
  if ((unsigned __int128)(result * (__int128)v2) >> 64 != (result * v2) >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v5 = v4 + result;
  if (__OFADD__(v4, result))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 >= *(void *)(v1[4] + 16))
  {
LABEL_16:
    __break(1u);
    return MEMORY[0x1D25F9260]();
  }
  uint64_t v6 = v1[5];
  if ((v6 & 0xC000000000000001) != 0) {
    return MEMORY[0x1D25F9260]();
  }
  if (result < 0)
  {
    __break(1u);
  }
  else if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)result)
  {
    return (uint64_t)*(id *)(v6 + 8 * result + 32);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D168B20C(uint64_t a1)
{
  unint64_t v3 = v1[5];
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a1, v3);
  uint64_t v5 = v4;
  LOBYTE(a1) = v6;
  uint64_t result = swift_bridgeObjectRelease();
  if (a1) {
    return 0;
  }
  uint64_t v8 = v1[3];
  uint64_t v9 = v5 * v8;
  if ((unsigned __int128)(v5 * (__int128)v8) >> 64 != (v5 * v8) >> 63)
  {
    __break(1u);
    goto LABEL_9;
  }
  BOOL v10 = __OFADD__(v9, v5);
  unint64_t v11 = v9 + v5;
  if (v10)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v11 & 0x8000000000000000) == 0)
  {
    uint64_t v12 = v1[4];
    if (v11 < *(void *)(v12 + 16)) {
      return *(void *)(v12 + 8 * v11 + 32);
    }
    goto LABEL_11;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D168B2BC(unint64_t result, unint64_t a2)
{
  if (*(void *)(v3 + 16) < (int64_t)result)
  {
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v2 = a2;
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 < (uint64_t)a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v5 = result * v4;
  if ((unsigned __int128)((uint64_t)result * (__int128)v4) >> 64 != (uint64_t)(result * v4) >> 63)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v6 = v5 + a2;
  if (__OFADD__(v5, a2))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 >= *(void *)(*(void *)(v3 + 32) + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v3 = *(void *)(v3 + 40);
  if ((v3 & 0xC000000000000001) != 0)
  {
LABEL_19:
    id v9 = (id)MEMORY[0x1D25F9260]();
    MEMORY[0x1D25F9260](v2, v3);
    return (unint64_t)v9;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v7 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7 <= result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v7 > a2)
  {
    uint64_t v8 = *(void **)(v3 + 32 + 8 * a2);
    id v9 = *(id *)(v3 + 32 + 8 * result);
    id v10 = v8;
    return (unint64_t)v9;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1D168B3C4(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = v2[5];
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a1, v5);
  uint64_t v7 = v6;
  char v9 = v8;
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a2, v5);
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t result = swift_bridgeObjectRelease();
  if (v13) {
    return 0;
  }
  uint64_t v15 = v2[3];
  uint64_t v16 = v7 * v15;
  if ((unsigned __int128)(v7 * (__int128)v15) >> 64 != (v7 * v15) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  BOOL v17 = __OFADD__(v16, v11);
  unint64_t v18 = v16 + v11;
  if (v17)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    uint64_t v19 = v2[4];
    if (v18 < *(void *)(v19 + 16)) {
      return *(void *)(v19 + 8 * v18 + 32);
    }
    goto LABEL_12;
  }
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1D168B4B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *(void *)(v2 + 40);
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a1, v5);
  uint64_t v7 = v6;
  LOBYTE(a1) = v8;
  uint64_t result = swift_bridgeObjectRelease();
  if (a1)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  int64_t v10 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)sub_1D1665914(v10, 0.0);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1D1667604(v11);
    uint64_t v11 = (void *)result;
  }
  if (v10 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v10 <= 0x7FFFFFFF)
  {
    if ((unsigned __int128)(v7 * (__int128)v10) >> 64 == (v7 * v10) >> 63)
    {
      cblas_dcopy_NEWLAPACK();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a2 = 1;
      *(void *)(a2 + 8) = v10;
      *(void *)(a2 + 16) = v11;
      *(void *)(a2 + 24) = v7;
      return result;
    }
    goto LABEL_11;
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1D168B5B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = v2[5];
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a1, v5);
  uint64_t v7 = v6;
  LOBYTE(a1) = v8;
  uint64_t result = swift_bridgeObjectRelease();
  if (a1)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  int64_t v10 = v2[2];
  uint64_t v11 = v2[3];
  swift_bridgeObjectRetain();
  char v12 = (void *)sub_1D1665914(v10, 0.0);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1D1667604(v12);
    char v12 = (void *)result;
  }
  if (v10 > 0x7FFFFFFF)
  {
    __break(1u);
  }
  else if (v10 >= (uint64_t)0xFFFFFFFF80000000 && v11 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (v11 <= 0x7FFFFFFF)
    {
      cblas_dcopy_NEWLAPACK();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a2 = v10;
      *(void *)(a2 + 8) = 1;
      *(void *)(a2 + 16) = v12;
      *(void *)(a2 + 24) = v7;
      return result;
    }
    goto LABEL_12;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1D168B6CC()
{
  return sub_1D168B6E4((void (*)(Swift::Int, Swift::Int, void *))type metadata accessor for MAVectorRepresentation);
}

uint64_t sub_1D168B6E4(void (*a1)(Swift::Int, Swift::Int, void *))
{
  KnowledgeGraphKit::MAMatrix v8 = MAMatrix.diag()();
  uint64_t v3 = *(void *)(v1 + 40);
  a1(v8.rows, v8.columns, v8.elements._rawValue);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = v6;
  *(void *)(v4 + 32) = v7;
  *(void *)(v4 + 40) = v3;
  swift_bridgeObjectRetain();
  return v4;
}

void *sub_1D168B774()
{
  uint64_t v5 = v0[3];
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v1 = v0[2];
  uint64_t v3 = v0[4];
  uint64_t v2 = (void *)sub_1D1665914(v0[3], 0.0);
  uint64_t v4 = *(void *)(v3 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_5:
  }
    uint64_t v2 = sub_1D1667604(v2);
  uint64_t v6 = v2[2];
  v10[0] = (uint64_t)(v2 + 4);
  v10[1] = v6;
  sub_1D16F2544(v10, v3 + 32, v4, 0, v5, v1, v5, v3);
  uint64_t v7 = v0[5];
  type metadata accessor for MAVectorRepresentation();
  KnowledgeGraphKit::MAMatrix v8 = (void *)swift_allocObject();
  v8[2] = 1;
  int64_t v8[3] = v5;
  uint64_t v8[4] = v2;
  void v8[5] = v7;
  swift_bridgeObjectRetain();
  return v8;
}

void sub_1D168B84C()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v8 = v0[2];
  uint64_t v9 = v1;
  uint64_t v10 = v2;
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    char v7 = 1;
    MAMatrix.median(range:axe:)(0, v1, &v7, (uint64_t *)&v11);
    long long v6 = v11;
    uint64_t v3 = v12;
    uint64_t v4 = v0[5];
    type metadata accessor for MAVectorRepresentation();
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = v6;
    *(void *)(v5 + 32) = v3;
    *(void *)(v5 + 40) = v4;
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_1D168B8EC(long long *a1)
{
  return sub_1D168B904(a1, (void (*)(void))type metadata accessor for MASquareMatrixRepresentation);
}

uint64_t sub_1D168B904(long long *a1, void (*a2)(void))
{
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = *(void *)(v2 + 32);
  long long v13 = *(_OWORD *)(v2 + 16);
  uint64_t v14 = v5;
  long long v11 = *a1;
  uint64_t v12 = v4;
  * infix(_:_:)((int64_t *)&v13, (vDSP_Length *)&v11, (int64_t *)&v15);
  long long v10 = v15;
  uint64_t v6 = v16;
  uint64_t v7 = *(void *)(v2 + 40);
  a2();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = v6;
  *(void *)(v8 + 40) = v7;
  swift_bridgeObjectRetain();
  return v8;
}

unint64_t sub_1D168B9A4()
{
  return sub_1D168B9BC((void (*)(uint64_t))type metadata accessor for MASquareMatrixRepresentation);
}

unint64_t sub_1D168B9BC(void (*a1)(uint64_t))
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = (void *)v1[4];
  swift_bridgeObjectRetain_n();
  uint64_t v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = sub_1D1667604(v5);
  }
  unint64_t result = v5[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    uint64_t v8 = swift_bridgeObjectRelease();
    uint64_t v9 = v1[5];
    a1(v8);
    long long v10 = (void *)swift_allocObject();
    uint64_t v10[2] = v3;
    v10[3] = v4;
    void v10[4] = v6;
    v10[5] = v9;
    swift_bridgeObjectRetain();
    return (unint64_t)v10;
  }
  return result;
}

unint64_t sub_1D168BA84(long long *a1)
{
  return sub_1D168BAB0(a1, (void (*)(void *__return_ptr, long long *, long long *))+ infix(_:_:), (void (*)(uint64_t))type metadata accessor for MASquareMatrixRepresentation);
}

unint64_t sub_1D168BAB0(long long *a1, void (*a2)(void *__return_ptr, long long *, long long *), void (*a3)(uint64_t))
{
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = *(void *)(v3 + 32);
  long long v17 = *(_OWORD *)(v3 + 16);
  uint64_t v18 = v6;
  long long v15 = *a1;
  uint64_t v16 = v5;
  a2(v19, &v17, &v15);
  uint64_t v7 = v19[0];
  uint64_t v8 = v19[1];
  uint64_t v9 = (void *)v19[2];
  swift_bridgeObjectRetain();
  long long v10 = v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v10 = sub_1D1667604(v9);
  }
  unint64_t result = v9[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    uint64_t v12 = swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v3 + 40);
    a3(v12);
    uint64_t v14 = (void *)swift_allocObject();
    __n128 v14[2] = v7;
    v14[3] = v8;
    unint64_t v14[4] = v10;
    v14[5] = v13;
    swift_bridgeObjectRetain();
    return (unint64_t)v14;
  }
  return result;
}

uint64_t sub_1D168BBA4()
{
  return sub_1D168BBBC((void (*)(uint64_t))type metadata accessor for MASquareMatrixRepresentation);
}

uint64_t sub_1D168BBBC(void (*a1)(uint64_t))
{
  int64_t v3 = v1[3];
  int64_t v4 = v1[4];
  v15[0] = v1[2];
  v15[1] = v3;
  void v15[2] = v4;
  *(void *)&long long v16 = v15[0];
  *((void *)&v16 + 1) = v3;
  int64_t v17 = v4;
  LOBYTE(v11) = 0;
  swift_bridgeObjectRetain();
  MAMatrix.max(axe:)((KnowledgeGraphKit::MAMatrixAxes)&v11);
  long long v11 = v13;
  uint64_t v12 = v14;
  / infix(_:_:)(v15, (vDSP_Length *)&v11, (int64_t *)&v16);
  swift_bridgeObjectRelease();
  uint64_t v5 = swift_bridgeObjectRelease();
  long long v10 = v16;
  int64_t v6 = v17;
  uint64_t v7 = v1[5];
  a1(v5);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = v6;
  *(void *)(v8 + 40) = v7;
  swift_bridgeObjectRetain();
  return v8;
}

unint64_t sub_1D168BC94()
{
  return sub_1D168BCAC((void (*)(uint64_t))type metadata accessor for MASquareMatrixRepresentation);
}

unint64_t sub_1D168BCAC(void (*a1)(uint64_t))
{
  int64_t v3 = v1;
  int64_t v4 = v1[3];
  int64_t v5 = v1[4];
  v18[0] = v1[2];
  v18[1] = v4;
  v18[2] = v5;
  int64_t v19 = v18[0];
  int64_t v20 = v4;
  double v21 = (void *)v5;
  LOBYTE(v14) = 0;
  swift_bridgeObjectRetain();
  MAMatrix.max(axe:)((KnowledgeGraphKit::MAMatrixAxes)&v14);
  long long v14 = v16;
  uint64_t v15 = v17;
  - infix(_:_:)(v18, (uint64_t *)&v14, &v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v6 = v19;
  int64_t v7 = v20;
  uint64_t v8 = v21;
  swift_bridgeObjectRetain();
  uint64_t v9 = v8;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = sub_1D1667604(v8);
  }
  unint64_t result = v8[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    uint64_t v11 = swift_bridgeObjectRelease();
    uint64_t v12 = v3[5];
    a1(v11);
    long long v13 = (void *)swift_allocObject();
    id v13[2] = v6;
    void v13[3] = v7;
    v13[4] = v9;
    v13[5] = v12;
    swift_bridgeObjectRetain();
    return (unint64_t)v13;
  }
  return result;
}

void *sub_1D168BDD0()
{
  return sub_1D168BE3C((void (*)(void))type metadata accessor for MASquareMatrixRepresentation);
}

void *sub_1D168BE3C(void (*a1)(void))
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  int64_t v5 = (double *)v1[4];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v5 = (double *)sub_1D1667604(v5);
  }
  uint64_t v6 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v6 > 0x7FFFFFFF) {
    goto LABEL_9;
  }
  int v10 = v3 * v4;
  vvfabs(v5 + 4, v5 + 4, &v10);
  uint64_t v7 = v1[5];
  a1();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v3;
  int64_t v8[3] = v4;
  uint64_t v8[4] = v5;
  void v8[5] = v7;
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t sub_1D168BF40()
{
  unint64_t v1 = *(void *)(v0 + 40);
  if (!(v1 >> 62)) {
    return *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1D17BEAD0();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1D168BFA0()
{
  unint64_t v1 = *(void *)(v0 + 40);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1D17BEAD0();
    uint64_t v2 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v3 = v2;
  }
  if ((unsigned __int128)(v3 * (__int128)v2) >> 64 != (v3 * v2) >> 63) {
    __break(1u);
  }
  *(void *)&long long v8 = v3;
  *((void *)&v8 + 1) = v2;
  uint64_t v9 = sub_1D1665914(v3 * v2, 0.0);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = sub_1D165C128(0, &qword_1EA651958);
  MEMORY[0x1F4188790](v4, v5);
  sub_1D17BE570();
  type metadata accessor for MASquareMatrixRepresentation();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = v8;
  *(void *)(v6 + 32) = v9;
  *(void *)(v6 + 40) = v1;
  swift_bridgeObjectRetain();
  return v6;
}

void sub_1D168C15C(uint64_t a1, uint64_t a2, char a3, double *a4, unint64_t a5)
{
  uint64_t v7 = a2;
  __C[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a2 + 40);
  if ((unint64_t)v9 >> 62) {
    goto LABEL_57;
  }
  unint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = (void *)sub_1D1665914(v10, 0.0);
  unint64_t v12 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  unint64_t v31 = v12;
  if (!v12)
  {
LABEL_58:
    swift_bridgeObjectRelease();
    goto LABEL_59;
  }
LABEL_3:
  unint64_t v25 = v10;
  uint64_t v26 = a1;
  unint64_t v27 = a5;
  uint64_t v28 = a4;
  unint64_t v12 = 0;
  int64_t v13 = *(void *)(v7 + 16);
  int64_t v14 = *(void *)(v7 + 24);
  uint64_t v30 = v9;
  unint64_t v33 = v9 & 0xC000000000000001;
  uint64_t v9 = v13 * v14;
  BOOL v32 = (unsigned __int128)(a1 * (__int128)v14) >> 64 != (a1 * v14) >> 63;
  uint64_t v15 = *(void *)(v7 + 32) + 32;
  a4 = (double *)(v15 + 8 * a1 * v14);
  uint64_t v29 = 8 * v13 * v14;
  a1 = v31;
  while (1)
  {
    if (v33)
    {
      MEMORY[0x1D25F9260](v12, v30);
      swift_unknownObjectRelease();
      a5 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_47;
      }
    }
    else
    {
      a5 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_48;
      }
    }
    if (a3) {
      break;
    }
    if (v13 != v14) {
      goto LABEL_51;
    }
    __C[0] = 0.0;
    if (v32) {
      goto LABEL_53;
    }
    if (v14 < 0) {
      goto LABEL_70;
    }
    uint64_t v7 = v15 + 8 * v12;
    vDSP_dotprD(a4, 1, (const double *)v7, v13, __C, v13);
    if ((unint64_t)v14 >> 31) {
      goto LABEL_55;
    }
    cblas_dnrm2_NEWLAPACK();
    double v17 = v16;
    cblas_dnrm2_NEWLAPACK();
    double v19 = __C[0] / (v17 * v18);
    if (v19 > 1.0) {
      double v19 = 1.0;
    }
    if (v19 > 0.0) {
      double v20 = v19;
    }
    else {
      double v20 = 0.0;
    }
LABEL_38:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v11 = sub_1D1667604(v11);
      if ((v12 & 0x8000000000000000) == 0) {
        goto LABEL_40;
      }
LABEL_44:
      __break(1u);
LABEL_45:
      swift_bridgeObjectRelease();
      a5 = v27;
      a4 = v28;
      unint64_t v10 = v25;
      a1 = v26;
LABEL_59:
      os_unfair_lock_lock((os_unfair_lock_t)a4);
      if (v10 == *(void *)(a5 + 8))
      {
        unint64_t v12 = *(void *)(a5 + 16);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(a5 + 16) = v12;
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_61;
        }
      }
      else
      {
        __break(1u);
      }
      unint64_t v12 = (unint64_t)sub_1D1667604((void *)v12);
      *(void *)(a5 + 16) = v12;
LABEL_61:
      uint64_t v24 = *(void *)(a5 + 8);
      if (v24 < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
      }
      else if (v24 <= 0x7FFFFFFF)
      {
        if ((unsigned __int128)(a1 * (__int128)v24) >> 64 == (a1 * v24) >> 63)
        {
          cblas_dcopy_NEWLAPACK();
          *(void *)(a5 + 16) = v12;
          swift_bridgeObjectRelease();
          os_unfair_lock_unlock((os_unfair_lock_t)a4);
          return;
        }
LABEL_69:
        __break(1u);
      }
      __break(1u);
      goto LABEL_69;
    }
    if ((v12 & 0x8000000000000000) != 0) {
      goto LABEL_44;
    }
LABEL_40:
    if (v12 >= v11[2])
    {
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      swift_bridgeObjectRetain();
      unint64_t v10 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
      uint64_t v11 = (void *)sub_1D1665914(v10, 0.0);
      swift_bridgeObjectRetain();
      unint64_t v12 = sub_1D17BEAD0();
      unint64_t v31 = v12;
      if (!v12) {
        goto LABEL_58;
      }
      goto LABEL_3;
    }
    *(double *)&v11[v12 + 4] = v20;
    unint64_t v12 = a5;
    if (a5 == a1) {
      goto LABEL_45;
    }
  }
  if (a3 == 1)
  {
    if ((unsigned __int128)(v13 * (__int128)v14) >> 64 != (v13 * v14) >> 63) {
      goto LABEL_49;
    }
    if (v9 < 0) {
      goto LABEL_71;
    }
    if (v9)
    {
      uint64_t v7 = sub_1D17BE1C0();
      *(void *)(v7 + 16) = v9;
      bzero((void *)(v7 + 32), v29);
    }
    else
    {
      uint64_t v7 = MEMORY[0x1E4FBC860];
    }
    __C[0] = 1.0;
    if (v32) {
      goto LABEL_52;
    }
    if (v14 < 0) {
      goto LABEL_70;
    }
    vDSP_vsmsbD(a4, 1, __C, (const double *)(v15 + 8 * v12), v14, (double *)(v7 + 32), 1, v14);
    vDSP_vsqD((const double *)(v7 + 32), 1, (double *)(v7 + 32), 1, v14);
    __C[0] = 0.0;
    swift_bridgeObjectRetain();
    vDSP_sveD((const double *)(v7 + 32), 1, __C, v13 * v14);
    swift_bridgeObjectRelease();
    double v21 = __C[0];
    swift_bridgeObjectRelease();
    double v20 = sqrt(v21);
    goto LABEL_37;
  }
  if ((unsigned __int128)(v13 * (__int128)v14) >> 64 != (v13 * v14) >> 63) {
    goto LABEL_50;
  }
  if (v9 < 0) {
    goto LABEL_71;
  }
  if (v9)
  {
    uint64_t v7 = sub_1D17BE1C0();
    *(void *)(v7 + 16) = v9;
    bzero((void *)(v7 + 32), v29);
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
  __C[0] = 1.0;
  if (v32) {
    goto LABEL_54;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    a1 = v7 + 32;
    vDSP_vsmsbD(a4, 1, __C, (const double *)(v15 + 8 * v12), v14, (double *)(v7 + 32), 1, v14);
    if (v9 > 0x7FFFFFFF) {
      goto LABEL_56;
    }
    swift_bridgeObjectRetain();
    cblas_dasum_NEWLAPACK();
    double v20 = v22;
    swift_bridgeObjectRelease_n();
LABEL_37:
    a1 = v31;
    goto LABEL_38;
  }
LABEL_70:
  sub_1D17BEA30();
  __break(1u);
LABEL_71:
  sub_1D17BEA30();
  __break(1u);
}

uint64_t _s17KnowledgeGraphKit22MAVectorRepresentationCfd_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _s17KnowledgeGraphKit22MAVectorRepresentationCfD_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 48, 7);
}

Swift::Double __swiftcall MASquareMatrixRepresentation.sum()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, uint64_t))MEMORY[0x1E4F16A48];
  sub_1D168D718(v0);
  return result;
}

Swift::Double __swiftcall MASquareMatrixRepresentation.mean()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, uint64_t))MEMORY[0x1E4F169A8];
  sub_1D168D718(v0);
  return result;
}

Swift::Double __swiftcall MASquareMatrixRepresentation.pstddev()()
{
  sub_1D168D8A8();
  return result;
}

uint64_t MASquareMatrixRepresentation.min()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, void *, uint64_t))MEMORY[0x1E4F169E0];
  return sub_1D168A438(v0, (uint64_t (*)(uint64_t, void *, unsigned char *))sub_1D1695638);
}

uint64_t MASquareMatrixRepresentation.max()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, void *, uint64_t))MEMORY[0x1E4F16988];
  return sub_1D168A438(v0, (uint64_t (*)(uint64_t, void *, unsigned char *))sub_1D1695638);
}

uint64_t MASquareMatrixRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(uint64_t a1, double a2, double a3)
{
  return sub_1D168DCE0(a1, (uint64_t (*)(void, void, void))sub_1D1695878, a2, a3);
}

void MASquareMatrixRepresentation.linearDeviation(innerRange:)(double a1, double a2)
{
}

void MASquareMatrixRepresentation.linearDeviation(outerRange:)(double a1, double a2)
{
}

void MASquareMatrixRepresentation.linearDeviation(mid:innerDeviation:)(double a1, double a2)
{
}

void MASquareMatrixRepresentation.linearDeviation(mid:outerDeviation:)(double a1, double a2)
{
}

void MASquareMatrixRepresentation.linearDeviation(lowerBound:)(double a1)
{
}

void MASquareMatrixRepresentation.linearDeviation(upperBound:)(double a1)
{
}

uint64_t MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:)(char a1, double a2, double a3)
{
  return sub_1D168EE78(a1, (double (*)(uint64_t))MASquareMatrixRepresentation.pstddev(), (uint64_t (*)(void, double, double, double, double))MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:), a2, a3);
}

void MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(int a1, double a2, double a3, double a4, double a5)
{
}

void MASquareMatrixRepresentation.gaussianCumulative(innerRange:mu:sigma:)(double a1, double a2, double a3, double a4)
{
}

void MASquareMatrixRepresentation.gaussianCumulative(outerRange:mu:sigma:)(double a1, double a2, double a3, double a4)
{
}

uint64_t MASquareMatrixRepresentation.gaussianCumulative(mid:innerDeviation:mu:sigma:)(double a1, double a2)
{
  return sub_1D168CBE0(a1, a2, 0, (uint64_t (*)(double, double))MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:));
}

uint64_t MASquareMatrixRepresentation.gaussianCumulative(mid:outerDeviation:mu:sigma:)(double a1, double a2)
{
  return sub_1D168CBE0(a1, a2, 1, (uint64_t (*)(double, double))MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:));
}

uint64_t sub_1D168CBE0(double a1, double a2, uint64_t a3, uint64_t (*a4)(double, double))
{
  return a4(a1 - a2, a1 + a2);
}

void MASquareMatrixRepresentation.gaussianCumulative(lowerBoundPercent:mu:sigma:)(double a1, double a2, double a3)
{
}

void MASquareMatrixRepresentation.gaussianCumulative(upperBoundPercent:mu:sigma:)(double a1, double a2, double a3)
{
}

uint64_t MASquareMatrixRepresentation.description.getter()
{
  return sub_1D168CCBC(38, 0xD000000000000020, 0x80000001D17D50E0, (uint64_t (*)(uint64_t, double *, char *))sub_1D1695638, (void (*)(uint64_t))MASquareMatrixRepresentation.pstddev());
}

uint64_t sub_1D168CCBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t, double *, char *), void (*a5)(uint64_t))
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  sub_1D17BE850();
  swift_bridgeObjectRelease();
  uint64_t __C = a2;
  unint64_t v37 = a3;
  double v41 = v5[2];
  double v9 = v41;
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  unint64_t v10 = *((void *)v5 + 3);
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  double v41 = *(double *)&a2;
  unint64_t v42 = a3;
  uint64_t v39 = 10;
  unint64_t v40 = 0xE100000000000000;
  uint64_t v11 = *((void *)v5 + 4);
  *(double *)&uint64_t __C = v9;
  unint64_t v37 = v10;
  uint64_t v30 = v11;
  uint64_t v38 = v11;
  MAMatrix.description(integerPrecision:doublePrecision:)(5, 5);
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  unint64_t v12 = *((void *)v5 + 5);
  unint64_t v31 = v5;
  int64_t v32 = v10;
  uint64_t v29 = a4;
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_1D17BEAD0();
    if (!v13) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v13) {
      goto LABEL_10;
    }
  }
  if (v13 < 1) {
    goto LABEL_18;
  }
  uint64_t v14 = 0;
  do
  {
    if ((v12 & 0xC000000000000001) != 0) {
      id v15 = (id)MEMORY[0x1D25F9260](v14, v12);
    }
    else {
      id v15 = *(id *)(v12 + 8 * v14 + 32);
    }
    double v16 = v15;
    ++v14;
    uint64_t __C = 2314;
    unint64_t v37 = 0xE200000000000000;
    id v17 = objc_msgSend(v15, sel_visualString);
    sub_1D17BDFF0();

    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();

    swift_bridgeObjectRelease();
  }
  while (v13 != v14);
LABEL_10:
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  unint64_t v37 = 0xE000000000000000;
  sub_1D17BE850();
  uint64_t v39 = 0;
  unint64_t v40 = 0xE000000000000000;
  sub_1D17BE030();
  vDSP_Length __I = 0;
  *(double *)&uint64_t __C = 0.0;
  vDSP_Length v18 = *(void *)&v9 * v32;
  if ((unsigned __int128)(*(uint64_t *)&v9 * (__int128)v32) >> 64 != (*(void *)&v9 * v32) >> 63)
  {
    __break(1u);
    goto LABEL_16;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    double v19 = (const double *)(v30 + 32);
    swift_bridgeObjectRetain();
    vDSP_minviD((const double *)(v30 + 32), 1, (double *)&__C, &__I, v18);
    swift_bridgeObjectRelease();
    if ((__I & 0x8000000000000000) == 0)
    {
      double v20 = *(double *)&__C;
      *(double *)&uint64_t __C = v9;
      unint64_t v37 = v32;
      uint64_t v38 = v30;
      uint64_t v21 = MAMatrix.indices(of:)(v20);
      swift_retain();
      unint64_t v22 = v29(v21, v31, v34);
      swift_bridgeObjectRelease();
      swift_release();
      sub_1D167B3C0(v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1D17BE330();
      sub_1D17BE030();
      vDSP_Length __I = 0;
      *(double *)&uint64_t __C = 0.0;
      swift_bridgeObjectRetain();
      vDSP_maxviD(v19, 1, (double *)&__C, &__I, v18);
      swift_bridgeObjectRelease();
      if ((__I & 0x8000000000000000) == 0)
      {
        double v23 = *(double *)&__C;
        *(double *)&uint64_t __C = v9;
        unint64_t v37 = v32;
        uint64_t v38 = v30;
        uint64_t v24 = MAMatrix.indices(of:)(v23);
        swift_retain();
        unint64_t v25 = v29(v24, v31, v33);
        swift_bridgeObjectRelease();
        swift_release();
        sub_1D167B3C0(v25);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1D17BE330();
        sub_1D17BE030();
        *(double *)&uint64_t __C = 0.0;
        swift_bridgeObjectRetain();
        vDSP_meanvD(v19, 1, (double *)&__C, v18);
        swift_bridgeObjectRelease();
        sub_1D17BE330();
        sub_1D17BE030();
        *(double *)&uint64_t __C = v9;
        unint64_t v37 = v32;
        uint64_t v38 = v30;
        MAMatrix.median()();
        sub_1D17BE330();
        uint64_t v26 = sub_1D17BE030();
        a5(v26);
        sub_1D17BE330();
        sub_1D17BE030();
        *(double *)&uint64_t __C = v9;
        unint64_t v37 = v32;
        uint64_t v38 = v30;
        MAMatrix.sstddev()();
        sub_1D17BE330();
        sub_1D17BE030();
        swift_bridgeObjectRelease();
        return *(void *)&v41;
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t sub_1D168D2FC()
{
  return MASquareMatrixRepresentation.description.getter();
}

uint64_t MAMatrixRepresentation.matrix.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(void *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t MAMatrixRepresentation.rnodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MAMatrixRepresentation.cnodes.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 MAMatrixRepresentation.__allocating_init(matrix:rnodes:cnodes:)(__n128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  unint64_t v7 = a1[1].n128_u64[0];
  __n128 result = *a1;
  *(__n128 *)(v6 + 16) = *a1;
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = a2;
  *(void *)(v6 + 48) = a3;
  return result;
}

uint64_t MAMatrixRepresentation.init(matrix:rnodes:cnodes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)a1;
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = a3;
  return v3;
}

id sub_1D168D3B4(unint64_t a1, uint64_t a2)
{
  if (v3[2] < (int64_t)a1)
  {
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v2 = a2;
  uint64_t v5 = v3[3];
  if (v5 < a2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = a1 * v5;
  if ((unsigned __int128)((uint64_t)a1 * (__int128)v5) >> 64 != (uint64_t)(a1 * v5) >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v7 = v6 + a2;
  if (__OFADD__(v6, a2))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v7 >= *(void *)(v3[4] + 16))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v8 = v3[5];
  if ((v8 & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      id result = *(id *)(v8 + 8 * a1 + 32);
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_25;
  }
LABEL_22:
  id result = (id)MEMORY[0x1D25F9260]();
LABEL_11:
  id v4 = result;
  uint64_t v10 = v3[6];
  if ((v10 & 0xC000000000000001) != 0)
  {
LABEL_25:
    MEMORY[0x1D25F9260](v2);
    return v4;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) > v2)
  {
    id v11 = *(id *)(v10 + 8 * v2 + 32);
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D168D4D4(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = v2[5];
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a1, v5);
  uint64_t v7 = v6;
  char v9 = v8;
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  unint64_t v10 = v2[6];
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a2, v10);
  uint64_t v12 = v11;
  char v14 = v13;
  uint64_t result = swift_bridgeObjectRelease();
  if (v14) {
    return 0;
  }
  uint64_t v16 = v2[3];
  uint64_t v17 = v7 * v16;
  if ((unsigned __int128)(v7 * (__int128)v16) >> 64 != (v7 * v16) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  BOOL v18 = __OFADD__(v17, v12);
  unint64_t v19 = v17 + v12;
  if (v18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    uint64_t v20 = v2[4];
    if (v19 < *(void *)(v20 + 16)) {
      return *(void *)(v20 + 8 * v19 + 32);
    }
    goto LABEL_12;
  }
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t MAMatrixRepresentation.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MAMatrixRepresentation.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 56, 7);
}

Swift::Double __swiftcall MAMatrixRepresentation.sum()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, uint64_t))MEMORY[0x1E4F16A48];
  sub_1D168D718(v0);
  return result;
}

Swift::Double __swiftcall MAMatrixRepresentation.mean()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, uint64_t))MEMORY[0x1E4F169A8];
  sub_1D168D718(v0);
  return result;
}

uint64_t sub_1D168D718(void (*a1)(uint64_t, uint64_t, void *, uint64_t))
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  v8[0] = 0;
  uint64_t v5 = v2 * v3;
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63) {
    __break(1u);
  }
  if (v5 < 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    a1(v4 + 32, 1, v8, v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Double _s17KnowledgeGraphKit22MAVectorRepresentationC6medianSdyF_0()
{
  return MAMatrix.median()();
}

Swift::Double __swiftcall MAMatrixRepresentation.pstddev()()
{
  sub_1D168D8A8();
  return result;
}

uint64_t sub_1D168D8A8()
{
  __Mean[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  double __StandardDeviation = 0.0;
  __Mean[0] = 0.0;
  vDSP_Length v4 = v1 * v2;
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 != (v1 * v2) >> 63) {
    __break(1u);
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_normalizeD((const double *)(v3 + 32), 1, 0, 1, __Mean, &__StandardDeviation, v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Double _s17KnowledgeGraphKit22MAVectorRepresentationC7sstddevSdyF_0()
{
  return MAMatrix.sstddev()().deviation;
}

uint64_t _s17KnowledgeGraphKit22MAVectorRepresentationC11frequenciesSDySdSiGyF_0()
{
  return MAMatrix.frequencies()();
}

uint64_t MAMatrixRepresentation.min()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, void *, uint64_t))MEMORY[0x1E4F169E0];
  return sub_1D168DB00(v0);
}

uint64_t MAMatrixRepresentation.max()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, void *, uint64_t))MEMORY[0x1E4F16988];
  return sub_1D168DB00(v0);
}

uint64_t sub_1D168DB00(void (*a1)(uint64_t, uint64_t, void *, void *, uint64_t))
{
  uint64_t v2 = (uint64_t)v1;
  v14[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  v13[0] = 0;
  v14[0] = 0;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (((v3 * v4) & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    a1(v5 + 32, 1, v13, v14, v3 * v4);
    swift_bridgeObjectRelease();
    if ((v14[0] & 0x8000000000000000) == 0)
    {
      double v7 = *(double *)v13;
      v13[0] = v3;
      v13[1] = v4;
      id v13[2] = v5;
      uint64_t v8 = MAMatrix.indices(of:)(v7);
      swift_retain();
      unint64_t v9 = sub_1D1695638(v8, v2);
      swift_release();
      uint64_t v10 = sub_1D167B3C0(v9);
      swift_bridgeObjectRelease();
      swift_retain();
      unint64_t v11 = sub_1D16954F8(v8, v2);
      swift_bridgeObjectRelease();
      swift_release();
      sub_1D167B3C0(v11);
      swift_bridgeObjectRelease();
      return v10;
    }
LABEL_6:
    __break(1u);
  }
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t MAMatrixRepresentation.linearDeviation(lowerBound:upperBound:inverse:)(uint64_t a1, double a2, double a3)
{
  return sub_1D168DCE0(a1, (uint64_t (*)(void, void, void))sub_1D1695A28, a2, a3);
}

uint64_t sub_1D168DCE0(uint64_t result, uint64_t (*a2)(void, void, void), double a3, double a4)
{
  uint64_t v5 = v4[2];
  uint64_t v6 = v4[3];
  uint64_t v7 = v4[4];
  uint64_t v27 = MEMORY[0x1E4FBC860];
  uint64_t v8 = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63) {
    goto LABEL_24;
  }
  uint64_t v10 = v4;
  int v11 = result;
  uint64_t result = swift_allocObject();
  uint64_t v14 = result;
  *(void *)(result + 16) = 0;
  if (v8)
  {
    if (v8 < 1)
    {
LABEL_25:
      __break(1u);
      return result;
    }
    unint64_t v25 = a2;
    swift_bridgeObjectRetain_n();
    uint64_t result = swift_retain();
    unint64_t v15 = 0;
    uint64_t v16 = MEMORY[0x1E4FBC860];
    while (v15 < *(void *)(v7 + 16))
    {
      double v20 = *(double *)(v7 + 8 * v15 + 32);
      BOOL v21 = v20 < a3 || v20 > a4;
      if (!v21 && (v11 & 1) == 0) {
        goto LABEL_18;
      }
      BOOL v22 = v20 > a3;
      if (v20 >= a4) {
        BOOL v22 = 0;
      }
      if (((v22 | v11 ^ 1) & 1) == 0)
      {
LABEL_18:
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1D16826FC(0, *(void *)(v16 + 16) + 1, 1);
          uint64_t v16 = v27;
        }
        unint64_t v18 = *(void *)(v16 + 16);
        unint64_t v17 = *(void *)(v16 + 24);
        if (v18 >= v17 >> 1)
        {
          uint64_t result = sub_1D16826FC(v17 > 1, v18 + 1, 1);
          uint64_t v16 = v27;
        }
        *(void *)(v16 + 16) = v18 + 1;
        uint64_t v19 = v16 + 16 * v18;
        *(void *)(v19 + 32) = v15;
        *(double *)(v19 + 40) = v20;
      }
      if (v8 == ++v15)
      {
        *(void *)(v14 + 16) = v8;
        swift_bridgeObjectRelease_n();
        swift_release_n();
        uint64_t v23 = v27;
        a2 = v25;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  swift_release();
  uint64_t v23 = MEMORY[0x1E4FBC860];
LABEL_22:
  swift_retain();
  uint64_t v24 = a2(v23, v10, v26);
  swift_release();
  swift_release();
  return v24;
}

void MAMatrixRepresentation.linearDeviation(innerRange:)(double a1, double a2)
{
}

void sub_1D168DF24(double a1, double a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void *, unsigned char *))
{
  uint64_t v6 = v5[2];
  uint64_t v7 = v5[3];
  uint64_t v8 = v5[4];
  uint64_t v30 = MEMORY[0x1E4FBC860];
  uint64_t v9 = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
    goto LABEL_22;
  }
  int v11 = v5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  unint64_t v15 = (void *)swift_allocObject();
  void v15[2] = v14;
  int64_t v15[3] = v9;
  v15[4] = v6;
  v15[5] = v7;
  v15[6] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E98);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a4;
  *(void *)(inited + 24) = v15;
  uint64_t v17 = *(void *)(v14 + 16);
  uint64_t v27 = v6 * v7;
  BOOL v18 = __OFSUB__(v9, v17);
  uint64_t v19 = v9 - v17;
  if (v19)
  {
    if ((v19 < 0) ^ v18 | (v19 == 0))
    {
LABEL_23:
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain_n();
    swift_retain();
    uint64_t v21 = 0;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    while ((v17 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(v17 + v21) >= *(void *)(v8 + 16)) {
        goto LABEL_21;
      }
      double v25 = *(double *)(v8 + 8 * v17 + 32 + 8 * v21);
      if (v25 >= a1 && v25 <= a2)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1D16826FC(0, *(void *)(v20 + 16) + 1, 1);
        }
        uint64_t v20 = v30;
        unint64_t v23 = *(void *)(v30 + 16);
        unint64_t v22 = *(void *)(v30 + 24);
        if (v23 >= v22 >> 1)
        {
          sub_1D16826FC(v22 > 1, v23 + 1, 1);
          uint64_t v20 = v30;
        }
        *(void *)(v20 + 16) = v23 + 1;
        uint64_t v24 = v20 + 16 * v23;
        *(void *)(v24 + 32) = v21;
        *(double *)(v24 + 40) = v25;
      }
      if (v19 == ++v21)
      {
        *(void *)(v14 + 16) = v27;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v20 = MEMORY[0x1E4FBC860];
LABEL_19:
  swift_retain();
  a5(v20, v11, v29);
  swift_release();
  swift_release();
}

void MAMatrixRepresentation.linearDeviation(outerRange:)(double a1, double a2)
{
}

void sub_1D168E1A4(double a1, double a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void *, unsigned char *))
{
  uint64_t v6 = v5[2];
  uint64_t v7 = v5[3];
  uint64_t v8 = v5[4];
  uint64_t v30 = MEMORY[0x1E4FBC860];
  uint64_t v9 = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
    goto LABEL_22;
  }
  int v11 = v5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  unint64_t v15 = (void *)swift_allocObject();
  void v15[2] = v14;
  int64_t v15[3] = v9;
  v15[4] = v6;
  v15[5] = v7;
  v15[6] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E98);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a4;
  *(void *)(inited + 24) = v15;
  uint64_t v17 = *(void *)(v14 + 16);
  uint64_t v27 = v6 * v7;
  BOOL v18 = __OFSUB__(v9, v17);
  uint64_t v19 = v9 - v17;
  if (v19)
  {
    if ((v19 < 0) ^ v18 | (v19 == 0))
    {
LABEL_23:
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain_n();
    swift_retain();
    uint64_t v21 = 0;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    while ((v17 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(v17 + v21) >= *(void *)(v8 + 16)) {
        goto LABEL_21;
      }
      double v25 = *(double *)(v8 + 8 * v17 + 32 + 8 * v21);
      if (v25 <= a1 || v25 >= a2)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1D16826FC(0, *(void *)(v20 + 16) + 1, 1);
        }
        uint64_t v20 = v30;
        unint64_t v23 = *(void *)(v30 + 16);
        unint64_t v22 = *(void *)(v30 + 24);
        if (v23 >= v22 >> 1)
        {
          sub_1D16826FC(v22 > 1, v23 + 1, 1);
          uint64_t v20 = v30;
        }
        *(void *)(v20 + 16) = v23 + 1;
        uint64_t v24 = v20 + 16 * v23;
        *(void *)(v24 + 32) = v21;
        *(double *)(v24 + 40) = v25;
      }
      if (v19 == ++v21)
      {
        *(void *)(v14 + 16) = v27;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v20 = MEMORY[0x1E4FBC860];
LABEL_19:
  swift_retain();
  a5(v20, v11, v29);
  swift_release();
  swift_release();
}

void MAMatrixRepresentation.linearDeviation(mid:innerDeviation:)(double a1, double a2)
{
}

void sub_1D168E424(double a1, double a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void *, unsigned char *))
{
  uint64_t v6 = v5[2];
  uint64_t v7 = v5[3];
  uint64_t v8 = v5[4];
  uint64_t v32 = MEMORY[0x1E4FBC860];
  uint64_t v9 = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
    goto LABEL_22;
  }
  int v11 = v5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  unint64_t v15 = (void *)swift_allocObject();
  void v15[2] = v14;
  int64_t v15[3] = v9;
  v15[4] = v6;
  v15[5] = v7;
  v15[6] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E98);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a4;
  *(void *)(inited + 24) = v15;
  uint64_t v17 = *(void *)(v14 + 16);
  uint64_t v29 = v6 * v7;
  BOOL v18 = __OFSUB__(v9, v17);
  uint64_t v19 = v9 - v17;
  if (v19)
  {
    if ((v19 < 0) ^ v18 | (v19 == 0))
    {
LABEL_23:
      __break(1u);
      return;
    }
    double v21 = a1 - a2;
    double v22 = a1 + a2;
    swift_bridgeObjectRetain_n();
    swift_retain();
    uint64_t v23 = 0;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    while ((v17 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(v17 + v23) >= *(void *)(v8 + 16)) {
        goto LABEL_21;
      }
      double v27 = *(double *)(v8 + 8 * v17 + 32 + 8 * v23);
      if (v21 <= v27 && v27 <= v22)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1D16826FC(0, *(void *)(v20 + 16) + 1, 1);
        }
        uint64_t v20 = v32;
        unint64_t v25 = *(void *)(v32 + 16);
        unint64_t v24 = *(void *)(v32 + 24);
        if (v25 >= v24 >> 1)
        {
          sub_1D16826FC(v24 > 1, v25 + 1, 1);
          uint64_t v20 = v32;
        }
        *(void *)(v20 + 16) = v25 + 1;
        uint64_t v26 = v20 + 16 * v25;
        *(void *)(v26 + 32) = v23;
        *(double *)(v26 + 40) = v27;
      }
      if (v19 == ++v23)
      {
        *(void *)(v14 + 16) = v29;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v20 = MEMORY[0x1E4FBC860];
LABEL_19:
  swift_retain();
  a5(v20, v11, v31);
  swift_release();
  swift_release();
}

void MAMatrixRepresentation.linearDeviation(mid:outerDeviation:)(double a1, double a2)
{
}

void sub_1D168E6AC(double a1, double a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void *, unsigned char *))
{
  uint64_t v6 = v5[2];
  uint64_t v7 = v5[3];
  uint64_t v8 = v5[4];
  uint64_t v32 = MEMORY[0x1E4FBC860];
  uint64_t v9 = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
    goto LABEL_22;
  }
  int v11 = v5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  unint64_t v15 = (void *)swift_allocObject();
  void v15[2] = v14;
  int64_t v15[3] = v9;
  v15[4] = v6;
  v15[5] = v7;
  v15[6] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E98);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a4;
  *(void *)(inited + 24) = v15;
  uint64_t v17 = *(void *)(v14 + 16);
  uint64_t v29 = v6 * v7;
  BOOL v18 = __OFSUB__(v9, v17);
  uint64_t v19 = v9 - v17;
  if (v19)
  {
    if ((v19 < 0) ^ v18 | (v19 == 0))
    {
LABEL_23:
      __break(1u);
      return;
    }
    double v21 = a1 - a2;
    double v22 = a1 + a2;
    swift_bridgeObjectRetain_n();
    swift_retain();
    uint64_t v23 = 0;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    while ((v17 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(v17 + v23) >= *(void *)(v8 + 16)) {
        goto LABEL_21;
      }
      double v27 = *(double *)(v8 + 8 * v17 + 32 + 8 * v23);
      if (v27 <= v21 || v22 <= v27)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1D16826FC(0, *(void *)(v20 + 16) + 1, 1);
        }
        uint64_t v20 = v32;
        unint64_t v25 = *(void *)(v32 + 16);
        unint64_t v24 = *(void *)(v32 + 24);
        if (v25 >= v24 >> 1)
        {
          sub_1D16826FC(v24 > 1, v25 + 1, 1);
          uint64_t v20 = v32;
        }
        *(void *)(v20 + 16) = v25 + 1;
        uint64_t v26 = v20 + 16 * v25;
        *(void *)(v26 + 32) = v23;
        *(double *)(v26 + 40) = v27;
      }
      if (v19 == ++v23)
      {
        *(void *)(v14 + 16) = v29;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v20 = MEMORY[0x1E4FBC860];
LABEL_19:
  swift_retain();
  a5(v20, v11, v31);
  swift_release();
  swift_release();
}

void MAMatrixRepresentation.linearDeviation(lowerBound:)(double a1)
{
}

void sub_1D168E934(double a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void *, unsigned char *))
{
  uint64_t v5 = v4[2];
  uint64_t v6 = v4[3];
  uint64_t v7 = v4[4];
  uint64_t v27 = MEMORY[0x1E4FBC860];
  uint64_t v8 = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63) {
    goto LABEL_22;
  }
  unint64_t v25 = v4;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v11;
  v12[3] = v8;
  unint64_t v12[4] = v5;
  v12[5] = v6;
  v12[6] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E98);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a3;
  *(void *)(inited + 24) = v12;
  uint64_t v14 = *(void *)(v11 + 16);
  uint64_t v23 = v5 * v6;
  uint64_t v15 = v8 - v14;
  if (v8 != v14)
  {
    if (v8 <= v14)
    {
LABEL_23:
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain_n();
    swift_retain();
    uint64_t v17 = 0;
    uint64_t v16 = MEMORY[0x1E4FBC860];
    while ((v14 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(v14 + v17) >= *(void *)(v7 + 16)) {
        goto LABEL_21;
      }
      double v21 = *(double *)(v7 + 8 * v14 + 32 + 8 * v17);
      if (v21 >= a1 && v21 <= INFINITY)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1D16826FC(0, *(void *)(v16 + 16) + 1, 1);
        }
        uint64_t v16 = v27;
        unint64_t v19 = *(void *)(v27 + 16);
        unint64_t v18 = *(void *)(v27 + 24);
        if (v19 >= v18 >> 1)
        {
          sub_1D16826FC(v18 > 1, v19 + 1, 1);
          uint64_t v16 = v27;
        }
        *(void *)(v16 + 16) = v19 + 1;
        uint64_t v20 = v16 + 16 * v19;
        *(void *)(v20 + 32) = v17;
        *(double *)(v20 + 40) = v21;
      }
      if (v15 == ++v17)
      {
        *(void *)(v11 + 16) = v23;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v16 = MEMORY[0x1E4FBC860];
LABEL_19:
  swift_retain();
  a4(v16, v25, v26);
  swift_release();
  swift_release();
}

void MAMatrixRepresentation.linearDeviation(upperBound:)(double a1)
{
}

void sub_1D168EBB0(double a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void *, unsigned char *))
{
  uint64_t v5 = v4[2];
  uint64_t v6 = v4[3];
  uint64_t v7 = v4[4];
  uint64_t v27 = MEMORY[0x1E4FBC860];
  uint64_t v8 = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63) {
    goto LABEL_22;
  }
  unint64_t v25 = v4;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v11;
  v12[3] = v8;
  unint64_t v12[4] = v5;
  v12[5] = v6;
  v12[6] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E98);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a3;
  *(void *)(inited + 24) = v12;
  uint64_t v14 = *(void *)(v11 + 16);
  uint64_t v23 = v5 * v6;
  uint64_t v15 = v8 - v14;
  if (v8 != v14)
  {
    if (v8 <= v14)
    {
LABEL_23:
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain_n();
    swift_retain();
    uint64_t v17 = 0;
    uint64_t v16 = MEMORY[0x1E4FBC860];
    while ((v14 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(v14 + v17) >= *(void *)(v7 + 16)) {
        goto LABEL_21;
      }
      double v21 = *(double *)(v7 + 8 * v14 + 32 + 8 * v17);
      if (v21 >= -INFINITY && v21 <= a1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1D16826FC(0, *(void *)(v16 + 16) + 1, 1);
        }
        uint64_t v16 = v27;
        unint64_t v19 = *(void *)(v27 + 16);
        unint64_t v18 = *(void *)(v27 + 24);
        if (v19 >= v18 >> 1)
        {
          sub_1D16826FC(v18 > 1, v19 + 1, 1);
          uint64_t v16 = v27;
        }
        *(void *)(v16 + 16) = v19 + 1;
        uint64_t v20 = v16 + 16 * v19;
        *(void *)(v20 + 32) = v17;
        *(double *)(v20 + 40) = v21;
      }
      if (v15 == ++v17)
      {
        *(void *)(v11 + 16) = v23;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v16 = MEMORY[0x1E4FBC860];
LABEL_19:
  swift_retain();
  a4(v16, v25, v26);
  swift_release();
  swift_release();
}

uint64_t MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:)(char a1, double a2, double a3)
{
  return sub_1D168EE78(a1, (double (*)(uint64_t))MAMatrixRepresentation.pstddev(), (uint64_t (*)(void, double, double, double, double))MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:), a2, a3);
}

uint64_t sub_1D168EE78(char a1, double (*a2)(uint64_t), uint64_t (*a3)(void, double, double, double, double), double a4, double a5)
{
  __C[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v6 = v5[2];
  uint64_t v7 = v5[3];
  uint64_t v8 = v5[4];
  __C[0] = 0.0;
  vDSP_Length v9 = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
    __break(1u);
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_meanvD((const double *)(v8 + 32), 1, __C, v9);
    uint64_t v15 = swift_bridgeObjectRelease();
    double v16 = __C[0];
    double v17 = a2(v15);
    return a3(a1 & 1, a4, a5, v16, v17);
  }
  return result;
}

void MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(int a1, double a2, double a3, double a4, double a5)
{
}

void sub_1D168EFEC(int a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *), void (*a3)(uint64_t, uint64_t, unsigned char *), double a4, double a5, double a6, double a7)
{
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t v10 = *(void *)(v8 + 32);
  if (a7 == 0.0)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    a2(v9, v11, v10, v8, v36);
    swift_bridgeObjectRelease();
LABEL_34:
    swift_release();
    return;
  }
  uint64_t v38 = MEMORY[0x1E4FBC860];
  uint64_t v13 = v9 * v11;
  if ((unsigned __int128)(v9 * (__int128)v11) >> 64 != (v9 * v11) >> 63) {
    goto LABEL_36;
  }
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = 0;
  if (!v13)
  {
    swift_release();
    uint64_t v33 = MEMORY[0x1E4FBC860];
LABEL_33:
    swift_retain();
    a3(v33, v8, v37);
    swift_release();
    goto LABEL_34;
  }
  if (v13 < 1) {
    goto LABEL_37;
  }
  uint64_t v35 = a3;
  int v21 = a1 ^ 1;
  BOOL v22 = a4 < 1.0;
  if (a5 <= 1.0) {
    BOOL v22 = 0;
  }
  char v23 = v22 | v21;
  swift_bridgeObjectRetain_n();
  uint64_t v34 = v20;
  swift_retain();
  unint64_t v24 = 0;
  uint64_t v25 = MEMORY[0x1E4FBC860];
  while (v24 < *(void *)(v10 + 16))
  {
    double v29 = *(double *)(v10 + 8 * v24 + 32);
    double v30 = erfc((a6 - v29) / a7 * 0.707106781) * 0.5;
    if (v30 <= 1.0)
    {
      BOOL v31 = v30 < a4 || v30 > a5;
      if (v31 || (a1 & 1) != 0)
      {
        BOOL v32 = v30 > a4;
        if (v30 >= a5) {
          BOOL v32 = 0;
        }
        if ((v32 | v21)) {
          goto LABEL_12;
        }
      }
LABEL_29:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1D16826FC(0, *(void *)(v25 + 16) + 1, 1);
        uint64_t v25 = v38;
      }
      unint64_t v27 = *(void *)(v25 + 16);
      unint64_t v26 = *(void *)(v25 + 24);
      if (v27 >= v26 >> 1)
      {
        sub_1D16826FC(v26 > 1, v27 + 1, 1);
        uint64_t v25 = v38;
      }
      *(void *)(v25 + 16) = v27 + 1;
      uint64_t v28 = v25 + 16 * v27;
      *(void *)(v28 + 32) = v24;
      *(double *)(v28 + 40) = v29;
      goto LABEL_12;
    }
    if (a4 <= 1.0 && a5 >= 1.0)
    {
      if (v21 & 1 | (a4 >= 1.0) | (a5 <= 1.0)) {
        goto LABEL_29;
      }
    }
    else if ((v23 & 1) == 0)
    {
      goto LABEL_29;
    }
LABEL_12:
    if (v13 == ++v24)
    {
      *(void *)(v34 + 16) = v13;
      swift_bridgeObjectRelease_n();
      swift_release_n();
      uint64_t v33 = v38;
      a3 = v35;
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

unint64_t sub_1D168F2E0@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 24);
  if (v8)
  {
    uint64_t v3 = a3;
    uint64_t v6 = *(void *)result;
    if (*(void *)result == 0x8000000000000000 && v8 == -1) {
      goto LABEL_22;
    }
    uint64_t v4 = a2;
    uint64_t v7 = *(void *)(result + 8);
    uint64_t v10 = *(void *)(a2 + 40);
    unint64_t v5 = v6 / v8;
    if ((v10 & 0xC000000000000001) == 0)
    {
      if ((v5 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v5 < *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v11 = *(id *)(v10 + 8 * v5 + 32);
        goto LABEL_10;
      }
      __break(1u);
      goto LABEL_19;
    }
  }
  else
  {
    __break(1u);
  }
  id v11 = (id)MEMORY[0x1D25F9260](v5);
LABEL_10:
  *uint64_t v3 = v11;
  uint64_t v12 = *(void *)(v4 + 48);
  uint64_t result = v6 - v5 * v8;
  if ((v12 & 0xC000000000000001) != 0)
  {
LABEL_19:
    uint64_t result = MEMORY[0x1D25F9260](result);
    goto LABEL_14;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t result = (unint64_t)*(id *)(v12 + 8 * result + 32);
LABEL_14:
    v3[1] = result;
    v3[2] = v7;
    return result;
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

void MAMatrixRepresentation.gaussianCumulative(innerRange:mu:sigma:)(double a1, double a2, double a3, double a4)
{
}

void MAMatrixRepresentation.gaussianCumulative(outerRange:mu:sigma:)(double a1, double a2, double a3, double a4)
{
}

uint64_t MAMatrixRepresentation.gaussianCumulative(mid:innerDeviation:mu:sigma:)(double a1, double a2)
{
  return sub_1D168CBE0(a1, a2, 0, (uint64_t (*)(double, double))MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:));
}

uint64_t MAMatrixRepresentation.gaussianCumulative(mid:outerDeviation:mu:sigma:)(double a1, double a2)
{
  return sub_1D168CBE0(a1, a2, 1, (uint64_t (*)(double, double))MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:));
}

void MAMatrixRepresentation.gaussianCumulative(lowerBoundPercent:mu:sigma:)(double a1, double a2, double a3)
{
}

void MAMatrixRepresentation.gaussianCumulative(upperBoundPercent:mu:sigma:)(double a1, double a2, double a3)
{
}

uint64_t MAMatrixRepresentation.similarityMatrix(axe:distance:identity:)(unsigned char *a1)
{
  if (*a1 == 1)
  {
    unint64_t v3 = *(void *)(v1 + 40);
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v5 = *(void *)(v1 + 48);
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if ((unsigned __int128)(v4 * (__int128)v6) >> 64 == (v4 * v6) >> 63)
    {
      *(void *)&long long v14 = v4;
      *((void *)&v14 + 1) = v6;
      uint64_t v15 = sub_1D1665914(v4 * v6, 0.0);
      if (!(v5 >> 62)) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
    unint64_t v5 = *(void *)(v1 + 40);
    unint64_t v2 = v5 >> 62;
    if (!(v5 >> 62))
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1D17BEAD0();
  swift_bridgeObjectRelease();
LABEL_11:
  unint64_t v8 = *(void *)(v1 + 48);
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unsigned __int128)(v7 * (__int128)v9) >> 64 != (v7 * v9) >> 63) {
    __break(1u);
  }
  *(void *)&long long v14 = v7;
  *((void *)&v14 + 1) = v9;
  uint64_t v15 = sub_1D1665914(v7 * v9, 0.0);
  if (v2)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
LABEL_16:
  uint64_t v10 = sub_1D165C128(0, &qword_1EA651958);
  MEMORY[0x1F4188790](v10, v11);
  sub_1D17BE570();
  type metadata accessor for MASquareMatrixRepresentation();
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = v14;
  *(void *)(v12 + 32) = v15;
  *(void *)(v12 + 40) = v5;
  swift_bridgeObjectRetain();
  return v12;
}

uint64_t sub_1D168F7A0(Swift::Int a1, double *a2, char a3, char a4, uint64_t a5, uint64_t *a6)
{
  double __C[3] = *(double *)MEMORY[0x1E4F143B8];
  unint64_t v9 = *((void *)a2 + 5);
  if (v9 >> 62)
  {
LABEL_62:
    swift_bridgeObjectRetain();
    unint64_t v26 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    unint64_t v35 = v26;
    uint64_t v10 = (void *)sub_1D1665914(v26, 0.0);
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1D17BEAD0();
    if (v11) {
      goto LABEL_3;
    }
LABEL_63:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  unint64_t v35 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = (void *)sub_1D1665914(v35, 0.0);
  uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v11) {
    goto LABEL_63;
  }
LABEL_3:
  unint64_t v12 = 0;
  unint64_t v34 = v9 & 0xC000000000000001;
  uint64_t v28 = (const double *)v9;
  uint64_t v29 = a5;
  uint64_t v31 = v11;
  while (1)
  {
    if (v34)
    {
      MEMORY[0x1D25F9260](v12, v9);
      swift_unknownObjectRelease();
      unint64_t v13 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_55;
      }
    }
    else
    {
      unint64_t v13 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_56;
      }
    }
    if (v12 == a1 && (a3 & 1) == 0) {
      goto LABEL_36;
    }
    vDSP_Length v15 = *((void *)a2 + 2);
    uint64_t v14 = *((void *)a2 + 3);
    double v16 = a2[4];
    if (!a4)
    {
      __C[0] = 0.0;
      if ((v15 & 0x8000000000000000) != 0) {
        goto LABEL_64;
      }
      unint64_t v9 = *(void *)&v16 + 32 + 8 * a1;
      a5 = *(void *)&v16 + 32 + 8 * v12;
      vDSP_dotprD((const double *)v9, v14, (const double *)a5, v14, __C, v15);
      if (v15 >> 31) {
        goto LABEL_57;
      }
      if (v14 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_59;
      }
      if (v14 > 0x7FFFFFFF) {
        goto LABEL_61;
      }
      cblas_dnrm2_NEWLAPACK();
      double v19 = v18;
      cblas_dnrm2_NEWLAPACK();
      double v21 = __C[0] / (v19 * v20);
      if (v21 > 1.0) {
        double v21 = 1.0;
      }
      if (v21 > 0.0) {
        double v17 = v21;
      }
      else {
        double v17 = 0.0;
      }
      unint64_t v9 = (unint64_t)v28;
      a5 = v29;
      goto LABEL_32;
    }
    if (a4 != 1) {
      break;
    }
    __C[0] = a2[2];
    *(void *)&__C[1] = v14;
    double __C[2] = v16;
    double v17 = MAMatrix.euclideanDistance(columnA:columnB:)(a1, v12);
LABEL_32:
    uint64_t v11 = v31;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if ((v12 & 0x8000000000000000) != 0) {
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v10 = sub_1D1667604(v10);
      if ((v12 & 0x8000000000000000) != 0)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
    }
    if (v12 >= v10[2]) {
      goto LABEL_54;
    }
    *(double *)&v10[v12 + 4] = v17;
LABEL_36:
    unint64_t v12 = v13;
    os_unfair_lock_lock((os_unfair_lock_t)a5);
    if (v35 != *a6) {
      goto LABEL_48;
    }
    if (a6[1] <= a1) {
      goto LABEL_49;
    }
    char v23 = (void *)a6[2];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a6[2] = (uint64_t)v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v23 = sub_1D1667604(v23);
      a6[2] = (uint64_t)v23;
    }
    if (*a6 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_50;
    }
    if (*a6 > 0x7FFFFFFF) {
      goto LABEL_51;
    }
    uint64_t v25 = a6[1];
    if (v25 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_52;
    }
    if (v25 > 0x7FFFFFFF) {
      goto LABEL_53;
    }
    cblas_dcopy_NEWLAPACK();
    a6[2] = (uint64_t)v23;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock((os_unfair_lock_t)a5);
    if (v13 == v11) {
      goto LABEL_63;
    }
  }
  unint64_t v9 = v15 * v14;
  if ((unsigned __int128)((uint64_t)v15 * (__int128)v14) >> 64 != (uint64_t)(v15 * v14) >> 63) {
    goto LABEL_58;
  }
  if ((v9 & 0x8000000000000000) != 0) {
    goto LABEL_65;
  }
  if (v9)
  {
    a5 = sub_1D17BE1C0();
    *(void *)(a5 + 16) = v9;
    bzero((void *)(a5 + 32), 8 * v14 * v15);
  }
  else
  {
    a5 = MEMORY[0x1E4FBC860];
  }
  __C[0] = 1.0;
  if ((v14 & 0x8000000000000000) == 0)
  {
    vDSP_vsmsbD((const double *)(*(void *)&v16 + 32 + 8 * a1), v14, __C, (const double *)(*(void *)&v16 + 32 + 8 * v12), v14, (double *)(a5 + 32), 1, v14);
    if (v9 >> 31) {
      goto LABEL_60;
    }
    swift_bridgeObjectRetain();
    cblas_dasum_NEWLAPACK();
    double v17 = v22;
    swift_bridgeObjectRelease_n();
    unint64_t v9 = (unint64_t)v28;
    a5 = v29;
    goto LABEL_32;
  }
LABEL_64:
  sub_1D17BEA30();
  __break(1u);
LABEL_65:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t sub_1D168FC80(Swift::Int a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  double v8 = *(double *)&a2;
  double __C[3] = *(double *)MEMORY[0x1E4F143B8];
  unint64_t v10 = *(void *)(a2 + 48);
  if (v10 >> 62)
  {
LABEL_62:
    swift_bridgeObjectRetain();
    unint64_t v26 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    unint64_t v35 = v26;
    uint64_t v11 = (void *)sub_1D1665914(v26, 0.0);
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1D17BEAD0();
    if (v12) {
      goto LABEL_3;
    }
LABEL_63:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  unint64_t v35 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = (void *)sub_1D1665914(v35, 0.0);
  uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v12) {
    goto LABEL_63;
  }
LABEL_3:
  Swift::Int v13 = 0;
  unint64_t v34 = v10 & 0xC000000000000001;
  uint64_t v28 = a5;
  uint64_t v29 = (const double *)v10;
  uint64_t v30 = a6;
  uint64_t v32 = v12;
  while (1)
  {
    if (v34)
    {
      MEMORY[0x1D25F9260](v13, v10);
      swift_unknownObjectRelease();
      Swift::Int v14 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_53;
      }
    }
    else
    {
      Swift::Int v14 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_54;
      }
    }
    if (v13 == a1 && (a3 & 1) == 0) {
      goto LABEL_38;
    }
    int64_t v15 = *(void *)(*(void *)&v8 + 24);
    double v16 = *(double *)(*(void *)&v8 + 32);
    if (!a4)
    {
      __C[0] = 0.0;
      if ((unsigned __int128)(a1 * (__int128)v15) >> 64 != (a1 * v15) >> 63) {
        goto LABEL_55;
      }
      if ((unsigned __int128)(v13 * (__int128)v15) >> 64 != (v13 * v15) >> 63) {
        goto LABEL_57;
      }
      if (v15 < 0) {
        goto LABEL_64;
      }
      unint64_t v10 = *(void *)&v16 + 32 + 8 * a1 * v15;
      vDSP_dotprD((const double *)v10, 1, (const double *)(*(void *)&v16 + 32 + 8 * v13 * v15), 1, __C, v15);
      if ((unint64_t)v15 >> 31) {
        goto LABEL_59;
      }
      cblas_dnrm2_NEWLAPACK();
      double v19 = v18;
      cblas_dnrm2_NEWLAPACK();
      double v21 = __C[0] / (v19 * v20);
      if (v21 > 1.0) {
        double v21 = 1.0;
      }
      if (v21 > 0.0) {
        double v17 = v21;
      }
      else {
        double v17 = 0.0;
      }
      goto LABEL_33;
    }
    a6 = *(void *)&v8;
    double v8 = *(double *)(*(void *)&v8 + 16);
    if (a4 != 1) {
      break;
    }
    __C[0] = v8;
    *(void *)&__C[1] = v15;
    double __C[2] = v16;
    double v17 = MAMatrix.euclideanDistance(rowA:rowB:)(a1, v13);
    double v8 = *(double *)&a6;
    a6 = v30;
LABEL_34:
    uint64_t v12 = v32;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if (v13 < 0) {
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v11 = sub_1D1667604(v11);
      if (v13 < 0)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
    }
    if ((unint64_t)v13 >= v11[2]) {
      goto LABEL_52;
    }
    *(double *)&v11[v13 + 4] = v17;
LABEL_38:
    Swift::Int v13 = v14;
    os_unfair_lock_lock((os_unfair_lock_t)a5);
    if (v35 != *(void *)(a6 + 8)) {
      goto LABEL_48;
    }
    char v23 = *(void **)(a6 + 16);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a6 + 16) = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v23 = sub_1D1667604(v23);
      *(void *)(a6 + 16) = v23;
    }
    uint64_t v25 = *(void *)(a6 + 8);
    if (v25 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_49;
    }
    if (v25 > 0x7FFFFFFF) {
      goto LABEL_50;
    }
    if ((unsigned __int128)(a1 * (__int128)v25) >> 64 != (a1 * v25) >> 63) {
      goto LABEL_51;
    }
    cblas_dcopy_NEWLAPACK();
    *(void *)(a6 + 16) = v23;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock((os_unfair_lock_t)a5);
    if (v14 == v12) {
      goto LABEL_63;
    }
  }
  unint64_t v10 = *(void *)&v8 * v15;
  if ((unsigned __int128)(*(uint64_t *)&v8 * (__int128)v15) >> 64 != (*(void *)&v8 * v15) >> 63) {
    goto LABEL_56;
  }
  if ((v10 & 0x8000000000000000) != 0) {
    goto LABEL_65;
  }
  if (v10)
  {
    a5 = sub_1D17BE1C0();
    *(void *)(a5 + 16) = v10;
    bzero((void *)(a5 + 32), 8 * v15 * *(void *)&v8);
  }
  else
  {
    a5 = MEMORY[0x1E4FBC860];
  }
  double v8 = *(double *)&a6;
  __C[0] = 1.0;
  a6 = v30;
  if ((unsigned __int128)(a1 * (__int128)v15) >> 64 != (a1 * v15) >> 63) {
    goto LABEL_58;
  }
  if ((unsigned __int128)(v13 * (__int128)v15) >> 64 != (v13 * v15) >> 63) {
    goto LABEL_60;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    vDSP_vsmsbD((const double *)(*(void *)&v16 + 32 + 8 * a1 * v15), 1, __C, (const double *)(*(void *)&v16 + 32 + 8 * v13 * v15), 1, (double *)(a5 + 32), 1, v15);
    if (v10 >> 31) {
      goto LABEL_61;
    }
    swift_bridgeObjectRetain();
    cblas_dasum_NEWLAPACK();
    double v17 = v22;
    swift_bridgeObjectRelease_n();
    a5 = v28;
LABEL_33:
    unint64_t v10 = (unint64_t)v29;
    goto LABEL_34;
  }
LABEL_64:
  sub_1D17BEA30();
  __break(1u);
LABEL_65:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t MAMatrixRepresentation.description.getter()
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  sub_1D17BE850();
  swift_bridgeObjectRelease();
  uint64_t __C = 0xD00000000000001ALL;
  unint64_t v32 = 0x80000001D17D5110;
  unint64_t v36 = v0[2];
  uint64_t v1 = v36;
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  unint64_t v2 = v0[3];
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  unint64_t v36 = 0xD00000000000001ALL;
  unint64_t v37 = 0x80000001D17D5110;
  uint64_t v34 = 10;
  unint64_t v35 = 0xE100000000000000;
  uint64_t v3 = v0[4];
  uint64_t __C = v1;
  unint64_t v32 = v2;
  uint64_t v33 = v3;
  MAMatrix.description(integerPrecision:doublePrecision:)(5, 5);
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  unint64_t v4 = v0[5];
  int64_t v27 = v2;
  double v28 = *(double *)&v1;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1D17BEAD0();
    if (!v5) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (v5 < 1)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  uint64_t v6 = 0;
  do
  {
    if ((v4 & 0xC000000000000001) != 0) {
      id v7 = (id)MEMORY[0x1D25F9260](v6, v4);
    }
    else {
      id v7 = *(id *)(v4 + 8 * v6 + 32);
    }
    double v8 = v7;
    ++v6;
    uint64_t __C = 2314;
    unint64_t v32 = 0xE200000000000000;
    id v9 = objc_msgSend(v7, sel_visualString);
    sub_1D17BDFF0();

    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();

    swift_bridgeObjectRelease();
  }
  while (v5 != v6);
LABEL_10:
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  unint64_t v10 = *(void *)(v29 + 48);
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1D17BEAD0();
    if (!v11) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_19;
    }
  }
  if (v11 < 1) {
    goto LABEL_28;
  }
  uint64_t v12 = 0;
  do
  {
    if ((v10 & 0xC000000000000001) != 0) {
      id v13 = (id)MEMORY[0x1D25F9260](v12, v10);
    }
    else {
      id v13 = *(id *)(v10 + 8 * v12 + 32);
    }
    Swift::Int v14 = v13;
    ++v12;
    uint64_t __C = 2314;
    unint64_t v32 = 0xE200000000000000;
    id v15 = objc_msgSend(v13, sel_visualString);
    sub_1D17BDFF0();

    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();

    swift_bridgeObjectRelease();
  }
  while (v11 != v12);
LABEL_19:
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  unint64_t v32 = 0xE000000000000000;
  sub_1D17BE850();
  uint64_t v34 = 0;
  unint64_t v35 = 0xE000000000000000;
  sub_1D17BE030();
  vDSP_Length __I = 0;
  uint64_t __C = 0;
  vDSP_Length v16 = *(void *)&v28 * v27;
  if ((unsigned __int128)(*(uint64_t *)&v28 * (__int128)v27) >> 64 != (*(void *)&v28 * v27) >> 63)
  {
    __break(1u);
    goto LABEL_25;
  }
  if ((v16 & 0x8000000000000000) == 0)
  {
    double v17 = (const double *)(v3 + 32);
    swift_bridgeObjectRetain();
    vDSP_minviD((const double *)(v3 + 32), 1, (double *)&__C, &__I, v16);
    swift_bridgeObjectRelease();
    if ((__I & 0x8000000000000000) == 0)
    {
      double v18 = *(double *)&__C;
      uint64_t __C = *(void *)&v28;
      unint64_t v32 = v27;
      uint64_t v33 = v3;
      uint64_t v19 = MAMatrix.indices(of:)(v18);
      swift_retain();
      unint64_t v20 = sub_1D1695638(v19, v29);
      swift_release();
      sub_1D167B3C0(v20);
      swift_bridgeObjectRelease();
      swift_retain();
      unint64_t v21 = sub_1D16954F8(v19, v29);
      swift_bridgeObjectRelease();
      swift_release();
      sub_1D167B3C0(v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1D17BE330();
      sub_1D17BE030();
      vDSP_Length __I = 0;
      uint64_t __C = 0;
      swift_bridgeObjectRetain();
      vDSP_maxviD(v17, 1, (double *)&__C, &__I, v16);
      swift_bridgeObjectRelease();
      if ((__I & 0x8000000000000000) == 0)
      {
        double v22 = *(double *)&__C;
        uint64_t __C = *(void *)&v28;
        unint64_t v32 = v27;
        uint64_t v33 = v3;
        uint64_t v23 = MAMatrix.indices(of:)(v22);
        swift_retain();
        unint64_t v24 = sub_1D1695638(v23, v29);
        swift_release();
        sub_1D167B3C0(v24);
        swift_bridgeObjectRelease();
        swift_retain();
        unint64_t v25 = sub_1D16954F8(v23, v29);
        swift_bridgeObjectRelease();
        swift_release();
        sub_1D167B3C0(v25);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1D17BE330();
        sub_1D17BE030();
        uint64_t __C = 0;
        swift_bridgeObjectRetain();
        vDSP_meanvD(v17, 1, (double *)&__C, v16);
        swift_bridgeObjectRelease();
        sub_1D17BE330();
        sub_1D17BE030();
        uint64_t __C = *(void *)&v28;
        unint64_t v32 = v27;
        uint64_t v33 = v3;
        MAMatrix.median()();
        sub_1D17BE330();
        sub_1D17BE030();
        MAMatrixRepresentation.pstddev()();
        sub_1D17BE330();
        sub_1D17BE030();
        uint64_t __C = *(void *)&v28;
        unint64_t v32 = v27;
        uint64_t v33 = v3;
        MAMatrix.sstddev()();
        sub_1D17BE330();
        sub_1D17BE030();
        swift_bridgeObjectRelease();
        return v36;
      }
      goto LABEL_26;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t sub_1D1690968()
{
  return MAMatrixRepresentation.description.getter();
}

void sub_1D1690994(int64_t a1, int64_t a2)
{
  uint64_t v7 = v3;
  int64_t v10 = *(void *)(v7 + 40);
  if ((unint64_t)v10 >> 62) {
    goto LABEL_62;
  }
  uint64_t v11 = *(double **)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v11)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    return;
  }
  while (1)
  {
    unint64_t v12 = v10 & 0xC000000000000001;
    uint64_t v29 = a2;
    if ((v10 & 0xC000000000000001) != 0)
    {
      id v13 = (id)MEMORY[0x1D25F9260](0, v10);
    }
    else
    {
      if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        uint64_t v7 = (uint64_t)sub_1D1667604((void *)v7);
LABEL_10:
        if (a1 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (a1 <= 0x7FFFFFFF)
          {
            if ((unsigned __int128)(v2 * (__int128)a1) >> 64 == (v2 * a1) >> 63)
            {
              cblas_dcopy_NEWLAPACK();
              swift_bridgeObjectRelease();
              int64_t v33 = 1;
              uint64_t v34 = a1;
              unint64_t v35 = (double *)v7;
              swift_bridgeObjectRetain();
              uint64_t v11 = (double *)sub_1D1665914(a1, 0.0);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                goto LABEL_79;
              }
              goto LABEL_14;
            }
LABEL_77:
            __break(1u);
            goto LABEL_78;
          }
          goto LABEL_75;
        }
        __break(1u);
LABEL_73:
        uint64_t v7 = (uint64_t)sub_1D1667604((void *)v7);
        goto LABEL_36;
      }
      id v13 = *(id *)(v10 + 32);
    }
    Swift::Int v14 = v13;
    a2 = sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    uint64_t v5 = sub_1D17BE5C0();

    int64_t v2 = 0;
    if (v5) {
      goto LABEL_7;
    }
    if (v11 == (double *)1) {
      goto LABEL_31;
    }
    if (v12)
    {
      id v24 = (id)MEMORY[0x1D25F9260](1, v10);
    }
    else
    {
      if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
        goto LABEL_102;
      }
      id v24 = *(id *)(v10 + 40);
    }
    int64_t v27 = v24;
    uint64_t v5 = sub_1D17BE5C0();

    if (v5) {
      break;
    }
    uint64_t v4 = 1;
    while (1)
    {
      int64_t v2 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        break;
      }
      if ((double *)v2 == v11) {
        goto LABEL_31;
      }
      if (v12)
      {
        id v28 = (id)MEMORY[0x1D25F9260](v4 + 1, v10);
      }
      else
      {
        if (v2 < 0) {
          goto LABEL_69;
        }
        if ((unint64_t)v2 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_70;
        }
        id v28 = *(id *)(v10 + 32 + 8 * v2);
      }
      uint64_t v5 = (uint64_t)v28;
      uint64_t v6 = sub_1D17BE5C0();

      ++v4;
      if (v6) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_62:
    if (v10 < 0) {
      int64_t v2 = v10;
    }
    else {
      int64_t v2 = v10 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v11 = (double *)sub_1D17BEAD0();
    if (!v11) {
      goto LABEL_31;
    }
  }
  int64_t v2 = 1;
LABEL_7:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1D167D2D8(v29, v10);
  a2 = v15;
  char v17 = v16;
  swift_bridgeObjectRelease();
  if (v17) {
    return;
  }
  if (*(unsigned char *)(v7 + 48) == 1)
  {
    int64_t v10 = *(void *)(v7 + 16);
    a1 = *(void *)(v7 + 24);
    uint64_t v4 = *(void *)(v7 + 32);
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1D1665914(a1, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_10;
    }
    goto LABEL_71;
  }
  int64_t v10 = *(void *)(v7 + 16);
  a1 = *(void *)(v7 + 24);
  uint64_t v4 = *(void *)(v7 + 32);
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1D1665914(a1, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_73;
  }
LABEL_36:
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (a1 > 0x7FFFFFFF)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  if ((unsigned __int128)(v2 * (__int128)a1) >> 64 == (v2 * a1) >> 63)
  {
    uint64_t v5 = v4 + 32;
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    uint64_t v36 = 1;
    int64_t v37 = a1;
    uint64_t v38 = v7;
    swift_bridgeObjectRetain();
    int64_t v2 = sub_1D1665914(v10, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_40;
    }
    goto LABEL_81;
  }
LABEL_78:
  __break(1u);
LABEL_79:
  uint64_t v11 = (double *)sub_1D1667604(v11);
LABEL_14:
  if ((unsigned __int128)(a2 * (__int128)a1) >> 64 == (a2 * a1) >> 63)
  {
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    uint64_t v30 = 1;
    uint64_t v31 = a1;
    unint64_t v32 = v11;
    * infix(_:_:)(&v33, (vDSP_Length *)&v30, &v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = v36;
    uint64_t v6 = v37;
    uint64_t v7 = v38;
    swift_bridgeObjectRetain();
    uint64_t v11 = (double *)sub_1D1665914(v10, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_16;
    }
    goto LABEL_83;
  }
  __break(1u);
LABEL_81:
  int64_t v2 = (int64_t)sub_1D1667604((void *)v2);
LABEL_40:
  if (v10 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_83:
    uint64_t v11 = (double *)sub_1D1667604(v11);
LABEL_16:
    if (v10 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v10 <= 0x7FFFFFFF)
      {
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        int64_t v33 = v10;
        uint64_t v34 = 1;
        unint64_t v35 = v11;
        swift_bridgeObjectRetain();
        a2 = sub_1D1665914(v10, 0.0);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_90;
        }
        goto LABEL_19;
      }
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if (v10 > 0x7FFFFFFF) {
    goto LABEL_85;
  }
  uint64_t v11 = (double *)(v2 + 32);
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  a2 = sub_1D1665914(v10, 0.0);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v10 & 0x8000000000000000) == 0) {
      goto LABEL_44;
    }
LABEL_94:
    sub_1D17BEA30();
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
LABEL_87:
  a2 = (int64_t)sub_1D1667604((void *)a2);
  if (v10 < 0) {
    goto LABEL_94;
  }
LABEL_44:
  uint64_t v4 = 1;
  vDSP_mtransD(v11, 1, (double *)(a2 + 32), 1, 1uLL, v10);
  swift_bridgeObjectRelease();
  int64_t v33 = 1;
  uint64_t v34 = v10;
  unint64_t v35 = (double *)a2;
  ⋅ infix(_:_:)(&v36, &v33);
  double v26 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((~*(void *)&v26 & 0x7FF0000000000000) != 0)
  {
    if (v26 > -9.22337204e18)
    {
      if (v26 < 9.22337204e18) {
        return;
      }
      goto LABEL_96;
    }
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  __break(1u);
LABEL_90:
  a2 = (int64_t)sub_1D1667604((void *)a2);
LABEL_19:
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  uint64_t v30 = v10;
  uint64_t v31 = 1;
  unint64_t v32 = (double *)a2;
  * infix(_:_:)(&v33, (vDSP_Length *)&v30, &v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v2 = v36;
  a2 = v37;
  if ((unsigned __int128)(v37 * (__int128)v36) >> 64 != (v37 * v36) >> 63)
  {
    __break(1u);
    goto LABEL_92;
  }
  uint64_t v4 = v38;
  int64_t v10 = sub_1D1665914(v37 * v36, 0.0);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if (a2 < 0) {
      goto LABEL_94;
    }
  }
  else
  {
LABEL_93:
    int64_t v10 = (int64_t)sub_1D1667604((void *)v10);
    if (a2 < 0) {
      goto LABEL_94;
    }
  }
  if (v2 < 0) {
    goto LABEL_94;
  }
  vDSP_mtransD((const double *)(v4 + 32), 1, (double *)(v10 + 32), 1, a2, v2);
  swift_bridgeObjectRelease();
  int64_t v33 = v5;
  uint64_t v34 = v6;
  unint64_t v35 = (double *)v7;
  uint64_t v30 = a2;
  uint64_t v31 = v2;
  unint64_t v32 = (double *)v10;
  - infix(_:_:)(&v33, &v30, &v36);
  uint64_t v18 = v36 * v37;
  if ((unsigned __int128)(v36 * (__int128)v37) >> 64 != (v36 * v37) >> 63) {
    goto LABEL_95;
  }
  if (v18 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_97;
  }
  if (v18 > 0x7FFFFFFF)
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  cblas_dasum_NEWLAPACK();
  double v20 = v19;
  swift_bridgeObjectRelease();
  uint64_t v36 = v5;
  int64_t v37 = v6;
  uint64_t v38 = v7;
  int64_t v33 = a2;
  uint64_t v34 = v2;
  unint64_t v35 = (double *)v10;
  ⋅ infix(_:_:)(&v36, &v33);
  double v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double v23 = v20 + v22;
  if ((~COERCE__INT64(v20 + v22) & 0x7FF0000000000000) == 0)
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  if (v23 <= -9.22337204e18)
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  if (v23 < 9.22337204e18) {
    return;
  }
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
}

uint64_t sub_1D169116C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  unint64_t v8 = *(void *)(v5 + 40);
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a1, v8);
  uint64_t v10 = v9;
  char v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = 0;
  if (v12) {
    return v13;
  }
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a2, v8);
  uint64_t v15 = v14;
  char v17 = v16;
  swift_bridgeObjectRelease();
  if (v17) {
    return 0;
  }
  if (*(unsigned char *)(v5 + 48) == 1)
  {
    int64_t v18 = *(void *)(v5 + 16);
    int64_t v19 = *(void *)(v5 + 24);
    double v20 = *(double **)(v5 + 32);
    swift_bridgeObjectRetain();
    int64_t v21 = sub_1D1665914(v19, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v21 = (int64_t)sub_1D1667604((void *)v21);
    }
    if (v19 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v19 <= 0x7FFFFFFF)
      {
        if ((unsigned __int128)(v10 * (__int128)v19) >> 64 == (v10 * v19) >> 63)
        {
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          int64_t v35 = 1;
          uint64_t v36 = v19;
          int64_t v37 = (double *)v21;
          swift_bridgeObjectRetain();
          uint64_t v3 = (double *)sub_1D1665914(v19, 0.0);
          if (swift_isUniquelyReferenced_nonNull_native())
          {
LABEL_10:
            if ((unsigned __int128)(v15 * (__int128)v19) >> 64 == (v15 * v19) >> 63)
            {
              cblas_dcopy_NEWLAPACK();
              swift_bridgeObjectRelease();
              int64_t v32 = 1;
              uint64_t v33 = v19;
              uint64_t v34 = v3;
              * infix(_:_:)(&v35, (vDSP_Length *)&v32, (int64_t *)&v38);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v4 = *((void *)&v38 + 1);
              uint64_t v31 = v38;
              int64_t v21 = v39;
              swift_bridgeObjectRetain();
              uint64_t v3 = (double *)sub_1D1665914(v18, 0.0);
              if (swift_isUniquelyReferenced_nonNull_native()) {
                goto LABEL_12;
              }
              goto LABEL_44;
            }
            __break(1u);
            goto LABEL_42;
          }
LABEL_40:
          uint64_t v3 = (double *)sub_1D1667604(v3);
          goto LABEL_10;
        }
        goto LABEL_38;
      }
      goto LABEL_36;
    }
    __break(1u);
  }
  else
  {
    int64_t v18 = *(void *)(v5 + 16);
    int64_t v21 = *(void *)(v5 + 24);
    int64_t v19 = *(void *)(v5 + 32);
    swift_bridgeObjectRetain();
    double v20 = (double *)sub_1D1665914(v21, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_23;
    }
  }
  double v20 = (double *)sub_1D1667604(v20);
LABEL_23:
  if (v21 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v21 > 0x7FFFFFFF)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((unsigned __int128)(v10 * (__int128)v21) >> 64 != (v10 * v21) >> 63)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  int64_t v35 = 1;
  uint64_t v36 = v21;
  int64_t v37 = v20;
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1D1665914(v18, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_42:
  }
    uint64_t v10 = (uint64_t)sub_1D1667604((void *)v10);
  if (v18 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (v18 <= 0x7FFFFFFF)
    {
      uint64_t v3 = (double *)(v10 + 32);
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      uint64_t v15 = sub_1D1665914(v18, 0.0);
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        if (v18 < 0) {
          goto LABEL_52;
        }
LABEL_31:
        vDSP_mtransD(v3, 1, (double *)(v15 + 32), 1, 1uLL, v18);
        swift_bridgeObjectRelease();
        int64_t v32 = 1;
        uint64_t v33 = v18;
        uint64_t v34 = (double *)v15;
        * infix(_:_:)(&v35, (vDSP_Length *)&v32, (int64_t *)&v38);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v28 = MAMatrix.indices(of:)(1.0);
        swift_bridgeObjectRelease();
        swift_retain();
        unint64_t v29 = sub_1D1695774(v28, v5);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v13 = sub_1D167B3C0(v29);
        swift_bridgeObjectRelease();
        return v13;
      }
LABEL_48:
      uint64_t v15 = (uint64_t)sub_1D1667604((void *)v15);
      if (v18 < 0) {
        goto LABEL_52;
      }
      goto LABEL_31;
    }
    goto LABEL_46;
  }
  __break(1u);
LABEL_44:
  uint64_t v3 = (double *)sub_1D1667604(v3);
LABEL_12:
  if (v18 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v18 > 0x7FFFFFFF)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  int64_t v35 = v18;
  uint64_t v36 = 1;
  int64_t v37 = v3;
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1D1665914(v18, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v22 = (uint64_t)sub_1D1667604((void *)v22);
  }
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  int64_t v32 = v18;
  uint64_t v33 = 1;
  uint64_t v34 = (double *)v22;
  * infix(_:_:)(&v35, (vDSP_Length *)&v32, (int64_t *)&v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v23 = v38;
  if ((unsigned __int128)(*((uint64_t *)&v38 + 1) * (__int128)(uint64_t)v38) >> 64 == (uint64_t)(*((void *)&v38 + 1)
                                                                                             * v38) >> 63)
  {
    uint64_t v22 = v39;
    int64_t v19 = sub_1D1665914(*((void *)&v38 + 1) * v38, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if ((*((void *)&v23 + 1) & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      goto LABEL_19;
    }
  }
  else
  {
    __break(1u);
  }
  int64_t v19 = (int64_t)sub_1D1667604((void *)v19);
  if ((*((void *)&v23 + 1) & 0x8000000000000000) != 0) {
    goto LABEL_52;
  }
LABEL_19:
  if ((v23 & 0x8000000000000000) == 0)
  {
    vDSP_mtransD((const double *)(v22 + 32), 1, (double *)(v19 + 32), 1, *((vDSP_Length *)&v23 + 1), v23);
    swift_bridgeObjectRelease();
    int64_t v35 = MEMORY[0x1E4FBC870];
    *(void *)&long long v38 = v31;
    *((void *)&v38 + 1) = v4;
    int64_t v39 = v21;
    uint64_t v24 = MAMatrix.indices(of:)(1.0);
    swift_bridgeObjectRelease();
    swift_retain();
    unint64_t v25 = sub_1D1695774(v24, v5);
    swift_bridgeObjectRelease();
    swift_release();
    sub_1D169872C(v25);
    swift_bridgeObjectRelease();
    *(void *)&long long v38 = *((void *)&v23 + 1);
    *((void *)&v38 + 1) = v23;
    int64_t v39 = v19;
    uint64_t v26 = MAMatrix.indices(of:)(1.0);
    swift_bridgeObjectRelease();
    swift_retain();
    unint64_t v27 = sub_1D1695774(v26, v5);
    swift_bridgeObjectRelease();
    swift_release();
    sub_1D169872C(v27);
    swift_bridgeObjectRelease();
    return v35;
  }
LABEL_52:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t sub_1D16917E8(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    uint64_t result = sub_1D16725E8(&v13, *(void *)(*(void *)(v1 + 48) + 8 * v9));
  }
  int64_t v12 = v10 + 4;
  if (v12 < v7)
  {
    unint64_t v11 = *(void *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v2 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        ++v12;
        if (v11) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v12;
    goto LABEL_22;
  }
LABEL_23:
  return swift_release();
}

void sub_1D1691944(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    sub_1D1680D38((unint64_t *)&qword_1EA651A78, (unint64_t *)&qword_1EA652D30);
    sub_1D17BE390();
    unint64_t v1 = (unint64_t)v18[1];
    char v17 = v18[2];
    uint64_t v2 = (uint64_t)v18[3];
    id v3 = v18[4];
    unint64_t v4 = (unint64_t)v18[5];
  }
  else
  {
    id v3 = 0;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    char v17 = (void *)(a1 + 56);
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
  }
  uint64_t v16 = v2;
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | ((void)v3 << 6);
      unint64_t v11 = (char *)v3;
      goto LABEL_29;
    }
    uint64_t v13 = (uint64_t)v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_32;
    }
    unint64_t v14 = v17[v13];
    unint64_t v11 = (char *)v3 + 1;
    if (!v14)
    {
      unint64_t v11 = (char *)v3 + 2;
      if ((uint64_t)v3 + 2 >= v8) {
        goto LABEL_32;
      }
      unint64_t v14 = v17[(void)v11];
      if (!v14)
      {
        unint64_t v11 = (char *)v3 + 3;
        if ((uint64_t)v3 + 3 >= v8) {
          goto LABEL_32;
        }
        unint64_t v14 = v17[(void)v11];
        if (!v14)
        {
          unint64_t v11 = (char *)v3 + 4;
          if ((uint64_t)v3 + 4 >= v8) {
            goto LABEL_32;
          }
          unint64_t v14 = v17[(void)v11];
          if (!v14)
          {
            unint64_t v11 = (char *)v3 + 5;
            if ((uint64_t)v3 + 5 >= v8) {
              goto LABEL_32;
            }
            unint64_t v14 = v17[(void)v11];
            if (!v14)
            {
              uint64_t v15 = (char *)v3 + 6;
              while ((char *)v8 != v15)
              {
                unint64_t v14 = v17[(void)v15++];
                if (v14)
                {
                  unint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              unint64_t v4 = 0;
LABEL_33:
              sub_1D16681F0(v1, v17, v16, v3, v4);
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + ((void)v11 << 6);
LABEL_29:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_33;
    }
    while (1)
    {
      sub_1D1671FA0(v18, v12);

      id v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (sub_1D17BE7A0())
      {
        sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v18[0];
        swift_unknownObjectRelease();
        unint64_t v11 = (char *)v3;
        uint64_t v9 = v4;
        if (v12) {
          continue;
        }
      }
      goto LABEL_33;
    }
  }
  __break(1u);
}

uint64_t sub_1D1691BFC()
{
  unint64_t v1 = *(void *)(v0 + 40);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1D17BEAD0();
    uint64_t v2 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v3 = v2;
  }
  if ((unsigned __int128)(v3 * (__int128)v2) >> 64 != (v3 * v2) >> 63) {
    __break(1u);
  }
  *(void *)&long long v8 = v3;
  *((void *)&v8 + 1) = v2;
  uint64_t v9 = sub_1D1665914(v3 * v2, 0.0);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = sub_1D165C128(0, &qword_1EA651958);
  MEMORY[0x1F4188790](v4, v5);
  sub_1D17BE570();
  type metadata accessor for MASquareMatrixRepresentation();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = v8;
  *(void *)(v6 + 32) = v9;
  *(void *)(v6 + 40) = v1;
  swift_bridgeObjectRetain();
  return v6;
}

void sub_1D1691DCC(Swift::Int a1, uint64_t a2, char a3, char a4, int64_t p_C, uint64_t a6)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a2 + 40);
  if ((unint64_t)v10 >> 62) {
    goto LABEL_113;
  }
  unint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFF8);
  unint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v13 = (void *)sub_1D1665914(v12, 0.0);
  uint64_t v14 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v14)
  {
LABEL_117:
    swift_bridgeObjectRelease();
    goto LABEL_118;
  }
LABEL_3:
  unint64_t v46 = v12;
  uint64_t v47 = a6;
  int64_t v48 = p_C;
  Swift::Int v49 = a1;
  Swift::Int v15 = 0;
  unint64_t v54 = v10 & 0xC000000000000001;
  uint64_t v50 = v10;
  uint64_t v52 = v14;
  while (1)
  {
    if (v54)
    {
      MEMORY[0x1D25F9260](v15, v10);
      swift_unknownObjectRelease();
      unint64_t v11 = (void *)(v15 + 1);
      if (__OFADD__(v15, 1))
      {
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        if (v10 < 0) {
          unint64_t v11 = (void *)v10;
        }
        else {
          unint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFF8);
        }
        swift_bridgeObjectRetain();
        unint64_t v12 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
        uint64_t v13 = (void *)sub_1D1665914(v12, 0.0);
        swift_bridgeObjectRetain();
        uint64_t v14 = sub_1D17BEAD0();
        if (!v14) {
          goto LABEL_117;
        }
        goto LABEL_3;
      }
    }
    else
    {
      unint64_t v11 = (void *)(v15 + 1);
      if (__OFADD__(v15, 1)) {
        goto LABEL_93;
      }
    }
    if (v15 == a1 && (a3 & 1) == 0) {
      goto LABEL_6;
    }
    double v17 = *(double *)(a2 + 16);
    a6 = *(void *)(a2 + 24);
    uint64_t v18 = *(void *)(a2 + 32);
    if (*(unsigned char *)(a2 + 48) == 1) {
      break;
    }
    if (a4)
    {
      p_C = *(void *)&v17 * a6;
      uint64_t v21 = (unsigned __int128)(*(uint64_t *)&v17 * (__int128)a6) >> 64;
      if (a4 == 1)
      {
        if (v21 != p_C >> 63) {
          goto LABEL_97;
        }
        if (p_C < 0) {
          goto LABEL_130;
        }
        if (p_C)
        {
          uint64_t v10 = sub_1D17BE1C0();
          *(void *)(v10 + 16) = p_C;
          bzero((void *)(v10 + 32), 8 * a6 * *(void *)&v17);
        }
        else
        {
          uint64_t v10 = MEMORY[0x1E4FBC860];
        }
        double __C = 1.0;
        if ((unsigned __int128)(a1 * (__int128)a6) >> 64 != (a1 * a6) >> 63) {
          goto LABEL_104;
        }
        if (a6 < 0) {
          goto LABEL_129;
        }
        vDSP_vsmsbD((const double *)(v18 + 32 + 8 * a1 * a6), 1, &__C, (const double *)(v18 + 32 + 8 * v15), a6, (double *)(v10 + 32), 1, a6);
        vDSP_vsqD((const double *)(v10 + 32), 1, (double *)(v10 + 32), 1, a6);
        double __C = 0.0;
        swift_bridgeObjectRetain();
        vDSP_sveD((const double *)(v10 + 32), 1, &__C, p_C);
        swift_bridgeObjectRelease();
        double v38 = __C;
        swift_bridgeObjectRelease();
        double v16 = sqrt(v38);
      }
      else
      {
        if (v21 != p_C >> 63) {
          goto LABEL_101;
        }
        if (p_C < 0) {
          goto LABEL_130;
        }
        if (p_C)
        {
          uint64_t v10 = sub_1D17BE1C0();
          *(void *)(v10 + 16) = p_C;
          bzero((void *)(v10 + 32), 8 * a6 * *(void *)&v17);
        }
        else
        {
          uint64_t v10 = MEMORY[0x1E4FBC860];
        }
        double __C = 1.0;
        if ((unsigned __int128)(a1 * (__int128)a6) >> 64 != (a1 * a6) >> 63) {
          goto LABEL_106;
        }
        if (a6 < 0) {
          goto LABEL_129;
        }
        vDSP_vsmsbD((const double *)(v18 + 32 + 8 * a1 * a6), 1, &__C, (const double *)(v18 + 32 + 8 * v15), a6, (double *)(v10 + 32), 1, a6);
        if ((unint64_t)p_C >> 31) {
          goto LABEL_110;
        }
        swift_bridgeObjectRetain();
        cblas_dasum_NEWLAPACK();
        double v16 = v42;
        swift_bridgeObjectRelease_n();
      }
      uint64_t v10 = v50;
    }
    else
    {
      if (*(void *)&v17 != a6) {
        goto LABEL_99;
      }
      double __C = 0.0;
      if ((unsigned __int128)(a1 * (__int128)*(uint64_t *)&v17) >> 64 != (a1 * *(void *)&v17) >> 63) {
        goto LABEL_103;
      }
      if ((*(void *)&v17 & 0x8000000000000000) != 0) {
        goto LABEL_129;
      }
      a6 = v18 + 32 + 8 * a1 * *(void *)&v17;
      p_C = v18 + 32 + 8 * v15;
      vDSP_dotprD((const double *)a6, 1, (const double *)p_C, *(vDSP_Stride *)&v17, &__C, *(vDSP_Length *)&v17);
      if (*(void *)&v17 >> 31) {
        goto LABEL_108;
      }
      cblas_dnrm2_NEWLAPACK();
      double v35 = v34;
      cblas_dnrm2_NEWLAPACK();
      double v37 = __C / (v35 * v36);
      if (v37 > 1.0) {
        double v37 = 1.0;
      }
      if (v37 > 0.0) {
        double v16 = v37;
      }
      else {
        double v16 = 0.0;
      }
    }
    uint64_t v14 = v52;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v13 = sub_1D1667604(v13);
      if ((v15 & 0x8000000000000000) == 0) {
        goto LABEL_79;
      }
LABEL_91:
      __break(1u);
LABEL_92:
      swift_bridgeObjectRelease();
      a6 = v47;
      p_C = v48;
      unint64_t v12 = v46;
LABEL_118:
      os_unfair_lock_lock((os_unfair_lock_t)p_C);
      if (v12 == *(void *)(a6 + 8))
      {
        unint64_t v11 = *(void **)(a6 + 16);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(a6 + 16) = v11;
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_120;
        }
      }
      else
      {
        __break(1u);
      }
      unint64_t v11 = sub_1D1667604(v11);
      *(void *)(a6 + 16) = v11;
LABEL_120:
      uint64_t v45 = *(void *)(a6 + 8);
      if (v45 < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
      }
      else if (v45 <= 0x7FFFFFFF)
      {
        if ((unsigned __int128)(a1 * (__int128)v45) >> 64 == (a1 * v45) >> 63)
        {
          cblas_dcopy_NEWLAPACK();
          *(void *)(a6 + 16) = v11;
          swift_bridgeObjectRelease();
          os_unfair_lock_unlock((os_unfair_lock_t)p_C);
          return;
        }
LABEL_128:
        __break(1u);
      }
      __break(1u);
      goto LABEL_128;
    }
    if (v15 < 0) {
      goto LABEL_91;
    }
LABEL_79:
    if ((unint64_t)v15 >= v13[2]) {
      goto LABEL_96;
    }
LABEL_5:
    *(double *)&v13[v15 + 4] = v16;
LABEL_6:
    Swift::Int v15 = (Swift::Int)v11;
    if (v11 == (void *)v14) {
      goto LABEL_92;
    }
  }
  if (!a4)
  {
    double __C = 0.0;
    Swift::Int v22 = a1 * a6;
    if ((unsigned __int128)(a1 * (__int128)a6) >> 64 != (a1 * a6) >> 63) {
      goto LABEL_98;
    }
    if ((unsigned __int128)(v15 * (__int128)a6) >> 64 != (v15 * a6) >> 63) {
      goto LABEL_102;
    }
    if (a6 < 0) {
      goto LABEL_129;
    }
    a1 = (Swift::Int)v13;
    uint64_t v23 = v18 + 32;
    uint64_t v10 = v18 + 32 + 8 * v22;
    p_C = v18 + 32 + 8 * v15 * a6;
    vDSP_dotprD((const double *)v10, 1, (const double *)p_C, 1, &__C, a6);
    if ((unint64_t)a6 >> 31) {
      goto LABEL_107;
    }
    cblas_dnrm2_NEWLAPACK();
    double v25 = v24;
    cblas_dnrm2_NEWLAPACK();
    double v27 = __C / (v25 * v26);
    if (v27 > 0.0) {
      double v28 = v27;
    }
    else {
      double v28 = 0.0;
    }
    if (v27 <= 1.0) {
      double v19 = v28;
    }
    else {
      double v19 = 1.0;
    }
    double __C = 0.0;
    if ((*(void *)&v17 & 0x8000000000000000) != 0) {
      goto LABEL_129;
    }
    uint64_t v10 = v23 + 8 * v15;
    p_C = v23 + 8 * v49;
    vDSP_dotprD((const double *)v10, a6, (const double *)p_C, a6, &__C, *(vDSP_Length *)&v17);
    uint64_t v14 = v52;
    if (*(void *)&v17 >> 31) {
      goto LABEL_111;
    }
    cblas_dnrm2_NEWLAPACK();
    double v30 = v29;
    cblas_dnrm2_NEWLAPACK();
    double v32 = __C / (v30 * v31);
    if (v32 > 0.0) {
      double v33 = v32;
    }
    else {
      double v33 = 0.0;
    }
    if (v32 <= 1.0) {
      double v20 = v33;
    }
    else {
      double v20 = 1.0;
    }
    uint64_t v13 = (void *)a1;
    a1 = v49;
    uint64_t v10 = v50;
    goto LABEL_84;
  }
  if (a4 == 1)
  {
    double __C = *(double *)(a2 + 16);
    uint64_t v56 = a6;
    uint64_t v57 = v18;
    double v19 = MAMatrix.euclideanDistance(rowA:rowB:)(a1, v15);
    double __C = v17;
    uint64_t v56 = a6;
    uint64_t v57 = v18;
    p_C = (int64_t)&__C;
    double v20 = MAMatrix.euclideanDistance(columnA:columnB:)(v15, a1);
    goto LABEL_83;
  }
  p_C = *(void *)&v17 * a6;
  if ((unsigned __int128)(*(uint64_t *)&v17 * (__int128)a6) >> 64 != (*(void *)&v17 * a6) >> 63) {
    goto LABEL_100;
  }
  if (p_C < 0) {
    goto LABEL_130;
  }
  if (p_C)
  {
    uint64_t v10 = sub_1D17BE1C0();
    *(void *)(v10 + 16) = p_C;
    bzero((void *)(v10 + 32), 8 * a6 * *(void *)&v17);
  }
  else
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
  }
  double __C = 1.0;
  Swift::Int v39 = a1 * a6;
  if ((unsigned __int128)(a1 * (__int128)a6) >> 64 != (a1 * a6) >> 63) {
    goto LABEL_105;
  }
  if ((unsigned __int128)(v15 * (__int128)a6) >> 64 != (v15 * a6) >> 63) {
    goto LABEL_109;
  }
  if ((a6 & 0x8000000000000000) == 0)
  {
    a1 = (Swift::Int)v13;
    vDSP_vsmsbD((const double *)(v18 + 32 + 8 * v39), 1, &__C, (const double *)(v18 + 32 + 8 * v15 * a6), 1, (double *)(v10 + 32), 1, a6);
    if ((unint64_t)p_C >> 31) {
      goto LABEL_112;
    }
    swift_bridgeObjectRetain();
    cblas_dasum_NEWLAPACK();
    double v19 = v40;
    swift_bridgeObjectRelease_n();
    if (p_C)
    {
      uint64_t v41 = sub_1D17BE1C0();
      *(void *)(v41 + 16) = p_C;
      bzero((void *)(v41 + 32), 8 * a6 * *(void *)&v17);
    }
    else
    {
      uint64_t v41 = MEMORY[0x1E4FBC860];
    }
    double __C = 1.0;
    vDSP_vsmsbD((const double *)(v18 + 32 + 8 * v15), a6, &__C, (const double *)(v18 + 32 + 8 * v49), a6, (double *)(v41 + 32), 1, a6);
    swift_bridgeObjectRetain();
    cblas_dasum_NEWLAPACK();
    double v20 = v43;
    swift_bridgeObjectRelease_n();
    a1 = v49;
    uint64_t v10 = v50;
LABEL_83:
    uint64_t v14 = v52;
LABEL_84:
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if (v15 < 0) {
        goto LABEL_94;
      }
    }
    else
    {
      uint64_t v13 = sub_1D1667604(v13);
      if (v15 < 0) {
        goto LABEL_94;
      }
    }
    if ((unint64_t)v15 >= v13[2]) {
      goto LABEL_95;
    }
    double v16 = (v20 + v19) * 0.5;
    goto LABEL_5;
  }
LABEL_129:
  sub_1D17BEA30();
  __break(1u);
LABEL_130:
  sub_1D17BEA30();
  __break(1u);
}

void MAAdjacencyMatrixRepresentation.__allocating_init(matrix:nodes:)()
{
}

void MAAdjacencyMatrixRepresentation.init(matrix:nodes:)()
{
}

__n128 _s17KnowledgeGraphKit31MAAdjacencyMatrixRepresentationC6matrix5nodes8directedAcA8MAMatrixV_SaySo6MANodeCGSbtcfC_0(__n128 *a1, uint64_t a2, char a3)
{
  uint64_t v6 = swift_allocObject();
  unint64_t v7 = a1[1].n128_u64[0];
  *(unsigned char *)(v6 + 48) = a3;
  __n128 result = *a1;
  *(__n128 *)(v6 + 16) = *a1;
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = a2;
  return result;
}

uint64_t _s17KnowledgeGraphKit31MAAdjacencyMatrixRepresentationC6matrix5nodes8directedAcA8MAMatrixV_SaySo6MANodeCGSbtcfc_0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  *(unsigned char *)(v3 + 48) = a3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)a1;
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = a2;
  return v3;
}

uint64_t sub_1D16927B8(void *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  id v6 = objc_msgSend(a1, sel_graph);
  if (!v6) {
    goto LABEL_75;
  }
  id v7 = objc_msgSend(v6, sel_graphReference);
  swift_unknownObjectRelease();
  id v8 = objc_msgSend(v7, sel_concreteGraph);

  if (!v8) {
    goto LABEL_76;
  }
  unint64_t v9 = (unint64_t)objc_msgSend(v8, sel_hasPendingRead);

  if ((v9 & 1) == 0) {
    goto LABEL_67;
  }
  uint64_t v48 = MEMORY[0x1E4FBC860];
  unint64_t v9 = v4[5];
  swift_bridgeObjectRetain();
  sub_1D167D2D8((uint64_t)a1, v9);
  unint64_t v3 = v10;
  char v12 = v11;
  swift_bridgeObjectRelease();
  if ((v12 & 1) != 0
    || (swift_bridgeObjectRetain(),
        sub_1D167D2D8(a2, v9),
        uint64_t v45 = v13,
        char v15 = v14,
        swift_bridgeObjectRelease(),
        (v15 & 1) != 0))
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v44 = v9 & 0xC000000000000001;
  if ((v9 & 0xC000000000000001) != 0) {
    goto LABEL_72;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_74;
  }
  if (v3 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    swift_release();
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  for (id i = *(id *)(v9 + 8 * v3 + 32); ; id i = (id)MEMORY[0x1D25F9260](v3, v9))
  {
    double v17 = i;
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    uint64_t v18 = v17;
    LOBYTE(v17) = sub_1D17BE5C0();

    if (v17) {
      break;
    }
    uint64_t v21 = v4[3];
    uint64_t v43 = v4[4];
    int v42 = *((unsigned __int8 *)v4 + 48);
    while (1)
    {
      unint64_t v22 = v3 * v21;
      if ((unsigned __int128)((uint64_t)v3 * (__int128)v21) >> 64 != (uint64_t)(v3 * v21) >> 63) {
        break;
      }
      BOOL v23 = __OFADD__(v22, v45);
      unint64_t v24 = v22 + v45;
      if (v23) {
        goto LABEL_61;
      }
      if ((v24 & 0x8000000000000000) != 0) {
        goto LABEL_62;
      }
      if (v24 >= *(void *)(v43 + 16)) {
        goto LABEL_63;
      }
      double v25 = *(double *)(v43 + 32 + 8 * v24);
      if ((~*(void *)&v25 & 0x7FF0000000000000) == 0) {
        goto LABEL_64;
      }
      if (v25 <= -9.22337204e18) {
        goto LABEL_65;
      }
      if (v25 >= 9.22337204e18) {
        goto LABEL_66;
      }
      unint64_t v3 = (uint64_t)v25;
      if (v44)
      {
        double v26 = (void *)MEMORY[0x1D25F9260]((uint64_t)v25, v9);
      }
      else
      {
        if ((v3 & 0x8000000000000000) != 0) {
          goto LABEL_70;
        }
        if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v3) {
          goto LABEL_71;
        }
        double v26 = *(id *)(v9 + 32 + 8 * v3);
      }
      uint64_t v4 = v26;
      if (v42)
      {
        id v27 = objc_msgSend(v18, sel_edgesTowardNode_, v26);
        sub_1D165C128(0, (unint64_t *)&qword_1EA6514F0);
        sub_1D1680D38(&qword_1EA651C58, (unint64_t *)&qword_1EA6514F0);
        uint64_t v28 = sub_1D17BE350();

        if ((v28 & 0xC000000000000001) != 0)
        {
          if (sub_1D17BE760() < 1) {
            goto LABEL_58;
          }
        }
        else if (*(uint64_t *)(v28 + 16) < 1)
        {
LABEL_58:

          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
        uint64_t v31 = swift_bridgeObjectRetain();
        uint64_t v32 = sub_1D1667074(v31);
        swift_bridgeObjectRelease();
        uint64_t v47 = v32;
        sub_1D1688024(&v47);
        swift_bridgeObjectRelease();
        uint64_t v33 = v47;
        if (v47 < 0 || (v47 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v39 = sub_1D17BEAD0();
          swift_release();
          if (!v39) {
            goto LABEL_77;
          }
        }
        else if (!*(void *)(v47 + 16))
        {
          goto LABEL_77;
        }
        if ((v33 & 0xC000000000000001) != 0) {
          goto LABEL_52;
        }
        if (!*(void *)(v33 + 16)) {
          goto LABEL_68;
        }
      }
      else
      {
        id v29 = objc_msgSend(v18, sel_edgesWithNode_, v26);
        sub_1D165C128(0, (unint64_t *)&qword_1EA6514F0);
        sub_1D1680D38(&qword_1EA651C58, (unint64_t *)&qword_1EA6514F0);
        uint64_t v30 = sub_1D17BE350();

        if ((v30 & 0xC000000000000001) != 0)
        {
          if (sub_1D17BE760() < 1) {
            goto LABEL_59;
          }
        }
        else if (*(uint64_t *)(v30 + 16) < 1)
        {
LABEL_59:

          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
        uint64_t v34 = swift_bridgeObjectRetain();
        uint64_t v35 = sub_1D1667074(v34);
        swift_bridgeObjectRelease();
        uint64_t v47 = v35;
        sub_1D1688024(&v47);
        swift_bridgeObjectRelease();
        uint64_t v33 = v47;
        if (v47 < 0 || (v47 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v40 = sub_1D17BEAD0();
          swift_release();
          if (!v40)
          {
LABEL_56:
            swift_release();
            __break(1u);
            goto LABEL_57;
          }
        }
        else if (!*(void *)(v47 + 16))
        {
          goto LABEL_56;
        }
        if ((v33 & 0xC000000000000001) != 0)
        {
LABEL_52:
          MEMORY[0x1D25F9260](0, v33);
          goto LABEL_48;
        }
        if (!*(void *)(v33 + 16)) {
          goto LABEL_69;
        }
      }
      id v36 = *(id *)(v33 + 32);
LABEL_48:
      uint64_t v37 = swift_release();
      MEMORY[0x1D25F8AB0](v37);
      if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1D17BE170();
      }
      sub_1D17BE1F0();
      sub_1D17BE150();

      uint64_t v18 = v4;
      char v38 = sub_1D17BE5C0();

      if (v38) {
        goto LABEL_57;
      }
    }
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    ;
  }
LABEL_57:
  sub_1D165C128(0, (unint64_t *)&qword_1EA6514F0);
  uint64_t v41 = (void *)sub_1D17BE110();
  swift_bridgeObjectRelease();
  id v19 = objc_msgSend(self, sel_pathWithEdges_, v41);

  return (uint64_t)v19;
}

void MAPathMatrixRepresentation.__allocating_init(matrix:nodes:)()
{
}

void MAPathMatrixRepresentation.init(matrix:nodes:)()
{
}

uint64_t _s17KnowledgeGraphKit31MAAdjacencyMatrixRepresentationCfD_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 49, 7);
}

uint64_t sub_1D1692EC8(void *a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_1D17BEB60();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v81 = *(void *)(v79 + 8 * i);
        uint64_t v82 = v78;
        do
        {
          uint64_t v83 = *(void *)(v79 + v82);
          if (v83 >= v81) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(void *)(v79 + v82 + 8) = v83;
          *(void *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  uint64_t v95 = result;
  uint64_t v96 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    __dst = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      char v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_103:
      uint64_t v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          uint64_t v86 = v11;
          unint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          sub_1D1693DB8((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(void *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v86 = sub_1D16FA24C((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          unint64_t v90 = &v86[16 * v85 + 32];
          *(void *)unint64_t v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          char v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v94 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_1D17BE1C0();
    *(void *)(v7 + 16) = v6;
    uint64_t v3 = v96;
    uint64_t v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *v2;
  uint64_t v92 = v2;
  uint64_t v93 = *v2 - 8;
  char v11 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v97 = *v2;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 < v3)
    {
      uint64_t v14 = *(void *)(v10 + 8 * v9);
      uint64_t v15 = *(void *)(v10 + 8 * v13);
      uint64_t v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v16 = v14;
        while (1)
        {
          uint64_t v17 = *(void *)(v10 + 8 * v9);
          if (v15 < v14 == v16 >= v17) {
            break;
          }
          ++v9;
          uint64_t v16 = v17;
          if (v3 == v9)
          {
            uint64_t v9 = v3;
            break;
          }
        }
      }
      if (v15 < v14)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          uint64_t v18 = v9 - 1;
          uint64_t v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              uint64_t v20 = *(void *)(v10 + 8 * v19);
              *(void *)(v10 + 8 * v19) = *(void *)(v10 + 8 * v18);
              *(void *)(v10 + 8 * v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_47;
    }
    uint64_t v21 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      uint64_t v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      unint64_t v22 = (uint64_t *)(v93 + 8 * v9);
      do
      {
        uint64_t v23 = *(void *)(v10 + 8 * v9);
        uint64_t v24 = v13;
        double v25 = v22;
        do
        {
          uint64_t v26 = *v25;
          if (*v25 >= v23) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *double v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      uint64_t v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v11 = sub_1D16F9FD8(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      long long v77 = sub_1D16F9FD8((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      char v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    id v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          id v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          unint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        Swift::Int v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        uint64_t v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        unint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v29;
        int64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        sub_1D1693DB8((char *)(v10 + 8 * *(void *)v71), (char *)(v10 + 8 * *(void *)v74), v10 + 8 * v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)unint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        id v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    uint64_t v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v8 = v94;
      uint64_t v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

void sub_1D1693554(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[1];
  uint64_t v5 = sub_1D17BEB60();
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_132;
    }
    if (v4) {
      sub_1D1693CC0(0, v4, 1, a1);
    }
    return;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_140;
  }
  uint64_t v7 = v5;
  double v110 = a1;
  if (v4 < 2)
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v119 = MEMORY[0x1E4FBC860];
    uint64_t v118 = (void **)((MEMORY[0x1E4FBC860] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_98:
      double v102 = v10;
      if (v13 >= 2)
      {
        uint64_t v103 = *v110;
        do
        {
          unint64_t v104 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_127;
          }
          if (!v103) {
            goto LABEL_139;
          }
          unint64_t v105 = v102;
          uint64_t v106 = *(void *)&v102[16 * v104 + 32];
          uint64_t v107 = *(void *)&v102[16 * v13 + 24];
          sub_1D1694028((void **)(v103 + 8 * v106), (id *)(v103 + 8 * *(void *)&v102[16 * v13 + 16]), v103 + 8 * v107, v118);
          if (v2) {
            break;
          }
          if (v107 < v106) {
            goto LABEL_128;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v105 = sub_1D16FA24C((uint64_t)v105);
          }
          if (v104 >= *((void *)v105 + 2)) {
            goto LABEL_129;
          }
          unint64_t v108 = &v105[16 * v104 + 32];
          *(void *)unint64_t v108 = v106;
          *((void *)v108 + 1) = v107;
          unint64_t v109 = *((void *)v105 + 2);
          if (v13 > v109) {
            goto LABEL_130;
          }
          memmove(&v105[16 * v13 + 16], &v105[16 * v13 + 32], 16 * (v109 - v13));
          double v102 = v105;
          *((void *)v105 + 2) = v109 - 1;
          unint64_t v13 = v109 - 1;
        }
        while (v109 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_1D17BE150();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v8 = v6 >> 1;
    sub_1D165C128(0, (unint64_t *)&qword_1EA6514F0);
    uint64_t v9 = sub_1D17BE1C0();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    uint64_t v118 = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v119 = v9;
  }
  uint64_t v114 = v7;
  uint64_t v11 = 0;
  uint64_t v12 = *a1;
  uint64_t v111 = *a1 - 8;
  uint64_t v112 = *a1 + 16;
  uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v115 = v4;
  while (1)
  {
    uint64_t v14 = v11++;
    uint64_t v116 = v14;
    if (v11 < v4)
    {
      uint64_t v15 = *(void **)(v12 + 8 * v14);
      id v16 = *(id *)(v12 + 8 * v11);
      id v17 = v15;
      objc_msgSend(v16, sel_weight);
      float v19 = v18;
      objc_msgSend(v17, sel_weight);
      float v21 = v20;

      uint64_t v11 = v14 + 2;
      if (v14 + 2 < v4)
      {
        unint64_t v22 = (id *)(v112 + 8 * v14);
        while (1)
        {
          uint64_t v23 = *(v22 - 1);
          id v24 = *v22;
          id v25 = v23;
          objc_msgSend(v24, sel_weight);
          float v27 = v26;
          objc_msgSend(v25, sel_weight);
          float v29 = v28;

          if (v19 < v21 == v27 >= v29) {
            break;
          }
          ++v11;
          ++v22;
          if (v4 == v11)
          {
            uint64_t v11 = v4;
            break;
          }
        }
        uint64_t v14 = v116;
      }
      if (v19 < v21)
      {
        if (v11 < v14) {
          goto LABEL_133;
        }
        if (v14 < v11)
        {
          uint64_t v30 = (uint64_t *)(v111 + 8 * v11);
          uint64_t v31 = v11;
          uint64_t v32 = v14;
          uint64_t v33 = (uint64_t *)(v12 + 8 * v14);
          do
          {
            if (v32 != --v31)
            {
              if (!v12) {
                goto LABEL_138;
              }
              uint64_t v34 = *v33;
              *uint64_t v33 = *v30;
              *uint64_t v30 = v34;
            }
            ++v32;
            --v30;
            ++v33;
          }
          while (v32 < v31);
        }
      }
    }
    if (v11 >= v4) {
      goto LABEL_47;
    }
    if (__OFSUB__(v11, v14)) {
      goto LABEL_131;
    }
    if (v11 - v14 >= v114) {
      goto LABEL_47;
    }
    if (__OFADD__(v14, v114)) {
      goto LABEL_134;
    }
    uint64_t v35 = v14 + v114 >= v4 ? v4 : v14 + v114;
    if (v35 < v14) {
      break;
    }
    if (v11 != v35)
    {
      uint64_t v113 = v10;
      uint64_t v36 = v111 + 8 * v11;
      do
      {
        uint64_t v37 = *(void **)(v12 + 8 * v11);
        uint64_t v38 = v14;
        uint64_t v39 = v36;
        do
        {
          uint64_t v40 = *(void **)v39;
          id v41 = v37;
          id v42 = v40;
          objc_msgSend(v41, sel_weight);
          float v44 = v43;
          objc_msgSend(v42, sel_weight);
          float v46 = v45;

          if (v44 >= v46) {
            break;
          }
          if (!v12) {
            goto LABEL_136;
          }
          uint64_t v47 = *(void **)v39;
          uint64_t v37 = *(void **)(v39 + 8);
          *(void *)uint64_t v39 = v37;
          *(void *)(v39 + 8) = v47;
          v39 -= 8;
          ++v38;
        }
        while (v11 != v38);
        ++v11;
        v36 += 8;
        uint64_t v14 = v116;
      }
      while (v11 != v35);
      uint64_t v11 = v35;
      uint64_t v10 = v113;
    }
LABEL_47:
    if (v11 < v14) {
      goto LABEL_126;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_1D16F9FD8(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v49 = *((void *)v10 + 2);
    unint64_t v48 = *((void *)v10 + 3);
    unint64_t v13 = v49 + 1;
    if (v49 >= v48 >> 1) {
      uint64_t v10 = sub_1D16F9FD8((char *)(v48 > 1), v49 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v13;
    uint64_t v50 = v10 + 32;
    uint64_t v51 = &v10[16 * v49 + 32];
    *(void *)uint64_t v51 = v14;
    *((void *)v51 + 1) = v11;
    if (v49)
    {
      uint64_t v117 = v11;
      while (1)
      {
        unint64_t v52 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v57 = &v50[16 * v13];
          uint64_t v58 = *((void *)v57 - 8);
          uint64_t v59 = *((void *)v57 - 7);
          BOOL v63 = __OFSUB__(v59, v58);
          uint64_t v60 = v59 - v58;
          if (v63) {
            goto LABEL_115;
          }
          uint64_t v62 = *((void *)v57 - 6);
          uint64_t v61 = *((void *)v57 - 5);
          BOOL v63 = __OFSUB__(v61, v62);
          uint64_t v55 = v61 - v62;
          char v56 = v63;
          if (v63) {
            goto LABEL_116;
          }
          unint64_t v64 = v13 - 2;
          uint64_t v65 = &v50[16 * v13 - 32];
          uint64_t v67 = *(void *)v65;
          uint64_t v66 = *((void *)v65 + 1);
          BOOL v63 = __OFSUB__(v66, v67);
          uint64_t v68 = v66 - v67;
          if (v63) {
            goto LABEL_118;
          }
          BOOL v63 = __OFADD__(v55, v68);
          uint64_t v69 = v55 + v68;
          if (v63) {
            goto LABEL_121;
          }
          if (v69 >= v60)
          {
            unint64_t v87 = &v50[16 * v52];
            uint64_t v89 = *(void *)v87;
            uint64_t v88 = *((void *)v87 + 1);
            BOOL v63 = __OFSUB__(v88, v89);
            uint64_t v90 = v88 - v89;
            if (v63) {
              goto LABEL_125;
            }
            BOOL v80 = v55 < v90;
            goto LABEL_85;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v81 = *((void *)v10 + 4);
            uint64_t v82 = *((void *)v10 + 5);
            BOOL v63 = __OFSUB__(v82, v81);
            uint64_t v74 = v82 - v81;
            char v75 = v63;
            goto LABEL_79;
          }
          uint64_t v54 = *((void *)v10 + 4);
          uint64_t v53 = *((void *)v10 + 5);
          BOOL v63 = __OFSUB__(v53, v54);
          uint64_t v55 = v53 - v54;
          char v56 = v63;
        }
        if (v56) {
          goto LABEL_117;
        }
        unint64_t v64 = v13 - 2;
        unint64_t v70 = &v50[16 * v13 - 32];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        BOOL v73 = __OFSUB__(v71, v72);
        uint64_t v74 = v71 - v72;
        char v75 = v73;
        if (v73) {
          goto LABEL_120;
        }
        unint64_t v76 = &v50[16 * v52];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        BOOL v63 = __OFSUB__(v77, v78);
        uint64_t v79 = v77 - v78;
        if (v63) {
          goto LABEL_123;
        }
        if (__OFADD__(v74, v79)) {
          goto LABEL_124;
        }
        if (v74 + v79 >= v55)
        {
          BOOL v80 = v55 < v79;
LABEL_85:
          if (v80) {
            unint64_t v52 = v64;
          }
          goto LABEL_87;
        }
LABEL_79:
        if (v75) {
          goto LABEL_119;
        }
        uint64_t v83 = &v50[16 * v52];
        uint64_t v85 = *(void *)v83;
        uint64_t v84 = *((void *)v83 + 1);
        BOOL v63 = __OFSUB__(v84, v85);
        uint64_t v86 = v84 - v85;
        if (v63) {
          goto LABEL_122;
        }
        if (v86 < v74) {
          goto LABEL_14;
        }
LABEL_87:
        unint64_t v91 = v52 - 1;
        if (v52 - 1 >= v13)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        uint64_t v92 = v12;
        if (!v12) {
          goto LABEL_137;
        }
        uint64_t v93 = v10;
        uint64_t v94 = &v50[16 * v91];
        uint64_t v95 = *(void *)v94;
        uint64_t v96 = v50;
        unint64_t v97 = v52;
        uint64_t v98 = &v50[16 * v52];
        uint64_t v99 = *((void *)v98 + 1);
        uint64_t v100 = v92;
        sub_1D1694028((void **)(v92 + 8 * *(void *)v94), (id *)(v92 + 8 * *(void *)v98), v92 + 8 * v99, v118);
        if (v1) {
          goto LABEL_95;
        }
        if (v99 < v95) {
          goto LABEL_112;
        }
        if (v97 > *((void *)v93 + 2)) {
          goto LABEL_113;
        }
        *(void *)uint64_t v94 = v95;
        *(void *)&v96[16 * v91 + 8] = v99;
        unint64_t v101 = *((void *)v93 + 2);
        if (v97 >= v101) {
          goto LABEL_114;
        }
        uint64_t v10 = v93;
        unint64_t v13 = v101 - 1;
        memmove(v98, v98 + 16, 16 * (v101 - 1 - v97));
        uint64_t v50 = v96;
        *((void *)v93 + 2) = v101 - 1;
        uint64_t v12 = v100;
        uint64_t v11 = v117;
        if (v101 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_14:
    uint64_t v4 = v115;
    if (v11 >= v115)
    {
      uint64_t v2 = v1;
      goto LABEL_98;
    }
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  sub_1D17BEA30();
  __break(1u);
}

void sub_1D1693CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = *a4;
    uint64_t v7 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v8 = *(void **)(v6 + 8 * v4);
    uint64_t v9 = a1;
    uint64_t v10 = v7;
    while (1)
    {
      uint64_t v11 = *(void **)v10;
      id v12 = v8;
      id v13 = v11;
      objc_msgSend(v12, sel_weight);
      float v15 = v14;
      objc_msgSend(v13, sel_weight);
      float v17 = v16;

      if (v15 >= v17)
      {
LABEL_4:
        ++v4;
        v7 += 8;
        if (v4 == a2) {
          return;
        }
        goto LABEL_5;
      }
      if (!v6) {
        break;
      }
      float v18 = *(void **)v10;
      uint64_t v8 = *(void **)(v10 + 8);
      *(void *)uint64_t v10 = v8;
      *(void *)(v10 + 8) = v18;
      v10 -= 8;
      if (v4 == ++v9) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_1D1693DB8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  id v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      float v16 = &v4[8 * v13];
      unint64_t v22 = v16;
      id v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        float v17 = (char *)(a3 - 8);
        while (1)
        {
          float v18 = v17 + 8;
          float v19 = v6 - 8;
          uint64_t v20 = *((void *)v6 - 1);
          if (v20 >= *((void *)v16 - 1))
          {
            unint64_t v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *(void *)float v17 = *((void *)v16 - 1);
            }
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *(void *)float v17 = v20;
            }
            id v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 8;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    float v14 = &v4[8 * v10];
    unint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(void *)v4 >= *(void *)v6)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          uint64_t v23 = v4;
          float v15 = v6;
        }
        else
        {
          float v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      id v24 = v7;
    }
LABEL_42:
    sub_1D16FA0D4((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1694028(void **__src, id *a2, unint64_t a3, void **a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v8 = (char *)a2 - (char *)__src;
  }
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v11 = a3 - (void)a2;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v39 = __src;
  uint64_t v38 = a4;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7) {
      goto LABEL_46;
    }
    if (a4 != a2 || &a2[v12] <= a4) {
      memmove(a4, a2, 8 * v12);
    }
    uint64_t v23 = &a4[v12];
    uint64_t v37 = (char *)v23;
    uint64_t v39 = v5;
    if (v6 >= v5 || v10 < 8) {
      goto LABEL_45;
    }
    id v24 = (id *)(a3 - 8);
    id v25 = v5;
    while (1)
    {
      float v26 = v24 + 1;
      float v27 = v23 - 1;
      float v28 = *--v25;
      id v29 = *(v23 - 1);
      id v30 = v28;
      objc_msgSend(v29, sel_weight);
      float v32 = v31;
      objc_msgSend(v30, sel_weight);
      float v34 = v33;

      if (v32 < v34) {
        break;
      }
      uint64_t v37 = (char *)(v23 - 1);
      if (v26 < v23 || v24 >= v23)
      {
        *id v24 = *v27;
        id v25 = v5;
        --v23;
        goto LABEL_43;
      }
      if (v26 != v23) {
        *id v24 = *v27;
      }
      id v25 = v5;
      --v23;
      if (v5 <= v6) {
        goto LABEL_45;
      }
LABEL_44:
      --v24;
      uint64_t v5 = v25;
      if (v23 <= a4) {
        goto LABEL_45;
      }
    }
    if (v26 != v5 || v24 >= v5) {
      *id v24 = *v25;
    }
    uint64_t v39 = v25;
LABEL_43:
    if (v25 <= v6) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (v7 >= -7)
  {
    if (a4 != __src || &__src[v9] <= a4) {
      memmove(a4, __src, 8 * v9);
    }
    uint64_t v13 = &a4[v9];
    uint64_t v37 = (char *)v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      float v14 = a4;
      do
      {
        float v15 = *v14;
        id v16 = *v5;
        id v17 = v15;
        objc_msgSend(v16, sel_weight);
        float v19 = v18;
        objc_msgSend(v17, sel_weight);
        float v21 = v20;

        if (v19 >= v21)
        {
          if (v6 != v14) {
            *uint64_t v6 = *v14;
          }
          uint64_t v38 = ++v14;
          unint64_t v22 = v5;
        }
        else
        {
          unint64_t v22 = v5 + 1;
          if (v6 < v5 || v6 >= v22 || v6 != v5) {
            *uint64_t v6 = *v5;
          }
        }
        ++v6;
        if (v14 >= v13) {
          break;
        }
        uint64_t v5 = v22;
      }
      while ((unint64_t)v22 < a3);
      uint64_t v39 = v6;
    }
LABEL_45:
    sub_1D16FA0D4((void **)&v39, (const void **)&v38, &v37);
    return 1;
  }
LABEL_46:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

id sub_1D1694354(void *a1)
{
  id result = (id)MACluster.makeIterator()((uint64_t)v33);
  uint64_t v2 = 0;
  uint64_t v3 = v33[0];
  uint64_t v30 = v33[1];
  uint64_t v4 = v35;
  unint64_t v5 = v36;
  uint64_t v28 = v34;
  float v31 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v6 = (void *)(MEMORY[0x1E4FBC860] + 32);
  int64_t v29 = (unint64_t)(v34 + 64) >> 6;
  if ((v33[0] & 0x8000000000000000) != 0) {
    goto LABEL_4;
  }
LABEL_2:
  if (v5)
  {
    uint64_t v7 = (v5 - 1) & v5;
    unint64_t v8 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v9 = v4;
    goto LABEL_23;
  }
  int64_t v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v11 >= v29) {
    goto LABEL_40;
  }
  unint64_t v12 = *(void *)(v30 + 8 * v11);
  uint64_t v9 = v4 + 1;
  if (v12) {
    goto LABEL_22;
  }
  uint64_t v9 = v4 + 2;
  if (v4 + 2 >= v29) {
    goto LABEL_40;
  }
  unint64_t v12 = *(void *)(v30 + 8 * v9);
  if (v12) {
    goto LABEL_22;
  }
  uint64_t v9 = v4 + 3;
  if (v4 + 3 >= v29) {
    goto LABEL_40;
  }
  unint64_t v12 = *(void *)(v30 + 8 * v9);
  if (v12) {
    goto LABEL_22;
  }
  uint64_t v9 = v4 + 4;
  if (v4 + 4 >= v29) {
    goto LABEL_40;
  }
  unint64_t v12 = *(void *)(v30 + 8 * v9);
  if (v12) {
    goto LABEL_22;
  }
  uint64_t v9 = v4 + 5;
  if (v4 + 5 >= v29)
  {
LABEL_40:
    unint64_t v5 = 0;
    goto LABEL_41;
  }
  unint64_t v12 = *(void *)(v30 + 8 * v9);
  if (!v12)
  {
    uint64_t v13 = v4 + 6;
    while (v29 != v13)
    {
      unint64_t v12 = *(void *)(v30 + 8 * v13++);
      if (v12)
      {
        uint64_t v9 = v13 - 1;
        goto LABEL_22;
      }
    }
    goto LABEL_40;
  }
LABEL_22:
  uint64_t v7 = (v12 - 1) & v12;
  unint64_t v8 = __clz(__rbit64(v12)) + (v9 << 6);
LABEL_23:
  id result = *(id *)(*(void *)(v3 + 48) + 8 * v8);
  id v10 = result;
  if (result)
  {
    while (1)
    {
      if (!v2)
      {
        unint64_t v14 = v31[3];
        if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_46;
        }
        int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
        if (v15 <= 1) {
          uint64_t v16 = 1;
        }
        else {
          uint64_t v16 = v15;
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
        id v17 = (void *)swift_allocObject();
        int64_t v18 = _swift_stdlib_malloc_size(v17);
        uint64_t v19 = v18 - 32;
        if (v18 < 32) {
          uint64_t v19 = v18 - 25;
        }
        uint64_t v20 = v19 >> 3;
        _OWORD v17[2] = v16;
        v17[3] = (2 * (v19 >> 3)) | 1;
        unint64_t v21 = (unint64_t)(v17 + 4);
        uint64_t v22 = v31[3] >> 1;
        if (v31[2])
        {
          uint64_t v23 = v31 + 4;
          if (v17 != v31 || v21 >= (unint64_t)v23 + 8 * v22) {
            memmove(v17 + 4, v23, 8 * v22);
          }
          void v31[2] = 0;
        }
        uint64_t v6 = (void *)(v21 + 8 * v22);
        uint64_t v2 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
        id result = (id)swift_release();
        float v31 = v17;
      }
      BOOL v24 = __OFSUB__(v2--, 1);
      if (v24) {
        break;
      }
      *v6++ = v10;
      uint64_t v4 = v9;
      unint64_t v5 = v7;
      if ((v3 & 0x8000000000000000) == 0) {
        goto LABEL_2;
      }
LABEL_4:
      if (sub_1D17BE7A0())
      {
        sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v10 = a1;
        id result = (id)swift_unknownObjectRelease();
        uint64_t v9 = v4;
        uint64_t v7 = v5;
        if (a1) {
          continue;
        }
      }
      goto LABEL_41;
    }
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_41:
  sub_1D16681F0(v3, v30, v28, v4, v5);
  id result = v31;
  unint64_t v25 = v31[3];
  if (v25 >= 2)
  {
    unint64_t v26 = v25 >> 1;
    BOOL v24 = __OFSUB__(v26, v2);
    uint64_t v27 = v26 - v2;
    if (v24)
    {
LABEL_48:
      __break(1u);
      return result;
    }
    void v31[2] = v27;
  }
  return result;
}

uint64_t sub_1D1694678(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result * a2;
  if ((unsigned __int128)(result * (__int128)a2) >> 64 != (result * a2) >> 63)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  swift_bridgeObjectRetain_n();
  uint64_t v25 = v5;
  id result = swift_retain();
  uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
  if (v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = (void *)(MEMORY[0x1E4FBC860] + 32);
    while (v7 < *(void *)(a3 + 16))
    {
      uint64_t v10 = *(void *)(a3 + 32 + 8 * v7);
      if (!v8)
      {
        unint64_t v11 = v6[3];
        if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_28;
        }
        int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = v12;
        }
        __swift_instantiateConcreteTypeFromMangledName(qword_1EBD27248);
        unint64_t v14 = (void *)swift_allocObject();
        int64_t v15 = _swift_stdlib_malloc_size(v14);
        uint64_t v16 = v15 - 32;
        if (v15 < 32) {
          uint64_t v16 = v15 - 25;
        }
        uint64_t v17 = v16 >> 3;
        void v14[2] = v13;
        v14[3] = 2 * (v16 >> 3);
        unint64_t v18 = (unint64_t)(v14 + 4);
        uint64_t v19 = v6[3] >> 1;
        if (v6[2])
        {
          uint64_t v20 = v6 + 4;
          if (v14 != v6 || v18 >= (unint64_t)v20 + 8 * v19) {
            memmove(v14 + 4, v20, 8 * v19);
          }
          uint64_t v6[2] = 0;
        }
        uint64_t v9 = (void *)(v18 + 8 * v19);
        uint64_t v8 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - v19;
        id result = swift_release();
        uint64_t v6 = v14;
      }
      BOOL v21 = __OFSUB__(v8--, 1);
      if (v21) {
        goto LABEL_27;
      }
      ++v7;
      *v9++ = v10;
      if (v3 == v7) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v8 = 0;
LABEL_22:
  *(void *)(v25 + 16) = v3;
  swift_bridgeObjectRelease_n();
  id result = swift_release_n();
  unint64_t v22 = v6[3];
  if (v22 < 2) {
    return (uint64_t)v6;
  }
  unint64_t v23 = v22 >> 1;
  BOOL v21 = __OFSUB__(v23, v8);
  uint64_t v24 = v23 - v8;
  if (!v21)
  {
    uint64_t v6[2] = v24;
    return (uint64_t)v6;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1D1694858(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = 0;
  uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v10 = (uint64_t *)(MEMORY[0x1E4FBC860] + 32);
  if (a3 != 1.0) {
    goto LABEL_5;
  }
LABEL_2:
  BOOL v11 = __OFADD__(v7++, 1);
  if (v11)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  else
  {
    while (v7 <= a2)
    {
      if (!v8)
      {
        unint64_t v14 = v9[3];
        if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_36;
        }
        int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
        if (v15 <= 1) {
          uint64_t v16 = 1;
        }
        else {
          uint64_t v16 = v15;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD272F0);
        uint64_t v17 = (void *)swift_allocObject();
        int64_t v18 = _swift_stdlib_malloc_size(v17);
        uint64_t v19 = v18 - 32;
        if (v18 < 32) {
          uint64_t v19 = v18 - 25;
        }
        uint64_t v20 = v19 >> 3;
        _OWORD v17[2] = v16;
        v17[3] = 2 * (v19 >> 3);
        unint64_t v21 = (unint64_t)(v17 + 4);
        uint64_t v22 = v9[3] >> 1;
        if (v9[2])
        {
          unint64_t v23 = v9 + 4;
          if (v17 != v9 || v21 >= (unint64_t)v23 + 8 * v22) {
            memmove(v17 + 4, v23, 8 * v22);
          }
          v9[2] = 0;
        }
        uint64_t v10 = (uint64_t *)(v21 + 8 * v22);
        uint64_t v8 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
        a1 = swift_release();
        uint64_t v9 = v17;
      }
      BOOL v11 = __OFSUB__(v8--, 1);
      if (v11)
      {
        __break(1u);
        goto LABEL_31;
      }
      *v10++ = v7;
      if (a3 == 1.0) {
        goto LABEL_2;
      }
LABEL_5:
      sub_1D167C4C8(a1, 0.0, 1.0);
      double v13 = ceil(log(1.0 - v12) * a4);
      if ((~*(void *)&v13 & 0x7FF0000000000000) == 0) {
        goto LABEL_32;
      }
      if (v13 <= -9.22337204e18) {
        goto LABEL_33;
      }
      if (v13 >= 9.22337204e18) {
        goto LABEL_34;
      }
      BOOL v11 = __OFADD__(v7, (uint64_t)v13);
      v7 += (uint64_t)v13;
      if (v11) {
        goto LABEL_35;
      }
    }
    unint64_t v24 = v9[3];
    if (v24 < 2) {
      return;
    }
    unint64_t v25 = v24 >> 1;
    BOOL v11 = __OFSUB__(v25, v8);
    uint64_t v26 = v25 - v8;
    if (!v11)
    {
      v9[2] = v26;
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1D1694A44(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >> 62) {
    goto LABEL_35;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
LABEL_3:
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  swift_retain();
  uint64_t v32 = v4;
  swift_retain();
  uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
  if (v3)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = v2 & 0xC000000000000001;
    uint64_t v9 = (void *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v10 = v2 & 0xFFFFFFFFFFFFFF8;
    unint64_t v34 = v2 & 0xC000000000000001;
    uint64_t v35 = v3;
    uint64_t v33 = v2 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v8)
      {
        id v11 = (id)MEMORY[0x1D25F9260](v6, v2);
      }
      else
      {
        if (v6 >= *(void *)(v10 + 16))
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v3 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        id v11 = *(id *)(v2 + 8 * v6 + 32);
      }
      id v12 = v11;
      uint64_t v13 = *(void *)(v1 + 32);
      if (v6 >= *(void *)(v13 + 16)) {
        goto LABEL_32;
      }
      uint64_t v14 = *(void *)(v13 + 8 * v6 + 32);
      if (!v7)
      {
        unint64_t v15 = v5[3];
        if ((uint64_t)((v15 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_34;
        }
        unint64_t v16 = v2;
        uint64_t v17 = v1;
        int64_t v18 = v15 & 0xFFFFFFFFFFFFFFFELL;
        if (v18 <= 1) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = v18;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651CC0);
        uint64_t v20 = (void *)swift_allocObject();
        int64_t v21 = _swift_stdlib_malloc_size(v20);
        uint64_t v22 = v21 - 32;
        if (v21 < 32) {
          uint64_t v22 = v21 - 17;
        }
        uint64_t v23 = v22 >> 4;
        _OWORD v20[2] = v19;
        v20[3] = 2 * (v22 >> 4);
        unint64_t v24 = (unint64_t)(v20 + 4);
        uint64_t v25 = v5[3] >> 1;
        if (v5[2])
        {
          uint64_t v26 = v5 + 4;
          if (v20 != v5 || v24 >= (unint64_t)v26 + 16 * v25) {
            memmove(v20 + 4, v26, 16 * v25);
          }
          void v5[2] = 0;
        }
        uint64_t v9 = (void *)(v24 + 16 * v25);
        uint64_t v7 = (v23 & 0x7FFFFFFFFFFFFFFFLL) - v25;
        swift_release();
        uint64_t v5 = v20;
        uint64_t v1 = v17;
        unint64_t v2 = v16;
        unint64_t v8 = v34;
        uint64_t v3 = v35;
        uint64_t v10 = v33;
      }
      BOOL v27 = __OFSUB__(v7--, 1);
      if (v27) {
        goto LABEL_33;
      }
      ++v6;
      *uint64_t v9 = v12;
      v9[1] = v14;
      v9 += 2;
      if (v3 == v6) {
        goto LABEL_27;
      }
    }
  }
  uint64_t v7 = 0;
LABEL_27:
  *(void *)(v32 + 16) = v3;
  swift_release_n();
  uint64_t result = swift_release_n();
  unint64_t v29 = v5[3];
  if (v29 < 2) {
    return (uint64_t)v5;
  }
  unint64_t v30 = v29 >> 1;
  BOOL v27 = __OFSUB__(v30, v7);
  uint64_t v31 = v30 - v7;
  if (!v27)
  {
    void v5[2] = v31;
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D1694CC4(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_52;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (v2)
  {
    while (1)
    {
      if (v2 < 1)
      {
        __break(1u);
        goto LABEL_59;
      }
      if ((a1 & 0xC000000000000001) == 0) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      unint64_t v6 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v7 = (void *)(MEMORY[0x1E4FBC860] + 32);
      while (1)
      {
        uint64_t v8 = MEMORY[0x1D25F9260](v5, a1);
        if (!v4)
        {
          unint64_t v9 = v6[3];
          if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_50;
          }
          int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
          if (v10 <= 1) {
            uint64_t v11 = 1;
          }
          else {
            uint64_t v11 = v10;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651CA8);
          id v12 = (void *)swift_allocObject();
          int64_t v13 = _swift_stdlib_malloc_size(v12);
          uint64_t v14 = v13 - 32;
          if (v13 < 32) {
            uint64_t v14 = v13 - 17;
          }
          uint64_t v15 = v14 >> 4;
          v12[2] = v11;
          v12[3] = 2 * (v14 >> 4);
          unint64_t v16 = (unint64_t)(v12 + 4);
          uint64_t v17 = v6[3] >> 1;
          if (v6[2])
          {
            if (v12 != v6 || v16 >= (unint64_t)&v6[2 * v17 + 4]) {
              memmove(v12 + 4, v6 + 4, 16 * v17);
            }
            uint64_t v6[2] = 0;
          }
          uint64_t v7 = (void *)(v16 + 16 * v17);
          uint64_t v4 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
          swift_release();
          unint64_t v6 = v12;
        }
        BOOL v19 = __OFSUB__(v4--, 1);
        if (v19) {
          break;
        }
        *uint64_t v7 = v5;
        v7[1] = v8;
        v7 += 2;
        if (v2 == ++v5) {
          goto LABEL_47;
        }
      }
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      swift_bridgeObjectRetain();
      uint64_t result = sub_1D17BEAD0();
      uint64_t v2 = result;
      if (!result) {
        goto LABEL_53;
      }
    }
    uint64_t v4 = 0;
    uint64_t v20 = 0;
    unint64_t v6 = (void *)MEMORY[0x1E4FBC860];
    int64_t v21 = (void *)(MEMORY[0x1E4FBC860] + 32);
    do
    {
      uint64_t v22 = *(void **)(a1 + 8 * v20 + 32);
      if (v4)
      {
        id v23 = v22;
        BOOL v19 = __OFSUB__(v4--, 1);
        if (v19) {
          goto LABEL_49;
        }
      }
      else
      {
        unint64_t v24 = v6[3];
        if ((uint64_t)((v24 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_51;
        }
        int64_t v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
        if (v25 <= 1) {
          uint64_t v26 = 1;
        }
        else {
          uint64_t v26 = v25;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651CA8);
        BOOL v27 = (void *)swift_allocObject();
        int64_t v28 = _swift_stdlib_malloc_size(v27);
        uint64_t v29 = v28 - 32;
        if (v28 < 32) {
          uint64_t v29 = v28 - 17;
        }
        uint64_t v30 = v29 >> 4;
        _OWORD v27[2] = v26;
        v27[3] = 2 * (v29 >> 4);
        uint64_t v31 = v27 + 4;
        uint64_t v32 = v6[3] >> 1;
        int64_t v21 = &v27[2 * v32 + 4];
        uint64_t v33 = (v30 & 0x7FFFFFFFFFFFFFFFLL) - v32;
        if (v6[2])
        {
          if (v27 != v6 || v31 >= &v6[2 * v32 + 4]) {
            memmove(v31, v6 + 4, 16 * v32);
          }
          id v35 = v22;
          uint64_t v6[2] = 0;
        }
        else
        {
          id v36 = v22;
        }
        swift_release();
        unint64_t v6 = v27;
        BOOL v19 = __OFSUB__(v33, 1);
        uint64_t v4 = v33 - 1;
        if (v19) {
          goto LABEL_49;
        }
      }
      *int64_t v21 = v20;
      v21[1] = v22;
      v21 += 2;
      ++v20;
    }
    while (v2 != v20);
LABEL_47:
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
LABEL_53:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v4 = 0;
    unint64_t v6 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v37 = v6[3];
  if (v37 < 2) {
    return (uint64_t)v6;
  }
  unint64_t v38 = v37 >> 1;
  BOOL v19 = __OFSUB__(v38, v4);
  uint64_t v39 = v38 - v4;
  if (!v19)
  {
    uint64_t v6[2] = v39;
    return (uint64_t)v6;
  }
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_1D1694F94(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  unint64_t v6 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v7 = (_DWORD *)(MEMORY[0x1E4FBC860] + 32);
LABEL_3:
  unint64_t v9 = *(void *)(a1 + 16);
  if (v5 != v9)
  {
    if (v5 >= v9)
    {
LABEL_31:
      __break(1u);
    }
    else
    {
      while (1)
      {
        uint64_t v10 = *(void *)(v2 + 8 * v5);
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRelease();
        if (v10)
        {
          unint64_t v8 = *(void *)(v10 + 16);
          if (v8) {
            break;
          }
        }
        ++v5;
        unint64_t v11 = *(void *)(a1 + 16);
        if (v5 == v11) {
          goto LABEL_27;
        }
        if (v5 >= v11) {
          goto LABEL_31;
        }
      }
      unint64_t v12 = 0;
      ++v5;
      while (v12 < v8)
      {
        int v13 = *(_DWORD *)(v10 + 4 * v12 + 32);
        if (!v4)
        {
          unint64_t v14 = v6[3];
          if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_34;
          }
          int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
          if (v15 <= 1) {
            uint64_t v16 = 1;
          }
          else {
            uint64_t v16 = v15;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD271F0);
          uint64_t v17 = (void *)swift_allocObject();
          int64_t v18 = _swift_stdlib_malloc_size(v17);
          uint64_t v19 = v18 - 32;
          if (v18 < 32) {
            uint64_t v19 = v18 - 29;
          }
          uint64_t v20 = v19 >> 2;
          _OWORD v17[2] = v16;
          v17[3] = 2 * (v19 >> 2);
          unint64_t v21 = (unint64_t)(v17 + 4);
          uint64_t v22 = v6[3] >> 1;
          if (v6[2])
          {
            id v23 = v6 + 4;
            if (v17 != v6 || v21 >= (unint64_t)v23 + 4 * v22)
            {
              uint64_t v24 = v19 >> 2;
              memmove(v17 + 4, v23, 4 * v22);
              uint64_t v20 = v24;
            }
            uint64_t v6[2] = 0;
          }
          uint64_t v7 = (_DWORD *)(v21 + 4 * v22);
          uint64_t v4 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
          uint64_t result = swift_release();
          unint64_t v6 = v17;
        }
        BOOL v25 = __OFSUB__(v4--, 1);
        if (v25) {
          goto LABEL_33;
        }
        ++v12;
        *v7++ = v13;
        unint64_t v8 = *(void *)(v10 + 16);
        if (v12 == v8) {
          goto LABEL_3;
        }
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_27:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v26 = v6[3];
  if (v26 < 2) {
    return (uint64_t)v6;
  }
  unint64_t v27 = v26 >> 1;
  BOOL v25 = __OFSUB__(v27, v4);
  uint64_t v28 = v27 - v4;
  if (!v25)
  {
    uint64_t v6[2] = v28;
    return (uint64_t)v6;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1D1695188(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  uint64_t v2 = (void *)MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v3 = result;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = v2 + 4;
    while (1)
    {
      uint64_t v7 = *(void *)(v3 + 8 * v5 + 32);
      if (!v4)
      {
        unint64_t v8 = v2[3];
        if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_28;
        }
        int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v9 <= 1) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v9;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651C70);
        unint64_t v11 = (void *)swift_allocObject();
        int64_t v12 = _swift_stdlib_malloc_size(v11);
        uint64_t v13 = v12 - 32;
        if (v12 < 32) {
          uint64_t v13 = v12 - 17;
        }
        uint64_t v14 = v13 >> 4;
        void v11[2] = v10;
        v11[3] = 2 * (v13 >> 4);
        unint64_t v15 = (unint64_t)(v11 + 4);
        uint64_t v16 = v2[3] >> 1;
        if (v2[2])
        {
          if (v11 != v2 || v15 >= (unint64_t)&v2[2 * v16 + 4]) {
            memmove(v11 + 4, v2 + 4, 16 * v16);
          }
          v2[2] = 0;
        }
        unint64_t v6 = (void *)(v15 + 16 * v16);
        uint64_t v4 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - v16;
        uint64_t result = swift_release();
        uint64_t v2 = v11;
      }
      BOOL v18 = __OFSUB__(v4--, 1);
      if (v18) {
        break;
      }
      *unint64_t v6 = v5;
      v6[1] = v7;
      v6 += 2;
      if (v1 == ++v5)
      {
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v4 = 0;
LABEL_23:
  unint64_t v19 = v2[3];
  if (v19 < 2) {
    return (uint64_t)v2;
  }
  unint64_t v20 = v19 >> 1;
  BOOL v18 = __OFSUB__(v20, v4);
  uint64_t v21 = v20 - v4;
  if (!v18)
  {
    v2[2] = v21;
    return (uint64_t)v2;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1D1695304(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  unint64_t v6 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v7 = (void *)(MEMORY[0x1E4FBC860] + 32);
LABEL_3:
  unint64_t v9 = *(void *)(a1 + 16);
  if (v5 != v9)
  {
    if (v5 >= v9)
    {
LABEL_31:
      __break(1u);
    }
    else
    {
      while (1)
      {
        uint64_t v10 = *(void *)(v2 + 8 * v5);
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRelease();
        if (v10)
        {
          unint64_t v8 = *(void *)(v10 + 16);
          if (v8) {
            break;
          }
        }
        ++v5;
        unint64_t v11 = *(void *)(a1 + 16);
        if (v5 == v11) {
          goto LABEL_27;
        }
        if (v5 >= v11) {
          goto LABEL_31;
        }
      }
      unint64_t v12 = 0;
      ++v5;
      while (v12 < v8)
      {
        uint64_t v13 = *(void *)(v10 + 8 * v12 + 32);
        if (!v4)
        {
          unint64_t v14 = v6[3];
          if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_34;
          }
          int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
          if (v15 <= 1) {
            uint64_t v16 = 1;
          }
          else {
            uint64_t v16 = v15;
          }
          __swift_instantiateConcreteTypeFromMangledName(qword_1EBD27248);
          uint64_t v17 = (void *)swift_allocObject();
          int64_t v18 = _swift_stdlib_malloc_size(v17);
          uint64_t v19 = v18 - 32;
          if (v18 < 32) {
            uint64_t v19 = v18 - 25;
          }
          uint64_t v20 = v19 >> 3;
          _OWORD v17[2] = v16;
          v17[3] = 2 * (v19 >> 3);
          unint64_t v21 = (unint64_t)(v17 + 4);
          uint64_t v22 = v6[3] >> 1;
          if (v6[2])
          {
            id v23 = v6 + 4;
            if (v17 != v6 || v21 >= (unint64_t)v23 + 8 * v22)
            {
              uint64_t v24 = v19 >> 3;
              memmove(v17 + 4, v23, 8 * v22);
              uint64_t v20 = v24;
            }
            uint64_t v6[2] = 0;
          }
          uint64_t v7 = (void *)(v21 + 8 * v22);
          uint64_t v4 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
          uint64_t result = swift_release();
          unint64_t v6 = v17;
        }
        BOOL v25 = __OFSUB__(v4--, 1);
        if (v25) {
          goto LABEL_33;
        }
        ++v12;
        *v7++ = v13;
        unint64_t v8 = *(void *)(v10 + 16);
        if (v12 == v8) {
          goto LABEL_3;
        }
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_27:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v26 = v6[3];
  if (v26 < 2) {
    return (uint64_t)v6;
  }
  unint64_t v27 = v26 >> 1;
  BOOL v25 = __OFSUB__(v27, v4);
  uint64_t v28 = v27 - v4;
  if (!v25)
  {
    uint64_t v6[2] = v28;
    return (uint64_t)v6;
  }
LABEL_35:
  __break(1u);
  return result;
}

unint64_t sub_1D16954F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t result = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    unint64_t result = sub_1D17BE920();
    uint64_t v6 = *(void *)(a2 + 24);
    if (v6)
    {
      uint64_t v7 = (uint64_t *)(a1 + 32);
      uint64_t v8 = *(void *)(a2 + 48);
      while (1)
      {
        uint64_t v10 = *v7++;
        uint64_t v9 = v10;
        if (v6 == -1 && v9 == 0x8000000000000000) {
          break;
        }
        unint64_t result = v9 % v6;
        if ((v8 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1D25F9260](result, v8);
        }
        else
        {
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_15;
          }
          if (result >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_16;
          }
          id v11 = *(id *)(v8 + 32 + 8 * result);
        }
        sub_1D17BE8F0();
        sub_1D17BE930();
        sub_1D17BE940();
        unint64_t result = sub_1D17BE900();
        if (!--v3) {
          return v12;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

unint64_t sub_1D1695638(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t result = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    unint64_t result = sub_1D17BE920();
    uint64_t v6 = *(void *)(a2 + 24);
    if (v6)
    {
      uint64_t v7 = (uint64_t *)(a1 + 32);
      uint64_t v8 = *(void *)(a2 + 40);
      while (1)
      {
        uint64_t v10 = *v7++;
        uint64_t v9 = v10;
        if (v6 == -1 && v9 == 0x8000000000000000) {
          break;
        }
        unint64_t result = v9 / v6;
        if ((v8 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1D25F9260](result, v8);
        }
        else
        {
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_15;
          }
          if (result >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_16;
          }
          id v11 = *(id *)(v8 + 32 + 8 * result);
        }
        sub_1D17BE8F0();
        sub_1D17BE930();
        sub_1D17BE940();
        unint64_t result = sub_1D17BE900();
        if (!--v3) {
          return v12;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

unint64_t sub_1D1695774(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t result = MEMORY[0x1E4FBC860];
  if (!v3) {
    return result;
  }
  uint64_t v10 = MEMORY[0x1E4FBC860];
  sub_1D17BE920();
  uint64_t v6 = (unint64_t *)(a1 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  while (1)
  {
    unint64_t v8 = *v6++;
    unint64_t result = v8;
    if ((v7 & 0xC000000000000001) != 0)
    {
      MEMORY[0x1D25F9260](result, v7);
      goto LABEL_4;
    }
    if ((result & 0x8000000000000000) != 0) {
      break;
    }
    if (result >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_12;
    }
    id v9 = *(id *)(v7 + 32 + 8 * result);
LABEL_4:
    sub_1D17BE8F0();
    sub_1D17BE930();
    sub_1D17BE940();
    sub_1D17BE900();
    if (!--v3) {
      return v10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

id sub_1D1695878(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return (id)v3;
  }
  uint64_t v22 = MEMORY[0x1E4FBC860];
  id result = (id)sub_1D16827F4(0, v2, 0);
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v3 = v22;
    uint64_t v21 = v8 + 32;
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v10 = *(i - 1);
      uint64_t v11 = *i;
      if (v7 == -1 && v10 == 0x8000000000000000) {
        break;
      }
      unint64_t v12 = v10 / v7;
      if ((v8 & 0xC000000000000001) != 0)
      {
        uint64_t v13 = MEMORY[0x1D25F9260](v10 / v7, v8);
        id result = (id)MEMORY[0x1D25F9260](v10 % v7, v8);
      }
      else
      {
        if ((v12 & 0x8000000000000000) != 0) {
          goto LABEL_18;
        }
        unint64_t v14 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v12 >= v14) {
          goto LABEL_19;
        }
        int64_t v15 = *(void **)(v21 + 8 * v12);
        unint64_t v16 = v10 % v7;
        id result = v15;
        if (v10 % v7 < 0) {
          goto LABEL_20;
        }
        if (v16 >= v14) {
          goto LABEL_21;
        }
        uint64_t v13 = (uint64_t)result;
        id result = *(id *)(v21 + 8 * v16);
      }
      id v17 = result;
      unint64_t v19 = *(void *)(v22 + 16);
      unint64_t v18 = *(void *)(v22 + 24);
      if (v19 >= v18 >> 1) {
        id result = (id)sub_1D16827F4(v18 > 1, v19 + 1, 1);
      }
      *(void *)(v22 + 16) = v19 + 1;
      uint64_t v20 = (void *)(v22 + 24 * v19);
      void v20[4] = v13;
      v20[5] = v17;
      v20[6] = v11;
      if (!--v2) {
        return (id)v3;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D1695A28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v20 = MEMORY[0x1E4FBC860];
    sub_1D16827F4(0, v4, 0);
    uint64_t v5 = v20;
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v9 = *i;
      v17[0] = *(i - 1);
      v17[1] = v9;
      sub_1D168F2E0((unint64_t)v17, a2, &v18);
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      long long v10 = v18;
      uint64_t v11 = v19;
      uint64_t v20 = v5;
      unint64_t v13 = *(void *)(v5 + 16);
      unint64_t v12 = *(void *)(v5 + 24);
      if (v13 >= v12 >> 1)
      {
        long long v16 = v18;
        sub_1D16827F4(v12 > 1, v13 + 1, 1);
        long long v10 = v16;
        uint64_t v5 = v20;
      }
      *(void *)(v5 + 16) = v13 + 1;
      uint64_t v14 = v5 + 24 * v13;
      *(_OWORD *)(v14 + 32) = v10;
      *(void *)(v14 + 48) = v11;
      if (!--v4) {
        return v5;
      }
    }
    swift_release();
  }
  return v5;
}

uint64_t sub_1D1695B50(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = *(void *)(a1 + 40);
  if (v4 >> 62) {
    goto LABEL_48;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  swift_retain();
  if (v5)
  {
    unint64_t v6 = v4;
    unint64_t v4 = 0;
    uint64_t v33 = v6 & 0xFFFFFFFFFFFFFF8;
    unint64_t v34 = v6 & 0xC000000000000001;
    unint64_t v28 = v6;
    unint64_t v32 = v6 + 32;
    uint64_t v30 = v5;
    uint64_t v31 = MEMORY[0x1E4FBC860];
    unint64_t v35 = a2 & 0xC000000000000001;
    uint64_t v29 = v3;
    while (1)
    {
      while (1)
      {
        unint64_t v7 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          swift_bridgeObjectRetain();
          uint64_t v5 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        if (v34)
        {
          id v8 = (id)MEMORY[0x1D25F9260](v4, v28);
        }
        else
        {
          if (v4 >= *(void *)(v33 + 16)) {
            goto LABEL_46;
          }
          id v8 = *(id *)(v32 + 8 * v4);
        }
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)(v3 + 32);
        if (v4 >= *(void *)(v10 + 16)) {
          goto LABEL_47;
        }
        uint64_t v11 = *(void *)(v10 + 8 * v4 + 32);
        if (a2 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v12 = sub_1D17BEAD0();
        }
        else
        {
          uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        ++v4;
        if (v12) {
          break;
        }
LABEL_37:
        swift_bridgeObjectRelease();
LABEL_30:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v22 = v31;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1D168277C(0, *(void *)(v31 + 16) + 1, 1);
          uint64_t v22 = v31;
        }
        uint64_t v23 = v22;
        unint64_t v25 = *(void *)(v22 + 16);
        unint64_t v24 = *(void *)(v22 + 24);
        if (v25 >= v24 >> 1)
        {
          sub_1D168277C(v24 > 1, v25 + 1, 1);
          uint64_t v23 = v31;
        }
        *(void *)(v23 + 16) = v25 + 1;
        uint64_t v31 = v23;
        uint64_t v26 = v23 + 16 * v25;
        *(void *)(v26 + 32) = v9;
        *(void *)(v26 + 40) = v11;
        uint64_t v5 = v30;
        if (v7 == v30) {
          goto LABEL_42;
        }
      }
      if (v35) {
        id v13 = (id)MEMORY[0x1D25F9260](0, a2);
      }
      else {
        id v13 = *(id *)(a2 + 32);
      }
      uint64_t v14 = v13;
      sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
      char v15 = sub_1D17BE5C0();

      if ((v15 & 1) == 0)
      {
        if (v12 != 1)
        {
          if (v35)
          {
            uint64_t v16 = 1;
            while (1)
            {
              MEMORY[0x1D25F9260](v16, a2);
              uint64_t v3 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                break;
              }
              char v17 = sub_1D17BE5C0();
              swift_unknownObjectRelease();
              if (v17) {
                goto LABEL_36;
              }
              ++v16;
              if (v3 == v12) {
                goto LABEL_29;
              }
            }
            __break(1u);
          }
          else
          {
            uint64_t v18 = 5;
            while (1)
            {
              uint64_t v3 = v18 - 3;
              if (__OFADD__(v18 - 4, 1)) {
                break;
              }
              id v19 = *(id *)(a2 + 8 * v18);
              char v20 = sub_1D17BE5C0();

              if (v20)
              {
LABEL_36:

                swift_bridgeObjectRelease();
                uint64_t v3 = v29;
                uint64_t v5 = v30;
                goto LABEL_6;
              }
              ++v18;
              if (v3 == v12)
              {
LABEL_29:
                swift_bridgeObjectRelease();
                uint64_t v3 = v29;
                goto LABEL_30;
              }
            }
          }
          __break(1u);
          goto LABEL_45;
        }
        goto LABEL_37;
      }

      swift_bridgeObjectRelease();
LABEL_6:
      if (v7 == v5) {
        goto LABEL_42;
      }
    }
  }
  uint64_t v31 = MEMORY[0x1E4FBC860];
LABEL_42:
  swift_release();
  return v31;
}

uint64_t sub_1D1695EC8(unint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  if (!(a1 >> 62))
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8) {
      goto LABEL_3;
    }
    return MEMORY[0x1E4FBC860];
  }
LABEL_30:
  uint64_t v8 = sub_1D17BEAD0();
  if (!v8) {
    return MEMORY[0x1E4FBC860];
  }
LABEL_3:
  uint64_t v9 = 0;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v25 = v10;
    for (uint64_t i = v9 + 4; ; ++i)
    {
      unint64_t v12 = i - 4;
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v13 = (id)MEMORY[0x1D25F9260](i - 4, a1);
      }
      else
      {
        if (v12 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        id v13 = *(id *)(a1 + 8 * i);
      }
      id v14 = v13;
      uint64_t v9 = i - 3;
      if (__OFADD__(v12, 1)) {
        goto LABEL_28;
      }
      uint64_t v15 = *(void *)(a2 + 32);
      if (v12 >= *(void *)(v15 + 16)) {
        goto LABEL_29;
      }
      double v16 = *(double *)(v15 + 8 * i);
      BOOL v17 = v16 < a4 || v16 > a5;
      if (!v17 && (a3 & 1) == 0) {
        break;
      }
      BOOL v18 = v16 > a4;
      if (v16 >= a5) {
        BOOL v18 = 0;
      }
      if (((v18 | a3 ^ 1) & 1) == 0) {
        break;
      }

      if (v9 == v8) {
        return v25;
      }
    }
    uint64_t v10 = v25;
    uint64_t v29 = v25;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1D16827D4(0, *(void *)(v25 + 16) + 1, 1);
      uint64_t v10 = v25;
    }
    unint64_t v20 = *(void *)(v10 + 16);
    unint64_t v19 = *(void *)(v10 + 24);
    unint64_t v21 = v20 + 1;
    if (v20 >= v19 >> 1)
    {
      unint64_t v26 = v20 + 1;
      unint64_t v24 = *(void *)(v10 + 16);
      sub_1D16827D4(v19 > 1, v20 + 1, 1);
      unint64_t v21 = v26;
      unint64_t v20 = v24;
      uint64_t v10 = v29;
    }
    *(void *)(v10 + 16) = v21;
    uint64_t v22 = v10 + 16 * v20;
    *(void *)(v22 + 32) = v12;
    *(void *)(v22 + 40) = v14;
  }
  while (v9 != v8);
  return v10;
}

uint64_t sub_1D16960B8(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5)
{
  unint64_t v6 = (unint64_t *)__dst;
  uint64_t v8 = a2;
  uint64_t v9 = __src;
  int64_t v10 = a2 - __src;
  int64_t v11 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v11 = a2 - __src;
  }
  uint64_t v12 = v11 >> 4;
  uint64_t v13 = a3 - (void)a2;
  uint64_t v14 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v14 = a3 - (void)a2;
  }
  uint64_t v15 = v14 >> 4;
  unint64_t v32 = __src;
  uint64_t v31 = (unint64_t *)__dst;
  if (v12 >= v14 >> 4)
  {
    if (v13 >= -15)
    {
      if (__dst != a2 || &a2[16 * v15] <= __dst) {
        memmove(__dst, a2, 16 * v15);
      }
      unint64_t v21 = &v6[2 * v15];
      uint64_t v30 = v21;
      unint64_t v32 = v8;
      if (v9 < v8 && v13 >= 16)
      {
        uint64_t v22 = *(void *)(a5 + 32);
        uint64_t v23 = (char *)(a3 - 16);
        while (1)
        {
          unint64_t v24 = *(v21 - 2);
          if ((v24 & 0x8000000000000000) != 0) {
            break;
          }
          unint64_t v25 = *(void *)(v22 + 16);
          if (v24 >= v25) {
            goto LABEL_51;
          }
          unint64_t v26 = v8 - 16;
          unint64_t v27 = *((void *)v8 - 2);
          if (v27 >= v25) {
            goto LABEL_52;
          }
          unint64_t v28 = v23 + 16;
          if (*(double *)(v22 + 32 + 8 * v24) >= *(double *)(v22 + 32 + 8 * v27))
          {
            uint64_t v30 = v21 - 2;
            if (v28 < (char *)v21 || v23 >= (char *)v21 || v28 != (char *)v21) {
              *(_OWORD *)uint64_t v23 = *((_OWORD *)v21 - 1);
            }
            unint64_t v26 = v8;
            v21 -= 2;
            if (v8 <= v9) {
              goto LABEL_49;
            }
          }
          else
          {
            if (v28 != v8 || v23 >= v8) {
              *(_OWORD *)uint64_t v23 = *(_OWORD *)v26;
            }
            unint64_t v32 = v8 - 16;
            if (v26 <= v9) {
              goto LABEL_49;
            }
          }
          v23 -= 16;
          uint64_t v8 = v26;
          if (v21 <= v6) {
            goto LABEL_49;
          }
        }
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
LABEL_49:
      sub_1D16FA190((void **)&v32, (const void **)&v31, &v30);
      return 1;
    }
  }
  else if (v10 >= -15)
  {
    if (__dst != __src || &__src[16 * v12] <= __dst) {
      memmove(__dst, __src, 16 * v12);
    }
    double v16 = &v6[2 * v12];
    uint64_t v30 = v16;
    if ((unint64_t)v8 < a3 && v10 >= 16)
    {
      uint64_t v17 = *(void *)(a5 + 32);
      while (1)
      {
        unint64_t v18 = *(void *)v8;
        if ((*(void *)v8 & 0x8000000000000000) != 0) {
          break;
        }
        unint64_t v19 = *(void *)(v17 + 16);
        if (v18 >= v19) {
          goto LABEL_54;
        }
        if (*v6 >= v19) {
          goto LABEL_55;
        }
        if (*(double *)(v17 + 32 + 8 * v18) >= *(double *)(v17 + 32 + 8 * *v6))
        {
          if (v9 != (char *)v6) {
            *(_OWORD *)uint64_t v9 = *(_OWORD *)v6;
          }
          v6 += 2;
          uint64_t v31 = v6;
          unint64_t v20 = v8;
        }
        else
        {
          unint64_t v20 = v8 + 16;
          if (v9 < v8 || v9 >= v20 || v9 != v8) {
            *(_OWORD *)uint64_t v9 = *(_OWORD *)v8;
          }
        }
        v9 += 16;
        if (v6 < v16)
        {
          uint64_t v8 = v20;
          if ((unint64_t)v20 < a3) {
            continue;
          }
        }
        unint64_t v32 = v9;
        goto LABEL_49;
      }
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    goto LABEL_49;
  }
LABEL_56:
  swift_release();
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D16963A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 != a2)
  {
    uint64_t v5 = *a4;
    uint64_t v6 = *(void *)(a5 + 32);
    uint64_t v7 = *a4 + 16 * a3 - 16;
LABEL_5:
    unint64_t v8 = *(void *)(v5 + 16 * a3);
    uint64_t v9 = result;
    uint64_t v10 = v7;
    while ((v8 & 0x8000000000000000) == 0)
    {
      unint64_t v11 = *(void *)(v6 + 16);
      if (v8 >= v11) {
        goto LABEL_14;
      }
      if (*(void *)v10 >= v11) {
        goto LABEL_15;
      }
      if (*(double *)(v6 + 32 + 8 * v8) < *(double *)(v6 + 32 + 8 * *(void *)v10))
      {
        if (!v5) {
          goto LABEL_16;
        }
        uint64_t v12 = *(void *)(v10 + 24);
        *(_OWORD *)(v10 + 16) = *(_OWORD *)v10;
        *(void *)uint64_t v10 = v8;
        *(void *)(v10 + 8) = v12;
        v10 -= 16;
        if (a3 != ++v9) {
          continue;
        }
      }
      ++a3;
      v7 += 16;
      if (a3 == a2) {
        return result;
      }
      goto LABEL_5;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  return result;
}

uint64_t sub_1D1696450(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = a1[1];
  swift_retain_n();
  uint64_t v6 = sub_1D17BEB60();
  if (v6 >= v5)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
      if (v5)
      {
        swift_retain();
        sub_1D16963A8(0, v5, 1, a1, a2);
      }
      swift_release_n();
      return swift_release();
    }
    goto LABEL_151;
  }
  if (v5 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v5 + 1;
  }
  if (v5 < -1) {
    goto LABEL_159;
  }
  uint64_t v119 = a2;
  uint64_t v111 = v6;
  uint64_t v112 = v5;
  uint64_t v120 = v2;
  unint64_t v108 = a1;
  if (v5 < 2)
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v118 = (char *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v110 = MEMORY[0x1E4FBC860];
    if (v5 != 1)
    {
      unint64_t v43 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_108:
      if (v43 < 2)
      {
LABEL_119:
        swift_bridgeObjectRelease();
        *(void *)(v110 + 16) = 0;
        swift_release_n();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      uint64_t v97 = *v108;
      uint64_t v117 = *v108;
      while (1)
      {
        unint64_t v98 = v43 - 2;
        if (v43 < 2) {
          break;
        }
        if (!v97) {
          goto LABEL_158;
        }
        uint64_t v99 = *(void *)&v10[16 * v98 + 32];
        uint64_t v100 = *(void *)&v10[16 * v43 + 24];
        unint64_t v101 = (char *)(v97 + 16 * v99);
        double v102 = (char *)(v97 + 16 * *(void *)&v10[16 * v43 + 16]);
        unint64_t v103 = v97 + 16 * v100;
        swift_retain();
        sub_1D16960B8(v101, v102, v103, v118, v119);
        if (v120)
        {
          uint64_t v96 = v110;
          goto LABEL_105;
        }
        swift_release();
        if (v100 < v99) {
          goto LABEL_143;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = sub_1D16FA24C((uint64_t)v10);
        }
        if (v98 >= *((void *)v10 + 2)) {
          goto LABEL_144;
        }
        unint64_t v104 = &v10[16 * v98 + 32];
        *(void *)unint64_t v104 = v99;
        *((void *)v104 + 1) = v100;
        unint64_t v105 = *((void *)v10 + 2);
        if (v43 > v105) {
          goto LABEL_145;
        }
        memmove(&v10[16 * v43 + 16], &v10[16 * v43 + 32], 16 * (v105 - v43));
        *((void *)v10 + 2) = v105 - 1;
        unint64_t v43 = v105 - 1;
        uint64_t v97 = v117;
        if (v105 <= 2) {
          goto LABEL_119;
        }
      }
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
      goto LABEL_150;
    }
  }
  else
  {
    uint64_t v8 = v7 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651CB0);
    uint64_t v9 = sub_1D17BE1C0();
    *(void *)(v9 + 16) = v8;
    uint64_t v110 = v9;
    uint64_t v118 = (char *)(v9 + 32);
  }
  uint64_t v11 = 0;
  uint64_t v12 = *a1;
  uint64_t v109 = *a1 + 32;
  uint64_t v107 = *a1 - 16;
  uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v13 = v5;
  uint64_t v114 = *a1;
  while (1)
  {
    uint64_t v14 = v11 + 1;
    if (v11 + 1 >= v13) {
      goto LABEL_34;
    }
    unint64_t v15 = *(void *)(v12 + 16 * v14);
    if ((v15 & 0x8000000000000000) != 0) {
      goto LABEL_147;
    }
    uint64_t v16 = *(void *)(a2 + 32);
    unint64_t v17 = *(void *)(v16 + 16);
    if (v15 >= v17) {
      goto LABEL_148;
    }
    uint64_t v18 = 16 * v11;
    unint64_t v19 = *(void *)(v12 + 16 * v11);
    if (v19 >= v17) {
      goto LABEL_149;
    }
    uint64_t v20 = v16 + 32;
    double v21 = *(double *)(v20 + 8 * v15);
    double v22 = *(double *)(v20 + 8 * v19);
    uint64_t v14 = v11 + 2;
    if (v11 + 2 >= v13) {
      goto LABEL_25;
    }
    uint64_t v23 = (unint64_t *)(v109 + 16 * v11);
    double v24 = *(double *)(v20 + 8 * v15);
    do
    {
      unint64_t v26 = *v23;
      v23 += 2;
      unint64_t v25 = v26;
      if (v26 >= v17) {
        goto LABEL_129;
      }
      if (v15 >= v17)
      {
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
        goto LABEL_142;
      }
      if (v21 < v22 == *(double *)(v20 + 8 * v25) >= v24) {
        goto LABEL_25;
      }
      ++v14;
      double v24 = *(double *)(v20 + 8 * v25);
      unint64_t v15 = v25;
    }
    while (v13 != v14);
    uint64_t v14 = v13;
LABEL_25:
    if (v21 < v22)
    {
      if (v14 >= v11)
      {
        if (v11 < v14)
        {
          uint64_t v27 = 16 * v14;
          uint64_t v28 = v14;
          uint64_t v29 = v11;
          while (1)
          {
            if (v29 != --v28)
            {
              if (!v12) {
                goto LABEL_157;
              }
              uint64_t v30 = v12 + v27;
              uint64_t v31 = *(void *)(v12 + v18);
              uint64_t v32 = *(void *)(v12 + v18 + 8);
              *(_OWORD *)(v12 + v18) = *(_OWORD *)(v12 + v27 - 16);
              *(void *)(v30 - 16) = v31;
              *(void *)(v30 - 8) = v32;
            }
            ++v29;
            v27 -= 16;
            v18 += 16;
            if (v29 >= v28) {
              goto LABEL_34;
            }
          }
        }
        goto LABEL_34;
      }
LABEL_154:
      __break(1u);
LABEL_155:
      swift_release_n();
      __break(1u);
LABEL_156:
      swift_release_n();
      __break(1u);
LABEL_157:
      swift_release_n();
      __break(1u);
LABEL_158:
      swift_release_n();
      __break(1u);
LABEL_159:
      swift_release_n();
      uint64_t result = sub_1D17BEA30();
      __break(1u);
      return result;
    }
LABEL_34:
    if (v14 < v13)
    {
      if (!__OFSUB__(v14, v11))
      {
        if (v14 - v11 >= v111) {
          goto LABEL_53;
        }
        uint64_t v33 = v11 + v111;
        if (!__OFADD__(v11, v111))
        {
          if (v33 >= v13) {
            uint64_t v33 = v13;
          }
          if (v33 >= v11)
          {
            if (v14 != v33)
            {
              uint64_t v34 = *(void *)(a2 + 32);
              uint64_t v35 = v107 + 16 * v14;
              do
              {
                unint64_t v36 = *(void *)(v12 + 16 * v14);
                uint64_t v37 = v11;
                uint64_t v38 = v35;
                do
                {
                  if ((v36 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
LABEL_123:
                    __break(1u);
LABEL_124:
                    __break(1u);
LABEL_125:
                    __break(1u);
LABEL_126:
                    __break(1u);
LABEL_127:
                    __break(1u);
LABEL_128:
                    __break(1u);
LABEL_129:
                    __break(1u);
                    goto LABEL_130;
                  }
                  unint64_t v39 = *(void *)(v34 + 16);
                  if (v36 >= v39) {
                    goto LABEL_123;
                  }
                  if (*(void *)v38 >= v39) {
                    goto LABEL_124;
                  }
                  if (*(double *)(v34 + 32 + 8 * v36) >= *(double *)(v34 + 32 + 8 * *(void *)v38)) {
                    break;
                  }
                  if (!v12) {
                    goto LABEL_155;
                  }
                  uint64_t v40 = *(void *)(v38 + 24);
                  *(_OWORD *)(v38 + 16) = *(_OWORD *)v38;
                  *(void *)uint64_t v38 = v36;
                  *(void *)(v38 + 8) = v40;
                  v38 -= 16;
                  ++v37;
                }
                while (v14 != v37);
                ++v14;
                v35 += 16;
              }
              while (v14 != v33);
              uint64_t v14 = v33;
            }
            goto LABEL_53;
          }
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
LABEL_53:
    if (v14 < v11) {
      goto LABEL_146;
    }
    uint64_t v113 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_1D16F9FD8(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v42 = *((void *)v10 + 2);
    unint64_t v41 = *((void *)v10 + 3);
    unint64_t v43 = v42 + 1;
    if (v42 >= v41 >> 1) {
      uint64_t v10 = sub_1D16F9FD8((char *)(v41 > 1), v42 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v43;
    float v44 = v10 + 32;
    float v45 = &v10[16 * v42 + 32];
    *(void *)float v45 = v11;
    *((void *)v45 + 1) = v113;
    if (v42) {
      break;
    }
    unint64_t v43 = 1;
LABEL_102:
    uint64_t v13 = v112;
    uint64_t v11 = v113;
    if (v113 >= v112) {
      goto LABEL_108;
    }
  }
  uint64_t v115 = v10 + 32;
  uint64_t v116 = v10;
  while (1)
  {
    unint64_t v46 = v43 - 1;
    if (v43 >= 4)
    {
      uint64_t v51 = &v44[16 * v43];
      uint64_t v52 = *((void *)v51 - 8);
      uint64_t v53 = *((void *)v51 - 7);
      BOOL v57 = __OFSUB__(v53, v52);
      uint64_t v54 = v53 - v52;
      if (v57) {
        goto LABEL_131;
      }
      uint64_t v56 = *((void *)v51 - 6);
      uint64_t v55 = *((void *)v51 - 5);
      BOOL v57 = __OFSUB__(v55, v56);
      uint64_t v49 = v55 - v56;
      char v50 = v57;
      if (v57) {
        goto LABEL_132;
      }
      unint64_t v58 = v43 - 2;
      uint64_t v59 = &v44[16 * v43 - 32];
      uint64_t v61 = *(void *)v59;
      uint64_t v60 = *((void *)v59 + 1);
      BOOL v57 = __OFSUB__(v60, v61);
      uint64_t v62 = v60 - v61;
      if (v57) {
        goto LABEL_134;
      }
      BOOL v57 = __OFADD__(v49, v62);
      uint64_t v63 = v49 + v62;
      if (v57) {
        goto LABEL_137;
      }
      if (v63 >= v54)
      {
        uint64_t v81 = &v44[16 * v46];
        uint64_t v83 = *(void *)v81;
        uint64_t v82 = *((void *)v81 + 1);
        BOOL v57 = __OFSUB__(v82, v83);
        uint64_t v84 = v82 - v83;
        if (v57) {
          goto LABEL_141;
        }
        BOOL v74 = v49 < v84;
        goto LABEL_91;
      }
    }
    else
    {
      if (v43 != 3)
      {
        uint64_t v75 = *((void *)v10 + 4);
        uint64_t v76 = *((void *)v10 + 5);
        BOOL v57 = __OFSUB__(v76, v75);
        uint64_t v68 = v76 - v75;
        char v69 = v57;
        goto LABEL_85;
      }
      uint64_t v48 = *((void *)v10 + 4);
      uint64_t v47 = *((void *)v10 + 5);
      BOOL v57 = __OFSUB__(v47, v48);
      uint64_t v49 = v47 - v48;
      char v50 = v57;
    }
    if (v50) {
      goto LABEL_133;
    }
    unint64_t v58 = v43 - 2;
    unint64_t v64 = &v44[16 * v43 - 32];
    uint64_t v66 = *(void *)v64;
    uint64_t v65 = *((void *)v64 + 1);
    BOOL v67 = __OFSUB__(v65, v66);
    uint64_t v68 = v65 - v66;
    char v69 = v67;
    if (v67) {
      goto LABEL_136;
    }
    unint64_t v70 = &v44[16 * v46];
    uint64_t v72 = *(void *)v70;
    uint64_t v71 = *((void *)v70 + 1);
    BOOL v57 = __OFSUB__(v71, v72);
    uint64_t v73 = v71 - v72;
    if (v57) {
      goto LABEL_139;
    }
    if (__OFADD__(v68, v73)) {
      goto LABEL_140;
    }
    if (v68 + v73 >= v49)
    {
      BOOL v74 = v49 < v73;
LABEL_91:
      if (v74) {
        unint64_t v46 = v58;
      }
      goto LABEL_93;
    }
LABEL_85:
    if (v69) {
      goto LABEL_135;
    }
    uint64_t v77 = &v44[16 * v46];
    uint64_t v79 = *(void *)v77;
    uint64_t v78 = *((void *)v77 + 1);
    BOOL v57 = __OFSUB__(v78, v79);
    uint64_t v80 = v78 - v79;
    if (v57) {
      goto LABEL_138;
    }
    if (v80 < v68) {
      goto LABEL_102;
    }
LABEL_93:
    unint64_t v85 = v46 - 1;
    if (v46 - 1 >= v43) {
      goto LABEL_125;
    }
    if (!v12) {
      goto LABEL_156;
    }
    uint64_t v86 = &v44[16 * v85];
    unint64_t v87 = v44;
    uint64_t v88 = *(void *)v86;
    unint64_t v89 = v46;
    uint64_t v90 = &v87[16 * v46];
    uint64_t v91 = *((void *)v90 + 1);
    uint64_t v92 = (char *)(v12 + 16 * *(void *)v86);
    uint64_t v93 = (char *)(v12 + 16 * *(void *)v90);
    a2 = v119;
    swift_retain();
    sub_1D16960B8(v92, v93, v12 + 16 * v91, v118, v119);
    if (v120) {
      break;
    }
    swift_release();
    if (v91 < v88) {
      goto LABEL_126;
    }
    if (v89 > *((void *)v116 + 2)) {
      goto LABEL_127;
    }
    unint64_t v94 = v89;
    *(void *)uint64_t v86 = v88;
    float v44 = v115;
    *(void *)&v115[16 * v85 + 8] = v91;
    unint64_t v95 = *((void *)v116 + 2);
    if (v89 >= v95) {
      goto LABEL_128;
    }
    uint64_t v10 = v116;
    uint64_t v120 = 0;
    unint64_t v43 = v95 - 1;
    memmove(v90, v90 + 16, 16 * (v95 - 1 - v94));
    *((void *)v116 + 2) = v95 - 1;
    uint64_t v12 = v114;
    if (v95 <= 2) {
      goto LABEL_102;
    }
  }
  uint64_t v96 = v110;
LABEL_105:
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(v96 + 16) = 0;
  swift_release_n();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1D1696C6C(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5)
{
  uint64_t v6 = (unint64_t *)__dst;
  uint64_t v8 = a2;
  uint64_t v9 = __src;
  int64_t v10 = a2 - __src;
  int64_t v11 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v11 = a2 - __src;
  }
  uint64_t v12 = v11 >> 4;
  uint64_t v13 = a3 - (void)a2;
  uint64_t v14 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v14 = a3 - (void)a2;
  }
  uint64_t v15 = v14 >> 4;
  uint64_t v32 = __src;
  uint64_t v31 = (unint64_t *)__dst;
  if (v12 >= v14 >> 4)
  {
    if (v13 >= -15)
    {
      if (__dst != a2 || &a2[16 * v15] <= __dst) {
        memmove(__dst, a2, 16 * v15);
      }
      double v21 = &v6[2 * v15];
      uint64_t v30 = v21;
      uint64_t v32 = v8;
      if (v9 < v8 && v13 >= 16)
      {
        uint64_t v22 = *(void *)(a5 + 32);
        uint64_t v23 = (char *)(a3 - 16);
        while (1)
        {
          unint64_t v24 = *(v21 - 2);
          if ((v24 & 0x8000000000000000) != 0) {
            break;
          }
          unint64_t v25 = *(void *)(v22 + 16);
          if (v24 >= v25) {
            goto LABEL_51;
          }
          unint64_t v26 = v8 - 16;
          unint64_t v27 = *((void *)v8 - 2);
          if (v27 >= v25) {
            goto LABEL_52;
          }
          uint64_t v28 = v23 + 16;
          if (*(double *)(v22 + 32 + 8 * v27) >= *(double *)(v22 + 32 + 8 * v24))
          {
            uint64_t v30 = v21 - 2;
            if (v28 < (char *)v21 || v23 >= (char *)v21 || v28 != (char *)v21) {
              *(_OWORD *)uint64_t v23 = *((_OWORD *)v21 - 1);
            }
            unint64_t v26 = v8;
            v21 -= 2;
            if (v8 <= v9) {
              goto LABEL_49;
            }
          }
          else
          {
            if (v28 != v8 || v23 >= v8) {
              *(_OWORD *)uint64_t v23 = *(_OWORD *)v26;
            }
            uint64_t v32 = v8 - 16;
            if (v26 <= v9) {
              goto LABEL_49;
            }
          }
          v23 -= 16;
          uint64_t v8 = v26;
          if (v21 <= v6) {
            goto LABEL_49;
          }
        }
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
LABEL_49:
      sub_1D16FA190((void **)&v32, (const void **)&v31, &v30);
      return 1;
    }
  }
  else if (v10 >= -15)
  {
    if (__dst != __src || &__src[16 * v12] <= __dst) {
      memmove(__dst, __src, 16 * v12);
    }
    uint64_t v16 = &v6[2 * v12];
    uint64_t v30 = v16;
    if ((unint64_t)v8 < a3 && v10 >= 16)
    {
      uint64_t v17 = *(void *)(a5 + 32);
      while (1)
      {
        unint64_t v18 = *(void *)v8;
        if ((*(void *)v8 & 0x8000000000000000) != 0) {
          break;
        }
        unint64_t v19 = *(void *)(v17 + 16);
        if (v18 >= v19) {
          goto LABEL_54;
        }
        if (*v6 >= v19) {
          goto LABEL_55;
        }
        if (*(double *)(v17 + 32 + 8 * *v6) >= *(double *)(v17 + 32 + 8 * v18))
        {
          if (v9 != (char *)v6) {
            *(_OWORD *)uint64_t v9 = *(_OWORD *)v6;
          }
          v6 += 2;
          uint64_t v31 = v6;
          uint64_t v20 = v8;
        }
        else
        {
          uint64_t v20 = v8 + 16;
          if (v9 < v8 || v9 >= v20 || v9 != v8) {
            *(_OWORD *)uint64_t v9 = *(_OWORD *)v8;
          }
        }
        v9 += 16;
        if (v6 < v16)
        {
          uint64_t v8 = v20;
          if ((unint64_t)v20 < a3) {
            continue;
          }
        }
        uint64_t v32 = v9;
        goto LABEL_49;
      }
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    goto LABEL_49;
  }
LABEL_56:
  swift_release();
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D1696F5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 != a2)
  {
    uint64_t v5 = *a4;
    uint64_t v6 = *(void *)(a5 + 32);
    uint64_t v7 = *a4 + 16 * a3 - 16;
LABEL_5:
    unint64_t v8 = *(void *)(v5 + 16 * a3);
    uint64_t v9 = result;
    uint64_t v10 = v7;
    while ((v8 & 0x8000000000000000) == 0)
    {
      unint64_t v11 = *(void *)(v6 + 16);
      if (v8 >= v11) {
        goto LABEL_14;
      }
      if (*(void *)v10 >= v11) {
        goto LABEL_15;
      }
      if (*(double *)(v6 + 32 + 8 * *(void *)v10) < *(double *)(v6 + 32 + 8 * v8))
      {
        if (!v5) {
          goto LABEL_16;
        }
        uint64_t v12 = *(void *)(v10 + 24);
        *(_OWORD *)(v10 + 16) = *(_OWORD *)v10;
        *(void *)uint64_t v10 = v8;
        *(void *)(v10 + 8) = v12;
        v10 -= 16;
        if (a3 != ++v9) {
          continue;
        }
      }
      ++a3;
      v7 += 16;
      if (a3 == a2) {
        return result;
      }
      goto LABEL_5;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  return result;
}

uint64_t sub_1D1697004(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = a1[1];
  swift_retain_n();
  uint64_t v6 = sub_1D17BEB60();
  if (v6 >= v5)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
      if (v5)
      {
        swift_retain();
        sub_1D1696F5C(0, v5, 1, a1, a2);
      }
      swift_release_n();
      return swift_release();
    }
    goto LABEL_151;
  }
  if (v5 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v5 + 1;
  }
  if (v5 < -1) {
    goto LABEL_159;
  }
  uint64_t v119 = a2;
  uint64_t v111 = v6;
  uint64_t v112 = v5;
  uint64_t v120 = v2;
  unint64_t v108 = a1;
  if (v5 < 2)
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v118 = (char *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v110 = MEMORY[0x1E4FBC860];
    if (v5 != 1)
    {
      unint64_t v43 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_108:
      if (v43 < 2)
      {
LABEL_119:
        swift_bridgeObjectRelease();
        *(void *)(v110 + 16) = 0;
        swift_release_n();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      uint64_t v97 = *v108;
      uint64_t v117 = *v108;
      while (1)
      {
        unint64_t v98 = v43 - 2;
        if (v43 < 2) {
          break;
        }
        if (!v97) {
          goto LABEL_158;
        }
        uint64_t v99 = *(void *)&v10[16 * v98 + 32];
        uint64_t v100 = *(void *)&v10[16 * v43 + 24];
        unint64_t v101 = (char *)(v97 + 16 * v99);
        double v102 = (char *)(v97 + 16 * *(void *)&v10[16 * v43 + 16]);
        unint64_t v103 = v97 + 16 * v100;
        swift_retain();
        sub_1D1696C6C(v101, v102, v103, v118, v119);
        if (v120)
        {
          uint64_t v96 = v110;
          goto LABEL_105;
        }
        swift_release();
        if (v100 < v99) {
          goto LABEL_143;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = sub_1D16FA24C((uint64_t)v10);
        }
        if (v98 >= *((void *)v10 + 2)) {
          goto LABEL_144;
        }
        unint64_t v104 = &v10[16 * v98 + 32];
        *(void *)unint64_t v104 = v99;
        *((void *)v104 + 1) = v100;
        unint64_t v105 = *((void *)v10 + 2);
        if (v43 > v105) {
          goto LABEL_145;
        }
        memmove(&v10[16 * v43 + 16], &v10[16 * v43 + 32], 16 * (v105 - v43));
        *((void *)v10 + 2) = v105 - 1;
        unint64_t v43 = v105 - 1;
        uint64_t v97 = v117;
        if (v105 <= 2) {
          goto LABEL_119;
        }
      }
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
      goto LABEL_150;
    }
  }
  else
  {
    uint64_t v8 = v7 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651CB0);
    uint64_t v9 = sub_1D17BE1C0();
    *(void *)(v9 + 16) = v8;
    uint64_t v110 = v9;
    uint64_t v118 = (char *)(v9 + 32);
  }
  uint64_t v11 = 0;
  uint64_t v12 = *a1;
  uint64_t v109 = *a1 + 32;
  uint64_t v107 = *a1 - 16;
  uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v13 = v5;
  uint64_t v114 = *a1;
  while (1)
  {
    uint64_t v14 = v11 + 1;
    if (v11 + 1 >= v13) {
      goto LABEL_34;
    }
    unint64_t v15 = *(void *)(v12 + 16 * v14);
    if ((v15 & 0x8000000000000000) != 0) {
      goto LABEL_147;
    }
    uint64_t v16 = *(void *)(a2 + 32);
    unint64_t v17 = *(void *)(v16 + 16);
    if (v15 >= v17) {
      goto LABEL_148;
    }
    uint64_t v18 = 16 * v11;
    unint64_t v19 = *(void *)(v12 + 16 * v11);
    if (v19 >= v17) {
      goto LABEL_149;
    }
    uint64_t v20 = v16 + 32;
    double v21 = *(double *)(v20 + 8 * v15);
    double v22 = *(double *)(v20 + 8 * v19);
    uint64_t v14 = v11 + 2;
    if (v11 + 2 >= v13) {
      goto LABEL_25;
    }
    uint64_t v23 = (unint64_t *)(v109 + 16 * v11);
    double v24 = *(double *)(v20 + 8 * v15);
    do
    {
      unint64_t v26 = *v23;
      v23 += 2;
      unint64_t v25 = v26;
      if (v26 >= v17) {
        goto LABEL_129;
      }
      if (v15 >= v17)
      {
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
        goto LABEL_142;
      }
      if (v22 < v21 == v24 >= *(double *)(v20 + 8 * v25)) {
        goto LABEL_25;
      }
      ++v14;
      double v24 = *(double *)(v20 + 8 * v25);
      unint64_t v15 = v25;
    }
    while (v13 != v14);
    uint64_t v14 = v13;
LABEL_25:
    if (v22 < v21)
    {
      if (v14 >= v11)
      {
        if (v11 < v14)
        {
          uint64_t v27 = 16 * v14;
          uint64_t v28 = v14;
          uint64_t v29 = v11;
          while (1)
          {
            if (v29 != --v28)
            {
              if (!v12) {
                goto LABEL_157;
              }
              uint64_t v30 = v12 + v27;
              uint64_t v31 = *(void *)(v12 + v18);
              uint64_t v32 = *(void *)(v12 + v18 + 8);
              *(_OWORD *)(v12 + v18) = *(_OWORD *)(v12 + v27 - 16);
              *(void *)(v30 - 16) = v31;
              *(void *)(v30 - 8) = v32;
            }
            ++v29;
            v27 -= 16;
            v18 += 16;
            if (v29 >= v28) {
              goto LABEL_34;
            }
          }
        }
        goto LABEL_34;
      }
LABEL_154:
      __break(1u);
LABEL_155:
      swift_release_n();
      __break(1u);
LABEL_156:
      swift_release_n();
      __break(1u);
LABEL_157:
      swift_release_n();
      __break(1u);
LABEL_158:
      swift_release_n();
      __break(1u);
LABEL_159:
      swift_release_n();
      uint64_t result = sub_1D17BEA30();
      __break(1u);
      return result;
    }
LABEL_34:
    if (v14 < v13)
    {
      if (!__OFSUB__(v14, v11))
      {
        if (v14 - v11 >= v111) {
          goto LABEL_53;
        }
        uint64_t v33 = v11 + v111;
        if (!__OFADD__(v11, v111))
        {
          if (v33 >= v13) {
            uint64_t v33 = v13;
          }
          if (v33 >= v11)
          {
            if (v14 != v33)
            {
              uint64_t v34 = *(void *)(a2 + 32);
              uint64_t v35 = v107 + 16 * v14;
              do
              {
                unint64_t v36 = *(void *)(v12 + 16 * v14);
                uint64_t v37 = v11;
                uint64_t v38 = v35;
                do
                {
                  if ((v36 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
LABEL_123:
                    __break(1u);
LABEL_124:
                    __break(1u);
LABEL_125:
                    __break(1u);
LABEL_126:
                    __break(1u);
LABEL_127:
                    __break(1u);
LABEL_128:
                    __break(1u);
LABEL_129:
                    __break(1u);
                    goto LABEL_130;
                  }
                  unint64_t v39 = *(void *)(v34 + 16);
                  if (v36 >= v39) {
                    goto LABEL_123;
                  }
                  if (*(void *)v38 >= v39) {
                    goto LABEL_124;
                  }
                  if (*(double *)(v34 + 32 + 8 * *(void *)v38) >= *(double *)(v34 + 32 + 8 * v36)) {
                    break;
                  }
                  if (!v12) {
                    goto LABEL_155;
                  }
                  uint64_t v40 = *(void *)(v38 + 24);
                  *(_OWORD *)(v38 + 16) = *(_OWORD *)v38;
                  *(void *)uint64_t v38 = v36;
                  *(void *)(v38 + 8) = v40;
                  v38 -= 16;
                  ++v37;
                }
                while (v14 != v37);
                ++v14;
                v35 += 16;
              }
              while (v14 != v33);
              uint64_t v14 = v33;
            }
            goto LABEL_53;
          }
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
LABEL_53:
    if (v14 < v11) {
      goto LABEL_146;
    }
    uint64_t v113 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_1D16F9FD8(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v42 = *((void *)v10 + 2);
    unint64_t v41 = *((void *)v10 + 3);
    unint64_t v43 = v42 + 1;
    if (v42 >= v41 >> 1) {
      uint64_t v10 = sub_1D16F9FD8((char *)(v41 > 1), v42 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v43;
    float v44 = v10 + 32;
    float v45 = &v10[16 * v42 + 32];
    *(void *)float v45 = v11;
    *((void *)v45 + 1) = v113;
    if (v42) {
      break;
    }
    unint64_t v43 = 1;
LABEL_102:
    uint64_t v13 = v112;
    uint64_t v11 = v113;
    if (v113 >= v112) {
      goto LABEL_108;
    }
  }
  uint64_t v115 = v10 + 32;
  uint64_t v116 = v10;
  while (1)
  {
    unint64_t v46 = v43 - 1;
    if (v43 >= 4)
    {
      uint64_t v51 = &v44[16 * v43];
      uint64_t v52 = *((void *)v51 - 8);
      uint64_t v53 = *((void *)v51 - 7);
      BOOL v57 = __OFSUB__(v53, v52);
      uint64_t v54 = v53 - v52;
      if (v57) {
        goto LABEL_131;
      }
      uint64_t v56 = *((void *)v51 - 6);
      uint64_t v55 = *((void *)v51 - 5);
      BOOL v57 = __OFSUB__(v55, v56);
      uint64_t v49 = v55 - v56;
      char v50 = v57;
      if (v57) {
        goto LABEL_132;
      }
      unint64_t v58 = v43 - 2;
      uint64_t v59 = &v44[16 * v43 - 32];
      uint64_t v61 = *(void *)v59;
      uint64_t v60 = *((void *)v59 + 1);
      BOOL v57 = __OFSUB__(v60, v61);
      uint64_t v62 = v60 - v61;
      if (v57) {
        goto LABEL_134;
      }
      BOOL v57 = __OFADD__(v49, v62);
      uint64_t v63 = v49 + v62;
      if (v57) {
        goto LABEL_137;
      }
      if (v63 >= v54)
      {
        uint64_t v81 = &v44[16 * v46];
        uint64_t v83 = *(void *)v81;
        uint64_t v82 = *((void *)v81 + 1);
        BOOL v57 = __OFSUB__(v82, v83);
        uint64_t v84 = v82 - v83;
        if (v57) {
          goto LABEL_141;
        }
        BOOL v74 = v49 < v84;
        goto LABEL_91;
      }
    }
    else
    {
      if (v43 != 3)
      {
        uint64_t v75 = *((void *)v10 + 4);
        uint64_t v76 = *((void *)v10 + 5);
        BOOL v57 = __OFSUB__(v76, v75);
        uint64_t v68 = v76 - v75;
        char v69 = v57;
        goto LABEL_85;
      }
      uint64_t v48 = *((void *)v10 + 4);
      uint64_t v47 = *((void *)v10 + 5);
      BOOL v57 = __OFSUB__(v47, v48);
      uint64_t v49 = v47 - v48;
      char v50 = v57;
    }
    if (v50) {
      goto LABEL_133;
    }
    unint64_t v58 = v43 - 2;
    unint64_t v64 = &v44[16 * v43 - 32];
    uint64_t v66 = *(void *)v64;
    uint64_t v65 = *((void *)v64 + 1);
    BOOL v67 = __OFSUB__(v65, v66);
    uint64_t v68 = v65 - v66;
    char v69 = v67;
    if (v67) {
      goto LABEL_136;
    }
    unint64_t v70 = &v44[16 * v46];
    uint64_t v72 = *(void *)v70;
    uint64_t v71 = *((void *)v70 + 1);
    BOOL v57 = __OFSUB__(v71, v72);
    uint64_t v73 = v71 - v72;
    if (v57) {
      goto LABEL_139;
    }
    if (__OFADD__(v68, v73)) {
      goto LABEL_140;
    }
    if (v68 + v73 >= v49)
    {
      BOOL v74 = v49 < v73;
LABEL_91:
      if (v74) {
        unint64_t v46 = v58;
      }
      goto LABEL_93;
    }
LABEL_85:
    if (v69) {
      goto LABEL_135;
    }
    uint64_t v77 = &v44[16 * v46];
    uint64_t v79 = *(void *)v77;
    uint64_t v78 = *((void *)v77 + 1);
    BOOL v57 = __OFSUB__(v78, v79);
    uint64_t v80 = v78 - v79;
    if (v57) {
      goto LABEL_138;
    }
    if (v80 < v68) {
      goto LABEL_102;
    }
LABEL_93:
    unint64_t v85 = v46 - 1;
    if (v46 - 1 >= v43) {
      goto LABEL_125;
    }
    if (!v12) {
      goto LABEL_156;
    }
    uint64_t v86 = &v44[16 * v85];
    unint64_t v87 = v44;
    uint64_t v88 = *(void *)v86;
    unint64_t v89 = v46;
    uint64_t v90 = &v87[16 * v46];
    uint64_t v91 = *((void *)v90 + 1);
    uint64_t v92 = (char *)(v12 + 16 * *(void *)v86);
    uint64_t v93 = (char *)(v12 + 16 * *(void *)v90);
    a2 = v119;
    swift_retain();
    sub_1D1696C6C(v92, v93, v12 + 16 * v91, v118, v119);
    if (v120) {
      break;
    }
    swift_release();
    if (v91 < v88) {
      goto LABEL_126;
    }
    if (v89 > *((void *)v116 + 2)) {
      goto LABEL_127;
    }
    unint64_t v94 = v89;
    *(void *)uint64_t v86 = v88;
    float v44 = v115;
    *(void *)&v115[16 * v85 + 8] = v91;
    unint64_t v95 = *((void *)v116 + 2);
    if (v89 >= v95) {
      goto LABEL_128;
    }
    uint64_t v10 = v116;
    uint64_t v120 = 0;
    unint64_t v43 = v95 - 1;
    memmove(v90, v90 + 16, 16 * (v95 - 1 - v94));
    *((void *)v116 + 2) = v95 - 1;
    uint64_t v12 = v114;
    if (v95 <= 2) {
      goto LABEL_102;
    }
  }
  uint64_t v96 = v110;
LABEL_105:
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(v96 + 16) = 0;
  swift_release_n();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1D1697820(void **a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  uint64_t v6 = *a1;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = (void *)sub_1D16FA288(v6);
  }
  uint64_t v7 = v6[2];
  v9[0] = v6 + 4;
  v9[1] = v7;
  swift_retain();
  a3(v9, a2);
  swift_release();
  *a1 = v6;
  return swift_release_n();
}

uint64_t sub_1D16978D4(uint64_t result, unint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1D17BEAD0();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_4:
  if (v5 >= v3) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v5;
  }
  if (v5 < 0) {
    uint64_t v6 = v3;
  }
  if (v3) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1D17BEAD0();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1D17BEAD0();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
  {
    __break(1u);
    goto LABEL_28;
  }
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v10 + 1;
      sub_1D17BE890();
      uint64_t v10 = v11;
    }
    while (v7 != v11);
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1D17BEAE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v12;
}

void *sub_1D1697A78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness, v10);
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v25 = MEMORY[0x1E4FBC860];
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  sub_1D17BE070();
  swift_getAssociatedConformanceWitness();
  sub_1D17BE640();
  uint64_t v14 = v23;
  if (v23)
  {
    uint64_t v15 = v24;
    do
    {
      id v16 = v14;
      MEMORY[0x1D25F8AB0]();
      if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1D17BE170();
      }
      sub_1D17BE1F0();
      sub_1D17BE150();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v13 = sub_1D169C770(0, v13[2] + 1, 1, v13);
      }
      unint64_t v18 = v13[2];
      unint64_t v17 = v13[3];
      if (v18 >= v17 >> 1) {
        uint64_t v13 = sub_1D169C770((void *)(v17 > 1), v18 + 1, 1, v13);
      }
      id v13[2] = v18 + 1;
      v13[v18 + 4] = v15;

      sub_1D17BE640();
      uint64_t v14 = v23;
      uint64_t v15 = v24;
    }
    while (v23);
  }
  (*(void (**)(char *, uint64_t))(v22 + 8))(v12, AssociatedTypeWitness);
  uint64_t v19 = v13[2];
  v3[2] = 1;
  v3[3] = v19;
  uint64_t v20 = v25;
  v3[4] = v13;
  v3[5] = v20;
  return v3;
}

void *sub_1D1697D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness, v10);
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v25 = MEMORY[0x1E4FBC860];
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  sub_1D17BE070();
  swift_getAssociatedConformanceWitness();
  sub_1D17BE640();
  uint64_t v14 = v23;
  if (v23)
  {
    uint64_t v15 = v24;
    do
    {
      id v16 = v14;
      MEMORY[0x1D25F8AB0]();
      if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1D17BE170();
      }
      sub_1D17BE1F0();
      sub_1D17BE150();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v13 = sub_1D169C770(0, v13[2] + 1, 1, v13);
      }
      unint64_t v18 = v13[2];
      unint64_t v17 = v13[3];
      if (v18 >= v17 >> 1) {
        uint64_t v13 = sub_1D169C770((void *)(v17 > 1), v18 + 1, 1, v13);
      }
      id v13[2] = v18 + 1;
      v13[v18 + 4] = v15;

      sub_1D17BE640();
      uint64_t v14 = v23;
      uint64_t v15 = v24;
    }
    while (v23);
  }
  (*(void (**)(char *, uint64_t))(v22 + 8))(v12, AssociatedTypeWitness);
  uint64_t v19 = v13[2];
  v3[2] = 1;
  v3[3] = v19;
  uint64_t v20 = v25;
  v3[4] = v13;
  v3[5] = v20;
  return v3;
}

uint64_t type metadata accessor for MASquareMatrixRepresentation()
{
  return self;
}

uint64_t type metadata accessor for MAVectorRepresentation()
{
  return self;
}

uint64_t sub_1D1698088()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void *sub_1D1698098(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBC860];
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    unint64_t v4 = (uint64_t *)(a1 + 40);
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v6 = *v4;
      id v7 = (id)*(v4 - 1);
      MEMORY[0x1D25F8AB0]();
      if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1D17BE170();
      }
      sub_1D17BE1F0();
      sub_1D17BE150();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_1D169C770(0, v5[2] + 1, 1, v5);
      }
      unint64_t v9 = v5[2];
      unint64_t v8 = v5[3];
      if (v9 >= v8 >> 1) {
        uint64_t v5 = sub_1D169C770((void *)(v8 > 1), v9 + 1, 1, v5);
      }
      void v5[2] = v9 + 1;
      v5[v9 + 4] = v6;

      v4 += 2;
      --v3;
    }
    while (v3);
    uint64_t v2 = v12;
  }
  else
  {
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v10 = v5[2];
  v1[2] = 1;
  v1[3] = v10;
  v1[4] = v5;
  v1[5] = v2;
  return v1;
}

uint64_t sub_1D1698200()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

void *sub_1D1698240@<X0>(void *a1@<X8>)
{
  return sub_1D168A044(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

void sub_1D169824C(uint64_t a1)
{
  sub_1D168C15C(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(double **)(v1 + 32), *(void *)(v1 + 40));
}

id sub_1D1698278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = MEMORY[0x1E4FBC860];
  id result = (id)sub_1D16827F4(0, 0, 0);
  uint64_t v9 = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 == (a1 * a2) >> 63)
  {
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = 0;
    id result = (id)swift_bridgeObjectRetain();
    if (!v9)
    {
LABEL_16:
      *(void *)(v24 + 16) = v9;
      swift_bridgeObjectRelease();
      swift_release();
      return (id)v27;
    }
    uint64_t v10 = 0;
    uint64_t v25 = a4;
    uint64_t v26 = a3 + 32;
    while ((unint64_t)v10 < *(void *)(a3 + 16))
    {
      uint64_t v11 = *(void *)(a4 + 24);
      if (!v11) {
        goto LABEL_18;
      }
      uint64_t v12 = *(void *)(v26 + 8 * v10);
      uint64_t v13 = *(void *)(a4 + 40);
      unint64_t v14 = v10 / v11;
      if ((v13 & 0xC000000000000001) != 0)
      {
        uint64_t v19 = MEMORY[0x1D25F9260](v10 / v11, v13);
        id result = (id)MEMORY[0x1D25F9260](v10 % v11, v13);
        id v20 = result;
      }
      else
      {
        if ((v14 & 0x8000000000000000) != 0) {
          goto LABEL_19;
        }
        uint64_t v15 = a3;
        unint64_t v16 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v14 >= v16) {
          goto LABEL_20;
        }
        uint64_t v17 = v13 + 32;
        unint64_t v18 = v10 % v11;
        id result = *(id *)(v17 + 8 * v14);
        if (v18 >= v16) {
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)result;
        id result = *(id *)(v17 + 8 * v18);
        id v20 = result;
        a3 = v15;
      }
      unint64_t v22 = *(void *)(v27 + 16);
      unint64_t v21 = *(void *)(v27 + 24);
      if (v22 >= v21 >> 1) {
        id result = (id)sub_1D16827F4(v21 > 1, v22 + 1, 1);
      }
      ++v10;
      *(void *)(v27 + 16) = v22 + 1;
      uint64_t v23 = (void *)(v27 + 24 * v22);
      _OWORD v23[4] = v19;
      v23[5] = v20;
      v23[6] = v12;
      a4 = v25;
      if (v9 == v10) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D1698484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v31 = MEMORY[0x1E4FBC860];
  uint64_t result = sub_1D16827F4(0, 0, 0);
  uint64_t v10 = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 == (a1 * a2) >> 63)
  {
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = 0;
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = v11;
    v12[3] = v10;
    unint64_t v12[4] = a1;
    v12[5] = a2;
    v12[6] = a3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E98);
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = sub_1D1698260;
    *(void *)(inited + 24) = v12;
    uint64_t v14 = *(void *)(v11 + 16);
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v14 == v10)
    {
LABEL_15:
      *(void *)(v11 + 16) = v10;
      swift_release();
      swift_release();
      return v31;
    }
    uint64_t v15 = 0;
    uint64_t v24 = v11;
    uint64_t v25 = a3 + 8 * v14 + 32;
    uint64_t v16 = v14 - a2 * a1;
    uint64_t v17 = a3;
    while (v14 - 0x7FFFFFFFFFFFFFFFLL + v15)
    {
      if (v14 < 0) {
        goto LABEL_17;
      }
      if ((unint64_t)(v14 + v15) >= *(void *)(a3 + 16)) {
        goto LABEL_18;
      }
      uint64_t v18 = *(void *)(v25 + 8 * v15);
      v30[0] = v15;
      v30[1] = v18;
      sub_1D168F2E0((unint64_t)v30, a4, &v28);
      if (v5)
      {
        *(void *)(v24 + 16) = v14 + v15 + 1;
        swift_release();
        swift_release();
        return swift_release();
      }
      uint64_t v5 = 0;
      long long v27 = v28;
      uint64_t v19 = v29;
      uint64_t v20 = v31;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = sub_1D16827F4(0, *(void *)(v20 + 16) + 1, 1);
        uint64_t v20 = v31;
      }
      unint64_t v22 = *(void *)(v20 + 16);
      unint64_t v21 = *(void *)(v20 + 24);
      if (v22 >= v21 >> 1)
      {
        uint64_t result = sub_1D16827F4(v21 > 1, v22 + 1, 1);
        uint64_t v20 = v31;
      }
      ++v15;
      *(void *)(v20 + 16) = v22 + 1;
      uint64_t v23 = v20 + 24 * v22;
      *(_OWORD *)(v23 + 32) = v27;
      *(void *)(v23 + 48) = v19;
      a3 = v17;
      if (!(v16 + v15))
      {
        uint64_t v10 = v14 + v15;
        uint64_t v11 = v24;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D16986FC(uint64_t a1)
{
  return sub_1D1698814(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1D168FC80);
}

uint64_t sub_1D1698714(uint64_t a1)
{
  return sub_1D1698814(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1D168F7A0);
}

void sub_1D169872C(unint64_t a1)
{
  if (a1 >> 62)
  {
    uint64_t v2 = sub_1D17BEAD0();
    if (!v2) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v2) {
      return;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
  }
  else if ((a1 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v4 = (void *)MEMORY[0x1D25F9260](i, a1);
      sub_1D1671FA0(&v7, v4);
    }
  }
  else
  {
    uint64_t v5 = (void **)(a1 + 32);
    do
    {
      uint64_t v6 = *v5++;
      sub_1D1671FA0(&v7, v6);

      --v2;
    }
    while (v2);
  }
}

uint64_t sub_1D16987FC(uint64_t a1)
{
  return sub_1D1698814(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1D1691DCC);
}

uint64_t sub_1D1698814(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), *(unsigned __int8 *)(v2 + 25), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

unint64_t sub_1D1698834()
{
  unint64_t result = qword_1EA651EA0;
  if (!qword_1EA651EA0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA651EA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651EA0);
  }
  return result;
}

uint64_t method lookup function for MAVectorRepresentation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MAVectorRepresentation);
}

uint64_t dispatch thunk of MAVectorRepresentation.__allocating_init<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of MAVectorRepresentation.__allocating_init(vector:nodes:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of MAVectorRepresentation.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MAVectorRepresentation.diagMatrix()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MAVectorRepresentation.weighted(vector:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MAVectorRepresentation.weighted(factor:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MAVectorRepresentation.weighted(combine:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of MAVectorRepresentation.normalized()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MAVectorRepresentation.normalized(by:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MAVectorRepresentation.reversed()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MAVectorRepresentation.filter(threshold:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MAVectorRepresentation.abs()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MAVectorRepresentation.count.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MAVectorRepresentation.merge(nodes:with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t method lookup function for MASquareMatrixRepresentation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MASquareMatrixRepresentation);
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.__allocating_init(matrix:nodes:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.diagVector()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.meanVector()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.medianVector()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.weighted(vector:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.weighted(matrix:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.weighted(factor:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.weighted(combine:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.normalized()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.reversed()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.abs()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.count.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of MASquareMatrixRepresentation.similarityMatrix(distance:identity:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t type metadata accessor for MAMatrixRepresentation()
{
  return self;
}

uint64_t method lookup function for MAMatrixRepresentation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MAMatrixRepresentation);
}

uint64_t dispatch thunk of MAMatrixRepresentation.__allocating_init(matrix:rnodes:cnodes:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of MAMatrixRepresentation.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t type metadata accessor for MAAdjacencyMatrixRepresentation()
{
  return self;
}

uint64_t method lookup function for MAAdjacencyMatrixRepresentation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MAAdjacencyMatrixRepresentation);
}

uint64_t dispatch thunk of MAAdjacencyMatrixRepresentation.__allocating_init(matrix:nodes:directed:)()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of MAAdjacencyMatrixRepresentation.commonNeighboursCount(source:target:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of MAAdjacencyMatrixRepresentation.commonNeighbours(source:target:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t type metadata accessor for MAPathMatrixRepresentation()
{
  return self;
}

uint64_t method lookup function for MAPathMatrixRepresentation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MAPathMatrixRepresentation);
}

uint64_t dispatch thunk of MAPathMatrixRepresentation.__allocating_init(matrix:nodes:directed:)()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of MAPathMatrixRepresentation.shortestPath(from:to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t sub_1D1698FAC@<X0>(uint64_t a1@<X8>)
{
  return sub_1D16EF134(v1[2], v1[3], v1[6], a1);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MADataFrame.slice(name:columnLabels:)(MADataFrame_optional *__return_ptr retstr, Swift::String_optional name, Swift::OpaquePointer columnLabels)
{
  object = name.value._object;
  id v7 = v3;
  uint64_t v8 = sub_1D1699D84((uint64_t)columnLabels._rawValue, v7);

  if (!v4)
  {
    id v9 = objc_msgSend(v7, sel_matrix);
    uint64_t v10 = objc_msgSend(v9, sel_wrapper);

    (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v10) + 0x70))(&v30);
    uint64_t v26 = v30;
    long long v27 = v31;
    Matrix<A>.subscript.getter(v8, (uint64_t *)&v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v24 = v28;
    uint64_t v11 = v29;
    uint64_t v12 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
    uint64_t v13 = (char *)objc_allocWithZone(v12);
    uint64_t v14 = &v13[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
    *(_OWORD *)uint64_t v14 = v24;
    *((void *)v14 + 2) = v11;
    v25.receiver = v13;
    v25.super_class = v12;
    uint64_t v15 = [(MADataFrame_optional *)&v25 init];
    id v16 = objc_msgSend(objc_allocWithZone((Class)MAFloatMatrix), sel_initWithWrapper_, v15);

    id v17 = objc_msgSend(v7, sel_rowLabels);
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = sub_1D17BE130();

      if (object) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v19 = 0;
      if (object)
      {
LABEL_4:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v20 = (void *)sub_1D17BDFE0();
        swift_bridgeObjectRelease();
        if (v19)
        {
LABEL_5:
          unint64_t v21 = (void *)sub_1D17BE110();
          swift_bridgeObjectRelease();
LABEL_9:
          id v22 = objc_allocWithZone((Class)MADataFrame);
          uint64_t v23 = (void *)sub_1D17BE110();
          swift_bridgeObjectRelease();
          objc_msgSend(v22, sel_initWithName_rowLabels_columnLabels_matrix_, v20, v21, v23, v16);

          return;
        }
LABEL_8:
        unint64_t v21 = 0;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v20 = 0;
    if (v19) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
}

MASeries __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MADataFrame.row(forLabel:)(Swift::String forLabel)
{
  uint64_t v2 = v1;
  object = forLabel._object;
  uint64_t countAndFlagsBits = forLabel._countAndFlagsBits;
  uint64_t v5 = (void *)sub_1D17BDFE0();
  id v6 = objc_msgSend(v2, sel_indexOfRowWithLabel_, v5);

  if (v6 == (id)sub_1D17BDC90())
  {
    sub_1D1699EEC();
    swift_allocError();
    *(void *)uint64_t v7 = countAndFlagsBits;
    *(void *)(v7 + 8) = object;
    *(unsigned char *)(v7 + 16) = 1;
    swift_bridgeObjectRetain();
    uint64_t v8 = (objc_class *)swift_willThrow();
  }
  else
  {
    id v12 = objc_msgSend(v2, sel_columnLabels);
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = sub_1D17BE130();
    }
    else
    {
      uint64_t v14 = 0;
    }
    id v15 = objc_msgSend(v2, sel_matrix);
    id v16 = objc_msgSend(v15, sel_row_, v6);

    swift_bridgeObjectRetain();
    id v17 = (void *)sub_1D17BDFE0();
    swift_bridgeObjectRelease();
    if (v14)
    {
      uint64_t v18 = (void *)sub_1D17BE110();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)MASeries), sel_initWithName_labels_vector_, v17, v18, v16);

    uint64_t v8 = v19;
  }
  result._vector = v11;
  result._indexCache = v10;
  result._name = v9;
  result.super.Class isa = v8;
  return result;
}

unint64_t MADataFrame.columnLabelValuesByRowLabel(withThreshold:)(float a1)
{
  uint64_t v2 = v1;
  id v4 = objc_msgSend(v1, sel_rowLabels);
  if (!v4) {
    goto LABEL_40;
  }
  uint64_t v5 = v4;
  uint64_t v6 = sub_1D17BE130();

  id v7 = objc_msgSend(v1, sel_columnLabels);
  if (!v7)
  {
    swift_bridgeObjectRelease();
LABEL_40:
    swift_bridgeObjectRelease();
    return sub_1D165C73C(MEMORY[0x1E4FBC860]);
  }
  uint64_t v8 = v7;
  uint64_t v9 = sub_1D17BE130();

  uint64_t v54 = *(void *)(v6 + 16);
  if (!v54)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC868];
  }
  unint64_t v10 = 0;
  uint64_t v59 = *(void *)(v9 + 16);
  uint64_t v52 = (uint64_t *)(v9 + 40);
  uint64_t v53 = v6 + 32;
  uint64_t v11 = (void *)MEMORY[0x1E4FBC868];
  BOOL v57 = v2;
  uint64_t v51 = v6;
  while (1)
  {
    if (v10 >= *(void *)(v6 + 16)) {
      goto LABEL_45;
    }
    uint64_t v14 = (uint64_t *)(v53 + 16 * v10);
    uint64_t v15 = v14[1];
    uint64_t v56 = *v14;
    swift_bridgeObjectRetain();
    if (v59) {
      break;
    }
    uint64_t v18 = (void *)MEMORY[0x1E4FBC868];
LABEL_27:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v37 = v15;
    unint64_t v39 = sub_1D165A868(v56, v15);
    uint64_t v40 = v11[2];
    BOOL v41 = (v38 & 1) == 0;
    uint64_t v42 = v40 + v41;
    if (__OFADD__(v40, v41)) {
      goto LABEL_46;
    }
    char v43 = v38;
    if (v11[3] >= v42)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        unint64_t v46 = v11;
        if ((v38 & 1) == 0) {
          goto LABEL_34;
        }
      }
      else
      {
        sub_1D16A7F60();
        unint64_t v46 = v11;
        if ((v43 & 1) == 0) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      sub_1D16A4CC8(v42, isUniquelyReferenced_nonNull_native);
      unint64_t v44 = sub_1D165A868(v56, v37);
      if ((v43 & 1) != (v45 & 1)) {
        goto LABEL_48;
      }
      unint64_t v39 = v44;
      unint64_t v46 = v11;
      if ((v43 & 1) == 0)
      {
LABEL_34:
        v46[(v39 >> 6) + 8] |= 1 << v39;
        uint64_t v47 = (uint64_t *)(v46[6] + 16 * v39);
        *uint64_t v47 = v56;
        v47[1] = v37;
        *(void *)(v46[7] + 8 * v39) = v18;
        uint64_t v48 = v46[2];
        BOOL v34 = __OFADD__(v48, 1);
        uint64_t v49 = v48 + 1;
        if (v34) {
          goto LABEL_47;
        }
        id v12 = v46;
        v46[2] = v49;
        swift_bridgeObjectRetain();
        goto LABEL_6;
      }
    }
    id v12 = v46;
    uint64_t v13 = v46[7];
    swift_bridgeObjectRelease();
    *(void *)(v13 + 8 * v39) = v18;
LABEL_6:
    ++v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v12;
    if (v10 == v54)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (unint64_t)v12;
    }
  }
  uint64_t v55 = v15;
  swift_bridgeObjectRetain();
  uint64_t v16 = 0;
  id v17 = v52;
  uint64_t v18 = (void *)MEMORY[0x1E4FBC868];
  unint64_t v58 = v10;
  while (1)
  {
    uint64_t v20 = *(v17 - 1);
    uint64_t v19 = *v17;
    swift_bridgeObjectRetain();
    objc_msgSend(v2, sel_floatAtRowIndex_columnIndex_, v10, v16);
    if (v21 > a1) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_11:
    ++v16;
    v17 += 2;
    if (v59 == v16)
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = v51;
      uint64_t v15 = v55;
      goto LABEL_27;
    }
  }
  float v22 = v21;
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v25 = sub_1D165A868(v20, v19);
  uint64_t v26 = v18[2];
  BOOL v27 = (v24 & 1) == 0;
  uint64_t v28 = v26 + v27;
  if (!__OFADD__(v26, v27))
  {
    char v29 = v24;
    if (v18[3] >= v28)
    {
      if (v23)
      {
        if ((v24 & 1) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        sub_1D16A8118();
        if ((v29 & 1) == 0) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      sub_1D16A4FE0(v28, v23);
      unint64_t v30 = sub_1D165A868(v20, v19);
      if ((v29 & 1) != (v31 & 1)) {
        goto LABEL_48;
      }
      unint64_t v25 = v30;
      if ((v29 & 1) == 0)
      {
LABEL_22:
        v18[(v25 >> 6) + 8] |= 1 << v25;
        uint64_t v32 = (uint64_t *)(v18[6] + 16 * v25);
        *uint64_t v32 = v20;
        v32[1] = v19;
        *(float *)(v18[7] + 4 * v25) = v22;
        uint64_t v33 = v18[2];
        BOOL v34 = __OFADD__(v33, 1);
        uint64_t v35 = v33 + 1;
        if (v34) {
          goto LABEL_44;
        }
        v18[2] = v35;
        swift_bridgeObjectRetain();
        goto LABEL_24;
      }
    }
    *(float *)(v18[7] + 4 * v25) = v22;
LABEL_24:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = v57;
    unint64_t v10 = v58;
    goto LABEL_11;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  unint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

void __swiftcall MADataFrame.normalizedByRowMagnitude()(MADataFrame_optional *__return_ptr retstr)
{
  uint64_t v2 = v1;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = objc_msgSend(v1, sel_matrix);
  id v4 = objc_msgSend(v3, sel_wrapper);

  (*(void (**)(char **__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x70))(&v34);
  uint64_t v5 = v35;
  if (((unint64_t)v35 & 0x8000000000000000) != 0)
  {
LABEL_38:
    sub_1D17BEA30();
    __break(1u);
    return;
  }
  uint64_t v6 = v34;
  int64_t v7 = v36;
  swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v8 = sub_1D17BE1C0();
    *(void *)(v8 + 16) = v5;
    if (v7 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v7 <= 0x7FFFFFFF)
    {
      uint64_t v9 = v8;
      unint64_t v10 = 0;
      do
      {
        if ((unsigned __int128)((uint64_t)v10 * (__int128)v7) >> 64 != ((uint64_t)v10 * v7) >> 63)
        {
          __break(1u);
          goto LABEL_21;
        }
        uint64_t v11 = v10 + 1;
        uint64_t v12 = v9 + 4 * (void)v10;
        cblas_snrm2_NEWLAPACK();
        *(_DWORD *)(v12 + 32) = v13;
        unint64_t v10 = v11;
      }
      while (v5 != v11);
      goto LABEL_10;
    }
    __break(1u);
  }
  uint64_t v9 = MEMORY[0x1E4FBC860];
LABEL_10:
  *(void *)(v9 + 16) = v5;
  swift_bridgeObjectRelease();
  if (v5 != *(char **)(v9 + 16)) {
    goto LABEL_23;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_24;
  }
  for (; v5; uint64_t v6 = sub_1D166762C((uint64_t)v6))
  {
    unint64_t v14 = 0;
    while ((unsigned __int128)((uint64_t)v14 * (__int128)v7) >> 64 == (uint64_t)(v14 * v7) >> 63)
    {
      if (v14 >= *(void *)(v9 + 16)) {
        goto LABEL_22;
      }
      float __B = *(float *)(v9 + 32 + 4 * v14);
      if (__B != 0.0)
      {
        if (v7 < 0)
        {
          sub_1D17BEA30();
          __break(1u);
          goto LABEL_38;
        }
        vDSP_vsdiv((const float *)&v6[4 * v14 * v7 + 32], 1, &__B, (float *)&v6[4 * v14 * v7 + 32], 1, v7);
      }
      if (v5 == (char *)++v14) {
        goto LABEL_25;
      }
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    ;
  }
LABEL_25:
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v2, sel_name);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = sub_1D17BDFF0();
    uint64_t v19 = v18;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v19 = 0;
  }
  id v20 = objc_msgSend(v2, sel_rowLabels);
  if (v20)
  {
    float v21 = v20;
    uint64_t v22 = sub_1D17BE130();
  }
  else
  {
    uint64_t v22 = 0;
  }
  id v23 = objc_msgSend(v2, sel_columnLabels);
  if (v23)
  {
    char v24 = v23;
    uint64_t v25 = sub_1D17BE130();
  }
  else
  {
    uint64_t v25 = 0;
  }
  uint64_t v26 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
  BOOL v27 = (char *)objc_allocWithZone(v26);
  uint64_t v28 = (char **)&v27[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *uint64_t v28 = v6;
  v28[1] = v5;
  v28[2] = (char *)v7;
  v32.receiver = v27;
  v32.super_class = v26;
  char v29 = [(MADataFrame_optional *)&v32 init];
  id v30 = objc_msgSend(objc_allocWithZone((Class)MAFloatMatrix), sel_initWithWrapper_, v29);

  id v31 = objc_allocWithZone((Class)MADataFrame);
  sub_1D1699CA4(v17, v19, v22, v25, v30);
}

id sub_1D1699CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    uint64_t v9 = (void *)sub_1D17BDFE0();
    swift_bridgeObjectRelease();
    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    unint64_t v10 = 0;
    if (a4) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v11 = 0;
    goto LABEL_8;
  }
  uint64_t v9 = 0;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  unint64_t v10 = (void *)sub_1D17BE110();
  swift_bridgeObjectRelease();
  if (!a4) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v11 = (void *)sub_1D17BE110();
  swift_bridgeObjectRelease();
LABEL_8:
  id v12 = objc_msgSend(v5, sel_initWithName_rowLabels_columnLabels_matrix_, v9, v10, v11, a5);

  return v12;
}

uint64_t sub_1D1699D84(uint64_t a1, void *a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
    sub_1D16826DC(0, v2, 0);
    uint64_t v3 = v15;
    uint64_t v6 = (uint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v8 = *(v6 - 1);
      uint64_t v7 = *v6;
      swift_bridgeObjectRetain();
      uint64_t v9 = (void *)sub_1D17BDFE0();
      id v10 = objc_msgSend(a2, sel_indexOfColumnWithLabel_, v9);

      if (v10 == (id)sub_1D17BDC90()) {
        break;
      }
      swift_bridgeObjectRelease();
      unint64_t v12 = *(void *)(v15 + 16);
      unint64_t v11 = *(void *)(v15 + 24);
      if (v12 >= v11 >> 1) {
        sub_1D16826DC(v11 > 1, v12 + 1, 1);
      }
      v6 += 2;
      *(void *)(v15 + 16) = v12 + 1;
      *(void *)(v15 + 8 * v12 + 32) = v10;
      if (!--v2) {
        return v3;
      }
    }
    sub_1D1699EEC();
    swift_allocError();
    *(void *)uint64_t v13 = v8;
    *(void *)(v13 + 8) = v7;
    *(unsigned char *)(v13 + 16) = 0;
    swift_willThrow();
    swift_release();
  }
  return v3;
}

unint64_t sub_1D1699EEC()
{
  unint64_t result = qword_1EA651EB0;
  if (!qword_1EA651EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651EB0);
  }
  return result;
}

uint64_t sub_1D1699F44()
{
  return swift_bridgeObjectRetain();
}

uint64_t _s5ErrorOwxx()
{
  return sub_1D1699F5C();
}

uint64_t sub_1D1699F5C()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s5ErrorOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1D1699F44();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s5ErrorOwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1D1699F44();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1D1699F5C();
  return a1;
}

uint64_t _s5ErrorOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1D1699F5C();
  return a1;
}

uint64_t _s5ErrorOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s5ErrorOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1D169A0DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1D169A0E4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

double SparseArray.init(arrayLiteral:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v10 = a1;
  uint64_t v7 = sub_1D17BE260();
  uint64_t WitnessTable = swift_getWitnessTable();
  SparseArray.init<A>(denseValues:)((uint64_t)&v10, a2, v7, a3, WitnessTable, &v11);
  double result = *(double *)&v11;
  *a4 = v11;
  return result;
}

uint64_t SparseArray.append(offset:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, void))(*(void *)(v11 + 24) + 16))(v7, *(void *)(v11 + 24));
  char v12 = sub_1D17BDFA0();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if ((v12 & 1) == 0)
  {
    unint64_t v14 = *(void **)(v4 + 8);
    uint64_t v15 = v14[2];
    if (v15 && v14[v15 + 3] >= a1)
    {
      __break(1u);
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v14 = sub_1D169C9A8(0, v15 + 1, 1, v14, &qword_1EA651FA8);
      }
      unint64_t v17 = v14[2];
      unint64_t v16 = v14[3];
      if (v17 >= v16 >> 1) {
        unint64_t v14 = sub_1D169C9A8((void *)(v16 > 1), v17 + 1, 1, v14, &qword_1EA651FA8);
      }
      void v14[2] = v17 + 1;
      v14[v17 + 4] = a1;
      *(void *)(v4 + 8) = v14;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
      sub_1D17BE260();
      return sub_1D17BE220();
    }
  }
  return result;
}

uint64_t SparseArray.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_1D17BDE80();
  swift_getWitnessTable();
  uint64_t v8 = sub_1D17BE0E0();
  v14[7] = v8;
  void v14[2] = a2;
  v14[3] = a3;
  unint64_t v14[4] = a1;
  swift_bridgeObjectRetain();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651EB8);
  unint64_t v10 = sub_1D169D958();
  uint64_t v12 = sub_1D169A4DC((void (*)(char *, char *))sub_1D169D934, (uint64_t)v14, v9, a2, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v12;
  a4[1] = v8;
  return result;
}

uint64_t SparseArray.init(values:offsets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = MEMORY[0x1D25F8BB0](a1, a3);
  if (result == *(void *)(a2 + 16))
  {
    *a4 = a1;
    a4[1] = a2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D169A4DC(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a5;
  uint64_t v32 = a8;
  BOOL v41 = a1;
  uint64_t v42 = a2;
  uint64_t v30 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1, a2);
  char v43 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness, v10);
  uint64_t v13 = (char *)&v29 - v12;
  MEMORY[0x1F4188790](v11, v14);
  unint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(v17 - 8);
  uint64_t v34 = v17;
  MEMORY[0x1F4188790](v17, v18);
  id v20 = (char *)&v29 - v19;
  uint64_t v21 = sub_1D17BE410();
  if (!v21) {
    return sub_1D17BE1A0();
  }
  uint64_t v22 = v21;
  uint64_t v46 = sub_1D17BDE10();
  uint64_t v35 = sub_1D17BE970();
  sub_1D17BE910();
  uint64_t v39 = v8;
  uint64_t result = sub_1D17BE400();
  if (v22 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v37 = (void (**)(char *))(v36 + 2);
    char v38 = v16;
    ++v36;
    while (1)
    {
      char v24 = (void (*)(char *, void))sub_1D17BE4F0();
      uint64_t v25 = v13;
      uint64_t v26 = v13;
      uint64_t v27 = AssociatedTypeWitness;
      (*v37)(v25);
      v24(v45, 0);
      uint64_t v28 = v44;
      v41(v26, v43);
      if (v28) {
        break;
      }
      uint64_t v44 = 0;
      (*v36)(v26, v27);
      sub_1D17BE950();
      sub_1D17BE420();
      --v22;
      uint64_t v13 = v26;
      if (!v22)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
        return v46;
      }
    }
    (*v36)(v26, v27);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(v32, v43, v31);
  }
  return result;
}

uint64_t sub_1D169A8DC(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_1D1667618(v3);
  }
  unint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      uint64_t v7 = &v3[a1];
      uint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 5, 8 * v6);
      v3[2] = v5;
      *uint64_t v1 = v3;
      return v8;
    }
  }
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t SparseArray.values.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SparseArray.offsets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SparseArray.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D17BE1A0();
  uint64_t v3 = MEMORY[0x1E4FBC860];
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL static SparseArray.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a2 + 8);
  if ((sub_1D17BE280() & 1) == 0) {
    return 0;
  }
  return sub_1D1666818(v2, v3);
}

BOOL sub_1D169AA58(uint64_t a1, uint64_t a2)
{
  return static SparseArray.== infix(_:_:)(a1, a2);
}

uint64_t SparseArray.withBuffer<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = a4;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  uint64_t v14 = v5;
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = v10;
  uint64_t v18 = a4;
  uint64_t v19 = v7;
  id v20 = sub_1D169D9B4;
  uint64_t v21 = &v9;
  return sub_1D17BE1B0();
}

uint64_t sub_1D169AAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void *))
{
  v14[0] = a1;
  v14[1] = a2;
  sub_1D17BDFD0();
  swift_getWitnessTable();
  sub_1D17BE4C0();
  v13[0] = a3;
  v13[1] = a4;
  id v13[2] = a5;
  void v13[3] = a6;
  sub_1D16B9510(v13[4], v13[5], v13[6], v13[7], (uint64_t)v13, (uint64_t)v14);
  return a7(v14);
}

double SparseArray.formUnion<A>(with:combine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  SparseArrayProtocol.union<A>(with:combine:)(a1, a2, a3, a4, a5, WitnessTable, a6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double result = *(double *)&v15;
  *uint64_t v6 = v15;
  return result;
}

double SparseArray.formIntersection<A>(with:combine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a4 + 16);
  uint64_t WitnessTable = swift_getWitnessTable();
  SparseArrayProtocol.intersection<A, B>(with:combine:)(a1, a2, a3, a4, a5, v12, WitnessTable, a6, *(void *)(a4 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double result = *(double *)&v16;
  *uint64_t v6 = v16;
  return result;
}

uint64_t SparseArray.sparseValues.getter()
{
  sub_1D169D83C();
  return swift_bridgeObjectRetain();
}

uint64_t SparseArray.sparseValueIndices.getter()
{
  sub_1D169D844();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D169ADDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SparseArray.withBuffer<A>(transform:)(a1, a2, a4, a3);
}

uint64_t sub_1D169AE00()
{
  sub_1D169D83C();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D169AE28()
{
  sub_1D169D844();
  return swift_bridgeObjectRetain();
}

double static SparseArray.defaultSparseValue.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = sub_1D17BE1A0();
  return SparseArray.init(arrayLiteral:)(v6, a1, a2, a3);
}

double sub_1D169AEA8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return static SparseArray.defaultSparseValue.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t SparseArray.getValue(atOffset:)(uint64_t a1, uint64_t a2)
{
  long long v8 = *v2;
  v6[1] = *(_OWORD *)(a2 + 16);
  uint64_t v7 = a1;
  uint64_t v4 = sub_1D17BE620();
  return SparseArray.withBuffer<A>(transform:)((uint64_t)sub_1D169DA18, (uint64_t)v6, a2, v4);
}

uint64_t sub_1D169AF38@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SparseBuffer();
  return SparseBuffer.getValue(atOffset:)(a1, v4, a2);
}

void *SparseArray.set(_:atOffset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v26 = a4;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = v12;
  v24[1] = (uint64_t)(v5 + 1);
  uint64_t v28 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651EC8);
  uint64_t v31 = v8;
  uint64_t v32 = v13;
  uint64_t v33 = *(void *)(a3 + 24);
  uint64_t v14 = v33;
  uint64_t v34 = sub_1D169DA38;
  uint64_t v35 = &v27;
  sub_1D17BE1B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v15 = v29;
  int v16 = v30;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v8, v14);
  uint64_t v25 = a1;
  char v17 = sub_1D17BDFA0();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v11, v8);
  if (v16 == 1)
  {
    uint64_t v19 = v26;
    sub_1D17BE2C0();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v19, 0, 1, v8);
    sub_1D17BE260();
    if (v17)
    {
      sub_1D17BE240();
      v18(v11, v8);
      return (void *)sub_1D169A8DC(v15);
    }
    else
    {
      sub_1D17BE190();
      uint64_t v21 = *v5;
      sub_1D169D3A4(v15, *v5);
      char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      uint64_t v23 = v21 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0) {
        uint64_t v23 = v21;
      }
      return (void *)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 24))(v23+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v15, v25, v8);
    }
  }
  else
  {
    double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v26, 1, 1, v8);
    if ((v17 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v25, v8);
      sub_1D17BE260();
      double result = (void *)sub_1D17BE230();
      if (*(void *)(v5[1] + 16) < v15)
      {
        __break(1u);
      }
      else if ((v15 & 0x8000000000000000) == 0)
      {
        return sub_1D169D3F8(v15, v15, v24[0]);
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t SparseArray.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = sub_1D17BE620();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v12 = (char *)&v15 - v11;
  long long v15 = *v3;
  SparseArray.getValue(atOffset:)(a1, a2);
  uint64_t v13 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v12, v7);
  }
  (*(void (**)(uint64_t))(*(void *)(a2 + 24) + 16))(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1D169B480@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = type metadata accessor for SparseArray();
  return SparseArray.subscript.getter(v3, v4, a2);
}

uint64_t SparseArray.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1D169D84C(a1, a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8);
  return v5(a1);
}

void (*SparseArray.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v7 = malloc(0xD0uLL);
  *a1 = v7;
  v7[13] = a2;
  v7[14] = v3;
  uint64_t v8 = *(void *)(a3 + 16);
  v7[15] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[16] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[17] = malloc(v10);
  v7[18] = malloc(v10);
  v7[19] = malloc(v10);
  void v16[2] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651EC8);
  void v7[2] = v8;
  v7[3] = v11;
  uint64_t v12 = *(void *)(a3 + 24);
  v7[20] = v12;
  uint64_t v7[4] = v12;
  v7[5] = sub_1D169DA38;
  v7[6] = v16;
  sub_1D17BE1B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7[21] = v7[11];
  if (*((unsigned char *)v7 + 96) == 1)
  {
    v7[22] = sub_1D17BE260();
    v7[23] = sub_1D17BE2B0();
    return sub_1D169B760;
  }
  else
  {
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v12 + 16);
    unsigned char v7[24] = v14;
    v7[25] = (v12 + 16) & 0xFFFFFFFFFFFFLL | 0x98C2000000000000;
    v14(v8, v12);
    return sub_1D169B8AC;
  }
}

void sub_1D169B760(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  (*(void (**)(void))(*a1 + 184))();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = *(void *)(v3 + 160);
    uint64_t v6 = *(void *)(v3 + 144);
    uint64_t v5 = *(void *)(v3 + 152);
    uint64_t v7 = *(void *)(v3 + 120);
    uint64_t v8 = *(void *)(v3 + 128);
    sub_1D17BE2C0();
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v4);
    LOBYTE(v4) = sub_1D17BDFA0();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v9(v6, v7);
    v9(v5, v7);
    if (v4)
    {
      unint64_t v10 = *(void *)(v3 + 168);
      uint64_t v11 = *(void *)(v3 + 152);
      uint64_t v12 = *(void *)(v3 + 120);
      sub_1D17BE240();
      v9(v11, v12);
      sub_1D169A8DC(v10);
    }
  }
  uint64_t v13 = *(void **)(v3 + 144);
  uint64_t v14 = *(void **)(v3 + 136);
  free(*(void **)(v3 + 152));
  free(v13);
  free(v14);
  free((void *)v3);
}

void sub_1D169B8AC(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v2 + 192);
    uint64_t v5 = *(void *)(v2 + 152);
    uint64_t v4 = *(void *)(v2 + 160);
    uint64_t v6 = *(void *)(v2 + 144);
    uint64_t v7 = *(void *)(v2 + 120);
    uint64_t v8 = *(void *)(v2 + 128);
    uint64_t v9 = *(void (**)(uint64_t, void, uint64_t))(v8 + 16);
    v9(v5, *(void *)(v2 + 136), v7);
    v3(v7, v4);
    LOBYTE(v4) = sub_1D17BDFA0();
    unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v10(v6, v7);
    v10(v5, v7);
    if ((v4 & 1) == 0)
    {
      uint64_t v11 = *(void *)(v2 + 168);
      uint64_t v12 = *(void *)(v2 + 112);
      v9(*(void *)(v2 + 152), *(void *)(v2 + 136), *(void *)(v2 + 120));
      sub_1D17BE260();
      sub_1D17BE230();
      if (*(void *)(*(void *)(v12 + 8) + 16) < v11)
      {
        __break(1u);
      }
      else
      {
        uint64_t v13 = *(void *)(v2 + 168);
        if ((v13 & 0x8000000000000000) == 0)
        {
          sub_1D169D3F8(v13, *(void *)(v2 + 168), *(void *)(v2 + 104));
          goto LABEL_7;
        }
      }
      __break(1u);
      return;
    }
LABEL_7:
    v10(*(void *)(v2 + 136), *(void *)(v2 + 120));
    goto LABEL_8;
  }
  (*(void (**)(void, void))(*(void *)(v2 + 128) + 8))(*(void *)(v2 + 136), *(void *)(v2 + 120));
LABEL_8:
  uint64_t v14 = *(void **)(v2 + 144);
  long long v15 = *(void **)(v2 + 136);
  free(*(void **)(v2 + 152));
  free(v14);
  free(v15);
  free((void *)v2);
}

uint64_t sub_1D169BA44@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1D17BE620();
  MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v11 = (char *)&v14 - v10;
  uint64_t v15 = *a1;
  MEMORY[0x1D25F8850](&v15, a2, MEMORY[0x1E4FBC1C8], a3, MEMORY[0x1E4FBC1D8]);
  uint64_t v12 = *(void *)(a3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a4, v11, a3);
  }
  __break(1u);
  return result;
}

double SparseArray.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  int64_t v36 = a5;
  uint64_t v37 = a1;
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v41 = a4;
  uint64_t v42 = v7;
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = sub_1D17BE620();
  uint64_t v13 = MEMORY[0x1F4188790](v11 - 8, v12);
  uint64_t v15 = (uint64_t *)((char *)&v33 - v14);
  uint64_t v16 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v13, v17);
  uint64_t v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness, v21);
  uint64_t v23 = (char *)&v33 - v22;
  *(void *)&long long v43 = sub_1D17BE1A0();
  *((void *)&v43 + 1) = MEMORY[0x1E4FBC860];
  uint64_t v34 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v37, a3);
  sub_1D17BE070();
  uint64_t v35 = a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1D17BE640();
  uint64_t v25 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48);
  if (v25(v15, 1, TupleTypeMetadata2) != 1)
  {
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    v42 += 32;
    char v38 = (void (**)(char *, uint64_t))(v42 - 24);
    uint64_t v39 = v26;
    uint64_t v40 = AssociatedConformanceWitness;
    do
    {
      char v27 = v23;
      uint64_t v28 = AssociatedTypeWitness;
      uint64_t v29 = *v15;
      v39(v9, (char *)v15 + *(int *)(TupleTypeMetadata2 + 48), a2);
      uint64_t v30 = type metadata accessor for SparseArray();
      uint64_t v31 = v29;
      uint64_t AssociatedTypeWitness = v28;
      uint64_t v23 = v27;
      sub_1D169D84C((uint64_t)v9, v31, v30);
      (*v38)(v9, a2);
      sub_1D17BE640();
    }
    while (v25(v15, 1, TupleTypeMetadata2) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v37, v35);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v23, AssociatedTypeWitness);
  double result = *(double *)&v43;
  *int64_t v36 = v43;
  return result;
}

double SparseArray.init<A>(denseValues:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA651ED0);
  unint64_t v12 = sub_1D169DAA0();
  uint64_t v13 = *(void *)(a5 + 8);
  *((void *)&v20 + 1) = a3;
  unint64_t v21 = v12;
  uint64_t v22 = v13;
  uint64_t v14 = sub_1D17BE880();
  MEMORY[0x1F4188790](v14, v15);
  uint64_t v17 = (char *)&v20 - v16;
  *(void *)&long long v20 = 0;
  sub_1D17BEC40();
  swift_getWitnessTable();
  double v18 = SparseArray.init<A>(_:)((uint64_t)v17, a2, v14, a4, &v20);
  (*(void (**)(uint64_t, uint64_t, double))(*(void *)(a3 - 8) + 8))(a1, a3, v18);
  double result = *(double *)&v20;
  *a6 = v20;
  return result;
}

double sub_1D169C0C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return SparseArray.init(arrayLiteral:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t static SparseArray<>.zero.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1D17BE1A0();
  uint64_t result = MEMORY[0x1D25F8BB0](v4, a1);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (result == *(void *)(MEMORY[0x1E4FBC860] + 16))
  {
    *a2 = v4;
    a2[1] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static SparseArray<>.+ infix(_:_:)(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D169C17C(a1, a2, a3, a4, a5, (uint64_t)sub_1D169DB1C);
}

double static SparseArray<>.+= infix(_:_:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D169C238(a1, a2, a3, a4, a5, (uint64_t)sub_1D169DB1C);
}

uint64_t static SparseArray<>.- infix(_:_:)(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D169C17C(a1, a2, a3, a4, a5, (uint64_t)sub_1D169DB34);
}

uint64_t sub_1D169C17C(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v11[1] = *a1;
  v11[0] = *a2;
  uint64_t v10[2] = a3;
  v10[3] = a4;
  void v10[4] = a5;
  v10[5] = a3;
  uint64_t v7 = type metadata accessor for SparseArray();
  uint64_t WitnessTable = swift_getWitnessTable();
  return SparseArrayProtocol.union<A>(with:combine:)((uint64_t)v11, a6, (uint64_t)v10, v7, v7, WitnessTable, WitnessTable);
}

double static SparseArray<>.-= infix(_:_:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D169C238(a1, a2, a3, a4, a5, (uint64_t)sub_1D169DB34);
}

double sub_1D169C238(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v11 = *a2;
  uint64_t v10[2] = a3;
  v10[3] = a4;
  void v10[4] = a5;
  v10[5] = a3;
  uint64_t v7 = type metadata accessor for SparseArray();
  uint64_t WitnessTable = swift_getWitnessTable();
  return SparseArray.formUnion<A>(with:combine:)((uint64_t)&v11, a6, (uint64_t)v10, v7, v7, WitnessTable);
}

uint64_t sub_1D169C2C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return static SparseArray<>.zero.getter(*(void *)(a1 + 16), a2);
}

uint64_t sub_1D169C2D0(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  return static SparseArray<>.+ infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8));
}

double sub_1D169C2E0(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return static SparseArray<>.+= infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8));
}

uint64_t sub_1D169C2F0(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  return static SparseArray<>.- infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8));
}

double sub_1D169C300(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return static SparseArray<>.-= infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8));
}

uint64_t SparseArray<>.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_1D17BE270();
  uint64_t result = sub_1D17BED30();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = v1 + 32;
    do
    {
      v4 += 8;
      uint64_t result = sub_1D17BED70();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t SparseArray<>.hashValue.getter()
{
  return sub_1D17BED80();
}

uint64_t sub_1D169C3D8()
{
  return SparseArray<>.hashValue.getter();
}

uint64_t sub_1D169C3E0()
{
  return SparseArray<>.hash(into:)();
}

uint64_t sub_1D169C3E8()
{
  return sub_1D17BED80();
}

uint64_t SparseArray.description.getter(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v20 = 91;
  unint64_t v21 = 0xE100000000000000;
  uint64_t v17 = v4;
  *(void *)&long long v18 = v3;
  swift_getWitnessTable();
  SparseValues.init(_:)((uint64_t)&v17, a1, (uint64_t)&v12);
  uint64_t v17 = v12;
  *(void *)&long long v18 = v13;
  uint64_t v5 = type metadata accessor for SparseValues();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x1D25F8A70](&v16, v5, WitnessTable);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v15 = v16;
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(v7 + 16) = v8;
  *(void *)(v7 + 24) = v9;
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v10[2] = v8;
  v10[3] = v9;
  void v10[4] = sub_1D169DB8C;
  v10[5] = v7;
  sub_1D17BE870();
  swift_getWitnessTable();
  sub_1D17BEB30();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v17;
  long long v13 = v18;
  uint64_t v14 = v19;
  sub_1D17BE9C0();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_1D17BDF20();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  return v20;
}

uint64_t sub_1D169C6DC()
{
  return 0;
}

void *sub_1D169C770(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1EBD27248);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      uint64_t v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      long long v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      long long v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D169E278(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D169C880(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1D169C9A8(a1, a2, a3, a4, &qword_1EA651FA8);
}

char *sub_1D169C88C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD271F0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      long long v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      long long v13 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1D169DD6C(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D169C99C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1D169C9A8(a1, a2, a3, a4, &qword_1EBD272F0);
}

void *sub_1D169C9A8(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      _OWORD v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v14 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D169E278(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_1D169CAB4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651C68);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      uint64_t v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D169DE58(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D169CBC4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651F60);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1D169DF64(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D169CCE8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA651720);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      uint64_t v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D169E074(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D169CDF8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651F68);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1D169E168(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D169CF1C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651F90);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      uint64_t v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D169E364(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D169D02C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1D169D164(a1, a2, a3, a4, &qword_1EA651F98, &qword_1EA651FA0);
}

void *sub_1D169D040(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651F80);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      uint64_t v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D169E458(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D169D150(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1D169D164(a1, a2, a3, a4, &qword_1EA651F70, &qword_1EA651EB8);
}

void *sub_1D169D164(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      id v13[2] = v11;
      void v13[3] = 2 * (v15 >> 3);
      long long v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
      long long v16 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D169E54C(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_1D169D280(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1D169D164(a1, a2, a3, a4, &qword_1EA651F78, &qword_1EA6516E8);
}

char *sub_1D169D294(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651F88);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1D169DD6C(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D169D3A4(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

void *sub_1D169D3F8(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t result = sub_1D169C9A8(result, v13, 1, v5, &qword_1EA651FA8);
    uint64_t v5 = result;
  }
  int64_t v14 = &v5[a1 + 4];
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v15 = v5[2];
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    uint64_t result = v14 + 1;
    long long v18 = &v5[a2 + 4];
    if (v14 + 1 != v18 || result >= &v18[v17]) {
      uint64_t result = memmove(result, v18, 8 * v17);
    }
    uint64_t v19 = v5[2];
    BOOL v16 = __OFADD__(v19, v9);
    uint64_t v20 = v19 + v9;
    if (!v16)
    {
      void v5[2] = v20;
LABEL_20:
      *int64_t v14 = a3;
      *(void *)uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (void *)sub_1D17BEB20();
  __break(1u);
  return result;
}

char *sub_1D169D564(uint64_t a1, int64_t a2, float a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v5 = *v3;
  int64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v10 > *((void *)v5 + 3) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t result = sub_1D169C88C(result, v13, 1, v5);
    uint64_t v5 = result;
  }
  int64_t v14 = (float *)&v5[4 * a1 + 32];
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v15 = *((void *)v5 + 2);
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v14 + 1);
    long long v18 = (float *)&v5[4 * a2 + 32];
    if (v14 + 1 != v18 || result >= (char *)&v18[v17]) {
      uint64_t result = (char *)memmove(result, v18, 4 * v17);
    }
    uint64_t v19 = *((void *)v5 + 2);
    BOOL v16 = __OFADD__(v19, v9);
    uint64_t v20 = v19 + v9;
    if (!v16)
    {
      *((void *)v5 + 2) = v20;
LABEL_20:
      *int64_t v14 = a3;
      *uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)sub_1D17BEB20();
  __break(1u);
  return result;
}

double *sub_1D169D6D0(uint64_t a1, int64_t a2, double a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v5 = *v3;
  int64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = (double *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v10 > *((void *)v5 + 3) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t result = (double *)sub_1D169C770(result, v13, 1, v5);
    uint64_t v5 = result;
  }
  int64_t v14 = &v5[a1 + 4];
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v15 = *((void *)v5 + 2);
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    uint64_t result = v14 + 1;
    long long v18 = &v5[a2 + 4];
    if (v14 + 1 != v18 || result >= &v18[v17]) {
      uint64_t result = (double *)memmove(result, v18, 8 * v17);
    }
    uint64_t v19 = *((void *)v5 + 2);
    BOOL v16 = __OFADD__(v19, v9);
    uint64_t v20 = v19 + v9;
    if (!v16)
    {
      *((void *)v5 + 2) = v20;
LABEL_20:
      *int64_t v14 = a3;
      *uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (double *)sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D169D83C()
{
  return *(void *)v0;
}

uint64_t sub_1D169D844()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1D169D84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D17BE620();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  int64_t v10 = (char *)&v12 - v9;
  SparseArray.set(_:atOffset:)(a1, a2, a3, (uint64_t)&v12 - v9);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1D169D934@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D169BA44(a1, *(void *)(v2 + 32), *(void *)(v2 + 16), a2);
}

unint64_t sub_1D169D958()
{
  unint64_t result = qword_1EA651EC0;
  if (!qword_1EA651EC0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA651EB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651EC0);
  }
  return result;
}

uint64_t sub_1D169D9B4()
{
  return sub_1D17BE1B0();
}

uint64_t sub_1D169DA18@<X0>(uint64_t a1@<X8>)
{
  return sub_1D169AF38(*(void *)(v1 + 32), a1);
}

uint64_t sub_1D169DA38@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D169DA50(a1, a2);
}

uint64_t sub_1D169DA50@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D16B9404(*(void *)(v2 + 16), *a1, a1[1], a1[2], a2);
}

uint64_t type metadata accessor for SparseArray()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1D169DAA0()
{
  unint64_t result = qword_1EA651ED8[0];
  if (!qword_1EA651ED8[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA651ED0);
    sub_1D165B76C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA651ED8);
  }
  return result;
}

uint64_t sub_1D169DB1C(uint64_t a1, uint64_t a2)
{
  return sub_1D169DB4C(a1, a2, MEMORY[0x1E4FBBCE0]);
}

uint64_t sub_1D169DB34(uint64_t a1, uint64_t a2)
{
  return sub_1D169DB4C(a1, a2, MEMORY[0x1E4FBBCE8]);
}

uint64_t sub_1D169DB4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void))
{
  return a3(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 32));
}

uint64_t sub_1D169DB7C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D169DB8C()
{
  return sub_1D169C6DC();
}

uint64_t sub_1D169DB94()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1D169DBCC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, char *))(v2 + 32);
  uint64_t v6 = *a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t result = v5(v6, (char *)a1 + *(int *)(TupleTypeMetadata2 + 48));
  *a2 = result;
  a2[1] = v9;
  return result;
}

uint64_t sub_1D169DC3C(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t sub_1D169DC44(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1D169DC80()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D169DCA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for SparseArray();
  return sub_1D169D84C(a1, v4, v5);
}

uint64_t sub_1D169DCF4()
{
  return 16;
}

__n128 sub_1D169DD00(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_1D169DD0C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1D169DD6C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  __n128 result = (char *)sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D169DE58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6516D8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D169DF64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6516D0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D169E074(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D169E168(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D90);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

char *sub_1D169E278(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D169E364(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D169E458(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D169E54C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D169E654(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v4[3] = a2;
    uint64_t v3 = *(uint64_t (**)(void *))(v2 + 40);
    v4[0] = 0;
    v4[1] = a2;
    _OWORD v4[2] = result;
    return v3(v4);
  }
  return result;
}

uint64_t sub_1D169E69C(uint64_t a1, uint64_t a2)
{
  return sub_1D169AAE4(a1, a2, *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(uint64_t (**)(void *))(v2 + 72));
}

uint64_t (*sub_1D169E6D8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t)))()
{
  uint64_t v5 = v3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v24 = v9;
  *uint64_t v5 = 0x8000000000000000;
  unint64_t v11 = sub_1D165A8E0(a2);
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_12;
  }
  char v4 = v10;
  if (*(void *)(v9 + 24) >= v14)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_6;
    }
LABEL_12:
    sub_1D16A6448();
    uint64_t v9 = v24;
    goto LABEL_6;
  }
  sub_1D16A1F40(v14, isUniquelyReferenced_nonNull_native);
  uint64_t v9 = v24;
  unint64_t v15 = sub_1D165A8E0(a2);
  if ((v4 & 1) != (v16 & 1)) {
    goto LABEL_14;
  }
  unint64_t v11 = v15;
LABEL_6:
  *uint64_t v5 = v9;
  swift_bridgeObjectRelease();
  uint64_t v17 = (void *)*v5;
  if (v4)
  {
    swift_bridgeObjectRetain();
LABEL_10:
    swift_bridgeObjectRelease();
    return nullsub_1;
  }
  uint64_t v18 = swift_bridgeObjectRetain();
  a3(&v24, v18);
  v17[(v11 >> 6) + 8] |= 1 << v11;
  uint64_t v19 = 8 * v11;
  *(void *)(v17[6] + v19) = a2;
  *(void *)(v17[7] + v19) = v24;
  uint64_t v20 = v17[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (!v21)
  {
    void v17[2] = v22;
    goto LABEL_10;
  }
  __break(1u);
LABEL_14:
  uint64_t result = (uint64_t (*)())sub_1D17BEC60();
  __break(1u);
  return result;
}

KnowledgeGraphKit::ElementIdentifierTupleSet __swiftcall ElementIdentifierTupleSet.init()()
{
  uint64_t v1 = v0;
  result.targetsBySource._rawValue = (void *)sub_1D165F754(MEMORY[0x1E4FBC860]);
  v1->targetsBySource._rawValue = result.targetsBySource._rawValue;
  return result;
}

void ElementIdentifierTupleSet.sources.getter(uint64_t *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_1D165E5B8(v2, a1);
}

uint64_t ElementIdentifierTupleSet.insert(_:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = v4;
  uint64_t v9 = *a3;
  uint64_t v10 = *a4;
  uint64_t v11 = *v4;
  if (*(void *)(v11 + 16) && (unint64_t v12 = sub_1D165A8E0(*a3), (v13 & 1) != 0)) {
    uint64_t v14 = objc_msgSend(*(id *)(*(void *)(*(void *)(v11 + 56) + 8 * v12) + 16), sel_containsIdentifier_, v10) ^ 1;
  }
  else {
    uint64_t v14 = 1;
  }
  uint64_t v41 = v10;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = (void *)*v6;
  uint64_t v16 = (uint64_t)v42;
  *unint64_t v6 = 0x8000000000000000;
  unint64_t v18 = sub_1D165A8E0(v9);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_22;
  }
  LOBYTE(v5) = v17;
  if (*(void *)(v16 + 24) < v21)
  {
    sub_1D16A1F40(v21, isUniquelyReferenced_nonNull_native);
    uint64_t v16 = (uint64_t)v42;
    unint64_t v22 = sub_1D165A8E0(v9);
    if ((v5 & 1) == (v23 & 1))
    {
      unint64_t v18 = v22;
      goto LABEL_10;
    }
    uint64_t result = sub_1D17BEC60();
    __break(1u);
    return result;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_24;
  }
  while (1)
  {
LABEL_10:
    *unint64_t v6 = v16;
    swift_bridgeObjectRelease();
    uint64_t v24 = (void *)*v6;
    if (v5)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      id v25 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
      swift_bridgeObjectRetain();
      id v26 = objc_msgSend(v25, sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v26;
      v24[(v18 >> 6) + 8] |= 1 << v18;
      uint64_t v28 = 8 * v18;
      *(void *)(v24[6] + v28) = v9;
      *(void *)(v24[7] + v28) = v27;
      uint64_t v29 = v24[2];
      BOOL v30 = __OFADD__(v29, 1);
      uint64_t v31 = v29 + 1;
      if (v30)
      {
        __break(1u);
        goto LABEL_26;
      }
      uint64_t v24[2] = v31;
    }
    uint64_t v5 = v24[7];
    swift_bridgeObjectRelease();
    ElementIdentifierSet.insert(_:)((uint64_t *)&v42, &v41);
    uint64_t v32 = *v6;
    if (!*(void *)(*v6 + 16))
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    unint64_t v33 = sub_1D165A8E0(v9);
    if (v34) {
      break;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    sub_1D16A6448();
    uint64_t v16 = (uint64_t)v42;
  }
  if (objc_msgSend(*(id *)(*(void *)(*(void *)(v32 + 56) + 8 * v33) + 16), sel_isEmpty))
  {
    unint64_t v35 = sub_1D165A8E0(v9);
    if (v36)
    {
      unint64_t v18 = v35;
      char v37 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v38 = *v6;
      uint64_t v40 = *v6;
      *unint64_t v6 = 0x8000000000000000;
      if (v37)
      {
LABEL_19:
        sub_1D16A8E0C(v18, v38);
        *unint64_t v6 = v38;
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
LABEL_26:
      sub_1D16A6448();
      uint64_t v38 = v40;
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v9;
  *a2 = v10;
  return v14;
}

void static ElementIdentifierTupleSet.joinOnTargets(_:_:)(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  unint64_t v40 = sub_1D165F754(MEMORY[0x1E4FBC860]);
  uint64_t v41 = v3;
  uint64_t v38 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  int64_t v39 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v4 + 64;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      uint64_t v44 = (v7 - 1) & v7;
      int64_t v45 = v9;
      unint64_t v10 = __clz(__rbit64(v7)) | (v9 << 6);
      goto LABEL_23;
    }
    int64_t v11 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v11 >= v39) {
      goto LABEL_50;
    }
    unint64_t v12 = *(void *)(v38 + 8 * v11);
    int64_t v13 = v9 + 1;
    if (!v12)
    {
      int64_t v13 = v9 + 2;
      if (v9 + 2 >= v39) {
        goto LABEL_50;
      }
      unint64_t v12 = *(void *)(v38 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v9 + 3;
        if (v9 + 3 >= v39) {
          goto LABEL_50;
        }
        unint64_t v12 = *(void *)(v38 + 8 * v13);
        if (!v12) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v44 = (v12 - 1) & v12;
    int64_t v45 = v13;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    uint64_t v15 = 8 * v10;
    uint64_t v43 = *(void *)(*(void *)(v41 + 48) + v15);
    uint64_t v16 = *(void *)(*(void *)(v41 + 56) + v15);
    id v17 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
    swift_retain();
    id v18 = objc_msgSend(v17, sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
    uint64_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = v18;
    uint64_t v19 = 1 << *(unsigned char *)(v4 + 32);
    if (v19 < 64) {
      uint64_t v20 = ~(-1 << v19);
    }
    else {
      uint64_t v20 = -1;
    }
    unint64_t v21 = v20 & *(void *)(v4 + 64);
    int64_t v22 = (unint64_t)(v19 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v23 = 0;
    if (v21)
    {
LABEL_27:
      unint64_t v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_28;
    }
    while (1)
    {
      int64_t v30 = v23 + 1;
      if (__OFADD__(v23, 1))
      {
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      if (v30 >= v22) {
        goto LABEL_48;
      }
      unint64_t v31 = *(void *)(v8 + 8 * v30);
      ++v23;
      if (!v31)
      {
        int64_t v23 = v30 + 1;
        if (v30 + 1 >= v22) {
          goto LABEL_48;
        }
        unint64_t v31 = *(void *)(v8 + 8 * v23);
        if (!v31)
        {
          int64_t v23 = v30 + 2;
          if (v30 + 2 >= v22) {
            goto LABEL_48;
          }
          unint64_t v31 = *(void *)(v8 + 8 * v23);
          if (!v31) {
            break;
          }
        }
      }
LABEL_43:
      unint64_t v21 = (v31 - 1) & v31;
      unint64_t v25 = __clz(__rbit64(v31)) + (v23 << 6);
LABEL_28:
      uint64_t v26 = 8 * v25;
      uint64_t v27 = *(void *)(*(void *)(v4 + 48) + v26);
      uint64_t v28 = *(void **)(v16 + 16);
      uint64_t v29 = *(void *)(*(void *)(*(void *)(v4 + 56) + v26) + 16);
      swift_retain();
      if (objc_msgSend(v28, sel_intersectsIdentifierSet_, v29))
      {
        uint64_t v33 = v46;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          id v42 = *(id *)(v46 + 16);
          objc_msgSend(v42, sel_mutableCopy);
          sub_1D17BE690();
          swift_unknownObjectRelease();
          sub_1D1685604();
          swift_dynamicCast();

          uint64_t v34 = swift_allocObject();
          *(void *)(v34 + 16) = v47;
          swift_release();
          uint64_t v33 = v34;
        }
        uint64_t v46 = v33;
        id v35 = *(id *)(v33 + 16);
        objc_msgSend(v35, sel_containsIdentifier_, v27);
        objc_msgSend(v35, sel_addIdentifier_, v27);
        swift_release();

        if (v21) {
          goto LABEL_27;
        }
      }
      else
      {
        swift_release();
        if (v21) {
          goto LABEL_27;
        }
      }
    }
    int64_t v32 = v30 + 3;
    if (v32 < v22)
    {
      unint64_t v31 = *(void *)(v8 + 8 * v32);
      if (!v31)
      {
        while (1)
        {
          int64_t v23 = v32 + 1;
          if (__OFADD__(v32, 1)) {
            goto LABEL_52;
          }
          if (v23 >= v22) {
            goto LABEL_48;
          }
          unint64_t v31 = *(void *)(v8 + 8 * v23);
          ++v32;
          if (v31) {
            goto LABEL_43;
          }
        }
      }
      int64_t v23 = v32;
      goto LABEL_43;
    }
LABEL_48:
    swift_release();
    if (objc_msgSend(*(id *)(v46 + 16), sel_isEmpty))
    {
      swift_release();
    }
    else
    {
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_1D165E85C(v46, v43, isUniquelyReferenced_nonNull_native);
      swift_release();
      swift_bridgeObjectRelease();
    }
    unint64_t v7 = v44;
    int64_t v9 = v45;
    swift_release();
  }
  uint64_t v14 = v9 + 4;
  if (v9 + 4 >= v39)
  {
LABEL_50:
    swift_release();

    *a3 = v40;
    return;
  }
  unint64_t v12 = *(void *)(v38 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v9 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v39) {
      goto LABEL_50;
    }
    unint64_t v12 = *(void *)(v38 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_54:
  __break(1u);
}

Swift::Bool __swiftcall ElementIdentifierTupleSet.contains(_:)(Swift::tuple_KnowledgeGraphKit_ElementIdentifier_KnowledgeGraphKit_ElementIdentifier a1)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16)
    && (uint64_t v3 = *(void *)a1._1.rawValue, v4 = sub_1D165A8E0(*(void *)a1._0.rawValue), (v5 & 1) != 0))
  {
    return objc_msgSend(*(id *)(*(void *)(*(void *)(v2 + 56) + 8 * v4) + 16), sel_containsIdentifier_, v3);
  }
  else
  {
    return 0;
  }
}

uint64_t ElementIdentifierTupleSet.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_1D165A8E0(*a1), (v6 & 1) != 0))
  {
    *a2 = *(void *)(*(void *)(v4 + 56) + 8 * v5);
    return swift_retain();
  }
  else
  {
    id v8 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v8;
    *a2 = result;
  }
  return result;
}

KnowledgeGraphKit::ElementIdentifierTupleSet __swiftcall ElementIdentifierTupleSet.subtracting(_:)(KnowledgeGraphKit::ElementIdentifierTupleSet a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(void *)a1.targetsBySource._rawValue;
  *uint64_t v3 = *v2;
  uint64_t v6 = v4;
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.subtract(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)&v6);
  return result;
}

uint64_t ElementIdentifierTupleSet.union(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1D16A0B84(a1, ElementIdentifierTupleSet.formUnion(_:), a2);
}

Swift::tuple_KnowledgeGraphKit_ElementIdentifier_KnowledgeGraphKit_ElementIdentifier_optional __swiftcall ElementIdentifierTupleSet.remove(_:)(Swift::tuple_KnowledgeGraphKit_ElementIdentifier_KnowledgeGraphKit_ElementIdentifier a1)
{
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  uint64_t v6 = *(void *)a1._0.rawValue;
  uint64_t v7 = *(void *)a1._1.rawValue;
  uint64_t v8 = *v2;
  if (*(void *)(v8 + 16) && (unint64_t v9 = sub_1D165A8E0(*(void *)a1._0.rawValue), (v10 & 1) != 0)) {
    unsigned int v11 = objc_msgSend(*(id *)(*(void *)(*(void *)(v8 + 56) + 8 * v9) + 16), sel_containsIdentifier_, v7);
  }
  else {
    unsigned int v11 = 0;
  }
  uint64_t v40 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v41 = (void *)*v4;
  int64_t v13 = v41;
  *uint64_t v4 = 0x8000000000000000;
  unint64_t v15 = sub_1D165A8E0(v6);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_28;
  }
  LOBYTE(v3) = v14;
  if (v13[3] < v18)
  {
    sub_1D16A1F40(v18, isUniquelyReferenced_nonNull_native);
    int64_t v13 = v41;
    unint64_t v19 = sub_1D165A8E0(v6);
    if ((v3 & 1) == (v20 & 1))
    {
      unint64_t v15 = v19;
      goto LABEL_10;
    }
    Swift::UInt v32 = sub_1D17BEC60();
    __break(1u);
    goto LABEL_34;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_30;
  }
  while (1)
  {
LABEL_10:
    *uint64_t v4 = (uint64_t)v13;
    swift_bridgeObjectRelease();
    unint64_t v21 = (void *)*v4;
    if (v3)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      id v22 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
      swift_bridgeObjectRetain();
      id v23 = objc_msgSend(v22, sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = v23;
      v21[(v15 >> 6) + 8] |= 1 << v15;
      uint64_t v25 = 8 * v15;
      *(void *)(v21[6] + v25) = v6;
      *(void *)(v21[7] + v25) = v24;
      uint64_t v26 = v21[2];
      BOOL v27 = __OFADD__(v26, 1);
      uint64_t v28 = v26 + 1;
      if (v27)
      {
        __break(1u);
        goto LABEL_32;
      }
      v21[2] = v28;
    }
    uint64_t v3 = v21[7];
    swift_bridgeObjectRelease();
    ElementIdentifierSet.remove(_:)((KnowledgeGraphKit::ElementIdentifier)&v40);
    uint64_t v29 = *v4;
    if (!*(void *)(*v4 + 16))
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    unint64_t v30 = sub_1D165A8E0(v6);
    if (v31) {
      break;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    sub_1D16A6448();
    int64_t v13 = v41;
  }
  Swift::UInt v32 = (Swift::UInt)objc_msgSend(*(id *)(*(void *)(*(void *)(v29 + 56) + 8 * v30) + 16), sel_isEmpty);
  if (v32)
  {
    Swift::UInt v32 = sub_1D165A8E0(v6);
    if (v33)
    {
      unint64_t v15 = v32;
      char v35 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v36 = *v4;
      uint64_t v39 = *v4;
      *uint64_t v4 = 0x8000000000000000;
      if (v35)
      {
LABEL_19:
        sub_1D16A8E0C(v15, v36);
        *uint64_t v4 = v36;
        swift_release();
        Swift::UInt v32 = swift_bridgeObjectRelease();
        goto LABEL_20;
      }
LABEL_32:
      sub_1D16A6448();
      uint64_t v36 = v39;
      goto LABEL_19;
    }
  }
LABEL_20:
  if (v11) {
    uint64_t v37 = v6;
  }
  else {
    uint64_t v37 = 0;
  }
  if (v11) {
    uint64_t v38 = v7;
  }
  else {
    uint64_t v38 = 0;
  }
  *(void *)uint64_t v5 = v37;
  *(void *)(v5 + 8) = v38;
  *(unsigned char *)(v5 + 16) = v11 ^ 1;
LABEL_34:
  result.value._1.rawValue = v33;
  result.value._0.rawValue = v32;
  result.is_nil = v34;
  return result;
}

uint64_t ElementIdentifierTupleSet.formUnion(_:)(uint64_t *a1)
{
  return sub_1D16A106C(a1, (uint64_t (*)(uint64_t *))ElementIdentifierTupleSet.formUnion(_:), (SEL *)&selRef_unionWithIdentifierSet_);
}

Swift::Void __swiftcall ElementIdentifierTupleSet.subtract(_:)(KnowledgeGraphKit::ElementIdentifierTupleSet a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)a1.targetsBySource._rawValue;
  uint64_t v46 = *(void *)a1.targetsBySource._rawValue + 64;
  uint64_t v4 = 1 << *(unsigned char *)(*(void *)a1.targetsBySource._rawValue + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(*(void *)a1.targetsBySource._rawValue + 64);
  int64_t v47 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (v6) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v10 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v10 < v47)
    {
      unint64_t v11 = *(void *)(v46 + 8 * v10);
      int64_t v12 = v7 + 1;
      if (v11) {
        goto LABEL_20;
      }
      int64_t v12 = v7 + 2;
      if (v7 + 2 >= v47) {
        goto LABEL_41;
      }
      unint64_t v11 = *(void *)(v46 + 8 * v12);
      if (v11) {
        goto LABEL_20;
      }
      int64_t v12 = v7 + 3;
      if (v7 + 3 >= v47) {
        goto LABEL_41;
      }
      unint64_t v11 = *(void *)(v46 + 8 * v12);
      if (v11)
      {
LABEL_20:
        unint64_t v6 = (v11 - 1) & v11;
        int64_t v48 = v12;
        for (unint64_t i = __clz(__rbit64(v11)) + (v12 << 6); ; unint64_t i = v8 | (v7 << 6))
        {
          uint64_t v14 = 8 * i;
          uint64_t v15 = *(void *)(*(void *)(v3 + 48) + v14);
          uint64_t v16 = *(void *)(*(void *)(v3 + 56) + v14);
          swift_retain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v18 = (void *)*v2;
          char v50 = (void *)*v2;
          *uint64_t v2 = 0x8000000000000000;
          unint64_t v20 = sub_1D165A8E0(v15);
          uint64_t v21 = v18[2];
          BOOL v22 = (v19 & 1) == 0;
          uint64_t v23 = v21 + v22;
          if (__OFADD__(v21, v22)) {
            break;
          }
          char v24 = v19;
          if (v18[3] >= v23)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1D16A6448();
              uint64_t v18 = v50;
            }
          }
          else
          {
            sub_1D16A1F40(v23, isUniquelyReferenced_nonNull_native);
            uint64_t v18 = v50;
            unint64_t v25 = sub_1D165A8E0(v15);
            if ((v24 & 1) != (v26 & 1)) {
              goto LABEL_48;
            }
            unint64_t v20 = v25;
          }
          *uint64_t v2 = (uint64_t)v18;
          swift_bridgeObjectRelease();
          BOOL v27 = (void *)*v2;
          if (v24)
          {
            uint64_t v28 = v27[7];
          }
          else
          {
            id v29 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
            swift_bridgeObjectRetain();
            id v30 = objc_msgSend(v29, sel_init);
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
            uint64_t v31 = swift_allocObject();
            *(void *)(v31 + 16) = v30;
            v27[(v20 >> 6) + 8] |= 1 << v20;
            uint64_t v32 = 8 * v20;
            *(void *)(v27[6] + v32) = v15;
            *(void *)(v27[7] + v32) = v31;
            uint64_t v33 = v27[2];
            BOOL v34 = __OFADD__(v33, 1);
            uint64_t v35 = v33 + 1;
            if (v34) {
              goto LABEL_45;
            }
            _OWORD v27[2] = v35;
            uint64_t v28 = v27[7];
            swift_bridgeObjectRelease();
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            id v36 = *(id *)(*(void *)(v28 + 8 * v20) + 16);
            objc_msgSend(v36, sel_mutableCopy);
            sub_1D17BE690();
            swift_unknownObjectRelease();
            sub_1D1685604();
            swift_dynamicCast();

            __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
            uint64_t v37 = swift_allocObject();
            *(void *)(v37 + 16) = v49;
            *(void *)(v28 + 8 * v20) = v37;
            swift_release();
          }
          objc_msgSend(*(id *)(*(void *)(v28 + 8 * v20) + 16), sel_subtractIdentifierSet_, *(void *)(v16 + 16));
          uint64_t v38 = *v2;
          if (!*(void *)(*v2 + 16)) {
            goto LABEL_43;
          }
          unint64_t v39 = sub_1D165A8E0(v15);
          if ((v40 & 1) == 0) {
            goto LABEL_44;
          }
          if (objc_msgSend(*(id *)(*(void *)(*(void *)(v38 + 56) + 8 * v39) + 16), sel_isEmpty)
            && (unint64_t v41 = sub_1D165A8E0(v15), (v42 & 1) != 0))
          {
            unint64_t v43 = v41;
            char v44 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v45 = *v2;
            uint64_t v51 = *v2;
            *uint64_t v2 = 0x8000000000000000;
            if ((v44 & 1) == 0)
            {
              sub_1D16A6448();
              uint64_t v45 = v51;
            }
            sub_1D16A8E0C(v43, v45);
            *uint64_t v2 = v45;
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            int64_t v7 = v48;
            if (!v6) {
              goto LABEL_7;
            }
          }
          else
          {
            swift_release();
            int64_t v7 = v48;
            if (!v6) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v8 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
          int64_t v48 = v7;
        }
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      uint64_t v13 = v7 + 4;
      if (v7 + 4 < v47)
      {
        unint64_t v11 = *(void *)(v46 + 8 * v13);
        if (!v11)
        {
          while (1)
          {
            int64_t v12 = v13 + 1;
            if (__OFADD__(v13, 1)) {
              goto LABEL_47;
            }
            if (v12 >= v47) {
              goto LABEL_41;
            }
            unint64_t v11 = *(void *)(v46 + 8 * v12);
            ++v13;
            if (v11) {
              goto LABEL_20;
            }
          }
        }
        int64_t v12 = v7 + 4;
        goto LABEL_20;
      }
    }
LABEL_41:
    swift_release();
    return;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  sub_1D17BEC60();
  __break(1u);
}

unint64_t ElementIdentifierTupleSet.subscript.setter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  unsigned int v6 = objc_msgSend(*(id *)(*a1 + 16), sel_isEmpty);
  char v7 = v6;
  if (!*(void *)(*v2 + 16))
  {
    if (v6)
    {
      return swift_release();
    }
LABEL_12:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1D165E85C(v4, v5, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v17;
    return swift_bridgeObjectRelease();
  }
  sub_1D165A8E0(v5);
  if ((v7 & 1) == 0) {
    goto LABEL_12;
  }
  char v9 = v8;
  unint64_t result = swift_release();
  if (v9)
  {
    unint64_t result = sub_1D165A8E0(v5);
    if (v11)
    {
      unint64_t v12 = result;
      char v13 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v14 = *v3;
      uint64_t v16 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((v13 & 1) == 0)
      {
        sub_1D16A6448();
        uint64_t v14 = v16;
      }
      sub_1D16A8E0C(v12, v14);
      *uint64_t v3 = v14;
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

Swift::Void __swiftcall ElementIdentifierTupleSet.removeTargets(for:)(KnowledgeGraphKit::ElementIdentifier a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1D165A8E0(*(void *)a1.rawValue);
  if (v4)
  {
    unint64_t v5 = v3;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = *v1;
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1D16A6448();
      uint64_t v7 = v8;
    }
    sub_1D16A8E0C(v5, v7);
    *uint64_t v2 = v7;
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t static ElementIdentifierTupleSet.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_1D169FF94(*a1, *a2);
}

uint64_t ElementIdentifierTupleSet.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_1D17BED20();
  swift_bridgeObjectRetain();
  sub_1D16A981C(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1D17BED80();
}

uint64_t ElementIdentifierTupleSet.description.getter()
{
  sub_1D16712E8();
  return sub_1D17BDE60();
}

uint64_t ElementIdentifierTupleSet.targetsBySource.getter()
{
  return swift_bridgeObjectRetain();
}

KnowledgeGraphKit::ElementIdentifierTupleSet __swiftcall ElementIdentifierTupleSet.init(targetsBySource:)(Swift::OpaquePointer targetsBySource)
{
  unint64_t v3 = v1;

  v3->_rawValue = targetsBySource._rawValue;
  return result;
}

void (*ElementIdentifierTupleSet.subscript.modify(void *a1, uint64_t *a2))(void *a1, char a2)
{
  unint64_t v5 = malloc(0x38uLL);
  *a1 = v5;
  uint64_t v6 = *a2;
  v5[4] = v2;
  v5[5] = v6;
  v5[6] = sub_1D169E6D8((uint64_t)v5, v6, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1D169FDA4);
  return sub_1D169FC88;
}

void sub_1D169FC88(void *a1, char a2)
{
  uint64_t v4 = *a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  if (a2) {
    goto LABEL_8;
  }
  uint64_t v5 = **(void **)(v4 + 32);
  if (!*(void *)(v5 + 16))
  {
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v6 = sub_1D165A8E0(*(void *)(v4 + 40));
  if ((v7 & 1) == 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (objc_msgSend(*(id *)(*(void *)(*(void *)(v5 + 56) + 8 * v6) + 16), sel_isEmpty))
  {
    unint64_t v8 = sub_1D165A8E0(*(void *)(v4 + 40));
    if (v9)
    {
      unint64_t v2 = v8;
      int64_t v10 = *(uint64_t **)(v4 + 32);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = *v10;
      uint64_t v14 = *v10;
      *int64_t v10 = 0x8000000000000000;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_7:
        char v13 = *(uint64_t **)(v4 + 32);
        sub_1D16A8E0C(v2, v12);
        *char v13 = v12;
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_8;
      }
LABEL_13:
      sub_1D16A6448();
      uint64_t v12 = v14;
      goto LABEL_7;
    }
  }
LABEL_8:
  free((void *)v4);
}

uint64_t sub_1D169FDA4@<X0>(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *a1 = result;
  return result;
}

uint64_t ElementIdentifierTupleSet.count.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(*v0 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(*v0 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v8 = 0;
  uint64_t v9 = 0;
  do
  {
    if (v5)
    {
      unint64_t v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v11 = v10 | (v8 << 6);
    }
    else
    {
      int64_t v13 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_27;
      }
      if (v13 >= v6)
      {
LABEL_25:
        swift_release();
        swift_bridgeObjectRelease();
        return v9;
      }
      unint64_t v14 = *(void *)(v2 + 8 * v13);
      ++v8;
      if (!v14)
      {
        int64_t v8 = v13 + 1;
        if (v13 + 1 >= v6) {
          goto LABEL_25;
        }
        unint64_t v14 = *(void *)(v2 + 8 * v8);
        if (!v14)
        {
          int64_t v8 = v13 + 2;
          if (v13 + 2 >= v6) {
            goto LABEL_25;
          }
          unint64_t v14 = *(void *)(v2 + 8 * v8);
          if (!v14)
          {
            int64_t v8 = v13 + 3;
            if (v13 + 3 >= v6) {
              goto LABEL_25;
            }
            unint64_t v14 = *(void *)(v2 + 8 * v8);
            if (!v14)
            {
              int64_t v8 = v13 + 4;
              if (v13 + 4 >= v6) {
                goto LABEL_25;
              }
              unint64_t v14 = *(void *)(v2 + 8 * v8);
              if (!v14)
              {
                int64_t v15 = v13 + 5;
                if (v15 >= v6) {
                  goto LABEL_25;
                }
                unint64_t v14 = *(void *)(v2 + 8 * v15);
                if (!v14)
                {
                  while (1)
                  {
                    int64_t v8 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      goto LABEL_28;
                    }
                    if (v8 >= v6) {
                      goto LABEL_25;
                    }
                    unint64_t v14 = *(void *)(v2 + 8 * v8);
                    ++v15;
                    if (v14) {
                      goto LABEL_24;
                    }
                  }
                }
                int64_t v8 = v15;
              }
            }
          }
        }
      }
LABEL_24:
      unint64_t v5 = (v14 - 1) & v14;
      unint64_t v11 = __clz(__rbit64(v14)) + (v8 << 6);
    }
    uint64_t result = (uint64_t)objc_msgSend(*(id *)(*(void *)(*(void *)(v1 + 56) + 8 * v11) + 16), sel_count);
    BOOL v12 = __OFADD__(v9, result);
    v9 += result;
  }
  while (!v12);
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1D169FF94(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    uint64_t v15 = 8 * v11;
    uint64_t v16 = *(void *)(*(void *)(v3 + 56) + v15);
    unint64_t v17 = sub_1D165A8E0(*(void *)(*(void *)(v3 + 48) + v15));
    if (v18)
    {
      char v19 = *(void **)(*(void *)(*(void *)(a2 + 56) + 8 * v17) + 16);
      uint64_t v20 = *(void *)(v16 + 16);
      swift_retain();
      LOBYTE(v19) = objc_msgSend(v19, sel_isEqualToElementIdentifierSet_, v20);
      uint64_t result = swift_release();
      if (v19) {
        continue;
      }
    }
    return 0;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t ElementIdentifierTupleSet.hash(into:)(long long *a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1D16A981C(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D16A0198()
{
  uint64_t v1 = *v0;
  sub_1D17BED20();
  swift_bridgeObjectRetain();
  sub_1D16A981C(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1D17BED80();
}

uint64_t sub_1D16A01F0(long long *a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1D16A981C(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D16A023C()
{
  uint64_t v1 = *v0;
  sub_1D17BED20();
  swift_bridgeObjectRetain();
  sub_1D16A981C(v3, v1);
  swift_bridgeObjectRelease();
  return sub_1D17BED80();
}

uint64_t sub_1D16A0290(uint64_t *a1, uint64_t *a2)
{
  return sub_1D169FF94(*a1, *a2);
}

uint64_t sub_1D16A029C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int64_t v4 = (void *)sub_1D165F754(MEMORY[0x1E4FBC860]);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    id v36 = a2;
    swift_bridgeObjectRetain();
    uint64_t v6 = (uint64_t *)(a1 + 40);
    uint64_t v7 = &off_1E68DD000;
    while (1)
    {
      uint64_t v8 = *(v6 - 1);
      uint64_t v9 = *v6;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v12 = sub_1D165A8E0(v8);
      uint64_t v13 = v4[2];
      BOOL v14 = (v11 & 1) == 0;
      uint64_t v15 = v13 + v14;
      if (__OFADD__(v13, v14)) {
        break;
      }
      char v16 = v11;
      if (v4[3] >= v15)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_1D16A6448();
        }
      }
      else
      {
        sub_1D16A1F40(v15, isUniquelyReferenced_nonNull_native);
        unint64_t v17 = sub_1D165A8E0(v8);
        if ((v16 & 1) != (v18 & 1)) {
          goto LABEL_30;
        }
        unint64_t v12 = v17;
      }
      swift_bridgeObjectRelease();
      if (v16)
      {
        uint64_t v19 = v4[7];
      }
      else
      {
        id v20 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
        swift_bridgeObjectRetain();
        id v21 = objc_msgSend(v20, sel_init);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
        uint64_t v22 = swift_allocObject();
        *(void *)(v22 + 16) = v21;
        v4[(v12 >> 6) + 8] |= 1 << v12;
        uint64_t v23 = 8 * v12;
        *(void *)(v4[6] + v23) = v8;
        *(void *)(v4[7] + v23) = v22;
        uint64_t v24 = v4[2];
        BOOL v25 = __OFADD__(v24, 1);
        uint64_t v26 = v24 + 1;
        if (v25) {
          goto LABEL_29;
        }
        _OWORD v4[2] = v26;
        uint64_t v19 = v4[7];
        swift_bridgeObjectRelease();
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        id v27 = *(id *)(*(void *)(v19 + 8 * v12) + 16);
        objc_msgSend(v27, sel_mutableCopy);
        sub_1D17BE690();
        swift_unknownObjectRelease();
        sub_1D1685604();
        swift_dynamicCast();

        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
        uint64_t v28 = swift_allocObject();
        *(void *)(v28 + 16) = v37;
        *(void *)(v19 + 8 * v12) = v28;
        uint64_t v7 = &off_1E68DD000;
        swift_release();
      }
      id v29 = *(id *)(*(void *)(v19 + 8 * v12) + 16);
      objc_msgSend(v29, (SEL)v7[204], v9);
      objc_msgSend(v29, sel_addIdentifier_, v9);

      if (!v4[2]) {
        goto LABEL_27;
      }
      unint64_t v30 = sub_1D165A8E0(v8);
      if ((v31 & 1) == 0) {
        goto LABEL_28;
      }
      if (objc_msgSend(*(id *)(*(void *)(v4[7] + 8 * v30) + 16), sel_isEmpty))
      {
        unint64_t v32 = sub_1D165A8E0(v8);
        if (v33)
        {
          unint64_t v34 = v32;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1D16A6448();
          }
          sub_1D16A8E0C(v34, (uint64_t)v4);
          swift_release();
          swift_bridgeObjectRelease();
        }
      }
      v6 += 2;
      if (!--v5)
      {
        uint64_t result = swift_bridgeObjectRelease_n();
        a2 = v36;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    uint64_t result = sub_1D17BEC60();
    __break(1u);
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_25:
    *a2 = v4;
  }
  return result;
}

uint64_t ElementIdentifierTupleSet.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int64_t v47 = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness, v9);
  char v11 = (char *)&v43 - v10;
  unint64_t v12 = (void *)sub_1D165F754(MEMORY[0x1E4FBC860]);
  uint64_t v44 = v5;
  uint64_t v45 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a2);
  sub_1D17BE070();
  uint64_t v46 = a2;
  swift_getAssociatedConformanceWitness();
  sub_1D17BE640();
  if (v53)
  {
LABEL_2:
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v11, AssociatedTypeWitness);
    *int64_t v47 = v12;
  }
  else
  {
    uint64_t v14 = (uint64_t)v51;
    uint64_t v15 = v52;
    uint64_t v48 = MEMORY[0x1E4FBC840] + 8;
    uint64_t v49 = v11;
    while (1)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v51 = v12;
      unint64_t v18 = sub_1D165A8E0(v14);
      uint64_t v19 = v12[2];
      BOOL v20 = (v17 & 1) == 0;
      uint64_t v21 = v19 + v20;
      if (__OFADD__(v19, v20)) {
        break;
      }
      char v22 = v17;
      if (v12[3] >= v21)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_1D16A6448();
        }
      }
      else
      {
        sub_1D16A1F40(v21, isUniquelyReferenced_nonNull_native);
        unint64_t v23 = sub_1D165A8E0(v14);
        if ((v22 & 1) != (v24 & 1)) {
          goto LABEL_28;
        }
        unint64_t v18 = v23;
      }
      unint64_t v12 = v51;
      swift_bridgeObjectRelease();
      if (v22)
      {
        uint64_t v25 = v12[7];
      }
      else
      {
        id v26 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
        swift_bridgeObjectRetain();
        id v27 = objc_msgSend(v26, sel_init);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
        uint64_t v28 = swift_allocObject();
        *(void *)(v28 + 16) = v27;
        v12[(v18 >> 6) + 8] |= 1 << v18;
        uint64_t v29 = 8 * v18;
        *(void *)(v12[6] + v29) = v14;
        *(void *)(v12[7] + v29) = v28;
        uint64_t v30 = v12[2];
        BOOL v31 = __OFADD__(v30, 1);
        uint64_t v32 = v30 + 1;
        if (v31) {
          goto LABEL_27;
        }
        v12[2] = v32;
        uint64_t v25 = v12[7];
        swift_bridgeObjectRelease();
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        id v33 = *(id *)(*(void *)(v25 + 8 * v18) + 16);
        objc_msgSend(v33, sel_mutableCopy);
        sub_1D17BE690();
        swift_unknownObjectRelease();
        sub_1D1685604();
        swift_dynamicCast();
        uint64_t v34 = v50;

        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
        uint64_t v35 = swift_allocObject();
        *(void *)(v35 + 16) = v34;
        *(void *)(v25 + 8 * v18) = v35;
        char v11 = v49;
        swift_release();
      }
      id v36 = *(id *)(*(void *)(v25 + 8 * v18) + 16);
      objc_msgSend(v36, sel_containsIdentifier_, v15);
      objc_msgSend(v36, sel_addIdentifier_, v15);

      if (!v12[2]) {
        goto LABEL_25;
      }
      unint64_t v37 = sub_1D165A8E0(v14);
      if ((v38 & 1) == 0) {
        goto LABEL_26;
      }
      if (objc_msgSend(*(id *)(*(void *)(v12[7] + 8 * v37) + 16), sel_isEmpty))
      {
        unint64_t v39 = sub_1D165A8E0(v14);
        if (v40)
        {
          unint64_t v41 = v39;
          int v42 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v51 = v12;
          if (!v42)
          {
            sub_1D16A6448();
            unint64_t v12 = v51;
          }
          sub_1D16A8E0C(v41, (uint64_t)v12);
          swift_release();
          swift_bridgeObjectRelease();
        }
      }
      sub_1D17BE640();
      uint64_t v14 = (uint64_t)v51;
      uint64_t v15 = v52;
      if (v53) {
        goto LABEL_2;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    uint64_t result = sub_1D17BEC60();
    __break(1u);
  }
  return result;
}

uint64_t ElementIdentifierTupleSet.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1D16A029C(a1, &v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1D16A0B34@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1D16A029C(a1, &v4);
  *a2 = v4;
  return result;
}

KnowledgeGraphKit::ElementIdentifierTupleSet __swiftcall ElementIdentifierTupleSet.intersection(_:)(KnowledgeGraphKit::ElementIdentifierTupleSet a1)
{
  return (KnowledgeGraphKit::ElementIdentifierTupleSet)sub_1D16A0B84((uint64_t *)a1.targetsBySource._rawValue, (uint64_t (*)(uint64_t *))ElementIdentifierTupleSet.formIntersection(_:), v1);
}

uint64_t sub_1D16A0B84@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t *)@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  *a3 = *v3;
  uint64_t v6 = v4;
  return a2(&v6);
}

Swift::Void __swiftcall ElementIdentifierTupleSet.formIntersection(_:)(KnowledgeGraphKit::ElementIdentifierTupleSet a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)a1.targetsBySource._rawValue;
  if (*(void *)(*(void *)a1.targetsBySource._rawValue + 16) >= *(void *)(*v1 + 16))
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    sub_1D165E5B8(v4, v49);
    uint64_t v5 = v49[0];
    uint64_t v6 = *(void **)(v49[0] + 16);
    swift_retain();
    id v7 = objc_msgSend(v6, sel_startIndex);
    uint64_t v9 = v8;
    if (v7 == objc_msgSend(*(id *)(v5 + 16), sel_endIndex))
    {
LABEL_4:
      swift_release_n();
    }
    else
    {
      for (id i = objc_msgSend(*(id *)(v5 + 16), sel_indexAfterIndex_, v7, v9, MEMORY[0x1E4FBC840] + 8);
            ;
            id i = objc_msgSend(*(id *)(v5 + 16), sel_indexAfterIndex_, v46, v47, v45))
      {
        id v46 = i;
        uint64_t v47 = v11;
        if (*(void *)(v3 + 16) && (unint64_t v12 = sub_1D165A8E0((uint64_t)v7), (v13 & 1) != 0))
        {
          uint64_t v14 = *(void *)(*(void *)(v3 + 56) + 8 * v12);
          swift_retain();
        }
        else
        {
          id v15 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
          uint64_t v14 = swift_allocObject();
          *(void *)(v14 + 16) = v15;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v49[0] = *v2;
        uint64_t v17 = v49[0];
        *uint64_t v2 = 0x8000000000000000;
        unint64_t v19 = sub_1D165A8E0((uint64_t)v7);
        uint64_t v20 = *(void *)(v17 + 16);
        BOOL v21 = (v18 & 1) == 0;
        uint64_t v22 = v20 + v21;
        if (__OFADD__(v20, v21)) {
          break;
        }
        char v23 = v18;
        if (*(void *)(v17 + 24) >= v22)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1D16A6448();
            uint64_t v17 = v49[0];
          }
        }
        else
        {
          sub_1D16A1F40(v22, isUniquelyReferenced_nonNull_native);
          uint64_t v17 = v49[0];
          unint64_t v24 = sub_1D165A8E0((uint64_t)v7);
          if ((v23 & 1) != (v25 & 1)) {
            goto LABEL_35;
          }
          unint64_t v19 = v24;
        }
        *uint64_t v2 = v17;
        swift_bridgeObjectRelease();
        id v26 = (void *)*v2;
        if (v23)
        {
          uint64_t v27 = v26[7];
        }
        else
        {
          id v28 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
          swift_bridgeObjectRetain();
          id v29 = objc_msgSend(v28, sel_init);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
          uint64_t v30 = swift_allocObject();
          *(void *)(v30 + 16) = v29;
          v26[(v19 >> 6) + 8] |= 1 << v19;
          uint64_t v31 = 8 * v19;
          *(void *)(v26[6] + v31) = v7;
          *(void *)(v26[7] + v31) = v30;
          uint64_t v32 = v26[2];
          BOOL v33 = __OFADD__(v32, 1);
          uint64_t v34 = v32 + 1;
          if (v33) {
            goto LABEL_34;
          }
          v26[2] = v34;
          uint64_t v27 = v26[7];
          swift_bridgeObjectRelease();
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          id v35 = *(id *)(*(void *)(v27 + 8 * v19) + 16);
          objc_msgSend(v35, sel_mutableCopy);
          sub_1D17BE690();
          swift_unknownObjectRelease();
          sub_1D1685604();
          swift_dynamicCast();

          __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
          uint64_t v36 = swift_allocObject();
          *(void *)(v36 + 16) = v48;
          *(void *)(v27 + 8 * v19) = v36;
          swift_release();
        }
        objc_msgSend(*(id *)(*(void *)(v27 + 8 * v19) + 16), sel_intersectWithIdentifierSet_, *(void *)(v14 + 16));
        swift_release();
        uint64_t v37 = *v2;
        if (!*(void *)(*v2 + 16)) {
          goto LABEL_32;
        }
        unint64_t v38 = sub_1D165A8E0((uint64_t)v7);
        if ((v39 & 1) == 0) {
          goto LABEL_33;
        }
        if (objc_msgSend(*(id *)(*(void *)(*(void *)(v37 + 56) + 8 * v38) + 16), sel_isEmpty))
        {
          unint64_t v40 = sub_1D165A8E0((uint64_t)v7);
          if (v41)
          {
            unint64_t v42 = v40;
            int v43 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v44 = *v2;
            v49[0] = *v2;
            *uint64_t v2 = 0x8000000000000000;
            if (!v43)
            {
              sub_1D16A6448();
              uint64_t v44 = v49[0];
            }
            sub_1D16A8E0C(v42, v44);
            *uint64_t v2 = v44;
            swift_release();
            swift_bridgeObjectRelease();
          }
        }
        id v7 = v46;
        if (v46 == objc_msgSend(*(id *)(v5 + 16), sel_endIndex)) {
          goto LABEL_4;
        }
      }
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      sub_1D17BEC60();
      __break(1u);
    }
  }
  else
  {
    uint64_t v48 = *v1;
    v49[0] = v3;
    swift_bridgeObjectRetain();
    ElementIdentifierTupleSet.formIntersection(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)&v48);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v49[0];
  }
}

uint64_t ElementIdentifierTupleSet.symmetricDifference(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1D16A0B84(a1, ElementIdentifierTupleSet.formSymmetricDifference(_:), a2);
}

uint64_t ElementIdentifierTupleSet.formSymmetricDifference(_:)(uint64_t *a1)
{
  return sub_1D16A106C(a1, (uint64_t (*)(uint64_t *))ElementIdentifierTupleSet.formSymmetricDifference(_:), (SEL *)&selRef_formSymmetricDifferenceWithIdentifierSet_);
}

uint64_t sub_1D16A106C(uint64_t *a1, uint64_t (*a2)(uint64_t *), SEL *a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *a1;
  if (*(void *)(*v3 + 16) >= *(void *)(*a1 + 16))
  {
    int64_t v8 = 0;
    uint64_t v50 = v5 + 64;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v10 = -1;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v51 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v49 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      if (v11)
      {
        uint64_t v52 = (v11 - 1) & v11;
        int64_t v53 = v8;
        unint64_t v12 = __clz(__rbit64(v11)) | (v8 << 6);
      }
      else
      {
        int64_t v13 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_48;
        }
        if (v13 >= v51) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v50 + 8 * v13);
        int64_t v15 = v8 + 1;
        if (!v14)
        {
          int64_t v15 = v8 + 2;
          if (v8 + 2 >= v51) {
            return swift_release();
          }
          unint64_t v14 = *(void *)(v50 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v8 + 3;
            if (v8 + 3 >= v51) {
              return swift_release();
            }
            unint64_t v14 = *(void *)(v50 + 8 * v15);
            if (!v14)
            {
              uint64_t v16 = v8 + 4;
              if (v8 + 4 >= v51) {
                return swift_release();
              }
              unint64_t v14 = *(void *)(v50 + 8 * v16);
              if (!v14)
              {
                while (1)
                {
                  int64_t v15 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_49;
                  }
                  if (v15 >= v51) {
                    return swift_release();
                  }
                  unint64_t v14 = *(void *)(v50 + 8 * v15);
                  ++v16;
                  if (v14) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v15 = v8 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v52 = (v14 - 1) & v14;
        int64_t v53 = v15;
        unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
      }
      uint64_t v17 = 8 * v12;
      uint64_t v18 = *(void *)(*(void *)(v5 + 48) + v17);
      uint64_t v19 = *(void *)(*(void *)(v5 + 56) + v17);
      swift_retain_n();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v55 = (void *)*v4;
      BOOL v21 = v55;
      *uint64_t v4 = 0x8000000000000000;
      unint64_t v23 = sub_1D165A8E0(v18);
      uint64_t v24 = v21[2];
      BOOL v25 = (v22 & 1) == 0;
      uint64_t v26 = v24 + v25;
      if (__OFADD__(v24, v25)) {
        break;
      }
      char v27 = v22;
      if (v21[3] >= v26)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1D16A6448();
          BOOL v21 = v55;
        }
      }
      else
      {
        sub_1D16A1F40(v26, isUniquelyReferenced_nonNull_native);
        BOOL v21 = v55;
        unint64_t v28 = sub_1D165A8E0(v18);
        if ((v27 & 1) != (v29 & 1)) {
          goto LABEL_50;
        }
        unint64_t v23 = v28;
      }
      *uint64_t v4 = (uint64_t)v21;
      swift_bridgeObjectRelease();
      uint64_t v30 = (void *)*v4;
      if (v27)
      {
        uint64_t v31 = v30[7];
      }
      else
      {
        id v32 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
        swift_bridgeObjectRetain();
        id v33 = objc_msgSend(v32, sel_init);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
        uint64_t v34 = swift_allocObject();
        *(void *)(v34 + 16) = v33;
        v30[(v23 >> 6) + 8] |= 1 << v23;
        uint64_t v35 = 8 * v23;
        *(void *)(v30[6] + v35) = v18;
        *(void *)(v30[7] + v35) = v34;
        uint64_t v36 = v30[2];
        BOOL v37 = __OFADD__(v36, 1);
        uint64_t v38 = v36 + 1;
        if (v37) {
          goto LABEL_47;
        }
        void v30[2] = v38;
        uint64_t v31 = v30[7];
        swift_bridgeObjectRelease();
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        id v39 = *(id *)(*(void *)(v31 + 8 * v23) + 16);
        objc_msgSend(v39, sel_mutableCopy);
        sub_1D17BE690();
        swift_unknownObjectRelease();
        sub_1D1685604();
        swift_dynamicCast();

        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
        uint64_t v40 = swift_allocObject();
        *(void *)(v40 + 16) = v54;
        *(void *)(v31 + 8 * v23) = v40;
        swift_release();
      }
      objc_msgSend(*(id *)(*(void *)(v31 + 8 * v23) + 16), *a3, *(void *)(v19 + 16), v49);
      swift_release();
      uint64_t v41 = *v4;
      if (!*(void *)(*v4 + 16)) {
        goto LABEL_45;
      }
      unint64_t v42 = sub_1D165A8E0(v18);
      if ((v43 & 1) == 0) {
        goto LABEL_46;
      }
      if (objc_msgSend(*(id *)(*(void *)(*(void *)(v41 + 56) + 8 * v42) + 16), sel_isEmpty)
        && (unint64_t v44 = sub_1D165A8E0(v18), (v45 & 1) != 0))
      {
        unint64_t v46 = v44;
        char v47 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v48 = *v4;
        uint64_t v55 = (void *)*v4;
        *uint64_t v4 = 0x8000000000000000;
        if ((v47 & 1) == 0)
        {
          sub_1D16A6448();
          uint64_t v48 = (uint64_t)v55;
        }
        sub_1D16A8E0C(v46, v48);
        *uint64_t v4 = v48;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
      unint64_t v11 = v52;
      int64_t v8 = v53;
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    uint64_t result = sub_1D17BEC60();
    __break(1u);
  }
  else
  {
    uint64_t v54 = *v3;
    uint64_t v55 = (void *)v5;
    uint64_t result = a2(&v54);
    *uint64_t v3 = (uint64_t)v55;
  }
  return result;
}

unint64_t ElementIdentifierTupleSet.update(with:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  uint64_t v7 = *a1;
  uint64_t v8 = *a2;
  uint64_t v9 = *v3;
  if (*(void *)(v9 + 16) && (unint64_t v10 = sub_1D165A8E0(*a1), (v11 & 1) != 0)) {
    unsigned int v12 = objc_msgSend(*(id *)(*(void *)(*(void *)(v9 + 56) + 8 * v10) + 16), sel_containsIdentifier_, v8);
  }
  else {
    unsigned int v12 = 0;
  }
  uint64_t v40 = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v41 = (void *)*v5;
  uint64_t v14 = (uint64_t)v41;
  *uint64_t v5 = 0x8000000000000000;
  unint64_t v16 = sub_1D165A8E0(v7);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_28;
  }
  LOBYTE(v4) = v15;
  if (*(void *)(v14 + 24) < v19)
  {
    sub_1D16A1F40(v19, isUniquelyReferenced_nonNull_native);
    uint64_t v14 = (uint64_t)v41;
    unint64_t v20 = sub_1D165A8E0(v7);
    if ((v4 & 1) == (v21 & 1))
    {
      unint64_t v16 = v20;
      goto LABEL_10;
    }
    unint64_t result = sub_1D17BEC60();
    __break(1u);
    return result;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_30;
  }
  while (1)
  {
LABEL_10:
    *uint64_t v5 = v14;
    swift_bridgeObjectRelease();
    char v22 = (void *)*v5;
    if (v4)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      id v23 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
      swift_bridgeObjectRetain();
      id v24 = objc_msgSend(v23, sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = v24;
      v22[(v16 >> 6) + 8] |= 1 << v16;
      uint64_t v26 = 8 * v16;
      *(void *)(v22[6] + v26) = v7;
      *(void *)(v22[7] + v26) = v25;
      uint64_t v27 = v22[2];
      BOOL v28 = __OFADD__(v27, 1);
      uint64_t v29 = v27 + 1;
      if (v28)
      {
        __break(1u);
        goto LABEL_32;
      }
      _OWORD v22[2] = v29;
    }
    uint64_t v4 = v22[7];
    swift_bridgeObjectRelease();
    ElementIdentifierSet.insert(_:)((uint64_t *)&v41, &v40);
    uint64_t v30 = *v5;
    if (!*(void *)(*v5 + 16))
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    unint64_t v31 = sub_1D165A8E0(v7);
    if (v32) {
      break;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    sub_1D16A6448();
    uint64_t v14 = (uint64_t)v41;
  }
  unint64_t result = (unint64_t)objc_msgSend(*(id *)(*(void *)(*(void *)(v30 + 56) + 8 * v31) + 16), sel_isEmpty);
  if (result)
  {
    unint64_t result = sub_1D165A8E0(v7);
    if (v34)
    {
      unint64_t v16 = result;
      char v35 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v36 = *v5;
      uint64_t v39 = *v5;
      *uint64_t v5 = 0x8000000000000000;
      if (v35)
      {
LABEL_19:
        sub_1D16A8E0C(v16, v36);
        *uint64_t v5 = v36;
        swift_release();
        unint64_t result = swift_bridgeObjectRelease();
        goto LABEL_20;
      }
LABEL_32:
      sub_1D16A6448();
      uint64_t v36 = v39;
      goto LABEL_19;
    }
  }
LABEL_20:
  if (v12) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = v7;
  }
  if (v12) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = v8;
  }
  *(void *)a3 = v37;
  *(void *)(a3 + 8) = v38;
  *(unsigned char *)(a3 + 16) = v12;
  return result;
}

Swift::Bool __swiftcall ElementIdentifierTupleSet.intersects(_:)(KnowledgeGraphKit::ElementIdentifierTupleSet a1)
{
  unint64_t v2 = *(void *)(*v1 + 16);
  unint64_t v3 = *(void *)(*(void *)a1.targetsBySource._rawValue + 16);
  if (v2 >= v3) {
    uint64_t v4 = *(void *)a1.targetsBySource._rawValue;
  }
  else {
    uint64_t v4 = *v1;
  }
  if (v2 >= v3) {
    uint64_t v5 = *v1;
  }
  else {
    uint64_t v5 = *(void *)a1.targetsBySource._rawValue;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = v4 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(v4 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  Swift::Bool result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v16 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v17 = v16 | (v12 << 6);
      goto LABEL_28;
    }
    int64_t v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v18 >= v10) {
      goto LABEL_32;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v12;
    if (!v19)
    {
      int64_t v12 = v18 + 1;
      if (v18 + 1 >= v10) {
        goto LABEL_32;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v12);
      if (!v19)
      {
        int64_t v12 = v18 + 2;
        if (v18 + 2 >= v10) {
          goto LABEL_32;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v12);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v9 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_28:
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v17);
    if (*(void *)(v5 + 16) && (unint64_t v22 = sub_1D165A8E0(*(void *)(*(void *)(v4 + 48) + 8 * v17)), (v23 & 1) != 0))
    {
      id v14 = *(id *)(*(void *)(*(void *)(v5 + 56) + 8 * v22) + 16);
      swift_retain();
      swift_retain();
    }
    else
    {
      id v13 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
      swift_retain();
      id v14 = objc_msgSend(v13, sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
      *(void *)(swift_allocObject() + 16) = v14;
    }
    unsigned __int8 v15 = objc_msgSend(v14, sel_intersectsIdentifierSet_, *(void *)(v21 + 16));
    swift_release();
    Swift::Bool result = swift_release();
    if (v15)
    {
      swift_bridgeObjectRelease();
      Swift::Bool v24 = 1;
LABEL_33:
      swift_release();
      return v24;
    }
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v10)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    Swift::Bool v24 = 0;
    goto LABEL_33;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v12 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v12 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_32;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v12);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall ElementIdentifierTupleSet.isDisjoint(with:)(KnowledgeGraphKit::ElementIdentifierTupleSet with)
{
  uint64_t v2 = *v1;
  v4[0] = *(void *)with.targetsBySource._rawValue;
  v4[1] = v2;
  return !ElementIdentifierTupleSet.intersects(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)v4);
}

unint64_t sub_1D16A1A58@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1D165F754(MEMORY[0x1E4FBC860]);
  *a1 = result;
  return result;
}

BOOL sub_1D16A1A88(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  return ElementIdentifierTupleSet.contains(_:)(*(Swift::tuple_KnowledgeGraphKit_ElementIdentifier_KnowledgeGraphKit_ElementIdentifier *)&a1);
}

uint64_t sub_1D16A1A90@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1D16A1AC0(a1, ElementIdentifierTupleSet.formUnion(_:), a2);
}

uint64_t sub_1D16A1AA8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1D16A1AC0(a1, (uint64_t (*)(uint64_t *))ElementIdentifierTupleSet.formIntersection(_:), a2);
}

uint64_t sub_1D16A1AC0@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t *)@<X3>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  *a3 = *v3;
  uint64_t v6 = v4;
  return a2(&v6);
}

uint64_t sub_1D16A1B04@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1D16A1AC0(a1, ElementIdentifierTupleSet.formSymmetricDifference(_:), a2);
}

uint64_t sub_1D16A1B1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v2;
  return ElementIdentifierTupleSet.insert(_:)(a1, a1 + 1, &v5, &v4) & 1;
}

unint64_t sub_1D16A1B54(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  return (unint64_t)ElementIdentifierTupleSet.remove(_:)(*(Swift::tuple_KnowledgeGraphKit_ElementIdentifier_KnowledgeGraphKit_ElementIdentifier *)&a1);
}

unint64_t sub_1D16A1B5C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = v2;
  return ElementIdentifierTupleSet.update(with:)(&v5, &v4, a2);
}

uint64_t sub_1D16A1B98@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1D16A1AC0(a1, (uint64_t (*)(uint64_t *))ElementIdentifierTupleSet.subtract(_:), a2);
}

uint64_t sub_1D16A1BB0(uint64_t *a1)
{
  uint64_t v2 = *v1;
  uint64_t v4 = *a1;
  uint64_t v5 = v2;
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.formIntersection(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)&v4);
  LOBYTE(v2) = sub_1D169FF94(v5, v2);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

BOOL sub_1D16A1C14(void *a1)
{
  uint64_t v2 = *v1;
  v4[0] = *a1;
  v4[1] = v2;
  return !ElementIdentifierTupleSet.intersects(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)v4);
}

uint64_t sub_1D16A1C58(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *v1;
  uint64_t v5 = v2;
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.formIntersection(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)&v4);
  LOBYTE(v2) = sub_1D169FF94(v5, v2);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1D16A1CBC()
{
  uint64_t v1 = *v0;
  unint64_t v2 = sub_1D165F754(MEMORY[0x1E4FBC860]);
  LOBYTE(v1) = sub_1D169FF94(v1, v2);
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t sub_1D16A1D10()
{
  sub_1D16712E8();
  return sub_1D17BDE60();
}

uint64_t ElementIdentifierTupleSet.sparseMatrix<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v11 = *v5;
  uint64_t v12 = swift_bridgeObjectRetain();
  sub_1D165E5B8(v12, &v21);
  uint64_t v13 = sub_1D16A99D0((uint64_t)objc_msgSend(*(id *)(v21 + 16), sel_count), v21);
  swift_release();
  uint64_t v14 = swift_bridgeObjectRetain();
  sub_1D165E5B8(v14, &v21);
  _OWORD v20[2] = a2;
  v20[3] = a3;
  void v20[4] = a4;
  v20[5] = v11;
  v20[6] = a1;
  uint64_t v15 = type metadata accessor for SparseArray();
  unint64_t v16 = sub_1D16A9B64();
  uint64_t v18 = sub_1D169A4DC((void (*)(char *, char *))sub_1D16A9B3C, (uint64_t)v20, (uint64_t)&type metadata for ElementIdentifierSet, v15, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v17);
  swift_release();
  swift_getWitnessTable();
  return SparseArray.init(values:offsets:)(v18, v13, v15, a5);
}

uint64_t *sub_1D16A1EA8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t result = (uint64_t *)sub_1D165A8E0(*result);
    if (v10) {
      return (uint64_t *)ElementIdentifierSet.sparseArray<A>(of:)(a3, a4, a5, a6);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D16A1F40(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27530);
  uint64_t result = sub_1D17BEB00();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v32 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v31 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v31) {
          goto LABEL_33;
        }
        unint64_t v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v21 = v32[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *char v32 = -1 << v30;
              }
              unint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v21 = v32[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = 8 * v19;
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + v27);
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      sub_1D17BED20();
      sub_1D17BED30();
      uint64_t result = sub_1D17BED80();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A221C(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EBD27468);
  uint64_t result = sub_1D17BEB00();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v32 = a2;
    int64_t v8 = 0;
    id v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v18 >= v12) {
          goto LABEL_31;
        }
        unint64_t v19 = v33[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v19 = v33[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v12)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *id v33 = -1 << v31;
              }
              unint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                unint64_t v19 = v33[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = 8 * v17;
      uint64_t v22 = *(void *)(*(void *)(v5 + 48) + v21);
      uint64_t v23 = *(void *)(*(void *)(v5 + 56) + v21);
      sub_1D17BED20();
      sub_1D17BED30();
      uint64_t result = sub_1D17BED80();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = 8 * v14;
      *(void *)(*(void *)(v7 + 48) + v15) = v22;
      *(void *)(*(void *)(v7 + 56) + v15) = v23;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A24EC(uint64_t a1, int a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = sub_1D17BDD40();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652020);
  int v48 = a2;
  uint64_t v11 = sub_1D17BEB00();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  uint64_t v50 = v9;
  uint64_t v51 = v5;
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  unint64_t v44 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  unint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v13 + 63) >> 6;
  char v45 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v49 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  uint64_t v46 = v6;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v43) {
      break;
    }
    unint64_t v25 = v44;
    unint64_t v26 = v44[v24];
    ++v19;
    if (!v26)
    {
      int64_t v19 = v24 + 1;
      if (v24 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v26 = v44[v19];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v43)
        {
LABEL_34:
          swift_release();
          unint64_t v3 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v44[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v19 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v43) {
              goto LABEL_34;
            }
            unint64_t v26 = v44[v19];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v6 + 72);
    unint64_t v29 = *(void *)(v10 + 48) + v28 * v23;
    if (v48)
    {
      (*v49)(v50, v29, v51);
      uint64_t v30 = (uint64_t *)(*(void *)(v10 + 56) + 16 * v23);
      uint64_t v32 = *v30;
      uint64_t v31 = v30[1];
    }
    else
    {
      (*v45)(v50, v29, v51);
      id v33 = (uint64_t *)(*(void *)(v10 + 56) + 16 * v23);
      uint64_t v32 = *v33;
      uint64_t v31 = v33[1];
      swift_retain();
    }
    sub_1D16A9D18();
    uint64_t result = sub_1D17BDF00();
    uint64_t v34 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v17 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v35) & ~*(void *)(v17 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v17 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v20 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v49)(*(void *)(v12 + 48) + v28 * v20, v50, v51);
    uint64_t v21 = (void *)(*(void *)(v12 + 56) + 16 * v20);
    *uint64_t v21 = v32;
    v21[1] = v31;
    ++*(void *)(v12 + 16);
    uint64_t v6 = v46;
  }
  swift_release();
  unint64_t v3 = v42;
  unint64_t v25 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v10 + 32);
  if (v41 >= 64) {
    bzero(v25, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v41;
  }
  *(void *)(v10 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *unint64_t v3 = v12;
  return result;
}

uint64_t sub_1D16A28F8(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D40);
  uint64_t v6 = sub_1D17BEB00();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    unint64_t v35 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v15 << 6);
      }
      else
      {
        int64_t v23 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v23 >= v12) {
          goto LABEL_33;
        }
        unint64_t v24 = v9[v23];
        ++v15;
        if (!v24)
        {
          int64_t v15 = v23 + 1;
          if (v23 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v24 = v9[v15];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v12)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v35;
                goto LABEL_40;
              }
              uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
              if (v34 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v34;
              }
              unint64_t v3 = v35;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v24 = v9[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v15 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_42;
                }
                if (v15 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v24 = v9[v15];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v15 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v15 << 6);
      }
      uint64_t v30 = 8 * v22;
      uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
      if ((a2 & 1) == 0) {
        id v33 = v31;
      }
      uint64_t result = sub_1D17BE5B0();
      uint64_t v16 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v28 = v18 == v27;
          if (v18 == v27) {
            unint64_t v18 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v13 + 8 * v18);
        }
        while (v29 == -1);
        unint64_t v19 = __clz(__rbit64(~v29)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t v20 = 8 * v19;
      *(void *)(*(void *)(v7 + 48) + v20) = v31;
      *(void *)(*(void *)(v7 + 56) + v20) = v32;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A2BC8(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA651FE0);
  uint64_t v6 = sub_1D17BEB00();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_1D16607C4((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_1D165C164(v25, (uint64_t)&v38);
      sub_1D1668120(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = sub_1D17BE7E0();
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_1D16607C4(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A2EE0(uint64_t a1, char a2)
{
  return sub_1D16A58AC(a1, a2, (uint64_t *)&unk_1EA6515F0);
}

uint64_t sub_1D16A2EEC(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652050);
  char v36 = a2;
  uint64_t v6 = sub_1D17BEB00();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v2;
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v35 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v34;
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v35 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void *)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((v36 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    sub_1D17BED20();
    (*(void (**)(char *))(*(void *)v31 + 272))(v37);
    uint64_t result = sub_1D17BED80();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v34;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A3218(uint64_t a1, char a2)
{
  return sub_1D16A3EE4(a1, a2, &qword_1EA652038);
}

uint64_t sub_1D16A3224(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651600);
  char v42 = a2;
  uint64_t v6 = sub_1D17BEB00();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v40 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  long long v38 = v2;
  int64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39) {
      break;
    }
    unint64_t v23 = v40;
    unint64_t v24 = v40[v22];
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v39) {
        goto LABEL_33;
      }
      unint64_t v24 = v40[v13];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v38;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v39) {
              goto LABEL_33;
            }
            unint64_t v24 = v40[v13];
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 48 * v21;
    uint64_t v34 = *(void *)v33;
    long long v44 = *(_OWORD *)(v33 + 8);
    char v43 = *(unsigned char *)(v33 + 24);
    uint64_t v35 = *(void *)(v33 + 32);
    uint64_t v36 = *(void *)(v33 + 40);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1D1660A34(v35);
    }
    sub_1D17BED20();
    sub_1D17BE020();
    uint64_t result = sub_1D17BED80();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v32;
    v18[1] = v31;
    uint64_t v19 = *(void *)(v7 + 56) + 48 * v17;
    *(void *)uint64_t v19 = v34;
    *(_OWORD *)(v19 + 8) = v44;
    *(unsigned char *)(v19 + 24) = v43;
    *(void *)(v19 + 32) = v35;
    *(void *)(v19 + 40) = v36;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v38;
  unint64_t v23 = v40;
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A3598(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651FF8);
  uint64_t v6 = sub_1D17BEB00();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v31 = v2;
  uint64_t v32 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v32 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v32 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v31;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v32 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v32 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_31:
    uint64_t v29 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
    long long v33 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
    if ((a2 & 1) == 0)
    {
      swift_retain();
      swift_retain();
    }
    sub_1D17BED20();
    (*(void (**)(char *))(*(void *)v29 + 272))(v34);
    uint64_t result = sub_1D17BED80();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v17 == v26;
        if (v17 == v26) {
          unint64_t v17 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v17);
      }
      while (v28 == -1);
      unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v29;
    *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v31;
  int64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
  if (v30 >= 64) {
    bzero(v22, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v30;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A38B8(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651AB8);
  uint64_t v6 = sub_1D17BEB00();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v36 = v2;
  int64_t v37 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v20 >= v37) {
      break;
    }
    int64_t v21 = (void *)(v5 + 64);
    unint64_t v22 = *(void *)(v38 + 8 * v20);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_34;
      }
      unint64_t v22 = *(void *)(v38 + 8 * v13);
      if (!v22)
      {
        int64_t v23 = v20 + 2;
        if (v23 >= v37)
        {
LABEL_34:
          swift_release();
          unint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v22 = *(void *)(v38 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            int64_t v13 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v37) {
              goto LABEL_34;
            }
            unint64_t v22 = *(void *)(v38 + 8 * v13);
            ++v23;
            if (v22) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v23;
      }
    }
LABEL_21:
    unint64_t v10 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_22:
    uint64_t v24 = *(void *)(v5 + 48) + 40 * v19;
    if (a2)
    {
      long long v25 = *(_OWORD *)v24;
      long long v26 = *(_OWORD *)(v24 + 16);
      uint64_t v41 = *(void *)(v24 + 32);
      long long v39 = v25;
      long long v40 = v26;
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    }
    else
    {
      sub_1D165C164(v24, (uint64_t)&v39);
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      swift_bridgeObjectRetain();
    }
    uint64_t result = sub_1D17BE7E0();
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v11 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = *(void *)(v7 + 48) + 40 * v14;
    long long v16 = v39;
    long long v17 = v40;
    *(void *)(v15 + 32) = v41;
    *(_OWORD *)uint64_t v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    *(void *)(*(void *)(v7 + 56) + 8 * v14) = v27;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v36;
  int64_t v21 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v21, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v21 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A3BCC(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652048);
  char v37 = a2;
  uint64_t v6 = sub_1D17BEB00();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_1D17BED20();
    sub_1D17BE020();
    uint64_t result = sub_1D17BED80();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A3ED8(uint64_t a1, char a2)
{
  return sub_1D16A3EE4(a1, a2, &qword_1EA652040);
}

uint64_t sub_1D16A3EE4(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v7 = sub_1D17BEB00();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v3;
  uint64_t v37 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12) {
      break;
    }
    int64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v15 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    uint64_t v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v6 + 48) + v31);
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + v31);
    if ((a2 & 1) == 0) {
      id v34 = v32;
    }
    uint64_t result = sub_1D17BE5B0();
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v36;
  int64_t v24 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_1D16A41B0(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652030);
  uint64_t result = sub_1D17BEB00();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    id v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              unint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = sub_1D17BED10();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A4458(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651FD0);
  uint64_t v6 = sub_1D17BEB00();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
    }
    else
    {
      sub_1D165C164(v25, (uint64_t)&v38);
    }
    uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    uint64_t result = sub_1D17BE7E0();
    uint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      unint64_t v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    *(void *)(*(void *)(v7 + 56) + 8 * v15) = v28;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A4758(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652028);
  uint64_t result = sub_1D17BEB00();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    unint64_t v31 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_34;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_34;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v31;
                goto LABEL_41;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v30;
              }
              unint64_t v3 = v31;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v13) {
                  goto LABEL_34;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      uint64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2) {
        sub_1D16607C4(v22, v32);
      }
      else {
        sub_1D1668120((uint64_t)v22, (uint64_t)v32);
      }
      uint64_t result = sub_1D17BED10();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      uint64_t result = (uint64_t)sub_1D16607C4(v32, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A4A1C(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652000);
  uint64_t result = sub_1D17BEB00();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    BOOL v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              unint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = sub_1D17BED10();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A4CC8(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD272E0);
  char v36 = a2;
  uint64_t v6 = sub_1D17BEB00();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1D17BED20();
    sub_1D17BE020();
    uint64_t result = sub_1D17BED80();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A4FE0(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD272E8);
  char v37 = a2;
  uint64_t v6 = sub_1D17BEB00();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    int v33 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_1D17BED20();
    sub_1D17BE020();
    uint64_t result = sub_1D17BED80();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(_DWORD *)(*(void *)(v7 + 56) + 4 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A52E8(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651560);
  uint64_t v6 = sub_1D17BEB00();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              unint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      unint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_1D16607C4(v24, v35);
      }
      else
      {
        sub_1D1668120((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_1D17BED20();
      sub_1D17BE020();
      uint64_t result = sub_1D17BED80();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      void *v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_1D16607C4(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A55E8(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652010);
  uint64_t result = sub_1D17BEB00();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  *uint64_t v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = sub_1D17BED10();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A58A0(uint64_t a1, char a2)
{
  return sub_1D16A58AC(a1, a2, &qword_1EA651FF0);
}

uint64_t sub_1D16A58AC(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v7 = sub_1D17BEB00();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v3;
  uint64_t v37 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12) {
      break;
    }
    char v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v15 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    uint64_t v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v6 + 48) + v31);
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      id v34 = v32;
      swift_bridgeObjectRetain();
    }
    uint64_t result = sub_1D17BE5B0();
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v36;
  char v24 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_1D16A5B80(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA6515E0);
  char v36 = a2;
  uint64_t v6 = sub_1D17BEB00();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    sub_1D17BED20();
    sub_1D17BE020();
    uint64_t result = sub_1D17BED80();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1D16A5E98(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651FD8);
  uint64_t result = sub_1D17BEB00();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v33 = -1 << v31;
              }
              unint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = 8 * v19;
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + v27);
      BOOL v29 = *(void **)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        id v30 = v29;
      }
      sub_1D17BED20();
      sub_1D17BED30();
      uint64_t result = sub_1D17BED80();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *unint64_t v3 = v7;
  return result;
}

unint64_t sub_1D16A616C(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

uint64_t sub_1D16A61B4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = sub_1D17BDD40();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

_OWORD *sub_1D16A6274(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_1D16607C4(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

unint64_t sub_1D16A62F0(unint64_t result, uint64_t a2, void *a3, double a4)
{
  a3[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a3[6] + v4) = a2;
  *(double *)(a3[7] + v4) = a4;
  uint64_t v5 = a3[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a3[2] = v7;
  }
  return result;
}

unint64_t sub_1D16A633C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_1D16A6384(unint64_t result, uint64_t a2, void *a3, double a4)
{
  a3[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = a3[6] + 40 * result;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(void *)(v4 + 32) = *(void *)(a2 + 32);
  *(double *)(a3[7] + 8 * result) = a4;
  uint64_t v6 = a3[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a3[2] = v8;
  }
  return result;
}

_OWORD *sub_1D16A63DC(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1D16607C4(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_1D16A6448()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27530);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A65EC()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EBD27468);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A677C()
{
  uint64_t v39 = sub_1D17BDD40();
  uint64_t v1 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39, v2);
  long long v38 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652020);
  uint64_t v33 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = sub_1D17BEAF0();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v41 = v5;
  if (!v6)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v31 = v41;
    id v30 = v33;
LABEL_25:
    *id v30 = v31;
    return result;
  }
  uint64_t v7 = v5;
  uint64_t result = (void *)(v5 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    uint64_t v7 = v41;
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v40 = v4;
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v34 = v4 + 64;
  int64_t v35 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v36 = v1 + 32;
  uint64_t v37 = v1 + 16;
  unint64_t v15 = v38;
  uint64_t v14 = v39;
  uint64_t v16 = v41;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v18 = v17 | (v10 << 6);
      uint64_t v19 = v40;
      goto LABEL_9;
    }
    int64_t v27 = v10 + 1;
    uint64_t v19 = v40;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v35) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v27);
    ++v10;
    if (!v28)
    {
      int64_t v10 = v27 + 1;
      if (v27 + 1 >= v35) {
        goto LABEL_23;
      }
      unint64_t v28 = *(void *)(v34 + 8 * v10);
      if (!v28) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v28 - 1) & v28;
    unint64_t v18 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_9:
    unint64_t v20 = *(void *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(void *)(v19 + 48) + v20, v14);
    uint64_t v21 = *(void *)(v19 + 56);
    uint64_t v22 = 16 * v18;
    char v23 = (uint64_t *)(v21 + 16 * v18);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v16 + 48) + v20, v15, v14);
    uint64_t v26 = (void *)(*(void *)(v16 + 56) + v22);
    *uint64_t v26 = v25;
    v26[1] = v24;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v35)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    id v30 = v33;
    uint64_t v31 = v41;
    goto LABEL_25;
  }
  unint64_t v28 = *(void *)(v34 + 8 * v29);
  if (v28)
  {
    int64_t v10 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v10 >= v35) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v10);
    ++v29;
    if (v28) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_1D16A6A54()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D40);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A6BF8()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA651FE0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_1D165C164(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_1D1668120(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    id result = sub_1D16607C4(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A6DE0()
{
  return sub_1D16A8660((uint64_t *)&unk_1EA6515F0);
}

void *sub_1D16A6DEC()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652050);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    swift_retain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1D16A6F98()
{
  return sub_1D16A7708(&qword_1EA652038);
}

void *sub_1D16A6FA4()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651600);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      int64_t v9 = v29 + 1;
      if (v29 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v6 + 8 * v9);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v30 - 1) & v30;
    unint64_t v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 48 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    char v23 = *(unsigned char *)(v21 + 24);
    uint64_t v24 = *(void *)(v21 + 32);
    uint64_t v25 = *(void *)(v21 + 40);
    uint64_t v26 = (void *)(*(void *)(v4 + 48) + v16);
    long long v27 = *(_OWORD *)(v21 + 8);
    *uint64_t v26 = v19;
    v26[1] = v18;
    uint64_t v28 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v28 = v22;
    *(_OWORD *)(v28 + 8) = v27;
    *(unsigned char *)(v28 + 24) = v23;
    *(void *)(v28 + 32) = v24;
    *(void *)(v28 + 40) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    id result = (void *)sub_1D1660A34(v24);
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v13) {
    goto LABEL_26;
  }
  unint64_t v30 = *(void *)(v6 + 8 * v31);
  if (v30)
  {
    int64_t v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v6 + 8 * v9);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A71B0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651FF8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    swift_retain();
    id result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A7370()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651AB8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    sub_1D165C164(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v17 = *(void *)(v4 + 48) + 40 * v15;
    long long v18 = v23[0];
    long long v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A754C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652048);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1D16A76FC()
{
  return sub_1D16A7708(&qword_1EA652040);
}

id sub_1D16A7708(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = sub_1D17BEAF0();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v14) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v7 + 8 * v20);
    ++v10;
    if (!v21)
    {
      int64_t v10 = v20 + 1;
      if (v20 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v7 + 8 * v10);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    uint64_t v19 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v17) = v19;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v14) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v7 + 8 * v22);
  if (v21)
  {
    int64_t v10 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v7 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A78A4()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652030);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A7A34()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651FD0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    id result = (void *)sub_1D165C164(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v17 = *(void *)(v4 + 48) + 40 * v15;
    long long v18 = v23[0];
    long long v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A7C0C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652028);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_1D1668120(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = sub_1D16607C4(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A7DD0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652000);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A7F60()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD272E0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A8118()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD272E8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 4 * v15;
    int v20 = *(_DWORD *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(_DWORD *)(*(void *)(v4 + 56) + v19) = v20;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A82C8()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651560);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_1D1668120(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_1D16607C4(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1D16A84B0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652010);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A8654()
{
  return sub_1D16A8660(&qword_1EA651FF0);
}

void *sub_1D16A8660(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = sub_1D17BEAF0();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    int64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    uint64_t v19 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v17) = v19;
    id v20 = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D16A8804()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA6515E0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_unknownObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1D16A89BC()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651FD8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BEAF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1D16A8B60@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t result = sub_1D165A8E0(a1);
  if (v6)
  {
    unint64_t v7 = result;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v10 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1D16A6448();
      uint64_t v9 = v10;
    }
    *a2 = *(void *)(*(void *)(v9 + 56) + 8 * v7);
    sub_1D16A8E0C(v7, v9);
    *uint64_t v3 = v9;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t sub_1D16A8BFC(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1D165A94C(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1D16A677C();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = sub_1D17BDD40();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  sub_1D16A8FC8(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

double sub_1D16A8D08@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1D165A868(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1D16A82C8();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1D16607C4((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_1D16A9644(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

unint64_t sub_1D16A8E0C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = sub_1D17BE6E0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1D17BED20();
        sub_1D17BED30();
        double result = sub_1D17BED80();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8) {
            goto LABEL_5;
          }
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          uint64_t v10 = *(void *)(a2 + 48);
          uint64_t v11 = (void *)(v10 + 8 * v3);
          uint64_t v12 = (void *)(v10 + 8 * v6);
          if (v3 != v6 || v11 >= v12 + 1) {
            *uint64_t v11 = *v12;
          }
          uint64_t v13 = *(void *)(a2 + 56);
          unint64_t v14 = (void *)(v13 + 8 * v3);
          unint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v14 >= v15 + 1))
          {
            *unint64_t v14 = *v15;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *uint64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1D16A8FC8(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D17BDD40();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  unint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v39 = a2 + 64;
    uint64_t v12 = sub_1D17BE6E0();
    uint64_t v13 = v39;
    if ((*(void *)(v39 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v37 = (v12 + 1) & v11;
      unint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v14 = v5 + 16;
      uint64_t v36 = v15;
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v38 = v14;
      uint64_t v17 = (void (**)(char *, uint64_t))(v14 - 8);
      do
      {
        int64_t v18 = v16 * v10;
        v36(v8, *(void *)(a2 + 48) + v16 * v10, v4);
        sub_1D16A9D18();
        uint64_t v19 = sub_1D17BDF00();
        (*v17)(v8, v4);
        unint64_t v20 = v19 & v11;
        if (a1 >= (uint64_t)v37)
        {
          if (v20 >= v37 && a1 >= (uint64_t)v20)
          {
LABEL_17:
            uint64_t v23 = *(void *)(a2 + 48);
            unint64_t v24 = v23 + v16 * a1;
            unint64_t v25 = v23 + v18 + v16;
            if (v16 * a1 < v18 || v24 >= v25)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v16 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v27 = *(void *)(a2 + 56);
            uint64_t v28 = (_OWORD *)(v27 + 16 * a1);
            int64_t v29 = (_OWORD *)(v27 + 16 * v10);
            uint64_t v13 = v39;
            if (a1 != v10 || (a1 = v10, v28 >= v29 + 1))
            {
              *uint64_t v28 = *v29;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v37 || a1 >= (uint64_t)v20)
        {
          goto LABEL_17;
        }
        uint64_t v13 = v39;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v13 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    unint64_t v30 = (uint64_t *)(v13 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v30 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  *unint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_1D16A9284(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = sub_1D17BE6E0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        id v10 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        uint64_t v11 = sub_1D17BE5B0();

        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            uint64_t v15 = *(void *)(a2 + 48);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || v16 >= v17 + 1) {
              *uint64_t v16 = *v17;
            }
            uint64_t v18 = *(void *)(a2 + 56);
            uint64_t v19 = (void *)(v18 + 8 * v3);
            unint64_t v20 = (void *)(v18 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 1))
            {
              *uint64_t v19 = *v20;
              int64_t v3 = v6;
            }
          }
        }
        else if (v12 >= v9 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << a1) - 1;
  }
  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_1D16A9438(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = sub_1D17BE6E0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        sub_1D17BED20();
        id v10 = *(void (**)(unsigned char *))(*(void *)v9 + 272);
        swift_retain();
        v10(v25);
        uint64_t v11 = sub_1D17BED80();
        double result = swift_release();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (void *)(v13 + 8 * v3);
          uint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          uint64_t v17 = (_OWORD *)(v16 + 16 * v3);
          uint64_t v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 1))
          {
            *uint64_t v17 = *v18;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D16A9644(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = sub_1D17BE6E0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1D17BED20();
        swift_bridgeObjectRetain();
        sub_1D17BE020();
        uint64_t v10 = sub_1D17BED80();
        double result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1D16A981C(long long *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  int64_t v11 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v17 >= v8) {
      goto LABEL_19;
    }
    unint64_t v18 = *(void *)(v4 + 8 * v17);
    ++v11;
    if (!v18)
    {
      int64_t v11 = v17 + 1;
      if (v17 + 1 >= v8) {
        goto LABEL_19;
      }
      unint64_t v18 = *(void *)(v4 + 8 * v11);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v13 = __clz(__rbit64(v18)) + (v11 << 6);
LABEL_5:
    uint64_t v14 = *(void *)(*(void *)(a2 + 56) + 8 * v13);
    long long v20 = *a1;
    long long v21 = a1[1];
    long long v22 = a1[2];
    long long v23 = a1[3];
    uint64_t v24 = *((void *)a1 + 8);
    sub_1D17BED30();
    uint64_t v15 = *(void **)(v14 + 16);
    swift_retain();
    id v16 = v15;
    objc_msgSend(v16, sel_hash, v20, v21, v22, v23, v24);
    sub_1D17BED30();
    swift_release();

    uint64_t result = sub_1D17BED80();
    v10 ^= result;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v8)
  {
LABEL_19:
    swift_release();
    return sub_1D17BED30();
  }
  unint64_t v18 = *(void *)(v4 + 8 * v19);
  if (v18)
  {
    int64_t v11 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v11 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v11 >= v8) {
      goto LABEL_19;
    }
    unint64_t v18 = *(void *)(v4 + 8 * v11);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_1D16A99D0(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    if (a1)
    {
      uint64_t v4 = sub_1D17BE1C0();
      *(void *)(v4 + 16) = a1;
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4FBC860];
    }
    uint64_t v5 = *(void **)(a2 + 16);
    swift_retain();
    unint64_t v6 = (unint64_t)objc_msgSend(v5, sel_startIndex);
    uint64_t v8 = v7;
    uint64_t v9 = 0;
    while ((id)v6 != objc_msgSend(*(id *)(a2 + 16), sel_endIndex))
    {
      id v10 = objc_msgSend(*(id *)(a2 + 16), sel_indexAfterIndex_, v6, v8);
      if ((v6 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_14;
      }
      uint64_t v8 = v11;
      *(void *)(v4 + 8 * v9 + 32) = v6;
      unint64_t v6 = (unint64_t)v10;
      if (__OFADD__(v9++, 1))
      {
        __break(1u);
        break;
      }
    }
    swift_release();
    if (v9 <= a1)
    {
      *(void *)(v4 + 16) = v9;
      return v4;
    }
LABEL_14:
    __break(1u);
  }
  swift_release();
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t *sub_1D16A9B3C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1D16A1EA8(a1, v2[5], v2[6], v2[2], v2[3], a2);
}

unint64_t sub_1D16A9B64()
{
  unint64_t result = qword_1EA651FB8;
  if (!qword_1EA651FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651FB8);
  }
  return result;
}

unint64_t sub_1D16A9BBC()
{
  unint64_t result = qword_1EA651FC0;
  if (!qword_1EA651FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651FC0);
  }
  return result;
}

unint64_t sub_1D16A9C14()
{
  unint64_t result = qword_1EA651FC8;
  if (!qword_1EA651FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA651FC8);
  }
  return result;
}

uint64_t sub_1D16A9C68@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  v6[0] = *a2;
  v6[1] = v4;
  uint64_t result = ElementIdentifierTupleSet.subscript.getter(v6, &v7);
  *a3 = v7;
  return result;
}

unint64_t sub_1D16A9CB4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v5 = *a3;
  uint64_t v6 = v3;
  swift_retain();
  return ElementIdentifierTupleSet.subscript.setter(&v6, &v5);
}

uint64_t sub_1D16A9CF8()
{
  return 0;
}

ValueMetadata *type metadata accessor for ElementIdentifierTupleSet()
{
  return &type metadata for ElementIdentifierTupleSet;
}

unint64_t sub_1D16A9D18()
{
  unint64_t result = qword_1EA6514E0;
  if (!qword_1EA6514E0)
  {
    sub_1D17BDD40();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA6514E0);
  }
  return result;
}

uint64_t KGElementIdentifier.hash(into:)()
{
  return sub_1D17BED30();
}

__C::KGElementIdentifier __swiftcall KGElementIdentifier.advanced(by:)(__C::KGElementIdentifier by)
{
  if ((by.rawValue & 0x8000000000000000) == 0)
  {
    BOOL v2 = __CFADD__(v1, by.rawValue);
    by.rawValue += v1;
    if (!v2) {
      return by;
    }
    __break(1u);
  }
  BOOL v2 = v1 >= -(uint64_t)by.rawValue;
  by.rawValue += v1;
  if (!v2) {
    __break(1u);
  }
  return by;
}

Swift::Int __swiftcall KGElementIdentifier.distance(to:)(__C::KGElementIdentifier to)
{
  BOOL v3 = to.rawValue >= v1;
  Swift::Int result = to.rawValue - v1;
  if (!v3)
  {
    uint64_t v5 = v1 - to.rawValue;
    if (v5 >= 0) {
      return -v5;
    }
    __break(1u);
    goto LABEL_7;
  }
  if (result < 0) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t *sub_1D16A9DE8@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  if (*result >= (unint64_t)*v2)
  {
    if (*result - *v2 >= 0)
    {
      *a2 = *result - *v2;
      return result;
    }
  }
  else
  {
    if (v4 - v3 >= 0)
    {
      *a2 = v3 - v4;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1D16A9E20@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *result;
  unint64_t v4 = *v2;
  if ((*result & 0x8000000000000000) == 0)
  {
    BOOL v5 = __CFADD__(v4, v3);
    v3 += v4;
    if (!v5) {
      goto LABEL_7;
    }
    __break(1u);
  }
  unint64_t v6 = -(uint64_t)v3;
  BOOL v5 = v4 >= v6;
  unint64_t v3 = v4 - v6;
  if (!v5)
  {
    __break(1u);
    return result;
  }
LABEL_7:
  *a2 = v3;
  return result;
}

unint64_t *sub_1D16A9E50(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = *a6;
  if ((*a6 & 0x8000000000000000) == 0)
  {
    BOOL v8 = __CFADD__(v6, v7);
    v6 += v7;
    if (!v8) {
      goto LABEL_7;
    }
    __break(1u);
  }
  unint64_t v9 = -v7;
  BOOL v8 = v6 >= v9;
  v6 -= v9;
  if (!v8)
  {
    __break(1u);
    return result;
  }
LABEL_7:
  *Swift::Int result = v6;
  return 0;
}

uint64_t *sub_1D16A9E88(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 - *result;
  if (*a2 >= (unint64_t)*result)
  {
    if (*a2 - *result >= 0) {
      return (uint64_t *)(v4 > 0);
    }
  }
  else
  {
    if (v2 - v3 >= 0)
    {
      uint64_t v4 = v3 - v2;
      return (uint64_t *)(v4 > 0);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1D16A9EC0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  uint64_t v4 = *result - *a2;
  if (*result >= (unint64_t)*a2)
  {
    if (*result - *a2 >= 0) {
      return (uint64_t *)(v4 < 1);
    }
  }
  else
  {
    if (v3 - v2 >= 0)
    {
      uint64_t v4 = v2 - v3;
      return (uint64_t *)(v4 < 1);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1D16A9EF8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 - *result;
  if (*a2 >= (unint64_t)*result)
  {
    if (*a2 - *result >= 0) {
      return (uint64_t *)(v4 < 1);
    }
  }
  else
  {
    if (v2 - v3 >= 0)
    {
      uint64_t v4 = v3 - v2;
      return (uint64_t *)(v4 < 1);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1D16A9F30(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  uint64_t v4 = *result - *a2;
  if (*result >= (unint64_t)*a2)
  {
    if (*result - *a2 >= 0) {
      return (uint64_t *)(v4 > 0);
    }
  }
  else
  {
    if (v3 - v2 >= 0)
    {
      uint64_t v4 = v2 - v3;
      return (uint64_t *)(v4 > 0);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t KGElementIdentifier.description.getter()
{
  return sub_1D17BE680();
}

uint64_t sub_1D16A9FA8()
{
  return sub_1D16AA010((unint64_t *)&unk_1EBD274F8);
}

uint64_t sub_1D16A9FDC()
{
  return sub_1D16AA010(&qword_1EA652058);
}

uint64_t sub_1D16AA010(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for KGElementIdentifier(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D16AA054()
{
  return MEMORY[0x1E4FBB5A0];
}

uint64_t sub_1D16AA060()
{
  return sub_1D17BE680();
}

uint64_t sub_1D16AA0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_1D16607C4((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1D165F3B0(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D166817C(a1, &qword_1EBD272F8);
    sub_1D16A8D08(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_1D166817C((uint64_t)v9, &qword_1EBD272F8);
  }
}

uint64_t FilterProperties.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v5 = (void *)MEMORY[0x1E4FBC868];
LABEL_32:
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t v4 = a1 + 32;
  BOOL v5 = (void *)MEMORY[0x1E4FBC868];
  while (1)
  {
    sub_1D16AA834(v4, (uint64_t)v61);
    sub_1D16AA89C(v61, (uint64_t)v58);
    sub_1D16AA89C(v62, (uint64_t)v56);
    sub_1D167C788((uint64_t)v56, (uint64_t)v52);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652068);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652070);
    if ((swift_dynamicCast() & 1) == 0) {
      break;
    }
    sub_1D16AA89C(v50, (uint64_t)v53);
    uint64_t v7 = v59;
    uint64_t v8 = v60;
    __swift_project_boxed_opaque_existential_1(v58, v59);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
    uint64_t v11 = v10;
    uint64_t v12 = v54;
    uint64_t v13 = v55;
    __swift_project_boxed_opaque_existential_1(v53, v54);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v13 + 8))(v52, v12, v13);
    sub_1D16607C4(v52, v50);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v16 = sub_1D165A868(v9, v11);
    uint64_t v17 = v5[2];
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      goto LABEL_34;
    }
    char v20 = v15;
    if (v5[3] >= v19)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v15 & 1) == 0) {
          goto LABEL_19;
        }
      }
      else
      {
        sub_1D16A82C8();
        if ((v20 & 1) == 0) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      sub_1D16A52E8(v19, isUniquelyReferenced_nonNull_native);
      unint64_t v21 = sub_1D165A868(v9, v11);
      if ((v20 & 1) != (v22 & 1)) {
        goto LABEL_37;
      }
      unint64_t v16 = v21;
      if ((v20 & 1) == 0)
      {
LABEL_19:
        v5[(v16 >> 6) + 8] |= 1 << v16;
        uint64_t v40 = (uint64_t *)(v5[6] + 16 * v16);
        uint64_t *v40 = v9;
        v40[1] = v11;
        sub_1D16607C4(v50, (_OWORD *)(v5[7] + 32 * v16));
        uint64_t v41 = v5[2];
        BOOL v42 = __OFADD__(v41, 1);
        uint64_t v43 = v41 + 1;
        if (v42) {
          goto LABEL_35;
        }
        void v5[2] = v43;
        swift_bridgeObjectRetain();
        goto LABEL_4;
      }
    }
    unint64_t v6 = (_OWORD *)(v5[7] + 32 * v16);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
    sub_1D16607C4(v50, v6);
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v53);
LABEL_5:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v56);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v58);
    v4 += 80;
    if (!--v3)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v2 = a2;
      goto LABEL_32;
    }
  }
  uint64_t v51 = 0;
  memset(v50, 0, sizeof(v50));
  sub_1D166817C((uint64_t)v50, &qword_1EA652078);
  uint64_t v23 = v59;
  uint64_t v24 = v60;
  __swift_project_boxed_opaque_existential_1(v58, v59);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
  uint64_t v27 = v26;
  uint64_t v28 = v57;
  int64_t v29 = __swift_project_boxed_opaque_existential_1(v56, v57);
  uint64_t v54 = v28;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v53);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v28 - 8) + 16))(boxed_opaque_existential_0Tm, v29, v28);
  sub_1D16607C4(v53, v52);
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v50[0] = v5;
  unint64_t v33 = sub_1D165A868(v25, v27);
  uint64_t v34 = v5[2];
  BOOL v35 = (v32 & 1) == 0;
  uint64_t v36 = v34 + v35;
  if (!__OFADD__(v34, v35))
  {
    char v37 = v32;
    if (v5[3] >= v36)
    {
      if (v31)
      {
        BOOL v5 = *(void **)&v50[0];
        if ((v32 & 1) == 0) {
          goto LABEL_27;
        }
      }
      else
      {
        sub_1D16A82C8();
        BOOL v5 = *(void **)&v50[0];
        if ((v37 & 1) == 0) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      sub_1D16A52E8(v36, v31);
      unint64_t v38 = sub_1D165A868(v25, v27);
      if ((v37 & 1) != (v39 & 1)) {
        goto LABEL_37;
      }
      unint64_t v33 = v38;
      BOOL v5 = *(void **)&v50[0];
      if ((v37 & 1) == 0)
      {
LABEL_27:
        v5[(v33 >> 6) + 8] |= 1 << v33;
        char v45 = (uint64_t *)(v5[6] + 16 * v33);
        uint64_t *v45 = v25;
        v45[1] = v27;
        sub_1D16607C4(v52, (_OWORD *)(v5[7] + 32 * v33));
        uint64_t v46 = v5[2];
        BOOL v42 = __OFADD__(v46, 1);
        uint64_t v47 = v46 + 1;
        if (v42) {
          goto LABEL_36;
        }
        void v5[2] = v47;
        swift_bridgeObjectRetain();
        goto LABEL_29;
      }
    }
    long long v44 = (_OWORD *)(v5[7] + 32 * v33);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v44);
    sub_1D16607C4(v52, v44);
LABEL_29:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

Swift::Void __swiftcall FilterProperties.merge(_:)(KnowledgeGraphKit::FilterProperties a1)
{
  uint64_t v2 = *(void *)a1.dictionary._rawValue;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *v1;
  *Swift::UInt v1 = 0x8000000000000000;
  sub_1D16AA8CC(v2, (uint64_t)sub_1D16AAC24, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v4);
  *Swift::UInt v1 = v4;
  swift_bridgeObjectRelease();
}

KnowledgeGraphKit::FilterProperties __swiftcall FilterProperties.merging(_:)(KnowledgeGraphKit::FilterProperties a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRetain();
  result.dictionary._rawValue = (void *)sub_1D16AA720(v5, v4);
  v3->dictionary._rawValue = result.dictionary._rawValue;
  return result;
}

uint64_t sub_1D16AA720(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_1D16AA8CC(a1, (uint64_t)sub_1D16AAC24, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t FilterProperties.set(_:for:)(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = __swift_project_boxed_opaque_existential_1(a2, v7);
  return sub_1D16AAC78((uint64_t)v6, (uint64_t)v9, v2, v4, v7, v5, v8);
}

uint64_t sub_1D16AA834(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652060);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D16AA89C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1D16AA8B4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_1D16AA8CC(a1, a2, a3, a4, a5);
}

uint64_t sub_1D16AA8CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v52 = v8;
  uint64_t v53 = 0;
  uint64_t v54 = v11 & v9;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1D170E274(&v48);
  uint64_t v12 = *((void *)&v48 + 1);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_27;
  }
  uint64_t v13 = v48;
  sub_1D16607C4(v49, v47);
  uint64_t v14 = *(void **)a5;
  unint64_t v16 = sub_1D165A868(v13, v12);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v20 = v15;
  if (v14[3] >= v19)
  {
    if (a4)
    {
      if (v15) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_1D16A82C8();
      if (v20) {
        goto LABEL_12;
      }
    }
LABEL_14:
    uint64_t v24 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    uint64_t v25 = (uint64_t *)(v24[6] + 16 * v16);
    *uint64_t v25 = v13;
    v25[1] = v12;
    sub_1D16607C4(v47, (_OWORD *)(v24[7] + 32 * v16));
    uint64_t v26 = v24[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    _OWORD v24[2] = v28;
LABEL_16:
    sub_1D170E274(&v48);
    for (uint64_t i = *((void *)&v48 + 1); *((void *)&v48 + 1); uint64_t i = *((void *)&v48 + 1))
    {
      uint64_t v31 = v48;
      sub_1D16607C4(v49, v47);
      char v32 = *(void **)a5;
      unint64_t v34 = sub_1D165A868(v31, i);
      uint64_t v35 = v32[2];
      BOOL v36 = (v33 & 1) == 0;
      uint64_t v37 = v35 + v36;
      if (__OFADD__(v35, v36)) {
        goto LABEL_28;
      }
      char v38 = v33;
      if (v32[3] < v37)
      {
        sub_1D16A52E8(v37, 1);
        unint64_t v39 = sub_1D165A868(v31, i);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_30;
        }
        unint64_t v34 = v39;
      }
      if (v38)
      {
        sub_1D1668120((uint64_t)v47, (uint64_t)v46);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v47);
        swift_bridgeObjectRelease();
        unint64_t v30 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v34);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
        sub_1D16607C4(v46, v30);
      }
      else
      {
        uint64_t v41 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        BOOL v42 = (uint64_t *)(v41[6] + 16 * v34);
        *BOOL v42 = v31;
        v42[1] = i;
        sub_1D16607C4(v47, (_OWORD *)(v41[7] + 32 * v34));
        uint64_t v43 = v41[2];
        BOOL v27 = __OFADD__(v43, 1);
        uint64_t v44 = v43 + 1;
        if (v27) {
          goto LABEL_29;
        }
        v41[2] = v44;
      }
      sub_1D170E274(&v48);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1D1668088();
    return swift_release();
  }
  sub_1D16A52E8(v19, a4 & 1);
  unint64_t v21 = sub_1D165A868(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    unint64_t v16 = v21;
    if ((v20 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_1D1668120((uint64_t)v47, (uint64_t)v46);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v47);
    swift_bridgeObjectRelease();
    uint64_t v23 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v16);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
    sub_1D16607C4(v46, v23);
    goto LABEL_16;
  }
LABEL_30:
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

uint64_t sub_1D16AAC24@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_1D1668120((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D16AAC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = v15;
  uint64_t v38 = v16;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v36);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_0Tm, a1, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, a5);
  sub_1D167C788((uint64_t)v36, (uint64_t)v32);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652068);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652070);
  if (swift_dynamicCast())
  {
    sub_1D16AA89C(v30, (uint64_t)v33);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 8))(a5, a7);
    uint64_t v20 = v19;
    uint64_t v21 = v34;
    uint64_t v22 = v35;
    __swift_project_boxed_opaque_existential_1(v33, v34);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v22 + 8))(v32, v21, v22);
    sub_1D16AA0A4((uint64_t)v32, v18, v20);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v33);
  }
  else
  {
    uint64_t v31 = 0;
    memset(v30, 0, sizeof(v30));
    sub_1D166817C((uint64_t)v30, &qword_1EA652078);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 8))(a5, a7);
    uint64_t v25 = v24;
    uint64_t v26 = v37;
    BOOL v27 = __swift_project_boxed_opaque_existential_1(v36, v37);
    uint64_t v34 = v26;
    uint64_t v28 = __swift_allocate_boxed_opaque_existential_0Tm(v33);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v26 - 8) + 16))(v28, v27, v26);
    sub_1D16AA0A4((uint64_t)v33, v23, v25);
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a5);
}

ValueMetadata *type metadata accessor for FilterProperties()
{
  return &type metadata for FilterProperties;
}

uint64_t Vector.init(elements:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static Vector<A>.*= infix(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[7] = *a1;
  _OWORD v11[2] = a3;
  v11[3] = a4;
  void v11[4] = a2;
  uint64_t v6 = sub_1D17BE260();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = sub_1D169A4DC((void (*)(char *, char *))sub_1D16AB918, (uint64_t)v11, v6, a3, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v8);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v9;
  return result;
}

uint64_t Vector.init(arrayLiteral:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Vector.init(pointer:count:)@<X0>(uint64_t *a1@<X8>)
{
  sub_1D17BDFC0();
  sub_1D17BDFD0();
  swift_getWitnessTable();
  uint64_t result = sub_1D17BE290();
  *a1 = result;
  return result;
}

uint64_t static Vector<A>.zeros(count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1D16AB0C0(a1, a2, a3);
}

uint64_t static Vector<A>.ones(count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1D16AB0C0(a1, a2, a3);
}

uint64_t sub_1D16AB0C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v13 = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness, v9);
  swift_getAssociatedConformanceWitness();
  sub_1D17BEC00();
  sub_1D17BEBA0();
  uint64_t v10 = sub_1D16AC0F4((uint64_t)v7, a1, a2);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  *uint64_t v13 = v10;
  return result;
}

uint64_t Vector.init(repeating:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = sub_1D16AC0F4(a1, a2, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  *a4 = v7;
  return result;
}

uint64_t Vector.subscript.getter()
{
  return sub_1D17BE2C0();
}

float static Vector<A>.* infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  vDSP_Length v4 = *(void *)(*a1 + 16);
  if (v4 != *(void *)(*a2 + 16)) {
    __break(1u);
  }
  float __C = NAN;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  vDSP_dotpr((const float *)(v2 + 32), 1, (const float *)(v3 + 32), 1, &__C, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return __C;
}

uint64_t Vector.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1, a2);
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v9 = sub_1D17BE290();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  *a4 = v9;
  return result;
}

void Vector.count.getter()
{
}

void Vector.description.getter()
{
}

void Vector.debugDescription.getter()
{
}

uint64_t Vector.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_1D16AC208(a1, a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8);
  return v5(a1);
}

uint64_t static Vector<A>.== infix(_:_:)()
{
  return sub_1D17BE280();
}

uint64_t Vector<A>.hashValue.getter()
{
  return sub_1D17BED80();
}

uint64_t Vector.elements.getter()
{
  sub_1D169D83C();
  return swift_bridgeObjectRetain();
}

uint64_t Vector.elements.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *Swift::UInt v1 = a1;
  return result;
}

uint64_t (*Vector.elements.modify())()
{
  return nullsub_1;
}

uint64_t sub_1D16AB63C()
{
  return static Vector<A>.== infix(_:_:)();
}

uint64_t Vector<A>.hash(into:)()
{
  return sub_1D17BE270();
}

uint64_t sub_1D16AB65C()
{
  return Vector<A>.hashValue.getter();
}

uint64_t sub_1D16AB664()
{
  return Vector<A>.hash(into:)();
}

uint64_t sub_1D16AB66C()
{
  return sub_1D17BED80();
}

uint64_t Vector.init(elements:shape:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Vector();
  uint64_t result = MEMORY[0x1D25F8BB0](a1, *(void *)(v6 + 16));
  if (result == a2) {
    *a3 = a1;
  }
  else {
    __break(1u);
  }
  return result;
}

void *Vector.withUnsafeMutableBufferPointer<A>(_:)(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v13[3] = a4;
  uint64_t v6 = *(void *)(a3 + 16);
  sub_1D17BE260();
  sub_1D17BE190();
  uint64_t v7 = *v4;
  if (_swift_isClassOrObjCExistentialType()) {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = *(void *)(v8 + 16);
  if (_swift_isClassOrObjCExistentialType()) {
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v10 = v7;
  }
  v13[0] = v10
         + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80));
  uint64_t v11 = v13[0];
  v13[1] = v9;
  a1(v13);
  return sub_1D16AC09C(v13, v11, v9);
}

void sub_1D16AB83C()
{
}

uint64_t sub_1D16AB854(uint64_t result)
{
  *Swift::UInt v1 = result;
  return result;
}

uint64_t sub_1D16AB864@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  return Vector.init(elements:shape:)(a1, *a2, a3);
}

void *sub_1D16AB870(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Vector.withUnsafeMutableBufferPointer<A>(_:)(a1, a2, a4, a3);
}

uint64_t sub_1D16AB898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)(a1, a2, a4, a3, WitnessTable);
}

uint64_t sub_1D16AB918()
{
  return sub_1D17BE3C0();
}

double static Vector<A>.* infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  v6[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  vDSP_Length v4 = *(void *)(*a1 + 16);
  if (v4 != *(void *)(*a2 + 16)) {
    __break(1u);
  }
  v6[0] = NAN;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  vDSP_dotprD((const double *)(v2 + 32), 1, (const double *)(v3 + 32), 1, v6, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6[0];
}

uint64_t Vector.startIndex.getter()
{
  return 0;
}

void Vector.endIndex.getter()
{
}

void (*Vector.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(unint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  *uint64_t v7 = a2;
  v7[1] = a3;
  uint64_t v8 = *(void *)(a3 + 16);
  void v7[2] = v3;
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  sub_1D17BE2C0();
  return sub_1D16ABB14;
}

void sub_1D16ABB14(unint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[5];
  vDSP_Length v4 = (void *)(*a1)[6];
  unint64_t v5 = (*a1)[3];
  unint64_t v6 = (*a1)[4];
  uint64_t v7 = (*a1)[1];
  unint64_t v8 = **a1;
  if (a2)
  {
    (*(void (**)(unint64_t, void *, unint64_t))(v6 + 16))((*a1)[5], v4, v5);
    sub_1D16AC208((uint64_t)v3, v8, v7);
    uint64_t v9 = *(void (**)(void *, unint64_t))(v6 + 8);
    v9(v3, v5);
    v9(v4, v5);
  }
  else
  {
    sub_1D16AC208((*a1)[6], v8, v7);
    (*(void (**)(void *, unint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

Swift::Int __swiftcall Vector.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall Vector.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall Vector.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3 = sub_1D16AC2F4(_, offsetBy, limitedBy);
  Swift::Bool v5 = v4 & 1;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

uint64_t sub_1D16ABC50()
{
  swift_getWitnessTable();
  return sub_1D17BE3D0();
}

uint64_t sub_1D16ABCC0(void *a1)
{
  swift_getWitnessTable();
  uint64_t result = sub_1D17BE3D0();
  *a1 = v3;
  return result;
}

uint64_t sub_1D16ABD30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];
  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

void sub_1D16ABDA4()
{
}

uint64_t sub_1D16ABDBC(uint64_t result)
{
  *BOOL v1 = result;
  return result;
}

void (*sub_1D16ABDCC(void *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1D16ABE3C(v6, *a2, a3);
  return sub_1D167B268;
}

void (*sub_1D16ABE3C(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v3 = *(void *)(a3 + 16);
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  a1[1] = v4;
  a1[2] = malloc(*(void *)(v4 + 64));
  sub_1D17BE2C0();
  return sub_1D1657898;
}

uint64_t sub_1D16ABEF8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v3 = MEMORY[0x1E4FBB590];
  return MEMORY[0x1F41842C0](a1, WitnessTable, v3);
}

void *sub_1D16ABF68@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (__OFADD__(*result, a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + a2;
  }
  return result;
}

uint64_t sub_1D16ABF80@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_1D16AC2F4(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

void *sub_1D16ABFB8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *sub_1D16ABFD0(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

void sub_1D16ABFE8(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_1D16ABFF4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t sub_1D16AC048()
{
  swift_getWitnessTable();
  return sub_1D17BE440();
}

void *sub_1D16AC09C(void *result, uint64_t a2, uint64_t a3)
{
  if (*result)
  {
    if (*result == a2)
    {
      if (result[1] == a3)
      {
        uint64_t v3 = sub_1D17BE260();
        return (void *)nullsub_1(v3);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D16AC0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1D17BE1A0();
  uint64_t v15 = result;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a3 - 8);
      size_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
      v10(v7, a1, a3);
      uint64_t v11 = a2 - 1;
      if (v11)
      {
        uint64_t v12 = *(void *)(v9 + 72);
        uint64_t v13 = v8 + v12;
        do
        {
          v10(v13, a1, a3);
          v13 += v12;
          --v11;
        }
        while (v11);
      }
    }
    uint64_t v14 = sub_1D17BE260();
    nullsub_1(v14);
    return v15;
  }
  return result;
}

uint64_t sub_1D16AC208(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = sub_1D17BE260();
  sub_1D17BE190();
  uint64_t v8 = *v3;
  sub_1D169D3A4(a2, *v3);
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0) {
    uint64_t v10 = v8;
  }
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(v10+ ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80))+ *(void *)(*(void *)(v6 - 8) + 72) * a2, a1, v6);
  return nullsub_1(v7);
}

uint64_t type metadata accessor for Vector()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D16AC2F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (a2 >= 1)
  {
    if (v3 < 0 || v3 >= (unint64_t)a2) {
      goto LABEL_9;
    }
    return 0;
  }
  if (v3 <= 0 && v3 > a2) {
    return 0;
  }
LABEL_9:
  BOOL v4 = __OFADD__(result, a2);
  result += a2;
  if (v4) {
LABEL_12:
  }
    __break(1u);
  return result;
}

uint64_t sub_1D16AC348()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D16AC390()
{
  return MEMORY[0x1E4FBB570];
}

uint64_t sub_1D16AC39C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1D16AC3D8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D16AC3F4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D16AC410()
{
  return sub_1D16AC5AC(&qword_1EA652080);
}

uint64_t sub_1D16AC444()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D16AC4A8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D16AC4C4()
{
  return sub_1D16AC5AC(&qword_1EA652090);
}

uint64_t sub_1D16AC4F8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D16AC55C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D16AC578()
{
  return sub_1D16AC5AC(&qword_1EA652098);
}

uint64_t sub_1D16AC5AC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA652088);
    sub_1D165B76C();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D16AC61C()
{
  return Vector.subscript.getter();
}

uint64_t sub_1D16AC680(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for Vector();
  return sub_1D16AC208(a1, v4, v5);
}

uint64_t sub_1D16AC6D0()
{
  return 8;
}

void *sub_1D16AC6DC(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1D16AC6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

id MAFloatMatrixWrapper.__allocating_init(floatMatrix:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  unint64_t v4 = &v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(void *)unint64_t v4 = *(void *)a1;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  v6.receiver = v3;
  v6.super_class = v1;
  return objc_msgSendSuper2(&v6, sel_init);
}

id MAFloatMatrixWrapper.init(floatMatrix:)(uint64_t a1)
{
  BOOL v2 = &v1[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(void *)BOOL v2 = *(void *)a1;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for MAFloatMatrixWrapper()
{
  return self;
}

id MAFloatMatrixWrapper.__allocating_init(rows:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  sub_1D1711FF8(a1, &v7);
  objc_super v4 = &v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(void *)objc_super v4 = v7;
  *(_OWORD *)(v4 + 8) = v8;

  v6.receiver = v3;
  v6.super_class = v1;
  return objc_msgSendSuper2(&v6, sel_init);
}

id MAFloatMatrixWrapper.init(rows:)(uint64_t a1)
{
  uint64_t v3 = v1;
  sub_1D1711FF8(a1, &v7);
  objc_super v4 = &v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(void *)objc_super v4 = v7;
  *(_OWORD *)(v4 + 8) = v8;

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v6, sel_init);
}

id MAFloatMatrixWrapper.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id MAFloatMatrixWrapper.init()()
{
  id v1 = v0;
  sub_1D1711FF8(MEMORY[0x1E4FBC860], &v6);
  long long v2 = v7;
  uint64_t v3 = &v1[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(void *)uint64_t v3 = v6;
  *(_OWORD *)(v3 + 8) = v2;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v5, sel_init);
}

id MAFloatMatrixWrapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D16ACABC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix;
  *(void *)a1 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v2 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t MAMutableFloatMatrixWrapper.floatMatrix.setter(uint64_t a1)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix;
  *(void *)uint64_t v2 = *(void *)a1;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  return swift_bridgeObjectRelease();
}

void (*MAMutableFloatMatrixWrapper.floatMatrix.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = (char *)malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix;
  *((void *)v3 + 3) = v1;
  *((void *)v3 + 4) = v4;
  uint64_t v5 = v1 + v4;
  *(void *)uint64_t v3 = *(void *)v5;
  *(_OWORD *)(v3 + 8) = *(_OWORD *)(v5 + 8);
  swift_bridgeObjectRetain();
  return sub_1D16ACB80;
}

void sub_1D16ACB80(void **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[3] + (*a1)[4];
  long long v4 = *(_OWORD *)(*a1 + 1);
  *(void *)uint64_t v3 = **a1;
  *(_OWORD *)(v3 + 8) = v4;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  free(v2);
}

id MAMutableFloatMatrixWrapper.__allocating_init(floatMatrix:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  long long v4 = &v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(void *)long long v4 = *(void *)a1;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v6, sel_init);
}

id MAMutableFloatMatrixWrapper.init(floatMatrix:)(uint64_t a1)
{
  uint64_t v2 = &v1[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(void *)uint64_t v2 = *(void *)a1;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v4, sel_init);
}

id MAMutableFloatMatrixWrapper.__allocating_init(rows:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  sub_1D1711FF8(a1, &v7);
  objc_super v4 = &v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(void *)objc_super v4 = v7;
  *(_OWORD *)(v4 + 8) = v8;

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v6, sel_init);
}

id MAMutableFloatMatrixWrapper.init(rows:)(uint64_t a1)
{
  uint64_t v3 = v1;
  sub_1D1711FF8(a1, &v7);
  objc_super v4 = &v3[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(void *)objc_super v4 = v7;
  *(_OWORD *)(v4 + 8) = v8;

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  return objc_msgSendSuper2(&v6, sel_init);
}

id MAMutableFloatMatrixWrapper.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id MAMutableFloatMatrixWrapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id MAFloatMatrixWrapper.__allocating_init(floats:rows:columns:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return objc_msgSend(v7, sel_initWithFloats_rows_columns_, a1, a2, a3);
}

uint64_t MAFloatMatrixWrapper.init(floats:rows:columns:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_getObjectType();
  if ((unsigned __int128)(a2 * (__int128)a3) >> 64 == (a2 * a3) >> 63)
  {
    uint64_t v7 = result;
    uint64_t result = sub_1D1666A30(a1, a2 * a3);
    if (*(void *)(result + 16) == a2 * a3)
    {
      v9[0] = result;
      v9[1] = a2;
      _OWORD v9[2] = a3;
      uint64_t v8 = (*(uint64_t (**)(void *))(v7 + 120))(v9);
      swift_deallocPartialClassInstance();
      return v8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static MAFloatMatrixWrapper.repeating(element:rows:columns:)(uint64_t result, uint64_t a2, int32x2_t a3)
{
  uint64_t v3 = result * a2;
  if ((unsigned __int128)(result * (__int128)a2) >> 64 == (result * a2) >> 63)
  {
    uint64_t v5 = result;
    uint64_t result = sub_1D1665A14(result * a2, a3);
    if (*(void *)(result + 16) == v3)
    {
      uint64_t v6 = result;
      uint64_t v7 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
      uint64_t v8 = (char *)objc_allocWithZone(v7);
      uint64_t v9 = &v8[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
      *(void *)uint64_t v9 = v6;
      *((void *)v9 + 1) = v5;
      *((void *)v9 + 2) = a2;
      v10.receiver = v8;
      v10.super_class = v7;
      return (uint64_t)objc_msgSendSuper2(&v10, sel_init);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static MAFloatMatrixWrapper.zeros(rows:columns:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result * a2;
  if ((unsigned __int128)(result * (__int128)a2) >> 64 == (result * a2) >> 63)
  {
    uint64_t v5 = result;
    uint64_t result = sub_1D1665A14(result * a2, 0);
    if (*(void *)(result + 16) == v3)
    {
      v6[0] = result;
      v6[1] = v5;
      double v6[2] = a2;
      return (*(uint64_t (**)(void *))(v2 + 120))(v6);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static MAFloatMatrixWrapper.ones(rows:columns:)(uint64_t result, uint64_t a2, int32x2_t a3)
{
  uint64_t v4 = result * a2;
  if ((unsigned __int128)(result * (__int128)a2) >> 64 == (result * a2) >> 63)
  {
    uint64_t v6 = result;
    a3.i32[0] = 1.0;
    uint64_t result = sub_1D1665A14(result * a2, a3);
    if (*(void *)(result + 16) == v4)
    {
      v7[0] = result;
      v7[1] = v6;
      void v7[2] = a2;
      return (*(uint64_t (**)(void *))(v3 + 120))(v7);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id MAFloatMatrixWrapper.copy(with:)@<X0>(void *a1@<X8>)
{
  a1[3] = type metadata accessor for MAFloatMatrixWrapper();
  *a1 = v3;
  return v3;
}

id MAFloatMatrixWrapper.mutableCopy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = (objc_class *)type metadata accessor for MAMutableFloatMatrixWrapper();
  uint64_t v8 = (char *)objc_allocWithZone(v7);
  uint64_t v9 = &v8[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(void *)uint64_t v9 = v4;
  *((void *)v9 + 1) = v5;
  *((void *)v9 + 2) = v6;
  v11.receiver = v8;
  v11.super_class = (Class)type metadata accessor for MAFloatMatrixWrapper();
  swift_bridgeObjectRetain();
  id result = objc_msgSendSuper2(&v11, sel_init);
  a1[3] = v7;
  *a1 = result;
  return result;
}

id MAMutableFloatMatrixWrapper.copy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
  uint64_t v8 = (char *)objc_allocWithZone(v7);
  uint64_t v9 = &v8[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(void *)uint64_t v9 = v4;
  *((void *)v9 + 1) = v5;
  *((void *)v9 + 2) = v6;
  v11.receiver = v8;
  v11.super_class = v7;
  swift_bridgeObjectRetain();
  id result = objc_msgSendSuper2(&v11, sel_init);
  a1[3] = v7;
  *a1 = result;
  return result;
}

Swift::Float __swiftcall MAFloatMatrixWrapper.float(at:column:)(Swift::Int at, Swift::Int column)
{
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x70))(v10);
  if (v10[1] < at || v11 <= column)
  {
    __break(1u);
    goto LABEL_11;
  }
  Swift::Int v7 = at * v11;
  if ((unsigned __int128)(at * (__int128)v11) >> 64 != (at * v11) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v8 = v7 + column;
  if (__OFADD__(v7, column))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v8 < *(void *)(v10[0] + 16))
  {
    float v9 = *(float *)(v10[0] + 4 * v8 + 32);
    swift_bridgeObjectRelease();
    return v9;
  }
LABEL_14:
  __break(1u);
  return result;
}

id MAFloatMatrixWrapper.vector(_:)(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(v15);
  uint64_t v4 = a1 * v16;
  if ((unsigned __int128)(a1 * (__int128)v16) >> 64 != (a1 * v16) >> 63)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v2 = v4 + v16;
  if (__OFADD__(v4, v16))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((v15[1] & 0x8000000000000000) != 0 || v2 < v4) {
    goto LABEL_18;
  }
  if (v4 < 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_1D1666B8C(a1, a1 + 32, v4, (2 * v2) | 1);
    goto LABEL_15;
  }
  a1 = v15[0];
  unint64_t v5 = *(void *)(v15[0] + 16);
  if (v5 < v4 || (uint64_t)v5 < v2) {
    goto LABEL_20;
  }
  sub_1D17BEBD0();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
  uint64_t v8 = *(void *)(v7 + 16);
  swift_release();
  if (v8 != v2 - v4) {
    goto LABEL_21;
  }
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
LABEL_15:
  swift_bridgeObjectRelease();
  objc_super v10 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
  Swift::Int v11 = (char *)objc_allocWithZone(v10);
  *(void *)&v11[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v9;
  v14.receiver = v11;
  v14.super_class = v10;
  id v12 = objc_msgSendSuper2(&v14, sel_init);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t MAFloatMatrixWrapper.count.getter()
{
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(v3);
  uint64_t v1 = *(void *)(v3[0] + 16);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t MAFloatMatrixWrapper.rows.getter()
{
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(v3);
  uint64_t v1 = v3[1];
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t MAFloatMatrixWrapper.columns.getter()
{
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(v3);
  uint64_t v1 = v3[2];
  swift_bridgeObjectRelease();
  return v1;
}

Swift::Float __swiftcall MAFloatMatrixWrapper.sum()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, float *, uint64_t))MEMORY[0x1E4F16A38];
  return sub_1D16ADEF0(v0);
}

Swift::Float __swiftcall MAFloatMatrixWrapper.sumOfSquares()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, float *, uint64_t))MEMORY[0x1E4F16A80];
  return sub_1D16ADEF0(v0);
}

Swift::Float __swiftcall MAFloatMatrixWrapper.mean()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, float *, uint64_t))MEMORY[0x1E4F169A0];
  return sub_1D16ADEF0(v0);
}

float sub_1D16ADEF0(void (*a1)(uint64_t, uint64_t, float *, uint64_t))
{
  void v7[3] = *MEMORY[0x1E4F143B8];
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(v7);
  uint64_t v3 = *(void *)(v7[0] + 16);
  float v6 = NAN;
  uint64_t v4 = v7[0] + 32;
  swift_bridgeObjectRetain();
  a1(v4, 1, &v6, v3);
  swift_bridgeObjectRelease_n();
  return v6;
}

float sub_1D16AE034(void *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, float *, uint64_t))
{
  v10[3] = *MEMORY[0x1E4F143B8];
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70))(v10);
  uint64_t v5 = *(void *)(v10[0] + 16);
  float v9 = NAN;
  uint64_t v6 = v10[0] + 32;
  uint64_t v7 = a1;
  swift_bridgeObjectRetain();
  a3(v6, 1, &v9, v5);

  swift_bridgeObjectRelease_n();
  return v9;
}

uint64_t MAFloatMatrixWrapper.array()()
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(&v21);
  int64_t v1 = v22;
  if (v22 < 0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    uint64_t result = sub_1D17BEB20();
    __break(1u);
    return result;
  }
  uint64_t v2 = v21;
  if (v22)
  {
    uint64_t v3 = v23;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    sub_1D1682814(0, v22, 0);
    uint64_t v4 = 0;
    uint64_t v19 = v2 + 32;
    uint64_t v5 = v20;
    while (1)
    {
      uint64_t v6 = v4 * v3;
      if ((unsigned __int128)(v4 * (__int128)v3) >> 64 != (v4 * v3) >> 63) {
        break;
      }
      uint64_t v7 = v6 + v3;
      if (__OFADD__(v6, v3)) {
        goto LABEL_31;
      }
      if (v7 < v6) {
        goto LABEL_32;
      }
      if (v6 < 0) {
        goto LABEL_33;
      }
      unint64_t v8 = *(void *)(v2 + 16);
      if (v8 < v6 || (uint64_t)v8 < v7) {
        goto LABEL_34;
      }
      sub_1D17BEBD0();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      uint64_t v9 = swift_dynamicCastClass();
      if (!v9)
      {
        swift_bridgeObjectRelease();
        uint64_t v9 = MEMORY[0x1E4FBC860];
      }
      uint64_t v10 = *(void *)(v9 + 16);
      swift_release();
      if (v10 == v3)
      {
        Swift::Int v11 = (void *)swift_dynamicCastClass();
        if (!v11)
        {
          swift_bridgeObjectRelease();
          Swift::Int v11 = (void *)MEMORY[0x1E4FBC860];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        Swift::Int v11 = (void *)MEMORY[0x1E4FBC860];
        if (v7 != v6)
        {
          if (v3 < 1)
          {
            if (v3 < 0) {
              goto LABEL_36;
            }
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD271F0);
            Swift::Int v11 = (void *)swift_allocObject();
            int64_t v14 = _swift_stdlib_malloc_size(v11);
            uint64_t v15 = v14 - 32;
            if (v14 < 32) {
              uint64_t v15 = v14 - 29;
            }
            _OWORD v11[2] = v3;
            v11[3] = 2 * (v15 >> 2);
          }
          uint64_t v16 = v11 + 4;
          uint64_t v17 = (char *)(v19 + 4 * v6);
          if (v17 < (char *)v11 + 4 * v3 + 32 && (unint64_t)v16 < v19 + 4 * v7) {
            goto LABEL_36;
          }
          memcpy(v16, v17, 4 * v3);
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v13 = *(void *)(v20 + 16);
      unint64_t v12 = *(void *)(v20 + 24);
      if (v13 >= v12 >> 1) {
        sub_1D1682814(v12 > 1, v13 + 1, 1);
      }
      ++v4;
      *(void *)(v20 + 16) = v13 + 1;
      *(void *)(v20 + 8 * v13 + 32) = v11;
      if (v1 == v4)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

void *MAFloatMatrixWrapper.data()()
{
  uint64_t result = (*(void *(**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(v4);
  unint64_t v2 = *(void *)(v4[0] + 16);
  if (v2 >> 61)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = sub_1D16629E0(v4[0] + 32, v4[0] + 32 + 4 * v2);
    swift_bridgeObjectRelease();
    return (void *)v3;
  }
  return result;
}

uint64_t MAFloatMatrixWrapper.description.getter()
{
  (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(v9);
  uint64_t v1 = v9[0];
  uint64_t v2 = v9[1];
  uint64_t v3 = v9[2];
  sub_1D16B0194();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  uint64_t result = sub_1D17BE030();
  if ((v2 & 0x8000000000000000) == 0)
  {
    if (!v2)
    {
LABEL_12:
      sub_1D17BE030();
      swift_bridgeObjectRelease();
      return 0x2878697274614DLL;
    }
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = v5 * v3;
      if ((unsigned __int128)(v5 * (__int128)v3) >> 64 != (v5 * v3) >> 63) {
        break;
      }
      uint64_t v7 = v6 + v3;
      if (__OFADD__(v6, v3)) {
        goto LABEL_14;
      }
      if (v7 < v6) {
        goto LABEL_15;
      }
      if (v6 < 0) {
        goto LABEL_16;
      }
      unint64_t v8 = *(void *)(v1 + 16);
      if (v8 < v6 || (uint64_t)v8 < v7) {
        goto LABEL_17;
      }
      ++v5;
      swift_bridgeObjectRetain();
      sub_1D17BE6A0();
      sub_1D17BE030();
      sub_1D17BE030();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v2 == v5)
      {
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall MAMutableFloatMatrixWrapper.setFloat(_:at:column:)(Swift::Float _, Swift::Int at, Swift::Int column)
{
  uint64_t v7 = v4 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix;
  Swift::Int v8 = *(void *)(v7 + 8);
  Swift::Int v9 = *(void *)(v7 + 16);
  if (v8 < at || v9 <= column)
  {
    __break(1u);
    goto LABEL_14;
  }
  Swift::Int v11 = at * v9;
  if ((unsigned __int128)(at * (__int128)v9) >> 64 != (at * v9) >> 63)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v5 = v11 + column;
  if (__OFADD__(v11, column))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  Swift::Float v6 = _;
  uint64_t v3 = *(char **)v7;
  swift_bridgeObjectRetain();
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_9;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_16:
  uint64_t v3 = sub_1D166762C((uint64_t)v3);
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_17;
  }
LABEL_9:
  if (v5 >= *((void *)v3 + 2))
  {
LABEL_18:
    __break(1u);
    return;
  }
  *(Swift::Float *)&v3[4 * v5 + 32] = v6;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = v8;
  *(void *)(v7 + 16) = v9;
  swift_bridgeObjectRelease();
}

void *MAFloatMatrixWrapper.matrixBySubtractingMatrix(_:)(void *a1)
{
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = (*(void *(**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(v25);
  uint64_t v5 = v25[0];
  uint64_t v6 = v25[1];
  uint64_t v7 = v25[2];
  uint64_t result = (*(void *(**)(void *__return_ptr, void *))((*v3 & *a1) + 0x70))(v24, v4);
  if (v6 != v24[1] || v7 != v24[2])
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v21 = v5;
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v18 = v24[0];
  uint64_t v19 = v6;
  uint64_t v20 = v7;
  uint64_t v11 = MEMORY[0x1F4188790](*(void *)(v5 + 16), v9);
  uint64_t v12 = sub_1D16672CC(v11, (uint64_t (*)(void *, uint64_t *))sub_1D16B0C04);
  uint64_t v13 = *(void *)(v12 + 16);
  swift_bridgeObjectRelease();
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
    goto LABEL_9;
  }
  if (v13 == v6 * v7)
  {
    int64_t v14 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
    uint64_t v15 = (char *)objc_allocWithZone(v14);
    uint64_t v16 = (uint64_t *)&v15[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
    *uint64_t v16 = v12;
    v16[1] = v6;
    void v16[2] = v7;
    v17.receiver = v15;
    v17.super_class = v14;
    return objc_msgSendSuper2(&v17, sel_init);
  }
LABEL_10:
  __break(1u);
  return result;
}

id MAFloatMatrixWrapper.matrixBySubtractingScalar(_:)()
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(&v13);
  uint64_t v1 = v14;
  uint64_t v2 = v15;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  uint64_t v12 = v15;
  uint64_t v3 = sub_1D16672CC(*(void *)(v13 + 16), (uint64_t (*)(void *, uint64_t *))sub_1D16B0C30);
  uint64_t v4 = *(void *)(v3 + 16);
  id result = (id)swift_bridgeObjectRelease();
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 == (v1 * v2) >> 63)
  {
    if (v4 == v1 * v2)
    {
      uint64_t v6 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
      uint64_t v7 = (char *)objc_allocWithZone(v6);
      Swift::Int v8 = (uint64_t *)&v7[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
      *Swift::Int v8 = v3;
      v8[1] = v1;
      void v8[2] = v2;
      v9.receiver = v7;
      v9.super_class = v6;
      return objc_msgSendSuper2(&v9, sel_init);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id MAFloatMatrixWrapper.matrixByAddingScalar(_:)()
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(&v13);
  uint64_t v1 = v14;
  uint64_t v2 = v15;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  uint64_t v12 = v15;
  uint64_t v3 = sub_1D16672CC(*(void *)(v13 + 16), (uint64_t (*)(void *, uint64_t *))sub_1D16B0C30);
  uint64_t v4 = *(void *)(v3 + 16);
  id result = (id)swift_bridgeObjectRelease();
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 == (v1 * v2) >> 63)
  {
    if (v4 == v1 * v2)
    {
      uint64_t v6 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
      uint64_t v7 = (char *)objc_allocWithZone(v6);
      Swift::Int v8 = (uint64_t *)&v7[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
      *Swift::Int v8 = v3;
      v8[1] = v1;
      void v8[2] = v2;
      v9.receiver = v7;
      v9.super_class = v6;
      return objc_msgSendSuper2(&v9, sel_init);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t MAMutableFloatMatrixWrapper.subtract(_:)(const float *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = a1;
  (*(void (**)(const float **__return_ptr))((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 0x70))(&v11);
  uint64_t v5 = v12;
  uint64_t v6 = v13;
  uint64_t v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  if (*(void *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 8) == v12
    && *(void *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 16) == v13)
  {
    uint64_t v4 = v11;
    uint64_t v3 = *v7;
    vDSP_Length v2 = *(void *)(*v7 + 16);
    if (*((void *)v11 + 2) == v2)
    {
      swift_bridgeObjectRetain_n();
      objc_super v9 = (char *)v3;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_8;
      }
      goto LABEL_12;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_12:
  objc_super v9 = sub_1D166762C(v3);
LABEL_8:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  vDSP_vsub(v4 + 8, 1, (const float *)(v3 + 32), 1, (float *)v9 + 8, 1, v2);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  *uint64_t v7 = (uint64_t)v9;
  v7[1] = v5;
  void v7[2] = v6;
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatMatrixWrapper.subtract(_:)(Swift::Float a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  uint64_t v5 = *(char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 8);
  uint64_t v6 = *(char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 16);
  vDSP_Length v7 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain_n();
  Swift::Int v8 = (char *)v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::Int v8 = sub_1D166762C(v4);
  }
  float __B = -a1;
  swift_bridgeObjectRetain();
  vDSP_vsadd((const float *)(v4 + 32), 1, &__B, (float *)v8 + 8, 1, v7);
  swift_bridgeObjectRelease_n();
  *uint64_t v3 = v8;
  v3[1] = v5;
  v3[2] = v6;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MAMutableFloatMatrixWrapper.add(_:)(Swift::Float a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  uint64_t v5 = *(char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 8);
  uint64_t v6 = *(char **)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 16);
  vDSP_Length v7 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain_n();
  Swift::Int v8 = (char *)v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::Int v8 = sub_1D166762C(v4);
  }
  Swift::Float __B = a1;
  swift_bridgeObjectRetain();
  vDSP_vsadd((const float *)(v4 + 32), 1, &__B, (float *)v8 + 8, 1, v7);
  swift_bridgeObjectRelease_n();
  *uint64_t v3 = v8;
  v3[1] = v5;
  v3[2] = v6;
  swift_bridgeObjectRelease();
}

id MAFloatMatrixWrapper.sumAlongAxis(_:)(uint64_t a1)
{
  return sub_1D16AF2FC(a1, MEMORY[0x1E4F16A38]);
}

id MAFloatMatrixWrapper.meanAlongAxis(_:)(uint64_t a1)
{
  return sub_1D16AF2FC(a1, MEMORY[0x1E4F169A0]);
}

id sub_1D16AF2FC(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x70))(&v18);
  uint64_t v5 = v18;
  uint64_t v6 = v20;
  if (!a1)
  {
    if ((v19 & 0x8000000000000000) == 0)
    {
      if (v19)
      {
        uint64_t v7 = 1;
        uint64_t v8 = v20;
        uint64_t v9 = v20;
        uint64_t v6 = v19;
        goto LABEL_9;
      }
      goto LABEL_14;
    }
LABEL_18:
    sub_1D17BEA30();
    __break(1u);
    goto LABEL_19;
  }
  if (a1 != 1)
  {
LABEL_19:
    type metadata accessor for MatrixAxis(0);
    id result = (id)sub_1D17BEBF0();
    __break(1u);
    return result;
  }
  if (v20 < 0) {
    goto LABEL_18;
  }
  if (v20)
  {
    uint64_t v9 = 1;
    uint64_t v8 = v19;
    uint64_t v7 = v20;
LABEL_9:
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1D17BE1C0();
    uint64_t v11 = 0;
    *(void *)(v10 + 16) = v6;
    uint64_t v12 = v10 + 32;
    while (1)
    {
      uint64_t v13 = v11 * v9;
      if ((unsigned __int128)(v11 * (__int128)v9) >> 64 != (v11 * v9) >> 63) {
        break;
      }
      if (v8 < 0) {
        goto LABEL_17;
      }
      ++v11;
      a2(v5 + 32 + 4 * v13, v7, v12, v8);
      v12 += 4;
      if (v6 == v11) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    sub_1D17BEA30();
    __break(1u);
    goto LABEL_18;
  }
LABEL_14:
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  uint64_t v10 = MEMORY[0x1E4FBC860];
LABEL_15:
  *(void *)(v10 + 16) = v6;
  swift_bridgeObjectRelease_n();
  uint64_t v14 = (objc_class *)type metadata accessor for MAFloatVectorWrapper();
  uint64_t v15 = (char *)objc_allocWithZone(v14);
  *(void *)&v15[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatVectorWrapper__floatVector] = v10;
  v17.receiver = v15;
  v17.super_class = v14;
  return objc_msgSendSuper2(&v17, sel_init);
}

void *MAFloatMatrixWrapper.appendingColumn(_:)(void *a1)
{
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = (*(void *(**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(v18);
  uint64_t v6 = v18[0];
  uint64_t v5 = v18[1];
  uint64_t v7 = v18[2];
  id result = (*(void *(**)(uint64_t *__return_ptr, void *))((*v3 & *a1) + 0x70))(&v17, v4);
  uint64_t v9 = v17;
  if (v5 != *(void *)(v17 + 16))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((unsigned __int128)(v5 * (__int128)v10) >> 64 != (v5 * v10) >> 63)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1D16B0C70(v5 * v10, v6, v5, v7, v9, v5, v7 + 1, v5, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v11 + 16);
  swift_bridgeObjectRelease();
  id result = (void *)swift_bridgeObjectRelease();
  if (v12 == v5 * v10)
  {
    uint64_t v13 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
    uint64_t v14 = (char *)objc_allocWithZone(v13);
    uint64_t v15 = (uint64_t *)&v14[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
    uint64_t *v15 = v11;
    v15[1] = v5;
    void v15[2] = v10;
    v16.receiver = v14;
    v16.super_class = v13;
    return objc_msgSendSuper2(&v16, sel_init);
  }
LABEL_9:
  __break(1u);
  return result;
}

id MAFloatMatrixWrapper.appendingColumns(of:)(void *a1)
{
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = (*(void *(**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(v16);
  uint64_t v5 = v16[0];
  uint64_t v6 = v16[1];
  uint64_t v7 = v16[2];
  (*(void (**)(uint64_t *__return_ptr, void *))((*v3 & *a1) + 0x70))(v15, v4);
  sub_1D16AF894(v15[0], v15[1], v15[2], v5, v6, v7, (uint64_t *)&v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v13 = v17;
  uint64_t v8 = v18;
  uint64_t v9 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  uint64_t v11 = &v10[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
  *(_OWORD *)uint64_t v11 = v13;
  *((void *)v11 + 2) = v8;
  v14.receiver = v10;
  v14.super_class = v9;
  return objc_msgSendSuper2(&v14, sel_init);
}

uint64_t sub_1D16AF894@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  if (a2 != a5)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v9 = a6 + a3;
  if (__OFADD__(a6, a3))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v12 = result;
  uint64_t v14 = *(void *)(a4 + 16);
  if (v14)
  {
    uint64_t v15 = a2 * v9;
    if (*(void *)(result + 16))
    {
      if ((unsigned __int128)(a2 * (__int128)v9) >> 64 == (a2 * v9) >> 63)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v16 = sub_1D16B0E28(a2 * v9, a4, a2, a6, v12, a2, a3, a2, v9, a2, a6, a2, a3);
        swift_bridgeObjectRelease();
        id result = swift_bridgeObjectRelease();
        if (*(void *)(v16 + 16) == v15)
        {
          *a7 = v16;
          a7[1] = a2;
          a7[2] = v9;
          return result;
        }
        goto LABEL_20;
      }
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    if ((unsigned __int128)(a2 * (__int128)v9) >> 64 != (a2 * v9) >> 63)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (v14 != v15)
    {
LABEL_24:
      __break(1u);
      return result;
    }
    *a7 = a4;
    a7[1] = a2;
    a7[2] = v9;
  }
  else
  {
    if ((unsigned __int128)(a2 * (__int128)v9) >> 64 != (a2 * v9) >> 63)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    if (*(void *)(result + 16) != a2 * v9)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    *a7 = result;
    a7[1] = a2;
    a7[2] = v9;
  }
  return swift_bridgeObjectRetain();
}

uint64_t MAMutableFloatMatrixWrapper.appendRow(_:)(void *a1)
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70))(&v8);
  uint64_t v2 = v8;
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 8);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix);
  uint64_t v5 = *(void *)(v8 + 16);
  if (v4 && v5 != *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix + 16)) {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_1D16633B0(v2);
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *uint64_t v3 = v7;
    v3[1] = v4 + 1;
    v3[2] = v5;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t MAFloatMatrixWrapper.isApproximatelyEqual(to:)(void *a1)
{
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = (*(void *(**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(v10);
  uint64_t v5 = v10[0];
  (*(void (**)(void *__return_ptr, void *))((*v3 & *a1) + 0x70))(v9, v4);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6 == *(void *)(v9[0] + 16)) {
    unsigned __int8 v7 = sub_1D1667EB0((float *)(v9[0] + 32), v6, (float *)(v5 + 32), 0.00000011921, 0.00000011921);
  }
  else {
    unsigned __int8 v7 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t MAFloatMatrixWrapper.isApproximatelyEqual(to:epsilon:)(void *a1, float a2)
{
  uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v6 = (*(void *(**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x70))(v12);
  uint64_t v7 = v12[0];
  (*(void (**)(void *__return_ptr, void *))((*v5 & *a1) + 0x70))(v11, v6);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8 == *(void *)(v11[0] + 16)) {
    unsigned __int8 v9 = sub_1D1667EB0((float *)(v11[0] + 32), v8, (float *)(v7 + 32), 0.0, a2);
  }
  else {
    unsigned __int8 v9 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t MAFloatMatrixWrapper.isEqual(_:)(uint64_t a1)
{
  sub_1D1667F54(a1, (uint64_t)v14);
  if (!v14[3])
  {
    sub_1D167133C((uint64_t)v14);
    return 0;
  }
  type metadata accessor for MAFloatMatrixWrapper();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v2 = (void *)v13[0];
  if ((void *)v13[0] == v1)
  {

    return 1;
  }
  else
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v4 = (*(void *(**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(v14);
    uint64_t v5 = v14[0];
    uint64_t v6 = v14[1];
    uint64_t v7 = v14[2];
    (*(void (**)(uint64_t *__return_ptr, void *))((*v3 & *(void *)v13[0]) + 0x70))(v13, v4);
    uint64_t v8 = v13[1];
    uint64_t v9 = v13[2];
    BOOL v10 = sub_1D1666884(v5, v13[0]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    BOOL v11 = v7 == v9;
    if (v6 != v8) {
      BOOL v11 = 0;
    }
    return v10 && v11;
  }
}

uint64_t MAFloatMatrixWrapper.hash.getter()
{
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(&v5);
  uint64_t v1 = v5;
  sub_1D17BED20();
  sub_1D16668F8((uint64_t)&v4, v1);
  sub_1D17BED30();
  sub_1D17BED30();
  uint64_t v2 = sub_1D17BED80();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1D16B0194()
{
  return 40;
}

char *sub_1D16B025C(char *result, int a2, void **a3, char *__src, int a5, uint64_t a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9 = (char *)*a3;
  if (!*a3) {
    goto LABEL_21;
  }
  if (!__src)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  BOOL v10 = result;
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_18;
  }
  if (a6 < 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (!a6) {
    return result;
  }
  if ((a9 & 0x8000000000000000) == 0)
  {
    size_t v11 = 4 * a9;
    if (&v9[4 * a9] <= __src || &__src[v11] <= v9)
    {
      uint64_t v12 = 8 * a9;
      uint64_t v13 = a6 - 1;
      do
      {
        uint64_t v14 = __src;
        uint64_t v15 = &v9[v11];
        uint64_t result = (char *)memcpy(v9, __src, v11);
        unint64_t v16 = (unint64_t)&v9[v11 + 4];
        if ((unint64_t)v10 < v16 && v15 < v10 + 4) {
          break;
        }
        *(_DWORD *)uint64_t v15 = *(_DWORD *)v10;
        if (!v13) {
          return result;
        }
        unint64_t v18 = (unint64_t)&v9[v12 + 4];
        __src = &v14[v11];
        v9 += v11 + 4;
        v10 += 4;
        --v13;
      }
      while ((unint64_t)&v14[v11] >= v18 || v16 >= (unint64_t)&v14[v12]);
    }
  }
LABEL_18:
  uint64_t result = (char *)sub_1D17BEB20();
  __break(1u);
  return result;
}

char *sub_1D16B03F0(char *result, int a2, void **a3, char *__src, int a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  size_t v11 = (char *)*a3;
  if (!*a3) {
    goto LABEL_19;
  }
  if (!__src)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v12 = result;
  if (!result)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    uint64_t result = (char *)sub_1D17BEB20();
    __break(1u);
    return result;
  }
  uint64_t v13 = a6;
  if (a6 < 0)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a6)
  {
    if ((a9 & 0x8000000000000000) == 0)
    {
      size_t v14 = 4 * a9;
      if (&v11[4 * a9] <= __src || &__src[v14] <= v11)
      {
        size_t v15 = 4 * a11;
        size_t v16 = 4 * a11 + v14;
        while (1)
        {
          long long v17 = __src;
          memcpy(v11, __src, v14);
          if (a11 < 0) {
            break;
          }
          unint64_t v18 = &v11[v14];
          unint64_t v19 = (unint64_t)&v11[v16];
          uint64_t v20 = &v12[v15];
          if (v12 < &v11[v16] && v18 < v20) {
            break;
          }
          uint64_t result = (char *)memcpy(v18, v12, v15);
          if (!--v13) {
            return result;
          }
          __src = &v17[v14];
          uint64_t v21 = &v11[8 * a9 + 4 * a11];
          v12 += v15;
          v11 += v16;
          if (&v17[v14] < v21)
          {
            uint64_t v12 = v20;
            size_t v11 = (char *)v19;
            if (v19 < (unint64_t)&v17[8 * a9]) {
              break;
            }
          }
        }
      }
    }
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_1D16B05B8(uint64_t result, vDSP_Length *a2, uint64_t a3, uint64_t a4)
{
  vDSP_Length v4 = *(void *)(result + 8);
  if (*(void *)(a3 + 16) != v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(void *)(a4 + 16) != v4)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = *(float **)result;
  if (*(void *)result)
  {
    uint64_t v8 = (const float *)(a3 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    vDSP_vsub((const float *)(a4 + 32), 1, v8, 1, v6, 1, v4);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1D16B067C(uint64_t result, vDSP_Length *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  vDSP_Length v6 = *(void *)(result + 8);
  if (*(void *)(a3 + 16) != v6)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(void *)(a6 + 16) != v6)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v8 = *(float **)result;
  if (*(void *)result)
  {
    BOOL v10 = (const float *)(a3 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    vDSP_vsub((const float *)(a6 + 32), 1, v10, 1, v8, 1, v6);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1D16B0740(uint64_t a1, vDSP_Length *a2, uint64_t a3, float a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  vDSP_Length v4 = *(void *)(a1 + 8);
  if (*(void *)(a3 + 16) != v4)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  float __B = a4;
  uint64_t v5 = *(float **)a1;
  if (!*(void *)a1) {
    goto LABEL_5;
  }
  uint64_t v7 = (const float *)(a3 + 32);
  swift_bridgeObjectRetain();
  vDSP_vsadd(v7, 1, &__B, v5, 1, v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

id _s17KnowledgeGraphKit20MAFloatMatrixWrapperC8fromData4data4rows7columnsAC10Foundation0H0V_S2itFZ_0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v15 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1) {
        goto LABEL_37;
      }
      sub_1D16B0F80(a1, a2);
      uint64_t v16 = sub_1D17BDCB0();
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = sub_1D17BDCD0();
        uint64_t v19 = (int)a1 - v18;
        if (__OFSUB__((int)a1, v18)) {
          goto LABEL_49;
        }
        uint64_t v20 = sub_1D17BDCC0();
        uint64_t v21 = (char *)(v17 + v19);
        if (v20 >= v15) {
          uint64_t v20 = (a1 >> 32) - (int)a1;
        }
        uint64_t v22 = v20 / 4;
      }
      else
      {
        sub_1D17BDCC0();
        uint64_t v21 = 0;
        uint64_t v22 = 0;
      }
      uint64_t v42 = a3 * a4;
      if ((unsigned __int128)(a3 * (__int128)a4) >> 64 != (a3 * a4) >> 63) {
        goto LABEL_42;
      }
      if (v22 != v42) {
        goto LABEL_46;
      }
      uint64_t v43 = sub_1D1666A30(v21, a3 * a4);
      if (*(void *)(v43 + 16) == v42)
      {
        uint64_t v44 = v43;
        char v45 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
        uint64_t v46 = (char *)objc_allocWithZone(v45);
        uint64_t v47 = &v46[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
        *(void *)uint64_t v47 = v44;
        *((void *)v47 + 1) = a3;
        *((void *)v47 + 2) = a4;
        v57.receiver = v46;
        v57.super_class = v45;
        id v38 = objc_msgSendSuper2(&v57, sel_init);
        sub_1D1668030(a1, a2);
        return v38;
      }
      goto LABEL_47;
    case 2uLL:
      uint64_t v23 = *(void *)(a1 + 16);
      uint64_t v24 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v25 = (char *)sub_1D17BDCB0();
      if (!v25) {
        goto LABEL_15;
      }
      uint64_t v26 = sub_1D17BDCD0();
      if (__OFSUB__(v23, v26)) {
        goto LABEL_48;
      }
      v25 += v23 - v26;
LABEL_15:
      BOOL v27 = __OFSUB__(v24, v23);
      uint64_t v28 = v24 - v23;
      if (v27) {
        goto LABEL_38;
      }
      uint64_t v29 = sub_1D17BDCC0();
      if (v29 >= v28) {
        uint64_t v30 = v28;
      }
      else {
        uint64_t v30 = v29;
      }
      uint64_t v31 = v30 / 4;
      if (!v25) {
        uint64_t v31 = 0;
      }
      uint64_t v32 = a3 * a4;
      if ((unsigned __int128)(a3 * (__int128)a4) >> 64 != (a3 * a4) >> 63) {
        goto LABEL_39;
      }
      if (v31 != v32) {
        goto LABEL_44;
      }
      uint64_t v33 = sub_1D1666A30(v25, a3 * a4);
      if (*(void *)(v33 + 16) != v32) {
        goto LABEL_45;
      }
      uint64_t v34 = v33;
      uint64_t v35 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
      BOOL v36 = (char *)objc_allocWithZone(v35);
      uint64_t v37 = &v36[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
      *(void *)uint64_t v37 = v34;
      *((void *)v37 + 1) = a3;
      *((void *)v37 + 2) = a4;
      v58.receiver = v36;
      v58.super_class = v35;
      id v38 = objc_msgSendSuper2(&v58, sel_init);
      swift_release();
      swift_release();
      return v38;
    case 3uLL:
      if ((unsigned __int128)(a3 * (__int128)a4) >> 64 != (a3 * a4) >> 63) {
        goto LABEL_40;
      }
      if (a3 * a4) {
        goto LABEL_41;
      }
      unint64_t v39 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
      char v40 = (char *)objc_allocWithZone(v39);
      uint64_t v41 = &v40[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
      *(void *)uint64_t v41 = MEMORY[0x1E4FBC860];
      *((void *)v41 + 1) = a3;
      *((void *)v41 + 2) = a4;
      v49.receiver = v40;
      v49.super_class = v39;
      return objc_msgSendSuper2(&v49, sel_init);
    default:
      uint64_t v51 = a1;
      __int16 v52 = a2;
      char v53 = BYTE2(a2);
      char v54 = BYTE3(a2);
      uint64_t v8 = a3 * a4;
      char v55 = BYTE4(a2);
      char v56 = BYTE5(a2);
      if ((unsigned __int128)(a3 * (__int128)a4) >> 64 != (a3 * a4) >> 63)
      {
        __break(1u);
        goto LABEL_36;
      }
      if (((a2 >> 50) & 0x3F) != v8)
      {
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
      }
      uint64_t v9 = sub_1D1666A30((char *)&v51, a3 * a4);
      if (*(void *)(v9 + 16) != v8) {
        goto LABEL_43;
      }
      uint64_t v10 = v9;
      size_t v11 = (objc_class *)type metadata accessor for MAFloatMatrixWrapper();
      uint64_t v12 = (char *)objc_allocWithZone(v11);
      uint64_t v13 = &v12[OBJC_IVAR____TtC17KnowledgeGraphKit20MAFloatMatrixWrapper__floatMatrix];
      *(void *)uint64_t v13 = v10;
      *((void *)v13 + 1) = a3;
      *((void *)v13 + 2) = a4;
      v50.receiver = v12;
      v50.super_class = v11;
      return objc_msgSendSuper2(&v50, sel_init);
  }
}

uint64_t type metadata accessor for MAMutableFloatMatrixWrapper()
{
  return self;
}

uint64_t sub_1D16B0C04(uint64_t a1, vDSP_Length *a2)
{
  return sub_1D16B067C(a1, a2, **(void **)(v2 + 16), *(void *)(*(void *)(v2 + 16) + 8), *(void *)(*(void *)(v2 + 16) + 16), **(void **)(v2 + 24));
}

uint64_t sub_1D16B0C30(uint64_t a1, vDSP_Length *a2)
{
  return sub_1D16B0C48(a1, a2);
}

uint64_t sub_1D16B0C48(uint64_t a1, vDSP_Length *a2)
{
  return sub_1D16B0740(a1, a2, **(void **)(v2 + 24), *(float *)(v2 + 16));
}

uint64_t sub_1D16B0C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    if (a1)
    {
      uint64_t v15 = sub_1D17BE1C0();
      *(void *)(v15 + 16) = a1;
    }
    else
    {
      uint64_t v15 = MEMORY[0x1E4FBC860];
    }
    v18[0] = (void *)(v15 + 32);
    v18[1] = (void *)a1;
    sub_1D16B025C((char *)(a5 + 32), *(void *)(a5 + 16), v18, (char *)(a2 + 32), *(void *)(a2 + 16), a6, a7, a8, a9);
    uint64_t v16 = a6 * a7;
    if ((unsigned __int128)(a6 * (__int128)a7) >> 64 == (a6 * a7) >> 63)
    {
      if (v16 <= a1)
      {
        *(void *)(v15 + 16) = v16;
        return v15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t method lookup function for MAFloatMatrixWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MAFloatMatrixWrapper);
}

uint64_t dispatch thunk of MAFloatMatrixWrapper.floatMatrix.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of MAFloatMatrixWrapper.__allocating_init(floatMatrix:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of MAFloatMatrixWrapper.__allocating_init(rows:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_1D16B0E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = a2;
  if ((a1 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = a12;
    if (a1)
    {
      uint64_t v23 = a2;
      uint64_t v18 = sub_1D17BE1C0();
      uint64_t v17 = a12;
      uint64_t v14 = v23;
      uint64_t v19 = v18;
      *(void *)(v18 + 16) = a1;
    }
    else
    {
      uint64_t v19 = MEMORY[0x1E4FBC860];
    }
    v22[0] = (void *)(v19 + 32);
    v22[1] = (void *)a1;
    sub_1D16B03F0((char *)(a5 + 32), *(void *)(a5 + 16), v22, (char *)(v14 + 32), *(void *)(v14 + 16), a8, a9, a10, a11, v17, a13);
    uint64_t v20 = a8 * a9;
    if ((unsigned __int128)(a8 * (__int128)a9) >> 64 == (a8 * a9) >> 63)
    {
      if (v20 <= a1)
      {
        *(void *)(v19 + 16) = v20;
        return v19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t sub_1D16B0F80(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t AbstractGraph.nodeIdentifiers(matching:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  vDSP_Length v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  id v10 = objc_msgSend(v6, sel_nodeIdentifiersMatchingFilter_, v9);

  objc_msgSend(v10, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v12;
  *a4 = result;
  return result;
}

void AbstractGraph.nodeIdentifiers(matching:in:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  id v9 = *(id *)(*(void *)a2 + 16);
  sub_1D16B2280((uint64_t)v9, a1, a3, a4, a5);
}

id ConcreteGraph.kgGraph.getter()
{
  uint64_t v0 = (void *)sub_1D16B23D8();
  return v0;
}

id ConcreteGraph.entityFactory.getter()
{
  id v0 = objc_msgSend((id)sub_1D16B23D8(), sel_entityFactory);
  return v0;
}

uint64_t ConcreteGraph.perform<>(_:)(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return MEMORY[0x1F4188298](sub_1D16B1290);
}

uint64_t sub_1D16B1290()
{
  uint64_t v1 = v0[4];
  if (*(unsigned char *)(v1 + 24) != 1) {
    return sub_1D17BEA40();
  }
  uint64_t v2 = *(void **)(v1 + 16);
  v0[2] = 0;
  unsigned __int8 v3 = objc_msgSend(v2, sel_performChangesAndWait_error_, v0[3], v0 + 2);
  uint64_t v4 = (void *)v0[2];
  if (v3)
  {
    id v9 = (uint64_t (*)(void))v0[1];
    id v5 = v4;
    vDSP_Length v6 = v9;
  }
  else
  {
    id v8 = v4;
    sub_1D17BDCF0();

    swift_willThrow();
    vDSP_Length v6 = (uint64_t (*)(void))v0[1];
  }
  return v6();
}

uint64_t ConcreteGraph.deinit()
{
  return v0;
}

uint64_t ConcreteGraph.__deallocating_deinit()
{
  return MEMORY[0x1F4186488](v0, 25, 7);
}

id sub_1D16B1474()
{
  uint64_t v0 = (void *)sub_1D16B23D8();
  return v0;
}

uint64_t ConcreteGraph.description.getter()
{
  if (*(unsigned char *)(v0 + 24) != 1) {
    return 0xD000000000000015;
  }
  sub_1D17BE850();
  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)sub_1D16B23D8();
  uint64_t v2 = self;
  id v3 = v1;
  id v4 = [v2 any];
  id v5 = objc_msgSend(v3, sel_nodeIdentifiersMatchingFilter_, v4);

  objc_msgSend(v5, sel_count);
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  vDSP_Length v6 = (void *)sub_1D16B23D8();
  uint64_t v7 = self;
  id v8 = v6;
  id v9 = [v7 any];
  id v10 = objc_msgSend(v8, sel_edgeIdentifiersMatchingFilter_, v9);

  objc_msgSend(v10, sel_count);
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  return 0x6168206870617247;
}

uint64_t sub_1D16B16DC()
{
  return ConcreteGraph.description.getter();
}

void sub_1D16B1700(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  id v11 = *(id *)(*(void *)a1 + 16);
  sub_1D16B178C((uint64_t)v11, a3, a2, a4, a5, a6);
}

void sub_1D16B178C(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  id v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  uint64_t v11 = a3[3];
  uint64_t v12 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v11);
  uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  id v14 = objc_msgSend(v10, sel_neighborNodeIdentifiersWithStartNodeIdentifiers_edgeDirection_edgeFilter_, a1, a2, v13);

  id v15 = v14;
  objc_msgSend(v15, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v17;

  *a6 = v16;
}

uint64_t sub_1D16B1900@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  id v11 = *(id *)(*(void *)a1 + 16);
  sub_1D16B1E80((uint64_t)v11, a2, a3, a4, a5, (SEL *)&selRef_adjacencyWithSourceNodeIdentifiers_edgeFilter_edgeDirection_, v18);

  uint64_t v12 = (void *)v18[0];
  unint64_t v19 = sub_1D165F754(MEMORY[0x1E4FBC860]);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = &v19;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1D16B258C;
  *(void *)(v14 + 24) = v13;
  v18[4] = sub_1D16B2610;
  void v18[5] = v14;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 1107296256;
  v18[2] = sub_1D16B1C50;
  void v18[3] = &block_descriptor_23;
  id v15 = _Block_copy(v18);
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_enumerateTargetsBySourceWith_, v15);

  _Block_release(v15);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v12)
  {
    __break(1u);
  }
  else
  {
    unint64_t v17 = v19;
    uint64_t result = swift_release();
    *a6 = v17;
  }
  return result;
}

uint64_t sub_1D16B1AC8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a4;
  *(void *)(v7 + 24) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_1D16B2540;
  *(void *)(v8 + 24) = v7;
  void v11[4] = sub_1D16B261C;
  void v11[5] = v8;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  _OWORD v11[2] = sub_1D16B1C20;
  void v11[3] = &block_descriptor_33;
  id v9 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(a2, sel_enumerateIdentifiersWithBlock_, v9);
  _Block_release(v9);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D16B1C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

void sub_1D16B1C50(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  vDSP_Length v6 = *(void (**)(uint64_t, id, uint64_t))(a1 + 32);
  id v7 = a3;
  v6(a2, v7, a4);
}

uint64_t sub_1D16B1CB8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  id v11 = *(id *)(*(void *)a1 + 16);
  sub_1D16B1E80((uint64_t)v11, a2, a3, a4, a5, (SEL *)&selRef_adjacencyWithTargetNodeIdentifiers_edgeFilter_edgeDirection_, v18);

  uint64_t v12 = (void *)v18[0];
  unint64_t v19 = sub_1D165F754(MEMORY[0x1E4FBC860]);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = &v19;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1D16B24F0;
  *(void *)(v14 + 24) = v13;
  v18[4] = sub_1D16B2508;
  void v18[5] = v14;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 1107296256;
  v18[2] = sub_1D16B1C50;
  void v18[3] = &block_descriptor;
  id v15 = _Block_copy(v18);
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_enumerateTargetsBySourceWith_, v15);

  _Block_release(v15);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v12)
  {
    __break(1u);
  }
  else
  {
    unint64_t v17 = v19;
    uint64_t result = swift_release();
    *a6 = v17;
  }
  return result;
}

void sub_1D16B1E80(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, SEL *a6@<X6>, void *a7@<X8>)
{
  uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  uint64_t v14 = a2[3];
  uint64_t v13 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v14);
  id v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(v14, v13);
  id v16 = objc_msgSend(v12, *a6, a1, v15, a3);

  *a7 = v16;
}

uint64_t sub_1D16B1F60(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a4;
  *(void *)(v7 + 24) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_1D16B2540;
  *(void *)(v8 + 24) = v7;
  void v11[4] = sub_1D16B2554;
  void v11[5] = v8;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  _OWORD v11[2] = sub_1D16B1C20;
  void v11[3] = &block_descriptor_13;
  id v9 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(a2, sel_enumerateIdentifiersWithBlock_, v9);
  _Block_release(v9);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a2) {
    __break(1u);
  }
  return result;
}

id sub_1D16B20B8(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _OWORD v17[4] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  vDSP_Length v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  id v7 = objc_msgSend(v6, sel_implementation);

  id v8 = *(id *)(v5 + 16);
  objc_msgSend(v8, sel_copy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, &qword_1EBD27510);
  swift_dynamicCast();

  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  id v11 = (void *)sub_1D17BDFE0();
  swift_bridgeObjectRelease();
  v17[0] = 0;
  id v12 = objc_msgSend(v7, sel_propertiesForNodesWithIdentifiers_propertyName_error_, v16, v11, v17);
  swift_unknownObjectRelease();

  id v13 = v17[0];
  if (!v12)
  {
    uint64_t v14 = v13;
    sub_1D17BDCF0();

    swift_willThrow();
  }
  return v12;
}

uint64_t sub_1D16B2280@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  id v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v9);
  id v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  id v12 = objc_msgSend(v8, sel_nodeIdentifiersMatchingFilter_intersectingIdentifiers_, v11, a1);

  objc_msgSend(v12, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v14;
  *a5 = result;
  return result;
}

uint64_t sub_1D16B23D8()
{
  if (*(unsigned char *)(v0 + 24) == 1) {
    return *(void *)(v0 + 16);
  }
  uint64_t result = sub_1D17BEA40();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of AbstractGraph.kgGraph.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1D16B2464()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ConcreteGraph()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for ConcreteGraph(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConcreteGraph);
}

uint64_t sub_1D16B24E0()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D16B24F0(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1D16B1F60(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_1D16B24F8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D16B2508()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1D16B2530()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D16B2544()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D16B2554()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1D16B257C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D16B258C(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1D16B1AC8(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_1D16B2594()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D16B25A4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D16B25B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v4 = a1;
  uint64_t v5 = v2;
  return ElementIdentifierTupleSet.insert(_:)(&v7, &v6, &v5, &v4);
}

uint64_t sub_1D16B25F8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t static SparseElement<>.defaultSparseValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41852E0](a1, a3);
}

uint64_t dispatch thunk of static SparseElement.defaultSparseValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void sub_1D16B263C(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1D16B2644@<X0>(void *a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  *a3 = *a1;
  return sub_1D16AA89C(a2, (uint64_t)(a3 + 1));
}

uint64_t NodeAdjacency.sources.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_1D165E5B8(v3, &v6);
  sub_1D167C788(v1 + 8, (uint64_t)v5);
  return NodeCollection.init(with:in:)(&v6, v5, a1);
}

uint64_t NodeAdjacency.targets.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  id v4 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
  swift_bridgeObjectRetain();
  id v5 = objc_msgSend(v4, sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)&v8[0] = v6;
  uint64_t v9 = v3;
  sub_1D165CB78(&v9, (uint64_t)v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)&v8[0];
  sub_1D167C788((uint64_t)(v1 + 1), (uint64_t)v8);
  return NodeCollection.init(with:in:)(&v9, v8, a1);
}

uint64_t NodeAdjacency.sourcesCount.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

uint64_t NodeAdjacency.intersectingTargets(with:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1D16B2844(a1, (void (*)(uint64_t *, long long *, uint64_t))sub_1D165F854, a2);
}

uint64_t NodeAdjacency.intersectingSources(with:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t)(v2 + 1);
  v8[1] = *v2;
  v8[0] = *a1;
  DirectedBinaryAdjacency.intersectingSources(with:)(v8, v7);
  uint64_t v5 = *(void *)&v7[0];
  sub_1D167C788(v4, (uint64_t)v7);
  *a2 = v5;
  return sub_1D16AA89C(v7, (uint64_t)(a2 + 1));
}

uint64_t NodeAdjacency.subtractingTargets(with:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1D16B2844(a1, (void (*)(uint64_t *, long long *, uint64_t))sub_1D165FEA4, a2);
}

uint64_t sub_1D16B2844@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *, long long *, uint64_t)@<X2>, void *a3@<X8>)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *a1;
  *(void *)&v10[0] = sub_1D165F754(MEMORY[0x1E4FBC860]);
  uint64_t v11 = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  a2(&v11, v10, v7);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v8 = *(void *)&v10[0];
  sub_1D167C788((uint64_t)(v3 + 1), (uint64_t)v10);
  *a3 = v8;
  return sub_1D16AA89C(v10, (uint64_t)(a3 + 1));
}

uint64_t NodeAdjacency.subtractingSources(with:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *a1;
  *(void *)&v8[0] = sub_1D165F754(MEMORY[0x1E4FBC860]);
  uint64_t v9 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1D166011C(&v9, v5, (uint64_t *)v8);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v6 = *(void *)&v8[0];
  sub_1D167C788((uint64_t)(v2 + 1), (uint64_t)v8);
  *a2 = v6;
  return sub_1D16AA89C(v8, (uint64_t)(a2 + 1));
}

uint64_t NodeAdjacency.joinOnTargets<A>(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v9 = *v2;
  uint64_t v8 = v4;
  static ElementIdentifierTupleSet.joinOnTargets(_:_:)(&v9, &v8, (unint64_t *)v7);
  uint64_t v5 = *(void *)&v7[0];
  sub_1D167C788((uint64_t)(v2 + 1), (uint64_t)v7);
  *a2 = v5;
  return sub_1D16AA89C(v7, (uint64_t)(a2 + 1));
}

uint64_t NodeAdjacency.enumerateTargetsBySource(with:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D16B2A68(void *a1, uint64_t *a2, uint64_t a3, void (*a4)(void *, long long *, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a2;
  id v10 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_initWithElementIdentifier_, *a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)&v15[0] = v11;
  a6 += 8;
  sub_1D167C788(a6, (uint64_t)v17);
  NodeCollection.init(with:in:)(v15, v17, v18);
  uint64_t v16 = v9;
  sub_1D167C788(a6, (uint64_t)v15);
  NodeCollection.init(with:in:)(&v16, v15, v17);
  swift_retain();
  a4(v18, v17, a3);
  uint64_t v12 = type metadata accessor for NodeCollection();
  (*(void (**)(long long *, uint64_t))(*(void *)(v12 - 8) + 8))(v17, v12);
  uint64_t v13 = type metadata accessor for NodeCollection();
  return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v13 - 8) + 8))(v18, v13);
}

uint64_t NodeAdjacency.targets(forSources:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *(void *)&v5[0] = *v2;
  uint64_t v7 = *a1;
  DirectedBinaryAdjacency.targets(forSources:)(&v7, &v6);
  sub_1D167C788((uint64_t)(v2 + 1), (uint64_t)v5);
  return NodeCollection.init(with:in:)(&v6, v5, a2);
}

uint64_t NodeAdjacency.transposed()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (uint64_t)(v1 + 1);
  *(void *)&v6[0] = *v1;
  DirectedBinaryAdjacency.transposed()();
  uint64_t v4 = v7;
  sub_1D167C788(v3, (uint64_t)v6);
  *a1 = v4;
  return sub_1D16AA89C(v6, (uint64_t)(a1 + 1));
}

uint64_t NodeAdjacency.subtracting(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t)(v2 + 1);
  uint64_t v5 = *a1;
  *(void *)&v8[0] = *v2;
  uint64_t v9 = v5;
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.subtract(_:)((KnowledgeGraphKit::ElementIdentifierTupleSet)&v9);
  uint64_t v6 = *(void *)&v8[0];
  sub_1D167C788(v4, (uint64_t)v8);
  *a2 = v6;
  return sub_1D16AA89C(v8, (uint64_t)(a2 + 1));
}

uint64_t NodeAdjacency.union(with:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = (uint64_t)(v2 + 1);
  uint64_t v4 = *v2;
  uint64_t v6 = *a1;
  *(void *)&v9[0] = v4;
  uint64_t v10 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ElementIdentifierTupleSet.formUnion(_:)(&v10);
  uint64_t v7 = *(void *)&v9[0];
  sub_1D167C788(v5, (uint64_t)v9);
  *a2 = v7;
  return sub_1D16AA89C(v9, (uint64_t)(a2 + 1));
}

uint64_t NodeAdjacency.targets(minCount:)@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)&v5[0] = *v2;
  DirectedBinaryAdjacency.targets(minCount:)(a1, &v6);
  sub_1D167C788((uint64_t)(v2 + 1), (uint64_t)v5);
  return NodeCollection.init(with:in:)(&v6, v5, a2);
}

uint64_t static NodeAdjacency<>.identity(with:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t)(a1 + 1);
  uint64_t v7 = *a1;
  sub_1D165CF6C(&v7, (unint64_t *)v6);
  uint64_t v4 = *(void *)&v6[0];
  sub_1D167C788(v3, (uint64_t)v6);
  *a2 = v4;
  return sub_1D16AA89C(v6, (uint64_t)(a2 + 1));
}

uint64_t sub_1D16B2EB0(void *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1D16B2A68(a1, a2, a3, *(void (**)(void *, long long *, uint64_t))(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64));
}

uint64_t sub_1D16B2EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

uint64_t sub_1D16B2EEC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_0(v1);
}

uint64_t sub_1D16B2F28(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = a2 + 8;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = v4;
  uint64_t v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_bridgeObjectRetain();
  v6(a1 + 8, v3, v5);
  return a1;
}

void *sub_1D16B2FB0(void *a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, v3);
  return a1;
}

uint64_t sub_1D16B3008(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t sub_1D16B3060(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1D16B30A8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for NodeAdjacency()
{
  return swift_getGenericMetadata();
}

BOOL static MAError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MAError.hash(into:)()
{
  return sub_1D17BED30();
}

uint64_t MAError.hashValue.getter()
{
  return sub_1D17BED80();
}

unint64_t sub_1D16B3198()
{
  unint64_t result = qword_1EA6521B0[0];
  if (!qword_1EA6521B0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA6521B0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MAError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MAError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D16B3348);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MAError()
{
  return &type metadata for MAError;
}

__n128 UniqueSortedBuffer.SymmetricDifference.lhs.getter@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  long long v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 UniqueSortedBuffer.SymmetricDifference.rhs.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 32);
  long long v3 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t static UniqueSortedBuffer.SymmetricDifference.Index.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = 1;
  BOOL v3 = *(void *)a1 < *(void *)a2 || *(void *)(a1 + 8) < *(void *)(a2 + 8);
  if (!v3 && ((*(unsigned __int8 *)(a1 + 16) ^ 1 | *(unsigned __int8 *)(a2 + 16)) & 1) != 0) {
    char v2 = *(unsigned char *)(a1 + 17) & (*(unsigned char *)(a2 + 17) ^ 1);
  }
  return v2 & 1;
}

BOOL static UniqueSortedBuffer.SymmetricDifference.Index.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8);
  return ((v3 | *(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16) | *(unsigned __int8 *)(a2 + 17) ^ *(unsigned __int8 *)(a1 + 17)) & 1) == 0;
}

uint64_t UniqueSortedBuffer.SymmetricDifference.startIndex.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v3 = v2[1];
  long long v8 = *v2;
  long long v9 = v3;
  long long v4 = v2[3];
  long long v10 = v2[2];
  long long v11 = v4;
  v6[0] = -1;
  v6[1] = -1;
  __int16 v7 = 257;
  return UniqueSortedBuffer.SymmetricDifference.index(after:)((uint64_t)v6, a1, a2);
}

uint64_t UniqueSortedBuffer.SymmetricDifference.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v44 = a2;
  uint64_t v48 = *(void *)(a2 + 16);
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v41 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v4, v6);
  char v40 = (char *)&v34 - v8;
  uint64_t v9 = *(void *)(result + 8);
  uint64_t v49 = *(void *)result;
  uint64_t v50 = v9;
  char v10 = *(unsigned char *)(result + 16);
  char v11 = *(unsigned char *)(result + 17);
  uint64_t v13 = *v3;
  uint64_t v12 = v3[1];
  uint64_t v15 = v3[2];
  uint64_t v14 = v3[3];
  uint64_t v16 = v3[4];
  uint64_t v46 = v3[5];
  uint64_t v47 = v16;
  uint64_t v17 = v3[6];
  uint64_t v42 = v3[7];
  uint64_t v43 = v17;
  uint64_t v38 = v13;
  unint64_t v39 = (uint64_t (**)(char *, uint64_t))(v18 + 8);
  char v56 = v10;
  uint64_t v36 = v14;
  uint64_t v37 = v15;
  uint64_t v19 = v17;
  while ((v10 & 1) != 0)
  {
    BOOL v20 = __OFADD__(v49++, 1);
    if (v20) {
      goto LABEL_19;
    }
    if (v11) {
      goto LABEL_7;
    }
LABEL_8:
    uint64_t v52 = v13;
    uint64_t v53 = v12;
    uint64_t v54 = v15;
    uint64_t v55 = v14;
    uint64_t v45 = *(void *)(v44 + 24);
    type metadata accessor for UniqueSortedBuffer();
    uint64_t v21 = UniqueSortedBuffer.count.getter();
    uint64_t v22 = v49;
    char v56 = v49 != v21;
    uint64_t v52 = v47;
    uint64_t v53 = v46;
    uint64_t v23 = v42;
    uint64_t v54 = v19;
    uint64_t v55 = v42;
    uint64_t result = UniqueSortedBuffer.count.getter();
    if (v22 == v21 || v50 == result)
    {
      char v30 = v50 != result;
      char v29 = v56;
LABEL_17:
      uint64_t v32 = v35;
      uint64_t v33 = v50;
      void *v35 = v49;
      v32[1] = v33;
      *((unsigned char *)v32 + 16) = v29 & 1;
      *((unsigned char *)v32 + 17) = v30 & 1;
      return result;
    }
    uint64_t v52 = v13;
    uint64_t v53 = v12;
    uint64_t v54 = v15;
    uint64_t v55 = v14;
    uint64_t v25 = v50;
    uint64_t v26 = v48;
    uint64_t v51 = v49;
    sub_1D17BDFD0();
    swift_getWitnessTable();
    sub_1D17BECE0();
    BOOL v27 = v40;
    sub_1D17BECF0();
    uint64_t v52 = v47;
    uint64_t v53 = v46;
    uint64_t v54 = v19;
    uint64_t v55 = v23;
    uint64_t v51 = v25;
    uint64_t v28 = v41;
    sub_1D17BECF0();
    char v29 = sub_1D17BDF50();
    char v56 = v29 & 1;
    char v30 = sub_1D17BDF50();
    uint64_t v31 = *v39;
    (*v39)(v28, v26);
    uint64_t result = v31(v27, v26);
    uint64_t v13 = v38;
    if (v29)
    {
      char v10 = 1;
      char v11 = 1;
      uint64_t v14 = v36;
      uint64_t v15 = v37;
      if (v30) {
        continue;
      }
    }
    goto LABEL_17;
  }
  if ((v11 & 1) == 0)
  {
    char v29 = 0;
    char v30 = 0;
    goto LABEL_17;
  }
LABEL_7:
  BOOL v20 = __OFADD__(v50++, 1);
  if (!v20) {
    goto LABEL_8;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t UniqueSortedBuffer.SymmetricDifference.endIndex.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for UniqueSortedBuffer();
  uint64_t v2 = UniqueSortedBuffer.count.getter();
  uint64_t result = UniqueSortedBuffer.count.getter();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = result;
  *(_WORD *)(a1 + 16) = 0;
  return result;
}

uint64_t UniqueSortedBuffer.SymmetricDifference.subscript.getter()
{
  return sub_1D17BECF0();
}

uint64_t sub_1D16B38E0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D16B38FC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D16B3918()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D16B3934()
{
  return swift_getWitnessTable();
}

void (*sub_1D16B3958(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1D16B39C8(v6, a2, a3);
  return sub_1D167B268;
}

void (*sub_1D16B39C8(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v3 = *(void *)(a3 + 16);
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  a1[1] = v4;
  a1[2] = malloc(*(void *)(v4 + 64));
  UniqueSortedBuffer.SymmetricDifference.subscript.getter();
  return sub_1D1657898;
}

void sub_1D16B3A88(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
}

double sub_1D16B3AA8(uint64_t a1, uint64_t a2)
{
  UniqueSortedBuffer.SymmetricDifference.index(after:)(a1, a2, &v6);
  char v3 = v7;
  char v4 = v8;
  double result = *(double *)&v6;
  *(_OWORD *)a1 = v6;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;
  return result;
}

__n128 sub_1D16B3AF0@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v5 = v2[1];
  unint64_t v6 = v2[2];
  unint64_t v7 = v2[3];
  unint64_t v8 = v2[4];
  unint64_t v9 = v2[5];
  unint64_t v10 = v2[6];
  unint64_t v11 = v2[7];
  unint64_t v18 = *v2;
  unint64_t v4 = v18;
  unint64_t v19 = v5;
  unint64_t v20 = v6;
  unint64_t v21 = v7;
  unint64_t v22 = v8;
  unint64_t v23 = v9;
  unint64_t v24 = v10;
  unint64_t v25 = v11;
  UniqueSortedBuffer.SymmetricDifference.startIndex.getter(a1, &v15);
  unsigned __int8 v12 = v16;
  unsigned __int8 v13 = v17;
  __n128 result = v15;
  a2->n128_u64[0] = v4;
  a2->n128_u64[1] = v5;
  a2[1].n128_u64[0] = v6;
  a2[1].n128_u64[1] = v7;
  a2[2].n128_u64[0] = v8;
  a2[2].n128_u64[1] = v9;
  a2[3].n128_u64[0] = v10;
  a2[3].n128_u64[1] = v11;
  a2[4] = result;
  a2[5].n128_u8[0] = v12;
  a2[5].n128_u8[1] = v13;
  return result;
}

uint64_t sub_1D16B3B8C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t sub_1D16B3BE0()
{
  return sub_1D17BE440();
}

uint64_t sub_1D16B3C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MEMORY[0x1D25F8A50](a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1D16B3C80(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1D16B3CA0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

uint64_t type metadata accessor for UniqueSortedBuffer.SymmetricDifference()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D16B3CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t sub_1D16B3CFC(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1D16B3D50(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

uint64_t type metadata accessor for UniqueSortedBuffer.SymmetricDifference.Index()
{
  return __swift_instantiateGenericMetadata();
}

id Filter<A>.kgFilter.getter()
{
  id v0 = objc_allocWithZone((Class)KGNodeFilter);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)sub_1D17BE110();
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)sub_1D17BE110();
  swift_bridgeObjectRelease();
  unsigned int v3 = (void *)sub_1D17BDE30();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v0, sel_initWithRequiredLabels_optionalLabels_properties_, v1, v2, v3);

  return v4;
}

{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;

  id v0 = objc_allocWithZone((Class)KGEdgeFilter);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)sub_1D17BE110();
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)sub_1D17BE110();
  swift_bridgeObjectRelease();
  unsigned int v3 = (void *)sub_1D17BDE30();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v0, sel_initWithRequiredLabels_optionalLabels_properties_, v1, v2, v3);

  return v4;
}

uint64_t Filter<A>.relation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  v7[0] = v3;
  v7[1] = v4;
  long long v7[2] = v5;
  NodeFilterRelation.init(with:)(v7, *(void *)(a1 + 16), a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Filter<A>.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4FBC860];
  uint64_t result = FilterProperties.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860], &v5);
  uint64_t v4 = v5;
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v4;
  return result;
}

uint64_t dispatch thunk of NodeFilter.allOfLabels.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of NodeFilter.anyOfLabels.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of NodeFilter.properties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of NodeFilter.kgFilter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t Filter.init(with:anyOfLabels:properties:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = *a3;
  *a4 = result;
  a4[1] = a2;
  a4[2] = v4;
  return result;
}

uint64_t Filter.allOfLabels.getter()
{
  sub_1D169D83C();
  return swift_bridgeObjectRetain();
}

uint64_t Filter.anyOfLabels.getter()
{
  sub_1D169D844();
  return swift_bridgeObjectRetain();
}

uint64_t Filter.properties.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t Filter.init(with:properties:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *a3 = result;
  a3[1] = v4;
  a3[2] = v3;
  return result;
}

double Filter.init(with:properties:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *a3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA651720);
  uint64_t v8 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v8 + 16) = xmmword_1D17C91F0;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  *a4 = v8;
  a4[1] = v10;
  a4[2] = v7;
  return result;
}

uint64_t Filter.setting(properties:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = v7;
  sub_1D16AA8B4(v4, (uint64_t)sub_1D16AAC24, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v11);
  uint64_t v9 = v11;
  swift_bridgeObjectRelease();
  *a2 = v5;
  a2[1] = v6;
  a2[2] = v9;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Filter.addingPredicates<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v7 = v2[2];
  uint64_t v42 = v7;
  uint64_t v8 = type metadata accessor for ConcreteElementedTypedProperty();
  uint64_t v9 = type metadata accessor for BinaryPredicate();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v31 = v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  if (MEMORY[0x1D25F8C00](a1, TupleTypeMetadata2))
  {
    uint64_t v26 = a2;
    uint64_t v27 = v6;
    uint64_t v28 = v5;
    uint64_t v29 = TupleTypeMetadata2;
    uint64_t v11 = 0;
    uint64_t v12 = a1 + 32;
    uint64_t v30 = v9;
    uint64_t v13 = TupleTypeMetadata2;
    while (1)
    {
      uint64_t v14 = v7;
      char v15 = sub_1D17BE1E0();
      sub_1D17BE160();
      if ((v15 & 1) == 0) {
        break;
      }
      uint64_t v16 = *(void *)(v13 - 8);
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(&v38, v12, v13);
      uint64_t v18 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_18;
      }
      uint64_t v19 = v9;
      uint64_t v20 = v38;
      uint64_t v21 = v39;
      v35[0] = v38;
      v35[1] = v39;
      long long v36 = v40;
      long long v37 = v41;
      uint64_t v22 = *(void *)(v19 - 8);
      (*(void (**)(_OWORD *))(v22 + 16))(v33);
      v34[0] = v33[0];
      v34[1] = v33[1];
      uint64_t v7 = v14;
      if (*(void *)(v14 + 16))
      {
        swift_bridgeObjectRetain_n();
        unint64_t v23 = sub_1D165A868(v20, v21);
        if (v24)
        {
          sub_1D1668120(*(void *)(v14 + 56) + 32 * v23, (uint64_t)&v32);
        }
        else
        {
          long long v32 = 0u;
          v33[0] = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v33[0] + 1))
        {
          swift_bridgeObjectRelease();
          sub_1D167133C((uint64_t)&v32);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1D17BE520();
          sub_1D16B4678();
          unint64_t v25 = (void *)sub_1D17BE600();
          sub_1D17BDDB0();

          (*(void (**)(_OWORD *, uint64_t))(v22 + 8))(v34, v30);
          (*(void (**)(void *, uint64_t))(v16 + 8))(v35, v29);
          *uint64_t v26 = v27;
          v26[1] = v28;
          _OWORD v26[2] = v14;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          return swift_bridgeObjectRetain();
        }
      }
      else
      {
        long long v32 = 0u;
        v33[0] = 0u;
        swift_bridgeObjectRetain();
      }
      sub_1D167133C((uint64_t)&v32);
      *(void *)&long long v32 = v20;
      *((void *)&v32 + 1) = v21;
      uint64_t v9 = v30;
      sub_1D16AAC78((uint64_t)v34, (uint64_t)&v32, (uint64_t)&v42, v30, v31, (uint64_t)&protocol witness table for BinaryPredicate<A>, (uint64_t)&protocol witness table for ConcreteElementedTypedProperty<A, B>);
      (*(void (**)(_OWORD *, uint64_t))(v22 + 8))(v34, v30);
      uint64_t v13 = v29;
      (*(void (**)(void *, uint64_t))(v16 + 8))(v35, v29);
      swift_bridgeObjectRelease();
      ++v11;
      v12 += 48;
      if (v18 == MEMORY[0x1D25F8C00](a1, v29))
      {
        swift_bridgeObjectRelease();
        uint64_t v7 = v42;
        uint64_t v6 = v27;
        uint64_t v5 = v28;
        a2 = v26;
        goto LABEL_15;
      }
    }
    uint64_t result = sub_1D17BE8A0();
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_15:
    *a2 = v6;
    a2[1] = v5;
    a2[2] = v7;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

BOOL static CompoundFilter.CompoundType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t CompoundFilter.CompoundType.hash(into:)()
{
  return sub_1D17BED30();
}

uint64_t CompoundFilter.CompoundType.hashValue.getter()
{
  return sub_1D17BED80();
}

uint64_t sub_1D16B460C()
{
  return sub_1D17BED80();
}

uint64_t CompoundFilter.filters.getter()
{
  return swift_bridgeObjectRetain();
}

void CompoundFilter.type.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

uint64_t static CompoundFilter.and(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(unsigned char *)(a2 + 8) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t static CompoundFilter.or(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(unsigned char *)(a2 + 8) = 1;
  return swift_bridgeObjectRetain();
}

unint64_t sub_1D16B4678()
{
  unint64_t result = qword_1EA651920;
  if (!qword_1EA651920)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_1EA651920);
  }
  return result;
}

uint64_t sub_1D16B46B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D16B46D8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_1D16B471C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1D16B476C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D16B47E4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D16B4834(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1D16B487C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for Filter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D16B48D4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D16B490C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D16B4914(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t sub_1D16B4964(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t sub_1D16B49A4(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1D16B49EC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for CompoundFilter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D16B4A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 8);
}

unsigned char *sub_1D16B4A4C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D16B4B18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for CompoundFilter.CompoundType()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Box.value.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 88));
}

uint64_t Box.value.setter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 40))(v1 + *(void *)(*(void *)v1 + 88), a1);
}

uint64_t (*Box.value.modify())()
{
  return nullsub_1;
}

uint64_t Box.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 80) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 88), a1);
  return v2;
}

uint64_t Box.init(_:)(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 32))(v1 + *(void *)(*(void *)v1 + 88), a1);
  return v1;
}

uint64_t Box.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  return v0;
}

uint64_t Box.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t sub_1D16B4E74()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Box()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for Box(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Box);
}

uint64_t dispatch thunk of Box.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t static AccelerateBufferWrapper<>.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1D16B70F8(a1, a2, a3, a4, MEMORY[0x1E4FBAC18], a5);
}

{
  return sub_1D16B70F8(a1, a2, a3, a4, MEMORY[0x1E4FBAC10], a5);
}

uint64_t static AccelerateBufferWrapper<>.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1D16B70F8(a1, a2, a3, a4, MEMORY[0x1E4FBABA8], a5);
}

{
  return sub_1D16B70F8(a1, a2, a3, a4, MEMORY[0x1E4FBAB98], a5);
}

uint64_t static AccelerateBufferWrapper<>.- infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v6);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = sub_1D17BDBC0();
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v9, v8, a2, a3);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v7);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v8, v12);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AccelerateBufferWrapper<>.- prefix(_:)(a1, a2, a3);
  char v15 = sub_1D17BDBC0();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a2);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v15, v10, a2, a3);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v6);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = sub_1D17BDBB0();
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v9, v8, a2, a3);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v7);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v8, v12);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AccelerateBufferWrapper<>.- prefix(_:)(a1, a2, a3);
  char v15 = sub_1D17BDBB0();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a2);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v15, v10, a2, a3);
}

uint64_t static AccelerateBufferWrapper<>.+ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return sub_1D16B50B4(a1, a2, a3, MEMORY[0x1E4FBABA0], a4);
}

{
  return sub_1D16B6340(a1, a2, a3, MEMORY[0x1E4FBABA0], a4);
}

uint64_t static AccelerateBufferWrapper<>.* infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return sub_1D16B50B4(a1, a2, a3, MEMORY[0x1E4FBABE0], a4);
}

{
  return sub_1D16B6340(a1, a2, a3, MEMORY[0x1E4FBABE0], a4);
}

uint64_t sub_1D16B50B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void, float), float a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v11);
  uint64_t v13 = (char *)&v16 - v12;
  uint64_t v14 = a4(a1, a2, *(void *)(*(void *)(a3 + 8) + 8), a5);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v14, v13, a2, a3);
}

uint64_t static AccelerateBufferWrapper<>./ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v6);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = sub_1D17BDC40();
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v9, v8, a2, a3);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v6);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = sub_1D17BDC30();
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v9, v8, a2, a3);
}

uint64_t static AccelerateBufferWrapper<>..* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1D16B70F8(a1, a2, a3, a4, MEMORY[0x1E4FBABE8], a5);
}

{
  return sub_1D16B70F8(a1, a2, a3, a4, MEMORY[0x1E4FBABD8], a5);
}

uint64_t static AccelerateBufferWrapper<>..** infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static AccelerateBufferWrapper<>..**= infix(_:_:)();
}

{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
  return static AccelerateBufferWrapper<>..**= infix(_:_:)();
}

uint64_t AccelerateBufferWrapper<>.sum()(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4183038](v2, a1, *(void *)(*(void *)(a2 + 8) + 8));
}

{
  uint64_t v2;

  return MEMORY[0x1F4183030](v2, a1, *(void *)(*(void *)(a2 + 8) + 8));
}

uint64_t AccelerateBufferWrapper<>.sumOfSquares()(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4182FA8](v2, a1, *(void *)(*(void *)(a2 + 8) + 8));
}

{
  uint64_t v2;

  return MEMORY[0x1F4182FA0](v2, a1, *(void *)(*(void *)(a2 + 8) + 8));
}

uint64_t AccelerateBufferWrapper<>.mean()(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4183048](v2, a1, *(void *)(*(void *)(a2 + 8) + 8));
}

{
  uint64_t v2;

  return MEMORY[0x1F4183040](v2, a1, *(void *)(*(void *)(a2 + 8) + 8));
}

float AccelerateBufferWrapper<>.standardDeviation()(uint64_t a1, uint64_t a2)
{
  AccelerateBufferWrapper<>.meanAndStandardDeviation()(a1, a2);
  return v2;
}

uint64_t AccelerateBufferWrapper<>.naturalLogarithm()(uint64_t a1, uint64_t a2)
{
  return sub_1D16B80CC(a1, a2, (uint64_t (*)(void))sub_1D1665DDC);
}

{
  return sub_1D16B80CC(a1, a2, (uint64_t (*)(void))sub_1D16B5B5C);
}

uint64_t AccelerateBufferWrapper.test(function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[7] = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  id v13[2] = a3;
  uint64_t v13[3] = a4;
  void v13[4] = a1;
  v13[5] = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_1D17BE260();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = sub_1D169A4DC((void (*)(char *, char *))sub_1D16B6450, (uint64_t)v13, v8, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v10);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t AccelerateBufferWrapper.applyMask(mask:maskValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness, v9);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v10, v13);
  uint64_t v16 = (char *)v28 - v15;
  uint64_t v17 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v14, v18);
  uint64_t v20 = (char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(a1 + 16);
  v28[1] = *(void *)(a4 + 8);
  uint64_t v31 = v4;
  uint64_t result = sub_1D17BDB60();
  if (v21 == result)
  {
    v28[0] = a1;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v30, a3);
    unint64_t v23 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
    v23(a3, a4);
    v23(a3, a4);
    swift_getAssociatedConformanceWitness();
    char v24 = sub_1D17BDFA0();
    unint64_t v25 = *(void (**)(char *, uint64_t))(v29 + 8);
    v25(v12, AssociatedTypeWitness);
    v25(v16, AssociatedTypeWitness);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, a3);
    if (v24)
    {
      MEMORY[0x1F4188790](result, v26);
      v28[-4] = a3;
      v28[-3] = a4;
      uint64_t v27 = v28[0];
      v28[-2] = v30;
      v28[-1] = v27;
      return sub_1D17BDB40();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static AccelerateBufferWrapper<>.-= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D16B7A90(a1, a2, a3, a4, MEMORY[0x1E4FBAC08]);
}

{
  return sub_1D16B7A90(a1, a2, a3, a4, MEMORY[0x1E4FBAC00]);
}

uint64_t static AccelerateBufferWrapper<>.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D16B7A90(a1, a2, a3, a4, MEMORY[0x1E4FBAB88]);
}

{
  return sub_1D16B7A90(a1, a2, a3, a4, MEMORY[0x1E4FBAB80]);
}

uint64_t static AccelerateBufferWrapper<>.-= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  sub_1D17BDBA0();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  sub_1D17BDB90();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t static AccelerateBufferWrapper<>.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return sub_1D16B6514(a1, a2, a3, MEMORY[0x1E4FBAB78], a4);
}

uint64_t static AccelerateBufferWrapper<>./= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  sub_1D17BDC20();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, a1, a2, v5);
  sub_1D17BDC10();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, a2);
}

uint64_t static AccelerateBufferWrapper<>..*= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D16B6928(a1, a2, a3, a4, MEMORY[0x1E4FBABC8]);
}

{
  return sub_1D16B6928(a1, a2, a3, a4, MEMORY[0x1E4FBABC0]);
}

uint64_t static AccelerateBufferWrapper<>..**= infix(_:_:)()
{
  uint64_t v0 = sub_1D17BDB60();
  if (v0 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  if (v0 > 0x7FFFFFFF) {
    goto LABEL_5;
  }
  MEMORY[0x1F4188790](v0, v1);
  return sub_1D17BDB40();
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v0 = sub_1D17BDB60();
  if (v0 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  if (v0 > 0x7FFFFFFF) {
    goto LABEL_5;
  }
  MEMORY[0x1F4188790](v0, v1);
  return sub_1D17BDB40();
}

uint64_t sub_1D16B5B5C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    sub_1D168271C(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = (long double *)(a1 + 32);
    do
    {
      long double v5 = log(*v4);
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      if (v7 >= v6 >> 1) {
        sub_1D168271C(v6 > 1, v7 + 1, 1);
      }
      *(void *)(v9 + 16) = v7 + 1;
      *(long double *)(v9 + 8 * v7 + 32) = v5;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D16B5CF0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    uint64_t v7 = result;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v4; ++i)
    {
      if (*(unsigned char *)(a3 + i + 32))
      {
        uint64_t v9 = *a4;
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(v9 + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 72) * i, v7 + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 72) * i, AssociatedTypeWitness);
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t AccelerateBufferWrapper.masked(mask:maskValues:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, v5);
  return AccelerateBufferWrapper.applyMask(mask:maskValues:)(a1, a2, a3, a4);
}

uint64_t AccelerateBufferWrapper<>.minimum()(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4183088](v2, a1, *(void *)(*(void *)(a2 + 8) + 8));
}

{
  uint64_t v2;

  return MEMORY[0x1F4183080](v2, a1, *(void *)(*(void *)(a2 + 8) + 8));
}

uint64_t AccelerateBufferWrapper<>.maximum()(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4183078](v2, a1, *(void *)(*(void *)(a2 + 8) + 8));
}

{
  uint64_t v2;

  return MEMORY[0x1F4183070](v2, a1, *(void *)(*(void *)(a2 + 8) + 8));
}

uint64_t AccelerateBufferWrapper<>.normalize()()
{
  uint64_t v0 = sub_1D17BDB60();
  if (v0 < 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](v0, v1);
    return sub_1D17BDB40();
  }
  return result;
}

float AccelerateBufferWrapper<>.meanAndStandardDeviation()(uint64_t a1, uint64_t a2)
{
  v3[8] = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  void v3[3] = a1;
  long long v3[4] = a2;
  v3[5] = (char *)v3 + 4;
  v3[6] = v3;
  sub_1D17BDB50();
  return *((float *)v3 + 1);
}

void sub_1D16B6080(const float *a1, uint64_t a2, float *a3, float *a4)
{
  if (a1)
  {
    vDSP_Length v7 = sub_1D17BDB60();
    if ((v7 & 0x8000000000000000) == 0)
    {
      vDSP_normalize(a1, 1, 0, 1, a3, a4, v7);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  sub_1D17BEA30();
  __break(1u);
}

uint64_t static AccelerateBufferWrapper<>.- prefix(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D16B6FC8(a1, a2, a3, MEMORY[0x1E4FBABF8]);
}

{
  return sub_1D16B6FC8(a1, a2, a3, MEMORY[0x1E4FBABF0]);
}

uint64_t sub_1D16B6340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void, float), float a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v11);
  uint64_t v13 = (char *)&v16 - v12;
  uint64_t v14 = a4(a1, a2, *(void *)(*(void *)(a3 + 8) + 8), a5);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v14, v13, a2, a3);
}

uint64_t sub_1D16B6450@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1D16B6494()
{
  return sub_1D17BDB50();
}

uint64_t static AccelerateBufferWrapper<>.*= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return sub_1D16B6514(a1, a2, a3, MEMORY[0x1E4FBABB8], a4);
}

uint64_t sub_1D16B6514(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t, uint64_t, uint64_t, void, float), float a5)
{
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a2);
  a4(v12, a1, a2, a2, *(void *)(*(void *)(a3 + 8) + 8), a5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a2);
}

uint64_t sub_1D16B6628(uint64_t *a1)
{
  return sub_1D16B83F4(a1, MEMORY[0x1E4F17348]);
}

void sub_1D16B6654(float **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    vDSP_normalize(v2, 1, v2, 1, *(float **)(v1 + 16), *(float **)(v1 + 24), *(void *)(v1 + 32));
  }
  else {
    __break(1u);
  }
}

void sub_1D16B669C(const float *a1, uint64_t a2)
{
  sub_1D16B6080(a1, a2, *(float **)(v2 + 32), *(float **)(v2 + 40));
}

uint64_t static AccelerateBufferWrapper<>.** infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v11);
  uint64_t v13 = (char *)v22 - v12;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  int64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    v22[1] = a1;
    _OWORD v22[2] = a4;
    uint64_t v23 = MEMORY[0x1E4FBC860];
    sub_1D168264C(0, v15, 0);
    uint64_t v16 = 0;
    uint64_t v17 = v23;
    do
    {
      float v18 = powf(a5, *(float *)(v14 + 4 * v16 + 32));
      uint64_t v23 = v17;
      unint64_t v20 = *(void *)(v17 + 16);
      unint64_t v19 = *(void *)(v17 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_1D168264C(v19 > 1, v20 + 1, 1);
        uint64_t v17 = v23;
      }
      ++v16;
      *(void *)(v17 + 16) = v20 + 1;
      *(float *)(v17 + 4 * v20 + 32) = v18;
    }
    while (v15 != v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = MEMORY[0x1E4FBC860];
  }
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v17, v13, a2, a3);
}

uint64_t sub_1D16B6928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))
{
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v12, a1);
  a5(v12, a2, a1, a3, a3, a3, *(void *)(*(void *)(a4 + 8) + 8), *(void *)(*(void *)(a4 + 8) + 8), *(void *)(a4 + 8));
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a3);
}

double AccelerateBufferWrapper<>.normalize()(uint64_t a1, uint64_t a2)
{
  v4[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0;
  v4[0] = 0;
  void v4[3] = a1;
  void v4[4] = a2;
  v4[5] = v4;
  v4[6] = &v3;
  sub_1D17BDB40();
  return *(double *)v4;
}

void sub_1D16B6C94(uint64_t a1, double *a2, double *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 - 8);
  uint64_t v9 = (double **)MEMORY[0x1F4188790](a1, a2);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v9;
  if (*v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v12, v10, a5);
    vDSP_Length v14 = sub_1D17BDB60();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, a5);
    if ((v14 & 0x8000000000000000) == 0)
    {
      vDSP_normalizeD(v13, 1, v13, 1, a2, a3, v14);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  sub_1D17BEA30();
  __break(1u);
}

double AccelerateBufferWrapper<>.meanAndStandardDeviation()(uint64_t a1, uint64_t a2)
{
  v4[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0;
  v4[0] = 0;
  void v4[3] = a1;
  void v4[4] = a2;
  v4[5] = v4;
  v4[6] = &v3;
  sub_1D17BDB50();
  return *(double *)v4;
}

void sub_1D16B6EC4(const double *a1, uint64_t a2, double *a3, double *a4)
{
  if (a1)
  {
    vDSP_Length v7 = sub_1D17BDB60();
    if ((v7 & 0x8000000000000000) == 0)
    {
      vDSP_normalizeD(a1, 1, 0, 1, a3, a4, v7);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  sub_1D17BEA30();
  __break(1u);
}

double AccelerateBufferWrapper<>.standardDeviation()(uint64_t a1, uint64_t a2)
{
  AccelerateBufferWrapper<>.meanAndStandardDeviation()(a1, a2);
  return v2;
}

uint64_t sub_1D16B6FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v9);
  uint64_t v11 = (char *)&v14 - v10;
  uint64_t v12 = a4(a1, a2, *(void *)(*(void *)(a3 + 8) + 8));
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v12, v11, a2, a3);
}

uint64_t sub_1D16B70F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v35 = a5;
  uint64_t v36 = a6;
  uint64_t v40 = a2;
  uint64_t v41 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(char **)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness, v9);
  uint64_t v38 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10, v12);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = *(void *)(a3 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v13, v17);
  unint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18, v21);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  long long v37 = (char *)&v32 - v23;
  v22((char *)&v32 - v23, v41, a3);
  v22(v20, v40, a3);
  char v24 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
  v24(a3, a4);
  unint64_t v25 = v38;
  uint64_t v34 = v24;
  v24(a3, a4);
  uint64_t v33 = a4;
  swift_getAssociatedConformanceWitness();
  LOBYTE(a4) = sub_1D17BDFA0();
  uint64_t v26 = (void (*)(char *, uint64_t))*((void *)v39 + 1);
  v26(v25, AssociatedTypeWitness);
  uint64_t v39 = v15;
  v26(v15, AssociatedTypeWitness);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v16 + 8);
  v27(v20, a3);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v27)(v37, a3);
  if (a4)
  {
    uint64_t v29 = v33;
    uint64_t v30 = v35(v41, v40, a3, a3, *(void *)(*(void *)(v33 + 8) + 8), *(void *)(*(void *)(v33 + 8) + 8));
    uint64_t v31 = v39;
    v34(a3, v29);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v29 + 48))(v30, v31, a3, v29);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static AccelerateBufferWrapper<>.+ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return sub_1D16B7848(a1, a2, a3, MEMORY[0x1E4FBAB90], a4);
}

{
  return sub_1D16B7720(a1, a2, a3, MEMORY[0x1E4FBAB90], a4);
}

uint64_t static AccelerateBufferWrapper<>.* infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return sub_1D16B7720(a1, a2, a3, MEMORY[0x1E4FBABD0], a4);
}

{
  return sub_1D16B7848(a1, a2, a3, MEMORY[0x1E4FBABD0], a4);
}

uint64_t sub_1D16B7720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void, double), double a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v11);
  uint64_t v13 = (char *)&v16 - v12;
  uint64_t v14 = a4(a1, a2, *(void *)(*(void *)(a3 + 8) + 8), a5);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v14, v13, a2, a3);
}

uint64_t sub_1D16B7848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void, double), double a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v11);
  uint64_t v13 = (char *)&v16 - v12;
  uint64_t v14 = a4(a1, a2, *(void *)(*(void *)(a3 + 8) + 8), a5);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v14, v13, a2, a3);
}

uint64_t sub_1D16B7A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))
{
  uint64_t v30 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness, v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v11, v14);
  uint64_t v17 = (char *)&v27 - v16;
  uint64_t v31 = *(void *)(a3 - 8);
  uint64_t v18 = v31;
  MEMORY[0x1F4188790](v15, v19);
  uint64_t v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v28 = a2;
  v27(v21, a2, a3);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
  uint64_t v29 = a1;
  v22(a3, a4);
  v22(a3, a4);
  swift_getAssociatedConformanceWitness();
  LOBYTE(a1) = sub_1D17BDFA0();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v32 + 8);
  v23(v13, AssociatedTypeWitness);
  v23(v17, AssociatedTypeWitness);
  char v24 = *(uint64_t (**)(char *, uint64_t))(v31 + 8);
  uint64_t result = v24(v21, a3);
  if (a1)
  {
    uint64_t v26 = v29;
    v27(v21, v29, a3);
    v30(v21, v28, v26, a3, a3, a3, *(void *)(*(void *)(a4 + 8) + 8), *(void *)(*(void *)(a4 + 8) + 8), *(void *)(a4 + 8));
    return v24(v21, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static AccelerateBufferWrapper<>.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return sub_1D16B7E94(a1, a2, a3, MEMORY[0x1E4FBAB70], a4);
}

uint64_t static AccelerateBufferWrapper<>.*= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return sub_1D16B7E94(a1, a2, a3, MEMORY[0x1E4FBABB0], a4);
}

uint64_t sub_1D16B7E94(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t, uint64_t, uint64_t, void, double), double a5)
{
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a2);
  a4(v12, a1, a2, a2, *(void *)(*(void *)(a3 + 8) + 8), a5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a2);
}

uint64_t sub_1D16B80CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v7);
  uint64_t v9 = &v12[-v8];
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  uint64_t v10 = a3();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(a2 + 48))(v10, v9, a1, a2);
}

uint64_t static AccelerateBufferWrapper<>.** infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, long double a5@<D0>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v12 = MEMORY[0x1F4188790](AssociatedTypeWitness - 8, v11);
  uint64_t v14 = (char *)v23 - v13;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, double))(a3 + 40))(a2, a3, v12);
  int64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    v23[1] = a1;
    _OWORD v23[2] = a4;
    uint64_t v24 = MEMORY[0x1E4FBC860];
    sub_1D168271C(0, v16, 0);
    uint64_t v17 = 0;
    uint64_t v18 = v24;
    do
    {
      long double v19 = pow(a5, *(long double *)(v15 + 8 * v17 + 32));
      uint64_t v24 = v18;
      unint64_t v21 = *(void *)(v18 + 16);
      unint64_t v20 = *(void *)(v18 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_1D168271C(v20 > 1, v21 + 1, 1);
        uint64_t v18 = v24;
      }
      ++v17;
      *(void *)(v18 + 16) = v21 + 1;
      *(long double *)(v18 + 8 * v21 + 32) = v19;
    }
    while (v16 != v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = MEMORY[0x1E4FBC860];
  }
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 48))(v18, v14, a2, a3);
}

uint64_t sub_1D16B83C8(uint64_t *a1)
{
  return sub_1D16B83F4(a1, MEMORY[0x1E4F17340]);
}

uint64_t sub_1D16B83F4(uint64_t *a1, uint64_t (*a2)(uint64_t, void, uint64_t, void))
{
  uint64_t result = *a1;
  if (result) {
    return a2(result, *(void *)(v2 + 16), result, *(void *)(v2 + 24));
  }
  __break(1u);
  return result;
}

void sub_1D16B8438(uint64_t a1)
{
  sub_1D16B6C94(a1, *(double **)(v1 + 32), *(double **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 16));
}

void sub_1D16B845C(const double *a1, uint64_t a2)
{
  sub_1D16B6EC4(a1, a2, *(double **)(v2 + 32), *(double **)(v2 + 40));
}

uint64_t dispatch thunk of AccelerateBufferWrapper.shape.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AccelerateBufferWrapper.elements.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AccelerateBufferWrapper.init(elements:shape:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t sub_1D16B84BC(uint64_t a1, uint64_t a2)
{
  return sub_1D16B5CF0(a1, a2, *(void *)(v2 + 32), *(uint64_t **)(v2 + 40));
}

void *SparseBuffer.reduce<A>(into:update:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, char *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v21 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1, a1);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v4;
  uint64_t v11 = v4[1];
  uint64_t v13 = v4[2];
  uint64_t v12 = v4[3];
  uint64_t v22 = v12;
  uint64_t v23 = v13;
  (*(void (**)(uint64_t))(*(void *)(v14 - 8) + 16))(a4);
  *(void *)&long long v24 = v10;
  *((void *)&v24 + 1) = v11;
  *(void *)&long long v25 = v13;
  *((void *)&v25 + 1) = v12;
  sub_1D17BDFD0();
  swift_getWitnessTable();
  uint64_t v15 = sub_1D17BECE0();
  sub_1D17BECB0();
  uint64_t v16 = v27;
  *(void *)&long long v27 = v10;
  *((void *)&v27 + 1) = v11;
  *(void *)&long long v28 = v23;
  *((void *)&v28 + 1) = v22;
  uint64_t v26 = v16;
  uint64_t result = MEMORY[0x1D25F9670](&v24, v15);
  if (v16 != (void)v24)
  {
    uint64_t v18 = (void (**)(char *, uint64_t))(v21 + 8);
    do
    {
      sub_1D17BECF0();
      long long v24 = v27;
      long long v25 = v28;
      sub_1D17BECD0();
      a2(a4, v9);
      (*v18)(v9, v7);
      uint64_t v19 = v26;
      uint64_t result = MEMORY[0x1D25F9670](&v24, v15);
    }
    while (v19 != (void)v24);
  }
  return result;
}

uint64_t SparseBuffer.union(with:combine:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v26 = a3;
  long long v27 = a5;
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (long long *)MEMORY[0x1F4188790](a1, a2);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v13 = v10[1];
  long long v36 = *v10;
  long long v37 = v13;
  long long v14 = v10[3];
  long long v38 = v10[2];
  long long v39 = v14;
  long long v15 = v5[1];
  v33[0] = *v5;
  v33[1] = v15;
  long long v16 = v5[3];
  long long v34 = v5[2];
  long long v35 = v16;
  long long v29 = v33[0];
  long long v30 = v15;
  sub_1D17BDFD0();
  swift_getWitnessTable();
  sub_1D17BECE0();
  swift_getWitnessTable();
  uint64_t v17 = sub_1D17BE450();
  long long v29 = v36;
  long long v30 = v37;
  uint64_t result = sub_1D17BE450();
  uint64_t v19 = v17 + result;
  if (__OFADD__(v17, result))
  {
    __break(1u);
  }
  else
  {
    long long v29 = v34;
    long long v30 = v35;
    long long v31 = v38;
    long long v32 = v39;
    uint64_t v28 = MEMORY[0x1E4FBC860];
    uint64_t v20 = *(void *)(a4 + 24);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(v8, v20);
    MEMORY[0x1F4188790](v21, v22);
    *(&v26 - 10) = v8;
    *(&v26 - 9) = v20;
    *(&v26 - 8) = (uint64_t)&v28;
    *(&v26 - 7) = v19;
    *(&v26 - 6) = (uint64_t)&v29;
    *(&v26 - 5) = (uint64_t)v33;
    uint64_t v23 = v26;
    *(&v26 - 4) = a2;
    *(&v26 - 3) = v23;
    *(&v26 - 2) = (uint64_t)&v36;
    *(&v26 - 1) = (uint64_t)v12;
    uint64_t v24 = sub_1D17BE1D0();
    uint64_t v25 = v28;
    swift_bridgeObjectRetain();
    SparseArray.init(values:offsets:)(v24, v25, v8, v27);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t SparseBuffer.intersection<A, B>(with:combine:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v32 = a7;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  long long v35 = a9;
  uint64_t v13 = *(void *)(a6 - 8);
  uint64_t v30 = a4;
  uint64_t v31 = v13;
  long long v14 = (long long *)MEMORY[0x1F4188790](a1, a2);
  long long v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v17 = v14[1];
  long long v58 = *v14;
  long long v59 = v17;
  long long v18 = v14[3];
  long long v60 = v14[2];
  long long v61 = v18;
  long long v19 = v9[1];
  v55[0] = *v9;
  v55[1] = v19;
  long long v20 = v9[3];
  long long v56 = v9[2];
  long long v57 = v20;
  long long v51 = v55[0];
  long long v52 = v19;
  uint64_t v22 = *(void *)(v21 + 16);
  sub_1D17BDFD0();
  swift_getWitnessTable();
  sub_1D17BECE0();
  swift_getWitnessTable();
  uint64_t v23 = sub_1D17BE450();
  long long v51 = v58;
  long long v52 = v59;
  sub_1D17BDFD0();
  swift_getWitnessTable();
  sub_1D17BECE0();
  swift_getWitnessTable();
  uint64_t v24 = sub_1D17BE450();
  if (v24 >= v23) {
    uint64_t v25 = v23;
  }
  else {
    uint64_t v25 = v24;
  }
  long long v51 = v56;
  long long v52 = v57;
  long long v53 = v60;
  long long v54 = v61;
  uint64_t v50 = MEMORY[0x1E4FBC860];
  (*(void (**)(uint64_t, uint64_t))(a8 + 16))(a6, a8);
  uint64_t v36 = v22;
  uint64_t v37 = a5;
  uint64_t v26 = *(void *)(v30 + 24);
  uint64_t v38 = a6;
  uint64_t v39 = v26;
  uint64_t v40 = v32;
  uint64_t v41 = a8;
  uint64_t v42 = &v50;
  uint64_t v43 = v25;
  uint64_t v44 = &v51;
  uint64_t v45 = v33;
  uint64_t v46 = v34;
  uint64_t v47 = v55;
  uint64_t v48 = &v58;
  uint64_t v49 = v16;
  uint64_t v27 = sub_1D17BE1D0();
  uint64_t v28 = v50;
  swift_bridgeObjectRetain();
  SparseArray.init(values:offsets:)(v27, v28, a6, v35);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v16, a6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D16B8C64@<X0>(uint64_t a1@<X3>, void *a2@<X8>)
{
  SparseBuffer.count.getter();
  uint64_t v7 = MEMORY[0x1E4FBC860];
  uint64_t v5 = sub_1D17BE1D0();
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  else {
    return SparseArray.init(values:offsets:)(v5, v7, a1, a2);
  }
}

uint64_t SparseBuffer.mapIntersection<A>(with:initialValue:update:combine:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, char *), uint64_t a4, void (*a5)(char *, char *), uint64_t a6, uint64_t a7)
{
  uint64_t v67 = a6;
  uint64_t v66 = a5;
  uint64_t v65 = a4;
  unint64_t v64 = a3;
  uint64_t v62 = *(void *)(a7 + 16);
  uint64_t v8 = *(void *)(v62 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1, a2);
  long long v61 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9, v11);
  long long v60 = (char *)&v48 - v13;
  uint64_t v15 = (uint64_t *)MEMORY[0x1F4188790](v12, v14);
  long long v59 = (char *)&v48 - v16;
  uint64_t v58 = *v15;
  uint64_t v57 = v15[1];
  uint64_t v56 = v15[2];
  uint64_t v17 = v15[4];
  uint64_t v55 = v15[3];
  uint64_t v19 = v15[5];
  uint64_t v18 = v15[6];
  uint64_t v20 = v15[7];
  uint64_t v54 = *v7;
  uint64_t v53 = v7[1];
  uint64_t v52 = v7[2];
  uint64_t v21 = v7[4];
  uint64_t v51 = v7[3];
  uint64_t v23 = v7[5];
  uint64_t v22 = v7[6];
  uint64_t v24 = v7[7];
  uint64_t v26 = *(void (**)(uint64_t))(*(void *)(v25 - 8) + 16);
  uint64_t v63 = v27;
  v26(v27);
  uint64_t v75 = v21;
  uint64_t v76 = v23;
  uint64_t v77 = v22;
  uint64_t v78 = v24;
  uint64_t v79 = v17;
  uint64_t v80 = v19;
  uint64_t v81 = v18;
  uint64_t v82 = v20;
  uint64_t result = sub_1D16BAB70(-1, -1, &v73);
  uint64_t v29 = v23 - v21;
  uint64_t v30 = v19 - v17;
  uint64_t v32 = v73;
  uint64_t v31 = v74;
  if (v73 != v23 - v21 || v74 != v30)
  {
    uint64_t v48 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v50 = v18;
    uint64_t v49 = v30;
    uint64_t v33 = v59;
    while (1)
    {
      uint64_t v34 = v32 + 1;
      if (__OFADD__(v32, 1)) {
        goto LABEL_25;
      }
      uint64_t v35 = v31;
      uint64_t v36 = v31 + 1;
      if (__OFADD__(v31, 1)) {
        break;
      }
      uint64_t v37 = v32;
      uint64_t v32 = v29;
      uint64_t v31 = v30;
      if (v34 != v29)
      {
        uint64_t v32 = v29;
        uint64_t v31 = v30;
        if (v36 != v30)
        {
          uint64_t v38 = *(void *)(v22 + 8 * v34);
          uint64_t v39 = *(void *)(v18 + 8 * v36);
          if (v38 != v39)
          {
            uint64_t v31 = v36;
            uint64_t v32 = v34;
            while (1)
            {
              if (v38 >= v39)
              {
                BOOL v40 = __OFADD__(v31++, 1);
                if (v40) {
                  goto LABEL_24;
                }
              }
              else
              {
                BOOL v40 = __OFADD__(v32++, 1);
                if (v40)
                {
                  __break(1u);
LABEL_24:
                  __break(1u);
LABEL_25:
                  __break(1u);
                  goto LABEL_26;
                }
              }
              if (v32 == v29 || v31 == v30)
              {
                uint64_t v32 = v29;
                uint64_t v31 = v30;
                goto LABEL_21;
              }
              uint64_t v38 = *(void *)(v22 + 8 * v32);
              uint64_t v39 = *(void *)(v18 + 8 * v31);
              if (v38 == v39) {
                goto LABEL_21;
              }
            }
          }
          uint64_t v32 = v34;
          uint64_t v31 = v36;
        }
      }
LABEL_21:
      uint64_t v69 = v54;
      uint64_t v70 = v53;
      uint64_t v71 = v52;
      uint64_t v72 = v51;
      uint64_t v68 = v37;
      uint64_t v41 = v62;
      sub_1D17BDFD0();
      swift_getWitnessTable();
      sub_1D17BECE0();
      sub_1D17BECF0();
      uint64_t v69 = v58;
      uint64_t v70 = v57;
      uint64_t v71 = v56;
      uint64_t v72 = v55;
      uint64_t v68 = v35;
      uint64_t v42 = v22;
      uint64_t v43 = v60;
      sub_1D17BECF0();
      uint64_t v44 = v61;
      v66(v33, v43);
      v64(v63, v44);
      uint64_t v45 = *v48;
      (*v48)(v44, v41);
      uint64_t v46 = v43;
      uint64_t v22 = v42;
      v45(v46, v41);
      uint64_t v47 = v41;
      uint64_t v18 = v50;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v45)(v33, v47);
      uint64_t v30 = v49;
      if (v32 == v29 && v31 == v49) {
        return result;
      }
    }
LABEL_26:
    __break(1u);
  }
  return result;
}

uint64_t SparseBuffer.dotProduct(with:add:multiply:)(uint64_t a1, void (*a2)(uint64_t, char *), uint64_t a3, void (*a4)(char *, char *), uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a6 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = (_OWORD *)MEMORY[0x1F4188790](a1, a2);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v17 = v6[1];
  _OWORD v23[4] = *v6;
  v23[5] = v17;
  long long v18 = v6[3];
  v23[6] = v6[2];
  v23[7] = v18;
  long long v19 = v14[1];
  v23[0] = *v14;
  v23[1] = v19;
  long long v20 = v14[3];
  _OWORD v23[2] = v14[2];
  void v23[3] = v20;
  (*(void (**)(uint64_t))(*(void *)(v21 + 24) + 16))(v12);
  SparseBuffer.mapIntersection<A>(with:initialValue:update:combine:)((uint64_t)v23, (uint64_t)v16, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t SparseBuffer.sparseKroneckerMap<A, B>(with:combine:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SparseArray();
  swift_getWitnessTable();
  return sub_1D16B8C64(v2, a1);
}

uint64_t sub_1D16B9404@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = a3 - a2;
  if (__OFSUB__(a3, a2))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v5 < 129)
  {
LABEL_13:
    uint64_t v7 = a2;
    if (a2 >= a3)
    {
LABEL_28:
      *(void *)a5 = v7;
      *(unsigned char *)(a5 + 8) = v7 != a3;
      return result;
    }
    uint64_t v10 = *(void *)(a4 + 8 * a2);
    if (v10 >= result)
    {
      uint64_t v11 = a2;
    }
    else
    {
      uint64_t v11 = a2 + 1;
      if (a2 + 1 >= a3) {
        goto LABEL_27;
      }
      uint64_t v10 = *(void *)(a4 + 8 * v11);
      if (v10 < result)
      {
        uint64_t v11 = a2 + 2;
        if (a2 + 2 >= a3) {
          goto LABEL_27;
        }
        uint64_t v10 = *(void *)(a4 + 8 * v11);
        if (v10 < result)
        {
          uint64_t v11 = a2 + 3;
          if (a2 + 3 < a3)
          {
            while (1)
            {
              uint64_t v10 = *(void *)(a4 + 8 * v11);
              if (v10 >= result) {
                goto LABEL_25;
              }
              uint64_t v12 = v11 + 1;
              if (__OFADD__(v11, 1)) {
                goto LABEL_33;
              }
              ++v11;
              if (v12 >= a3)
              {
                uint64_t v7 = a3;
                goto LABEL_28;
              }
            }
          }
LABEL_27:
          uint64_t v7 = v11;
          goto LABEL_28;
        }
      }
    }
LABEL_25:
    if (v10 > result) {
      a3 = v11;
    }
    goto LABEL_27;
  }
  BOOL v6 = __OFADD__(a2, (unint64_t)v5 >> 1);
  uint64_t v7 = a2 + ((unint64_t)v5 >> 1);
  if (!v6)
  {
    while (1)
    {
      uint64_t v8 = *(void *)(a4 + 8 * v7);
      if (v8 == result) {
        goto LABEL_28;
      }
      if (v8 <= result)
      {
        a2 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          goto LABEL_30;
        }
      }
      else
      {
        a3 = v7;
      }
      uint64_t v9 = a3 - a2;
      if (__OFSUB__(a3, a2))
      {
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      if (v9 < 129) {
        goto LABEL_13;
      }
      BOOL v6 = __OFADD__(a2, (unint64_t)v9 >> 1);
      uint64_t v7 = a2 + ((unint64_t)v9 >> 1);
      if (v6)
      {
        __break(1u);
        goto LABEL_13;
      }
    }
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

__n128 sub_1D16B9510@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  __n128 result = *(__n128 *)a5;
  long long v7 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a6 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(a6 + 48) = v7;
  return result;
}

uint64_t SparseBuffer.getValue(atOffset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *v3;
  uint64_t v7 = v3[1];
  uint64_t v8 = v3[2];
  uint64_t v9 = v3[3];
  sub_1D16B9404(a1, v3[4], v3[5], v3[6], (uint64_t)&v13);
  if (v14 == 1)
  {
    uint64_t v13 = v6;
    uint64_t v14 = v7;
    uint64_t v15 = v8;
    uint64_t v16 = v9;
    uint64_t v10 = *(void *)(a2 + 16);
    sub_1D17BDFD0();
    swift_getWitnessTable();
    sub_1D17BECE0();
    sub_1D17BECF0();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a3, 0, 1, v10);
  }
  else
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 56);
    return v12(a3, 1, 1);
  }
}

uint64_t SparseBuffer.values.getter()
{
  return *(void *)v0;
}

__n128 SparseBuffer.offsets.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 32);
  long long v3 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t SparseBuffer.count.getter()
{
  return sub_1D17BE450();
}

uint64_t SparseBuffer.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  sub_1D16B9404(a1, v2[4], v2[5], v2[6], (uint64_t)&v9);
  if (v10 != 1) {
    return (*(uint64_t (**)(void))(*(void *)(a2 + 24) + 16))();
  }
  uint64_t v9 = v4;
  uint64_t v10 = v5;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_1D17BDFD0();
  swift_getWitnessTable();
  sub_1D17BECE0();
  return sub_1D17BECF0();
}

uint64_t sub_1D16B9824(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result = sub_1D17BDFB0();
  if (result)
  {
    MEMORY[0x1F4188790](result, v7);
    *a3 = sub_1D16BAC04(a4, (void (*)(void *, uint64_t *))sub_1D16BAF3C);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *sub_1D16B991C(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void (*a5)(char *, char *), uint64_t a6, _OWORD *a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v67 = a8;
  uint64_t v58 = a6;
  long long v59 = a7;
  uint64_t v57 = a5;
  uint64_t v63 = a4;
  uint64_t v12 = *(void **)(a3 + 16);
  uint64_t v13 = *(void *)(a11 - 8);
  long long v60 = *(void **)(a3 + 48);
  long long v61 = v12;
  uint64_t v55 = v13;
  uint64_t v14 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v68 = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (uint64_t *)MEMORY[0x1F4188790](v14, v16);
  uint64_t v24 = (char *)v50 - v23;
  uint64_t v52 = *result;
  if (v52)
  {
    uint64_t v70 = a12;
    uint64_t v53 = a10;
    uint64_t v25 = v22 - v21;
    uint64_t v54 = v18;
    if (v22 == v21 || v20 == v19)
    {
      BOOL v27 = v20 != v19;
      BOOL v26 = v22 != v21;
    }
    else
    {
      BOOL v26 = *v60 >= *v61;
      BOOL v27 = *v61 >= *v60;
    }
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v56 = 0;
    uint64_t v51 = a9;
    uint64_t v30 = v20 - v19;
    unsigned __int8 v75 = 0;
    unsigned __int8 v77 = 0;
    uint64_t v66 = v70 + 16;
    BOOL v74 = v26;
    uint64_t v69 = (uint64_t (**)(char *, uint64_t))(v55 + 8);
    uint64_t v62 = (void (**)(char *, char *, uint64_t))(v55 + 32);
    v50[1] = v55 + 16;
    BOOL v76 = v27;
    uint64_t v64 = v30;
    uint64_t v65 = v22 - v21;
LABEL_7:
    BOOL v31 = v74;
    BOOL v32 = v76;
    if (v28 != v25 || v29 != v30 || ((v74 ^ v75) & 1) != 0)
    {
      uint64_t v33 = v29;
      uint64_t v34 = v28;
      goto LABEL_11;
    }
LABEL_28:
    uint64_t v33 = v29;
    uint64_t v34 = v28;
    if (((v32 ^ v77) & 1) == 0)
    {
LABEL_33:
      uint64_t v49 = v56;
      *uint64_t v53 = v56;
      *uint64_t v54 = v49;
      return result;
    }
    while (1)
    {
LABEL_11:
      uint64_t v28 = v34;
      if (v31)
      {
        uint64_t v28 = v34 + 1;
        if (__OFADD__(v34, 1))
        {
          __break(1u);
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
      }
      uint64_t v29 = v33;
      if (v32)
      {
        uint64_t v29 = v33 + 1;
        if (__OFADD__(v33, 1)) {
          goto LABEL_35;
        }
      }
      BOOL v35 = v29 != v30;
      BOOL v36 = v28 != v25;
      if (v28 != v25 && v29 != v30)
      {
        uint64_t v37 = v61[v28];
        uint64_t v38 = v60[v29];
        BOOL v36 = v38 >= v37;
        BOOL v35 = v37 >= v38;
      }
      BOOL v74 = v36;
      BOOL v76 = v35;
      (*(void (**)(uint64_t))(v70 + 16))(a11);
      if (v31) {
        break;
      }
      if (v32) {
        goto LABEL_22;
      }
      uint64_t v41 = 0;
LABEL_24:
      if ((sub_1D17BDFA0() & 1) == 0)
      {
        uint64_t v45 = v55;
        uint64_t v46 = v56;
        uint64_t v47 = v51 + *(void *)(v55 + 72) * v56;
        uint64_t v48 = v68;
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v68, v24, a11);
        (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v47, v48, a11);
        *(void *)(v52 + 8 * v46) = v41;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v24, a11);
        uint64_t v56 = v46 + 1;
        uint64_t v30 = v64;
        uint64_t v25 = v65;
        if (!__OFADD__(v46, 1)) {
          goto LABEL_7;
        }
        __break(1u);
        goto LABEL_33;
      }
      uint64_t result = (uint64_t *)(*v69)(v24, a11);
      BOOL v31 = v74;
      BOOL v32 = v76;
      uint64_t v33 = v29;
      uint64_t v34 = v28;
      uint64_t v30 = v64;
      uint64_t v25 = v65;
      if (v28 == v65)
      {
        uint64_t v33 = v29;
        uint64_t v34 = v28;
        if (v29 == v64)
        {
          uint64_t v33 = v29;
          uint64_t v34 = v28;
          if (((v74 ^ v75) & 1) == 0) {
            goto LABEL_28;
          }
        }
      }
    }
    long long v39 = v63[1];
    long long v72 = *v63;
    long long v73 = v39;
    uint64_t v71 = v34;
    sub_1D17BDFD0();
    swift_getWitnessTable();
    sub_1D17BECE0();
    BOOL v40 = v68;
    sub_1D17BECF0();
    (*v69)(v24, a11);
    (*v62)(v24, v40, a11);
    if (!v32)
    {
      uint64_t v41 = *(void *)(*((void *)v63 + 6) + 8 * v34);
      goto LABEL_24;
    }
LABEL_22:
    uint64_t v42 = v59;
    long long v43 = v59[1];
    long long v72 = *v59;
    long long v73 = v43;
    uint64_t v71 = v33;
    sub_1D17BDFD0();
    swift_getWitnessTable();
    sub_1D17BECE0();
    uint64_t v44 = v68;
    sub_1D17BECF0();
    v57(v24, v44);
    (*v69)(v44, a11);
    uint64_t v41 = *(void *)(*((void *)v42 + 6) + 8 * v33);
    goto LABEL_24;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1D16B9E64()
{
  return sub_1D17BE1D0();
}

uint64_t sub_1D16B9E7C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = sub_1D17BDFB0();
  if (result)
  {
    MEMORY[0x1F4188790](result, a9);
    *a3 = sub_1D16BAC04(a4, (void (*)(void *, uint64_t *))sub_1D16BAEF8);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *sub_1D16B9F84(uint64_t a1, void *a2, uint64_t *a3, void (*a4)(char *, char *), uint64_t a5, long long *a6, long long *a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v90 = a7;
  uint64_t v91 = a8;
  uint64_t v92 = a6;
  uint64_t v88 = a4;
  uint64_t v89 = a5;
  uint64_t v70 = a2;
  uint64_t v17 = *a3;
  uint64_t v18 = a3[1];
  uint64_t v19 = a3[2];
  uint64_t v20 = a3[4];
  uint64_t v21 = a3[5];
  uint64_t v22 = a3[6];
  uint64_t v87 = a12;
  uint64_t v23 = *(void *)(a12 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v84 = (char *)v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = v26;
  uint64_t v79 = *(void (***)(char *, uint64_t))(v26 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v24, v27);
  uint64_t v83 = (char *)v64 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = v30;
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v28, v32);
  uint64_t v68 = (char *)v64 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (uint64_t *)MEMORY[0x1F4188790](v33, v35);
  uint64_t v82 = (char *)v64 - v37;
  uint64_t v67 = *result;
  if (v67)
  {
    uint64_t v81 = a16;
    uint64_t v69 = a10;
    uint64_t v65 = a9;
    uint64_t result = (uint64_t *)sub_1D16BAB70(-1, -1, v95);
    uint64_t v71 = 0;
    uint64_t v38 = a3[1] - *a3;
    uint64_t v72 = a3[5] - a3[4];
    uint64_t v39 = v18 - v17;
    uint64_t v40 = v21 - v20;
    uint64_t v80 = (void (**)(char *, uint64_t))(v23 + 8);
    uint64_t v41 = v95[0];
    uint64_t v42 = v95[1];
    ++v79;
    BOOL v74 = (uint64_t (**)(char *, uint64_t))(v31 + 8);
    v64[2] = v31 + 16;
    v64[1] = v31 + 32;
    uint64_t v66 = v31;
    uint64_t v78 = v22;
    uint64_t v77 = v38;
    uint64_t v76 = v18 - v17;
    uint64_t v75 = v40;
    uint64_t v73 = v19;
    while (2)
    {
      if (v41 != v38 || v42 != v72)
      {
        while (1)
        {
          uint64_t v43 = v41 + 1;
          if (__OFADD__(v41, 1))
          {
LABEL_28:
            __break(1u);
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
          uint64_t v44 = v42 + 1;
          if (__OFADD__(v42, 1)) {
            goto LABEL_29;
          }
          while (v43 != v39 && v44 != v40)
          {
            uint64_t v46 = *(void *)(v19 + 8 * v43);
            uint64_t v47 = *(void *)(v22 + 8 * v44);
            if (v46 == v47) {
              goto LABEL_18;
            }
            if (v46 < v47)
            {
              BOOL v45 = __OFADD__(v43++, 1);
              if (v45)
              {
                __break(1u);
LABEL_27:
                __break(1u);
                goto LABEL_28;
              }
            }
            else
            {
              BOOL v45 = __OFADD__(v44++, 1);
              if (v45) {
                goto LABEL_27;
              }
            }
          }
          uint64_t v43 = v39;
          uint64_t v44 = v40;
LABEL_18:
          long long v48 = v92[1];
          long long v93 = *v92;
          long long v94 = v48;
          uint64_t v96 = v41;
          uint64_t v49 = v86;
          uint64_t v50 = v41;
          sub_1D17BDFD0();
          swift_getWitnessTable();
          sub_1D17BECE0();
          uint64_t v51 = v83;
          sub_1D17BECF0();
          long long v52 = v90[1];
          long long v93 = *v90;
          long long v94 = v52;
          uint64_t v96 = v42;
          uint64_t v53 = v87;
          sub_1D17BDFD0();
          swift_getWitnessTable();
          sub_1D17BECE0();
          uint64_t v54 = v84;
          sub_1D17BECF0();
          uint64_t v55 = v82;
          v88(v51, v54);
          (*v80)(v54, v53);
          (*v79)(v51, v49);
          uint64_t v56 = v85;
          if ((sub_1D17BDFA0() & 1) == 0) {
            break;
          }
          uint64_t result = (uint64_t *)(*v74)(v55, v56);
          uint64_t v42 = v44;
          uint64_t v41 = v43;
          uint64_t v19 = v73;
          uint64_t v22 = v78;
          uint64_t v39 = v76;
          uint64_t v40 = v75;
          if (v43 == v77)
          {
            uint64_t v42 = v44;
            uint64_t v41 = v43;
            if (v44 == v72) {
              goto LABEL_25;
            }
          }
        }
        uint64_t v57 = *(void *)(*((void *)v92 + 6) + 8 * v50);
        uint64_t v58 = v66;
        uint64_t v59 = v71;
        uint64_t v60 = v65 + *(void *)(v66 + 72) * v71;
        long long v61 = v55;
        uint64_t v62 = v68;
        (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v68, v61, v56);
        (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v60, v62, v56);
        *(void *)(v67 + 8 * v59) = v57;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v61, v56);
        uint64_t v41 = v43;
        uint64_t v42 = v44;
        uint64_t v71 = v59 + 1;
        uint64_t v19 = v73;
        uint64_t v22 = v78;
        uint64_t v38 = v77;
        uint64_t v39 = v76;
        uint64_t v40 = v75;
        if (!__OFADD__(v59, 1)) {
          continue;
        }
        __break(1u);
      }
      break;
    }
LABEL_25:
    uint64_t v63 = v71;
    *uint64_t v69 = v71;
    void *v70 = v63;
  }
  else
  {
LABEL_30:
    __break(1u);
  }
  return result;
}

uint64_t sub_1D16BA5E0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(char *), uint64_t a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = sub_1D17BDFB0();
  if (!v18) {
    goto LABEL_14;
  }
  if ((a4 & 0x8000000000000000) == 0)
  {
    uint64_t v19 = v18;
    uint64_t v22 = a2;
    if (a4)
    {
      uint64_t v20 = sub_1D17BE1C0();
      *(void *)(v20 + 16) = a4;
    }
    else
    {
      uint64_t v20 = MEMORY[0x1E4FBC860];
    }
    uint64_t v25 = 0;
    v24[0] = v20 + 32;
    v24[1] = a4;
    sub_1D16BA764((uint64_t)v24, (uint64_t)&v25, a4, a5, a6, a7, v19, v22, a8, a9, a10, a11);
    if (v11)
    {
      if (v25 > a4)
      {
        __break(1u);
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      *(void *)(v20 + 16) = v25;
    }
    else
    {
      if (v25 > a4) {
        goto LABEL_13;
      }
      *(void *)(v20 + 16) = v25;
      *a3 = v20;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_15:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

void *sub_1D16BA764(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, long long *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  uint64_t v49 = a7;
  uint64_t v51 = a6;
  uint64_t v59 = a4;
  uint64_t v60 = a5;
  uint64_t v62 = a9;
  uint64_t v15 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v58 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = *(void *)(a10 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v15, v17);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)MEMORY[0x1F4188790](v18, v21);
  uint64_t v27 = (char *)&v43 - v26;
  uint64_t v48 = *result;
  if (!v48) {
    goto LABEL_18;
  }
  if (a3 < 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  uint64_t v43 = v23;
  uint64_t v44 = v24;
  if (a3)
  {
    long long v28 = *v51;
    long long v29 = v51[1];
    uint64_t v57 = (uint64_t (**)(char *, uint64_t))(v25 + 8);
    long long v65 = v28;
    long long v66 = v29;
    uint64_t v54 = a12 + 16;
    uint64_t v55 = a12;
    uint64_t v30 = (void (**)(char *, uint64_t))(v50 + 8);
    uint64_t v47 = v50 + 16;
    uint64_t v46 = v50 + 32;
    uint64_t result = (void *)sub_1D17BDFD0();
    uint64_t v56 = result;
    uint64_t v61 = 0;
    uint64_t v31 = 0;
    uint64_t v53 = a3;
    BOOL v45 = v30;
    while (a3 != v31)
    {
      uint64_t v32 = v30;
      long long v63 = v65;
      long long v64 = v66;
      uint64_t v67 = v31;
      swift_getWitnessTable();
      sub_1D17BECE0();
      uint64_t v33 = v58;
      sub_1D17BECF0();
      uint64_t v34 = v13;
      v59(v33);
      uint64_t result = (void *)(*v57)(v33, v62);
      if (v13) {
        return result;
      }
      (*(void (**)(uint64_t, uint64_t))(v55 + 16))(a10, v55);
      char v35 = sub_1D17BDFA0();
      uint64_t v30 = v32;
      BOOL v36 = *v32;
      (*v32)(v20, a10);
      if (v35)
      {
        uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v36)(v27, a10);
      }
      else
      {
        uint64_t v37 = v20;
        uint64_t v38 = v27;
        uint64_t v39 = v50;
        uint64_t v40 = v61;
        uint64_t v52 = v49 + *(void *)(v50 + 72) * v61;
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v37, v38, a10);
        uint64_t v41 = *(void (**)(uint64_t, char *, uint64_t))(v39 + 32);
        uint64_t v27 = v38;
        uint64_t v20 = v37;
        v41(v52, v37, a10);
        *(void *)(v48 + 8 * v40) = *(void *)(*((void *)v51 + 6) + 8 * v31);
        uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v36)(v27, a10);
        uint64_t v61 = v40 + 1;
        if (__OFADD__(v40, 1)) {
          goto LABEL_16;
        }
        uint64_t v13 = v34;
        uint64_t v30 = v32;
      }
      ++v31;
      a3 = v53;
      if (v53 == v31) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v61 = 0;
LABEL_13:
  uint64_t v42 = v61;
  *uint64_t v44 = v61;
  *uint64_t v43 = v42;
  return result;
}

uint64_t sub_1D16BAB70@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = result + 1;
  if (__OFADD__(result, 1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v6 = v3[1] - *v3;
  uint64_t v7 = v3[5] - v3[4];
  if (v4 == v6 || v5 == v7)
  {
LABEL_8:
    uint64_t v4 = v3[1] - *v3;
    uint64_t v5 = v3[5] - v3[4];
  }
  else
  {
    while (1)
    {
      uint64_t v9 = *(void *)(v3[2] + 8 * v4);
      uint64_t v10 = *(void *)(v3[6] + 8 * v5);
      if (v9 == v10) {
        break;
      }
      if (v9 >= v10)
      {
        BOOL v11 = __OFADD__(v5++, 1);
        if (v11) {
          goto LABEL_19;
        }
      }
      else
      {
        BOOL v11 = __OFADD__(v4++, 1);
        if (v11)
        {
          __break(1u);
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
      }
      if (v4 == v6 || v5 == v7) {
        goto LABEL_8;
      }
    }
  }
  *a3 = v4;
  a3[1] = v5;
  return result;
}

uint64_t sub_1D16BAC04(uint64_t a1, void (*a2)(void *, uint64_t *))
{
  if (a1 < 0) {
    goto LABEL_21;
  }
  if (a1)
  {
    uint64_t v5 = sub_1D17BE1C0();
    *(void *)(v5 + 16) = a1;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
  }
  uint64_t v6 = v5 + 32;
  v8[1] = a1;
  uint64_t v9 = 0;
  v8[0] = v5 + 32;
  a2(v8, &v9);
  if (v2)
  {
    if (v9 > a1)
    {
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    if (!v8[0])
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    if (v6 != v8[0]) {
      goto LABEL_16;
    }
    *(void *)(v5 + 16) = v9;
    swift_bridgeObjectRelease();
    return v5;
  }
  if (v9 > a1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8[0])
  {
    if (v6 != v8[0])
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    *(void *)(v5 + 16) = v9;
    return v5;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t sub_1D16BAD48(uint64_t a1, uint64_t a2)
{
  return sub_1D16B9824(a1, a2, *(uint64_t **)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_1D16BAD84(uint64_t a1, uint64_t a2)
{
  return sub_1D16B9E7C(a1, a2, *(uint64_t **)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80), *(void *)(v2 + 88), *(void *)(v2 + 96), *(void *)(v2 + 104), *(void *)(v2 + 112));
}

uint64_t sub_1D16BADC8@<X0>(void *a1@<X8>)
{
  long long v4 = *(_OWORD *)(v1 + 32);
  type metadata accessor for SparseBuffer();
  return sub_1D16B8C64(v4, a1);
}

uint64_t type metadata accessor for SparseBuffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D16BAE88(uint64_t a1, uint64_t a2)
{
  return sub_1D16BA5E0(a1, a2, *(uint64_t **)(v2 + 48), *(void *)(v2 + 56), *(void (**)(char *))(v2 + 64), *(void *)(v2 + 72), *(long long **)(v2 + 80), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_1D16BAEC4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 64))(*(void *)(v1 + 80), a1);
}

uint64_t *sub_1D16BAEF8(uint64_t a1, void *a2)
{
  return sub_1D16B9F84(a1, a2, *(uint64_t **)(v2 + 64), *(void (**)(char *, char *))(v2 + 72), *(void *)(v2 + 80), *(long long **)(v2 + 88), *(long long **)(v2 + 96), *(void *)(v2 + 104), *(void *)(v2 + 112), *(void **)(v2 + 120), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

uint64_t *sub_1D16BAF3C(uint64_t a1, uint64_t a2)
{
  return sub_1D16B991C(a1, a2, *(void *)(v2 + 32), *(long long **)(v2 + 40), *(void (**)(char *, char *))(v2 + 48), *(void *)(v2 + 56), *(_OWORD **)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80), *(void **)(v2 + 88), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t ElementIdentifierSet.init()@<X0>(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *a1 = result;
  return result;
}

uint64_t ElementIdentifierSet.formUnion(_:)(uint64_t *a1)
{
  return sub_1D16BBF0C(v1, *a1, (SEL *)&selRef_unionWithIdentifierSet_);
}

void ElementIdentifierSet.intersection(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  long long v4 = *(void **)(*(void *)a1 + 16);
  id v5 = *(id *)(*(void *)v2 + 16);
  id v6 = v4;
  id v7 = objc_msgSend(v5, sel_identifierSetByIntersectingIdentifierSet_, v6);
  objc_msgSend(v7, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v9;
  swift_release();

  *a2 = v8;
}

id ElementIdentifierSet.count.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_count);
}

Swift::Bool __swiftcall ElementIdentifierSet.contains(_:)(KnowledgeGraphKit::ElementIdentifier a1)
{
  return objc_msgSend(*(id *)(*(void *)v1 + 16), sel_containsIdentifier_, *(void *)a1.rawValue);
}

void ElementIdentifierSet.subtracting(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  long long v4 = *(void **)(*(void *)a1 + 16);
  id v5 = *(id *)(*(void *)v2 + 16);
  id v6 = v4;
  id v7 = objc_msgSend(v5, sel_identifierSetBySubtractingIdentifierSet_, v6);
  objc_msgSend(v7, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v9;

  *a2 = v8;
}

uint64_t ElementIdentifierSet.insert(_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    id v5 = *(id *)(*(void *)v2 + 16);
    objc_msgSend(v5, sel_mutableCopy);
    sub_1D17BE690();
    swift_unknownObjectRelease();
    sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
    swift_dynamicCast();

    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v10;
    *(void *)uint64_t v2 = v6;
    swift_release();
  }
  id v7 = *(id *)(*(void *)v2 + 16);
  uint64_t v8 = objc_msgSend(v7, sel_containsIdentifier_, v4) ^ 1;
  objc_msgSend(v7, sel_addIdentifier_, v4);

  *a1 = v4;
  return v8;
}

uint64_t ElementIdentifierSet.init(_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  objc_msgSend(a1, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v5;
  *a2 = result;
  return result;
}

{
  id v3;
  uint64_t result;

  long long v3 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_initWithElementIdentifier_, *a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *a2 = result;
  return result;
}

void __swiftcall ElementIdentifierSet.wrappedValue()(KGElementIdentifierSet *__return_ptr retstr)
{
  id v2 = *(id *)(*(void *)v1 + 16);
  objc_msgSend(v2, sel_copy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, &qword_1EBD27510);
  swift_dynamicCast();
}

uint64_t ElementIdentifierSet.formIntersection(_:)(uint64_t *a1)
{
  return sub_1D16BB710(a1, (SEL *)&selRef_intersectWithIdentifierSet_);
}

uint64_t ElementIdentifierSet.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v9 = *(void *)(a1 + 8 * v7 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        id v10 = *(id *)(v5 + 16);
        objc_msgSend(v10, sel_mutableCopy);
        sub_1D17BE690();
        swift_unknownObjectRelease();
        sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
        swift_dynamicCast();

        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = v13;
        swift_release();
        uint64_t v5 = v11;
      }
      ++v7;
      id v8 = *(id *)(v5 + 16);
      objc_msgSend(v8, sel_containsIdentifier_, v9);
      objc_msgSend(v8, sel_addIdentifier_, v9);
    }
    while (v6 != v7);
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

id ElementIdentifierSet.isEmpty.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_isEmpty);
}

KnowledgeGraphKit::ElementIdentifier_optional __swiftcall ElementIdentifierSet.remove(_:)(KnowledgeGraphKit::ElementIdentifier a1)
{
  sub_1D16BC9F8((uint64_t *)a1.rawValue, (SEL *)&selRef_removeIdentifier_, v1);
  result.value.rawValue = v2;
  result.is_nil = v3;
  return result;
}

uint64_t ElementIdentifierSet.formSymmetricDifference(_:)(uint64_t *a1)
{
  return sub_1D16BBF0C(v1, *a1, (SEL *)&selRef_formSymmetricDifferenceWithIdentifierSet_);
}

uint64_t ElementIdentifierSet.subtract(_:)(uint64_t *a1)
{
  return sub_1D16BB710(a1, (SEL *)&selRef_subtractIdentifierSet_);
}

uint64_t sub_1D16BB710(uint64_t *a1, SEL *a2)
{
  uint64_t v4 = *a1;
  swift_retain();
  return sub_1D16BBF0C(v2, v4, a2);
}

id ElementIdentifierSet.intersects(_:)(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)v1 + 16), sel_intersectsIdentifierSet_, *(void *)(*(void *)a1 + 16));
}

id sub_1D16BB790(uint64_t a1, uint64_t a2)
{
  Swift::Bool v3 = *(void **)(a2 + 16);
  uint64_t v4 = *(void **)(a1 + 16);
  swift_retain();
  id v5 = v3;
  id v6 = v4;
  id v7 = objc_msgSend(v5, sel_identifierSetByIntersectingIdentifierSet_, v6);
  objc_msgSend(v7, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();
  swift_release();

  id v8 = objc_msgSend(v10, sel_isEqualToElementIdentifierSet_, *(void *)(a2 + 16));
  return v8;
}

id sub_1D16BB898(uint64_t a1, uint64_t a2)
{
  Swift::Bool v3 = *(void **)(a1 + 16);
  uint64_t v4 = *(void **)(a2 + 16);
  swift_retain();
  id v5 = v3;
  id v6 = v4;
  id v7 = objc_msgSend(v5, sel_identifierSetByIntersectingIdentifierSet_, v6);
  objc_msgSend(v7, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();
  swift_release();

  id v8 = objc_msgSend(v10, sel_isEqualToElementIdentifierSet_, *(void *)(a1 + 16));
  return v8;
}

uint64_t ElementIdentifierSet.sparseOffsetArray.getter()
{
  uint64_t v1 = *v0;
  id v2 = objc_msgSend(*(id *)(*v0 + 16), sel_count);
  swift_retain();
  uint64_t v3 = sub_1D16A99D0((uint64_t)v2, v1);
  swift_release();
  return v3;
}

uint64_t ElementIdentifierSet.sparseArray<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v17 = a3;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness, v11);
  uint64_t v12 = *v4;
  uint64_t v13 = *(void **)(v12 + 16);
  swift_retain();
  uint64_t v14 = sub_1D16A99D0((uint64_t)objc_msgSend(v13, sel_count, v17), v12);
  swift_release();
  swift_getAssociatedConformanceWitness();
  sub_1D17BEC00();
  sub_1D17BEBA0();
  uint64_t v15 = sub_1D16AC0F4((uint64_t)v9, *(void *)(v14 + 16), a2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  return SparseArray.init(values:offsets:)(v15, v14, a2, a4);
}

uint64_t KGElementIdentifierSet.elementIdentifiers.getter@<X0>(uint64_t *a1@<X8>)
{
  id v3 = v1;
  objc_msgSend(v3, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v5;
  *a1 = result;
  return result;
}

void ElementIdentifierSet.withValue<A>(_:)(void (*a1)(void))
{
  id v3 = *(id *)(*(void *)v1 + 16);
  a1();
}

id sub_1D16BBD84(id result, uint64_t a2, uint64_t a3, id a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a3;
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    id v9 = result;
    if (v6)
    {
      while (v9 != a4)
      {
        id v9 = objc_msgSend(*(id *)(a6 + 16), sel_indexAfterIndex_, v9, a2);
        a2 = v11;
        if (!--v6) {
          return v9;
        }
      }
      return 0;
    }
    return v9;
  }
  return result;
}

id ElementIdentifierSet.init(_:)@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  id v4 = *a1;
  id v3 = a1[1];
  id v5 = a1[2];
  uint64_t v6 = (id *)a1[4];
  id result = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
  uint64_t v8 = result;
  if (v4 == v5)
  {
LABEL_6:
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
    id result = (id)swift_allocObject();
    *((void *)result + 2) = v8;
    *a2 = result;
  }
  else
  {
    id v9 = v4;
    while (v9 >= v4 && v9 < v5)
    {
      id v10 = objc_msgSend(v6[2], sel_indexAfterIndex_, v9, v3);
      id v3 = v11;
      id result = objc_msgSend(v8, sel_addIdentifier_, v9);
      id v9 = v10;
      if (v10 == v5) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1D16BBF0C(uint64_t a1, uint64_t a2, SEL *a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    id v6 = *(id *)(*(void *)a1 + 16);
    objc_msgSend(v6, sel_mutableCopy);
    sub_1D17BE690();
    swift_unknownObjectRelease();
    sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
    swift_dynamicCast();

    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v9;
    *(void *)a1 = v7;
    swift_release();
  }
  objc_msgSend(*(id *)(*(void *)a1 + 16), *a3, *(void *)(a2 + 16));
  return swift_release();
}

void ElementIdentifierSet.indexSet.getter()
{
  id v1 = *(id *)(*(void *)v0 + 16);
  id v2 = objc_msgSend(v1, sel_indexSet);
  sub_1D17BDDA0();
}

id static ElementIdentifierSet.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(void *)a1 + 16), sel_isEqualToElementIdentifierSet_, *(void *)(*(void *)a2 + 16));
}

id sub_1D16BC0B8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(void *)a1 + 16), sel_isEqualToElementIdentifierSet_, *(void *)(*(void *)a2 + 16));
}

BOOL static KGElementIdentifierSetIndex.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

BOOL static KGElementIdentifierSetIndex.< infix(_:_:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return a1 < a3;
}

BOOL sub_1D16BC100(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_1D16BC114(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1D16BC128(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1D16BC13C(void *a1, void *a2)
{
  return *a2 < *a1;
}

id ElementIdentifierSet.startIndex.getter()
{
  return sub_1D16BC168((SEL *)&selRef_startIndex);
}

id ElementIdentifierSet.endIndex.getter()
{
  return sub_1D16BC168((SEL *)&selRef_endIndex);
}

id sub_1D16BC168(SEL *a1)
{
  return [*(id *)(*(void *)v1 + 16) *a1];
}

KGElementIdentifierSetIndex __swiftcall ElementIdentifierSet.index(after:)(KGElementIdentifierSetIndex after)
{
  id v2 = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_indexAfterIndex_, after.var0, after.var1);
  result.var1 = v3;
  result.var0 = (unint64_t)v2;
  return result;
}

uint64_t ElementIdentifierSet.subscript.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

id sub_1D16BC1A0@<X0>(void *a1@<X8>)
{
  return sub_1D16BC1B8((SEL *)&selRef_startIndex, a1);
}

id sub_1D16BC1AC@<X0>(void *a1@<X8>)
{
  return sub_1D16BC1B8((SEL *)&selRef_endIndex, a1);
}

id sub_1D16BC1B8@<X0>(SEL *a1@<X2>, void *a2@<X8>)
{
  id result = [*(id *)(*(void *)v2 + 16) *a1];
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t (*sub_1D16BC1EC(void *a1, void *a2))()
{
  *a1 = *a2;
  return nullsub_1;
}

id sub_1D16BC218@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  unint64_t v8 = *v2;
  id v9 = objc_msgSend(*(id *)(v8 + 16), sel_startIndex);
  id result = objc_msgSend(*(id *)(v8 + 16), sel_endIndex);
  if (result < v9)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v4 < (unint64_t)v9)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((unint64_t)result < v6)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  a2[3] = v7;
  a2[4] = v8;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  return (id)swift_retain();
}

id sub_1D16BC2C4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  *a1 = v3;
  unint64_t v4 = *(void **)(v3 + 16);
  swift_retain();
  a1[1] = objc_msgSend(v4, sel_startIndex);
  a1[2] = v5;
  id result = objc_msgSend(*(id *)(v3 + 16), sel_endIndex);
  a1[3] = result;
  a1[4] = v7;
  return result;
}

id sub_1D16BC328()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_isEmpty);
}

void sub_1D16BC350(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
}

void *sub_1D16BC360@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = a2;
    unint64_t v6 = (void *)*result;
    uint64_t v7 = result[1];
    if (a2)
    {
      uint64_t v8 = *v3;
      do
      {
        id result = objc_msgSend(*(id *)(v8 + 16), sel_indexAfterIndex_, v6, v7);
        unint64_t v6 = result;
        uint64_t v7 = v9;
        --v4;
      }
      while (v4);
    }
    *a3 = v6;
    a3[1] = v7;
  }
  return result;
}

id sub_1D16BC3C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id result = sub_1D16BBD84(*(id *)a1, *(void *)(a1 + 8), a2, *(id *)a3, *(void *)(a3 + 8), *v4);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = v8 & 1;
  return result;
}

void *sub_1D16BC40C(void *result, void *a2)
{
  uint64_t v3 = (void *)*a2;
  if (*a2 < *result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if ((void *)*result != v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *v2;
    while (1)
    {
      uint64_t v4 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        break;
      }
      id result = objc_msgSend(*(id *)(v6 + 16), sel_indexAfterIndex_);
      ++v5;
      if (result == v3) {
        return (void *)v4;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  return 0;
}

void *sub_1D16BC49C(void *result, void *a2)
{
  if (*result < *a2 || *result >= a2[2]) {
    __break(1u);
  }
  return result;
}

void *sub_1D16BC4BC(void *result, void *a2)
{
  if (*result < *a2 || a2[2] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_1D16BC4DC(void *result, void *a2)
{
  if (*result < *a2 || a2[2] < result[2]) {
    __break(1u);
  }
  return result;
}

id sub_1D16BC500@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*(id *)(*(void *)v2 + 16), sel_indexAfterIndex_, *a1, a1[1]);
  *a2 = result;
  a2[1] = v5;
  return result;
}

id sub_1D16BC53C(void *a1)
{
  id result = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_indexAfterIndex_, *a1, a1[1]);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id sub_1D16BC578@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  id result = objc_msgSend(*(id *)(v3 + 16), sel_startIndex);
  *a1 = v3;
  a1[1] = result;
  a1[2] = v5;
  return result;
}

id sub_1D16BC5B4()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_count);
}

uint64_t sub_1D16BC5C8()
{
  uint64_t v1 = sub_1D1666950(*v0);
  swift_release();
  return v1;
}

id sub_1D16BC600(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1D16F6FD4(a1, a2, a3, *v3);
}

void ElementIdentifierSet.hash(into:)()
{
  id v1 = *(id *)(*(void *)v0 + 16);
  objc_msgSend(v1, sel_hash);
  sub_1D17BED30();
}

uint64_t ElementIdentifierSet.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_1D17BED20();
  id v2 = *(id *)(v1 + 16);
  objc_msgSend(v2, sel_hash);
  sub_1D17BED30();

  return sub_1D17BED80();
}

uint64_t sub_1D16BC6C8()
{
  uint64_t v1 = *v0;
  sub_1D17BED20();
  id v2 = *(id *)(v1 + 16);
  objc_msgSend(v2, sel_hash);
  sub_1D17BED30();

  return sub_1D17BED80();
}

void sub_1D16BC728()
{
  id v1 = *(id *)(*(void *)v0 + 16);
  objc_msgSend(v1, sel_hash);
  sub_1D17BED30();
}

uint64_t sub_1D16BC788()
{
  uint64_t v1 = *v0;
  sub_1D17BED20();
  id v2 = *(id *)(v1 + 16);
  objc_msgSend(v2, sel_hash);
  sub_1D17BED30();

  return sub_1D17BED80();
}

uint64_t ElementIdentifierSet.description.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = sub_1D1666950(v0);
  swift_release();
  uint64_t v2 = MEMORY[0x1D25F8AF0](v1, &type metadata for ElementIdentifier);
  swift_release();
  return v2;
}

uint64_t sub_1D16BC84C()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = sub_1D1666950(v0);
  swift_release();
  uint64_t v2 = MEMORY[0x1D25F8AF0](v1, &type metadata for ElementIdentifier);
  swift_release();
  return v2;
}

void ElementIdentifierSet.union(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

void ElementIdentifierSet.symmetricDifference(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1D16BC8D0(uint64_t a1@<X0>, SEL *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void **)(*(void *)v3 + 16);
  uint64_t v7 = *(void **)(*(void *)a1 + 16);
  id v8 = v6;
  id v9 = v7;
  id v10 = objc_msgSend(v8, *a2, v9);
  objc_msgSend(v10, sel_mutableCopy);
  sub_1D17BE690();
  swift_unknownObjectRelease();
  sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
  swift_dynamicCast();

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v12;
  swift_release();
  swift_release();

  *a3 = v11;
}

void ElementIdentifierSet.update(with:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1D16BC9F8(uint64_t *a1@<X0>, SEL *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    id v7 = *(id *)(*(void *)v3 + 16);
    objc_msgSend(v7, sel_mutableCopy);
    sub_1D17BE690();
    swift_unknownObjectRelease();
    sub_1D165C128(0, (unint64_t *)&qword_1EBD27518);
    swift_dynamicCast();

    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v12;
    *(void *)uint64_t v3 = v8;
    swift_release();
  }
  id v9 = *(id *)(*(void *)v3 + 16);
  unsigned int v10 = objc_msgSend(v9, sel_containsIdentifier_, v6);
  if (v10) {
    uint64_t v11 = v6;
  }
  else {
    uint64_t v11 = 0;
  }
  *(void *)a3 = v11;
  *(unsigned char *)(a3 + 8) = v10 ^ 1;
  objc_msgSend(v9, *a2, v6);
}

uint64_t ElementIdentifierSet.isDisjoint(with:)(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)v1 + 16), sel_intersectsIdentifierSet_, *(void *)(*(void *)a1 + 16)) ^ 1;
}

id sub_1D16BCB5C(void *a1)
{
  return objc_msgSend(*(id *)(*(void *)v1 + 16), sel_containsIdentifier_, *a1);
}

uint64_t sub_1D16BCB94(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return ElementIdentifierSet.insert(_:)(a1, &v3) & 1;
}

void sub_1D16BCBC8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  ElementIdentifierSet.update(with:)(&v2, a2);
}

uint64_t sub_1D16BCBF4(uint64_t *a1)
{
  return sub_1D16BBF0C(v1, *a1, (SEL *)&selRef_unionWithIdentifierSet_);
}

uint64_t sub_1D16BCC30(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1D16BCD14(a1, a2, a3, (SEL *)&selRef_intersectWithIdentifierSet_);
}

uint64_t sub_1D16BCC3C(uint64_t *a1)
{
  return sub_1D16BBF0C(v1, *a1, (SEL *)&selRef_formSymmetricDifferenceWithIdentifierSet_);
}

uint64_t sub_1D16BCC78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  ElementIdentifierSet.subtracting(_:)(a1, a2);
  return swift_release();
}

id sub_1D16BCCA4(uint64_t *a1)
{
  return sub_1D16BB790(*a1, *v1);
}

uint64_t sub_1D16BCCB0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)v1 + 16), sel_intersectsIdentifierSet_, *(void *)(*(void *)a1 + 16)) ^ 1;
}

id sub_1D16BCCE4(uint64_t *a1)
{
  return sub_1D16BB898(*a1, *v1);
}

uint64_t sub_1D16BCCF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

uint64_t sub_1D16BCD08(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1D16BCD14(a1, a2, a3, (SEL *)&selRef_subtractIdentifierSet_);
}

uint64_t sub_1D16BCD14(uint64_t *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v6 = *a1;
  swift_retain();
  return sub_1D16BBF0C(v4, v6, a4);
}

uint64_t sub_1D16BCD64()
{
  return sub_1D16BCE24(&qword_1EA6524B8);
}

unint64_t sub_1D16BCD9C()
{
  unint64_t result = qword_1EA6524C0;
  if (!qword_1EA6524C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA6524C0);
  }
  return result;
}

uint64_t sub_1D16BCDF0()
{
  return sub_1D16BCE24((unint64_t *)&qword_1EA6524C8);
}

uint64_t sub_1D16BCE24(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for KGElementIdentifierSetIndex(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D16BCE68()
{
  return sub_1D16BCF1C(&qword_1EA6524D0, &qword_1EA6524D8);
}

uint64_t sub_1D16BCEA4()
{
  return sub_1D16BCF1C(&qword_1EA6524E0, &qword_1EA6524E8);
}

uint64_t sub_1D16BCEE0()
{
  return sub_1D16BCF1C(&qword_1EA6524F0, &qword_1EA6524F8);
}

uint64_t sub_1D16BCF1C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D16BCF64()
{
  unint64_t result = qword_1EA652500;
  if (!qword_1EA652500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA652500);
  }
  return result;
}

unint64_t sub_1D16BCFBC()
{
  unint64_t result = qword_1EA652508;
  if (!qword_1EA652508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA652508);
  }
  return result;
}

ValueMetadata *type metadata accessor for ElementIdentifierSet()
{
  return &type metadata for ElementIdentifierSet;
}

unint64_t MAGraph.adjacencyMatrix(directed:)(unint64_t a1)
{
  if (!objc_msgSend((id)v1, sel_hasPendingRead)) {
    goto LABEL_91;
  }
  unint64_t v56 = MEMORY[0x1E4FBC860];
  id v5 = objc_msgSend((id)v1, sel_allNodes);
  uint64_t v2 = sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
  sub_1D1680D38((unint64_t *)&qword_1EA651A78, (unint64_t *)&qword_1EA652D30);
  uint64_t v6 = sub_1D17BE350();

  sub_1D16634F8(v6);
  unint64_t v1 = v56;
  unint64_t v53 = v56 >> 62;
  uint64_t v3 = v56 & 0xFFFFFFFFFFFFFF8;
  if (v56 >> 62) {
    goto LABEL_92;
  }
  uint64_t v7 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t result = v7 * v7;
  if ((unsigned __int128)(v7 * (__int128)v7) >> 64 == (v7 * v7) >> 63)
  {
    id v9 = (void *)sub_1D1665914(result, 0.0);
    uint64_t v10 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10)
    {
      uint64_t v45 = v10;
      uint64_t v41 = v7;
      uint64_t v52 = v7;
LABEL_6:
      int64_t v11 = 0;
      uint64_t v49 = (char *)(v1 + 32);
      uint64_t v47 = v3 + 32;
      unint64_t v48 = v1 & 0xC000000000000001;
      uint64_t v50 = v10 + 1;
      uint64_t v51 = v10;
      uint64_t v46 = (2 * v10) | 1;
      uint64_t v43 = v2;
      unint64_t v44 = v1;
      uint64_t v42 = v3;
      do
      {
        uint64_t v12 = *(void *)(v3 + 16);
        if (v11 >= (unint64_t)v12) {
          goto LABEL_85;
        }
        if (v11 == v50)
        {
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          swift_bridgeObjectRetain();
          uint64_t v7 = sub_1D17BEAD0();
          uint64_t v40 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
          unint64_t result = v7 * v40;
          uint64_t v52 = v40;
          if ((unsigned __int128)(v7 * (__int128)v40) >> 64 != (v7 * v40) >> 63) {
            goto LABEL_96;
          }
          id v9 = (void *)sub_1D1665914(result, 0.0);
          swift_bridgeObjectRetain();
          uint64_t v45 = sub_1D17BEAD0();
          if (!v45) {
            goto LABEL_65;
          }
          swift_bridgeObjectRetain();
          uint64_t v10 = sub_1D17BEAD0();
          unint64_t result = swift_bridgeObjectRelease();
          if (v10 < 0) {
            goto LABEL_97;
          }
          uint64_t v41 = v7;
          goto LABEL_6;
        }
        uint64_t v13 = *(void **)&v49[8 * v11];
        if (v53)
        {
          swift_bridgeObjectRetain();
          id v15 = v13;
          uint64_t v16 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
          if (v16 < v11) {
            goto LABEL_88;
          }
          swift_bridgeObjectRetain();
          uint64_t v12 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
        }
        else
        {
          id v14 = v13;
        }
        if (v12 < v10) {
          goto LABEL_87;
        }
        if (v48 && v11 != v10)
        {
          if (v11 >= v10) {
            goto LABEL_89;
          }
          int64_t v17 = v11;
          do
          {
            int64_t v18 = v17 + 1;
            sub_1D17BE890();
            int64_t v17 = v18;
          }
          while (v10 != v18);
        }
        swift_bridgeObjectRetain();
        uint64_t v2 = v3;
        unint64_t v19 = v46;
        uint64_t v20 = v47;
        int64_t v21 = v11;
        if (v53)
        {
          uint64_t v2 = sub_1D17BEAE0();
          uint64_t v20 = v22;
          int64_t v21 = v23;
          unint64_t v19 = v24;
          swift_bridgeObjectRelease();
        }
        BOOL v25 = __OFSUB__(v19 >> 1, v21);
        uint64_t v7 = (v19 >> 1) - v21;
        uint64_t v3 = v52;
        if (v7)
        {
          if (!((v7 < 0) ^ v25 | (v7 == 0)))
          {
            uint64_t v2 = 0;
            int64_t v55 = v11 * v52;
            uint64_t v26 = v20 + 8 * v21;
            uint64_t v54 = v13;
            while (1)
            {
              if (__OFADD__(v2, 1))
              {
                __break(1u);
LABEL_68:
                __break(1u);
LABEL_69:
                __break(1u);
LABEL_70:
                __break(1u);
LABEL_71:
                __break(1u);
LABEL_72:
                __break(1u);
LABEL_73:
                __break(1u);
LABEL_74:
                __break(1u);
LABEL_75:
                __break(1u);
LABEL_76:
                __break(1u);
LABEL_77:
                __break(1u);
LABEL_78:
                __break(1u);
LABEL_79:
                __break(1u);
LABEL_80:
                __break(1u);
LABEL_81:
                __break(1u);
LABEL_82:
                __break(1u);
LABEL_83:
                __break(1u);
LABEL_84:
                __break(1u);
LABEL_85:
                __break(1u);
                goto LABEL_86;
              }
              id v28 = *(id *)(v26 + 8 * v2);
              if ((a1 & 1) == 0) {
                break;
              }
              if (objc_msgSend(v13, sel_hasEdgeTowardNode_, v28))
              {
                uint64_t v29 = v2 + v11;
                if (__OFADD__(v2, v11)) {
                  goto LABEL_68;
                }
                if ((unsigned __int128)(v11 * (__int128)v52) >> 64 != (v11 * v52) >> 63) {
                  goto LABEL_70;
                }
                unint64_t v1 = v55 + v29;
                if (__OFADD__(v55, v29)) {
                  goto LABEL_72;
                }
                if (swift_isUniquelyReferenced_nonNull_native())
                {
                  if ((v1 & 0x8000000000000000) != 0) {
                    goto LABEL_75;
                  }
                }
                else
                {
                  id v9 = sub_1D1667604(v9);
                  if ((v1 & 0x8000000000000000) != 0) {
                    goto LABEL_75;
                  }
                }
                if (v1 >= v9[2]) {
                  goto LABEL_78;
                }
                v9[v1 + 4] = 0x3FF0000000000000;
              }
              if (objc_msgSend(v13, sel_hasEdgeFromNode_, v28, v41))
              {
                uint64_t v30 = v2 + v11;
                if (__OFADD__(v2, v11)) {
                  goto LABEL_74;
                }
                uint64_t v31 = v30 * v52;
                if ((unsigned __int128)(v30 * (__int128)v52) >> 64 != (v30 * v52) >> 63) {
                  goto LABEL_77;
                }
                unint64_t v1 = v31 + v11;
                if (__OFADD__(v31, v11)) {
                  goto LABEL_80;
                }
                if (swift_isUniquelyReferenced_nonNull_native())
                {
                  if ((v1 & 0x8000000000000000) != 0) {
                    goto LABEL_62;
                  }
                }
                else
                {
                  id v9 = sub_1D1667604(v9);
                  if ((v1 & 0x8000000000000000) != 0)
                  {
LABEL_62:
                    __break(1u);
                    goto LABEL_63;
                  }
                }
                if (v1 >= v9[2]) {
                  goto LABEL_83;
                }
                uint64_t v27 = &v9[v1 + 4];
LABEL_26:
                *uint64_t v27 = 0x3FF0000000000000;
              }
LABEL_27:

              if (v7 == ++v2) {
                goto LABEL_7;
              }
            }
            if (!objc_msgSend(v13, sel_hasEdgeWithNode_, v28)) {
              goto LABEL_27;
            }
            unint64_t v1 = v2 + v11;
            if (__OFADD__(v2, v11)) {
              goto LABEL_69;
            }
            int64_t v32 = v11 * v52;
            if ((unsigned __int128)(v11 * (__int128)v52) >> 64 != (v11 * v52) >> 63) {
              goto LABEL_71;
            }
            uint64_t v33 = v26;
            uint64_t v34 = v7;
            char v35 = (char *)a1;
            a1 = v32 + v1;
            if (__OFADD__(v32, v1)) {
              goto LABEL_73;
            }
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              if ((a1 & 0x8000000000000000) != 0) {
                goto LABEL_76;
              }
            }
            else
            {
              id v9 = sub_1D1667604(v9);
              if ((a1 & 0x8000000000000000) != 0) {
                goto LABEL_76;
              }
            }
            unint64_t v36 = v9[2];
            if (a1 >= v36) {
              goto LABEL_79;
            }
            v9[a1 + 4] = 0x3FF0000000000000;
            unint64_t v37 = v1 * v52;
            if ((unsigned __int128)((uint64_t)v1 * (__int128)v52) >> 64 != (uint64_t)(v1 * v52) >> 63) {
              goto LABEL_81;
            }
            BOOL v25 = __OFADD__(v37, v11);
            unint64_t v38 = v37 + v11;
            if (v25) {
              goto LABEL_82;
            }
            if (v38 >= v36) {
              goto LABEL_84;
            }
            uint64_t v27 = &v9[v38 + 4];
            a1 = (unint64_t)v35;
            uint64_t v7 = v34;
            uint64_t v26 = v33;
            uint64_t v13 = v54;
            goto LABEL_26;
          }
          goto LABEL_90;
        }
LABEL_7:
        ++v11;

        swift_unknownObjectRelease();
        unint64_t v1 = v44;
        uint64_t v3 = v42;
        uint64_t v2 = v43;
        uint64_t v10 = v51;
      }
      while (v11 != v45);
      uint64_t v7 = v41;
LABEL_65:
      uint64_t v39 = v52;
    }
    else
    {
LABEL_63:
      uint64_t v39 = v7;
    }
    swift_bridgeObjectRelease();
    type metadata accessor for MAAdjacencyMatrixRepresentation();
    unint64_t result = swift_allocObject();
    *(unsigned char *)(result + 48) = a1 & 1;
    *(void *)(result + 16) = v7;
    *(void *)(result + 24) = v39;
    *(void *)(result + 32) = v9;
    *(void *)(result + 40) = v1;
  }
  else
  {
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
  }
  return result;
}

unint64_t MAGraph.adjacencyWeightedMatrix(directed:repeating:weightedEdges:)(char a1, double (*a2)(unint64_t), double a3)
{
  if (!objc_msgSend(v3, sel_hasPendingRead)) {
    goto LABEL_92;
  }
  unint64_t v60 = MEMORY[0x1E4FBC860];
  id v9 = objc_msgSend(v3, sel_allNodes);
  unint64_t v5 = sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
  sub_1D1680D38((unint64_t *)&qword_1EA651A78, (unint64_t *)&qword_1EA652D30);
  uint64_t v10 = sub_1D17BE350();

  sub_1D16634F8(v10);
  uint64_t v6 = v60;
  uint64_t v4 = v60 & 0xFFFFFFFFFFFFFF8;
  uint64_t v7 = (__objc2_class **)(v60 >> 62);
  if (v60 >> 62) {
    goto LABEL_93;
  }
  uint64_t v11 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t result = v11 * v11;
  if ((unsigned __int128)(v11 * (__int128)v11) >> 64 == (v11 * v11) >> 63)
  {
    uint64_t v13 = (void *)sub_1D1665914(result, a3);
    uint64_t v14 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v14)
    {
LABEL_65:
      uint64_t v15 = v11;
LABEL_67:
      swift_bridgeObjectRelease();
      type metadata accessor for MASquareMatrixRepresentation();
      unint64_t result = swift_allocObject();
      *(void *)(result + 16) = v11;
      *(void *)(result + 24) = v15;
      *(void *)(result + 32) = v13;
      *(void *)(result + 40) = v6;
      return result;
    }
    uint64_t v47 = v14;
    uint64_t v42 = v11;
    uint64_t v15 = v11;
    while (1)
    {
      int64_t v16 = 0;
      uint64_t v17 = v6 < 0 ? v6 : v4;
      uint64_t v49 = v4 + 32;
      unint64_t v50 = v6 & 0xC000000000000001;
      uint64_t v48 = (2 * v14) | 1;
      uint64_t v52 = v6 + 32;
      uint64_t v53 = v14 + 1;
      unint64_t v45 = v5;
      uint64_t v46 = v6;
      uint64_t v43 = v14;
      unint64_t v44 = v7;
      uint64_t v54 = v4;
      uint64_t v51 = (__objc2_class **)v17;
      while (1)
      {
        uint64_t v18 = *(void *)(v4 + 16);
        if (v16 >= (unint64_t)v18) {
          break;
        }
        if (v16 == v53) {
          goto LABEL_87;
        }
        unint64_t v19 = *(void **)(v52 + 8 * v16);
        if (v7)
        {
          uint64_t v4 = (uint64_t)v7;
          swift_bridgeObjectRetain();
          id v21 = v19;
          uint64_t v7 = v51;
          uint64_t v22 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
          if (v22 < v16) {
            goto LABEL_89;
          }
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
          uint64_t v7 = (__objc2_class **)v4;
          uint64_t v4 = v54;
        }
        else
        {
          id v20 = v19;
        }
        if (v18 < v14) {
          goto LABEL_88;
        }
        if (v50 && v16 != v14)
        {
          if (v16 >= v14) {
            goto LABEL_90;
          }
          int64_t v23 = v16;
          do
          {
            int64_t v24 = v23 + 1;
            sub_1D17BE890();
            int64_t v23 = v24;
          }
          while (v14 != v24);
        }
        swift_bridgeObjectRetain();
        unint64_t v5 = v48;
        uint64_t v25 = v49;
        uint64_t v4 = v16;
        if (v7)
        {
          sub_1D17BEAE0();
          uint64_t v25 = v26;
          uint64_t v4 = v27;
          unint64_t v5 = v28;
          swift_bridgeObjectRelease();
        }
        unint64_t v59 = (v5 >> 1) - v4;
        if (v5 >> 1 != v4)
        {
          if ((uint64_t)(v5 >> 1) <= v4) {
            goto LABEL_91;
          }
          uint64_t v6 = 0;
          uint64_t v55 = v16 * v15;
          uint64_t v58 = v25 + 8 * v4;
          while (!__OFADD__(v6, 1))
          {
            uint64_t v4 = (uint64_t)*(id *)(v58 + 8 * v6);
            if (a1)
            {
              if (objc_msgSend(v19, sel_hasEdgeTowardNode_, v4))
              {
                id v29 = objc_msgSend(v19, sel_edgesTowardNode_, v4);
                uint64_t v7 = off_1E68DA0C0;
                sub_1D165C128(0, (unint64_t *)&qword_1EA6514F0);
                sub_1D1680D38(&qword_1EA651C58, (unint64_t *)&qword_1EA6514F0);
                unint64_t v5 = sub_1D17BE350();

                a3 = a2(v5);
                swift_bridgeObjectRelease();
                uint64_t v30 = v6 + v16;
                if (__OFADD__(v6, v16)) {
                  goto LABEL_69;
                }
                if ((unsigned __int128)(v16 * (__int128)v15) >> 64 != (v16 * v15) >> 63) {
                  goto LABEL_71;
                }
                unint64_t v31 = v55 + v30;
                if (__OFADD__(v55, v30)) {
                  goto LABEL_73;
                }
                if (swift_isUniquelyReferenced_nonNull_native())
                {
                  if ((v31 & 0x8000000000000000) != 0) {
                    goto LABEL_76;
                  }
                }
                else
                {
                  uint64_t v13 = sub_1D1667604(v13);
                  if ((v31 & 0x8000000000000000) != 0) {
                    goto LABEL_76;
                  }
                }
                if (v31 >= v13[2]) {
                  goto LABEL_79;
                }
                *(double *)&v13[v31 + 4] = a3;
              }
              if (objc_msgSend(v19, sel_hasEdgeFromNode_, v4))
              {
                id v32 = objc_msgSend(v19, sel_edgesFromNode_, v4);
                uint64_t v7 = off_1E68DA0C0;
                sub_1D165C128(0, (unint64_t *)&qword_1EA6514F0);
                sub_1D1680D38(&qword_1EA651C58, (unint64_t *)&qword_1EA6514F0);
                unint64_t v5 = sub_1D17BE350();

                a3 = a2(v5);
                swift_bridgeObjectRelease();
                uint64_t v33 = v6 + v16;
                if (__OFADD__(v6, v16)) {
                  goto LABEL_75;
                }
                uint64_t v34 = v33 * v15;
                if ((unsigned __int128)(v33 * (__int128)v15) >> 64 != (v33 * v15) >> 63) {
                  goto LABEL_78;
                }
                uint64_t v11 = v34 + v16;
                if (__OFADD__(v34, v16)) {
                  goto LABEL_81;
                }
                if (swift_isUniquelyReferenced_nonNull_native())
                {
                  if (v11 < 0) {
                    goto LABEL_64;
                  }
                }
                else
                {
                  uint64_t v13 = sub_1D1667604(v13);
                  if (v11 < 0)
                  {
LABEL_64:
                    __break(1u);
                    goto LABEL_65;
                  }
                }
                if ((unint64_t)v11 >= v13[2]) {
                  goto LABEL_84;
                }
                *(double *)&v13[v11 + 4] = a3;
              }
            }
            else if (objc_msgSend(v19, sel_hasEdgeWithNode_, v4))
            {
              id v35 = objc_msgSend(v19, sel_edgesWithNode_, v4);
              uint64_t v7 = off_1E68DA0C0;
              sub_1D165C128(0, (unint64_t *)&qword_1EA6514F0);
              sub_1D1680D38(&qword_1EA651C58, (unint64_t *)&qword_1EA6514F0);
              unint64_t v5 = sub_1D17BE350();

              a3 = a2(v5);
              swift_bridgeObjectRelease();
              uint64_t v36 = v6 + v16;
              if (__OFADD__(v6, v16)) {
                goto LABEL_70;
              }
              uint64_t v37 = v16 * v15;
              if ((unsigned __int128)(v16 * (__int128)v15) >> 64 != (v16 * v15) >> 63) {
                goto LABEL_72;
              }
              unint64_t v5 = v37 + v36;
              if (__OFADD__(v37, v36)) {
                goto LABEL_74;
              }
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                if ((v5 & 0x8000000000000000) != 0) {
                  goto LABEL_77;
                }
              }
              else
              {
                uint64_t v13 = sub_1D1667604(v13);
                if ((v5 & 0x8000000000000000) != 0) {
                  goto LABEL_77;
                }
              }
              unint64_t v38 = v13[2];
              if (v5 >= v38) {
                goto LABEL_80;
              }
              *(double *)&v13[v5 + 4] = a3;
              uint64_t v39 = v36 * v15;
              if ((unsigned __int128)(v36 * (__int128)v15) >> 64 != (v36 * v15) >> 63) {
                goto LABEL_82;
              }
              BOOL v40 = __OFADD__(v39, v16);
              unint64_t v41 = v39 + v16;
              if (v40) {
                goto LABEL_83;
              }
              if (v41 >= v38) {
                goto LABEL_85;
              }
              *(double *)&v13[v41 + 4] = a3;
            }

            if (v59 == ++v6) {
              goto LABEL_10;
            }
          }
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
          break;
        }
LABEL_10:
        ++v16;

        swift_unknownObjectRelease();
        uint64_t v6 = v46;
        uint64_t v7 = v44;
        unint64_t v5 = v45;
        uint64_t v4 = v54;
        uint64_t v14 = v43;
        if (v16 == v47)
        {
          uint64_t v11 = v42;
          goto LABEL_67;
        }
      }
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      swift_bridgeObjectRetain();
      uint64_t v11 = sub_1D17BEAD0();
      uint64_t v15 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
      unint64_t result = v11 * v15;
      if ((unsigned __int128)(v11 * (__int128)v15) >> 64 != (v11 * v15) >> 63) {
        break;
      }
      uint64_t v13 = (void *)sub_1D1665914(result, a3);
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_1D17BEAD0();
      if (!v47) {
        goto LABEL_67;
      }
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_1D17BEAD0();
      unint64_t result = swift_bridgeObjectRelease();
      if (v14 < 0) {
        goto LABEL_98;
      }
      uint64_t v42 = v11;
    }
  }
  __break(1u);
LABEL_98:
  __break(1u);
  return result;
}

void *MAGraph.degreeVector(type:)(uint64_t a1)
{
  return sub_1D16BDDB4(a1, (SEL *)&selRef_degreeCount, (SEL *)&selRef_inDegreeCount, (SEL *)&selRef_outDegreeCount);
}

void *MAGraph.multiDegreeVector(type:)(uint64_t a1)
{
  return sub_1D16BDDB4(a1, (SEL *)&selRef_multiDegreeCount, (SEL *)&selRef_inMultiDegreeCount, (SEL *)&selRef_outMultiDegreeCount);
}

void *sub_1D16BDDB4(uint64_t a1, SEL *a2, SEL *a3, SEL *a4)
{
  if (!objc_msgSend(v4, sel_hasPendingRead)) {
    goto LABEL_26;
  }
  unint64_t v19 = MEMORY[0x1E4FBC860];
  id v9 = objc_msgSend(v4, sel_allNodes);
  sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
  sub_1D1680D38((unint64_t *)&qword_1EA651A78, (unint64_t *)&qword_1EA652D30);
  uint64_t v10 = sub_1D17BE350();

  sub_1D16634F8(v10);
  uint64_t v4 = (void *)v19;
  if (v19 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    uint64_t v12 = (void *)sub_1D1665914(v11, 0.0);
    swift_bridgeObjectRetain();
    unint64_t result = (void *)sub_1D17BEAD0();
    uint64_t v13 = (uint64_t)result;
    if (result) {
      goto LABEL_4;
    }
LABEL_28:
    swift_bridgeObjectRelease();
LABEL_29:
    type metadata accessor for MAVectorRepresentation();
    unint64_t result = (void *)swift_allocObject();
    result[2] = 1;
    result[3] = v11;
    result[4] = v12;
    result[5] = v4;
    return result;
  }
  unint64_t v11 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v12 = (void *)sub_1D1665914(v11, 0.0);
  uint64_t v13 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t result = (void *)swift_bridgeObjectRetain();
  if (!v13) {
    goto LABEL_28;
  }
LABEL_4:
  if (v13 >= 1)
  {
    unint64_t v18 = v11;
    unint64_t v15 = 0;
    while (1)
    {
      int64_t v16 = (void *)*((void *)v4 + v15 + 4);
      switch(a1)
      {
        case 1:
          id v17 = [v16 *a3];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v12 = sub_1D1667604(v12);
          }
          if (v15 >= v12[2]) {
            goto LABEL_24;
          }
          break;
        case 2:
          id v17 = [v16 *a4];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v12 = sub_1D1667604(v12);
          }
          if (v15 >= v12[2]) {
            goto LABEL_25;
          }
          break;
        case 3:
          id v17 = [v16 *a2];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v12 = sub_1D1667604(v12);
          }
          if (v15 >= v12[2])
          {
            __break(1u);
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
          break;
        default:
          goto LABEL_7;
      }
      *(double *)&v12[v15 + 4] = (double)(uint64_t)v17;

LABEL_7:
      if (v13 == ++v15)
      {
        swift_bridgeObjectRelease();
        unint64_t v11 = v18;
        goto LABEL_29;
      }
    }
  }
  __break(1u);
  return result;
}

unint64_t MAGraph.transitionMatrix(directed:)(char a1)
{
  if (!objc_msgSend(v1, sel_hasPendingRead)) {
    goto LABEL_46;
  }
  unint64_t v28 = MEMORY[0x1E4FBC860];
  id v3 = objc_msgSend(v1, sel_allNodes);
  sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
  sub_1D1680D38((unint64_t *)&qword_1EA651A78, (unint64_t *)&qword_1EA652D30);
  uint64_t v4 = sub_1D17BE350();

  sub_1D16634F8(v4);
  unint64_t v1 = (void *)v28;
  unint64_t v2 = v28 & 0xFFFFFFFFFFFFFF8;
  if (v28 >> 62)
  {
LABEL_47:
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_1D17BEAD0();
    uint64_t v21 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    unint64_t result = v20 * v21;
    uint64_t v27 = v21;
    if ((unsigned __int128)(v20 * (__int128)v21) >> 64 == (v20 * v21) >> 63)
    {
      uint64_t v7 = (void *)sub_1D1665914(result, 0.0);
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_1D17BEAD0();
      if (v22)
      {
        uint64_t v8 = v22;
        uint64_t v23 = v20;
        swift_bridgeObjectRetain();
        uint64_t v9 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
LABEL_6:
        unint64_t v10 = 0;
        unint64_t v25 = v2;
        uint64_t v24 = v8;
        do
        {
          if (v10 >= *(void *)(v2 + 16)) {
            goto LABEL_44;
          }
          if (v9)
          {
            if (v9 < 1) {
              goto LABEL_45;
            }
            unint64_t v11 = (void *)*((void *)v1 + v10 + 4);
            swift_bridgeObjectRetain();
            id v12 = v11;
            uint64_t v13 = 0;
            while (1)
            {
              id v14 = *((id *)v1 + v13 + 4);
              if (objc_msgSend(v12, sel_hasEdgeWithNode_, v14))
              {
                if (a1)
                {
                  id v15 = objc_msgSend(v12, sel_outDegreeCount);
                  uint64_t v16 = v13 * v27;
                  if ((unsigned __int128)(v13 * (__int128)v27) >> 64 != (v13 * v27) >> 63)
                  {
                    __break(1u);
LABEL_38:
                    __break(1u);
LABEL_39:
                    __break(1u);
LABEL_40:
                    __break(1u);
LABEL_41:
                    __break(1u);
LABEL_42:
                    __break(1u);
LABEL_43:
                    __break(1u);
LABEL_44:
                    __break(1u);
LABEL_45:
                    __break(1u);
LABEL_46:
                    __break(1u);
                    goto LABEL_47;
                  }
                  unint64_t v2 = v16 + v10;
                  if (__OFADD__(v16, v10)) {
                    goto LABEL_39;
                  }
                  uint64_t v17 = (uint64_t)v15;
                  if (swift_isUniquelyReferenced_nonNull_native())
                  {
                    if ((v2 & 0x8000000000000000) != 0) {
                      goto LABEL_43;
                    }
                  }
                  else
                  {
                    uint64_t v7 = sub_1D1667604(v7);
                    if ((v2 & 0x8000000000000000) != 0) {
                      goto LABEL_43;
                    }
                  }
                  if (v2 >= v7[2]) {
                    goto LABEL_40;
                  }
                }
                else
                {
                  id v18 = objc_msgSend(v12, sel_degreeCount);
                  uint64_t v19 = v13 * v27;
                  if ((unsigned __int128)(v13 * (__int128)v27) >> 64 != (v13 * v27) >> 63) {
                    goto LABEL_38;
                  }
                  unint64_t v2 = v19 + v10;
                  if (__OFADD__(v19, v10)) {
                    goto LABEL_41;
                  }
                  uint64_t v17 = (uint64_t)v18;
                  if (swift_isUniquelyReferenced_nonNull_native())
                  {
                    if ((v2 & 0x8000000000000000) != 0) {
                      goto LABEL_32;
                    }
                  }
                  else
                  {
                    uint64_t v7 = sub_1D1667604(v7);
                    if ((v2 & 0x8000000000000000) != 0)
                    {
LABEL_32:
                      __break(1u);
                      goto LABEL_33;
                    }
                  }
                  if (v2 >= v7[2]) {
                    goto LABEL_42;
                  }
                }
                *(double *)&v7[v2 + 4] = 1.0 / (double)v17;
              }
              ++v13;

              if (v9 == v13)
              {

                swift_bridgeObjectRelease();
                uint64_t v8 = v24;
                unint64_t v2 = v25;
                break;
              }
            }
          }
          ++v10;
        }
        while (v10 != v8);
LABEL_33:
        swift_bridgeObjectRelease();
        uint64_t v20 = v23;
        goto LABEL_36;
      }
LABEL_35:
      swift_bridgeObjectRelease();
LABEL_36:
      type metadata accessor for MASquareMatrixRepresentation();
      unint64_t result = swift_allocObject();
      *(void *)(result + 16) = v20;
      *(void *)(result + 24) = v27;
      *(void *)(result + 32) = v7;
      *(void *)(result + 40) = v1;
      return result;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = v5 * v5;
    uint64_t v27 = v5;
    if ((unsigned __int128)(v5 * (__int128)v5) >> 64 == (v5 * v5) >> 63)
    {
      uint64_t v7 = (void *)sub_1D1665914(result, 0.0);
      uint64_t v8 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v8)
      {
        uint64_t v23 = v27;
        uint64_t v9 = v8;
        goto LABEL_6;
      }
      uint64_t v20 = v27;
      goto LABEL_35;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1D16BE424(unint64_t a1)
{
  return MAGraph.adjacencyMatrix(directed:)(a1);
}

unint64_t sub_1D16BE448(char a1, double (*a2)(unint64_t), double a3)
{
  return MAGraph.adjacencyWeightedMatrix(directed:repeating:weightedEdges:)(a1, a2, a3);
}

void *sub_1D16BE46C(uint64_t a1)
{
  return MAGraph.degreeVector(type:)(a1);
}

void *sub_1D16BE490(uint64_t a1)
{
  return MAGraph.multiDegreeVector(type:)(a1);
}

unint64_t sub_1D16BE4B4(char a1)
{
  return MAGraph.transitionMatrix(directed:)(a1);
}

__n128 MAGraphMatrix.degreeMatrix(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (*(uint64_t (**)(void))(a3 + 24))();
  MAMatrix.diag()();
  uint64_t v4 = *(void *)(v3 + 40);
  swift_bridgeObjectRetain();
  swift_release();
  type metadata accessor for MASquareMatrixRepresentation();
  uint64_t v5 = swift_allocObject();
  __n128 result = v7;
  *(__n128 *)(v5 + 16) = v7;
  *(void *)(v5 + 32) = v8;
  *(void *)(v5 + 40) = v4;
  return result;
}

__n128 MAGraphMatrix.multiDegreeMatrix(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (*(uint64_t (**)(void))(a3 + 32))();
  MAMatrix.diag()();
  uint64_t v4 = *(void *)(v3 + 40);
  swift_bridgeObjectRetain();
  swift_release();
  type metadata accessor for MASquareMatrixRepresentation();
  uint64_t v5 = swift_allocObject();
  __n128 result = v7;
  *(__n128 *)(v5 + 16) = v7;
  *(void *)(v5 + 32) = v8;
  *(void *)(v5 + 40) = v4;
  return result;
}

double MAGraphMatrix.laplacianMatrix(directed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = sub_1D16BE660(a1, a2, a3, (void (*)(__n128 *__return_ptr, long long *, long long *))static MAMatrix.laplacian(degree:adjacency:)).n128_u64[0];
  return result;
}

double MAGraphMatrix.laplacianWeightedMatrix(directed:repeating:weightedEdges:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)&double result = sub_1D16BE78C(a1, a2, a3, a4, a5, (void (*)(__n128 *__return_ptr, long long *, long long *))static MAMatrix.laplacian(degree:adjacency:), a6).n128_u64[0];
  return result;
}

double MAGraphMatrix.normalizedLaplacianMatrix(directed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = sub_1D16BE660(a1, a2, a3, (void (*)(__n128 *__return_ptr, long long *, long long *))static MAMatrix.normalizedLaplacian(degree:adjacency:)).n128_u64[0];
  return result;
}

__n128 sub_1D16BE660(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(__n128 *__return_ptr, long long *, long long *))
{
  __n128 v8 = MAGraphMatrix.degreeMatrix(type:)(3, a2, a3);
  uint64_t v10 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(a3 + 8))(a1, a2, a3, v8);
  uint64_t v12 = *(void *)(v10 + 32);
  long long v21 = *(_OWORD *)(v10 + 16);
  uint64_t v22 = v12;
  uint64_t v13 = *(void *)(v11 + 32);
  long long v19 = *(_OWORD *)(v11 + 16);
  uint64_t v20 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a4(&v23, &v21, &v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __n128 v18 = v23;
  uint64_t v14 = v24;
  uint64_t v15 = *(void *)(v10 + 40);
  swift_bridgeObjectRetain();
  swift_release();
  type metadata accessor for MAAdjacencyMatrixRepresentation();
  uint64_t v16 = swift_allocObject();
  *(unsigned char *)(v16 + 48) = a1;
  __n128 result = v18;
  *(__n128 *)(v16 + 16) = v18;
  *(void *)(v16 + 32) = v14;
  *(void *)(v16 + 40) = v15;
  return result;
}

double MAGraphMatrix.normalizedLaplacianWeightedMatrix(directed:repeating:weightedEdges:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)&double result = sub_1D16BE78C(a1, a2, a3, a4, a5, (void (*)(__n128 *__return_ptr, long long *, long long *))static MAMatrix.normalizedLaplacian(degree:adjacency:), a6).n128_u64[0];
  return result;
}

__n128 sub_1D16BE78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(__n128 *__return_ptr, long long *, long long *), double a7)
{
  MAGraphMatrix.degreeMatrix(type:)(3, a4, a5);
  uint64_t v15 = v14;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(a5 + 16))(a1, a2, a3, a4, a5, a7);
  uint64_t v17 = *(void *)(v15 + 32);
  long long v26 = *(_OWORD *)(v15 + 16);
  uint64_t v27 = v17;
  uint64_t v18 = *(void *)(v16 + 32);
  long long v24 = *(_OWORD *)(v16 + 16);
  uint64_t v25 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a6(&v28, &v26, &v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __n128 v23 = v28;
  uint64_t v19 = v29;
  uint64_t v20 = *(void *)(v15 + 40);
  swift_bridgeObjectRetain();
  swift_release();
  type metadata accessor for MAAdjacencyMatrixRepresentation();
  uint64_t v21 = swift_allocObject();
  *(unsigned char *)(v21 + 48) = a1;
  __n128 result = v23;
  *(__n128 *)(v21 + 16) = v23;
  *(void *)(v21 + 32) = v19;
  *(void *)(v21 + 40) = v20;
  return result;
}

uint64_t MAGraphMatrix.singularDecompositionMatrix(elbowThreshold:directed:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Double a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  MAGraphMatrix.laplacianMatrix(directed:)(a1, a2, a3);
  uint64_t v6 = v5;
  Swift::Int v7 = v5[2];
  Swift::Int v8 = v5[3];
  uint64_t v9 = (double *)v5[4];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = (double *)sub_1D1667604(v9);
  }
  uint64_t v10 = v7 * v8;
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v10 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v10 > 0x7FFFFFFF) {
    goto LABEL_9;
  }
  v31[0] = v7 * v8;
  vvfabs(v9 + 4, v9 + 4, v31);
  uint64_t v24 = v6[5];
  swift_bridgeObjectRetain();
  swift_release();
  MAMatrix.svd()(v11);
  uint64_t v13 = *(void *)v31;
  uint64_t v12 = *(void *)&v31[2];
  uint64_t v14 = v32;
  uint64_t v21 = *((void *)&v27 + 1);
  uint64_t v22 = v27;
  uint64_t v20 = v28;
  *(_OWORD *)unint64_t v31 = v29;
  uint64_t v32 = v30;
  Swift::Int v15 = *(_OWORD *)&MAMatrix.elbow(threshold:)(a4);
  MAMatrix.trunc(rows:columns:)(1, v15);
  uint64_t v16 = v32;
  long long v17 = *(_OWORD *)v31;
  *(void *)unint64_t v31 = v13;
  *(void *)&void v31[2] = v12;
  uint64_t v32 = v14;
  long long v29 = v17;
  uint64_t v30 = v16;
  MAMatrix.diag(rows:columns:)(v7, v8);
  swift_bridgeObjectRelease();
  long long v25 = v27;
  uint64_t v26 = v28;
  <*> infix(_:_:)((uint64_t *)v31, &v25, (uint64_t *)&v29);
  swift_bridgeObjectRelease();
  long long v27 = v29;
  uint64_t v28 = v30;
  *(void *)&long long v25 = v22;
  *((void *)&v25 + 1) = v21;
  uint64_t v26 = v20;
  <*> infix(_:_:)((uint64_t *)&v27, &v25, (uint64_t *)v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v23 = *(_OWORD *)v31;
  uint64_t v18 = v32;
  type metadata accessor for MASquareMatrixRepresentation();
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = v23;
  *(void *)(result + 32) = v18;
  *(void *)(result + 40) = v24;
  return result;
}

uint64_t dispatch thunk of MAGraphMatrix.adjacencyMatrix(directed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of MAGraphMatrix.adjacencyWeightedMatrix(directed:repeating:weightedEdges:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of MAGraphMatrix.degreeVector(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of MAGraphMatrix.multiDegreeVector(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of MAGraphMatrix.transitionMatrix(directed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t SparseMatrix.rows.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t SparseMatrix.columns.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t sub_1D16BEBA8()
{
  return *(void *)(v0 + 32);
}

uint64_t sub_1D16BEBB0(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*sub_1D16BEBB8())()
{
  return nullsub_1;
}

uint64_t SparseMatrix.__allocating_init(rows:columns:)(int64_t a1, int64_t a2)
{
  uint64_t v4 = swift_allocObject();
  SparseMatrix.init(rows:columns:)(a1, a2);
  return v4;
}

int64_t SparseMatrix.init(rows:columns:)(int64_t result, int64_t a2)
{
  if (result < 1 || a2 < 1)
  {
    __break(1u);
  }
  else
  {
    v2[2] = result;
    v2[3] = a2;
    uint64_t result = (int64_t)sparse_matrix_create_float(result, a2);
    if (result)
    {
      v2[4] = result;
      return (int64_t)v2;
    }
  }
  __break(1u);
  return result;
}

uint64_t SparseMatrix.deinit()
{
  sparse_matrix_destroy(*(void **)(v0 + 32));
  return v0;
}

uint64_t SparseMatrix.__deallocating_deinit()
{
  sparse_matrix_destroy(*(void **)(v0 + 32));
  return MEMORY[0x1F4186488](v0, 40, 7);
}

uint64_t SparseMatrix.__allocating_init(denseMatrix:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int64_t v2 = a1[1];
  int64_t v3 = a1[2];
  type metadata accessor for SparseMatrix();
  uint64_t v4 = swift_allocObject();
  SparseMatrix.init(rows:columns:)(v2, v3);
  int64_t v5 = *(void *)(v4 + 24);
  swift_retain();
  uint64_t v6 = sub_1D1665A14(v5, 0);
  Swift::Int v7 = (void *)sub_1D1665A08(0, v5);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = (uint64_t)sub_1D166762C(v6);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    Swift::Int v7 = sub_1D1667618(v7);
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v2 < 0) {
    goto LABEL_15;
  }
LABEL_5:
  if (!v2)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    return v4;
  }
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 1;
    while (1)
    {
      int64_t v10 = sparse_pack_vector_float(v5, v5, (const float *)(v1 + 32 + 4 * v8), 1, (float *)(v6 + 32), v7 + 4);
      if (v10 >= 1) {
        sparse_insert_row_float(*(sparse_matrix_float *)(v4 + 32), v9 - 1, v10, (const float *)(v6 + 32), v7 + 4);
      }
      if (v2 == v9) {
        goto LABEL_13;
      }
      uint64_t v8 = v9 * v5;
      uint64_t v11 = (unsigned __int128)(v9++ * (__int128)v5) >> 64;
      if (v11 != v8 >> 63)
      {
        __break(1u);
        goto LABEL_13;
      }
    }
  }
LABEL_16:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SparseMatrix()
{
  return self;
}

uint64_t sub_1D16BEEAC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t result = v1 * v2;
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 != (v1 * v2) >> 63) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D16BEEC8()
{
  return sparse_get_matrix_nonzero_count(*(void **)(v0 + 32));
}

float *sub_1D16BEED0(float *result, uint64_t *a2, sparse_index *a3)
{
  sparse_index v4 = *a3;
  uint64_t v5 = *a2;
  if (*a3 >= *(void *)(v5 + 16))
  {
    __break(1u);
  }
  else
  {
    sparse_index v6 = a3[1];
    if (v6 < *(void *)(v5 + 24)) {
      return (float *)(int)sparse_insert_entry_float(*(sparse_matrix_float *)(v5 + 32), *result, v4, v6);
    }
  }
  __break(1u);
  return result;
}

float sub_1D16BEF0C(sparse_index row, sparse_index column_start)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (row < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  if (column_start < 0 || *(void *)(v2 + 16) <= row) {
    goto LABEL_12;
  }
  if (*(void *)(v2 + 24) <= column_start) {
    goto LABEL_13;
  }
  float val = 0.0;
  sparse_index v7 = 0;
  sparse_index column_end = 0;
  sparse_status v4 = sparse_extract_sparse_row_float(*(sparse_matrix_float *)(v2 + 32), row, column_start, &column_end, 1uLL, &val, &v7);
  BOOL v5 = v7 == column_start && v4 == 1;
  float result = val;
  if (!v5) {
    return 0.0;
  }
  return result;
}

sparse_index sub_1D16BEFCC(sparse_index i, sparse_index j, float a3)
{
  if (*(void *)(v3 + 16) <= i)
  {
    __break(1u);
  }
  else if (*(void *)(v3 + 24) > j)
  {
    return sparse_insert_entry_float(*(sparse_matrix_float *)(v3 + 32), a3, i, j);
  }
  __break(1u);
  return i;
}

uint64_t (*sub_1D16BEFFC(uint64_t a1, sparse_index row, sparse_index column_start))(uint64_t result, char a2)
{
  *(void *)(a1 + 8) = column_start;
  *(void *)(a1 + 16) = v3;
  *(void *)a1 = row;
  *(float *)(a1 + 24) = sub_1D16BEF0C(row, column_start);
  return sub_1D16BF050;
}

uint64_t sub_1D16BF050(uint64_t result, char a2)
{
  float v3 = *(float *)(result + 24);
  uint64_t v4 = *(void *)(result + 16);
  sparse_index v5 = *(void *)result;
  uint64_t v6 = *(void *)(v4 + 16);
  BOOL v7 = v6 <= *(void *)result;
  if (a2)
  {
    if (v6 <= *(void *)result)
    {
      __break(1u);
      goto LABEL_9;
    }
    sparse_index v8 = *(void *)(result + 8);
    sparse_index v9 = *(void *)(v4 + 24);
    BOOL v7 = v9 <= v8;
    if (v9 > v8) {
      return sparse_insert_entry_float(*(sparse_matrix_float *)(v4 + 32), v3, v5, v8);
    }
    __break(1u);
  }
  if (v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  sparse_index v8 = *(void *)(result + 8);
  if (*(void *)(v4 + 24) > v8) {
    return sparse_insert_entry_float(*(sparse_matrix_float *)(v4 + 32), v3, v5, v8);
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1D16BF0B0@<X0>(char **a1@<X8>)
{
  column_end[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(char **)(v1 + 16);
  int64_t v3 = *(void *)(v1 + 24);
  if ((unsigned __int128)((uint64_t)v4 * (__int128)v3) >> 64 != ((uint64_t)v4 * v3) >> 63)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = sub_1D1665A14((void)v4 * v3, 0);
  if (*(void *)(result + 16) != (void)v4 * v3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  if (((unint64_t)v4 & 0x8000000000000000) != 0) {
    goto LABEL_18;
  }
  uint64_t v6 = (char *)result;
  uint64_t v13 = a1;
  if (v4)
  {
    for (sparse_index i = 0; v4 != (char *)i; ++i)
    {
      uint64_t result = sparse_get_matrix_nonzero_count_for_row(*(void **)(v1 + 32), i);
      if (result >= 1)
      {
        sparse_dimension v8 = result;
        uint64_t v9 = sub_1D17BE1C0();
        *(void *)(v9 + 16) = v8;
        uint64_t v10 = (float *)(v9 + 32);
        bzero((void *)(v9 + 32), 4 * v8);
        column_end[0] = 0;
        uint64_t v11 = sub_1D17BE1C0();
        *(void *)(v11 + 16) = v8;
        uint64_t v12 = (sparse_index *)(v11 + 32);
        bzero((void *)(v11 + 32), 8 * v8);
        sparse_extract_sparse_row_float(*(sparse_matrix_float *)(v1 + 32), i, 0, column_end, v8, v10, v12);
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if (v3 < 0) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v6 = sub_1D166762C((uint64_t)v6);
          if (v3 < 0)
          {
LABEL_14:
            uint64_t result = sub_1D17BEA30();
            __break(1u);
            break;
          }
        }
        if ((unsigned __int128)(i * (__int128)v3) >> 64 != (i * v3) >> 63)
        {
          __break(1u);
          goto LABEL_16;
        }
        sparse_unpack_vector_float(v3, v8, 0, v10, v12, (float *)&v6[4 * i * v3 + 32], 1);
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
      }
    }
  }
  *uint64_t v13 = v6;
  v13[1] = v4;
  id v13[2] = (char *)v3;
  return result;
}

uint64_t static SparseMatrix.* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  if (*(void *)(a1 + 24) != a2[1])
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v5 = a1;
  int64_t v3 = a2[2];
  BOOL v7 = *(char **)(a1 + 16);
  if ((unsigned __int128)((uint64_t)v7 * (__int128)v3) >> 64 != ((uint64_t)v7 * v3) >> 63)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = *a2;
  uint64_t v9 = sub_1D1665A14((void)v7 * v3, 0);
  if (*(void *)(v9 + 16) != (void)v7 * v3)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    uint64_t v6 = sub_1D166762C((uint64_t)v6);
    if ((v3 & 0x8000000000000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  uint64_t v6 = (char *)v9;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_10;
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
LABEL_6:
    sparse_matrix_product_dense_float(CblasRowMajor, CblasNoTrans, v3, 1.0, *(sparse_matrix_float *)(v5 + 32), (const float *)(v4 + 32), v3, (float *)v6 + 8, v3);
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v6;
    a3[1] = v7;
    a3[2] = (char *)v3;
    return result;
  }
LABEL_11:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t static SparseMatrix.* infix(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  sparse_dimension v9 = a1[2];
  if (v9 != *(void *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = a2;
  int64_t v3 = a1[1];
  int64_t v4 = *(void *)(a2 + 24);
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v5 = *a1;
  uint64_t v10 = sub_1D1665A14(v3 * v4, 0);
  if (*(void *)(v10 + 16) != v3 * v4)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  BOOL v7 = (char *)v10;
  swift_bridgeObjectRetain();
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if (v3 < 0) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
LABEL_12:
  BOOL v7 = sub_1D166762C((uint64_t)v7);
  if (v3 < 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((v9 & 0x8000000000000000) == 0 && (v4 & 0x8000000000000000) == 0)
  {
    sparse_matrix_product_dense_float(CblasColMajor, CblasTrans, v3, 1.0, *(sparse_matrix_float *)(v6 + 32), (const float *)(v5 + 32), v9, (float *)v7 + 8, v4);
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v7;
    a3[1] = (char *)v3;
    a3[2] = (char *)v4;
    return result;
  }
LABEL_13:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t sub_1D16BF550@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 32);
  return result;
}

void *sub_1D16BF560(void *result, uint64_t a2)
{
  *(void *)(*(void *)a2 + 32) = *result;
  return result;
}

void sub_1D16BF570(sparse_index *a1@<X1>, float *a2@<X8>)
{
  *a2 = sub_1D16BEF0C(*a1, a1[1]);
}

uint64_t sub_1D16BF5A4()
{
  return 0;
}

uint64_t method lookup function for SparseMatrix(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SparseMatrix);
}

uint64_t dispatch thunk of SparseMatrix.matrix.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of SparseMatrix.matrix.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of SparseMatrix.matrix.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of SparseMatrix.__allocating_init(rows:columns:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of SparseMatrix.count.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of SparseMatrix.elementCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SparseMatrix.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SparseMatrix.subscript.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SparseMatrix.subscript.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of SparseMatrix.denseMatrix()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t sub_1D16BF724(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    sub_1D16FA29C();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1D16C0924(v6);
  return sub_1D17BE900();
}

void *MAGraphMatrix.walkMatrix(length:directed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 2)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    uint64_t result = (void *)sub_1D17BEA30();
    __break(1u);
    return result;
  }
  uint64_t v5 = a1;
  uint64_t v6 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(a4 + 8))(a2 & 1, a3, a4);
  uint64_t v7 = v6[3];
  uint64_t v8 = v6[2];
  swift_bridgeObjectRetain();
  if (v7 == v8)
  {
    uint64_t v9 = v5 - 1;
    uint64_t v10 = v8;
    uint64_t v5 = v8;
    while (1)
    {
      uint64_t v11 = v8 * v5;
      if ((unsigned __int128)(v8 * (__int128)v5) >> 64 != (v8 * v5) >> 63) {
        break;
      }
      if (v11 < 0) {
        goto LABEL_25;
      }
      swift_bridgeObjectRetain();
      if (v11)
      {
        uint64_t v4 = sub_1D17BE1C0();
        *(void *)(v4 + 16) = v11;
        bzero((void *)(v4 + 32), 8 * v8 * v5);
      }
      else
      {
        uint64_t v4 = MEMORY[0x1E4FBC860];
      }
      if (v8 > 0x7FFFFFFF) {
        goto LABEL_20;
      }
      if (v5 > 0x7FFFFFFF) {
        goto LABEL_21;
      }
      if (v8 < (uint64_t)0xFFFFFFFF80000000
        || v5 < (uint64_t)0xFFFFFFFF80000000
        || v10 < (uint64_t)0xFFFFFFFF80000000)
      {
        goto LABEL_22;
      }
      if (v10 > 0x7FFFFFFF) {
        goto LABEL_23;
      }
      cblas_dgemm_NEWLAPACK();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v9) {
        goto LABEL_18;
      }
      uint64_t v10 = v5;
      BOOL v12 = v5 == v6[2];
      uint64_t v5 = v6[3];
      if (!v12) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t v13 = v6[5];
  swift_bridgeObjectRetain();
  swift_release();
  type metadata accessor for MASquareMatrixRepresentation();
  uint64_t result = (void *)swift_allocObject();
  result[2] = v8;
  result[3] = v5;
  result[4] = v4;
  result[5] = v13;
  return result;
}

uint64_t MAGraphMatrix.walkMatrices(length:directed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a1 >= 2)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(a4 + 8))(a2 & 1, a3, a4);
    uint64_t v18 = MEMORY[0x1E4FBC860];
    uint64_t v6 = v5[3];
    uint64_t v7 = v5[2];
    swift_bridgeObjectRetain();
    if (v6 == v7)
    {
      uint64_t v8 = a1 - 1;
      uint64_t v9 = v7;
      uint64_t v10 = v7;
      while (1)
      {
        uint64_t v11 = v7 * v10;
        if ((unsigned __int128)(v7 * (__int128)v10) >> 64 != (v7 * v10) >> 63) {
          break;
        }
        if (v11 < 0) {
          goto LABEL_28;
        }
        swift_bridgeObjectRetain();
        if (v11)
        {
          uint64_t v12 = sub_1D17BE1C0();
          *(void *)(v12 + 16) = v11;
          bzero((void *)(v12 + 32), 8 * v7 * v10);
        }
        else
        {
          uint64_t v12 = MEMORY[0x1E4FBC860];
        }
        if (v7 > 0x7FFFFFFF) {
          goto LABEL_23;
        }
        if (v10 > 0x7FFFFFFF) {
          goto LABEL_24;
        }
        if (v7 < (uint64_t)0xFFFFFFFF80000000
          || v10 < (uint64_t)0xFFFFFFFF80000000
          || v9 < (uint64_t)0xFFFFFFFF80000000)
        {
          goto LABEL_25;
        }
        if (v9 > 0x7FFFFFFF) {
          goto LABEL_26;
        }
        cblas_dgemm_NEWLAPACK();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v13 = v5[5];
        type metadata accessor for MASquareMatrixRepresentation();
        uint64_t v14 = (void *)swift_allocObject();
        void v14[2] = v7;
        v14[3] = v10;
        void v14[4] = v12;
        v14[5] = v13;
        swift_bridgeObjectRetain();
        uint64_t v15 = swift_bridgeObjectRetain();
        MEMORY[0x1D25F8AB0](v15);
        if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1D17BE170();
        }
        sub_1D17BE1F0();
        sub_1D17BE150();
        if (!--v8)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return v18;
        }
        uint64_t v9 = v10;
        BOOL v16 = v10 == v5[2];
        uint64_t v10 = v5[3];
        if (!v16) {
          goto LABEL_21;
        }
      }
    }
    else
    {
LABEL_21:
      __break(1u);
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  __break(1u);
LABEL_28:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

void *MAGraphMatrix.shortestPathsMatrix(includePaths:directed:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void (*)(), void, uint64_t, double))(a4 + 16))(a2, sub_1D16C0340, 0, a3, INFINITY);
  int64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(void **)(v7 + 32);
  unint64_t v10 = *(void *)(v7 + 40);
  uint64_t v11 = v10 >> 62;
  int64_t v40 = v8;
  char v49 = a1;
  uint64_t v36 = *(void *)(v7 + 16);
  char v35 = v5;
  if (a1)
  {
    if (v11) {
      goto LABEL_40;
    }
    int64_t v8 = v10 & 0xFFFFFFFFFFFFFF8;
    int64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t v4 = v12 * v12;
    int64_t v42 = v12;
    uint64_t v5 = (unsigned __int128)(v12 * (__int128)v12) >> 64 != (v12 * v12) >> 63;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_115;
    }
    unint64_t v4 = sub_1D1665914(v4, 0.0);
    uint64_t v13 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v13)
    {
      while (1)
      {
        uint64_t v33 = v7;
        unint64_t v14 = 0;
        int64_t v8 = v10 & 0xC000000000000001;
        uint64_t v45 = v11;
        uint64_t v47 = v10 & 0xFFFFFFFFFFFFFF8;
LABEL_7:
        if (v8) {
          break;
        }
        if ((v14 & 0x8000000000000000) == 0)
        {
          if (v14 >= *(void *)(v47 + 16)) {
            goto LABEL_39;
          }
          unint64_t v15 = v14 + 1;
LABEL_14:
          unint64_t v51 = v15;
          unint64_t v16 = v10;
          swift_bridgeObjectRetain();
          uint64_t v11 = 0;
          uint64_t v7 = v14 * v42;
          BOOL v17 = (unsigned __int128)((uint64_t)v14 * (__int128)v42) >> 64 != (uint64_t)(v14 * v42) >> 63;
          while (1)
          {
            if (v8)
            {
              MEMORY[0x1D25F9260](v11, v16);
              swift_unknownObjectRelease();
              uint64_t v5 = v11 + 1;
              if (__OFADD__(v11, 1)) {
                goto LABEL_35;
              }
            }
            else
            {
              uint64_t v5 = v11 + 1;
              if (__OFADD__(v11, 1)) {
                goto LABEL_36;
              }
            }
            if (!v4) {
              goto LABEL_116;
            }
            if (v17) {
              break;
            }
            unint64_t v10 = v7 + v11;
            if (__OFADD__(v7, v11)) {
              goto LABEL_33;
            }
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              if ((v10 & 0x8000000000000000) != 0) {
                goto LABEL_29;
              }
            }
            else
            {
              unint64_t v4 = (unint64_t)sub_1D1667604((void *)v4);
              if ((v10 & 0x8000000000000000) != 0)
              {
LABEL_29:
                __break(1u);
                goto LABEL_30;
              }
            }
            if (v10 >= *(void *)(v4 + 16)) {
              goto LABEL_34;
            }
            *(double *)(v4 + 8 * v10 + 32) = (double)v11;
            uint64_t v11 = v5;
            if (v5 == v13)
            {
              unint64_t v10 = v16;
              swift_bridgeObjectRelease();
              unint64_t v14 = v51;
              if (v51 != v13) {
                goto LABEL_7;
              }
              swift_bridgeObjectRelease();
              int64_t v8 = v40;
              uint64_t v7 = v33;
              uint64_t v11 = v45;
              goto LABEL_43;
            }
          }
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        int64_t v8 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
        int64_t v42 = v8;
        if ((unsigned __int128)(v8 * (__int128)v8) >> 64 != (v8 * v8) >> 63) {
          goto LABEL_115;
        }
        unint64_t v4 = sub_1D1665914(v8 * v8, 0.0);
        swift_bridgeObjectRetain_n();
        uint64_t v13 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
        if (!v13) {
          goto LABEL_42;
        }
      }
      MEMORY[0x1D25F9260](v14, v10);
      swift_unknownObjectRelease();
      unint64_t v15 = v14 + 1;
      if (!__OFADD__(v14, 1)) {
        goto LABEL_14;
      }
      goto LABEL_37;
    }
LABEL_42:
    swift_bridgeObjectRelease();
    int64_t v8 = v40;
  }
  else
  {
LABEL_30:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v4 = 0;
    int64_t v42 = 0;
  }
LABEL_43:
  if (v11) {
    goto LABEL_112;
  }
  uint64_t v18 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v18)
  {
    uint64_t v37 = v10 & 0xFFFFFFFFFFFFFF8;
    uint64_t v52 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      uint64_t v5 = 0;
      unint64_t v19 = v10 & 0xC000000000000001;
      uint64_t v38 = 8 * v8;
      uint64_t v41 = 4;
      unint64_t v50 = v10;
      uint64_t v32 = v18;
      uint64_t v34 = v7;
      while (v5 != v18)
      {
        if (v52)
        {
          if ((unsigned __int128)(v5 * (__int128)v8) >> 64 != (v5 * v8) >> 63) {
            goto LABEL_114;
          }
          swift_bridgeObjectRetain();
          uint64_t v20 = 0;
          unint64_t v21 = 0;
          uint64_t v7 = 32;
          uint64_t v39 = v5;
LABEL_52:
          if (v19)
          {
            MEMORY[0x1D25F9260](v21, v50);
            swift_unknownObjectRelease();
          }
          else if (v21 >= *(void *)(v37 + 16))
          {
            goto LABEL_110;
          }
          if (__OFADD__(v21, 1))
          {
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
            break;
          }
          int64_t v22 = v21 * v8;
          if ((unsigned __int128)((uint64_t)v21 * (__int128)v8) >> 64 != (uint64_t)(v21 * v8) >> 63) {
            goto LABEL_107;
          }
          unint64_t v10 = v22 + v5;
          if (__OFADD__(v22, v5)) {
            goto LABEL_108;
          }
          if ((v10 & 0x8000000000000000) != 0) {
            goto LABEL_109;
          }
          BOOL v48 = (unsigned __int128)((uint64_t)v21 * (__int128)v42) >> 64 != (uint64_t)(v21 * v42) >> 63;
          unint64_t v43 = v21 + 1;
          int64_t v44 = v21 * v42;
          int64_t v8 = v21 * v42 + v5;
          BOOL v23 = __OFADD__(v21 * v42, v5);
          BOOL v46 = v23;
          swift_bridgeObjectRetain();
          uint64_t v24 = 0;
          uint64_t v5 = v41;
          do
          {
            if (v19)
            {
              MEMORY[0x1D25F9260](v24, v50);
              swift_unknownObjectRelease();
            }
            if (v20 < 0)
            {
              __break(1u);
LABEL_95:
              __break(1u);
LABEL_96:
              __break(1u);
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
              goto LABEL_106;
            }
            unint64_t v25 = v9[2];
            if (v20 + v24 >= v25) {
              goto LABEL_95;
            }
            if ((uint64_t)v10 >= (uint64_t)v25) {
              goto LABEL_96;
            }
            if (v5 - 4 >= v25) {
              goto LABEL_97;
            }
            double v26 = *(double *)&v9[v10 + 4] + *(double *)&v9[v5];
            if (v26 < *(double *)((char *)&v9[v24] + v7))
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v9 = sub_1D1667604(v9);
              }
              if ((unint64_t)(v20 + v24) >= v9[2]) {
                goto LABEL_98;
              }
              *(double *)((char *)&v9[v24] + v7) = v26;
              if (v49)
              {
                if (!v4) {
                  goto LABEL_117;
                }
                if (v48) {
                  goto LABEL_99;
                }
                if (v46) {
                  goto LABEL_100;
                }
                if (v8 < 0) {
                  goto LABEL_101;
                }
                if ((unint64_t)v8 >= *(void *)(v4 + 16)) {
                  goto LABEL_102;
                }
                unint64_t v27 = v44 + v24;
                if (__OFADD__(v44, v24)) {
                  goto LABEL_103;
                }
                uint64_t v28 = *(void *)(v4 + 8 * v8 + 32);
                if (swift_isUniquelyReferenced_nonNull_native())
                {
                  if ((v27 & 0x8000000000000000) != 0) {
                    goto LABEL_104;
                  }
                }
                else
                {
                  unint64_t v4 = (unint64_t)sub_1D1667604((void *)v4);
                  if ((v27 & 0x8000000000000000) != 0) {
                    goto LABEL_104;
                  }
                }
                if (v27 >= *(void *)(v4 + 16)) {
                  goto LABEL_105;
                }
                *(void *)(v4 + 8 * v27 + 32) = v28;
              }
            }
            ++v24;
            ++v5;
          }
          while (v52 != v24);
          swift_bridgeObjectRelease();
          uint64_t v5 = v39;
          int64_t v8 = v40;
          v20 += v40;
          v7 += v38;
          unint64_t v21 = v43;
          if (v43 != v52) {
            goto LABEL_52;
          }
          unint64_t v10 = v50;
          swift_bridgeObjectRelease();
          uint64_t v18 = v32;
          uint64_t v7 = v34;
        }
        ++v5;
        v41 += v8;
        if (v5 == v18) {
          goto LABEL_90;
        }
      }
      __break(1u);
LABEL_112:
      int64_t v8 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      uint64_t v5 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
      if (v5 < 0)
      {
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
      }
      uint64_t v37 = v8;
      if (!v5) {
        break;
      }
      swift_bridgeObjectRetain();
      uint64_t v52 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
      int64_t v8 = v40;
      uint64_t v18 = v5;
    }
    int64_t v8 = v40;
  }
LABEL_90:
  swift_release();
  if ((v49 & 1) != 0 && v4)
  {
    type metadata accessor for MAPathMatrixRepresentation();
    uint64_t v29 = swift_allocObject();
    *(unsigned char *)(v29 + 48) = v35 & 1;
    *(void *)(v29 + 16) = v42;
    *(void *)(v29 + 24) = v42;
    *(void *)(v29 + 32) = v4;
    *(void *)(v29 + 40) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  type metadata accessor for MASquareMatrixRepresentation();
  uint64_t v30 = (void *)swift_allocObject();
  long long v30[2] = v36;
  v30[3] = v8;
  v30[4] = v9;
  v30[5] = v10;
  swift_bridgeObjectRelease();
  return v30;
}

void sub_1D16C0340()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_1D1667074(v0);
  swift_bridgeObjectRelease();
  uint64_t v6 = v1;
  sub_1D16BF724(&v6);
  uint64_t v2 = v6;
  if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_4;
    }
LABEL_9:
    swift_release();
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1D17BEAD0();
  swift_release();
  if (!v5) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v2 & 0xC000000000000001) != 0)
  {
LABEL_10:
    id v3 = (id)MEMORY[0x1D25F9260](0, v2);
    goto LABEL_7;
  }
  if (*(void *)(v2 + 16))
  {
    id v3 = *(id *)(v2 + 32);
LABEL_7:
    unint64_t v4 = v3;
    swift_release();
    objc_msgSend(v4, sel_weight);

    return;
  }
  __break(1u);
  swift_release();
  __break(1u);
}

void *MAGraphMatrix.randomWalkMatrix(length:directed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 2)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    uint64_t result = (void *)sub_1D17BEA30();
    __break(1u);
    return result;
  }
  uint64_t v5 = a1;
  uint64_t v6 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(a4 + 40))(a2 & 1, a3, a4);
  uint64_t v7 = v6[3];
  uint64_t v8 = v6[2];
  swift_bridgeObjectRetain();
  if (v7 == v8)
  {
    uint64_t v9 = v5 - 1;
    uint64_t v10 = v8;
    uint64_t v5 = v8;
    while (1)
    {
      uint64_t v11 = v8 * v5;
      if ((unsigned __int128)(v8 * (__int128)v5) >> 64 != (v8 * v5) >> 63) {
        break;
      }
      if (v11 < 0) {
        goto LABEL_25;
      }
      swift_bridgeObjectRetain();
      if (v11)
      {
        uint64_t v4 = sub_1D17BE1C0();
        *(void *)(v4 + 16) = v11;
        bzero((void *)(v4 + 32), 8 * v8 * v5);
      }
      else
      {
        uint64_t v4 = MEMORY[0x1E4FBC860];
      }
      if (v8 > 0x7FFFFFFF) {
        goto LABEL_20;
      }
      if (v5 > 0x7FFFFFFF) {
        goto LABEL_21;
      }
      if (v8 < (uint64_t)0xFFFFFFFF80000000
        || v5 < (uint64_t)0xFFFFFFFF80000000
        || v10 < (uint64_t)0xFFFFFFFF80000000)
      {
        goto LABEL_22;
      }
      if (v10 > 0x7FFFFFFF) {
        goto LABEL_23;
      }
      cblas_dgemm_NEWLAPACK();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v9) {
        goto LABEL_18;
      }
      uint64_t v10 = v5;
      BOOL v12 = v5 == v6[2];
      uint64_t v5 = v6[3];
      if (!v12) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t v13 = v6[5];
  swift_bridgeObjectRetain();
  swift_release();
  type metadata accessor for MASquareMatrixRepresentation();
  uint64_t result = (void *)swift_allocObject();
  result[2] = v8;
  result[3] = v5;
  result[4] = v4;
  result[5] = v13;
  return result;
}

uint64_t MAGraphMatrix.randomWalkMatrices(length:directed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a1 >= 2)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(a4 + 40))(a2 & 1, a3, a4);
    uint64_t v18 = MEMORY[0x1E4FBC860];
    uint64_t v6 = v5[3];
    uint64_t v7 = v5[2];
    swift_bridgeObjectRetain();
    if (v6 == v7)
    {
      uint64_t v8 = a1 - 1;
      uint64_t v9 = v7;
      uint64_t v10 = v7;
      while (1)
      {
        uint64_t v11 = v7 * v10;
        if ((unsigned __int128)(v7 * (__int128)v10) >> 64 != (v7 * v10) >> 63) {
          break;
        }
        if (v11 < 0) {
          goto LABEL_28;
        }
        swift_bridgeObjectRetain();
        if (v11)
        {
          uint64_t v12 = sub_1D17BE1C0();
          *(void *)(v12 + 16) = v11;
          bzero((void *)(v12 + 32), 8 * v7 * v10);
        }
        else
        {
          uint64_t v12 = MEMORY[0x1E4FBC860];
        }
        if (v7 > 0x7FFFFFFF) {
          goto LABEL_23;
        }
        if (v10 > 0x7FFFFFFF) {
          goto LABEL_24;
        }
        if (v7 < (uint64_t)0xFFFFFFFF80000000
          || v10 < (uint64_t)0xFFFFFFFF80000000
          || v9 < (uint64_t)0xFFFFFFFF80000000)
        {
          goto LABEL_25;
        }
        if (v9 > 0x7FFFFFFF) {
          goto LABEL_26;
        }
        cblas_dgemm_NEWLAPACK();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v13 = v5[5];
        type metadata accessor for MASquareMatrixRepresentation();
        unint64_t v14 = (void *)swift_allocObject();
        void v14[2] = v7;
        v14[3] = v10;
        void v14[4] = v12;
        v14[5] = v13;
        swift_bridgeObjectRetain();
        uint64_t v15 = swift_bridgeObjectRetain();
        MEMORY[0x1D25F8AB0](v15);
        if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1D17BE170();
        }
        sub_1D17BE1F0();
        sub_1D17BE150();
        if (!--v8)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return v18;
        }
        uint64_t v9 = v10;
        BOOL v16 = v10 == v5[2];
        uint64_t v10 = v5[3];
        if (!v16) {
          goto LABEL_21;
        }
      }
    }
    else
    {
LABEL_21:
      __break(1u);
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  __break(1u);
LABEL_28:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

void sub_1D16C0924(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[1];
  uint64_t v5 = sub_1D17BEB60();
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_132;
    }
    if (v4) {
      sub_1D1693CC0(0, v4, 1, a1);
    }
    return;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_140;
  }
  uint64_t v7 = v5;
  uint64_t v110 = a1;
  if (v4 < 2)
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v119 = MEMORY[0x1E4FBC860];
    uint64_t v118 = (void **)((MEMORY[0x1E4FBC860] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_98:
      double v102 = v10;
      if (v13 >= 2)
      {
        uint64_t v103 = *v110;
        do
        {
          unint64_t v104 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_127;
          }
          if (!v103) {
            goto LABEL_139;
          }
          unint64_t v105 = v102;
          uint64_t v106 = *(void *)&v102[16 * v104 + 32];
          uint64_t v107 = *(void *)&v102[16 * v13 + 24];
          sub_1D1694028((void **)(v103 + 8 * v106), (id *)(v103 + 8 * *(void *)&v102[16 * v13 + 16]), v103 + 8 * v107, v118);
          if (v2) {
            break;
          }
          if (v107 < v106) {
            goto LABEL_128;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v105 = sub_1D16FA24C((uint64_t)v105);
          }
          if (v104 >= *((void *)v105 + 2)) {
            goto LABEL_129;
          }
          unint64_t v108 = &v105[16 * v104 + 32];
          *(void *)unint64_t v108 = v106;
          *((void *)v108 + 1) = v107;
          unint64_t v109 = *((void *)v105 + 2);
          if (v13 > v109) {
            goto LABEL_130;
          }
          memmove(&v105[16 * v13 + 16], &v105[16 * v13 + 32], 16 * (v109 - v13));
          double v102 = v105;
          *((void *)v105 + 2) = v109 - 1;
          unint64_t v13 = v109 - 1;
        }
        while (v109 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_1D17BE150();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v8 = v6 >> 1;
    sub_1D16C1080();
    uint64_t v9 = sub_1D17BE1C0();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    uint64_t v118 = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v119 = v9;
  }
  uint64_t v114 = v7;
  uint64_t v11 = 0;
  uint64_t v12 = *a1;
  uint64_t v111 = *a1 - 8;
  uint64_t v112 = *a1 + 16;
  uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v115 = v4;
  while (1)
  {
    uint64_t v14 = v11++;
    uint64_t v116 = v14;
    if (v11 < v4)
    {
      uint64_t v15 = *(void **)(v12 + 8 * v14);
      id v16 = *(id *)(v12 + 8 * v11);
      id v17 = v15;
      objc_msgSend(v16, sel_weight);
      float v19 = v18;
      objc_msgSend(v17, sel_weight);
      float v21 = v20;

      uint64_t v11 = v14 + 2;
      if (v14 + 2 < v4)
      {
        int64_t v22 = (id *)(v112 + 8 * v14);
        while (1)
        {
          BOOL v23 = *(v22 - 1);
          id v24 = *v22;
          id v25 = v23;
          objc_msgSend(v24, sel_weight);
          float v27 = v26;
          objc_msgSend(v25, sel_weight);
          float v29 = v28;

          if (v19 < v21 == v27 >= v29) {
            break;
          }
          ++v11;
          ++v22;
          if (v4 == v11)
          {
            uint64_t v11 = v4;
            break;
          }
        }
        uint64_t v14 = v116;
      }
      if (v19 < v21)
      {
        if (v11 < v14) {
          goto LABEL_133;
        }
        if (v14 < v11)
        {
          uint64_t v30 = (uint64_t *)(v111 + 8 * v11);
          uint64_t v31 = v11;
          uint64_t v32 = v14;
          uint64_t v33 = (uint64_t *)(v12 + 8 * v14);
          do
          {
            if (v32 != --v31)
            {
              if (!v12) {
                goto LABEL_138;
              }
              uint64_t v34 = *v33;
              *uint64_t v33 = *v30;
              *uint64_t v30 = v34;
            }
            ++v32;
            --v30;
            ++v33;
          }
          while (v32 < v31);
        }
      }
    }
    if (v11 >= v4) {
      goto LABEL_47;
    }
    if (__OFSUB__(v11, v14)) {
      goto LABEL_131;
    }
    if (v11 - v14 >= v114) {
      goto LABEL_47;
    }
    if (__OFADD__(v14, v114)) {
      goto LABEL_134;
    }
    uint64_t v35 = v14 + v114 >= v4 ? v4 : v14 + v114;
    if (v35 < v14) {
      break;
    }
    if (v11 != v35)
    {
      uint64_t v113 = v10;
      uint64_t v36 = v111 + 8 * v11;
      do
      {
        uint64_t v37 = *(void **)(v12 + 8 * v11);
        uint64_t v38 = v14;
        uint64_t v39 = v36;
        do
        {
          int64_t v40 = *(void **)v39;
          id v41 = v37;
          id v42 = v40;
          objc_msgSend(v41, sel_weight);
          float v44 = v43;
          objc_msgSend(v42, sel_weight);
          float v46 = v45;

          if (v44 >= v46) {
            break;
          }
          if (!v12) {
            goto LABEL_136;
          }
          uint64_t v47 = *(void **)v39;
          uint64_t v37 = *(void **)(v39 + 8);
          *(void *)uint64_t v39 = v37;
          *(void *)(v39 + 8) = v47;
          v39 -= 8;
          ++v38;
        }
        while (v11 != v38);
        ++v11;
        v36 += 8;
        uint64_t v14 = v116;
      }
      while (v11 != v35);
      uint64_t v11 = v35;
      uint64_t v10 = v113;
    }
LABEL_47:
    if (v11 < v14) {
      goto LABEL_126;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_1D16F9FD8(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v49 = *((void *)v10 + 2);
    unint64_t v48 = *((void *)v10 + 3);
    unint64_t v13 = v49 + 1;
    if (v49 >= v48 >> 1) {
      uint64_t v10 = sub_1D16F9FD8((char *)(v48 > 1), v49 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v13;
    unint64_t v50 = v10 + 32;
    unint64_t v51 = &v10[16 * v49 + 32];
    *(void *)unint64_t v51 = v14;
    *((void *)v51 + 1) = v11;
    if (v49)
    {
      uint64_t v117 = v11;
      while (1)
      {
        unint64_t v52 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v57 = &v50[16 * v13];
          uint64_t v58 = *((void *)v57 - 8);
          uint64_t v59 = *((void *)v57 - 7);
          BOOL v63 = __OFSUB__(v59, v58);
          uint64_t v60 = v59 - v58;
          if (v63) {
            goto LABEL_115;
          }
          uint64_t v62 = *((void *)v57 - 6);
          uint64_t v61 = *((void *)v57 - 5);
          BOOL v63 = __OFSUB__(v61, v62);
          uint64_t v55 = v61 - v62;
          char v56 = v63;
          if (v63) {
            goto LABEL_116;
          }
          unint64_t v64 = v13 - 2;
          long long v65 = &v50[16 * v13 - 32];
          uint64_t v67 = *(void *)v65;
          uint64_t v66 = *((void *)v65 + 1);
          BOOL v63 = __OFSUB__(v66, v67);
          uint64_t v68 = v66 - v67;
          if (v63) {
            goto LABEL_118;
          }
          BOOL v63 = __OFADD__(v55, v68);
          uint64_t v69 = v55 + v68;
          if (v63) {
            goto LABEL_121;
          }
          if (v69 >= v60)
          {
            uint64_t v87 = &v50[16 * v52];
            uint64_t v89 = *(void *)v87;
            uint64_t v88 = *((void *)v87 + 1);
            BOOL v63 = __OFSUB__(v88, v89);
            uint64_t v90 = v88 - v89;
            if (v63) {
              goto LABEL_125;
            }
            BOOL v80 = v55 < v90;
            goto LABEL_85;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v81 = *((void *)v10 + 4);
            uint64_t v82 = *((void *)v10 + 5);
            BOOL v63 = __OFSUB__(v82, v81);
            uint64_t v74 = v82 - v81;
            char v75 = v63;
            goto LABEL_79;
          }
          uint64_t v54 = *((void *)v10 + 4);
          uint64_t v53 = *((void *)v10 + 5);
          BOOL v63 = __OFSUB__(v53, v54);
          uint64_t v55 = v53 - v54;
          char v56 = v63;
        }
        if (v56) {
          goto LABEL_117;
        }
        unint64_t v64 = v13 - 2;
        uint64_t v70 = &v50[16 * v13 - 32];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        BOOL v73 = __OFSUB__(v71, v72);
        uint64_t v74 = v71 - v72;
        char v75 = v73;
        if (v73) {
          goto LABEL_120;
        }
        uint64_t v76 = &v50[16 * v52];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        BOOL v63 = __OFSUB__(v77, v78);
        uint64_t v79 = v77 - v78;
        if (v63) {
          goto LABEL_123;
        }
        if (__OFADD__(v74, v79)) {
          goto LABEL_124;
        }
        if (v74 + v79 >= v55)
        {
          BOOL v80 = v55 < v79;
LABEL_85:
          if (v80) {
            unint64_t v52 = v64;
          }
          goto LABEL_87;
        }
LABEL_79:
        if (v75) {
          goto LABEL_119;
        }
        uint64_t v83 = &v50[16 * v52];
        uint64_t v85 = *(void *)v83;
        uint64_t v84 = *((void *)v83 + 1);
        BOOL v63 = __OFSUB__(v84, v85);
        uint64_t v86 = v84 - v85;
        if (v63) {
          goto LABEL_122;
        }
        if (v86 < v74) {
          goto LABEL_14;
        }
LABEL_87:
        unint64_t v91 = v52 - 1;
        if (v52 - 1 >= v13)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        uint64_t v92 = v12;
        if (!v12) {
          goto LABEL_137;
        }
        long long v93 = v10;
        long long v94 = &v50[16 * v91];
        uint64_t v95 = *(void *)v94;
        uint64_t v96 = v50;
        unint64_t v97 = v52;
        unint64_t v98 = &v50[16 * v52];
        uint64_t v99 = *((void *)v98 + 1);
        uint64_t v100 = v92;
        sub_1D1694028((void **)(v92 + 8 * *(void *)v94), (id *)(v92 + 8 * *(void *)v98), v92 + 8 * v99, v118);
        if (v1) {
          goto LABEL_95;
        }
        if (v99 < v95) {
          goto LABEL_112;
        }
        if (v97 > *((void *)v93 + 2)) {
          goto LABEL_113;
        }
        *(void *)long long v94 = v95;
        *(void *)&v96[16 * v91 + 8] = v99;
        unint64_t v101 = *((void *)v93 + 2);
        if (v97 >= v101) {
          goto LABEL_114;
        }
        uint64_t v10 = v93;
        unint64_t v13 = v101 - 1;
        memmove(v98, v98 + 16, 16 * (v101 - 1 - v97));
        unint64_t v50 = v96;
        *((void *)v93 + 2) = v101 - 1;
        uint64_t v12 = v100;
        uint64_t v11 = v117;
        if (v101 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_14:
    uint64_t v4 = v115;
    if (v11 >= v115)
    {
      uint64_t v2 = v1;
      goto LABEL_98;
    }
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  sub_1D17BEA30();
  __break(1u);
}

unint64_t sub_1D16C1080()
{
  unint64_t result = qword_1EA6514F0;
  if (!qword_1EA6514F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA6514F0);
  }
  return result;
}

uint64_t sub_1D16C10C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  void v5[3] = a1;
  return MEMORY[0x1F4188298](sub_1D16C10E8);
}

uint64_t sub_1D16C10E8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 64) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  id v3 = (void *)swift_task_alloc();
  v3[2] = v1;
  void v3[3] = &unk_1EA652660;
  long long v3[4] = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652668);
  sub_1D17BE590();
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v0 + 16);
  *(void *)(v0 + 72) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651838);
  *uint64_t v5 = v0;
  v5[1] = sub_1D16C1254;
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v9 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v7, v4, v8, v6, v9);
}

uint64_t sub_1D16C1254()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1D16C1400;
  }
  else {
    uint64_t v2 = sub_1D16C1368;
  }
  return MEMORY[0x1F4188298](v2);
}

uint64_t sub_1D16C1368()
{
  swift_release();
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    id v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  return result;
}

uint64_t sub_1D16C1400()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D16C146C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  *(void *)(v5 + 16) = a4;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a5 + *a5);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_1D166E590;
  return v9(a1);
}

uint64_t sub_1D16C154C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1D17BE300();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1D17BE2F0();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1D166F0B8(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D17BE2D0();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t GraphManager.__allocating_init(at:entityFactory:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager) = 0;
  uint64_t v7 = v6 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url;
  uint64_t v8 = sub_1D17BDD40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a1, v8);
  uint64_t v9 = (void *)(v6 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_entityFactory);
  *uint64_t v9 = a2;
  v9[1] = a3;
  return v6;
}

uint64_t GraphManager.init(at:entityFactory:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_defaultActor_initialize();
  *(void *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager) = 0;
  uint64_t v7 = v3 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url;
  uint64_t v8 = sub_1D17BDD40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a1, v8);
  uint64_t v9 = (void *)(v3 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_entityFactory);
  *uint64_t v9 = a2;
  v9[1] = a3;
  return v3;
}

uint64_t GraphManager.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651840);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1D17BDD40();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v12 = (char *)&v37 - v11;
  v17.n128_f64[0] = MEMORY[0x1F4188790](v13, v14);
  float v18 = (char *)&v37 - v15;
  if (*(void *)(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager))
  {
    uint64_t v45 = v16;
    uint64_t v46 = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
    int64_t v40 = v5;
    float v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
    v19((char *)&v37 - v15, v0 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url, v6, v17.n128_f64[0]);
    id v41 = v18;
    float v43 = (void (*)(uint64_t, char *, uint64_t))v19;
    uint64_t v44 = v7 + 16;
    ((void (*)(char *, char *, uint64_t))v19)(v12, v18, v6);
    sub_1D165C128(0, &qword_1EA651920);
    float v20 = sub_1D17BE600();
    os_log_type_t v21 = sub_1D17BE530();
    int v22 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      os_log_t v38 = v20;
      int v39 = v22;
      BOOL v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v48 = v24;
      *(_DWORD *)BOOL v23 = 136315138;
      id v42 = (void (*)(char *, uint64_t))(v23 + 4);
      sub_1D16C5794();
      uint64_t v25 = sub_1D17BEB70();
      uint64_t v47 = sub_1D16C513C(v25, v26, &v48);
      sub_1D17BE650();
      swift_bridgeObjectRelease();
      id v42 = *(void (**)(char *, uint64_t))(v7 + 8);
      v42(v12, v6);
      os_log_t v27 = v38;
      _os_log_impl(&dword_1D1654000, v38, (os_log_type_t)v39, "invalidate() wasn't called on GraphManager before deallocating it, asynchronously releasing from deinit the manager for graph store %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D25FAD70](v24, -1, -1);
      MEMORY[0x1D25FAD70](v23, -1, -1);
    }
    else
    {

      id v42 = *(void (**)(char *, uint64_t))(v7 + 8);
      v42(v12, v6);
    }
    uint64_t v28 = sub_1D17BE300();
    uint64_t v29 = (uint64_t)v40;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v40, 1, 1, v28);
    uint64_t v30 = v45;
    uint64_t v31 = v41;
    v43(v45, v41, v6);
    unint64_t v32 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = 0;
    *(void *)(v33 + 24) = 0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v33 + v32, v30, v6);
    sub_1D16C22CC(v29, (uint64_t)&unk_1EA652530, v33);
    swift_release();
    uint64_t v34 = (void (*)(uint64_t, uint64_t, __n128))v42;
    v42(v31, v6);
    v34(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url, v6, v35);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v0 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url, v6, v17);
  }
  swift_unknownObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return v1;
}

uint64_t sub_1D16C1C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[3] = a4;
  uint64_t v5 = sub_1D17BDD40();
  void v4[4] = v5;
  v4[5] = *(void *)(v5 - 8);
  v4[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D16C1D44);
}

uint64_t sub_1D16C1D44()
{
  if (qword_1EA651430 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1D16C1E10;
  uint64_t v2 = *(void *)(v0 + 24);
  return sub_1D166CCEC(v2);
}

uint64_t sub_1D16C1E10()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D16C1F0C);
}

uint64_t sub_1D16C1F0C()
{
  uint64_t v16 = v0;
  (*(void (**)(void, void, void))(v0[5] + 16))(v0[6], v0[3], v0[4]);
  sub_1D165C128(0, &qword_1EA651920);
  uint64_t v1 = sub_1D17BE600();
  os_log_type_t v2 = sub_1D17BE530();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[5];
    uint64_t v14 = v0[6];
    uint64_t v4 = v0[4];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v15 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_1D16C5794();
    uint64_t v7 = sub_1D17BEB70();
    v0[2] = sub_1D16C513C(v7, v8, &v15);
    sub_1D17BE650();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v14, v4);
    _os_log_impl(&dword_1D1654000, v1, v2, "Asynchronously released manager for graph store %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D25FAD70](v6, -1, -1);
    MEMORY[0x1D25FAD70](v5, -1, -1);
  }
  else
  {
    uint64_t v10 = v0[5];
    uint64_t v9 = v0[6];
    uint64_t v11 = v0[4];

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1D16C2114()
{
  uint64_t v1 = sub_1D17BDD40();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t sub_1D16C21E0(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_1D17BDD40() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *unint64_t v8 = v2;
  v8[1] = sub_1D166B660;
  return sub_1D16C1C84(a1, v5, v6, v7);
}

uint64_t sub_1D16C22CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D17BE300();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1D17BE2F0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1D166F0B8(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D17BE2D0();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t GraphManager.__deallocating_deinit()
{
  GraphManager.deinit();
  return MEMORY[0x1F4188210](v0);
}

uint64_t GraphManager.invalidate()()
{
  v1[4] = v0;
  uint64_t v2 = sub_1D17BDD40();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D16C2578);
}

uint64_t sub_1D16C2578()
{
  int v22 = v0;
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[4] + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[10] = v6;
  v0[11] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v3);
  v6(v1, v2, v3);
  v0[12] = sub_1D165C128(0, &qword_1EA651920);
  uint64_t v7 = sub_1D17BE600();
  os_log_type_t v8 = sub_1D17BE530();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v20 = v0[8];
    uint64_t v10 = v0[5];
    uint64_t v9 = v0[6];
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v21 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    sub_1D16C5794();
    uint64_t v13 = sub_1D17BEB70();
    v0[3] = sub_1D16C513C(v13, v14, &v21);
    sub_1D17BE650();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v15(v20, v10);
    _os_log_impl(&dword_1D1654000, v7, v8, "Synchronously releasing manager for graph store %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D25FAD70](v12, -1, -1);
    MEMORY[0x1D25FAD70](v11, -1, -1);
  }
  else
  {
    uint64_t v16 = v0[8];
    uint64_t v17 = v0[5];
    uint64_t v18 = v0[6];

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v15(v16, v17);
  }
  v0[13] = v15;
  *(void *)(v0[4] + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager) = 0;
  swift_release();
  return MEMORY[0x1F4188298](sub_1D16C27D8);
}

uint64_t sub_1D16C27D8()
{
  if (qword_1EA651430 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1D16C28A4;
  uint64_t v2 = *(void *)(v0 + 72);
  return sub_1D166CCEC(v2);
}

uint64_t sub_1D16C28A4()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D16C29B4);
}

uint64_t sub_1D16C29B4()
{
  uint64_t v17 = v0;
  (*(void (**)(void, void, void))(v0 + 80))(*(void *)(v0 + 56), *(void *)(v0 + 72), *(void *)(v0 + 40));
  uint64_t v1 = sub_1D17BE600();
  os_log_type_t v2 = sub_1D17BE530();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 56);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v16 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_1D16C5794();
    uint64_t v7 = sub_1D17BEB70();
    *(void *)(v0 + 16) = sub_1D16C513C(v7, v8, &v16);
    sub_1D17BE650();
    swift_bridgeObjectRelease();
    v14(v3, v4);
    _os_log_impl(&dword_1D1654000, v1, v2, "Synchronously released manager for graph store %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D25FAD70](v6, -1, -1);
    MEMORY[0x1D25FAD70](v5, -1, -1);

    v14(v15, v4);
  }
  else
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
    uint64_t v10 = *(void *)(v0 + 72);
    uint64_t v11 = *(void *)(v0 + 40);
    v9(*(void *)(v0 + 56), v11);

    v9(v10, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t GraphManager.replaceFromGraph(_:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_1D17BDDD0();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D16C2CA4);
}

uint64_t sub_1D16C2CA4()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  v0[7] = v4;
  self;
  uint64_t v5 = (void *)swift_dynamicCastObjCClass();
  if (!v5) {
    goto LABEL_12;
  }
  id v6 = objc_msgSend(v5, sel_store);
  v0[8] = v6;
  swift_getObjectType();
  uint64_t v7 = swift_conformsToProtocol2();
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7) {
    id v9 = v6;
  }
  else {
    id v9 = 0;
  }
  v0[9] = v9;
  v0[10] = v8;
  if (!v9)
  {
    swift_unknownObjectRelease();
LABEL_12:

    return sub_1D17BEA40();
  }
  uint64_t v10 = v0[3];
  uint64_t v11 = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  v0[11] = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  uint64_t v12 = *(void *)(v10 + v11);
  if (v12)
  {
    v0[15] = v12;
    v0[16] = v12;
    swift_retain();
    uint64_t v13 = sub_1D16C2FF8;
  }
  else
  {
    v0[12] = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url;
    uint64_t v13 = sub_1D16C2E60;
  }
  return MEMORY[0x1F4188298](v13);
}

uint64_t sub_1D16C2E60()
{
  if (qword_1EA651430 != -1) {
    swift_once();
  }
  *(void *)(v0 + 104) = qword_1EA651730;
  return MEMORY[0x1F4188298](sub_1D16C2EF8);
}

uint64_t sub_1D16C2EF8()
{
  v0[14] = sub_1D166CAF8(v0[3] + v0[12]);
  return MEMORY[0x1F4188298](sub_1D16C2F6C);
}

uint64_t sub_1D16C2F6C()
{
  uint64_t v1 = v0[14];
  *(void *)(v0[3] + v0[11]) = v1;
  swift_retain();
  swift_release();
  uint64_t v2 = v0[14];
  v0[15] = v1;
  v0[16] = v2;
  return MEMORY[0x1F4188298](sub_1D16C2FF8);
}

uint64_t sub_1D16C2FF8()
{
  uint64_t v1 = *(void *)(v0 + 128);
  long long v6 = *(_OWORD *)(v0 + 72);
  sub_1D17BDDC0();
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EA652548 + dword_1EA652548);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1D16C30F8;
  uint64_t v4 = *(void *)(v0 + 48);
  return v7((uint64_t)v7, v4, (uint64_t)&unk_1EA651950, v2);
}

uint64_t sub_1D16C30F8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  uint64_t v3 = *(void *)(*(void *)v1 + 40);
  uint64_t v4 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  if (v0) {
    uint64_t v5 = sub_1D16C3384;
  }
  else {
    uint64_t v5 = sub_1D16C32A4;
  }
  return MEMORY[0x1F4188298](v5);
}

uint64_t sub_1D16C32A4()
{
  swift_release();
  return MEMORY[0x1F4188298](sub_1D16C3310);
}

uint64_t sub_1D16C3310()
{
  uint64_t v1 = *(void **)(v0 + 56);
  swift_unknownObjectRelease();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1D16C3384()
{
  return MEMORY[0x1F4188298](sub_1D16C33A0);
}

uint64_t sub_1D16C33A0()
{
  uint64_t v1 = *(void **)(v0 + 56);
  swift_release();
  swift_unknownObjectRelease();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t static GraphManager.graphIsInUse(at:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F4188298](sub_1D16C3448);
}

uint64_t sub_1D16C3448()
{
  if (qword_1EA651430 != -1) {
    swift_once();
  }
  *(void *)(v0 + 24) = qword_1EA651730;
  return MEMORY[0x1F4188298](sub_1D16C34E0);
}

uint64_t sub_1D16C34E0()
{
  if (*(void *)(*(void *)(v0[3] + 112) + 16)) {
    sub_1D165A94C(v0[2]);
  }
  else {
    char v1 = 0;
  }
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2(v1 & 1);
}

uint64_t static GraphManager.swap(from:to:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x1F4188298](sub_1D16C357C);
}

uint64_t sub_1D16C357C()
{
  if (qword_1EA651430 != -1) {
    swift_once();
  }
  char v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *char v1 = v0;
  v1[1] = sub_1D16C3648;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return sub_1D166D3B0(v3, v2);
}

uint64_t sub_1D16C3648()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t static GraphManager.checkNoGraphStoreManagerLeft()()
{
  return MEMORY[0x1F4188298](sub_1D16C3758);
}

uint64_t sub_1D16C3758()
{
  if (qword_1EA651430 != -1) {
    swift_once();
  }
  *(void *)(v0 + 16) = qword_1EA651730;
  return MEMORY[0x1F4188298](sub_1D16C37F0);
}

uint64_t sub_1D16C37F0()
{
  *(void *)(v0 + 24) = *(void *)(*(void *)(*(void *)(v0 + 16) + 112) + 16);
  return MEMORY[0x1F4188298](sub_1D16C381C);
}

uint64_t sub_1D16C381C()
{
  if (*(void *)(v0 + 24)) {
    return sub_1D17BEA40();
  }
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t GraphManager.read<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  void v5[3] = a2;
  v5[4] = a3;
  long long v5[2] = a1;
  return MEMORY[0x1F4188298](sub_1D16C38FC);
}

uint64_t sub_1D16C38FC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  *(void *)(v0 + 56) = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    *(void *)(v0 + 88) = v3;
    uint64_t v4 = *(void *)(v0 + 40);
    swift_retain();
    uint64_t v5 = swift_task_alloc();
    *(void *)(v0 + 96) = v5;
    long long v6 = *(_OWORD *)(v0 + 24);
    *(void *)(v5 + 16) = v4;
    *(void *)(v5 + 24) = v1;
    *(_OWORD *)(v5 + 32) = v6;
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1D16C3C3C;
    uint64_t v8 = *(void *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 16);
    return sub_1D16697AC(v9, (uint64_t)&unk_1EA652578, v5, v8);
  }
  else
  {
    *(void *)(v0 + 64) = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url;
    return MEMORY[0x1F4188298](sub_1D16C3A40);
  }
}

uint64_t sub_1D16C3A40()
{
  if (qword_1EA651430 != -1) {
    swift_once();
  }
  *(void *)(v0 + 72) = qword_1EA651730;
  return MEMORY[0x1F4188298](sub_1D16C3AD8);
}

uint64_t sub_1D16C3AD8()
{
  v0[10] = sub_1D166CAF8(v0[6] + v0[8]);
  return MEMORY[0x1F4188298](sub_1D16C3B4C);
}

uint64_t sub_1D16C3B4C()
{
  *(void *)(*(void *)(v0 + 48) + *(void *)(v0 + 56)) = *(void *)(v0 + 80);
  swift_retain();
  swift_release();
  *(void *)(v0 + 88) = *(void *)(v0 + 80);
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  long long v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1D16C3C3C;
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 16);
  return sub_1D16697AC(v5, (uint64_t)&unk_1EA652578, v1, v4);
}

uint64_t sub_1D16C3C3C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1D16C3D84);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1D16C3D84()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D16C3DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_1D166B660;
  void v12[10] = a6;
  v12[11] = a4;
  v12[8] = a2;
  v12[9] = a5;
  v12[7] = a1;
  return MEMORY[0x1F4188298](sub_1D16C3EEC);
}

uint64_t sub_1D16C3EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[10] = a5;
  v6[11] = v5;
  v6[8] = a2;
  v6[9] = a4;
  v6[7] = a1;
  return MEMORY[0x1F4188298](sub_1D16C3EEC);
}

uint64_t sub_1D16C3EEC()
{
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v2 = (int *)v0[9];
  sub_1D165C128(0, &qword_1EA652640);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_entityFactory);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v6 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_initWithImplementation_entityFactory_, v3, v4);
  v0[12] = v6;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652648);
  uint64_t v8 = swift_allocObject();
  v0[13] = v8;
  *(void *)(v8 + 16) = v6;
  *(unsigned char *)(v8 + 24) = 1;
  v0[5] = v7;
  v0[6] = sub_1D16C5CD8();
  v0[2] = v8;
  uint64_t v13 = (int *)((char *)v2 + *v2);
  id v9 = v6;
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[14] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1D16C409C;
  uint64_t v11 = v0[7];
  return ((uint64_t (*)(uint64_t, void *))v13)(v11, v0 + 2);
}

uint64_t sub_1D16C409C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1D16C4234;
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0(v2 + 16);
    uint64_t v3 = sub_1D16C41C4;
  }
  return MEMORY[0x1F4188298](v3);
}

uint64_t sub_1D16C41C4()
{
  uint64_t v1 = *(void *)(v0 + 104);

  *(unsigned char *)(v1 + 24) = 0;
  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1D16C4234()
{
  uint64_t v1 = *(void *)(v0 + 104);

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  *(unsigned char *)(v1 + 24) = 0;
  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t GraphManager.write<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  void v5[3] = a2;
  v5[4] = a3;
  long long v5[2] = a1;
  return MEMORY[0x1F4188298](sub_1D16C42D8);
}

uint64_t sub_1D16C42D8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  *(void *)(v0 + 56) = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    *(void *)(v0 + 88) = v3;
    uint64_t v4 = *(void *)(v0 + 40);
    swift_retain();
    uint64_t v5 = swift_task_alloc();
    *(void *)(v0 + 96) = v5;
    long long v6 = *(_OWORD *)(v0 + 24);
    *(void *)(v5 + 16) = v4;
    *(void *)(v5 + 24) = v1;
    *(_OWORD *)(v5 + 32) = v6;
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1D16C4618;
    uint64_t v8 = *(void *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 16);
    return sub_1D166B754(v9, (uint64_t)&unk_1EA652590, v5, v8);
  }
  else
  {
    *(void *)(v0 + 64) = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url;
    return MEMORY[0x1F4188298](sub_1D16C441C);
  }
}

uint64_t sub_1D16C441C()
{
  if (qword_1EA651430 != -1) {
    swift_once();
  }
  *(void *)(v0 + 72) = qword_1EA651730;
  return MEMORY[0x1F4188298](sub_1D16C44B4);
}

uint64_t sub_1D16C44B4()
{
  v0[10] = sub_1D166CAF8(v0[6] + v0[8]);
  return MEMORY[0x1F4188298](sub_1D16C4528);
}

uint64_t sub_1D16C4528()
{
  *(void *)(*(void *)(v0 + 48) + *(void *)(v0 + 56)) = *(void *)(v0 + 80);
  swift_retain();
  swift_release();
  *(void *)(v0 + 88) = *(void *)(v0 + 80);
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  long long v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1D16C4618;
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 16);
  return sub_1D166B754(v5, (uint64_t)&unk_1EA652590, v1, v4);
}

uint64_t sub_1D16C4618()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1D16C6080);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1D16C4760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[5] = a6;
  v12[6] = a4;
  void v12[3] = a2;
  unint64_t v12[4] = a5;
  v12[1] = sub_1D166FB94;
  v12[2] = a1;
  return MEMORY[0x1F4188298](sub_1D16C4858);
}

uint64_t sub_1D16C4830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[5] = a5;
  v6[6] = v5;
  void v6[3] = a2;
  v6[4] = a4;
  uint64_t v6[2] = a1;
  return MEMORY[0x1F4188298](sub_1D16C4858);
}

uint64_t sub_1D16C4858()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[3];
  uint64_t v3 = (int *)v0[4];
  sub_1D165C128(0, &qword_1EA652628);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_entityFactory);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v6 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_initWithMutableImplementation_entityFactory_, v2, v4);
  v0[7] = v6;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652630);
  uint64_t v7 = swift_allocObject();
  v0[8] = v7;
  *(void *)(v7 + 16) = v6;
  *(unsigned char *)(v7 + 24) = 1;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)v3 + *v3);
  id v8 = v6;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[9] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1D16C49E8;
  uint64_t v10 = v0[2];
  return v12(v10, v7);
}

uint64_t sub_1D16C49E8()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1D16C4B84;
  }
  else {
    uint64_t v2 = sub_1D16C4B14;
  }
  return MEMORY[0x1F4188298](v2);
}

uint64_t sub_1D16C4B14()
{
  uint64_t v1 = *(void *)(v0 + 64);

  *(unsigned char *)(v1 + 24) = 0;
  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1D16C4B84()
{
  uint64_t v1 = *(void *)(v0 + 64);

  *(unsigned char *)(v1 + 24) = 0;
  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t GraphManager.exclusive<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  void v5[3] = a2;
  v5[4] = a3;
  long long v5[2] = a1;
  return MEMORY[0x1F4188298](sub_1D16C4C1C);
}

uint64_t sub_1D16C4C1C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  *(void *)(v0 + 56) = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager__storeManager;
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    *(void *)(v0 + 88) = v3;
    uint64_t v4 = *(void *)(v0 + 40);
    swift_retain();
    uint64_t v5 = swift_task_alloc();
    *(void *)(v0 + 96) = v5;
    long long v6 = *(_OWORD *)(v0 + 24);
    *(void *)(v5 + 16) = v4;
    *(void *)(v5 + 24) = v1;
    *(_OWORD *)(v5 + 32) = v6;
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1D16C4618;
    uint64_t v8 = *(void *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 16);
    return sub_1D166C6F0(v9, (uint64_t)&unk_1EA6525A8, v5, v8);
  }
  else
  {
    *(void *)(v0 + 64) = OBJC_IVAR____TtC17KnowledgeGraphKit12GraphManager_url;
    return MEMORY[0x1F4188298](sub_1D16C4D60);
  }
}

uint64_t sub_1D16C4D60()
{
  if (qword_1EA651430 != -1) {
    swift_once();
  }
  *(void *)(v0 + 72) = qword_1EA651730;
  return MEMORY[0x1F4188298](sub_1D16C4DF8);
}

uint64_t sub_1D16C4DF8()
{
  v0[10] = sub_1D166CAF8(v0[6] + v0[8]);
  return MEMORY[0x1F4188298](sub_1D16C4E6C);
}

uint64_t sub_1D16C4E6C()
{
  *(void *)(*(void *)(v0 + 48) + *(void *)(v0 + 56)) = *(void *)(v0 + 80);
  swift_retain();
  swift_release();
  *(void *)(v0 + 88) = *(void *)(v0 + 80);
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  long long v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1D16C4618;
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 16);
  return sub_1D166C6F0(v5, (uint64_t)&unk_1EA6525A8, v1, v4);
}

uint64_t GraphManager.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_1D16C4F68(uint64_t a1, int *a2)
{
  long long v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1D16C5044;
  return v6(a1);
}

uint64_t sub_1D16C5044()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1D16C513C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1D16C5210(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1D1668120((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1D1668120((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1D16C5210(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1D17BE660();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1D16C53CC(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_1D17BE8D0();
  if (!v8)
  {
    sub_1D17BEA30();
    __break(1u);
LABEL_17:
    uint64_t result = sub_1D17BEB20();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1D16C53CC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1D16C5464(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1D16C5644(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1D16C5644(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1D16C5464(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1D16C55DC(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_1D17BE860();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_1D17BEA30();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1D17BE040();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    sub_1D17BEB20();
    __break(1u);
LABEL_14:
    uint64_t result = sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *sub_1D16C55DC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652680);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  void v4[2] = a1;
  void v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1D16C5644(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652680);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

unint64_t sub_1D16C5794()
{
  unint64_t result = qword_1EA651980;
  if (!qword_1EA651980)
  {
    sub_1D17BDD40();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1EA651980);
  }
  return result;
}

uint64_t sub_1D16C57EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = v3[3];
  uint64_t v10 = v3[4];
  uint64_t v9 = v3[5];
  size_t v11 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v11;
  *size_t v11 = v4;
  v11[1] = sub_1D166FB94;
  return sub_1D16C3DF0(a1, a2, a3, v8, v10, v9);
}

uint64_t sub_1D16C58C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = v3[3];
  uint64_t v10 = v3[4];
  uint64_t v9 = v3[5];
  size_t v11 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v11;
  *size_t v11 = v4;
  v11[1] = sub_1D166FB94;
  return sub_1D16C4760(a1, a2, a3, v8, v10, v9);
}

uint64_t sub_1D16C599C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = v3[3];
  uint64_t v10 = v3[4];
  uint64_t v9 = v3[5];
  size_t v11 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v11;
  *size_t v11 = v4;
  v11[1] = sub_1D166FB94;
  return sub_1D16C4760(a1, a2, a3, v8, v10, v9);
}

uint64_t sub_1D16C5A74()
{
  return type metadata accessor for GraphManager();
}

uint64_t type metadata accessor for GraphManager()
{
  uint64_t result = qword_1EA652610;
  if (!qword_1EA652610) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1D16C5AC8()
{
  uint64_t result = sub_1D17BDD40();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for GraphManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GraphManager);
}

uint64_t dispatch thunk of GraphManager.__allocating_init(at:entityFactory:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_1D16C5BA4@<X0>(NSObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651840);
  MEMORY[0x1F4188790](v8 - 8, v9);
  size_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_suspend(a1);
  uint64_t v12 = sub_1D17BE300();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = (void *)swift_allocObject();
  id v13[2] = 0;
  uint64_t v13[3] = 0;
  void v13[4] = a1;
  v13[5] = a2;
  v13[6] = a3;
  uint64_t v14 = a1;
  swift_retain();
  uint64_t result = sub_1D16C154C((uint64_t)v11, (uint64_t)&unk_1EA652678, (uint64_t)v13);
  *a4 = result;
  return result;
}

unint64_t sub_1D16C5CD8()
{
  unint64_t result = qword_1EA652650;
  if (!qword_1EA652650)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA652648);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA652650);
  }
  return result;
}

uint64_t sub_1D16C5D34()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D16C5D44(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  size_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *size_t v5 = v2;
  v5[1] = sub_1D166FB94;
  unint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA652658 + dword_1EA652658);
  return v6(a1, v4);
}

uint64_t sub_1D16C5DFC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1D16C5BA4(*(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_1D16C5E1C()
{
  swift_unknownObjectRelease();

  swift_release();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1D16C5E64(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v4 = *(int **)(v1 + 40);
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *unint64_t v6 = v2;
  v6[1] = sub_1D166FB94;
  uint64_t v6[2] = v5;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  int64_t v7 = (void *)swift_task_alloc();
  void v6[3] = v7;
  *int64_t v7 = v6;
  v7[1] = sub_1D166E590;
  return v9(a1);
}

uint64_t sub_1D16C5F90()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D16C5FC8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1D166FB94;
  unint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA652688 + dword_1EA652688);
  return v6(a1, v4);
}

uint64_t sub_1D16C6084@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = (uint64_t)(a1 + 1);
  *(void *)&v7[0] = *a1;
  (*(void (**)(uint64_t *__return_ptr, long long *, void *, uint64_t, uint64_t))(a3 + 32))(&v8, v7, a1 + 1, a2, a3);
  sub_1D167C788(v5, (uint64_t)v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  return sub_1D16B2644(&v8, v7, a4);
}

uint64_t NodeFilterRelation.targetNodeIdentifiers(from:in:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *v4;
  uint64_t v9 = v4[1];
  uint64_t v10 = v4[2];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v11);
  uint64_t v15[3] = type metadata accessor for Filter();
  v14[1] = *(void *)(a3 + 24);
  v15[0] = v8;
  v15[1] = v9;
  v15[4] = swift_getWitnessTable();
  long long v15[2] = v10;
  v14[0] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AbstractGraph.nodeIdentifiers(matching:in:)(v15, (uint64_t)v14, v11, v12, &v16);
  uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
  *a4 = v16;
  return result;
}

uint64_t NodeFilterRelation.adjacency(from:in:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *v4;
  uint64_t v9 = v4[1];
  uint64_t v10 = v4[2];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v11);
  uint64_t v15[3] = type metadata accessor for Filter();
  v14[1] = *(void *)(a3 + 24);
  v15[0] = v8;
  v15[1] = v9;
  v15[4] = swift_getWitnessTable();
  long long v15[2] = v10;
  v14[0] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AbstractGraph.nodeIdentifiers(matching:in:)(v15, (uint64_t)v14, v11, v12, &v16);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
  v15[0] = v16;
  sub_1D165CF6C(v15, a4);
  return swift_release();
}

uint64_t NodeFilterRelation.adjacencyByJoining(with:in:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *v4;
  uint64_t v9 = v4[1];
  uint64_t v10 = v4[2];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v11);
  void v19[3] = type metadata accessor for Filter();
  v18[1] = *(void *)(a3 + 24);
  v19[0] = v8;
  v19[1] = v9;
  v19[4] = swift_getWitnessTable();
  v19[2] = v10;
  id v13 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v14 = objc_msgSend(v13, sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  uint64_t v20 = v15;
  v18[0] = v7;
  sub_1D165CB78(v18, (uint64_t)&v20);
  swift_bridgeObjectRelease();
  v18[0] = v20;
  AbstractGraph.nodeIdentifiers(matching:in:)(v19, (uint64_t)v18, v11, v12, &v20);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  uint64_t v16 = v20;
  v19[0] = sub_1D165F754(MEMORY[0x1E4FBC860]);
  uint64_t v20 = v7;
  sub_1D165F854(&v20, (uint64_t)v19, v16);
  uint64_t result = swift_release();
  *a4 = v19[0];
  return result;
}

uint64_t NodeFilterRelation.inverse()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  a2[3] = a1;
  a2[4] = swift_getWitnessTable();
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ChainRelation.init(relations:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ChainRelation.targetNodeIdentifiers(from:in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6)
  {
    uint64_t v8 = *(void *)v3 + 32;
    swift_retain();
    swift_bridgeObjectRetain();
    do
    {
      sub_1D167C788(v8, (uint64_t)v14);
      uint64_t v9 = v15;
      uint64_t v10 = v16;
      __swift_project_boxed_opaque_existential_1(v14, v15);
      uint64_t v12 = v5;
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t, uint64_t))(v10 + 24))(&v13, &v12, a2, v9, v10);
      swift_release();
      uint64_t v5 = v13;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
      v8 += 40;
      --v6;
    }
    while (v6);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_retain();
  }
  *a3 = v5;
  return result;
}

unint64_t ChainRelation.adjacency(from:in:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v6 = *a1;
  uint64_t v7 = *v3;
  unint64_t result = sub_1D165F754(MEMORY[0x1E4FBC860]);
  unint64_t v9 = result;
  uint64_t v10 = *(void *)(v7 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    sub_1D167C788(v7 + 32, (uint64_t)v19);
    swift_bridgeObjectRelease();
    uint64_t v11 = v20;
    uint64_t v12 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    unint64_t v17 = v6;
    (*(void (**)(unint64_t *__return_ptr, unint64_t *, uint64_t, uint64_t, uint64_t))(v12 + 32))(&v18, &v17, a2, v11, v12);
    unint64_t v9 = v18;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
    uint64_t v13 = v10 - 1;
    if (v10 != 1)
    {
      uint64_t v14 = v7 + 72;
      do
      {
        sub_1D167C788(v14, (uint64_t)v19);
        uint64_t v15 = v20;
        uint64_t v16 = v21;
        __swift_project_boxed_opaque_existential_1(v19, v20);
        unint64_t v17 = v9;
        (*(void (**)(unint64_t *__return_ptr, unint64_t *, uint64_t, uint64_t, uint64_t))(v16 + 40))(&v18, &v17, a2, v15, v16);
        swift_bridgeObjectRelease();
        unint64_t v9 = v18;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
        v14 += 40;
        --v13;
      }
      while (v13);
    }
    unint64_t result = swift_bridgeObjectRelease();
  }
  *a3 = v9;
  return result;
}

uint64_t ChainRelation.adjacencyByJoining(with:in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6)
  {
    uint64_t v8 = *(void *)v3 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    do
    {
      sub_1D167C788(v8, (uint64_t)v14);
      uint64_t v9 = v15;
      uint64_t v10 = v16;
      __swift_project_boxed_opaque_existential_1(v14, v15);
      uint64_t v12 = v5;
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t, uint64_t))(v10 + 40))(&v13, &v12, a2, v9, v10);
      swift_bridgeObjectRelease();
      uint64_t v5 = v13;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
      v8 += 40;
      --v6;
    }
    while (v6);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a3 = v5;
  return result;
}

uint64_t ChainRelation.inverse()@<X0>(int8x16_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *v2;
  int64_t v6 = *(void *)(*v2 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    uint64_t result = sub_1D1682834(0, v6, 0);
    uint64_t v7 = v15;
    unint64_t v9 = v6 - 1;
    uint64_t v10 = v5 + 40 * v6 - 8;
    while (v9 != -1)
    {
      if (v9 >= *(void *)(v5 + 16)) {
        goto LABEL_11;
      }
      sub_1D167C788(v10, (uint64_t)v14);
      uint64_t v15 = v7;
      unint64_t v12 = *(void *)(v7 + 16);
      unint64_t v11 = *(void *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1D1682834(v11 > 1, v12 + 1, 1);
        uint64_t v7 = v15;
      }
      *(void *)(v7 + 16) = v12 + 1;
      uint64_t result = sub_1D16AA89C(v14, v7 + 40 * v12 + 32);
      --v9;
      v10 -= 40;
      if (v9 == -1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  else
  {
LABEL_9:
    int8x16_t v13 = vextq_s8(a1[2], a1[2], 8uLL);
    v14[0] = (__int128)vextq_s8(a1[1], a1[1], 8uLL);
    v14[1] = (__int128)v13;
    a2[3] = type metadata accessor for ChainRelation();
    uint64_t result = swift_getWitnessTable();
    a2[4] = result;
    *a2 = v7;
  }
  return result;
}

uint64_t NeighborRelationOut.targetNodeIdentifiers(from:in:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return sub_1D16C6BB8(a1, a2, 2, a3);
}

uint64_t NeighborRelationOut.adjacency(from:in:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return sub_1D16C6CC0(a1, a2, 2, a3);
}

uint64_t NeighborRelationOut.adjacencyByJoining(with:in:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return sub_1D16C6DC8(a1, a2, 1, a3);
}

uint64_t NeighborRelationOut.inverse()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1D16C6B10(a1, (uint64_t (*)(void, void, void))type metadata accessor for NeighborRelationIn, a2);
}

__n128 NeighborRelationIn.init(with:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2 = a1[1].n128_u64[0];
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v2;
  return result;
}

uint64_t NeighborRelationIn.targetNodeIdentifiers(from:in:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return sub_1D16C6BB8(a1, a2, 1, a3);
}

uint64_t NeighborRelationIn.adjacency(from:in:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return sub_1D16C6CC0(a1, a2, 1, a3);
}

uint64_t NeighborRelationIn.adjacencyByJoining(with:in:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return sub_1D16C6DC8(a1, a2, 2, a3);
}

uint64_t NeighborRelationIn.inverse()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1D16C6B10(a1, (uint64_t (*)(void, void, void))type metadata accessor for NeighborRelationOut, a2);
}

uint64_t sub_1D16C6B10@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void, void, void)@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v7 = v3[2];
  a3[3] = a2(0, *(void *)(a1 + 16), *(void *)(a1 + 24));
  a3[4] = swift_getWitnessTable();
  *a3 = v5;
  a3[1] = v6;
  a3[2] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t NeighborRelationInOut.targetNodeIdentifiers(from:in:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return sub_1D16C6BB8(a1, a2, 3, a3);
}

uint64_t sub_1D16C6BB8@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *v4;
  uint64_t v9 = v4[1];
  uint64_t v10 = v4[2];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v11);
  uint64_t v15 = v7;
  void v14[3] = type metadata accessor for Filter();
  v14[0] = v8;
  v14[1] = v9;
  void v14[4] = swift_getWitnessTable();
  long long v14[2] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D16B1700((uint64_t)&v15, v14, a3, v11, v12, &v16);
  uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
  *a4 = v16;
  return result;
}

uint64_t NeighborRelationInOut.adjacency(from:in:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return sub_1D16C6CC0(a1, a2, 3, a3);
}

uint64_t sub_1D16C6CC0@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *v4;
  uint64_t v9 = v4[1];
  uint64_t v10 = v4[2];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v11);
  uint64_t v15 = v7;
  void v14[3] = type metadata accessor for Filter();
  v14[0] = v8;
  v14[1] = v9;
  void v14[4] = swift_getWitnessTable();
  long long v14[2] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D16B1900((uint64_t)&v15, v14, a3, v11, v12, &v16);
  uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
  *a4 = v16;
  return result;
}

uint64_t NeighborRelationInOut.adjacencyByJoining(with:in:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return sub_1D16C6DC8(a1, a2, 3, a3);
}

uint64_t sub_1D16C6DC8@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v6 = *a1;
  unint64_t v8 = *v4;
  unint64_t v7 = v4[1];
  unint64_t v9 = v4[2];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v10);
  id v12 = objc_allocWithZone((Class)KGMutableElementIdentifierSet);
  swift_bridgeObjectRetain();
  id v13 = objc_msgSend(v12, sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  v18[0] = v14;
  unint64_t v20 = v6;
  sub_1D165CB78((uint64_t *)&v20, (uint64_t)v18);
  swift_bridgeObjectRelease();
  unint64_t v19 = v18[0];
  void v18[3] = type metadata accessor for Filter();
  uint64_t WitnessTable = swift_getWitnessTable();
  v18[0] = v8;
  v18[1] = v7;
  v18[4] = WitnessTable;
  uint64_t v18[2] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D16B1CB8((uint64_t)&v19, v18, a3, v10, v11, &v20);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  unint64_t v19 = v20;
  unint64_t v20 = v6;
  static ElementIdentifierTupleSet.joinOnTargets(_:_:)((uint64_t *)&v20, (uint64_t *)&v19, v18);
  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v18[0];
  return result;
}

uint64_t NeighborRelationInOut.inverse()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  a2[3] = a1;
  a2[4] = swift_getWitnessTable();
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for ChainRelation()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for NeighborRelationIn()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for NeighborRelationOut()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of Relation.targetNodeIdentifiers(from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of Relation.adjacency(from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of Relation.adjacencyByJoining(with:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of Relation.inverse()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t type metadata accessor for NodeFilterRelation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for NeighborRelationInOut()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MAProgressReporter.reportProgress(_:)(Swift::Double a1)
{
  if (objc_msgSend(v1, sel_isCancelledWithProgress_, a1))
  {
    sub_1D17BE2E0();
    sub_1D16C7144();
    swift_allocError();
    sub_1D17BDE20();
    swift_willThrow();
  }
}

unint64_t sub_1D16C7144()
{
  unint64_t result = qword_1EBD27450;
  if (!qword_1EBD27450)
  {
    sub_1D17BE2E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBD27450);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MAProgressReporter.reportProgress(completedUnits:outOf:)(Swift::Int completedUnits, Swift::Int outOf)
{
  if (objc_msgSend(v2, sel_isCancelledWithUnitsCompleted_outOf_, completedUnits, outOf))
  {
    sub_1D17BE2E0();
    sub_1D16C7144();
    swift_allocError();
    sub_1D17BDE20();
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MAProgressReporter.checkCancelled()()
{
  if (objc_msgSend(v0, sel_isCancelled))
  {
    sub_1D17BE2E0();
    sub_1D16C7144();
    swift_allocError();
    sub_1D17BDE20();
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MAProgressReporter.reportCompleted()()
{
  if (objc_msgSend(v0, sel_isCancelledWithProgress_, 1.0))
  {
    sub_1D17BE2E0();
    sub_1D16C7144();
    swift_allocError();
    sub_1D17BDE20();
    swift_willThrow();
  }
}

uint64_t MAProgressReporter.splitEvenly(sequentialOperationCount:)(uint64_t a1)
{
  uint64_t v3 = v1;
  v15[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (a1 >= 1)
  {
    if (a1 == 1)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_1D17C9600;
      *(void *)(v5 + 32) = v3;
      *(void *)&v15[0] = v5;
      sub_1D17BE150();
      uint64_t v4 = *(void *)&v15[0];
      id v6 = v3;
    }
    else
    {
      *(void *)&v15[0] = MEMORY[0x1E4FBC860];
      sub_1D168271C(0, a1 - 1, 0);
      double v8 = v15[0];
      vDSP_Length v9 = *(void *)(*(void *)&v15[0] + 16);
      uint64_t v10 = 1;
      do
      {
        v15[0] = v8;
        unint64_t v11 = *(void *)(*(void *)&v8 + 24);
        id v12 = (const double *)(v9 + 1);
        if (v9 >= v11 >> 1)
        {
          sub_1D168271C(v11 > 1, v9 + 1, 1);
          double v8 = v15[0];
        }
        *(void *)(*(void *)&v8 + 16) = v12;
        *(double *)(*(void *)&v8 + 8 * v9 + 32) = (double)v10;
        if (a1 == v10)
        {
          __break(1u);
          goto LABEL_13;
        }
        ++v10;
        ++v9;
      }
      while (a1 != v10);
      id v12 = (const double *)(*(void *)&v8 + 32);
      double v2 = (double)a1;
      swift_bridgeObjectRetain();
      double v13 = v8;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_10;
      }
LABEL_13:
      double v13 = COERCE_DOUBLE(sub_1D1667604(*(void **)&v8));
LABEL_10:
      v15[0] = v2;
      swift_bridgeObjectRetain();
      vDSP_vsdivD(v12, 1, v15, (double *)(*(void *)&v13 + 32), 1, v9);
      swift_bridgeObjectRelease_n();
      uint64_t v4 = MAProgressReporter.split(splitPoints:)(*(uint64_t *)&v13);
      swift_bridgeObjectRelease();
    }
  }
  return v4;
}

uint64_t MAProgressReporter.split(splitPoints:)(uint64_t a1)
{
  uint64_t v10 = MEMORY[0x1E4FBC860];
  uint64_t v3 = *(void *)(a1 + 16);
  sub_1D16C8164(v3 + 1, 0);
  sub_1D17BE150();
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    double v5 = 0.0;
    do
    {
      double v6 = v5;
      double v5 = *(double *)(a1 + 8 * v4 + 32);
      id v7 = objc_msgSend(v1, sel_childProgressReporterFromStart_toEnd_, v6, v5);
      MEMORY[0x1D25F8AB0]();
      if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1D17BE170();
      }
      ++v4;
      sub_1D17BE1F0();
      sub_1D17BE150();
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    double v5 = 0.0;
  }
  id v8 = objc_msgSend(v1, sel_childProgressReporterFromStart_toEnd_, v5, 1.0);
  MEMORY[0x1D25F8AB0]();
  if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1D17BE170();
  }
  sub_1D17BE1F0();
  sub_1D17BE150();
  return v10;
}

Swift::tuple_MAProgressReporter_MAProgressReporter __swiftcall MAProgressReporter.split(splitPoints:)(Swift::Double splitPoints)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_1EBD27248);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D17C91F0;
  *(Swift::Double *)(inited + 32) = splitPoints;
  uint64_t v3 = MAProgressReporter.split(splitPoints:)(inited);
  uint64_t v4 = (objc_class *)swift_setDeallocating();
  if ((v3 & 0xC000000000000001) != 0)
  {
    id v8 = (objc_class *)MEMORY[0x1D25F9260](0, v3);
    vDSP_Length v9 = (objc_class *)MEMORY[0x1D25F9260](1, v3);
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v6 == 1)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  id v7 = *(void **)(v3 + 40);
  id v8 = (objc_class *)*(id *)(v3 + 32);
  vDSP_Length v9 = v7;
LABEL_5:
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  uint64_t v4 = v8;
  double v5 = v10;
LABEL_9:
  result._1.super.Class isa = v5;
  result._0.super.Class isa = v4;
  return result;
}

Swift::tuple_MAProgressReporter_MAProgressReporter_MAProgressReporter __swiftcall MAProgressReporter.split(splitPoints:_:)(Swift::Double splitPoints, Swift::Double _)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_1EBD27248);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D17C91E0;
  *(Swift::Double *)(inited + 32) = splitPoints;
  *(Swift::Double *)(inited + 40) = _;
  uint64_t v5 = MAProgressReporter.split(splitPoints:)(inited);
  uint64_t v6 = (objc_class *)swift_setDeallocating();
  if ((v5 & 0xC000000000000001) != 0)
  {
    id v12 = (objc_class *)MEMORY[0x1D25F9260](0, v5);
    double v13 = (objc_class *)MEMORY[0x1D25F9260](1, v5);
    uint64_t v14 = (objc_class *)MEMORY[0x1D25F9260](2, v5);
    goto LABEL_6;
  }
  unint64_t v9 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v9 == 1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v9 < 3)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v10 = *(void **)(v5 + 40);
  unint64_t v11 = *(void **)(v5 + 48);
  id v12 = (objc_class *)*(id *)(v5 + 32);
  double v13 = v10;
  uint64_t v14 = v11;
LABEL_6:
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v6 = v12;
  id v7 = v13;
  id v8 = v15;
LABEL_11:
  result._2.super.Class isa = v8;
  result._1.super.Class isa = v7;
  result._0.super.Class isa = v6;
  return result;
}

Swift::tuple_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter __swiftcall MAProgressReporter.split(splitPoints:_:_:)(Swift::Double splitPoints, Swift::Double _, Swift::Double a3)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_1EBD27248);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D17C9930;
  *(Swift::Double *)(inited + 32) = splitPoints;
  *(Swift::Double *)(inited + 40) = _;
  *(Swift::Double *)(inited + 48) = a3;
  uint64_t v7 = MAProgressReporter.split(splitPoints:)(inited);
  id v8 = (objc_class *)swift_setDeallocating();
  if ((v7 & 0xC000000000000001) != 0)
  {
    unint64_t v16 = (objc_class *)MEMORY[0x1D25F9260](0, v7);
    unint64_t v17 = (objc_class *)MEMORY[0x1D25F9260](1, v7);
    unint64_t v18 = (objc_class *)MEMORY[0x1D25F9260](2, v7);
    unint64_t v19 = (objc_class *)MEMORY[0x1D25F9260](3, v7);
    goto LABEL_7;
  }
  unint64_t v12 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v12 == 1)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v12 < 3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v12 == 3)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  double v13 = *(void **)(v7 + 40);
  uint64_t v14 = *(void **)(v7 + 48);
  uint64_t v15 = *(void **)(v7 + 56);
  unint64_t v16 = (objc_class *)*(id *)(v7 + 32);
  unint64_t v17 = v13;
  unint64_t v18 = v14;
  unint64_t v19 = v15;
LABEL_7:
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  id v8 = v16;
  unint64_t v9 = v17;
  uint64_t v10 = v18;
  unint64_t v11 = v20;
LABEL_13:
  result._3.super.Class isa = v11;
  result._2.super.Class isa = v10;
  result._1.super.Class isa = v9;
  result._0.super.Class isa = v8;
  return result;
}

void __swiftcall MAProgressReporter.split(splitPoints:_:_:_:)(Swift::tuple_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter *__return_ptr retstr, Swift::Double splitPoints, Swift::Double _, Swift::Double a4, Swift::Double a5)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_1EBD27248);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D17CB500;
  *(Swift::Double *)(inited + 32) = splitPoints;
  *(Swift::Double *)(inited + 40) = _;
  *(Swift::Double *)(inited + 48) = a4;
  *(Swift::Double *)(inited + 56) = a5;
  uint64_t v11 = MAProgressReporter.split(splitPoints:)(inited);
  swift_setDeallocating();
  if ((v11 & 0xC000000000000001) != 0)
  {
    unint64_t v17 = (objc_class *)MEMORY[0x1D25F9260](0, v11);
    unint64_t v18 = (objc_class *)MEMORY[0x1D25F9260](1, v11);
    unint64_t v19 = (objc_class *)MEMORY[0x1D25F9260](2, v11);
    unint64_t v20 = (objc_class *)MEMORY[0x1D25F9260](3, v11);
    uint64_t v21 = (objc_class *)MEMORY[0x1D25F9260](4, v11);
    goto LABEL_8;
  }
  unint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v12 == 1)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v12 < 3)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v12 == 3)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v12 >= 5)
  {
    double v13 = *(void **)(v11 + 40);
    uint64_t v14 = *(void **)(v11 + 48);
    uint64_t v15 = *(void **)(v11 + 56);
    unint64_t v16 = *(void **)(v11 + 64);
    unint64_t v17 = (objc_class *)*(id *)(v11 + 32);
    unint64_t v18 = v13;
    unint64_t v19 = v14;
    unint64_t v20 = v15;
    uint64_t v21 = v16;
LABEL_8:
    int v22 = v21;
    swift_bridgeObjectRelease();
    retstr->_0.super.Class isa = v17;
    retstr->_1.super.Class isa = v18;
    retstr->_2.super.Class isa = v19;
    retstr->_3.super.Class isa = v20;
    retstr->_4.super.Class isa = v22;
    return;
  }
LABEL_14:
  __break(1u);
}

void __swiftcall MAProgressReporter.split(splitPoints:_:_:_:_:)(Swift::tuple_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter *__return_ptr retstr, Swift::Double splitPoints, Swift::Double _, Swift::Double a4, Swift::Double a5, Swift::Double a6)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_1EBD27248);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D17CB510;
  *(Swift::Double *)(inited + 32) = splitPoints;
  *(Swift::Double *)(inited + 40) = _;
  *(Swift::Double *)(inited + 48) = a4;
  *(Swift::Double *)(inited + 56) = a5;
  *(Swift::Double *)(inited + 64) = a6;
  uint64_t v13 = MAProgressReporter.split(splitPoints:)(inited);
  swift_setDeallocating();
  if ((v13 & 0xC000000000000001) != 0)
  {
    unint64_t v20 = (objc_class *)MEMORY[0x1D25F9260](0, v13);
    uint64_t v21 = (objc_class *)MEMORY[0x1D25F9260](1, v13);
    int v22 = (objc_class *)MEMORY[0x1D25F9260](2, v13);
    uint64_t v23 = (objc_class *)MEMORY[0x1D25F9260](3, v13);
    uint64_t v24 = (objc_class *)MEMORY[0x1D25F9260](4, v13);
    uint64_t v25 = (objc_class *)MEMORY[0x1D25F9260](5, v13);
    goto LABEL_9;
  }
  unint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v14)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v14 == 1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v14 < 3)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v14 == 3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v14 < 5)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v14 != 5)
  {
    uint64_t v15 = *(void **)(v13 + 40);
    unint64_t v16 = *(void **)(v13 + 48);
    unint64_t v17 = *(void **)(v13 + 56);
    unint64_t v18 = *(void **)(v13 + 64);
    unint64_t v19 = *(void **)(v13 + 72);
    unint64_t v20 = (objc_class *)*(id *)(v13 + 32);
    uint64_t v21 = v15;
    int v22 = v16;
    uint64_t v23 = v17;
    uint64_t v24 = v18;
    uint64_t v25 = v19;
LABEL_9:
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    retstr->_0.super.Class isa = v20;
    retstr->_1.super.Class isa = v21;
    retstr->_2.super.Class isa = v22;
    retstr->_3.super.Class isa = v23;
    retstr->_4.super.Class isa = v24;
    retstr->_5.super.Class isa = v26;
    return;
  }
LABEL_16:
  __break(1u);
}

void __swiftcall MAProgressReporter.split(splitPoints:_:_:_:_:_:)(Swift::tuple_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter_MAProgressReporter *__return_ptr retstr, Swift::Double splitPoints, Swift::Double _, Swift::Double a4, Swift::Double a5, Swift::Double a6, Swift::Double a7)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_1EBD27248);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D17CB520;
  *(Swift::Double *)(inited + 32) = splitPoints;
  *(Swift::Double *)(inited + 40) = _;
  *(Swift::Double *)(inited + 48) = a4;
  *(Swift::Double *)(inited + 56) = a5;
  *(Swift::Double *)(inited + 64) = a6;
  *(Swift::Double *)(inited + 72) = a7;
  uint64_t v15 = MAProgressReporter.split(splitPoints:)(inited);
  swift_setDeallocating();
  if ((v15 & 0xC000000000000001) != 0)
  {
    uint64_t v23 = (objc_class *)MEMORY[0x1D25F9260](0, v15);
    uint64_t v24 = (objc_class *)MEMORY[0x1D25F9260](1, v15);
    uint64_t v25 = (objc_class *)MEMORY[0x1D25F9260](2, v15);
    unint64_t v26 = (objc_class *)MEMORY[0x1D25F9260](3, v15);
    os_log_t v27 = (objc_class *)MEMORY[0x1D25F9260](4, v15);
    uint64_t v28 = (objc_class *)MEMORY[0x1D25F9260](5, v15);
    uint64_t v29 = (objc_class *)MEMORY[0x1D25F9260](6, v15);
    goto LABEL_10;
  }
  unint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v16)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v16 == 1)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v16 < 3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v16 == 3)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v16 < 5)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v16 == 5)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v16 >= 7)
  {
    unint64_t v17 = *(void **)(v15 + 40);
    unint64_t v18 = *(void **)(v15 + 48);
    unint64_t v19 = *(void **)(v15 + 56);
    unint64_t v20 = *(void **)(v15 + 64);
    uint64_t v21 = *(void **)(v15 + 72);
    int v22 = *(void **)(v15 + 80);
    uint64_t v23 = (objc_class *)*(id *)(v15 + 32);
    uint64_t v24 = v17;
    uint64_t v25 = v18;
    unint64_t v26 = v19;
    os_log_t v27 = v20;
    uint64_t v28 = v21;
    uint64_t v29 = v22;
LABEL_10:
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    retstr->_0.super.Class isa = v23;
    retstr->_1.super.Class isa = v24;
    retstr->_2.super.Class isa = v25;
    retstr->_3.super.Class isa = v26;
    retstr->_4.super.Class isa = v27;
    retstr->_5.super.Class isa = v28;
    retstr->_6.super.Class isa = v30;
    return;
  }
LABEL_18:
  __break(1u);
}

uint64_t MAProgressReporter.observe(_:)(void *a1)
{
  swift_getKeyPath();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = a1;
  id v4 = v1;
  id v5 = a1;
  uint64_t v6 = sub_1D17BDD10();
  swift_release();
  swift_release();
  return v6;
}

void sub_1D16C7F2C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = sub_1D17BE2E0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(qword_1EA652918);
  sub_1D17BDD00();
  if (v15)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (!objc_msgSend(a3, sel_isCancelledWithProgress_, *(double *)&v14)) {
    return;
  }
  sub_1D16C7144();
  id v4 = (void *)swift_allocError();
  sub_1D17BDE20();
  swift_willThrow();
  id v14 = v4;
  id v12 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651838);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:

    id v14 = 0;
    unint64_t v15 = 0xE000000000000000;
    sub_1D17BE850();
    sub_1D17BE030();
    uint64_t v13 = v4;
    sub_1D17BE9E0();
    sub_1D17BEA40();
    __break(1u);
    return;
  }

  objc_msgSend(a4, sel_cancel);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1D16C8164(uint64_t a1, char a2)
{
  unint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *double v2 = v5;
  uint64_t v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = MEMORY[0x1D25F9270](v7, v9, a2 & 1, v5);
  *double v2 = result;
  return result;
}

char *keypath_get_selector_fractionCompleted()
{
  return sel_fractionCompleted;
}

id sub_1D16C8230@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_fractionCompleted);
  *a2 = v4;
  return result;
}

uint64_t sub_1D16C8264()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1D16C82A4(uint64_t a1, uint64_t a2)
{
  sub_1D16C7F2C(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t static UniqueSortedBuffer.Union.Index.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = 1;
  BOOL v3 = *(void *)a1 < *(void *)a2 || *(void *)(a1 + 8) < *(void *)(a2 + 8);
  if (!v3 && ((*(unsigned __int8 *)(a1 + 16) ^ 1 | *(unsigned __int8 *)(a2 + 16)) & 1) != 0) {
    char v2 = *(unsigned char *)(a1 + 17) & (*(unsigned char *)(a2 + 17) ^ 1);
  }
  return v2 & 1;
}

BOOL static UniqueSortedBuffer.Union.Index.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8);
  return ((v3 | *(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16) | *(unsigned __int8 *)(a2 + 17) ^ *(unsigned __int8 *)(a1 + 17)) & 1) == 0;
}

void UniqueSortedBuffer.Union.startIndex.getter(uint64_t a1)
{
  long long v2 = v1[1];
  long long v6 = *v1;
  long long v7 = v2;
  long long v3 = v1[3];
  long long v8 = v1[2];
  long long v9 = v3;
  v4[0] = -1;
  v4[1] = -1;
  __int16 v5 = 257;
  UniqueSortedBuffer.Union.index(after:)((uint64_t)v4, a1);
}

void UniqueSortedBuffer.Union.index(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  MEMORY[0x1F4188790](a1, a2);
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  int v14 = *((unsigned __int8 *)v11 + 16);
  int v15 = *((unsigned __int8 *)v11 + 17);
  uint64_t v16 = *v2;
  uint64_t v17 = v2[1];
  uint64_t v18 = v2[2];
  uint64_t v19 = v2[3];
  uint64_t v20 = v2[4];
  uint64_t v40 = v2[5];
  uint64_t v41 = v20;
  uint64_t v21 = v2[6];
  uint64_t v38 = v2[7];
  uint64_t v39 = v21;
  if (v14 == 1)
  {
    BOOL v22 = __OFADD__(v13++, 1);
    if (v22)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return;
    }
  }
  if (v15)
  {
    BOOL v22 = __OFADD__(v12++, 1);
    if (v22) {
      goto LABEL_11;
    }
  }
  uint64_t v34 = (char *)v33 - v8;
  __n128 v35 = v10;
  uint64_t v36 = v9;
  uint64_t v37 = v7;
  uint64_t v43 = v16;
  uint64_t v44 = v17;
  uint64_t v45 = v18;
  uint64_t v46 = v19;
  v33[1] = *(void *)(v6 + 24);
  type metadata accessor for UniqueSortedBuffer();
  uint64_t v23 = UniqueSortedBuffer.count.getter();
  BOOL v47 = v13 != v23;
  uint64_t v43 = v41;
  uint64_t v44 = v40;
  uint64_t v45 = v39;
  uint64_t v46 = v38;
  uint64_t v24 = UniqueSortedBuffer.count.getter();
  BOOL v25 = v13 == v23;
  uint64_t v26 = v12;
  if (v25 || v12 == v24)
  {
    char v30 = v12 != v24;
    char v29 = v47;
  }
  else
  {
    uint64_t v43 = v16;
    uint64_t v44 = v17;
    uint64_t v45 = v18;
    uint64_t v46 = v19;
    uint64_t v42 = v13;
    sub_1D17BDFD0();
    swift_getWitnessTable();
    sub_1D17BECE0();
    os_log_t v27 = v34;
    sub_1D17BECF0();
    uint64_t v43 = v41;
    uint64_t v44 = v40;
    uint64_t v45 = v39;
    uint64_t v46 = v38;
    uint64_t v42 = v26;
    uint64_t v28 = v35;
    sub_1D17BECF0();
    char v29 = sub_1D17BDF50();
    char v30 = sub_1D17BDF50();
    uint64_t v31 = *(void (**)(char *, uint64_t))(v36 + 8);
    v31(v28, v3);
    v31(v27, v3);
  }
  unint64_t v32 = v37;
  *uint64_t v37 = v13;
  v32[1] = v26;
  *((unsigned char *)v32 + 16) = v29 & 1;
  *((unsigned char *)v32 + 17) = v30 & 1;
}

uint64_t UniqueSortedBuffer.Union.endIndex.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for UniqueSortedBuffer();
  uint64_t v2 = UniqueSortedBuffer.count.getter();
  uint64_t result = UniqueSortedBuffer.count.getter();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = result;
  *(_WORD *)(a1 + 16) = 0;
  return result;
}

uint64_t UniqueSortedBuffer.Union.subscript.getter()
{
  return sub_1D17BECF0();
}

uint64_t sub_1D16C8770()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D16C878C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D16C87A8()
{
  return swift_getWitnessTable();
}

void (*sub_1D16C87CC(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1D16C883C(v6, a2, a3);
  return sub_1D167B268;
}

void (*sub_1D16C883C(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v3 = *(void *)(a3 + 16);
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  a1[1] = v4;
  a1[2] = malloc(*(void *)(v4 + 64));
  UniqueSortedBuffer.Union.subscript.getter();
  return sub_1D1657898;
}

double sub_1D16C88F8(uint64_t a1, uint64_t a2)
{
  UniqueSortedBuffer.Union.index(after:)(a1, a2);
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 17) = v6;
  return result;
}

__n128 sub_1D16C8940@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v4 = *v2;
  unint64_t v5 = v2[1];
  unint64_t v6 = v2[2];
  unint64_t v7 = v2[3];
  unint64_t v8 = v2[4];
  unint64_t v9 = v2[5];
  unint64_t v10 = v2[6];
  unint64_t v11 = v2[7];
  UniqueSortedBuffer.Union.startIndex.getter(a1);
  __n128 result = v13;
  a2->n128_u64[0] = v4;
  a2->n128_u64[1] = v5;
  a2[1].n128_u64[0] = v6;
  a2[1].n128_u64[1] = v7;
  a2[2].n128_u64[0] = v8;
  a2[2].n128_u64[1] = v9;
  a2[3].n128_u64[0] = v10;
  a2[3].n128_u64[1] = v11;
  a2[4] = v13;
  a2[5].n128_u8[0] = v14;
  a2[5].n128_u8[1] = v15;
  return result;
}

uint64_t sub_1D16C89DC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t sub_1D16C8A30()
{
  return sub_1D17BE440();
}

uint64_t type metadata accessor for UniqueSortedBuffer.Union()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for UniqueSortedBuffer.Union.Index()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D16C8AC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X8>)
{
  unint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)&long long v32 = MEMORY[0x1E4FBC860];
  *((void *)&v32 + 1) = MEMORY[0x1E4FBC860];
  uint64_t v4 = a1 + 1;
  if (__OFADD__(a1, 1)) {
    goto LABEL_85;
  }
  unint64_t v6 = a3;
  uint64_t v7 = *(void *)(a2 + 16);
  if (!v7)
  {
    uint64_t result = swift_bridgeObjectRelease();
    int64x2_t v30 = vdupq_n_s64(v3);
LABEL_69:
    *unint64_t v6 = v30;
    return result;
  }
  uint64_t v8 = a1;
  unint64_t v9 = 0;
  uint64_t v10 = a2 + 32;
  while (v9 < *(void *)(a2 + 16))
  {
    float v11 = *(float *)(v10 + 4 * v9);
    uint64_t v12 = (void *)*((void *)&v32 + 1);
    uint64_t v13 = *((void *)&v32 + 1) + 32;
    uint64_t v14 = *(void *)(*((void *)&v32 + 1) + 16);
    if ((unint64_t)v14 < 0x81)
    {
      if (!v14)
      {
        if (v11 != 0.0)
        {
          sub_1D169D564(0, 0, *(float *)(v10 + 4 * v9));
          uint64_t v14 = 0;
          goto LABEL_40;
        }
        goto LABEL_55;
      }
      uint64_t v17 = 0;
LABEL_18:
      uint64_t v19 = *(void *)(v13 + 8 * v17);
      if (v19 >= v8)
      {
        unint64_t v15 = v17;
      }
      else
      {
        unint64_t v15 = v17 + 1;
        if (v17 + 1 >= v14) {
          goto LABEL_35;
        }
        uint64_t v19 = *(void *)(v13 + 8 * v15);
        if (v19 < v8)
        {
          unint64_t v15 = v17 + 2;
          if (v17 + 2 >= v14) {
            goto LABEL_35;
          }
          uint64_t v19 = *(void *)(v13 + 8 * v15);
          if (v19 < v8)
          {
            unint64_t v15 = v17 + 3;
            if (v17 + 3 >= v14) {
              goto LABEL_35;
            }
            uint64_t v19 = *(void *)(v13 + 8 * v15);
            if (v19 < v8)
            {
              unint64_t v15 = v17 + 4;
              if (v17 + 4 >= v14) {
                goto LABEL_35;
              }
              while (1)
              {
                unint64_t v15 = v17 + 4;
                uint64_t v19 = *(void *)(*((void *)&v32 + 1) + 64 + 8 * v17);
                if (v19 >= v8) {
                  break;
                }
                uint64_t v20 = v17 + 5;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_86;
                }
                ++v17;
                if (v20 >= v14) {
                  goto LABEL_36;
                }
              }
            }
          }
        }
      }
      if (v8 < v19) {
        uint64_t v14 = v15;
      }
    }
    else
    {
      unint64_t v15 = (unint64_t)v14 >> 1;
      uint64_t v16 = *(void *)(v13 + 8 * ((unint64_t)v14 >> 1));
      if (v16 != v8)
      {
        uint64_t v17 = 0;
        while (1)
        {
          if (v8 >= v16)
          {
            uint64_t v17 = v15 + 1;
            if (__OFADD__(v15, 1)) {
              goto LABEL_72;
            }
          }
          else
          {
            uint64_t v14 = v15;
          }
          uint64_t v18 = v14 - v17;
          if (__OFSUB__(v14, v17))
          {
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
            goto LABEL_73;
          }
          if (v18 < 129) {
            break;
          }
          unint64_t v15 = v17 + ((unint64_t)v18 >> 1);
          if (__OFADD__(v17, (unint64_t)v18 >> 1)) {
            goto LABEL_71;
          }
          uint64_t v16 = *(void *)(v13 + 8 * v15);
          if (v16 == v8) {
            goto LABEL_35;
          }
        }
        unint64_t v15 = v17;
        if (v17 < v14) {
          goto LABEL_18;
        }
      }
    }
LABEL_35:
    if (v15 == v14)
    {
LABEL_36:
      if (v11 != 0.0)
      {
        if (*(void *)(v32 + 16) < v14) {
          goto LABEL_79;
        }
        if (v14 < 0) {
          goto LABEL_80;
        }
        sub_1D169D564(v14, v14, *(float *)(v10 + 4 * v9));
        if (*(void *)(*((void *)&v32 + 1) + 16) < (unint64_t)v14) {
          goto LABEL_81;
        }
LABEL_40:
        sub_1D169D3F8(v14, v14, v8);
        uint64_t v21 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
      goto LABEL_55;
    }
    BOOL v22 = (char *)v32;
    if (v11 == 0.0)
    {
      if ((v15 & 0x8000000000000000) != 0) {
        goto LABEL_75;
      }
      if (v15 >= *(void *)(v32 + 16)) {
        goto LABEL_76;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v22 = sub_1D166762C(v32);
      }
      unint64_t v23 = *((void *)v22 + 2);
      if (v15 >= v23) {
        goto LABEL_77;
      }
      unint64_t v24 = v23 - 1;
      uint64_t v25 = v23 - 1 - v15;
      if (v25 < 0) {
        goto LABEL_87;
      }
      memmove(&v22[4 * v15 + 32], &v22[4 * v15 + 36], 4 * v25);
      *((void *)v22 + 2) = v24;
      *(void *)&long long v32 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = sub_1D1667618(*((void **)&v32 + 1));
      }
      unint64_t v26 = v12[2];
      if (v15 >= v26) {
        goto LABEL_78;
      }
      unint64_t v27 = v26 - 1;
      uint64_t v28 = v26 - 1 - v15;
      if (v28 < 0) {
        goto LABEL_87;
      }
      memmove(&v12[v15 + 4], &v12[v15 + 5], 8 * v28);
      v12[2] = v27;
      *((void *)&v32 + 1) = v12;
LABEL_55:
      uint64_t v21 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        goto LABEL_74;
      }
      goto LABEL_56;
    }
    if ((v15 & 0x8000000000000000) != 0) {
      goto LABEL_82;
    }
    if (v15 >= *(void *)(v32 + 16)) {
      goto LABEL_83;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      BOOL v22 = sub_1D166762C(v32);
    }
    if (v15 >= *((void *)v22 + 2)) {
      goto LABEL_84;
    }
    *(float *)&v22[4 * v15 + 32] = v11;
    *(void *)&long long v32 = v22;
    uint64_t v21 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_74;
    }
LABEL_56:
    ++v9;
    uint64_t v8 = v4;
    uint64_t v4 = v21;
    if (v9 == v7)
    {
      uint64_t result = swift_bridgeObjectRelease();
      int64x2_t v30 = (int64x2_t)v32;
      unint64_t v6 = a3;
      goto LABEL_69;
    }
  }
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D16C8ED8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X8>)
{
  unint64_t v3 = MEMORY[0x1E4FBC860];
  v32.i64[0] = MEMORY[0x1E4FBC860];
  v32.i64[1] = MEMORY[0x1E4FBC860];
  uint64_t v4 = a1 + 1;
  if (__OFADD__(a1, 1)) {
    goto LABEL_85;
  }
  unint64_t v6 = a3;
  uint64_t v7 = *(void *)(a2 + 16);
  if (!v7)
  {
    uint64_t result = swift_bridgeObjectRelease();
    int64x2_t v30 = vdupq_n_s64(v3);
LABEL_69:
    *unint64_t v6 = v30;
    return result;
  }
  uint64_t v8 = a1;
  unint64_t v9 = 0;
  uint64_t v10 = a2 + 32;
  while (v9 < *(void *)(a2 + 16))
  {
    double v11 = *(double *)(v10 + 8 * v9);
    uint64_t v12 = (void *)v32.i64[1];
    uint64_t v13 = v32.i64[1] + 32;
    uint64_t v14 = *(void *)(v32.i64[1] + 16);
    if ((unint64_t)v14 < 0x81)
    {
      if (!v14)
      {
        if (v11 != 0.0)
        {
          sub_1D169D6D0(0, 0, *(double *)(v10 + 8 * v9));
          uint64_t v14 = 0;
          goto LABEL_40;
        }
        goto LABEL_55;
      }
      uint64_t v17 = 0;
LABEL_18:
      uint64_t v19 = *(void *)(v13 + 8 * v17);
      if (v19 >= v8)
      {
        unint64_t v15 = v17;
      }
      else
      {
        unint64_t v15 = v17 + 1;
        if (v17 + 1 >= v14) {
          goto LABEL_35;
        }
        uint64_t v19 = *(void *)(v13 + 8 * v15);
        if (v19 < v8)
        {
          unint64_t v15 = v17 + 2;
          if (v17 + 2 >= v14) {
            goto LABEL_35;
          }
          uint64_t v19 = *(void *)(v13 + 8 * v15);
          if (v19 < v8)
          {
            unint64_t v15 = v17 + 3;
            if (v17 + 3 >= v14) {
              goto LABEL_35;
            }
            uint64_t v19 = *(void *)(v13 + 8 * v15);
            if (v19 < v8)
            {
              unint64_t v15 = v17 + 4;
              if (v17 + 4 >= v14) {
                goto LABEL_35;
              }
              while (1)
              {
                unint64_t v15 = v17 + 4;
                uint64_t v19 = *(void *)(v32.i64[1] + 64 + 8 * v17);
                if (v19 >= v8) {
                  break;
                }
                uint64_t v20 = v17 + 5;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_86;
                }
                ++v17;
                if (v20 >= v14) {
                  goto LABEL_36;
                }
              }
            }
          }
        }
      }
      if (v8 < v19) {
        uint64_t v14 = v15;
      }
    }
    else
    {
      unint64_t v15 = (unint64_t)v14 >> 1;
      uint64_t v16 = *(void *)(v13 + 8 * ((unint64_t)v14 >> 1));
      if (v16 != v8)
      {
        uint64_t v17 = 0;
        while (1)
        {
          if (v8 >= v16)
          {
            uint64_t v17 = v15 + 1;
            if (__OFADD__(v15, 1)) {
              goto LABEL_72;
            }
          }
          else
          {
            uint64_t v14 = v15;
          }
          uint64_t v18 = v14 - v17;
          if (__OFSUB__(v14, v17))
          {
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
            goto LABEL_73;
          }
          if (v18 < 129) {
            break;
          }
          unint64_t v15 = v17 + ((unint64_t)v18 >> 1);
          if (__OFADD__(v17, (unint64_t)v18 >> 1)) {
            goto LABEL_71;
          }
          uint64_t v16 = *(void *)(v13 + 8 * v15);
          if (v16 == v8) {
            goto LABEL_35;
          }
        }
        unint64_t v15 = v17;
        if (v17 < v14) {
          goto LABEL_18;
        }
      }
    }
LABEL_35:
    if (v15 == v14)
    {
LABEL_36:
      if (v11 != 0.0)
      {
        if (*(void *)(v32.i64[0] + 16) < v14) {
          goto LABEL_79;
        }
        if (v14 < 0) {
          goto LABEL_80;
        }
        sub_1D169D6D0(v14, v14, *(double *)(v10 + 8 * v9));
        if (*(void *)(v32.i64[1] + 16) < (unint64_t)v14) {
          goto LABEL_81;
        }
LABEL_40:
        sub_1D169D3F8(v14, v14, v8);
        uint64_t v21 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
      goto LABEL_55;
    }
    BOOL v22 = (void *)v32.i64[0];
    if (v11 == 0.0)
    {
      if ((v15 & 0x8000000000000000) != 0) {
        goto LABEL_75;
      }
      if (v15 >= *(void *)(v32.i64[0] + 16)) {
        goto LABEL_76;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v22 = sub_1D1667604(v32.i64[0]);
      }
      unint64_t v23 = v22[2];
      if (v15 >= v23) {
        goto LABEL_77;
      }
      unint64_t v24 = v23 - 1;
      uint64_t v25 = v23 - 1 - v15;
      if (v25 < 0) {
        goto LABEL_87;
      }
      memmove(&v22[v15 + 4], &v22[v15 + 5], 8 * v25);
      _OWORD v22[2] = v24;
      v32.i64[0] = (uint64_t)v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = sub_1D1667618((void *)v32.i64[1]);
      }
      unint64_t v26 = v12[2];
      if (v15 >= v26) {
        goto LABEL_78;
      }
      unint64_t v27 = v26 - 1;
      uint64_t v28 = v26 - 1 - v15;
      if (v28 < 0) {
        goto LABEL_87;
      }
      memmove(&v12[v15 + 4], &v12[v15 + 5], 8 * v28);
      v12[2] = v27;
      v32.i64[1] = (uint64_t)v12;
LABEL_55:
      uint64_t v21 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        goto LABEL_74;
      }
      goto LABEL_56;
    }
    if ((v15 & 0x8000000000000000) != 0) {
      goto LABEL_82;
    }
    if (v15 >= *(void *)(v32.i64[0] + 16)) {
      goto LABEL_83;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      BOOL v22 = sub_1D1667604(v32.i64[0]);
    }
    if (v15 >= v22[2]) {
      goto LABEL_84;
    }
    *(double *)&v22[v15 + 4] = v11;
    v32.i64[0] = (uint64_t)v22;
    uint64_t v21 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_74;
    }
LABEL_56:
    ++v9;
    uint64_t v8 = v4;
    uint64_t v4 = v21;
    if (v9 == v7)
    {
      uint64_t result = swift_bridgeObjectRelease();
      int64x2_t v30 = v32;
      unint64_t v6 = a3;
      goto LABEL_69;
    }
  }
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t static SparseArrayProtocol<>.* infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>, float a4@<S0>)
{
  if (a4 == 0.0)
  {
    sub_1D16C8AC4(0, MEMORY[0x1E4FBC860], &v13);
    uint64_t result = v13.i64[1];
    uint64_t v6 = v13.i64[0];
LABEL_4:
    *a3 = v6;
    a3[1] = result;
    return result;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  *(float *)v13.i32 = a4;
  MEMORY[0x1F4188790](v10, v11);
  v12[2] = &v13;
  uint64_t v6 = sub_1D1665EAC((void (*)(int *__return_ptr, int *))sub_1D16CA130, (uint64_t)v12, v10);
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (*(void *)(v6 + 16) == *(void *)(result + 16)) {
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

{
  return static SparseArrayProtocol<>.* infix(_:_:)(a1, a2, a3, a4);
}

uint64_t static SparseArrayProtocol<>./ infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char **a3@<X8>, float a4@<S0>)
{
  if (a4 == INFINITY)
  {
    sub_1D16C8AC4(0, MEMORY[0x1E4FBC860], &v12);
    uint64_t result = v12.i64[1];
    uint64_t v7 = (char *)v12.i64[0];
LABEL_6:
    *a3 = v7;
    a3[1] = (char *)result;
    return result;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  vDSP_Length v11 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  uint64_t v7 = (char *)v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = sub_1D166762C(v10);
  }
  float v13 = a4;
  swift_bridgeObjectRetain();
  vDSP_vsdiv((const float *)(v10 + 32), 1, &v13, (float *)v7 + 8, 1, v11);
  swift_bridgeObjectRelease_n();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (*((void *)v7 + 2) == *(void *)(result + 16)) {
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t static SparseArrayProtocol<>..** infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char **a3@<X8>, float a4@<S0>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  if (*(void *)(v9 + 16) >> 31)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (char *)v9;
    int v12 = *(void *)(v9 + 16);
    float v11 = a4;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = sub_1D166762C((uint64_t)v4);
LABEL_3:
  vvpowsf((float *)v4 + 8, &v11, (const float *)v4 + 8, &v12);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (*((void *)v4 + 2) != *(void *)(result + 16)) {
    __break(1u);
  }
  *a3 = v4;
  a3[1] = (char *)result;
  return result;
}

float static SparseArrayProtocol<>.* infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v7[2] = a3;
  void v7[3] = a4;
  void v7[4] = a5;
  v7[5] = a6;
  v7[6] = a2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)(_OWORD *), void *, void, uint64_t))(a5 + 24))(&v8, sub_1D16CA150, v7, MEMORY[0x1E4FBB470], a3);
  return *(float *)&v8;
}

void sub_1D16C9718(uint64_t a1@<X0>, uint64_t a2@<X1>, float *a3@<X8>)
{
  int64_t v5 = *(void *)(a2 + 8) - *(void *)a2;
  if (v5 < 0 || (int64_t v6 = *(void *)(a1 + 8) - *(void *)a1, v6 < 0))
  {
    sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    *a3 = sparse_inner_product_sparse_float(v5, v6, *(const float **)(a2 + 16), *(const sparse_index **)(a2 + 48), *(const float **)(a1 + 16), *(const sparse_index **)(a1 + 48));
  }
}

float static SparseArrayProtocol<>.* infix(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v6[2] = a3;
  void v6[3] = a4;
  v6[4] = v4;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *(*)@<X0>(uint64_t *@<X0>, float *@<X8>), void *, void, uint64_t))(a4 + 24))(&v7, sub_1D16CA1C8, v6, MEMORY[0x1E4FBB470], a3);
  return *(float *)&v7;
}

uint64_t static SparseArrayProtocol<>.* infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1D16C9F64(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)sub_1D16CA2C4, MEMORY[0x1E4FBB470], (uint64_t)&protocol witness table for Float);
}

{
  return sub_1D16C9F64(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)sub_1D16CA484, MEMORY[0x1E4FBB3D0], (uint64_t)&protocol witness table for Double);
}

float sub_1D16C9894@<S0>(uint64_t a1@<X1>, uint64_t a2@<X7>, _DWORD *a3@<X8>, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = a2;
  uint64_t v12 = a4;
  uint64_t v13 = a1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)(_OWORD *), unsigned char *, void, uint64_t, uint64_t))(a2 + 24))(&v14, sub_1D16CA150, v8, MEMORY[0x1E4FBB470], AssociatedTypeWitness, a2);
  float result = *(float *)&v14;
  *a3 = v14;
  return result;
}

uint64_t static SparseArrayProtocol<>.* infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>, double a4@<D0>)
{
  if (a4 == 0.0)
  {
    sub_1D16C8ED8(0, MEMORY[0x1E4FBC860], &v13);
    uint64_t result = v13.i64[1];
    uint64_t v6 = v13.i64[0];
LABEL_4:
    *a3 = v6;
    a3[1] = result;
    return result;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  *(double *)v13.i64 = a4;
  MEMORY[0x1F4188790](v10, v11);
  v12[2] = &v13;
  uint64_t v6 = sub_1D1666360((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1D16CA2F8, (uint64_t)v12, v10);
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (*(void *)(v6 + 16) == *(void *)(result + 16)) {
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

{
  return static SparseArrayProtocol<>.* infix(_:_:)(a1, a2, a3, a4);
}

uint64_t static SparseArrayProtocol<>./ infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, double **a3@<X8>, double a4@<D0>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a4 == INFINITY)
  {
    sub_1D16C8ED8(0, MEMORY[0x1E4FBC860], &__B);
    uint64_t result = __B.i64[1];
    uint64_t v7 = (double *)__B.i64[0];
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    vDSP_Length v11 = *(void *)(v10 + 16);
    swift_bridgeObjectRetain();
    uint64_t v7 = (double *)v10;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v7 = (double *)sub_1D1667604((void *)v10);
    }
    *(double *)__B.i64 = a4;
    swift_bridgeObjectRetain();
    vDSP_vsdivD((const double *)(v10 + 32), 1, (const double *)__B.i64, v7 + 4, 1, v11);
    swift_bridgeObjectRelease_n();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
    if (*((void *)v7 + 2) != *(void *)(result + 16)) {
      __break(1u);
    }
  }
  *a3 = v7;
  a3[1] = (double *)result;
  return result;
}

uint64_t static SparseArrayProtocol<>..** infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, double **a3@<X8>, double a4@<D0>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  if (*(void *)(v9 + 16) >> 31)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (double *)v9;
    int v12 = *(void *)(v9 + 16);
    double v11 = a4;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = (double *)sub_1D1667604(v4);
LABEL_3:
  vvpows(v4 + 4, &v11, v4 + 4, &v12);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (*((void *)v4 + 2) != *(void *)(result + 16)) {
    __break(1u);
  }
  *a3 = v4;
  a3[1] = (double *)result;
  return result;
}

double static SparseArrayProtocol<>.* infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v7[2] = a3;
  void v7[3] = a4;
  void v7[4] = a5;
  v7[5] = a6;
  v7[6] = a2;
  (*(void (**)(double *__return_ptr, uint64_t (*)(_OWORD *), void *, void, uint64_t))(a5 + 24))(&v8, sub_1D16CA310, v7, MEMORY[0x1E4FBB3D0], a3);
  return v8;
}

void sub_1D16C9DE8(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int64_t v5 = *(void *)(a2 + 8) - *(void *)a2;
  if (v5 < 0 || (int64_t v6 = *(void *)(a1 + 8) - *(void *)a1, v6 < 0))
  {
    sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    *a3 = sparse_inner_product_sparse_double(v5, v6, *(const double **)(a2 + 16), *(const sparse_index **)(a2 + 48), *(const double **)(a1 + 16), *(const sparse_index **)(a1 + 48));
  }
}

double static SparseArrayProtocol<>.* infix(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v6[2] = a3;
  void v6[3] = a4;
  v6[4] = v4;
  (*(void (**)(double *__return_ptr, uint64_t *(*)@<X0>(uint64_t *@<X0>, double *@<X8>), void *, void, uint64_t))(a4 + 24))(&v7, sub_1D16CA388, v6, MEMORY[0x1E4FBB3D0], a3);
  return v7;
}

uint64_t sub_1D16C9F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  uint64_t v19 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return SparseArrayProtocol.sparseKroneckerMap<A, B>(with:combine:)(a2, a9, (uint64_t)v13, v14, v15, a10, v16, v17, a11);
}

double sub_1D16CA02C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X7>, double *a3@<X8>, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = a2;
  uint64_t v12 = a4;
  uint64_t v13 = a1;
  (*(void (**)(double *__return_ptr, uint64_t (*)(_OWORD *), unsigned char *, void, uint64_t, uint64_t))(a2 + 24))(&v14, sub_1D16CA310, v8, MEMORY[0x1E4FBB3D0], AssociatedTypeWitness, a2);
  double result = v14;
  *a3 = v14;
  return result;
}

float sub_1D16CA130@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  return sub_1D1667CC0(a1, *(float **)(v2 + 16), a2);
}

uint64_t sub_1D16CA150(_OWORD *a1)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 40);
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a1[3];
  void v8[2] = a1[2];
  int64_t v8[3] = v5;
  long long v7[2] = v8;
  return (*(uint64_t (**)(void (*)(uint64_t@<X0>, float *@<X8>), void *, void, uint64_t))(v3 + 24))(sub_1D16CA4D4, v7, MEMORY[0x1E4FBB470], v2);
}

uint64_t *sub_1D16CA1C8@<X0>(uint64_t *result@<X0>, float *a2@<X8>)
{
  uint64_t v3 = result[4];
  uint64_t v4 = result[5];
  float v5 = 0.0;
  if (v3 != v4)
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    if (*result != v7)
    {
      uint64_t v8 = result[2];
      uint64_t v9 = result[6];
      uint64_t v10 = *(void *)(v2 + 32) + 32;
      unint64_t v11 = v7 + ~v6;
      if (v11 >= v4 + ~v3) {
        unint64_t v11 = v4 + ~v3;
      }
      unint64_t v12 = v11 + 1;
      if (v11 + 1 >= 2)
      {
        uint64_t v13 = v6 + (v12 & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v14 = v3 + (v12 & 0xFFFFFFFFFFFFFFFELL);
        double result = (uint64_t *)(v9 + 8 * v3 + 8);
        uint64_t v15 = (float *)(v8 + 4 * v6 + 4);
        unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          float v5 = (float)(v5 + (float)(*(v15 - 1) * *(float *)(v10 + 4 * *(result - 1))))
             + (float)(*v15 * *(float *)(v10 + 4 * *result));
          result += 2;
          v15 += 2;
          v16 -= 2;
        }
        while (v16);
        if (v12 == (v12 & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v13 = *result;
        uint64_t v14 = result[4];
      }
      uint64_t v17 = ~v13 + v7;
      uint64_t v18 = (_DWORD *)(v8 + 4 * v13);
      uint64_t v19 = (uint64_t *)(v9 + 8 * v14);
      uint64_t v20 = ~v14 + v4;
      do
      {
        uint64_t v22 = *v19++;
        uint64_t v21 = v22;
        LODWORD(v22) = *v18++;
        float v5 = v5 + (float)(*(float *)&v22 * *(float *)(v10 + 4 * v21));
        if (!v20) {
          break;
        }
        uint64_t v23 = v17--;
        --v20;
      }
      while (v23);
    }
  }
LABEL_13:
  *a2 = v5;
  return result;
}

float sub_1D16CA2C4@<S0>(uint64_t a1@<X1>, _DWORD *a2@<X8>)
{
  return sub_1D16C9894(a1, *(void *)(v2 + 48), a2, *(void *)(v2 + 56));
}

double sub_1D16CA2F8@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 * **(double **)(v2 + 16);
  *a2 = result;
  return result;
}

uint64_t sub_1D16CA310(_OWORD *a1)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 40);
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a1[3];
  void v8[2] = a1[2];
  int64_t v8[3] = v5;
  long long v7[2] = v8;
  return (*(uint64_t (**)(void (*)(uint64_t@<X0>, double *@<X8>), void *, void, uint64_t))(v3 + 24))(sub_1D16CA4B8, v7, MEMORY[0x1E4FBB3D0], v2);
}

uint64_t *sub_1D16CA388@<X0>(uint64_t *result@<X0>, double *a2@<X8>)
{
  uint64_t v3 = result[4];
  uint64_t v4 = result[5];
  double v5 = 0.0;
  if (v3 != v4)
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    if (*result != v7)
    {
      uint64_t v8 = result[2];
      uint64_t v9 = result[6];
      uint64_t v10 = *(void *)(v2 + 32) + 32;
      unint64_t v11 = v7 + ~v6;
      if (v11 >= v4 + ~v3) {
        unint64_t v11 = v4 + ~v3;
      }
      unint64_t v12 = v11 + 1;
      if (v11 + 1 >= 2)
      {
        uint64_t v13 = v6 + (v12 & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v14 = v3 + (v12 & 0xFFFFFFFFFFFFFFFELL);
        double result = (uint64_t *)(v9 + 8 * v3 + 8);
        uint64_t v15 = (double *)(v8 + 8 * v6 + 8);
        unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          double v5 = v5 + *(v15 - 1) * *(double *)(v10 + 8 * *(result - 1)) + *v15 * *(double *)(v10 + 8 * *result);
          result += 2;
          v15 += 2;
          v16 -= 2;
        }
        while (v16);
        if (v12 == (v12 & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v13 = *result;
        uint64_t v14 = result[4];
      }
      uint64_t v17 = ~v13 + v7;
      uint64_t v18 = (double *)(v8 + 8 * v13);
      uint64_t v19 = (uint64_t *)(v9 + 8 * v14);
      uint64_t v20 = ~v14 + v4;
      do
      {
        uint64_t v22 = *v19++;
        uint64_t v21 = v22;
        double v23 = *v18++;
        double v5 = v5 + v23 * *(double *)(v10 + 8 * v21);
        if (!v20) {
          break;
        }
        uint64_t v24 = v17--;
        --v20;
      }
      while (v24);
    }
  }
LABEL_13:
  *a2 = v5;
  return result;
}

double sub_1D16CA484@<D0>(uint64_t a1@<X1>, double *a2@<X8>)
{
  return sub_1D16CA02C(a1, *(void *)(v2 + 48), a2, *(void *)(v2 + 56));
}

void sub_1D16CA4B8(uint64_t a1@<X0>, double *a2@<X8>)
{
  sub_1D16C9DE8(a1, *(void *)(v2 + 16), a2);
}

void sub_1D16CA4D4(uint64_t a1@<X0>, float *a2@<X8>)
{
  sub_1D16C9718(a1, *(void *)(v2 + 16), a2);
}

uint64_t ConcreteTypedProperty.key.getter()
{
  uint64_t v0 = sub_1D16CA744();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t ConcreteTypedProperty.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_1D16CA530()
{
  uint64_t v0 = sub_1D16CA744();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t ConcreteElementedTypedProperty.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void sub_1D16CA570(void *a1@<X0>, uint64_t a2@<X8>)
{
  switch((unint64_t)objc_msgSend(a1, sel_dataType))
  {
    case 0uLL:
      self;
      id v3 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_value);
      *(void *)(a2 + 24) = MEMORY[0x1E4FBB550];
      *(void *)(a2 + 32) = &protocol witness table for Int;
      *(void *)a2 = v3;
      break;
    case 1uLL:
      self;
      unint64_t v4 = (unint64_t)objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_value);
      *(void *)(a2 + 24) = MEMORY[0x1E4FBB550];
      *(void *)(a2 + 32) = &protocol witness table for Int;
      if ((v4 & 0x8000000000000000) != 0)
      {
        __break(1u);
        JUMPOUT(0x1D16CA734);
      }
      *(void *)a2 = v4;
      break;
    case 2uLL:
      self;
      objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_value);
      *(void *)(a2 + 24) = MEMORY[0x1E4FBB3D0];
      *(void *)(a2 + 32) = &protocol witness table for Double;
      *(void *)a2 = v5;
      break;
    case 3uLL:
      self;
      id v6 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_value);
      uint64_t v7 = sub_1D17BDFF0();
      uint64_t v9 = v8;

      *(void *)(a2 + 24) = MEMORY[0x1E4FBB1A0];
      *(void *)(a2 + 32) = &protocol witness table for String;
      *(void *)a2 = v7;
      *(void *)(a2 + 8) = v9;
      break;
    default:
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
  }
}

uint64_t sub_1D16CA744()
{
  return *(void *)v0;
}

uint64_t sub_1D16CA74C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1D16CA788(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t dispatch thunk of Property.key.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void *sub_1D16CA7A4(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D16CA7D4()
{
  return swift_bridgeObjectRelease();
}

void *sub_1D16CA7E0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for ConcreteTypedProperty()
{
  return __swift_instantiateGenericMetadata();
}

void *sub_1D16CA834(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D16CA878(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1D16CA8C0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for ConcreteElementedTypedProperty()
{
  return __swift_instantiateGenericMetadata();
}

double SeededRandomNumberGenerator.init()@<D0>(_OWORD *a1@<X8>)
{
  double result = -1.90237734e-283;
  *a1 = xmmword_1D17CB950;
  return result;
}

uint64_t SeededRandomNumberGenerator.init(seed:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = 0x685F98A2018FADE9 * result + 0x51EBDA032857265ALL;
  a2[1] = 0xDA3E39CB94B95BDBLL;
  return result;
}

uint64_t sub_1D16CA974()
{
  unint64_t v1 = *v0;
  *uint64_t v0 = (v0[1] | 1) + 0x5851F42D4C957F2DLL * *v0;
  return __ROR4__((v1 >> 45) ^ (v1 >> 27), v1 >> 59);
}

Swift::UInt64 __swiftcall SeededRandomNumberGenerator.next()()
{
  uint64_t v1 = v0[1] | 1;
  unint64_t v2 = v1 + 0x5851F42D4C957F2DLL * *v0;
  unsigned int v3 = __ROR4__((*v0 >> 45) ^ (*v0 >> 27), *v0 >> 59);
  *uint64_t v0 = v1 + 0x5851F42D4C957F2DLL * v2;
  return v3 | ((unint64_t)__ROR4__((v2 >> 45) ^ (v2 >> 27), v2 >> 59) << 32);
}

unint64_t sub_1D16CAA00()
{
  unsigned int v0 = sub_1D16CA974();
  return v0 | (unint64_t)(sub_1D16CA974() << 32);
}

ValueMetadata *type metadata accessor for SeededRandomNumberGenerator()
{
  return &type metadata for SeededRandomNumberGenerator;
}

__n128 UniqueSortedBuffer.Intersection.lhs.getter@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  long long v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 UniqueSortedBuffer.Intersection.rhs.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 32);
  long long v3 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

BOOL static UniqueSortedBuffer.Intersection.Index.< infix(_:_:)(void *a1, void *a2)
{
  return *a1 < *a2 || a1[1] < a2[1];
}

BOOL static UniqueSortedBuffer.Intersection.Index.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void UniqueSortedBuffer.Intersection.startIndex.getter(uint64_t a1)
{
  long long v2 = v1[1];
  long long v5 = *v1;
  long long v6 = v2;
  long long v3 = v1[3];
  long long v7 = v1[2];
  long long v8 = v3;
  v4[0] = -1;
  v4[1] = -1;
  UniqueSortedBuffer.Intersection.index(after:)((uint64_t)v4, a1);
}

void UniqueSortedBuffer.Intersection.index(after:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v42 = (char *)&v35 - v11;
  uint64_t v12 = *v5 + 1;
  if (__OFADD__(*v5, 1))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v13 = v5[1];
  uint64_t v14 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
LABEL_18:
    __break(1u);
    return;
  }
  uint64_t v40 = v10;
  uint64_t v41 = v9;
  __n128 v35 = v8;
  uint64_t v15 = *v2;
  uint64_t v16 = v2[1];
  uint64_t v43 = (char *)v2[2];
  uint64_t v44 = v7;
  uint64_t v17 = v2[4];
  uint64_t v47 = v2[3];
  uint64_t v19 = v2[5];
  uint64_t v18 = (char *)v2[6];
  uint64_t v20 = v2[7];
  uint64_t v39 = *(void *)(v6 + 24);
  uint64_t v21 = type metadata accessor for UniqueSortedBuffer();
  uint64_t v45 = v16;
  uint64_t v46 = v15;
  uint64_t v49 = v15;
  uint64_t v50 = v16;
  uint64_t v22 = v43;
  unint64_t v51 = v43;
  uint64_t v52 = v47;
  if (v12 != UniqueSortedBuffer.count.getter())
  {
    uint64_t v37 = v21;
    uint64_t v38 = (void (**)(uint64_t, uint64_t))(v44 + 8);
    uint64_t v36 = v17;
    unint64_t v26 = (void (**)(uint64_t, uint64_t))(v44 + 8);
    do
    {
      uint64_t v49 = v17;
      uint64_t v50 = v19;
      unint64_t v51 = v18;
      uint64_t v52 = v20;
      if (v14 == UniqueSortedBuffer.count.getter()) {
        break;
      }
      uint64_t v49 = v46;
      uint64_t v50 = v45;
      unint64_t v51 = v22;
      uint64_t v52 = v47;
      uint64_t v44 = v12;
      uint64_t v48 = v12;
      uint64_t v29 = v40;
      sub_1D17BDFD0();
      swift_getWitnessTable();
      sub_1D17BECE0();
      uint64_t v22 = v42;
      sub_1D17BECF0();
      uint64_t v49 = v17;
      uint64_t v50 = v19;
      unint64_t v51 = v18;
      uint64_t v52 = v20;
      uint64_t v48 = v14;
      uint64_t v30 = v41;
      sub_1D17BECF0();
      if (sub_1D17BDFA0()) {
        goto LABEL_15;
      }
      char v31 = sub_1D17BDF40();
      int64x2_t v32 = v22;
      uint64_t v33 = *v26;
      (*v26)(v30, v29);
      v33((uint64_t)v32, v29);
      if (v31)
      {
        uint64_t v22 = v43;
        uint64_t v12 = v44 + 1;
        uint64_t v29 = v37;
        if (__OFADD__(v44, 1))
        {
          __break(1u);
LABEL_15:
          uint64_t v34 = *v38;
          (*v38)(v30, v29);
          v34((uint64_t)v22, v29);
          uint64_t v23 = v44;
          uint64_t v24 = v14;
          goto LABEL_5;
        }
      }
      else
      {
        BOOL v27 = __OFADD__(v14++, 1);
        uint64_t v22 = v43;
        uint64_t v12 = v44;
        if (v27)
        {
          __break(1u);
          goto LABEL_17;
        }
      }
      uint64_t v49 = v46;
      uint64_t v50 = v45;
      unint64_t v51 = v22;
      uint64_t v52 = v47;
      uint64_t v28 = UniqueSortedBuffer.count.getter();
      uint64_t v17 = v36;
    }
    while (v12 != v28);
  }
  uint64_t v49 = v46;
  uint64_t v50 = v45;
  unint64_t v51 = v22;
  uint64_t v52 = v47;
  uint64_t v23 = UniqueSortedBuffer.count.getter();
  uint64_t v49 = v17;
  uint64_t v50 = v19;
  unint64_t v51 = v18;
  uint64_t v52 = v20;
  uint64_t v24 = UniqueSortedBuffer.count.getter();
LABEL_5:
  uint64_t v25 = v35;
  uint64_t *v35 = v23;
  v25[1] = v24;
}

uint64_t UniqueSortedBuffer.Intersection.endIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for UniqueSortedBuffer();
  uint64_t v2 = UniqueSortedBuffer.count.getter();
  uint64_t result = UniqueSortedBuffer.count.getter();
  *a1 = v2;
  a1[1] = result;
  return result;
}

uint64_t UniqueSortedBuffer.Intersection.subscript.getter()
{
  return sub_1D17BECF0();
}

uint64_t sub_1D16CAF48()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D16CAF64()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D16CAF80()
{
  return swift_getWitnessTable();
}

void (*sub_1D16CAFA4(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1D16CB014(v6, a2, a3);
  return sub_1D167B268;
}

void (*sub_1D16CB014(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v3 = *(void *)(a3 + 16);
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  a1[1] = v4;
  a1[2] = malloc(*(void *)(v4 + 64));
  UniqueSortedBuffer.Intersection.subscript.getter();
  return sub_1D1657898;
}

double sub_1D16CB0D0(_OWORD *a1, uint64_t a2)
{
  UniqueSortedBuffer.Intersection.index(after:)((uint64_t)a1, a2);
  double result = *(double *)&v4;
  *a1 = v4;
  return result;
}

__n128 sub_1D16CB108@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v4 = *v2;
  unint64_t v5 = v2[1];
  unint64_t v6 = v2[2];
  unint64_t v7 = v2[3];
  unint64_t v8 = v2[4];
  unint64_t v9 = v2[5];
  unint64_t v10 = v2[6];
  unint64_t v11 = v2[7];
  UniqueSortedBuffer.Intersection.startIndex.getter(a1);
  __n128 result = v13;
  a2->n128_u64[0] = v4;
  a2->n128_u64[1] = v5;
  a2[1].n128_u64[0] = v6;
  a2[1].n128_u64[1] = v7;
  a2[2].n128_u64[0] = v8;
  a2[2].n128_u64[1] = v9;
  a2[3].n128_u64[0] = v10;
  a2[3].n128_u64[1] = v11;
  a2[4] = v13;
  return result;
}

uint64_t sub_1D16CB194(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t sub_1D16CB1E8()
{
  return sub_1D17BE440();
}

uint64_t type metadata accessor for UniqueSortedBuffer.Intersection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for UniqueSortedBuffer.Intersection.Index()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **sub_1D16CB27C()
{
  return &protocol witness table for AnyNode;
}

ValueMetadata *type metadata accessor for AnyEdge()
{
  return &type metadata for AnyEdge;
}

uint64_t ElementCollection.valuesOf<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getTupleTypeMetadata2();
  uint64_t v11 = sub_1D17BDE10();
  long long v10[2] = a2;
  void v10[3] = a3;
  void v10[4] = a4;
  v10[5] = &v11;
  (*(void (**)(uint64_t, uint64_t (*)(void *, uint64_t, uint64_t), void *, uint64_t, uint64_t, uint64_t))(a4 + 32))(a1, sub_1D16CB4AC, v10, a3, a2, a4);
  swift_bridgeObjectRetain();
  swift_getTupleTypeMetadata2();
  uint64_t v8 = sub_1D17BE9D0();
  swift_bridgeObjectRelease_n();
  return v8;
}

uint64_t sub_1D16CB3A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  double v11 = MEMORY[0x1F4188790](TupleTypeMetadata2, v10);
  uint64_t v14 = (char *)v16 + *(int *)(v13 + 48) - v12;
  *(void *)((char *)v16 - v12) = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a6 - 8) + 16))(v14, a2, a6, v11);
  sub_1D17BE260();
  return sub_1D17BE220();
}

uint64_t sub_1D16CB4AC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1D16CB3A4(a1, a2, a3, v3[5], v3[2], v3[3]);
}

id ElementCollection.startIndex.getter(uint64_t a1, uint64_t a2)
{
  return sub_1D16CB4E4(a1, a2, (SEL *)&selRef_startIndex);
}

id ElementCollection.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return sub_1D16CB4E4(a1, a2, (SEL *)&selRef_endIndex);
}

id sub_1D16CB4E4(uint64_t a1, uint64_t a2, SEL *a3)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 16))(&v6);
  id v4 = [*(id *)(v6 + 16) *a3];
  swift_release();
  return v4;
}

KGElementIdentifierSetIndex __swiftcall ElementCollection.index(after:)(KGElementIdentifierSetIndex after)
{
  int64_t var1 = after.var1;
  unint64_t var0 = after.var0;
  (*(void (**)(uint64_t *__return_ptr))(v1 + 16))(&v10);
  id v4 = objc_msgSend(*(id *)(v10 + 16), sel_indexAfterIndex_, var0, var1);
  int64_t v6 = v5;
  swift_release();
  unint64_t v7 = (unint64_t)v4;
  int64_t v8 = v6;
  result.int64_t var1 = v8;
  result.unint64_t var0 = v7;
  return result;
}

id ElementCollection.count.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 16))(&v4);
  id v2 = objc_msgSend(*(id *)(v4 + 16), sel_count);
  swift_release();
  return v2;
}

id ElementCollection.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 16))(&v4);
  id v2 = objc_msgSend(*(id *)(v4 + 16), sel_isEmpty);
  swift_release();
  return v2;
}

uint64_t ElementCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v7, a2, a3);
  uint64_t result = swift_release();
  *a4 = a1;
  return result;
}

uint64_t dispatch thunk of ElementCollection.identifiers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ElementCollection.graph.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ElementCollection.enumerateValuesOf<A>(_:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

id sub_1D16CB74C(void (*a1)(uint64_t *, char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v32, a3, a4);
  char v31 = 0;
  uint64_t v6 = v32;
  uint64_t v7 = &selRef_writeDataToURL_error_;
  uint64_t v26 = MEMORY[0x1E4FBC840] + 8;
  while (1)
  {
    if (objc_msgSend(*(id *)(v6 + 16), sel_isEmpty, v26)) {
      return (id)swift_release();
    }
    uint64_t v28 = v5;
    int64_t v8 = *(void **)(v6 + 16);
    swift_retain();
    id v9 = [v8 v7[351]];
    uint64_t v11 = v10;
    id v12 = objc_msgSend(*(id *)(v6 + 16), sel_endIndex);
    uint64_t v13 = 256;
    while (v9 != v12)
    {
      id v9 = objc_msgSend(*(id *)(v6 + 16), sel_indexAfterIndex_, v9, v11);
      uint64_t v11 = v14;
      if (!--v13) {
        goto LABEL_8;
      }
    }
    id v9 = objc_msgSend(*(id *)(v6 + 16), sel_endIndex);
LABEL_8:
    id result = objc_msgSend(*(id *)(v6 + 16), sel_startIndex);
    if (v9 < result) {
      goto LABEL_25;
    }
    id v17 = result;
    uint64_t v18 = v16;
    id v19 = objc_msgSend(*(id *)(v6 + 16), sel_startIndex);
    id result = objc_msgSend(*(id *)(v6 + 16), sel_endIndex);
    if (result < v19) {
      goto LABEL_26;
    }
    if (v17 < v19) {
      goto LABEL_27;
    }
    if (result < v9) {
      goto LABEL_28;
    }
    id result = objc_msgSend(objc_allocWithZone((Class)KGMutableElementIdentifierSet), sel_init);
    uint64_t v20 = result;
    if (v17 != v9) {
      break;
    }
LABEL_17:
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD274F0);
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v20;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      id v25 = *(id *)(v6 + 16);
      objc_msgSend(v25, sel_mutableCopy);
      sub_1D17BE690();
      swift_unknownObjectRelease();
      sub_1D1685604();
      swift_dynamicCast();

      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v29;
      uint64_t v32 = v6;
      swift_release();
    }
    uint64_t v5 = v28;
    objc_msgSend(*(id *)(v6 + 16), sel_subtractIdentifierSet_, *(void *)(v24 + 16));
    v30[0] = v24;
    a1(v30, &v31);
    if (v28)
    {
      swift_release();
      return (id)swift_release();
    }
    swift_release();
    uint64_t v7 = &selRef_writeDataToURL_error_;
    if (v31) {
      return (id)swift_release();
    }
  }
  id v21 = v17;
  while (v21 >= v17 && v21 < v9)
  {
    id v22 = objc_msgSend(*(id *)(v6 + 16), sel_indexAfterIndex_, v21, v18);
    uint64_t v18 = v23;
    id result = objc_msgSend(v20, sel_addIdentifier_, v21);
    id v21 = v22;
    if (v22 == v9) {
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t (*sub_1D16CBA60(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(void)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(&v8, a4, a5);
  swift_release();
  *a1 = a2;
  return nullsub_1;
}

uint64_t MASparseSquareMatrixRepresentation.matrix.getter()
{
  return swift_retain();
}

uint64_t MASparseSquareMatrixRepresentation.nodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MASparseSquareMatrixRepresentation.__allocating_init(matrix:nodes:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t MASparseSquareMatrixRepresentation.init(matrix:nodes:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

void sub_1D16CBB38(unint64_t row)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 + 16);
  unint64_t v5 = *(void *)(v4 + 24);
  unint64_t v6 = *(void *)(v4 + 32);
  if (!is_mul_ok(v5, v6))
  {
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v1 = row;
  if ((uint64_t)row < 1 || v5 * v6 >= row)
  {
    MASparseMatrix.subscript.getter(row, row);
    uint64_t v7 = *(void *)(v3 + 24);
    if ((v7 & 0xC000000000000001) == 0)
    {
      if ((v1 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) > v1)
      {
        id v8 = *(id *)(v7 + 8 * v1 + 32);
        return;
      }
      __break(1u);
      goto LABEL_12;
    }
LABEL_9:
    MEMORY[0x1D25F9260](v1);
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t sub_1D16CBBF0(uint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a1, v3);
  sparse_index v5 = v4;
  char v7 = v6;
  swift_bridgeObjectRelease();
  if (v7) {
    return 0;
  }
  else {
    return MASparseMatrix.subscript.getter(v5, v5);
  }
}

void sub_1D16CBC70(unint64_t row, unint64_t column_start)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v2 + 16);
  if ((uint64_t)row >= 1 && *(void *)(v6 + 24) < row) {
    goto LABEL_14;
  }
  if ((uint64_t)column_start >= 1 && *(void *)(v6 + 32) < column_start) {
    goto LABEL_15;
  }
  MASparseMatrix.subscript.getter(row, column_start);
  uint64_t v7 = *(void *)(v3 + 24);
  if ((v7 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1D25F9260](row, *(void *)(v3 + 24));
    MEMORY[0x1D25F9260](column_start, v7);
    return;
  }
  if ((row & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8 > row)
    {
      if (v8 > column_start)
      {
        id v9 = *(void **)(v7 + 32 + 8 * column_start);
        *(id *)(v7 + 32 + 8 * row);
        id v10 = v9;
        return;
      }
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
}

uint64_t sub_1D16CBD64(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a1, v5);
  sparse_index v7 = v6;
  char v9 = v8;
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a2, v5);
  sparse_index v11 = v10;
  char v13 = v12;
  swift_bridgeObjectRelease();
  if (v13) {
    return 0;
  }
  else {
    return MASparseMatrix.subscript.getter(v7, v11);
  }
}

uint64_t MASparseSquareMatrixRepresentation.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MASparseSquareMatrixRepresentation.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 32, 7);
}

uint64_t MASparseAdjacencyMatrixRepresentation.__allocating_init(matrix:nodes:directed:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 32) = a3;
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t MASparseAdjacencyMatrixRepresentation.init(matrix:nodes:directed:)(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 32) = a3;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  return v3;
}

void MASparseAdjacencyMatrixRepresentation.__allocating_init(matrix:nodes:)()
{
}

void MASparseAdjacencyMatrixRepresentation.init(matrix:nodes:)()
{
}

uint64_t MASparseAdjacencyMatrixRepresentation.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MASparseAdjacencyMatrixRepresentation.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 33, 7);
}

uint64_t type metadata accessor for MASparseSquareMatrixRepresentation()
{
  return self;
}

uint64_t method lookup function for MASparseSquareMatrixRepresentation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MASparseSquareMatrixRepresentation);
}

uint64_t dispatch thunk of MASparseSquareMatrixRepresentation.__allocating_init(matrix:nodes:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of MASparseSquareMatrixRepresentation.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t type metadata accessor for MASparseAdjacencyMatrixRepresentation()
{
  return self;
}

uint64_t method lookup function for MASparseAdjacencyMatrixRepresentation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MASparseAdjacencyMatrixRepresentation);
}

uint64_t dispatch thunk of MASparseAdjacencyMatrixRepresentation.__allocating_init(matrix:nodes:directed:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t NodeCollection.init(with:in:)@<X0>(void *a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  *a3 = *a1;
  return sub_1D16AA89C(a2, (uint64_t)(a3 + 1));
}

uint64_t NodeCollection.identifiers.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t NodeCollection.graph.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D167C788(v1 + 8, a1);
}

uint64_t NodeCollection.valuesOf<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  void v10[3] = type metadata accessor for ConcreteElementedTypedProperty();
  void v10[4] = swift_getWitnessTable();
  v10[0] = v6;
  v10[1] = v5;
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = ElementCollection.valuesOf<A>(_:)((uint64_t)v10, a2, a3, WitnessTable);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
  return v8;
}

uint64_t NodeCollection.enumerateValuesOf<A>(_:using:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v12[3] = type metadata accessor for ConcreteElementedTypedProperty();
  void v12[4] = swift_getWitnessTable();
  v12[0] = v10;
  v12[1] = v9;
  swift_bridgeObjectRetain();
  NodeCollection.enumerateValuesOf<A>(_:using:)((uint64_t)v12, a2, a3, a4, a5);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
}

id NodeCollection.enumerateValuesOf<A>(_:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v8[2] = *(void *)(a4 + 16);
  int64_t v8[3] = a5;
  v8[6] = a1;
  v8[7] = a2;
  v8[8] = a3;
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_1D16CB74C((void (*)(uint64_t *, char *))sub_1D16CC5E4, (uint64_t)v8, a4, WitnessTable);
}

uint64_t sub_1D16CC348(uint64_t *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = *a1;
  id v37 = 0;
  uint64_t v13 = a3[4];
  uint64_t v14 = a3[5];
  __swift_project_boxed_opaque_existential_1(a3 + 1, v13);
  uint64_t v15 = a4[3];
  uint64_t v16 = a4[4];
  id v17 = __swift_project_boxed_opaque_existential_1(a4, v15);
  uint64_t v33 = (void *)v15;
  uint64_t v34 = *(uint64_t (**)())(v16 + 8);
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(aBlock);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(boxed_opaque_existential_0Tm, v17, v15);
  uint64_t v36 = v12;
  id v19 = sub_1D16B20B8(aBlock, &v36, v13, v14);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
  if (v9)
  {
    id v20 = 0;
    id v21 = 0;
LABEL_6:

    return sub_1D165B3A4((uint64_t)v21);
  }
  id v22 = (void *)swift_allocObject();
  _OWORD v22[2] = a7;
  void v22[3] = a8;
  v22[4] = a9;
  v22[5] = a5;
  v22[6] = a6;
  v22[7] = a2;
  v22[8] = &v37;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_1D16CD654;
  *(void *)(v23 + 24) = v22;
  uint64_t v34 = sub_1D16B2508;
  uint64_t v35 = v23;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1D16B1C50;
  uint64_t v33 = &block_descriptor_0;
  uint64_t v24 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v19, sel_enumerateUsingBlock_, v24);

  _Block_release(v24);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    if (v37)
    {
      id v27 = v37;
      swift_willThrow();
      id v20 = v37;
      id v21 = sub_1D16CD654;
      goto LABEL_6;
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1D16CC5E4(uint64_t *a1, uint64_t a2)
{
  return sub_1D16CC348(a1, a2, *(void **)(v2 + 40), *(void **)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_1D16CC618(uint64_t a1, void *a2, unsigned char *a3, void (*a4)(void *, char *, unsigned char *), uint64_t a5, unsigned char *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v27 = a7;
  uint64_t v28 = a4;
  uint64_t v26 = a3;
  uint64_t v12 = sub_1D17BE620();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = *(void *)(a9 - 8);
  MEMORY[0x1F4188790](v18, v19);
  id v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D16CA570(a2, (uint64_t)v29);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652CA0);
  char v22 = swift_dynamicCast();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if (v22)
  {
    v23(v16, 0, 1, a9);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v16, a9);
    v29[0] = a1;
    v28(v29, v21, a6);
    *uint64_t v26 = *a6;
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v21, a9);
  }
  else
  {
    v23(v16, 1, 1, a9);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
}

uint64_t NodeCollection.filtered(with:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = v2[4];
  uint64_t v6 = v2[5];
  __swift_project_boxed_opaque_existential_1(v2 + 1, v5);
  uint64_t v10 = *v2;
  AbstractGraph.nodeIdentifiers(matching:in:)(a1, (uint64_t)&v10, v5, v6, (uint64_t *)v9);
  uint64_t v7 = *(void *)&v9[0];
  sub_1D167C788((uint64_t)(v2 + 1), (uint64_t)v9);
  *a2 = v7;
  return sub_1D16AA89C(v9, (uint64_t)(a2 + 1));
}

uint64_t NodeCollection.related<A>(through:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  sub_1D16C6084(v2, v4, v5, v8);
  uint64_t v6 = type metadata accessor for NodeAdjacency();
  NodeAdjacency.targets.getter(a2);
  return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v6 - 8) + 8))(v8, v6);
}

uint64_t NodeCollection.adjacency<A>(through:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  return sub_1D16C6084(v2, v4, v5, a2);
}

id sub_1D16CCA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return NodeCollection.enumerateValuesOf<A>(_:using:)(a1, a2, a3, a5, a4);
}

uint64_t sub_1D16CCA84(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1D16CCAC0()
{
  return swift_getWitnessTable();
}

unint64_t sub_1D16CCAE0()
{
  unint64_t result = qword_1EA6524C8;
  if (!qword_1EA6524C8)
  {
    type metadata accessor for KGElementIdentifierSetIndex(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA6524C8);
  }
  return result;
}

uint64_t sub_1D16CCB38@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D16CCB68(a1, (uint64_t (*)(uint64_t, uint64_t))ElementCollection.startIndex.getter, a2);
}

uint64_t sub_1D16CCB50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D16CCB68(a1, (uint64_t (*)(uint64_t, uint64_t))ElementCollection.endIndex.getter, a2);
}

uint64_t sub_1D16CCB68@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X2>, uint64_t *a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a2(a1, WitnessTable);
  *a3 = result;
  a3[1] = v8;
  return result;
}

void (*sub_1D16CCBC8(void *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  uint64_t WitnessTable = swift_getWitnessTable();
  v6[4] = sub_1D16CBA60(v6, v8, v7, a3, WitnessTable);
  return sub_1D167B268;
}

id sub_1D16CCC64(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return ElementCollection.isEmpty.getter(a1, WitnessTable);
}

id sub_1D16CCCB8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return ElementCollection.count.getter(a1, WitnessTable);
}

uint64_t sub_1D16CCD0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D16CD1C8(a1, a2, a3, a4, MEMORY[0x1E4FBB6A0], MEMORY[0x1E4FBAFC8]);
}

uint64_t sub_1D16CCD4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D16CD1C8(a1, a2, a3, a4, MEMORY[0x1E4FBB010], MEMORY[0x1E4FBAFD8]);
}

unint64_t sub_1D16CCD8C@<X0>(unint64_t *a1@<X0>, KGElementIdentifierSetIndex *a2@<X8>)
{
  unint64_t v3 = *a1;
  int64_t v4 = a1[1];
  swift_getWitnessTable();
  v5.unint64_t var0 = v3;
  v5.int64_t var1 = v4;
  KGElementIdentifierSetIndex v7 = ElementCollection.index(after:)(v5);
  unint64_t result = v7.var0;
  *a2 = v7;
  return result;
}

unint64_t sub_1D16CCDF4(unint64_t *a1)
{
  unint64_t v2 = *a1;
  int64_t v3 = a1[1];
  swift_getWitnessTable();
  v4.unint64_t var0 = v2;
  v4.int64_t var1 = v3;
  KGElementIdentifierSetIndex v6 = ElementCollection.index(after:)(v4);
  unint64_t result = v6.var0;
  *(KGElementIdentifierSetIndex *)a1 = v6;
  return result;
}

uint64_t sub_1D16CCE5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  uint64_t WitnessTable = swift_getWitnessTable();
  id v7 = ElementCollection.startIndex.getter(a1, WitnessTable);
  uint64_t v9 = v8;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  *(void *)(a2 + 48) = v7;
  *(void *)(a2 + 56) = v9;
  return result;
}

uint64_t sub_1D16CCF3C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t sub_1D16CCF90()
{
  swift_getWitnessTable();
  return sub_1D17BE440();
}

uint64_t sub_1D16CCFE4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  swift_release();
  return __swift_destroy_boxed_opaque_existential_0(v1);
}

uint64_t sub_1D16CD020(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = a2 + 8;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = v4;
  KGElementIdentifierSetIndex v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_retain();
  v6(a1 + 8, v3, v5);
  return a1;
}

void *sub_1D16CD0A8(void *a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, v3);
  return a1;
}

uint64_t sub_1D16CD100(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t type metadata accessor for NodeCollection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D16CD170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D16CD1C8(a1, a2, a3, a4, MEMORY[0x1E4FBB6A0], MEMORY[0x1E4FBAFC8]);
}

uint64_t sub_1D16CD19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D16CD1C8(a1, a2, a3, a4, MEMORY[0x1E4FBB010], MEMORY[0x1E4FBAFD8]);
}

uint64_t sub_1D16CD1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v25 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v17, v18);
  uint64_t v20 = (char *)&v24 - v19;
  char v21 = sub_1D17BDF50();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v20, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v21 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v22 = v25(v20, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, AssociatedTypeWitness);
  if ((v22 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_1D16CD438(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = sub_1D17BE510();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (char *)v19 - v12;
  v19[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = sub_1D17BDF50();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14(v13, a1, v5);
  v14(v9, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v18(v9, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v13, v5);
    goto LABEL_5;
  }
  char v15 = sub_1D17BDF50();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v9, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v13, v5);
  if ((v15 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_1D16CD644()
{
  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_1D16CD654(uint64_t a1, void *a2, unsigned char *a3)
{
  return sub_1D16CC618(a1, a2, a3, *(void (**)(void *, char *, unsigned char *))(v3 + 40), *(void *)(v3 + 48), *(unsigned char **)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1D16CD688()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t MASquareMatrixRepresentation.dbscan(epsilon:minPoints:progressClosure:)(uint64_t *a1, uint64_t a2, void (*a3)(char *, double), uint64_t a4, double a5)
{
  unint64_t v6 = v5;
  unint64_t v8 = *(void *)(v5 + 40);
  unint64_t v9 = v8 >> 62;
  if (v8 >> 62) {
    goto LABEL_93;
  }
  unint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_retain_n();
  while (1)
  {
    uint64_t v71 = swift_allocObject();
    *(void *)(v71 + 16) = sub_1D1665B08(0, v10);
    char v75 = 0;
    unint64_t v63 = v8;
    if (v9) {
      break;
    }
    uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v12 = v11;
    if (!v11) {
      goto LABEL_28;
    }
LABEL_9:
    double v14 = 1.0 / (double)v12 * 0.9;
    uint64_t v15 = a4;
    a3(&v75, v14);
    if (v75) {
      goto LABEL_30;
    }
    uint64_t v16 = 0;
    uint64_t v66 = v8 & 0xFFFFFFFFFFFFFF8;
    uint64_t v17 = 1 - v11;
    uint64_t v18 = 4;
    while (1)
    {
      unint64_t v21 = v18 - 4;
      char v22 = *(void **)(v71 + 16);
      if ((unint64_t)(v18 - 4) >= v22[2]) {
        break;
      }
      if (!v22[v18])
      {
        uint64_t result = sub_1D16CDFC8(v18 - 4, (uint64_t *)v6, a5);
        uint64_t v23 = result;
        if (*(void *)(result + 16) >= a2)
        {
          if (__OFADD__(v16++, 1)) {
            goto LABEL_96;
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1D1667640(v22);
            char v22 = (void *)result;
          }
          if (v21 >= v22[2]) {
            goto LABEL_97;
          }
          v22[v18] = v16;
          unint64_t v8 = v71;
          *(void *)(v71 + 16) = v22;
          uint64_t v73 = MEMORY[0x1E4FBC870];
          sub_1D16917E8(v23);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD272F0);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1D17C91F0;
          *(void *)(inited + 32) = v21;
          uint64_t v26 = sub_1D167BFA4(inited);
          swift_setDeallocating();
          sub_1D16917E8(v26);
          uint64_t v27 = v73;
          swift_retain();
          sub_1D16CE300(v16, v27, v71, a2, (uint64_t *)v6, a5);
          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1D1667640(v22);
            char v22 = (void *)result;
          }
          if (v21 >= v22[2]) {
            goto LABEL_95;
          }
          v22[v18] = -1;
          *(void *)(v71 + 16) = v22;
        }
      }
      if (v17 + v18 == 4) {
        goto LABEL_29;
      }
      if (v9)
      {
        unint64_t v8 = v63;
        swift_bridgeObjectRetain();
        uint64_t v19 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v19 = *(void *)(v66 + 16);
      }
      double v20 = (double)(v18 - 2) / (double)v19 * 0.9;
      uint64_t v15 = a4;
      a3(&v75, v20);
      ++v18;
      if (v75) {
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    swift_retain_n();
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1D17BEAD0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v11 < 0)
  {
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    return result;
  }
  if (v11)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
LABEL_28:
  uint64_t v16 = 0;
LABEL_29:
  uint64_t v15 = a4;
  uint64_t result = ((uint64_t (*)(char *, double))a3)(&v75, 0.9);
  if (v75 == 1)
  {
LABEL_30:
    sub_1D1672594();
    swift_allocError();
    *uint64_t v28 = 0;
    swift_willThrow();
    swift_release();
    goto LABEL_31;
  }
  uint64_t v29 = MEMORY[0x1E4FBC870];
  uint64_t v73 = MEMORY[0x1E4FBC870];
  uint64_t v74 = 0;
  if (v16 < 0) {
    goto LABEL_98;
  }
  for (sparse_index i = (void *)MEMORY[0x1E4FBC860]; v16; --v16)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1D169D040(0, i[2] + 1, 1, i);
      sparse_index i = (void *)result;
    }
    unint64_t v32 = i[2];
    unint64_t v31 = i[3];
    if (v32 >= v31 >> 1)
    {
      uint64_t result = (uint64_t)sub_1D169D040((void *)(v31 > 1), v32 + 1, 1, i);
      sparse_index i = (void *)result;
    }
    i[2] = v32 + 1;
    uint64_t v33 = &i[2 * v32];
    v33[4] = v29;
    v33[5] = 0;
  }
  if (!v9)
  {
    unint64_t v8 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_43;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1D17BEAD0();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_99;
  }
LABEL_43:
  if (v8)
  {
    uint64_t v34 = *(void *)(v71 + 16);
    if (v8 - 1 < *(void *)(v34 + 16))
    {
      unint64_t v35 = 0;
      unint64_t v67 = v63 & 0xC000000000000001;
      a2 = v34 + 32;
      unint64_t v64 = v8;
      unint64_t v65 = v63 + 32;
      while (1)
      {
        uint64_t v38 = *(void *)(a2 + 8 * v35);
        unint64_t v9 = v38 - 1;
        if (v38 < 1)
        {
          if (v67)
          {
            id v43 = (id)MEMORY[0x1D25F9260](v35, v63);
          }
          else
          {
            if ((v35 & 0x8000000000000000) != 0) {
              goto LABEL_91;
            }
            if (v35 >= *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_92;
            }
            id v43 = *(id *)(v65 + 8 * v35);
          }
          uint64_t v40 = v43;
          uint64_t v44 = v73;
          if ((v73 & 0xC000000000000001) != 0)
          {
            id v37 = v43;
            char v45 = sub_1D17BE7B0();

            if (v45) {
              goto LABEL_47;
            }
          }
          else if (*(void *)(v73 + 16))
          {
            uint64_t v52 = sub_1D17BE5B0();
            unint64_t v6 = -1 << *(unsigned char *)(v44 + 32);
            unint64_t v53 = v52 & ~v6;
            if ((*(void *)(v44 + 56 + ((v53 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v53))
            {
              sub_1D1668090();
              id v54 = *(id *)(*(void *)(v44 + 48) + 8 * v53);
              char v55 = sub_1D17BE5C0();

              if (v55)
              {
LABEL_80:

                unint64_t v8 = v64;
                goto LABEL_48;
              }
              unint64_t v6 = ~v6;
              while (1)
              {
                unint64_t v53 = (v53 + 1) & v6;
                unint64_t v8 = v64;
                if (((*(void *)(v44 + 56 + ((v53 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v53) & 1) == 0) {
                  break;
                }
                id v56 = *(id *)(*(void *)(v44 + 48) + 8 * v53);
                char v57 = sub_1D17BE5C0();

                if (v57) {
                  goto LABEL_80;
                }
              }
            }
          }
        }
        else
        {
          if (v67)
          {
            id v39 = (id)MEMORY[0x1D25F9260](v35, v63);
          }
          else
          {
            if ((v35 & 0x8000000000000000) != 0) {
              goto LABEL_88;
            }
            if (v35 >= *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_89;
            }
            id v39 = *(id *)(v65 + 8 * v35);
          }
          uint64_t v40 = v39;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sparse_index i = sub_1D1667668(i);
          }
          if (v9 >= i[2]) {
            goto LABEL_90;
          }
          uint64_t v41 = i[2 * v9 + 4];
          if ((v41 & 0xC000000000000001) != 0)
          {
            id v37 = v40;
            char v42 = sub_1D17BE7B0();

            if (v42) {
              goto LABEL_47;
            }
          }
          else if (*(void *)(v41 + 16))
          {
            unint64_t v6 = sub_1D17BE5B0() & ~(-1 << *(unsigned char *)(v41 + 32));
            if ((*(void *)(v41 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
            {
              uint64_t v61 = -1 << *(unsigned char *)(v41 + 32);
              sub_1D1668090();
              id v46 = *(id *)(*(void *)(v41 + 48) + 8 * v6);
              char v47 = sub_1D17BE5C0();

              if (v47) {
                goto LABEL_80;
              }
              uint64_t v48 = ~v61;
              unint64_t v49 = v6 + 1;
              for (j = ~v61; ; uint64_t v48 = j)
              {
                unint64_t v6 = v49 & v48;
                unint64_t v8 = v64;
                if (((*(void *)(v41 + 56 + (((v49 & v48) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (v49 & v48)) & 1) == 0) {
                  break;
                }
                id v50 = *(id *)(*(void *)(v41 + 48) + 8 * v6);
                char v51 = sub_1D17BE5C0();

                if (v51) {
                  goto LABEL_80;
                }
                unint64_t v49 = v6 + 1;
              }
            }
          }
        }
        id v36 = v40;
        sub_1D1671FA0(&v72, v36);
        id v37 = v72;

LABEL_47:
LABEL_48:
        if (++v35 == v8) {
          goto LABEL_84;
        }
      }
    }
    goto LABEL_100;
  }
LABEL_84:
  char v75 = 0;
  a3(&v75, 1.0);
  if (v75 == 1)
  {
    uint64_t v15 = v74;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1D1672594();
    swift_allocError();
    *uint64_t v58 = 0;
    swift_willThrow();
    swift_release();
LABEL_31:
    swift_release_n();
  }
  else
  {
    uint64_t v15 = sub_1D167C0B0((uint64_t)i);
    swift_release_n();
    swift_bridgeObjectRelease();
    uint64_t v59 = v74;
    *a1 = v73;
    a1[1] = v59;
    swift_release();
  }
  return v15;
}

uint64_t sub_1D16CDF90()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D16CDFC8(uint64_t result, uint64_t *a2, double a3)
{
  long long v4 = a2;
  int64_t v5 = result;
  uint64_t v15 = MEMORY[0x1E4FBC870];
  unint64_t v6 = a2[5];
  if (v6 >> 62) {
    goto LABEL_24;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v7) {
      return MEMORY[0x1E4FBC870];
    }
    if (v4[2] < v5) {
      break;
    }
    uint64_t v8 = v4[3];
    int64_t v9 = v5 * v8;
    if ((unsigned __int128)(v5 * (__int128)v8) >> 64 != (v5 * v8) >> 63) {
      goto LABEL_27;
    }
    uint64_t v10 = v4[4];
    if ((v6 & 0xC000000000000001) == 0)
    {
      if (v5 < 0) {
        goto LABEL_28;
      }
      unint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v11 <= v5 || v7 - 1 >= v11) {
        goto LABEL_29;
      }
    }
    uint64_t v12 = 0;
    while (v8 >= v12)
    {
      if (v9 < 0) {
        goto LABEL_22;
      }
      if ((unint64_t)(v9 + v12) >= *(void *)(v10 + 16)) {
        goto LABEL_23;
      }
      double v13 = *(double *)(v10 + 8 * v8 * v5 + 32 + 8 * v12);
      if ((v6 & 0xC000000000000001) != 0)
      {
        long long v4 = (uint64_t *)MEMORY[0x1D25F9260](v5, v6);
        MEMORY[0x1D25F9260](v12, v6);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      if (v13 <= a3)
      {
        long long v4 = &v15;
        sub_1D16725E8(&v14, v12);
      }
      if (v7 == ++v12) {
        return v15;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1D17BEAD0();
    uint64_t result = swift_bridgeObjectRelease();
    if (v7 < 0)
    {
      __break(1u);
      break;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1D16CE18C(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    uint64_t result = sub_1D1674A78(*(void *)(*(void *)(v2 + 48) + 8 * v10));
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_23;
  }
LABEL_24:
  return swift_release();
}

uint64_t sub_1D16CE300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, double a6)
{
  uint64_t v28 = MEMORY[0x1E4FBC870];
  uint64_t v11 = a2 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(a2 + 56);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  swift_retain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_21;
    }
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_43;
    }
    if (v20 >= v15) {
      break;
    }
    unint64_t v21 = *(void *)(v11 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v15) {
        break;
      }
      unint64_t v21 = *(void *)(v11 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v15) {
          break;
        }
        unint64_t v21 = *(void *)(v11 + 8 * v17);
        if (!v21)
        {
          int64_t v22 = v20 + 3;
          if (v22 >= v15) {
            break;
          }
          unint64_t v21 = *(void *)(v11 + 8 * v22);
          if (!v21)
          {
            while (1)
            {
              int64_t v17 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                goto LABEL_46;
              }
              if (v17 >= v15) {
                goto LABEL_35;
              }
              unint64_t v21 = *(void *)(v11 + 8 * v17);
              ++v22;
              if (v21) {
                goto LABEL_20;
              }
            }
          }
          int64_t v17 = v22;
        }
      }
    }
LABEL_20:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_21:
    unint64_t v23 = *(void *)(*(void *)(a2 + 48) + 8 * v19);
    if ((v23 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    uint64_t v24 = *(void **)(a3 + 16);
    unint64_t v25 = v24[2];
    if (v23 >= v25) {
      goto LABEL_41;
    }
    if (v24[v23 + 4] == -1)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(a3 + 16) = v24;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1D1667640(v24);
        uint64_t v24 = (void *)result;
      }
      if (v23 >= v24[2]) {
        goto LABEL_44;
      }
      v24[v23 + 4] = a1;
      *(void *)(a3 + 16) = v24;
      unint64_t v25 = v24[2];
    }
    if (v23 >= v25) {
      goto LABEL_42;
    }
    if (!v24[v23 + 4])
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(a3 + 16) = v24;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1D1667640(v24);
        uint64_t v24 = (void *)result;
      }
      if (v23 >= v24[2]) {
        goto LABEL_45;
      }
      v24[v23 + 4] = a1;
      *(void *)(a3 + 16) = v24;
      uint64_t v26 = sub_1D16CDFC8(v23, a5, a6);
      if (*(void *)(v26 + 16) >= a4) {
        uint64_t result = sub_1D16917E8(v26);
      }
      else {
        uint64_t result = swift_bridgeObjectRelease();
      }
    }
  }
LABEL_35:
  swift_release();
  sub_1D16CE18C(a2);
  if (*(void *)(v28 + 16))
  {
    swift_retain();
    sub_1D16CE300(a1, v28, a3, a4, a5, a6);
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  else
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

float sub_1D16CE5FC()
{
  return 1.0;
}

float (*static SparseMatrix.binaryClosure.getter())()
{
  return sub_1D16CE5FC;
}

void static SparseMatrix.random(rows:columns:density:element:)(int64_t a1, int64_t a2, float (*a3)(void), double a4)
{
  swift_retain();
  sub_1D16CE974(a1, a2, 0, 0, a3, a4);
}

void static SparseMatrix.randomSquare(rows:density:noDiagonal:element:)(int64_t a1, uint64_t a2, float (*a3)(void), uint64_t a4, double a5)
{
}

void static SparseMatrix.randomUpperTriangular(rows:density:noDiagonal:element:)(int64_t a1, uint64_t a2, float (*a3)(void), uint64_t a4, double a5)
{
}

void sub_1D16CE6A4(int64_t a1, uint64_t a2, float (*a3)(void), double a4, uint64_t a5, unsigned __int8 a6)
{
  swift_retain();
  sub_1D16CE974(a1, a1, a2, a6, a3, a4);
}

void static SparseMatrix.randomSymmetric(rows:density:noDiagonal:element:)(int64_t a1, char a2, void (*a3)(void), double a4)
{
  type metadata accessor for SparseMatrix();
  swift_allocObject();
  uint64_t inserted = SparseMatrix.init(rows:columns:)(a1, a1);
  uint64_t v8 = *(void *)(inserted + 16);
  uint64_t v9 = v8 * v8;
  if ((unsigned __int128)(v8 * (__int128)v8) >> 64 != (v8 * v8) >> 63)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v10 = v9 - 1;
  if (!__OFSUB__(v9, 1))
  {
    if (a4 <= 0.0 || a4 > 1.0 || v10 < 0) {
      goto LABEL_44;
    }
    uint64_t v11 = inserted;
    double v12 = 0.0;
    if (a4 != 1.0) {
      double v12 = 1.0 / log(1.0 - a4);
    }
    uint64_t v13 = -1;
    while (1)
    {
      if (a4 == 1.0)
      {
        BOOL v14 = __OFADD__(v13++, 1);
        if (v14) {
          goto LABEL_33;
        }
      }
      else
      {
        sub_1D167C4C8(inserted, 0.0, 1.0);
        double v16 = ceil(v12 * log(1.0 - v15));
        if ((~*(void *)&v16 & 0x7FF0000000000000) == 0) {
          goto LABEL_38;
        }
        if (v16 <= -9.22337204e18) {
          goto LABEL_39;
        }
        if (v16 >= 9.22337204e18) {
          goto LABEL_40;
        }
        BOOL v14 = __OFADD__(v13, (uint64_t)v16);
        v13 += (uint64_t)v16;
        if (v14) {
          goto LABEL_41;
        }
      }
      if (v10 < v13)
      {
        sparse_commit(*(void **)(v11 + 32));
        return;
      }
      uint64_t v17 = *(void *)(v11 + 24);
      if (!v17) {
        break;
      }
      if (v13 == 0x8000000000000000 && v17 == -1) {
        goto LABEL_34;
      }
      uint64_t v18 = v13 / v17;
      if (v13 % v17 < v13 / v17)
      {
        a3();
        if (v17 < 0 || v18 >= v8) {
          goto LABEL_35;
        }
        float v20 = v19;
        sparse_insert_entry_float(*(sparse_matrix_float *)(v11 + 32), v19, v13 / v17, v13 % v17);
        if (v18 >= v17) {
          goto LABEL_36;
        }
        uint64_t inserted = sparse_insert_entry_float(*(sparse_matrix_float *)(v11 + 32), v20, v13 % v17, v13 / v17);
      }
      if (v18 == v13 % v17 && (a2 & 1) == 0)
      {
        ((void (*)(uint64_t))a3)(inserted);
        if (v17 < 0 || v18 >= v8) {
          goto LABEL_37;
        }
        uint64_t inserted = sparse_insert_entry_float(*(sparse_matrix_float *)(v11 + 32), v21, v13 / v17, v13 / v17);
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

void sub_1D16CE974(int64_t a1, int64_t a2, uint64_t a3, unsigned __int8 a4, float (*a5)(void), double a6)
{
  type metadata accessor for SparseMatrix();
  swift_allocObject();
  int64_t v41 = SparseMatrix.init(rows:columns:)(a1, a2);
  int64_t v10 = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 != (a1 * a2) >> 63)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v11 = v10 - 1;
  if (!__OFSUB__(v10, 1))
  {
    if (a6 <= 0.0 || a6 > 1.0 || v11 < 0) {
      goto LABEL_44;
    }
    double v12 = 0.0;
    if (a6 != 1.0) {
      double v12 = 1.0 / log(1.0 - a6);
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_retain();
    sparse_index v14 = 0;
    uint64_t v15 = MEMORY[0x1E4FBC860];
    uint64_t v16 = -1;
    uint64_t v17 = (void *)MEMORY[0x1E4FBC860];
    while (1)
    {
      if (a6 == 1.0)
      {
        BOOL v18 = __OFADD__(v16++, 1);
        if (v18) {
          goto LABEL_36;
        }
      }
      else
      {
        sub_1D167C4C8(isUniquelyReferenced_nonNull_native, 0.0, 1.0);
        double v20 = ceil(v12 * log(1.0 - v19));
        if ((~*(void *)&v20 & 0x7FF0000000000000) == 0) {
          goto LABEL_38;
        }
        if (v20 <= -9.22337204e18) {
          goto LABEL_39;
        }
        if (v20 >= 9.22337204e18) {
          goto LABEL_40;
        }
        BOOL v18 = __OFADD__(v16, (uint64_t)v20);
        v16 += (uint64_t)v20;
        if (v18) {
          goto LABEL_41;
        }
      }
      if (v11 < v16)
      {
        id v36 = (const float *)(v15 + 32);
        id v37 = *(sparse_m_float **)(v41 + 32);
        sparse_dimension v38 = v17[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sparse_insert_row_float(v37, v14, v38, v36, v17 + 4);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        id v39 = *(void **)(v41 + 32);
        swift_release();
        sparse_commit(v39);
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
      if (!a2) {
        break;
      }
      if (v16 == 0x8000000000000000 && a2 == -1) {
        goto LABEL_37;
      }
      uint64_t v21 = v16 / a2;
      if (v16 / a2 != v14)
      {
        sparse_index v22 = v14;
        uint64_t v23 = v11;
        int64_t v24 = a2;
        uint64_t v25 = a3;
        uint64_t v26 = *(sparse_m_float **)(v41 + 32);
        sparse_dimension v27 = v17[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v28 = v26;
        a3 = v25;
        a2 = v24;
        uint64_t v11 = v23;
        sparse_insert_row_float(v28, v22, v27, (const float *)(v15 + 32), v17 + 4);
        swift_bridgeObjectRelease_n();
        uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease_n();
        sparse_index v14 = v21;
        uint64_t v15 = MEMORY[0x1E4FBC860];
        uint64_t v17 = (void *)MEMORY[0x1E4FBC860];
      }
      sparse_index v29 = v16 - v21 * a2;
      if ((a3 & (v29 == v14)) == 0 && (a4 & (v29 < v14)) == 0)
      {
        uint64_t v30 = v15;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = sub_1D169C880(0, v17[2] + 1, 1, v17);
        }
        unint64_t v32 = v17[2];
        unint64_t v31 = v17[3];
        if (v32 >= v31 >> 1) {
          uint64_t v17 = sub_1D169C880((void *)(v31 > 1), v32 + 1, 1, v17);
        }
        void v17[2] = v32 + 1;
        v17[v32 + 4] = v29;
        float v33 = a5();
        uint64_t v15 = v30;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1D169C88C(0, *(void *)(v30 + 16) + 1, 1, (char *)v30);
          uint64_t v15 = isUniquelyReferenced_nonNull_native;
        }
        unint64_t v35 = *(void *)(v15 + 16);
        unint64_t v34 = *(void *)(v15 + 24);
        if (v35 >= v34 >> 1)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1D169C88C((char *)(v34 > 1), v35 + 1, 1, (char *)v15);
          uint64_t v15 = isUniquelyReferenced_nonNull_native;
        }
        *(void *)(v15 + 16) = v35 + 1;
        *(float *)(v15 + 4 * v35 + 32) = v33;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

uint64_t sub_1D16CED40(uint64_t a1, char a2)
{
  if (a1 >= 2)
  {
    uint64_t v3 = (void *)MAGraph.adjacencyMatrix(directed:)(a2 & 1);
    uint64_t v16 = MEMORY[0x1E4FBC860];
    uint64_t v4 = v3[3];
    uint64_t v5 = v3[2];
    swift_bridgeObjectRetain();
    if (v4 == v5)
    {
      uint64_t v6 = a1 - 1;
      uint64_t v7 = v5;
      uint64_t v8 = v5;
      while (1)
      {
        uint64_t v9 = v5 * v8;
        if ((unsigned __int128)(v5 * (__int128)v8) >> 64 != (v5 * v8) >> 63) {
          break;
        }
        if (v9 < 0) {
          goto LABEL_28;
        }
        swift_bridgeObjectRetain();
        if (v9)
        {
          uint64_t v10 = sub_1D17BE1C0();
          *(void *)(v10 + 16) = v9;
          bzero((void *)(v10 + 32), 8 * v5 * v8);
        }
        else
        {
          uint64_t v10 = MEMORY[0x1E4FBC860];
        }
        if (v5 > 0x7FFFFFFF) {
          goto LABEL_23;
        }
        if (v8 > 0x7FFFFFFF) {
          goto LABEL_24;
        }
        if (v5 < (uint64_t)0xFFFFFFFF80000000
          || v8 < (uint64_t)0xFFFFFFFF80000000
          || v7 < (uint64_t)0xFFFFFFFF80000000)
        {
          goto LABEL_25;
        }
        if (v7 > 0x7FFFFFFF) {
          goto LABEL_26;
        }
        cblas_dgemm_NEWLAPACK();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v11 = v3[5];
        type metadata accessor for MASquareMatrixRepresentation();
        double v12 = (void *)swift_allocObject();
        v12[2] = v5;
        uint64_t v12[3] = v8;
        void v12[4] = v10;
        void v12[5] = v11;
        swift_bridgeObjectRetain();
        uint64_t v13 = swift_bridgeObjectRetain();
        MEMORY[0x1D25F8AB0](v13);
        if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1D17BE170();
        }
        sub_1D17BE1F0();
        sub_1D17BE150();
        if (!--v6)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return v16;
        }
        uint64_t v7 = v8;
        BOOL v14 = v8 == v3[2];
        uint64_t v8 = v3[3];
        if (!v14) {
          goto LABEL_21;
        }
      }
    }
    else
    {
LABEL_21:
      __break(1u);
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  __break(1u);
LABEL_28:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t MASimilarityDistance.directed.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t MASimilarityDistance.options.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MASimilarityDistance.__allocating_init(directed:options:)(char a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t MASimilarityDistance.init(directed:options:)(char a1, uint64_t a2)
{
  *(unsigned char *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

void sub_1D16CF03C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 96);
  swift_bridgeObjectRetain();
  uint64_t v10 = v9(a3, a4);
  id v11 = objc_msgSend(a1, sel_graph);
  if (v11)
  {
    id v12 = objc_msgSend(v11, sel_graphReference);
    swift_unknownObjectRelease();
    id v13 = objc_msgSend(v12, sel_concreteGraph);

    if (v13)
    {
      (*(void (**)(id))(*(void *)v10 + 104))(v13);

      (*(void (**)(void *, uint64_t))(*(void *)v10 + 112))(a1, a2);
      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t MASimilarityDistance.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MASimilarityDistance.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 32, 7);
}

double sub_1D16CF1DC(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_shortestPathToNode_directed_, a2, *(unsigned __int8 *)(v2 + 16));
  id v4 = objc_msgSend(v3, sel_edgesCount);

  return -(double)(uint64_t)v4;
}

double sub_1D16CF23C(id a1, void *a2)
{
  if (*(unsigned char *)(v2 + 16) == 1)
  {
    id v5 = objc_msgSend(a1, sel_neighborNodesThroughOutEdges);
    sub_1D1668090();
    sub_1D1674A20();
    uint64_t v6 = sub_1D17BE350();

    id v7 = objc_msgSend(a2, sel_neighborNodesThroughOutEdges);
    uint64_t v8 = sub_1D17BE350();

    uint64_t v9 = (void *)sub_1D16D0FD4(v8, v6);
    swift_bridgeObjectRelease();
    id v10 = objc_msgSend(a1, sel_neighborNodesThroughInEdges);
    uint64_t v11 = sub_1D17BE350();

    id v12 = objc_msgSend(a2, sel_neighborNodesThroughInEdges);
    uint64_t v13 = sub_1D17BE350();

    unint64_t v14 = sub_1D16D0FD4(v13, v11);
    swift_bridgeObjectRelease();
    sub_1D168963C(v14, v9);
    if ((v15 & 0xC000000000000001) != 0) {
      uint64_t v16 = sub_1D17BE760();
    }
    else {
      uint64_t v16 = *(void *)(v15 + 16);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    id v17 = objc_msgSend(a1, sel_neighborNodes);
    sub_1D1668090();
    sub_1D1674A20();
    uint64_t v18 = sub_1D17BE350();

    id v19 = objc_msgSend(a2, sel_neighborNodes);
    uint64_t v20 = sub_1D17BE350();

    uint64_t v21 = sub_1D16D0FD4(v20, v18);
    swift_bridgeObjectRelease();
    if ((v21 & 0xC000000000000001) != 0) {
      uint64_t v16 = sub_1D17BE760();
    }
    else {
      uint64_t v16 = *(void *)(v21 + 16);
    }
    swift_release();
  }
  return (double)v16;
}

double sub_1D16CF480(id a1, void *a2)
{
  if (*(unsigned char *)(v2 + 16) != 1)
  {
    id v16 = objc_msgSend(a1, sel_neighborNodes);
    sub_1D1668090();
    sub_1D1674A20();
    uint64_t v17 = sub_1D17BE350();

    id v18 = objc_msgSend(a2, sel_neighborNodes);
    uint64_t v19 = sub_1D17BE350();

    sub_1D16D1FB4(v19);
    uint64_t v14 = v17;
    if ((v17 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v15 = *(void *)(v14 + 16);
    goto LABEL_6;
  }
  id v5 = objc_msgSend(a1, sel_neighborNodesThroughOutEdges);
  sub_1D1668090();
  sub_1D1674A20();
  uint64_t v6 = (void *)sub_1D17BE350();

  id v7 = objc_msgSend(a2, sel_neighborNodesThroughOutEdges);
  uint64_t v8 = sub_1D17BE350();

  sub_1D16D1FB4(v8);
  id v9 = objc_msgSend(a1, sel_neighborNodesThroughInEdges);
  unint64_t v10 = sub_1D17BE350();

  id v11 = objc_msgSend(a2, sel_neighborNodesThroughInEdges);
  uint64_t v12 = sub_1D17BE350();

  sub_1D16D1FB4(v12);
  sub_1D168963C(v10, v6);
  uint64_t v14 = v13;
  if ((v13 & 0xC000000000000001) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v15 = sub_1D17BE760();
LABEL_6:
  swift_bridgeObjectRelease();
  return sqrt((double)v15);
}

uint64_t MAEuclideanSimilarityDistance.init(directed:options:)(char a1, uint64_t a2)
{
  *(unsigned char *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t sub_1D16CF6B0(id a1, void *a2)
{
  if (*(unsigned char *)(v2 + 16) != 1)
  {
    sub_1D16CF23C(a1, a2);
    uint64_t v15 = (uint64_t)objc_msgSend(a1, sel_degreeCount);
    uint64_t result = (uint64_t)objc_msgSend(a2, sel_degreeCount);
    if ((unsigned __int128)(v15 * (__int128)result) >> 64 == (v15 * result) >> 63) {
      return result;
    }
    __break(1u);
    goto LABEL_12;
  }
  id v5 = objc_msgSend(a1, sel_neighborNodesThroughOutEdges);
  sub_1D1668090();
  sub_1D1674A20();
  uint64_t v6 = sub_1D17BE350();

  id v7 = objc_msgSend(a2, sel_neighborNodesThroughOutEdges);
  uint64_t v8 = sub_1D17BE350();

  uint64_t v9 = sub_1D16D0FD4(v8, v6);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(a1, sel_neighborNodesThroughInEdges);
  uint64_t v11 = sub_1D17BE350();

  id v12 = objc_msgSend(a2, sel_neighborNodesThroughInEdges);
  uint64_t v13 = sub_1D17BE350();

  uint64_t v14 = sub_1D16D0FD4(v13, v11);
  swift_bridgeObjectRelease();
  if ((v9 & 0xC000000000000001) != 0) {
    sub_1D17BE760();
  }
  swift_release();
  uint64_t v17 = (uint64_t)objc_msgSend(a1, sel_outDegreeCount);
  uint64_t result = (uint64_t)objc_msgSend(a2, sel_outDegreeCount);
  if ((unsigned __int128)(v17 * (__int128)result) >> 64 != (v17 * result) >> 63)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  if ((v14 & 0xC000000000000001) != 0) {
    sub_1D17BE760();
  }
  swift_release();
  uint64_t v18 = (uint64_t)objc_msgSend(a1, sel_inDegreeCount);
  uint64_t result = (uint64_t)objc_msgSend(a2, sel_inDegreeCount);
  if ((unsigned __int128)(v18 * (__int128)result) >> 64 != (v18 * result) >> 63) {
    goto LABEL_13;
  }
  return result;
}

uint64_t MACosineSimilarityDistance.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

double sub_1D16CF95C(void *a1, void *a2)
{
  double v4 = sub_1D16CF23C(a1, a2);
  id v5 = objc_msgSend(a1, sel_neighborNodes);
  sub_1D1668090();
  sub_1D1674A20();
  uint64_t v6 = (void *)sub_1D17BE350();

  id v7 = objc_msgSend(a2, sel_neighborNodes);
  unint64_t v8 = sub_1D17BE350();

  sub_1D168963C(v8, v6);
  if ((v9 & 0xC000000000000001) != 0) {
    uint64_t v10 = sub_1D17BE760();
  }
  else {
    uint64_t v10 = *(void *)(v9 + 16);
  }
  swift_bridgeObjectRelease();
  return v4 / (double)v10;
}

uint64_t _s17KnowledgeGraphKit32MAShortestPathSimilarityDistanceC8directed7optionsACSb_SDySSypGtcfC_0(char a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t _s17KnowledgeGraphKit26MACosineSimilarityDistanceC8directed7optionsACSb_SDySSypGtcfc_0(char a1, uint64_t a2)
{
  *(unsigned char *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

void sub_1D16CFAB8(id a1, void *a2)
{
  uint64_t v37 = MEMORY[0x1E4FBC870];
  if (*(unsigned char *)(v2 + 16) == 1)
  {
    id v5 = objc_msgSend(a1, sel_neighborNodesThroughOutEdges);
    sub_1D1668090();
    sub_1D1674A20();
    uint64_t v6 = sub_1D17BE350();

    id v7 = objc_msgSend(a2, sel_neighborNodesThroughOutEdges);
    uint64_t v8 = sub_1D17BE350();

    unint64_t v9 = sub_1D16D0FD4(v8, v6);
    swift_bridgeObjectRelease();
    sub_1D1691944(v9);
    id v10 = objc_msgSend(a1, sel_neighborNodesThroughInEdges);
    uint64_t v11 = sub_1D17BE350();

    id v12 = objc_msgSend(a2, sel_neighborNodesThroughInEdges);
  }
  else
  {
    id v13 = objc_msgSend(a1, sel_neighborNodes);
    sub_1D1668090();
    sub_1D1674A20();
    uint64_t v11 = sub_1D17BE350();

    id v12 = objc_msgSend(a2, sel_neighborNodes);
  }
  id v14 = v12;
  uint64_t v15 = sub_1D17BE350();

  unint64_t v16 = sub_1D16D0FD4(v15, v11);
  swift_bridgeObjectRelease();
  sub_1D1691944(v16);
  uint64_t v17 = v37;
  if ((v37 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D1668090();
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v17 = v38;
    uint64_t v18 = v39;
    uint64_t v19 = v40;
    uint64_t v20 = v41;
    unint64_t v21 = v42;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v22 = -1 << *(unsigned char *)(v37 + 32);
    uint64_t v18 = v37 + 56;
    uint64_t v19 = ~v22;
    uint64_t v23 = -v22;
    if (v23 < 64) {
      uint64_t v24 = ~(-1 << v23);
    }
    else {
      uint64_t v24 = -1;
    }
    unint64_t v21 = v24 & *(void *)(v37 + 56);
  }
  uint64_t v35 = v19;
  int64_t v25 = (unint64_t)(v19 + 64) >> 6;
  double v26 = 0.0;
  if (v17 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v21)
    {
      uint64_t v27 = (v21 - 1) & v21;
      unint64_t v28 = __clz(__rbit64(v21)) | (v20 << 6);
      uint64_t v29 = v20;
      goto LABEL_30;
    }
    int64_t v31 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v31 >= v25) {
      goto LABEL_33;
    }
    unint64_t v32 = *(void *)(v18 + 8 * v31);
    uint64_t v29 = v20 + 1;
    if (!v32)
    {
      uint64_t v29 = v20 + 2;
      if (v20 + 2 >= v25) {
        goto LABEL_33;
      }
      unint64_t v32 = *(void *)(v18 + 8 * v29);
      if (!v32)
      {
        uint64_t v29 = v20 + 3;
        if (v20 + 3 >= v25) {
          goto LABEL_33;
        }
        unint64_t v32 = *(void *)(v18 + 8 * v29);
        if (!v32)
        {
          uint64_t v29 = v20 + 4;
          if (v20 + 4 >= v25) {
            goto LABEL_33;
          }
          unint64_t v32 = *(void *)(v18 + 8 * v29);
          if (!v32)
          {
            uint64_t v33 = v20 + 5;
            while (v25 != v33)
            {
              unint64_t v32 = *(void *)(v18 + 8 * v33++);
              if (v32)
              {
                uint64_t v29 = v33 - 1;
                goto LABEL_29;
              }
            }
LABEL_33:
            unint64_t v21 = 0;
LABEL_34:
            sub_1D16681F0(v17, v18, v35, v20, v21);
            return;
          }
        }
      }
    }
LABEL_29:
    uint64_t v27 = (v32 - 1) & v32;
    unint64_t v28 = __clz(__rbit64(v32)) + (v29 << 6);
LABEL_30:
    id v30 = *(id *)(*(void *)(v17 + 48) + 8 * v28);
    if (!v30) {
      goto LABEL_34;
    }
    while (1)
    {
      id v34 = objc_msgSend(v30, sel_degreeCount, v35);

      double v26 = v26 + 1.0 / log10((double)(uint64_t)v34);
      uint64_t v20 = v29;
      unint64_t v21 = v27;
      if ((v17 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_13:
      if (sub_1D17BE7A0())
      {
        sub_1D1668090();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v30 = v36;
        swift_unknownObjectRelease();
        uint64_t v29 = v20;
        uint64_t v27 = v21;
        if (v36) {
          continue;
        }
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}