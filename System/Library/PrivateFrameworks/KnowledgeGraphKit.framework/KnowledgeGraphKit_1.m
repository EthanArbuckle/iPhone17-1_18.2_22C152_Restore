uint64_t sub_1D16CFEC0(id a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(unsigned char *)(v2 + 16) != 1) {
    goto LABEL_7;
  }
  v5 = (uint64_t)objc_msgSend(a1, sel_inEdgesCount);
  result = (uint64_t)objc_msgSend(a2, sel_inEdgesCount);
  v7 = v5 * result;
  if ((unsigned __int128)(v5 * (__int128)result) >> 64 != (v5 * result) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  v8 = (uint64_t)objc_msgSend(a1, sel_outEdgesCount);
  result = (uint64_t)objc_msgSend(a2, sel_outEdgesCount);
  if ((unsigned __int128)(v8 * (__int128)result) >> 64 != (v8 * result) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!__OFADD__(v7, v8 * result)) {
    return result;
  }
  __break(1u);
LABEL_7:
  v9 = (uint64_t)objc_msgSend(a1, sel_edgesCount);
  result = (uint64_t)objc_msgSend(a2, sel_edgesCount);
  if ((unsigned __int128)(v9 * (__int128)result) >> 64 != (v9 * result) >> 63) {
LABEL_11:
  }
    __break(1u);
  return result;
}

uint64_t _s17KnowledgeGraphKit32MAShortestPathSimilarityDistanceCfD_0()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 32, 7);
}

double sub_1D16CFFEC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  double v2 = 0.5;
  if (*(void *)(v1 + 16))
  {
    unint64_t v3 = sub_1D165A868(45774, 0xA200000000000000);
    if (v4)
    {
      sub_1D1668120(*(void *)(v1 + 56) + 32 * v3, (uint64_t)v7);
      if (swift_dynamicCast()) {
        return v6;
      }
    }
  }
  return v2;
}

uint64_t sub_1D16D0078()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (*(void *)(v1 + 16)
    && (unint64_t v2 = sub_1D165A868(76, 0xE100000000000000), (v3 & 1) != 0)
    && (sub_1D1668120(*(void *)(v1 + 56) + 32 * v2, (uint64_t)v6), swift_dynamicCast()))
  {
    return v5;
  }
  else
  {
    return 3;
  }
}

uint64_t sub_1D16D00FC()
{
  uint64_t v1 = sub_1D16D0078();
  *(void *)(v0 + 32) = sub_1D16CED40(v1, *(unsigned char *)(v0 + 16));
  return swift_bridgeObjectRelease();
}

void sub_1D16D0154()
{
  double v1 = sub_1D16CFFEC();
  uint64_t v2 = sub_1D16D0078();
  if (v2 < 2) {
    goto LABEL_86;
  }
  uint64_t v3 = v2;
  double v4 = 0.0;
  uint64_t v5 = 2;
  uint64_t v42 = v2;
  uint64_t v43 = v0;
  while (1)
  {
    uint64_t v6 = *(void *)(v0 + 32);
    double v7 = 0.0;
    if (v6) {
      break;
    }
LABEL_63:
    double v4 = v4 + v1 * v7;
    if (v5 == v3) {
      return;
    }
    double v1 = v1 * v1;
    BOOL v25 = __OFADD__(v5++, 1);
    if (v25)
    {
      __break(1u);
      goto LABEL_72;
    }
  }
  unint64_t v8 = v5 - 2;
  if ((v6 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v9 = (void *)MEMORY[0x1D25F9260](v5 - 2, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v8 >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_73;
    }
    v9 = *(void **)(v6 + 8 * v8 + 32);
    swift_retain();
  }
  unint64_t v10 = v9[5];
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1D17BEAD0();
    if (!v11)
    {
LABEL_62:
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_63;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_62;
    }
  }
  unint64_t v12 = v10 & 0xC000000000000001;
  if ((v10 & 0xC000000000000001) != 0)
  {
    id v13 = (id)MEMORY[0x1D25F9260](0, v10);
  }
  else
  {
    if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_74;
    }
    id v13 = *(id *)(v10 + 32);
  }
  v14 = v13;
  sub_1D1668090();
  char v15 = sub_1D17BE5C0();

  uint64_t v16 = 0;
  if ((v15 & 1) == 0)
  {
    if (v11 == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
LABEL_31:
      uint64_t v3 = v42;
      uint64_t v0 = v43;
      goto LABEL_63;
    }
    if (v12)
    {
      id v28 = (id)MEMORY[0x1D25F9260](1, v10);
    }
    else
    {
      if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
        goto LABEL_85;
      }
      id v28 = *(id *)(v10 + 40);
    }
    v30 = v28;
    char v31 = sub_1D17BE5C0();

    if ((v31 & 1) == 0)
    {
      uint64_t v32 = 1;
      while (1)
      {
        uint64_t v16 = v32 + 1;
        if (__OFADD__(v32, 1)) {
          break;
        }
        if (v16 == v11) {
          goto LABEL_30;
        }
        if (v12)
        {
          id v33 = (id)MEMORY[0x1D25F9260](v32 + 1, v10);
        }
        else
        {
          if (v16 < 0) {
            goto LABEL_76;
          }
          if ((unint64_t)v16 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_77;
          }
          id v33 = *(id *)(v10 + 32 + 8 * v16);
        }
        v34 = v33;
        char v35 = sub_1D17BE5C0();

        ++v32;
        if (v35) {
          goto LABEL_13;
        }
      }
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    uint64_t v16 = 1;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  unint64_t v17 = v9[5];
  if (!(v17 >> 62))
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v18) {
      goto LABEL_15;
    }
LABEL_30:
    swift_release();
    swift_bridgeObjectRelease();
    double v7 = 0.0;
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1D17BEAD0();
  if (!v18) {
    goto LABEL_30;
  }
LABEL_15:
  unint64_t v44 = v17 & 0xC000000000000001;
  if ((v17 & 0xC000000000000001) != 0)
  {
    id v19 = (id)MEMORY[0x1D25F9260](0, v17);
  }
  else
  {
    if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_78;
    }
    id v19 = *(id *)(v17 + 32);
  }
  v20 = v19;
  char v21 = sub_1D17BE5C0();

  if (v21)
  {
    unint64_t v22 = 0;
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v23 = v9[3];
    uint64_t v24 = v16 * v23;
    if ((unsigned __int128)(v16 * (__int128)v23) >> 64 != (v16 * v23) >> 63) {
      goto LABEL_81;
    }
    BOOL v25 = __OFADD__(v24, v22);
    unint64_t v26 = v24 + v22;
    if (v25) {
      goto LABEL_82;
    }
    if ((v26 & 0x8000000000000000) != 0) {
      goto LABEL_83;
    }
    uint64_t v27 = v9[4];
    if (v26 >= *(void *)(v27 + 16)) {
      goto LABEL_84;
    }
    double v7 = *(double *)(v27 + 8 * v26 + 32);
    swift_release();
    goto LABEL_31;
  }
  if (v18 == 1) {
    goto LABEL_30;
  }
  if (v44)
  {
    id v29 = (id)MEMORY[0x1D25F9260](1, v17);
  }
  else
  {
    if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
      goto LABEL_87;
    }
    id v29 = *(id *)(v17 + 40);
  }
  v36 = v29;
  char v37 = sub_1D17BE5C0();

  if (v37)
  {
    unint64_t v22 = 1;
    goto LABEL_20;
  }
  uint64_t v38 = 1;
  while (1)
  {
    unint64_t v22 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v22 == v18) {
      goto LABEL_30;
    }
    if (v44)
    {
      id v39 = (id)MEMORY[0x1D25F9260](v38 + 1, v17);
    }
    else
    {
      if ((v22 & 0x8000000000000000) != 0) {
        goto LABEL_79;
      }
      if (v22 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_80;
      }
      id v39 = *(id *)(v17 + 32 + 8 * v22);
    }
    v40 = v39;
    char v41 = sub_1D17BE5C0();

    ++v38;
    if (v41) {
      goto LABEL_20;
    }
  }
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
}

uint64_t MAExponentiallyDampedPathCountsSimilarityDistance.__allocating_init(directed:options:)(char a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = 0;
  return result;
}

uint64_t MAExponentiallyDampedPathCountsSimilarityDistance.init(directed:options:)(char a1, uint64_t a2)
{
  *(unsigned char *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  *(void *)(v2 + 32) = 0;
  return v2;
}

uint64_t sub_1D16D0648()
{
  return swift_bridgeObjectRelease();
}

uint64_t MAExponentiallyDampedPathCountsSimilarityDistance.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MAExponentiallyDampedPathCountsSimilarityDistance.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 40, 7);
}

unint64_t MAGraph.similarityMatrix(distance:directed:options:identity:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 96);
  swift_bridgeObjectRetain();
  uint64_t v9 = v8(a2, a3);
  (*(void (**)(void *))(*(void *)v9 + 104))(v4);
  unint64_t v71 = MEMORY[0x1E4FBC860];
  id v10 = objc_msgSend(v4, sel_allNodes);
  char v11 = sub_1D1668090();
  sub_1D1674A20();
  char v70 = v11;
  uint64_t v12 = sub_1D17BE350();

  sub_1D16634F8(v12);
  uint64_t v13 = v71;
  uint64_t v14 = v71 >> 62;
  if (v71 >> 62) {
    goto LABEL_90;
  }
  uint64_t v15 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v16 = v15;
LABEL_3:
  unint64_t result = v16 * v15;
  if ((unsigned __int128)(v16 * (__int128)v15) >> 64 == (v16 * v15) >> 63)
  {
    uint64_t v66 = v15;
    uint64_t v51 = v16;
    uint64_t v18 = (void *)sub_1D1665914(result, 0.0);
    uint64_t v69 = v13;
    if (a2)
    {
      if (v14)
      {
        uint64_t v65 = v13 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        uint64_t v23 = sub_1D17BEAD0();
        if (v23)
        {
          uint64_t v19 = v23;
          swift_bridgeObjectRetain();
          uint64_t v20 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
LABEL_13:
          unint64_t v24 = 0;
          uint64_t v61 = v19;
          v63 = (char *)(v13 + 32);
          do
          {
            if (v24 >= *(void *)(v65 + 16)) {
              goto LABEL_82;
            }
            if (v20)
            {
              if (v20 < 1) {
                goto LABEL_86;
              }
              BOOL v25 = *(void **)&v63[8 * v24];
              uint64_t v21 = v24 * v66;
              unint64_t v67 = v24;
              uint64_t v14 = (unsigned __int128)((uint64_t)v24 * (__int128)v66) >> 64 != (uint64_t)(v24 * v66) >> 63;
              swift_bridgeObjectRetain();
              id v26 = v25;
              a2 = 0;
              while (1)
              {
                uint64_t v13 = (uint64_t)*(id *)(v13 + 8 * a2 + 32);
                if (sub_1D17BE5C0() & 1) == 0 || (a4)
                {
                  (*(void (**)(id, uint64_t))(*(void *)v9 + 112))(v26, v13);
                  if (v14)
                  {
LABEL_72:
                    __break(1u);
LABEL_73:
                    __break(1u);
LABEL_74:
                    __break(1u);
LABEL_75:
                    __break(1u);
LABEL_76:
                    __break(1u);
LABEL_77:
                    __break(1u);
LABEL_78:
                    __break(1u);
LABEL_79:
                    __break(1u);
LABEL_80:
                    __break(1u);
LABEL_81:
                    __break(1u);
LABEL_82:
                    __break(1u);
LABEL_83:
                    __break(1u);
LABEL_84:
                    __break(1u);
LABEL_85:
                    __break(1u);
LABEL_86:
                    __break(1u);
LABEL_87:
                    __break(1u);
LABEL_88:
                    __break(1u);
LABEL_89:
                    __break(1u);
LABEL_90:
                    swift_bridgeObjectRetain();
                    uint64_t v16 = sub_1D17BEAD0();
                    uint64_t v15 = sub_1D17BEAD0();
                    swift_bridgeObjectRelease();
                    goto LABEL_3;
                  }
                  unint64_t v28 = v21 + a2;
                  if (__OFADD__(v21, a2)) {
                    goto LABEL_73;
                  }
                  uint64_t v29 = v27;
                  if (swift_isUniquelyReferenced_nonNull_native())
                  {
                    if ((v28 & 0x8000000000000000) != 0) {
                      goto LABEL_31;
                    }
                  }
                  else
                  {
                    uint64_t v18 = sub_1D1667604(v18);
                    if ((v28 & 0x8000000000000000) != 0)
                    {
LABEL_31:
                      __break(1u);
                      goto LABEL_32;
                    }
                  }
                  if (v28 >= v18[2]) {
                    goto LABEL_74;
                  }
                  v18[v28 + 4] = v29;
                }
                ++a2;

                uint64_t v13 = v69;
                if (v20 == a2)
                {

                  swift_bridgeObjectRelease();
                  uint64_t v19 = v61;
                  unint64_t v24 = v67;
                  break;
                }
              }
            }
            ++v24;
          }
          while (v24 != v19);
        }
      }
      else
      {
        uint64_t v65 = v13 & 0xFFFFFFFFFFFFFF8;
        uint64_t v19 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v19)
        {
          uint64_t v20 = v19;
          goto LABEL_13;
        }
      }
LABEL_70:
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for MASquareMatrixRepresentation();
      unint64_t result = swift_allocObject();
      *(void *)(result + 16) = v51;
      *(void *)(result + 24) = v66;
      *(void *)(result + 32) = v18;
      *(void *)(result + 40) = v13;
      return result;
    }
    uint64_t v21 = v14;
    if (!v14)
    {
      uint64_t v14 = v13 & 0xFFFFFFFFFFFFFF8;
      uint64_t v22 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      LOBYTE(a2) = v70;
      if (!v22) {
        goto LABEL_70;
      }
      uint64_t v53 = v22;
LABEL_34:
      unint64_t v30 = 0;
      uint64_t v55 = v14 + 32;
      unint64_t v56 = v13 & 0xC000000000000001;
      v57 = (char *)(v13 + 32);
      uint64_t v58 = v22 + 1;
      uint64_t v54 = (2 * v22) | 1;
      uint64_t v59 = v21;
      uint64_t v62 = v14;
      uint64_t v52 = v22;
      while (1)
      {
        uint64_t v31 = *(void *)(v14 + 16);
        if (v30 >= v31) {
          goto LABEL_83;
        }
        if (v30 == v58) {
          goto LABEL_84;
        }
        uint64_t v14 = v30;
        uint64_t v32 = *(void **)&v57[8 * v30];
        uint64_t v68 = v14;
        if (v21)
        {
          swift_bridgeObjectRetain();
          id v34 = v32;
          uint64_t v35 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
          if (v35 < v14) {
            goto LABEL_87;
          }
          swift_bridgeObjectRetain();
          uint64_t v31 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
          uint64_t v21 = v59;
        }
        else
        {
          id v33 = v32;
        }
        uint64_t v14 = v62;
        if (v31 < v22) {
          goto LABEL_85;
        }
        if (v56 && v68 != v22)
        {
          if (v68 >= v22) {
            goto LABEL_88;
          }
          uint64_t v36 = v68;
          do
          {
            uint64_t v37 = v36 + 1;
            sub_1D17BE890();
            uint64_t v36 = v37;
          }
          while (v22 != v37);
        }
        swift_bridgeObjectRetain();
        unint64_t v38 = v54;
        uint64_t v60 = v55;
        uint64_t v13 = v68;
        if (v21)
        {
          uint64_t v14 = sub_1D17BEAE0();
          uint64_t v60 = v39;
          uint64_t v13 = v40;
          unint64_t v38 = v41;
          swift_bridgeObjectRelease();
        }
        unint64_t v42 = (v38 >> 1) - v13;
        if (v38 >> 1 != v13)
        {
          if ((uint64_t)(v38 >> 1) <= v13) {
            goto LABEL_89;
          }
          uint64_t v43 = 0;
          uint64_t v64 = v68 * v66;
          uint64_t v14 = v60 + 8 * v13;
          while (!__OFADD__(v43, 1))
          {
            uint64_t v13 = (uint64_t)*(id *)(v14 + 8 * v43);
            if (sub_1D17BE5C0() & 1) == 0 || (a4)
            {
              (*(void (**)(void *, uint64_t))(*(void *)v9 + 112))(v32, v13);
              uint64_t v45 = v43 + v68;
              if (__OFADD__(v43, v68)) {
                goto LABEL_75;
              }
              if ((unsigned __int128)(v68 * (__int128)v66) >> 64 != (v68 * v66) >> 63) {
                goto LABEL_76;
              }
              a2 = v9;
              uint64_t v9 = a4;
              a4 = v64 + v45;
              if (__OFADD__(v64, v45)) {
                goto LABEL_77;
              }
              uint64_t v46 = v44;
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                if ((a4 & 0x8000000000000000) != 0) {
                  goto LABEL_69;
                }
              }
              else
              {
                uint64_t v18 = sub_1D1667604(v18);
                if ((a4 & 0x8000000000000000) != 0)
                {
LABEL_69:
                  __break(1u);
                  goto LABEL_70;
                }
              }
              unint64_t v47 = v18[2];
              if (a4 >= v47) {
                goto LABEL_78;
              }
              v18[a4 + 4] = v46;
              uint64_t v48 = v45 * v66;
              if ((unsigned __int128)(v45 * (__int128)v66) >> 64 != (v45 * v66) >> 63) {
                goto LABEL_79;
              }
              BOOL v49 = __OFADD__(v48, v68);
              unint64_t v50 = v48 + v68;
              if (v49) {
                goto LABEL_80;
              }
              if (v50 >= v47) {
                goto LABEL_81;
              }
              v18[v50 + 4] = v46;
              a4 = v9;
              uint64_t v9 = a2;
              LOBYTE(a2) = v70;
            }

            if (v42 == ++v43) {
              goto LABEL_35;
            }
          }
          __break(1u);
          goto LABEL_72;
        }
LABEL_35:

        unint64_t v30 = v68 + 1;
        swift_unknownObjectRelease();
        uint64_t v22 = v52;
        uint64_t v13 = v69;
        uint64_t v21 = v59;
        uint64_t v14 = v62;
        if (v68 + 1 == v53) {
          goto LABEL_70;
        }
      }
    }
LABEL_32:
    uint64_t v14 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    LOBYTE(a2) = v70;
    uint64_t v53 = sub_1D17BEAD0();
    if (!v53) {
      goto LABEL_70;
    }
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_1D17BEAD0();
    unint64_t result = swift_bridgeObjectRelease();
    if ((v22 & 0x8000000000000000) == 0) {
      goto LABEL_34;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1D16D0DA8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return MAGraph.similarityMatrix(distance:directed:options:identity:)(a1, a2, a3, a4);
}

uint64_t sub_1D16D0DCC(uint64_t a1, uint64_t a2)
{
  return sub_1D16D0E38(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1D16D1300);
}

uint64_t sub_1D16D0E38(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x1E4F143B8];
  char v6 = *(unsigned char *)(a2 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe, a2);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a3((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5, a2);
    swift_release();
  }
  else
  {
    id v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = a3((char *)v10, v7, v5, a2);
    swift_release();
    MEMORY[0x1D25FAD70](v10, -1, -1);
  }
  return v9;
}

uint64_t sub_1D16D0FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  unint64_t v4 = a1 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (!v4)
    {
      return sub_1D16D1914(a1, a2);
    }
    return sub_1D16D0E38(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1D16D1514);
  }
  if (v4)
  {
    if (a2 >= 0) {
      uint64_t v2 = a2 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v5 = sub_1D17BE760();
    a2 = sub_1D1672BAC(v2, v5);
    a1 = v3;
    return sub_1D16D0E38(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1D16D1514);
  }
  sub_1D1668090();
  uint64_t v6 = MEMORY[0x1E4FBC870];
  uint64_t v28 = MEMORY[0x1E4FBC870];
  sub_1D17BE710();
  if (!sub_1D17BE7A0()) {
    goto LABEL_32;
  }
  uint64_t v7 = v3 + 56;
  do
  {
    swift_dynamicCast();
    if (!*(void *)(v3 + 16)) {
      goto LABEL_10;
    }
    uint64_t v8 = sub_1D17BE5B0();
    uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v10 = v8 & ~v9;
    if (((*(void *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_10;
    }
    id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v10);
    char v12 = sub_1D17BE5C0();

    if ((v12 & 1) == 0)
    {
      uint64_t v13 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v13;
        if (((*(void *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v3 + 48) + 8 * v10);
        char v15 = sub_1D17BE5C0();

        if (v15) {
          goto LABEL_18;
        }
      }
LABEL_10:

      continue;
    }
LABEL_18:
    uint64_t v16 = v28;
    if (*(void *)(v28 + 24) <= *(void *)(v28 + 16))
    {
      sub_1D16FCB9C();
      uint64_t v16 = v28;
    }
    uint64_t result = sub_1D17BE5B0();
    uint64_t v18 = v16 + 56;
    uint64_t v19 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v16 + 56 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v16 + 56 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          return result;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v18 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*(void *)(v16 + 48) + 8 * v22) = v27;
    ++*(void *)(v16 + 16);
  }
  while (sub_1D17BE7A0());
  uint64_t v6 = v28;
LABEL_32:
  swift_release();
  return v6;
}

uint64_t sub_1D16D1300(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  uint64_t v31 = *(void *)(a3 + 16);
  if (!v31)
  {
    uint64_t v26 = 0;
    goto LABEL_27;
  }
  uint64_t v32 = a4 + 56;
  uint64_t v30 = a3 + 32;
  swift_bridgeObjectRetain();
  uint64_t v28 = 0;
  for (uint64_t i = 0; i != v31; ++i)
  {
    uint64_t v7 = (uint64_t *)(v30 + 16 * i);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    sub_1D17BED20();
    swift_bridgeObjectRetain();
    sub_1D17BE020();
    uint64_t v10 = sub_1D17BED80();
    uint64_t v11 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v12 = v10 & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = 1 << v12;
    if (((1 << v12) & *(void *)(v32 + 8 * (v12 >> 6))) == 0) {
      goto LABEL_3;
    }
    uint64_t v15 = *(void *)(a4 + 48);
    uint64_t v16 = (void *)(v15 + 16 * v12);
    BOOL v17 = *v16 == v9 && v16[1] == v8;
    if (!v17 && (sub_1D17BEBC0() & 1) == 0)
    {
      uint64_t v21 = ~v11;
      for (unint64_t j = v12 + 1; ; unint64_t j = v23 + 1)
      {
        unint64_t v23 = j & v21;
        if (((*(void *)(v32 + (((j & v21) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v21)) & 1) == 0) {
          break;
        }
        unint64_t v24 = (void *)(v15 + 16 * v23);
        BOOL v25 = *v24 == v9 && v24[1] == v8;
        if (v25 || (sub_1D17BEBC0() & 1) != 0)
        {
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v13 = v23 >> 6;
          uint64_t v14 = 1 << v23;
          goto LABEL_12;
        }
      }
LABEL_3:
      swift_bridgeObjectRelease();
      continue;
    }
    uint64_t result = swift_bridgeObjectRelease();
LABEL_12:
    unint64_t v19 = a1[v13];
    a1[v13] = v14 | v19;
    if ((v14 & v19) == 0 && __OFADD__(v28++, 1))
    {
      __break(1u);
      return result;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = a2;
  uint64_t v26 = v28;
LABEL_27:
  swift_retain();
  return sub_1D16DFA48(a1, v5, v26, a4);
}

void sub_1D16D1514(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1D17BE710();
    sub_1D1668090();
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v4 = v41;
    uint64_t v36 = v42;
    uint64_t v5 = v43;
    uint64_t v6 = v44;
    unint64_t v7 = v45;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v36 = a3 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a3 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
  }
  uint64_t v34 = 0;
  int64_t v35 = (unint64_t)(v5 + 64) >> 6;
  uint64_t v39 = a4 + 56;
  uint64_t v38 = v4;
LABEL_8:
  uint64_t v11 = v6;
  unint64_t v12 = v7;
  while (v4 < 0)
  {
    if (!sub_1D17BE7A0()) {
      goto LABEL_46;
    }
    sub_1D1668090();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v15 = v46;
    swift_unknownObjectRelease();
    uint64_t v6 = v11;
    uint64_t v13 = v12;
    if (!v46) {
      goto LABEL_46;
    }
LABEL_33:
    uint64_t v19 = sub_1D17BE5B0();
    uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    uint64_t v23 = 1 << v21;
    if (((1 << v21) & *(void *)(v39 + 8 * (v21 >> 6))) == 0) {
      goto LABEL_9;
    }
    sub_1D1668090();
    id v24 = *(id *)(*(void *)(a4 + 48) + 8 * v21);
    char v25 = sub_1D17BE5C0();

    if (v25)
    {

LABEL_41:
      uint64_t v4 = v38;
      unint64_t v31 = a1[v22];
      a1[v22] = v23 | v31;
      uint64_t v11 = v6;
      unint64_t v7 = v13;
      unint64_t v12 = v13;
      if ((v23 & v31) == 0)
      {
        if (!__OFADD__(v34++, 1)) {
          goto LABEL_8;
        }
        __break(1u);
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v26 = ~v20;
      for (unint64_t i = v21 + 1; ; unint64_t i = v28 + 1)
      {
        unint64_t v28 = i & v26;
        if (((*(void *)(v39 + (((i & v26) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v26)) & 1) == 0) {
          break;
        }
        id v29 = *(id *)(*(void *)(a4 + 48) + 8 * v28);
        char v30 = sub_1D17BE5C0();

        if (v30)
        {

          unint64_t v22 = v28 >> 6;
          uint64_t v23 = 1 << v28;
          goto LABEL_41;
        }
      }
LABEL_9:

      uint64_t v11 = v6;
      uint64_t v4 = v38;
      unint64_t v12 = v13;
    }
  }
  if (v12)
  {
    uint64_t v13 = (v12 - 1) & v12;
    unint64_t v14 = __clz(__rbit64(v12)) | (v11 << 6);
    uint64_t v6 = v11;
LABEL_32:
    id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    if (!v15) {
      goto LABEL_46;
    }
    goto LABEL_33;
  }
  int64_t v16 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v16 >= v35) {
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v36 + 8 * v16);
    uint64_t v6 = v11 + 1;
    if (!v17)
    {
      uint64_t v6 = v11 + 2;
      if (v11 + 2 >= v35) {
        goto LABEL_45;
      }
      unint64_t v17 = *(void *)(v36 + 8 * v6);
      if (!v17)
      {
        uint64_t v6 = v11 + 3;
        if (v11 + 3 >= v35) {
          goto LABEL_45;
        }
        unint64_t v17 = *(void *)(v36 + 8 * v6);
        if (!v17)
        {
          uint64_t v6 = v11 + 4;
          if (v11 + 4 >= v35) {
            goto LABEL_45;
          }
          unint64_t v17 = *(void *)(v36 + 8 * v6);
          if (!v17)
          {
            uint64_t v6 = v11 + 5;
            if (v11 + 5 >= v35) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v36 + 8 * v6);
            if (!v17)
            {
              uint64_t v18 = v11 + 6;
              while (v35 != v18)
              {
                unint64_t v17 = *(void *)(v36 + 8 * v18++);
                if (v17)
                {
                  uint64_t v6 = v18 - 1;
                  goto LABEL_31;
                }
              }
LABEL_45:
              unint64_t v12 = 0;
LABEL_46:
              sub_1D16681F0(v4, v36, v5, v11, v12);
              swift_retain();
              sub_1D16DFCE0(a1, a2, v34, a4);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v13 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v6 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_1D16D1914(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe, a2);
    bzero((char *)v12 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    sub_1D16D1A9C((void *)((char *)v12 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, a2, v3);
    uint64_t v8 = v7;
    swift_release();
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v6);
    sub_1D16D1A9C((unint64_t *)v9, v5, a2, v3);
    uint64_t v8 = v10;
    swift_release();
    MEMORY[0x1D25FAD70](v9, -1, -1);
  }
  return v8;
}

void sub_1D16D1A9C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v6 = 0;
    uint64_t v51 = a4 + 56;
    uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(a4 + 56);
    int64_t v52 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v54 = 0;
    uint64_t v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          uint64_t v55 = (v9 - 1) & v9;
          int64_t v57 = v6;
          unint64_t v11 = __clz(__rbit64(v9)) | (v6 << 6);
        }
        else
        {
          int64_t v12 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_65;
          }
          if (v12 >= v52) {
            goto LABEL_63;
          }
          unint64_t v13 = *(void *)(v51 + 8 * v12);
          int64_t v14 = v6 + 1;
          if (!v13)
          {
            int64_t v14 = v6 + 2;
            if (v6 + 2 >= v52) {
              goto LABEL_63;
            }
            unint64_t v13 = *(void *)(v51 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v6 + 3;
              if (v6 + 3 >= v52) {
                goto LABEL_63;
              }
              unint64_t v13 = *(void *)(v51 + 8 * v14);
              if (!v13)
              {
                uint64_t v15 = v6 + 4;
                if (v6 + 4 >= v52) {
                  goto LABEL_63;
                }
                unint64_t v13 = *(void *)(v51 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      goto LABEL_67;
                    }
                    if (v14 >= v52) {
                      goto LABEL_63;
                    }
                    unint64_t v13 = *(void *)(v51 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_22;
                    }
                  }
                }
                int64_t v14 = v6 + 4;
              }
            }
          }
LABEL_22:
          uint64_t v55 = (v13 - 1) & v13;
          int64_t v57 = v14;
          unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        }
        id v16 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
        uint64_t v17 = sub_1D17BE5B0();
        uint64_t v18 = -1 << *(unsigned char *)(v5 + 32);
        unint64_t v19 = v17 & ~v18;
        unint64_t v20 = v19 >> 6;
        uint64_t v21 = 1 << v19;
        if (((1 << v19) & *(void *)(v10 + 8 * (v19 >> 6))) != 0) {
          break;
        }
LABEL_6:

        uint64_t v4 = a4;
        unint64_t v9 = v55;
        int64_t v6 = v57;
      }
      sub_1D1668090();
      id v22 = *(id *)(*(void *)(v5 + 48) + 8 * v19);
      char v23 = sub_1D17BE5C0();

      if ((v23 & 1) == 0)
      {
        uint64_t v24 = ~v18;
        for (unint64_t i = v19 + 1; ; unint64_t i = v26 + 1)
        {
          unint64_t v26 = i & v24;
          uint64_t v5 = a3;
          if (((*(void *)(v10 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
            break;
          }
          id v27 = *(id *)(*(void *)(a3 + 48) + 8 * v26);
          char v28 = sub_1D17BE5C0();

          if (v28)
          {

            unint64_t v20 = v26 >> 6;
            uint64_t v21 = 1 << v26;
            goto LABEL_30;
          }
        }
        goto LABEL_6;
      }

LABEL_30:
      int64_t v6 = v57;
      uint64_t v5 = a3;
      a1[v20] |= v21;
      unint64_t v9 = v55;
      BOOL v29 = __OFADD__(v54++, 1);
      uint64_t v4 = a4;
      if (v29) {
        goto LABEL_66;
      }
    }
  }
  int64_t v30 = 0;
  uint64_t v53 = a3 + 56;
  uint64_t v54 = 0;
  uint64_t v31 = 1 << *(unsigned char *)(a3 + 32);
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  else {
    uint64_t v32 = -1;
  }
  unint64_t v33 = v32 & *(void *)(a3 + 56);
  int64_t v56 = (unint64_t)(v31 + 63) >> 6;
  uint64_t v34 = a4 + 56;
  while (1)
  {
    if (v33)
    {
      unint64_t v35 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      int64_t v36 = v30;
      unint64_t v37 = v35 | (v30 << 6);
      uint64_t v5 = a3;
      goto LABEL_55;
    }
    int64_t v38 = v30 + 1;
    uint64_t v5 = a3;
    if (__OFADD__(v30, 1))
    {
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v38 >= v56) {
      goto LABEL_63;
    }
    unint64_t v39 = *(void *)(v53 + 8 * v38);
    int64_t v40 = v30 + 1;
    if (!v39)
    {
      int64_t v40 = v30 + 2;
      if (v30 + 2 >= v56) {
        goto LABEL_63;
      }
      unint64_t v39 = *(void *)(v53 + 8 * v40);
      if (!v39)
      {
        int64_t v40 = v30 + 3;
        if (v30 + 3 >= v56) {
          goto LABEL_63;
        }
        unint64_t v39 = *(void *)(v53 + 8 * v40);
        if (!v39) {
          break;
        }
      }
    }
LABEL_54:
    unint64_t v33 = (v39 - 1) & v39;
    int64_t v36 = v40;
    unint64_t v37 = __clz(__rbit64(v39)) + (v40 << 6);
LABEL_55:
    unint64_t v58 = v37;
    id v42 = *(id *)(*(void *)(v5 + 48) + 8 * v37);
    uint64_t v43 = sub_1D17BE5B0();
    uint64_t v44 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v45 = v43 & ~v44;
    if (((*(void *)(v34 + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45) & 1) == 0) {
      goto LABEL_38;
    }
    sub_1D1668090();
    id v46 = *(id *)(*(void *)(a4 + 48) + 8 * v45);
    uint64_t v5 = sub_1D17BE5C0();

    if (v5)
    {
LABEL_60:

      *(unint64_t *)((char *)a1 + ((v58 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v58;
      BOOL v29 = __OFADD__(v54++, 1);
      uint64_t v4 = a4;
      int64_t v30 = v36;
      if (v29)
      {
        __break(1u);
LABEL_63:
        swift_retain();
        sub_1D16DFCE0(a1, a2, v54, v5);
        return;
      }
    }
    else
    {
      uint64_t v47 = ~v44;
      while (1)
      {
        unint64_t v45 = (v45 + 1) & v47;
        if (((*(void *)(v34 + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45) & 1) == 0) {
          break;
        }
        id v48 = *(id *)(*(void *)(a4 + 48) + 8 * v45);
        uint64_t v5 = sub_1D17BE5C0();

        if (v5) {
          goto LABEL_60;
        }
      }
LABEL_38:

      uint64_t v4 = a4;
      int64_t v30 = v36;
    }
  }
  uint64_t v41 = v30 + 4;
  if (v30 + 4 >= v56) {
    goto LABEL_63;
  }
  unint64_t v39 = *(void *)(v53 + 8 * v41);
  if (v39)
  {
    int64_t v40 = v30 + 4;
    goto LABEL_54;
  }
  while (1)
  {
    int64_t v40 = v41 + 1;
    if (__OFADD__(v41, 1)) {
      break;
    }
    if (v40 >= v56) {
      goto LABEL_63;
    }
    unint64_t v39 = *(void *)(v53 + 8 * v40);
    ++v41;
    if (v39) {
      goto LABEL_54;
    }
  }
LABEL_68:
  __break(1u);
}

void sub_1D16D1FB4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D1668090();
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v3 = v25;
    uint64_t v4 = v26;
    uint64_t v5 = v27;
    uint64_t v6 = v28;
    unint64_t v7 = v29;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v4 = a1 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
  }
  uint64_t v22 = v5;
  int64_t v11 = (unint64_t)(v5 + 64) >> 6;
  if ((v3 & 0x8000000000000000) == 0) {
    goto LABEL_12;
  }
LABEL_10:
  int64_t v12 = (void *)sub_1D17BE7A0();
  if (!v12)
  {
LABEL_33:
    uint64_t v24 = 0;
    sub_1D16681F0(v3, v4, v22, v6, v7);
    return;
  }
  id v23 = v12;
  sub_1D1668090();
  swift_dynamicCast();
  for (i = v24; ; id v20 = i)
  {
    if (sub_1D1671E50(i, *v2))
    {
      uint64_t v21 = (void *)_s17KnowledgeGraphKit9MAClusterV6remove4nodeSo6MANodeCSgAG_tF_0(i);

      if (v3 < 0) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1D1671FA0(&v23, i);

      if (v3 < 0) {
        goto LABEL_10;
      }
    }
LABEL_12:
    if (v7)
    {
      unint64_t v14 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v15 = v14 | (v6 << 6);
      goto LABEL_28;
    }
    int64_t v16 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v16 >= v11) {
      goto LABEL_32;
    }
    unint64_t v17 = *(void *)(v4 + 8 * v16);
    uint64_t v18 = v6 + 1;
    if (!v17)
    {
      uint64_t v18 = v6 + 2;
      if (v6 + 2 >= v11) {
        goto LABEL_32;
      }
      unint64_t v17 = *(void *)(v4 + 8 * v18);
      if (!v17)
      {
        uint64_t v18 = v6 + 3;
        if (v6 + 3 >= v11) {
          goto LABEL_32;
        }
        unint64_t v17 = *(void *)(v4 + 8 * v18);
        if (!v17)
        {
          uint64_t v18 = v6 + 4;
          if (v6 + 4 >= v11) {
            goto LABEL_32;
          }
          unint64_t v17 = *(void *)(v4 + 8 * v18);
          if (!v17)
          {
            uint64_t v19 = v6 + 5;
            while (v11 != v19)
            {
              unint64_t v17 = *(void *)(v4 + 8 * v19++);
              if (v17)
              {
                uint64_t v18 = v19 - 1;
                goto LABEL_27;
              }
            }
LABEL_32:
            unint64_t v7 = 0;
            goto LABEL_33;
          }
        }
      }
    }
LABEL_27:
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
    uint64_t v6 = v18;
LABEL_28:
    unint64_t i = *(void **)(*(void *)(v3 + 48) + 8 * v15);
    uint64_t v24 = i;
  }
  __break(1u);
}

uint64_t dispatch thunk of MAGraphSimilarity.similarityMatrix(distance:directed:options:identity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t type metadata accessor for MASimilarityDistance()
{
  return self;
}

uint64_t method lookup function for MASimilarityDistance(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MASimilarityDistance);
}

uint64_t dispatch thunk of MASimilarityDistance.__allocating_init(directed:options:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of MASimilarityDistance.prepare(graph:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of MASimilarityDistance.distance(source:target:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of static MASimilarityDistance.distance(source:target:directed:options:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t type metadata accessor for MAShortestPathSimilarityDistance()
{
  return self;
}

uint64_t type metadata accessor for MACommonNeighborsSimilarityDistance()
{
  return self;
}

uint64_t type metadata accessor for MAEuclideanSimilarityDistance()
{
  return self;
}

uint64_t type metadata accessor for MACosineSimilarityDistance()
{
  return self;
}

uint64_t type metadata accessor for MAProbabilitySimilarityDistance()
{
  return self;
}

uint64_t type metadata accessor for MAFrequencyWeightedCommonNeighborsSimilarityDistance()
{
  return self;
}

uint64_t type metadata accessor for MAPreferentialAttachmentSimilarityDistance()
{
  return self;
}

uint64_t type metadata accessor for MAExponentiallyDampedPathCountsSimilarityDistance()
{
  return self;
}

uint64_t method lookup function for MAExponentiallyDampedPathCountsSimilarityDistance(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MAExponentiallyDampedPathCountsSimilarityDistance);
}

float ConfusionMatrix.truePositiveCount.getter()
{
  return *(float *)v0;
}

float ConfusionMatrix.trueNegativeCount.getter()
{
  return *(float *)(v0 + 4);
}

float ConfusionMatrix.falsePositiveCount.getter()
{
  return *(float *)(v0 + 8);
}

float ConfusionMatrix.falseNegativeCount.getter()
{
  return *(float *)(v0 + 12);
}

KnowledgeGraphKit::ConfusionMatrix __swiftcall ConfusionMatrix.init(truePositiveCount:trueNegativeCount:falsePositiveCount:falseNegativeCount:)(Swift::Float truePositiveCount, Swift::Float trueNegativeCount, Swift::Float falsePositiveCount, Swift::Float falseNegativeCount)
{
  *uint64_t v4 = truePositiveCount;
  v4[1] = trueNegativeCount;
  v4[2] = falsePositiveCount;
  v4[3] = falseNegativeCount;
  result.falseNegativeCount = falseNegativeCount;
  result.falsePositiveCount = falsePositiveCount;
  result.trueNegativeCount = trueNegativeCount;
  result.truePositiveCount = truePositiveCount;
  return result;
}

KnowledgeGraphKit::ConfusionMatrix __swiftcall ConfusionMatrix.init()()
{
  *uint64_t v0 = 0;
  v0[1] = 0;
  return result;
}

float ConfusionMatrix.predictedPositiveCount.getter()
{
  return *v0 + v0[2];
}

float ConfusionMatrix.predictedNegativeCount.getter()
{
  return *(float *)(v0 + 4) + *(float *)(v0 + 12);
}

float ConfusionMatrix.conditionPositiveCount.getter()
{
  return *v0 + v0[3];
}

float ConfusionMatrix.conditionNegativeCount.getter()
{
  return *(float *)(v0 + 4) + *(float *)(v0 + 8);
}

float ConfusionMatrix.totalCount.getter()
{
  return (float)(*v0 + v0[2]) + (float)(v0[1] + v0[3]);
}

unint64_t ConfusionMatrix.precision.getter()
{
  float v1 = *v0 + v0[2];
  if (v1 == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = COERCE_UNSIGNED_INT(*v0 / v1);
  }
  return v2 | ((unint64_t)(v1 == 0.0) << 32);
}

unint64_t ConfusionMatrix.recall.getter()
{
  float v1 = *v0 + v0[3];
  if (v1 == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = COERCE_UNSIGNED_INT(*v0 / v1);
  }
  return v2 | ((unint64_t)(v1 == 0.0) << 32);
}

float ConfusionMatrix.f1Score.getter()
{
  float v1 = *v0;
  float v2 = *v0 + v0[2];
  float result = 0.0;
  if (v2 != 0.0)
  {
    float v4 = v1 + v0[3];
    if (v4 != 0.0) {
      return (float)((float)((float)(v1 / v2) * (float)(v1 / v4)) + (float)((float)(v1 / v2) * (float)(v1 / v4)))
    }
           / (float)((float)(v1 / v2) + (float)(v1 / v4));
  }
  return result;
}

float ConfusionMatrix.mccScore.getter()
{
  float v1 = v0[1];
  float v2 = v0[2];
  float v3 = v0[3];
  float v4 = sqrtf((float)(v1 + v3) * (float)((float)(v1 + v2) * (float)((float)(*v0 + v2) * (float)(*v0 + v3))));
  float v5 = (float)((float)(*v0 * v1) - (float)(v2 * v3)) / v4;
  BOOL v6 = v4 == 0.0;
  float result = 0.0;
  if (!v6) {
    return v5;
  }
  return result;
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for ConfusionMatrix()
{
  return &type metadata for ConfusionMatrix;
}

uint64_t sub_1D16D25E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (v7)
  {
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v13 = v12 | (v10 << 6);
LABEL_24:
    uint64_t v17 = 8 * v13;
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + v17);
    uint64_t v19 = *a3;
    if (*(void *)(*a3 + 16) && (unint64_t v20 = sub_1D165AB04(*(void *)(*(void *)(a1 + 48) + v17)), (v21 & 1) != 0))
    {
      uint64_t v11 = *(void *)(*(void *)(v19 + 56) + 8 * v20);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v11 = 0;
    }
    swift_bridgeObjectRetain_n();
    sub_1D167239C(&v22, v18, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v14 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v14 >= v8) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v23 + 8 * v14);
  ++v10;
  if (v15) {
    goto LABEL_23;
  }
  int64_t v10 = v14 + 1;
  if (v14 + 1 >= v8) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v23 + 8 * v10);
  if (v15) {
    goto LABEL_23;
  }
  int64_t v10 = v14 + 2;
  if (v14 + 2 >= v8) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v23 + 8 * v10);
  if (v15) {
    goto LABEL_23;
  }
  int64_t v10 = v14 + 3;
  if (v14 + 3 >= v8) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v23 + 8 * v10);
  if (v15)
  {
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    goto LABEL_24;
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v23 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v23 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_1D16D27DC()
{
  float v1 = v0;
  if ((*v0 & 0x8000000000000000) != 0)
  {
    if (sub_1D17BE7A0())
    {
      sub_1D1668090();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      if (v15) {
        goto LABEL_6;
      }
    }
    return;
  }
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  if (v2)
  {
    uint64_t v4 = (v2 - 1) & v2;
    unint64_t v5 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_4:
    uint64_t v6 = *(void **)(*(void *)(*v0 + 48) + 8 * v5);
    id v7 = v6;
    goto LABEL_5;
  }
  int64_t v9 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
LABEL_35:
    __break(1u);
    return;
  }
  int64_t v10 = (unint64_t)(v0[2] + 64) >> 6;
  if (v9 >= v10)
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
    goto LABEL_5;
  }
  uint64_t v11 = v0[1];
  unint64_t v12 = *(void *)(v11 + 8 * v9);
  if (v12)
  {
LABEL_14:
    uint64_t v4 = (v12 - 1) & v12;
    unint64_t v5 = __clz(__rbit64(v12)) + (v9 << 6);
    int64_t v3 = v9;
    goto LABEL_4;
  }
  int64_t v13 = v3 + 2;
  if (v3 + 2 >= v10) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v11 + 8 * v13);
  if (v12)
  {
LABEL_19:
    int64_t v9 = v13;
    goto LABEL_14;
  }
  if (v3 + 3 >= v10) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v11 + 8 * (v3 + 3));
  if (v12)
  {
    int64_t v9 = v3 + 3;
    goto LABEL_14;
  }
  int64_t v13 = v3 + 4;
  if (v3 + 4 < v10)
  {
    unint64_t v12 = *(void *)(v11 + 8 * v13);
    if (v12) {
      goto LABEL_19;
    }
    int64_t v9 = v3 + 5;
    if (v3 + 5 < v10)
    {
      unint64_t v12 = *(void *)(v11 + 8 * v9);
      if (v12) {
        goto LABEL_14;
      }
      int64_t v9 = v10 - 1;
      int64_t v14 = v3 + 6;
      while (v10 != v14)
      {
        unint64_t v12 = *(void *)(v11 + 8 * v14++);
        if (v12)
        {
          int64_t v9 = v14 - 1;
          goto LABEL_14;
        }
      }
LABEL_31:
      uint64_t v6 = 0;
      uint64_t v4 = 0;
      int64_t v3 = v9;
      goto LABEL_5;
    }
LABEL_32:
    uint64_t v6 = 0;
    uint64_t v4 = 0;
    int64_t v3 = v13;
    goto LABEL_5;
  }
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  v3 += 3;
LABEL_5:
  v1[3] = v3;
  v1[4] = v4;
  if (v6)
  {
LABEL_6:
    uint64_t v8 = v1[5];
    if (!__OFADD__(v8, 1))
    {
      v1[5] = v8 + 1;
      return;
    }
    __break(1u);
    goto LABEL_35;
  }
}

uint64_t sub_1D16D29CC()
{
  int64_t v2 = v0[3];
  unint64_t v1 = v0[4];
  int64_t v3 = v2;
  if (!v1)
  {
    int64_t v9 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      goto LABEL_26;
    }
    int64_t v10 = (unint64_t)(v0[2] + 64) >> 6;
    if (v9 < v10)
    {
      uint64_t v11 = v0[1];
      unint64_t v12 = *(void *)(v11 + 8 * v9);
      if (v12)
      {
LABEL_8:
        uint64_t v4 = (v12 - 1) & v12;
        unint64_t v5 = __clz(__rbit64(v12)) + (v9 << 6);
        int64_t v3 = v9;
        goto LABEL_3;
      }
      int64_t v13 = v2 + 2;
      int64_t v3 = v2 + 1;
      if (v2 + 2 < v10)
      {
        unint64_t v12 = *(void *)(v11 + 8 * v13);
        if (v12)
        {
LABEL_11:
          int64_t v9 = v13;
          goto LABEL_8;
        }
        int64_t v3 = v2 + 2;
        if (v2 + 3 < v10)
        {
          unint64_t v12 = *(void *)(v11 + 8 * (v2 + 3));
          if (v12)
          {
            int64_t v9 = v2 + 3;
            goto LABEL_8;
          }
          int64_t v13 = v2 + 4;
          int64_t v3 = v2 + 3;
          if (v2 + 4 < v10)
          {
            unint64_t v12 = *(void *)(v11 + 8 * v13);
            if (v12) {
              goto LABEL_11;
            }
            int64_t v9 = v2 + 5;
            int64_t v3 = v2 + 4;
            if (v2 + 5 < v10)
            {
              unint64_t v12 = *(void *)(v11 + 8 * v9);
              if (v12) {
                goto LABEL_8;
              }
              int64_t v3 = v10 - 1;
              int64_t v14 = v2 + 6;
              while (v10 != v14)
              {
                unint64_t v12 = *(void *)(v11 + 8 * v14++);
                if (v12)
                {
                  int64_t v9 = v14 - 1;
                  goto LABEL_8;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v7 = 0;
    v0[3] = v3;
    v0[4] = 0;
    return v7;
  }
  uint64_t v4 = (v1 - 1) & v1;
  unint64_t v5 = __clz(__rbit64(v1)) | (v2 << 6);
LABEL_3:
  uint64_t v6 = *(void **)(*(void *)(*v0 + 48) + 8 * v5);
  v0[3] = v3;
  v0[4] = v4;
  uint64_t v7 = v0[5];
  if (!__OFADD__(v7, 1))
  {
    v0[5] = v7 + 1;
    id v8 = v6;
    swift_bridgeObjectRetain();
    return v7;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void sub_1D16D2B44(void **a1)
{
  int64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v2 = (void *)sub_1D16FA2B0(v2);
  }
  uint64_t v3 = v2[2];
  v4[0] = (uint64_t)(v2 + 4);
  v4[1] = v3;
  sub_1D16DEDAC(v4);
  *a1 = v2;
}

uint64_t MADistribution.projections.getter()
{
  return swift_bridgeObjectRetain();
}

double MADistribution.__allocating_init(projections:weights:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(unsigned char *)(v4 + 176) = 1;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  return result;
}

uint64_t MADistribution.init(projections:weights:)(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(unsigned char *)(v2 + 176) = 1;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t MADistribution.__allocating_init(distributions:)(unint64_t a1)
{
  swift_allocObject();
  uint64_t v2 = sub_1D16E09E0(a1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t MADistribution.init(distributions:)(unint64_t a1)
{
  uint64_t v1 = sub_1D16E09E0(a1);
  swift_bridgeObjectRelease();
  return v1;
}

id sub_1D16D2CDC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  *a2 = *(void *)a1;
  a2[1] = v3;
  return v2;
}

void sub_1D16D2CF0()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_1D167661C(v0);
}

uint64_t sub_1D16D2D1C()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  unint64_t v1 = sub_1D16D2D80(v0);
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_1D167B3C0(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1D16D2D80(uint64_t a1)
{
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v1 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    int64_t v9 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v5) {
      goto LABEL_23;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v9);
    ++v7;
    if (!v10)
    {
      int64_t v7 = v9 + 1;
      if (v9 + 1 >= v5) {
        goto LABEL_23;
      }
      uint64_t v10 = *(void *)(v1 + 8 * v7);
      if (!v10)
      {
        int64_t v7 = v9 + 2;
        if (v9 + 2 >= v5) {
          goto LABEL_23;
        }
        uint64_t v10 = *(void *)(v1 + 8 * v7);
        if (!v10)
        {
          int64_t v7 = v9 + 3;
          if (v9 + 3 >= v5) {
            goto LABEL_23;
          }
          uint64_t v10 = *(void *)(v1 + 8 * v7);
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v4 = (v10 - 1) & v10;
LABEL_5:
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t result = sub_1D16634F8(v8);
  }
  int64_t v11 = v9 + 4;
  if (v11 >= v5)
  {
LABEL_23:
    swift_release();
    return v12;
  }
  uint64_t v10 = *(void *)(v1 + 8 * v11);
  if (v10)
  {
    int64_t v7 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_23;
    }
    uint64_t v10 = *(void *)(v1 + 8 * v7);
    ++v11;
    if (v10) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1D16D2EF0()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_1D167661C(v0);
  if ((v1 & 0xC000000000000001) != 0) {
    uint64_t v2 = sub_1D17BE760();
  }
  else {
    uint64_t v2 = *(void *)(v1 + 16);
  }
  swift_bridgeObjectRelease();
  uint64_t v3 = swift_bridgeObjectRetain();
  unint64_t v4 = sub_1D16D2D80(v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_1D167B3C0(v4);
  swift_bridgeObjectRelease();
  if ((v5 & 0xC000000000000001) != 0) {
    sub_1D17BE760();
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1D16D2FC0()
{
  uint64_t v0 = sub_1D16D2EF0();
  sub_1D16D2EF0();
  uint64_t result = v0 * v1;
  if ((unsigned __int128)(v0 * (__int128)v1) >> 64 != (v0 * v1) >> 63) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D16D2FFC()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_1D167661C(v0);
  if ((v1 & 0xC000000000000001) != 0) {
    uint64_t v2 = sub_1D17BE760();
  }
  else {
    uint64_t v2 = *(void *)(v1 + 16);
  }
  swift_bridgeObjectRelease();
  uint64_t v3 = swift_bridgeObjectRetain();
  unint64_t v4 = sub_1D16D2D80(v3);
  swift_bridgeObjectRelease();
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1D16D30D0(void *a1)
{
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_1D167661C(v3);
  char v5 = sub_1D1671E50(a1, v4);
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = swift_bridgeObjectRetain();
    unint64_t v7 = sub_1D16D2D80(v6);
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_1D167B3C0(v7);
    swift_bridgeObjectRelease();
    LOBYTE(v7) = sub_1D1671E50(a1, v8);
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v9 = *(void *)(v1 + 24);
  if (!v9 || !*(void *)(v9 + 16)) {
    return 0x3FF0000000000000;
  }
  id v10 = a1;
  unint64_t v11 = sub_1D165A9D0((uint64_t)v10);
  if (v12) {
    uint64_t v13 = *(void *)(*(void *)(v9 + 56) + 8 * v11);
  }
  else {
    uint64_t v13 = 0x3FF0000000000000;
  }

  return v13;
}

void *sub_1D16D31D8()
{
  if (v0[4])
  {
    uint64_t v1 = (void *)v0[4];
  }
  else
  {
    uint64_t v2 = v0;
    uint64_t v3 = swift_bridgeObjectRetain();
    sub_1D167661C(v3);
    unint64_t v5 = sub_1D1666CF8(v4);
    swift_bridgeObjectRelease();
    uint64_t v6 = swift_bridgeObjectRetain();
    unint64_t v7 = sub_1D16D2D80(v6);
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_1D167B3C0(v7);
    swift_bridgeObjectRelease();
    unint64_t v9 = sub_1D1666CF8(v8);
    swift_bridgeObjectRelease();
    sub_1D1664074(v9);
    swift_retain();
    uint64_t v10 = sub_1D16DFFEC(v5, v2);
    swift_release();
    uint64_t v11 = *(void *)(v10 + 16);
    type metadata accessor for MAVectorRepresentation();
    uint64_t v1 = (void *)swift_allocObject();
    v1[2] = 1;
    v1[3] = v11;
    v1[4] = v10;
    v1[5] = v5;
    v2[4] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1D16D3308(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t (*sub_1D16D3318(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D31D8();
  return sub_1D16D3360;
}

uint64_t sub_1D16D3360(void *a1)
{
  *(void *)(a1[1] + 32) = *a1;
  return swift_release();
}

void *sub_1D16D3370()
{
  if (v0[5])
  {
    uint64_t v1 = (void *)v0[5];
  }
  else
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    sub_1D167661C(v2);
    unint64_t v4 = sub_1D1666CF8(v3);
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v5 = sub_1D16DFFEC(v4, v0);
    swift_release();
    uint64_t v6 = *(void *)(v5 + 16);
    type metadata accessor for MAVectorRepresentation();
    uint64_t v1 = (void *)swift_allocObject();
    v1[2] = 1;
    v1[3] = v6;
    v1[4] = v5;
    v1[5] = v4;
    v0[5] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1D16D3444(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return swift_release();
}

uint64_t (*sub_1D16D3454(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D3370();
  return sub_1D16D349C;
}

uint64_t sub_1D16D349C(void *a1)
{
  *(void *)(a1[1] + 40) = *a1;
  return swift_release();
}

void *sub_1D16D34AC()
{
  if (v0[6])
  {
    uint64_t v1 = (void *)v0[6];
  }
  else
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    unint64_t v3 = sub_1D16D2D80(v2);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1D167B3C0(v3);
    swift_bridgeObjectRelease();
    unint64_t v5 = sub_1D1666CF8(v4);
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v6 = sub_1D16DFFEC(v5, v0);
    swift_release();
    uint64_t v7 = *(void *)(v6 + 16);
    type metadata accessor for MAVectorRepresentation();
    uint64_t v1 = (void *)swift_allocObject();
    v1[2] = 1;
    v1[3] = v7;
    v1[4] = v6;
    v1[5] = v5;
    v0[6] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1D16D35A4(uint64_t a1)
{
  *(void *)(v1 + 48) = a1;
  return swift_release();
}

uint64_t (*sub_1D16D35B4(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D34AC();
  return sub_1D16D35FC;
}

uint64_t sub_1D16D35FC(void *a1)
{
  *(void *)(a1[1] + 48) = *a1;
  return swift_release();
}

uint64_t sub_1D16D360C()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D17C9600;
  *(void *)(inited + 32) = v0;
  unint64_t v5 = inited;
  sub_1D17BE150();
  swift_retain();
  unint64_t v2 = swift_bridgeObjectRetain();
  sub_1D166408C(v2);
  type metadata accessor for MADistribution();
  swift_allocObject();
  uint64_t v3 = sub_1D16E09E0(v5);
  swift_bridgeObjectRelease();
  return v3;
}

double sub_1D16D36C0(uint64_t a1)
{
  uint64_t v2 = v1;
  if (*(void *)(v2 + 24))
  {
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v4 = swift_bridgeObjectRetain();
    uint64_t v5 = sub_1D16E121C(v4, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4FBC868];
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_1D16E1760(v6, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for MADistribution();
  uint64_t v8 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(unsigned char *)(v8 + 176) = 1;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v5;
  return result;
}

uint64_t sub_1D16D37C4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  int64_t v73 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = (void *)MEMORY[0x1E4FBC868];
  unint64_t v67 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v63 = a1;
  uint64_t v64 = v3;
  uint64_t v62 = v3 + 64;
  if (!v7) {
    goto LABEL_6;
  }
  do
  {
    while (1)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v8 << 6);
LABEL_17:
      uint64_t v16 = 8 * v12;
      uint64_t v17 = *(void **)(*(void *)(v3 + 48) + v16);
      uint64_t v18 = *(void *)(*(void *)(v3 + 56) + v16);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      id v19 = v17;
      uint64_t v20 = sub_1D16E1DB8(v18, a1);
      uint64_t v74 = v9;
      swift_bridgeObjectRelease();
      if ((v20 & 0xC000000000000001) == 0)
      {
        if (*(uint64_t *)(v20 + 16) < 1) {
          goto LABEL_19;
        }
        break;
      }
      if (sub_1D17BE760() >= 1) {
        break;
      }
LABEL_19:
      swift_release();
      swift_bridgeObjectRelease();

      if (!v7) {
        goto LABEL_6;
      }
    }
    id v21 = v19;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v75 = v10;
    sub_1D165EDC4(v20, v21, isUniquelyReferenced_nonNull_native);
    uint64_t v23 = v10;
    uint64_t v69 = v21;

    swift_bridgeObjectRelease();
    uint64_t v24 = *(void *)(v65 + 24);
    uint64_t v66 = v23;
    if (v24 && *(void *)(v24 + 16))
    {
      id v25 = v21;
      unint64_t v26 = sub_1D165A9D0((uint64_t)v25);
      if (v27)
      {
        double v28 = *(double *)(*(void *)(v24 + 56) + 8 * v26);
        char v29 = swift_isUniquelyReferenced_nonNull_native();
        v75 = v67;
        sub_1D165EC88(v25, v29, v28);

        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    uint64_t v72 = v24;
    if ((v20 & 0xC000000000000001) != 0)
    {
      sub_1D17BE710();
      sub_1D1668090();
      sub_1D1674A20();
      sub_1D17BE390();
      uint64_t v20 = v76;
      uint64_t v71 = v77;
      uint64_t v30 = v78;
      uint64_t v31 = v79;
      unint64_t v32 = v80;
    }
    else
    {
      uint64_t v31 = 0;
      uint64_t v33 = -1 << *(unsigned char *)(v20 + 32);
      uint64_t v71 = v20 + 56;
      uint64_t v30 = ~v33;
      uint64_t v34 = -v33;
      if (v34 < 64) {
        uint64_t v35 = ~(-1 << v34);
      }
      else {
        uint64_t v35 = -1;
      }
      unint64_t v32 = v35 & *(void *)(v20 + 56);
    }
    int64_t v70 = (unint64_t)(v30 + 64) >> 6;
    while (1)
    {
      uint64_t v36 = v31;
      if (v20 < 0)
      {
        if (!sub_1D17BE7A0()) {
          goto LABEL_76;
        }
        sub_1D1668090();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v39 = v75;
        swift_unknownObjectRelease();
        uint64_t v24 = v72;
        if (!v75) {
          goto LABEL_76;
        }
        goto LABEL_61;
      }
      if (v32)
      {
        unint64_t v37 = __clz(__rbit64(v32));
        v32 &= v32 - 1;
        unint64_t v38 = v37 | (v31 << 6);
        goto LABEL_60;
      }
      int64_t v40 = v31 + 1;
      if (__OFADD__(v31, 1)) {
        goto LABEL_80;
      }
      if (v40 >= v70) {
        goto LABEL_76;
      }
      unint64_t v41 = *(void *)(v71 + 8 * v40);
      ++v31;
      if (!v41)
      {
        uint64_t v31 = v36 + 2;
        if (v36 + 2 >= v70) {
          goto LABEL_76;
        }
        unint64_t v41 = *(void *)(v71 + 8 * v31);
        if (!v41)
        {
          uint64_t v31 = v36 + 3;
          if (v36 + 3 >= v70) {
            goto LABEL_76;
          }
          unint64_t v41 = *(void *)(v71 + 8 * v31);
          if (!v41)
          {
            uint64_t v31 = v36 + 4;
            if (v36 + 4 >= v70) {
              goto LABEL_76;
            }
            unint64_t v41 = *(void *)(v71 + 8 * v31);
            if (!v41) {
              break;
            }
          }
        }
      }
LABEL_59:
      unint64_t v32 = (v41 - 1) & v41;
      unint64_t v38 = __clz(__rbit64(v41)) + (v31 << 6);
LABEL_60:
      id v39 = *(id *)(*(void *)(v20 + 48) + 8 * v38);
      if (!v39) {
        goto LABEL_76;
      }
LABEL_61:
      if (v24 && *(void *)(v24 + 16))
      {
        id v43 = v39;
        unint64_t v44 = sub_1D165A9D0((uint64_t)v43);
        if ((v45 & 1) == 0)
        {

          uint64_t v24 = v72;
          goto LABEL_39;
        }
        uint64_t v46 = *(void *)(*(void *)(v72 + 56) + 8 * v44);
        char v47 = swift_isUniquelyReferenced_nonNull_native();
        v75 = v67;
        unint64_t v49 = sub_1D165A9D0((uint64_t)v43);
        uint64_t v50 = v67[2];
        BOOL v51 = (v48 & 1) == 0;
        uint64_t v52 = v50 + v51;
        if (__OFADD__(v50, v51)) {
          goto LABEL_82;
        }
        if (v67[3] < v52)
        {
          char v68 = v48;
          sub_1D16A28F8(v52, v47);
          unint64_t v53 = sub_1D165A9D0((uint64_t)v43);
          int v55 = v54 & 1;
          char v48 = v68;
          if ((v68 & 1) != v55) {
            goto LABEL_84;
          }
          unint64_t v49 = v53;
          goto LABEL_68;
        }
        uint64_t v24 = v72;
        if ((v47 & 1) == 0)
        {
          char v60 = v48;
          sub_1D16A6A54();
          char v48 = v60;
LABEL_68:
          uint64_t v24 = v72;
        }
        unint64_t v67 = v75;
        if (v48)
        {
          *(void *)(v75[7] + 8 * v49) = v46;
        }
        else
        {
          v75[(v49 >> 6) + 8] |= 1 << v49;
          uint64_t v56 = 8 * v49;
          *(void *)(v75[6] + v56) = v43;
          *(void *)(v75[7] + v56) = v46;
          uint64_t v57 = v75[2];
          BOOL v13 = __OFADD__(v57, 1);
          uint64_t v58 = v57 + 1;
          if (v13) {
            goto LABEL_83;
          }
          v75[2] = v58;
          id v59 = v43;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_39:
      }
    }
    uint64_t v42 = v36 + 5;
    while (v70 != v42)
    {
      unint64_t v41 = *(void *)(v71 + 8 * v42++);
      if (v41)
      {
        uint64_t v31 = v42 - 1;
        goto LABEL_59;
      }
    }
LABEL_76:
    sub_1D1668088();
    swift_bridgeObjectRelease();

    uint64_t v10 = v66;
    a1 = v63;
    uint64_t v3 = v64;
    uint64_t v4 = v62;
    uint64_t v9 = v74;
  }
  while (v7);
LABEL_6:
  BOOL v13 = __OFADD__(v8++, 1);
  if (v13)
  {
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  if (v8 >= v73) {
    goto LABEL_78;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v8 + 1;
  if (v8 + 1 >= v73) {
    goto LABEL_78;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v8 = v15;
LABEL_16:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v8 << 6);
    goto LABEL_17;
  }
  int64_t v15 = v8 + 2;
  if (v8 + 2 >= v73) {
    goto LABEL_78;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v8 + 3;
  if (v8 + 3 >= v73)
  {
LABEL_78:
    swift_release();
    type metadata accessor for MADistribution();
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(unsigned char *)(result + 176) = 1;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(void *)(result + 16) = v10;
    *(void *)(result + 24) = v67;
  }
  else
  {
    unint64_t v14 = *(void *)(v4 + 8 * v15);
    if (v14) {
      goto LABEL_15;
    }
    while (1)
    {
      int64_t v8 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        break;
      }
      if (v8 >= v73) {
        goto LABEL_78;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v8);
      ++v15;
      if (v14) {
        goto LABEL_16;
      }
    }
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    sub_1D1668090();
    uint64_t result = sub_1D17BEC60();
    __break(1u);
  }
  return result;
}

uint64_t sub_1D16D3E68(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  uint64_t v6 = sub_1D16E1760(v4, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v7 = 0;
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v75 = v6 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v8;
  int64_t v76 = (unint64_t)(v9 + 63) >> 6;
  unint64_t v12 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v69 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v64 = v6;
  uint64_t v65 = a2;
  if ((v10 & v8) == 0) {
    goto LABEL_6;
  }
  while (2)
  {
    while (1)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
LABEL_17:
      uint64_t v18 = 8 * v14;
      id v19 = *(void **)(*(void *)(v6 + 48) + v18);
      uint64_t v20 = *(void *)(*(void *)(v6 + 56) + v18);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      id v21 = v19;
      uint64_t v22 = sub_1D16E1DB8(v20, a2);
      swift_bridgeObjectRelease();
      if ((v22 & 0xC000000000000001) != 0) {
        break;
      }
      if (*(uint64_t *)(v22 + 16) >= 1) {
        goto LABEL_22;
      }
LABEL_19:
      swift_release();
      swift_bridgeObjectRelease();

      if (!v11) {
        goto LABEL_6;
      }
    }
    if (sub_1D17BE760() < 1) {
      goto LABEL_19;
    }
LABEL_22:
    id v23 = v21;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v77 = v12;
    sub_1D165EDC4(v22, v23, isUniquelyReferenced_nonNull_native);
    id v25 = v12;
    uint64_t v71 = v23;

    swift_bridgeObjectRelease();
    uint64_t v26 = *(void *)(v66 + 24);
    char v68 = v25;
    if (v26 && *(void *)(v26 + 16))
    {
      id v27 = v23;
      unint64_t v28 = sub_1D165A9D0((uint64_t)v27);
      if (v29)
      {
        double v30 = *(double *)(*(void *)(v26 + 56) + 8 * v28);
        char v31 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v77 = v69;
        sub_1D165EC88(v27, v31, v30);

        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    uint64_t v74 = v26;
    if ((v22 & 0xC000000000000001) != 0)
    {
      sub_1D17BE710();
      sub_1D1668090();
      sub_1D1674A20();
      sub_1D17BE390();
      uint64_t v22 = v78;
      uint64_t v73 = v79;
      uint64_t v32 = v80;
      uint64_t v33 = v81;
      unint64_t v34 = v82;
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v35 = -1 << *(unsigned char *)(v22 + 32);
      uint64_t v73 = v22 + 56;
      uint64_t v32 = ~v35;
      uint64_t v36 = -v35;
      if (v36 < 64) {
        uint64_t v37 = ~(-1 << v36);
      }
      else {
        uint64_t v37 = -1;
      }
      unint64_t v34 = v37 & *(void *)(v22 + 56);
    }
    uint64_t v67 = v5;
    int64_t v72 = (unint64_t)(v32 + 64) >> 6;
LABEL_38:
    uint64_t v38 = v33;
    while (v22 < 0)
    {
      if (!sub_1D17BE7A0()) {
        goto LABEL_77;
      }
      sub_1D1668090();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v41 = v77;
      swift_unknownObjectRelease();
      uint64_t v33 = v38;
      uint64_t v39 = v34;
      uint64_t v26 = v74;
      if (!v77) {
        goto LABEL_77;
      }
LABEL_61:
      if (v26 && *(void *)(v26 + 16))
      {
        id v45 = v41;
        unint64_t v46 = sub_1D165A9D0((uint64_t)v45);
        if ((v47 & 1) == 0)
        {

          uint64_t v26 = v74;
          goto LABEL_39;
        }
        uint64_t v48 = *(void *)(*(void *)(v74 + 56) + 8 * v46);
        char v49 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v77 = v69;
        unint64_t v51 = sub_1D165A9D0((uint64_t)v45);
        uint64_t v52 = v69[2];
        BOOL v53 = (v50 & 1) == 0;
        uint64_t v54 = v52 + v53;
        if (__OFADD__(v52, v53)) {
          goto LABEL_83;
        }
        if (v69[3] >= v54)
        {
          uint64_t v26 = v74;
          if (v49) {
            goto LABEL_71;
          }
          char v62 = v50;
          sub_1D16A6A54();
          char v50 = v62;
        }
        else
        {
          char v70 = v50;
          sub_1D16A28F8(v54, v49);
          unint64_t v55 = sub_1D165A9D0((uint64_t)v45);
          int v57 = v56 & 1;
          char v50 = v70;
          if ((v70 & 1) != v57) {
            goto LABEL_85;
          }
          unint64_t v51 = v55;
        }
        uint64_t v26 = v74;
LABEL_71:
        uint64_t v69 = v77;
        if (v50)
        {
          *(void *)(v77[7] + 8 * v51) = v48;
        }
        else
        {
          v77[(v51 >> 6) + 8] |= 1 << v51;
          uint64_t v58 = 8 * v51;
          *(void *)(v77[6] + v58) = v45;
          *(void *)(v77[7] + v58) = v48;
          uint64_t v59 = v77[2];
          BOOL v15 = __OFADD__(v59, 1);
          uint64_t v60 = v59 + 1;
          if (v15) {
            goto LABEL_84;
          }
          v77[2] = v60;
          id v61 = v45;
        }

        swift_bridgeObjectRelease();
        unint64_t v34 = v39;
        goto LABEL_38;
      }
LABEL_39:

      uint64_t v38 = v33;
      unint64_t v34 = v39;
    }
    if (v34)
    {
      uint64_t v39 = (v34 - 1) & v34;
      unint64_t v40 = __clz(__rbit64(v34)) | (v38 << 6);
      uint64_t v33 = v38;
      goto LABEL_60;
    }
    int64_t v42 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      goto LABEL_81;
    }
    if (v42 >= v72) {
      goto LABEL_77;
    }
    unint64_t v43 = *(void *)(v73 + 8 * v42);
    uint64_t v33 = v38 + 1;
    if (v43) {
      goto LABEL_59;
    }
    uint64_t v33 = v38 + 2;
    if (v38 + 2 >= v72) {
      goto LABEL_77;
    }
    unint64_t v43 = *(void *)(v73 + 8 * v33);
    if (v43) {
      goto LABEL_59;
    }
    uint64_t v33 = v38 + 3;
    if (v38 + 3 >= v72) {
      goto LABEL_77;
    }
    unint64_t v43 = *(void *)(v73 + 8 * v33);
    if (v43) {
      goto LABEL_59;
    }
    uint64_t v33 = v38 + 4;
    if (v38 + 4 >= v72) {
      goto LABEL_77;
    }
    unint64_t v43 = *(void *)(v73 + 8 * v33);
    if (v43)
    {
LABEL_59:
      uint64_t v39 = (v43 - 1) & v43;
      unint64_t v40 = __clz(__rbit64(v43)) + (v33 << 6);
LABEL_60:
      id v41 = *(id *)(*(void *)(v22 + 48) + 8 * v40);
      if (!v41) {
        goto LABEL_77;
      }
      goto LABEL_61;
    }
    uint64_t v44 = v38 + 5;
    while (v72 != v44)
    {
      unint64_t v43 = *(void *)(v73 + 8 * v44++);
      if (v43)
      {
        uint64_t v33 = v44 - 1;
        goto LABEL_59;
      }
    }
LABEL_77:
    sub_1D1668088();
    swift_bridgeObjectRelease();

    uint64_t v6 = v64;
    a2 = v65;
    uint64_t v5 = v67;
    unint64_t v12 = v68;
    if (v11) {
      continue;
    }
    break;
  }
LABEL_6:
  BOOL v15 = __OFADD__(v7++, 1);
  if (!v15)
  {
    if (v7 >= v76) {
      goto LABEL_79;
    }
    unint64_t v16 = *(void *)(v75 + 8 * v7);
    if (v16) {
      goto LABEL_16;
    }
    int64_t v17 = v7 + 1;
    if (v7 + 1 >= v76) {
      goto LABEL_79;
    }
    unint64_t v16 = *(void *)(v75 + 8 * v17);
    if (v16) {
      goto LABEL_15;
    }
    int64_t v17 = v7 + 2;
    if (v7 + 2 >= v76) {
      goto LABEL_79;
    }
    unint64_t v16 = *(void *)(v75 + 8 * v17);
    if (v16) {
      goto LABEL_15;
    }
    int64_t v17 = v7 + 3;
    if (v7 + 3 >= v76)
    {
LABEL_79:
      swift_release();
      type metadata accessor for MADistribution();
      uint64_t result = swift_allocObject();
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_OWORD *)(result + 128) = 0u;
      *(_OWORD *)(result + 144) = 0u;
      *(_OWORD *)(result + 160) = 0u;
      *(unsigned char *)(result + 176) = 1;
      *(_OWORD *)(result + 184) = 0u;
      *(_OWORD *)(result + 200) = 0u;
      *(_OWORD *)(result + 216) = 0u;
      *(void *)(result + 16) = v12;
      *(void *)(result + 24) = v69;
      return result;
    }
    unint64_t v16 = *(void *)(v75 + 8 * v17);
    if (!v16)
    {
      while (1)
      {
        int64_t v7 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_82;
        }
        if (v7 >= v76) {
          goto LABEL_79;
        }
        unint64_t v16 = *(void *)(v75 + 8 * v7);
        ++v17;
        if (v16) {
          goto LABEL_16;
        }
      }
    }
LABEL_15:
    int64_t v7 = v17;
LABEL_16:
    unint64_t v11 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
    goto LABEL_17;
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  sub_1D1668090();
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

uint64_t sub_1D16D4540(unint64_t a1)
{
  unint64_t v1 = a1;
  uint64_t v113 = MEMORY[0x1E4FBC860];
  unint64_t v97 = a1 >> 62;
  if (!(a1 >> 62))
  {
    int64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    if (v113 < 0 || (v113 & 0x4000000000000000) != 0) {
      goto LABEL_129;
    }
    uint64_t v5 = *(void *)(v113 + 16);
LABEL_18:
    swift_release();
    if (v5) {
      goto LABEL_128;
    }
    uint64_t v6 = sub_1D16D505C();
    int64_t v7 = (void *)MEMORY[0x1E4FBC868];
    uint64_t v8 = *(void *)(v6 + 16);
    uint64_t v9 = *(void *)(v8 + 64);
    uint64_t v89 = v8 + 64;
    uint64_t v10 = 1 << *(unsigned char *)(v8 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v112 = MEMORY[0x1E4FBC868];
    unint64_t v105 = v11 & v9;
    unint64_t v95 = v1 & 0xC000000000000001;
    v88 = (char *)(v1 + 32);
    int64_t v90 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v91 = v1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v98 = v8;
    swift_bridgeObjectRetain();
    int64_t v12 = 0;
    int64_t v93 = v2;
    unint64_t v94 = v1;
    unint64_t v13 = v105;
    if (!v105) {
      goto LABEL_24;
    }
LABEL_23:
    uint64_t v106 = (v13 - 1) & v13;
    unint64_t v14 = __clz(__rbit64(v13)) | (v12 << 6);
LABEL_35:
    uint64_t v18 = 8 * v14;
    id v19 = *(void **)(*(void *)(v98 + 48) + v18);
    uint64_t v20 = *(void *)(*(void *)(v98 + 56) + v18);
    uint64_t v111 = MEMORY[0x1E4FBC870];
    v107 = v19;
    if (v2)
    {
      unint64_t v21 = v20 & 0xC000000000000001;
      uint64_t v96 = v20 + 56;
      swift_bridgeObjectRetain();
      id v22 = v19;
      swift_bridgeObjectRetain();
      uint64_t v23 = 0;
      unint64_t v24 = 0;
      int64_t v102 = v12;
      v103 = v7;
      uint64_t v101 = v20;
      unint64_t v92 = v20 & 0xC000000000000001;
      while (1)
      {
        if (v95)
        {
          uint64_t v25 = MEMORY[0x1D25F9260](v24, v1);
        }
        else
        {
          if (v24 >= *(void *)(v91 + 16)) {
            goto LABEL_123;
          }
          uint64_t v25 = *(void *)&v88[8 * v24];
          swift_retain();
        }
        int64_t v100 = v24;
        if (__OFADD__(v24, 1)) {
          goto LABEL_121;
        }
        unint64_t v99 = v24 + 1;
        uint64_t v104 = v23;
        if (v21)
        {
          swift_bridgeObjectRetain();
          sub_1D17BE710();
          sub_1D1668090();
          sub_1D1674A20();
          sub_1D17BE390();
          uint64_t v26 = v113;
          uint64_t v108 = v114;
          uint64_t v28 = v115;
          int64_t v27 = v116;
          int64_t v2 = v117;
        }
        else
        {
          uint64_t v29 = -1 << *(unsigned char *)(v20 + 32);
          uint64_t v28 = ~v29;
          uint64_t v30 = -v29;
          if (v30 < 64) {
            uint64_t v31 = ~(-1 << v30);
          }
          else {
            uint64_t v31 = -1;
          }
          int64_t v2 = v31 & *(void *)(v20 + 56);
          swift_bridgeObjectRetain();
          uint64_t v26 = v20;
          int64_t v27 = 0;
          uint64_t v108 = v96;
        }
        int64_t v32 = (unint64_t)(v28 + 64) >> 6;
        if (v26 < 0)
        {
LABEL_49:
          uint64_t v33 = (void *)sub_1D17BE7A0();
          if (!v33) {
            goto LABEL_78;
          }
          id v109 = v33;
          sub_1D1668090();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          unint64_t v1 = v110;
          swift_unknownObjectRelease();
          int64_t v34 = v27;
          uint64_t v35 = v2;
          if (!v1) {
            goto LABEL_78;
          }
          goto LABEL_64;
        }
        while (1)
        {
          if (v2)
          {
            uint64_t v35 = (v2 - 1) & v2;
            unint64_t v36 = __clz(__rbit64(v2)) | (v27 << 6);
            int64_t v34 = v27;
          }
          else
          {
            int64_t v34 = v27 + 1;
            if (__OFADD__(v27, 1))
            {
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
              goto LABEL_125;
            }
            if (v34 >= v32) {
              goto LABEL_78;
            }
            unint64_t v37 = *(void *)(v108 + 8 * v34);
            if (!v37)
            {
              int64_t v38 = v27 + 2;
              if (v27 + 2 >= v32) {
                goto LABEL_78;
              }
              unint64_t v37 = *(void *)(v108 + 8 * v38);
              if (v37) {
                goto LABEL_61;
              }
              int64_t v38 = v27 + 3;
              if (v27 + 3 >= v32) {
                goto LABEL_78;
              }
              unint64_t v37 = *(void *)(v108 + 8 * v38);
              if (v37)
              {
LABEL_61:
                int64_t v34 = v38;
              }
              else
              {
                int64_t v34 = v27 + 4;
                if (v27 + 4 >= v32) {
                  goto LABEL_78;
                }
                unint64_t v37 = *(void *)(v108 + 8 * v34);
                if (!v37)
                {
                  int64_t v39 = v27 + 5;
                  while (v32 != v39)
                  {
                    unint64_t v37 = *(void *)(v108 + 8 * v39++);
                    if (v37)
                    {
                      int64_t v34 = v39 - 1;
                      goto LABEL_62;
                    }
                  }
LABEL_78:
                  swift_bridgeObjectRelease();
                  swift_release();
                  sub_1D1668088();
                  int64_t v2 = v93;
                  unint64_t v1 = v94;
                  int64_t v12 = v102;
                  int64_t v7 = v103;
                  id v19 = v107;
                  uint64_t v23 = v104;
                  int64_t v43 = v100;
LABEL_79:
                  swift_bridgeObjectRelease();
                  if (v97) {
                    goto LABEL_76;
                  }
LABEL_80:
                  if (v43 == *(void *)(v91 + 16)) {
                    goto LABEL_81;
                  }
LABEL_77:

LABEL_115:
                  swift_bridgeObjectRelease();
                  unint64_t v13 = v106;
                  if (v106) {
                    goto LABEL_23;
                  }
LABEL_24:
                  BOOL v15 = __OFADD__(v12++, 1);
                  if (v15) {
                    goto LABEL_122;
                  }
                  if (v12 >= v90) {
                    goto LABEL_119;
                  }
                  unint64_t v16 = *(void *)(v89 + 8 * v12);
                  if (!v16)
                  {
                    int64_t v17 = v12 + 1;
                    if (v12 + 1 >= v90) {
                      goto LABEL_119;
                    }
                    unint64_t v16 = *(void *)(v89 + 8 * v17);
                    if (v16) {
                      goto LABEL_33;
                    }
                    int64_t v17 = v12 + 2;
                    if (v12 + 2 >= v90) {
                      goto LABEL_119;
                    }
                    unint64_t v16 = *(void *)(v89 + 8 * v17);
                    if (v16) {
                      goto LABEL_33;
                    }
                    int64_t v17 = v12 + 3;
                    if (v12 + 3 >= v90)
                    {
LABEL_119:
                      swift_release();
                      uint64_t v111 = MEMORY[0x1E4FBC870];
                      uint64_t v85 = swift_bridgeObjectRetain();
                      sub_1D16D25E4(v85, (uint64_t)&v111, (uint64_t *)&v112);
                      swift_bridgeObjectRelease();
                      swift_release();
                      uint64_t v86 = v111;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      return v86;
                    }
                    unint64_t v16 = *(void *)(v89 + 8 * v17);
                    if (v16)
                    {
LABEL_33:
                      int64_t v12 = v17;
                      goto LABEL_34;
                    }
                    while (1)
                    {
                      int64_t v12 = v17 + 1;
                      if (__OFADD__(v17, 1)) {
                        break;
                      }
                      if (v12 >= v90) {
                        goto LABEL_119;
                      }
                      unint64_t v16 = *(void *)(v89 + 8 * v12);
                      ++v17;
                      if (v16) {
                        goto LABEL_34;
                      }
                    }
LABEL_125:
                    __break(1u);
LABEL_126:
                    __break(1u);
LABEL_127:
                    __break(1u);
LABEL_128:
                    __break(1u);
LABEL_129:
                    swift_bridgeObjectRetain();
                    uint64_t v5 = sub_1D17BEAD0();
                    swift_release();
                    goto LABEL_18;
                  }
LABEL_34:
                  uint64_t v106 = (v16 - 1) & v16;
                  unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
                  goto LABEL_35;
                }
              }
            }
LABEL_62:
            uint64_t v35 = (v37 - 1) & v37;
            unint64_t v36 = __clz(__rbit64(v37)) + (v34 << 6);
          }
          unint64_t v1 = (unint64_t)*(id *)(*(void *)(v26 + 48) + 8 * v36);
          if (!v1) {
            goto LABEL_78;
          }
LABEL_64:
          if ((*(uint64_t (**)(unint64_t))(*(void *)v25 + 248))(v1)) {
            break;
          }

          int64_t v27 = v34;
          int64_t v2 = v35;
          if (v26 < 0) {
            goto LABEL_49;
          }
        }
        id v40 = (id)v1;
        uint64_t v41 = sub_1D17BE5E0();

        uint64_t v23 = v41 ^ v104;
        id v42 = v40;
        sub_1D1671FA0(&v110, v42);

        swift_release();
        sub_1D1668088();
        unint64_t v24 = v99;
        int64_t v2 = v93;
        unint64_t v1 = v94;
        int64_t v12 = v102;
        int64_t v7 = v103;
        id v19 = v107;
        uint64_t v20 = v101;
        unint64_t v21 = v92;
        if (v99 == v93)
        {
          swift_bridgeObjectRelease();
          int64_t v43 = v93;
          goto LABEL_79;
        }
      }
    }
    id v44 = v19;
    uint64_t v23 = 0;
    int64_t v43 = 0;
    if (!v97) {
      goto LABEL_80;
    }
LABEL_76:
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if (v43 != v45) {
      goto LABEL_77;
    }
LABEL_81:
    if (v7[2])
    {
      unint64_t v46 = sub_1D165AB04(v23);
      if (v47)
      {
        unint64_t v48 = *(void *)(v7[7] + 8 * v46);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1D17C9600;
        *(void *)(inited + 32) = v19;
        unint64_t v110 = inited;
        sub_1D17BE150();
        unint64_t v50 = v110;
        unint64_t v110 = v48;
        if (v50 >> 62)
        {
          id v70 = v19;
          uint64_t v51 = sub_1D17BEAD0();
          if (v51) {
            goto LABEL_85;
          }
        }
        else
        {
          uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
          id v52 = v19;
          if (v51)
          {
LABEL_85:
            if (v51 < 1) {
              goto LABEL_126;
            }
            uint64_t v53 = v23;
            if ((v50 & 0xC000000000000001) != 0)
            {
              for (uint64_t i = 0; i != v51; ++i)
              {
                unint64_t v55 = (void *)MEMORY[0x1D25F9260](i, v50);
                sub_1D1671FA0(&v109, v55);
              }
            }
            else
            {
              for (uint64_t j = 0; j != v51; ++j)
              {
                uint64_t v63 = *(void **)(v50 + 8 * j + 32);
                sub_1D1671FA0(&v109, v63);
              }
            }
LABEL_105:
            swift_bridgeObjectRelease();
            unint64_t v71 = v110;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v110 = (unint64_t)v7;
            unint64_t v74 = sub_1D165AB04(v53);
            uint64_t v75 = v7[2];
            BOOL v76 = (v73 & 1) == 0;
            uint64_t v77 = v75 + v76;
            if (__OFADD__(v75, v76)) {
              goto LABEL_124;
            }
            char v78 = v73;
            if (v7[3] < v77)
            {
              sub_1D16A55E8(v77, isUniquelyReferenced_nonNull_native);
              unint64_t v79 = sub_1D165AB04(v53);
              if ((v78 & 1) != (v80 & 1)) {
                goto LABEL_131;
              }
              unint64_t v74 = v79;
              int64_t v7 = (void *)v110;
              if ((v78 & 1) == 0) {
                goto LABEL_109;
              }
LABEL_113:
              uint64_t v84 = v7[7];
              swift_bridgeObjectRelease();
              *(void *)(v84 + 8 * v74) = v71;
              goto LABEL_114;
            }
            if (isUniquelyReferenced_nonNull_native)
            {
              int64_t v7 = (void *)v110;
              if (v73) {
                goto LABEL_113;
              }
            }
            else
            {
              sub_1D16A84B0();
              int64_t v7 = (void *)v110;
              if (v78) {
                goto LABEL_113;
              }
            }
LABEL_109:
            v7[(v74 >> 6) + 8] |= 1 << v74;
            uint64_t v81 = 8 * v74;
            *(void *)(v7[6] + v81) = v53;
            *(void *)(v7[7] + v81) = v71;
            uint64_t v82 = v7[2];
            BOOL v15 = __OFADD__(v82, 1);
            uint64_t v83 = v82 + 1;
            if (v15) {
              goto LABEL_127;
            }
            v7[2] = v83;
LABEL_114:

            goto LABEL_115;
          }
        }
        uint64_t v53 = v23;
        goto LABEL_105;
      }
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
    uint64_t v56 = swift_initStackObject();
    *(_OWORD *)(v56 + 16) = xmmword_1D17C9600;
    *(void *)(v56 + 32) = v19;
    unint64_t v110 = v56;
    sub_1D17BE150();
    unint64_t v57 = v110;
    if (v110 >> 62)
    {
      id v64 = v19;
      swift_bridgeObjectRetain();
      uint64_t v65 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
      if (v65) {
        goto LABEL_92;
      }
    }
    else
    {
      uint64_t v58 = *(void *)((v110 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v59 = v19;
      if (v58)
      {
LABEL_92:
        sub_1D16E20B8(v57);
        uint64_t v61 = v60;
LABEL_102:
        swift_bridgeObjectRelease();
        char v66 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v110 = (unint64_t)v7;
        sub_1D165F504(v61, v23, v66);
        int64_t v7 = (void *)v110;
        swift_bridgeObjectRelease();
        uint64_t v67 = v111;
        unint64_t v68 = v112;
        char v69 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v110 = v68;
        sub_1D165F504(v67, v23, v69);
        unint64_t v112 = v110;

        goto LABEL_115;
      }
    }
    uint64_t v61 = MEMORY[0x1E4FBC870];
    goto LABEL_102;
  }
  swift_bridgeObjectRetain();
  int64_t v2 = sub_1D17BEAD0();
  if (!v2) {
    goto LABEL_15;
  }
LABEL_3:
  if (v2 >= 1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (uint64_t k = 0; k != v2; ++k)
      {
        MEMORY[0x1D25F9260](k, v1);
        type metadata accessor for MASlices();
        if (swift_dynamicCastClass())
        {
          sub_1D17BE8F0();
          sub_1D17BE930();
          sub_1D17BE940();
          sub_1D17BE900();
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
    }
    else
    {
      type metadata accessor for MASlices();
      for (uint64_t m = 0; m != v2; ++m)
      {
        if (swift_dynamicCastClass())
        {
          swift_retain();
          sub_1D17BE8F0();
          sub_1D17BE930();
          sub_1D17BE940();
          sub_1D17BE900();
        }
      }
    }
    goto LABEL_15;
  }
  __break(1u);
LABEL_131:
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

uint64_t sub_1D16D505C()
{
  uint64_t v1 = -1 << *(unsigned char *)(*(void *)(v0 + 16) + 32);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = ~v1;
  uint64_t v5 = -v1;
  uint64_t v97 = v2;
  uint64_t v98 = v2 + 64;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v99 = v4;
  uint64_t v100 = 0;
  uint64_t v101 = v6 & v3;
  uint64_t v102 = 0;
  swift_bridgeObjectRetain();
  sub_1D16D29CC();
  if (!v7)
  {
    uint64_t v11 = (void *)MEMORY[0x1E4FBC868];
    unint64_t v91 = MEMORY[0x1E4FBC868];
LABEL_78:
    sub_1D1668088();
    type metadata accessor for MADistribution();
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(unsigned char *)(result + 176) = 1;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(void *)(result + 16) = v11;
    *(void *)(result + 24) = v91;
    return result;
  }
  uint64_t v9 = v7;
  uint64_t v10 = v8;
  uint64_t v11 = (void *)MEMORY[0x1E4FBC868];
  unint64_t v91 = MEMORY[0x1E4FBC868];
LABEL_7:
  if ((v10 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D1668090();
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v10 = v103;
    uint64_t v93 = v104;
    uint64_t v14 = v105;
    uint64_t v15 = v106;
    unint64_t v16 = v107;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = -1 << *(unsigned char *)(v10 + 32);
    uint64_t v93 = v10 + 56;
    uint64_t v14 = ~v17;
    uint64_t v18 = -v17;
    if (v18 < 64) {
      uint64_t v19 = ~(-1 << v18);
    }
    else {
      uint64_t v19 = -1;
    }
    unint64_t v16 = v19 & *(void *)(v10 + 56);
  }
  int64_t v92 = (unint64_t)(v14 + 64) >> 6;
  unint64_t v94 = v9;
  while (1)
  {
    uint64_t v21 = v15;
    if (v10 < 0)
    {
      uint64_t v24 = sub_1D17BE7A0();
      if (!v24) {
        goto LABEL_6;
      }
      unint64_t v95 = (void *)v24;
      sub_1D1668090();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v25 = (id)v96;
      swift_unknownObjectRelease();
      if (!v25) {
        goto LABEL_6;
      }
    }
    else
    {
      if (v16)
      {
        unint64_t v22 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v23 = v22 | (v15 << 6);
      }
      else
      {
        int64_t v26 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_81;
        }
        if (v26 >= v92) {
          goto LABEL_6;
        }
        unint64_t v27 = *(void *)(v93 + 8 * v26);
        ++v15;
        if (!v27)
        {
          uint64_t v15 = v21 + 2;
          if (v21 + 2 >= v92) {
            goto LABEL_6;
          }
          unint64_t v27 = *(void *)(v93 + 8 * v15);
          if (!v27)
          {
            uint64_t v15 = v21 + 3;
            if (v21 + 3 >= v92) {
              goto LABEL_6;
            }
            unint64_t v27 = *(void *)(v93 + 8 * v15);
            if (!v27)
            {
              uint64_t v15 = v21 + 4;
              if (v21 + 4 >= v92) {
                goto LABEL_6;
              }
              unint64_t v27 = *(void *)(v93 + 8 * v15);
              if (!v27)
              {
                uint64_t v28 = v21 + 5;
                while (v92 != v28)
                {
                  unint64_t v27 = *(void *)(v93 + 8 * v28++);
                  if (v27)
                  {
                    uint64_t v15 = v28 - 1;
                    goto LABEL_36;
                  }
                }
LABEL_6:
                sub_1D1668088();

                sub_1D16D29CC();
                uint64_t v9 = v12;
                uint64_t v10 = v13;
                if (!v12) {
                  goto LABEL_78;
                }
                goto LABEL_7;
              }
            }
          }
        }
LABEL_36:
        unint64_t v16 = (v27 - 1) & v27;
        unint64_t v23 = __clz(__rbit64(v27)) + (v15 << 6);
      }
      id v25 = *(id *)(*(void *)(v10 + 48) + 8 * v23);
      if (!v25) {
        goto LABEL_6;
      }
    }
    if (!v11[2]) {
      goto LABEL_50;
    }
    id v29 = v25;
    unint64_t v30 = sub_1D165A9D0((uint64_t)v29);
    if ((v31 & 1) == 0)
    {

LABEL_50:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1D17C9600;
      *(void *)(inited + 32) = v9;
      unint64_t v96 = inited;
      sub_1D17BE150();
      unint64_t v52 = v96;
      if (v96 >> 62)
      {
        id v58 = v25;
        id v59 = v9;
        swift_bridgeObjectRetain();
        uint64_t v60 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
        if (v60) {
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v53 = *(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v54 = v25;
        id v55 = v9;
        if (v53)
        {
LABEL_52:
          sub_1D16E20B8(v52);
          uint64_t v57 = v56;
          goto LABEL_55;
        }
      }
      uint64_t v57 = MEMORY[0x1E4FBC870];
LABEL_55:
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v96 = (unint64_t)v11;
      unint64_t v63 = sub_1D165A9D0((uint64_t)v25);
      uint64_t v64 = v11[2];
      BOOL v65 = (v62 & 1) == 0;
      uint64_t v66 = v64 + v65;
      if (__OFADD__(v64, v65)) {
        goto LABEL_82;
      }
      char v67 = v62;
      if (v11[3] < v66)
      {
        sub_1D16A2EE0(v66, isUniquelyReferenced_nonNull_native);
        unint64_t v68 = sub_1D165A9D0((uint64_t)v25);
        if ((v67 & 1) != (v69 & 1)) {
          goto LABEL_86;
        }
        unint64_t v63 = v68;
        uint64_t v11 = (void *)v96;
        if ((v67 & 1) == 0) {
          goto LABEL_64;
        }
LABEL_62:
        uint64_t v70 = v11[7];
        swift_bridgeObjectRelease();
        *(void *)(v70 + 8 * v63) = v57;
LABEL_66:

        swift_bridgeObjectRelease();
        id v75 = v25;
        char v76 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v96 = v91;
        unint64_t v78 = sub_1D165A9D0((uint64_t)v75);
        uint64_t v79 = *(void *)(v91 + 16);
        BOOL v80 = (v77 & 1) == 0;
        uint64_t v81 = v79 + v80;
        if (__OFADD__(v79, v80)) {
          goto LABEL_83;
        }
        char v82 = v77;
        if (*(void *)(v91 + 24) >= v81)
        {
          if ((v76 & 1) == 0) {
            sub_1D16A6A54();
          }
        }
        else
        {
          sub_1D16A28F8(v81, v76);
          unint64_t v83 = sub_1D165A9D0((uint64_t)v75);
          if ((v82 & 1) != (v84 & 1)) {
            goto LABEL_86;
          }
          unint64_t v78 = v83;
        }
        uint64_t v9 = v94;
        uint64_t v85 = (void *)v96;
        unint64_t v91 = v96;
        if (v82)
        {
          *(void *)(*(void *)(v96 + 56) + 8 * v78) = 0x3FF0000000000000;
        }
        else
        {
          *(void *)(v96 + 8 * (v78 >> 6) + 64) |= 1 << v78;
          uint64_t v86 = 8 * v78;
          *(void *)(v85[6] + v86) = v75;
          *(void *)(v85[7] + v86) = 0x3FF0000000000000;
          uint64_t v87 = v85[2];
          BOOL v48 = __OFADD__(v87, 1);
          uint64_t v88 = v87 + 1;
          if (v48) {
            goto LABEL_85;
          }
          v85[2] = v88;
          id v89 = v75;
        }

        goto LABEL_16;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v11 = (void *)v96;
        if (v62) {
          goto LABEL_62;
        }
      }
      else
      {
        sub_1D16A6DE0();
        uint64_t v11 = (void *)v96;
        if (v67) {
          goto LABEL_62;
        }
      }
LABEL_64:
      v11[(v63 >> 6) + 8] |= 1 << v63;
      uint64_t v71 = 8 * v63;
      *(void *)(v11[6] + v71) = v25;
      *(void *)(v11[7] + v71) = v57;
      uint64_t v72 = v11[2];
      BOOL v48 = __OFADD__(v72, 1);
      uint64_t v73 = v72 + 1;
      if (v48) {
        goto LABEL_84;
      }
      v11[2] = v73;
      id v74 = v25;
      goto LABEL_66;
    }
    unint64_t v32 = *(void *)(v11[7] + 8 * v30);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
    uint64_t v33 = swift_initStackObject();
    *(_OWORD *)(v33 + 16) = xmmword_1D17C9600;
    *(void *)(v33 + 32) = v9;
    unint64_t v96 = v33;
    sub_1D17BE150();
    unint64_t v96 = v32;
    id v34 = v9;
    swift_bridgeObjectRetain();
    sub_1D1671FA0(&v95, v34);
    uint64_t v35 = v95;
    swift_bridgeObjectRelease();

    unint64_t v36 = v96;
    char v37 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v96 = (unint64_t)v11;
    unint64_t v39 = sub_1D165A9D0((uint64_t)v29);
    uint64_t v40 = v11[2];
    BOOL v41 = (v38 & 1) == 0;
    uint64_t v42 = v40 + v41;
    if (__OFADD__(v40, v41)) {
      break;
    }
    char v43 = v38;
    if (v11[3] >= v42)
    {
      if ((v37 & 1) == 0) {
        sub_1D16A6DE0();
      }
    }
    else
    {
      sub_1D16A2EE0(v42, v37);
      unint64_t v44 = sub_1D165A9D0((uint64_t)v29);
      if ((v43 & 1) != (v45 & 1)) {
        goto LABEL_86;
      }
      unint64_t v39 = v44;
    }
    uint64_t v9 = v94;
    uint64_t v11 = (void *)v96;
    if (v43)
    {
      uint64_t v20 = *(void *)(v96 + 56);
      swift_bridgeObjectRelease();
      *(void *)(v20 + 8 * v39) = v36;
    }
    else
    {
      *(void *)(v96 + 8 * (v39 >> 6) + 64) |= 1 << v39;
      uint64_t v46 = 8 * v39;
      *(void *)(v11[6] + v46) = v29;
      *(void *)(v11[7] + v46) = v36;
      uint64_t v47 = v11[2];
      BOOL v48 = __OFADD__(v47, 1);
      uint64_t v49 = v47 + 1;
      if (v48) {
        goto LABEL_80;
      }
      v11[2] = v49;
      id v50 = v29;
    }

LABEL_16:
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  sub_1D1668090();
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

uint64_t sub_1D16D5800(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  int64_t v90 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v9 = MEMORY[0x1E4FBC868];
  int64_t v89 = v7;
LABEL_7:
  while (2)
  {
    while (2)
    {
      if (v6)
      {
        unint64_t v13 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v14 = v13 | (v8 << 6);
        if (!*(void *)(v2 + 16)) {
          continue;
        }
      }
      else
      {
        int64_t v15 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
          goto LABEL_104;
        }
        if (v15 >= v7) {
          goto LABEL_99;
        }
        unint64_t v16 = *(void *)(v3 + 8 * v15);
        ++v8;
        if (!v16)
        {
          int64_t v8 = v15 + 1;
          if (v15 + 1 >= v7) {
            goto LABEL_99;
          }
          unint64_t v16 = *(void *)(v3 + 8 * v8);
          if (!v16)
          {
            int64_t v8 = v15 + 2;
            if (v15 + 2 >= v7) {
              goto LABEL_99;
            }
            unint64_t v16 = *(void *)(v3 + 8 * v8);
            if (!v16)
            {
              int64_t v8 = v15 + 3;
              if (v15 + 3 >= v7) {
                goto LABEL_99;
              }
              unint64_t v16 = *(void *)(v3 + 8 * v8);
              if (!v16)
              {
                int64_t v8 = v15 + 4;
                if (v15 + 4 >= v7) {
                  goto LABEL_99;
                }
                unint64_t v16 = *(void *)(v3 + 8 * v8);
                if (!v16)
                {
                  int64_t v17 = v15 + 5;
                  if (v17 >= v7)
                  {
LABEL_99:
                    swift_release();
                    type metadata accessor for MADistribution();
                    uint64_t result = swift_allocObject();
                    *(_OWORD *)(result + 32) = 0u;
                    *(_OWORD *)(result + 48) = 0u;
                    *(_OWORD *)(result + 64) = 0u;
                    *(_OWORD *)(result + 80) = 0u;
                    *(_OWORD *)(result + 96) = 0u;
                    *(_OWORD *)(result + 112) = 0u;
                    *(_OWORD *)(result + 128) = 0u;
                    *(_OWORD *)(result + 144) = 0u;
                    *(_OWORD *)(result + 160) = 0u;
                    *(unsigned char *)(result + 176) = 1;
                    *(_OWORD *)(result + 184) = 0u;
                    *(_OWORD *)(result + 200) = 0u;
                    *(_OWORD *)(result + 216) = 0u;
                    *(void *)(result + 16) = v9;
                    *(void *)(result + 24) = v90;
                    return result;
                  }
                  unint64_t v16 = *(void *)(v3 + 8 * v17);
                  if (!v16)
                  {
                    while (1)
                    {
                      int64_t v8 = v17 + 1;
                      if (__OFADD__(v17, 1)) {
                        goto LABEL_102;
                      }
                      if (v8 >= v7) {
                        goto LABEL_99;
                      }
                      unint64_t v16 = *(void *)(v3 + 8 * v8);
                      ++v17;
                      if (v16) {
                        goto LABEL_29;
                      }
                    }
                  }
                  int64_t v8 = v17;
                }
              }
            }
          }
        }
LABEL_29:
        unint64_t v6 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v8 << 6);
        if (!*(void *)(v2 + 16)) {
          continue;
        }
      }
      break;
    }
    id v10 = *(id *)(*(void *)(v2 + 48) + 8 * v14);
    unint64_t v11 = sub_1D165A9D0((uint64_t)v10);
    if ((v12 & 1) == 0)
    {

      continue;
    }
    break;
  }
  uint64_t v18 = *(void *)(*(void *)(v2 + 56) + 8 * v11);
  swift_bridgeObjectRetain();

  if ((v18 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D1668090();
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v18 = v100[1];
    uint64_t v96 = v100[2];
    uint64_t v19 = v100[3];
    uint64_t v20 = v100[4];
    uint64_t v21 = v100[5];
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v22 = -1 << *(unsigned char *)(v18 + 32);
    uint64_t v96 = v18 + 56;
    uint64_t v19 = ~v22;
    uint64_t v23 = -v22;
    if (v23 < 64) {
      uint64_t v24 = ~(-1 << v23);
    }
    else {
      uint64_t v24 = -1;
    }
    uint64_t v21 = v24 & *(void *)(v18 + 56);
  }
  int64_t v95 = (unint64_t)(v19 + 64) >> 6;
  uint64_t v98 = v18;
  while (2)
  {
    uint64_t v92 = v9;
LABEL_37:
    uint64_t v25 = v20;
    unint64_t v26 = v21;
    while (1)
    {
      if (v18 < 0)
      {
        uint64_t v28 = sub_1D17BE7A0();
        if (!v28) {
          goto LABEL_98;
        }
        uint64_t v99 = v28;
        sub_1D1668090();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v29 = (id)v100[0];
        swift_unknownObjectRelease();
        uint64_t v20 = v25;
        uint64_t v21 = v26;
        if (!v29) {
          goto LABEL_98;
        }
      }
      else
      {
        if (v26)
        {
          uint64_t v21 = (v26 - 1) & v26;
          unint64_t v27 = __clz(__rbit64(v26)) | (v25 << 6);
          uint64_t v20 = v25;
        }
        else
        {
          int64_t v30 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            goto LABEL_101;
          }
          if (v30 >= v95) {
            goto LABEL_98;
          }
          unint64_t v31 = *(void *)(v96 + 8 * v30);
          uint64_t v20 = v25 + 1;
          if (!v31)
          {
            uint64_t v20 = v25 + 2;
            if (v25 + 2 >= v95) {
              goto LABEL_98;
            }
            unint64_t v31 = *(void *)(v96 + 8 * v20);
            if (!v31)
            {
              uint64_t v20 = v25 + 3;
              if (v25 + 3 >= v95) {
                goto LABEL_98;
              }
              unint64_t v31 = *(void *)(v96 + 8 * v20);
              if (!v31)
              {
                uint64_t v20 = v25 + 4;
                if (v25 + 4 >= v95) {
                  goto LABEL_98;
                }
                unint64_t v31 = *(void *)(v96 + 8 * v20);
                if (!v31)
                {
                  uint64_t v32 = v25 + 5;
                  while (v95 != v32)
                  {
                    unint64_t v31 = *(void *)(v96 + 8 * v32++);
                    if (v31)
                    {
                      uint64_t v20 = v32 - 1;
                      uint64_t v18 = v98;
                      goto LABEL_59;
                    }
                  }
LABEL_98:
                  sub_1D1668088();

                  int64_t v7 = v89;
                  uint64_t v3 = v2 + 64;
                  uint64_t v9 = v92;
                  goto LABEL_7;
                }
              }
            }
          }
LABEL_59:
          uint64_t v21 = (v31 - 1) & v31;
          unint64_t v27 = __clz(__rbit64(v31)) + (v20 << 6);
        }
        id v29 = *(id *)(*(void *)(v18 + 48) + 8 * v27);
        if (!v29) {
          goto LABEL_98;
        }
      }
      uint64_t v33 = *(void *)(a1 + 16);
      if (*(void *)(v33 + 16)) {
        break;
      }
LABEL_39:

      uint64_t v25 = v20;
      unint64_t v26 = v21;
      uint64_t v18 = v98;
    }
    id v34 = v29;
    unint64_t v35 = sub_1D165A9D0((uint64_t)v34);
    if ((v36 & 1) == 0)
    {

      goto LABEL_39;
    }
    unint64_t v37 = *(void *)(*(void *)(v33 + 56) + 8 * v35);
    swift_bridgeObjectRetain();

    unint64_t v85 = v37;
    if (!*(void *)(v92 + 16)) {
      goto LABEL_76;
    }
    id v38 = v10;
    sub_1D165A9D0((uint64_t)v38);
    if ((v39 & 1) == 0)
    {

LABEL_76:
      id v48 = v10;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v100[0] = v92;
      uint64_t v87 = v48;
      unint64_t v51 = sub_1D165A9D0((uint64_t)v48);
      uint64_t v52 = *(void *)(v92 + 16);
      BOOL v53 = (v50 & 1) == 0;
      uint64_t v54 = v52 + v53;
      if (__OFADD__(v52, v53)) {
        goto LABEL_105;
      }
      if (*(void *)(v92 + 24) >= v54)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          char v81 = v50;
          sub_1D16A6DE0();
          char v50 = v81;
        }
      }
      else
      {
        char v93 = v50;
        sub_1D16A2EE0(v54, isUniquelyReferenced_nonNull_native);
        unint64_t v55 = sub_1D165A9D0((uint64_t)v87);
        int v57 = v56 & 1;
        char v50 = v93;
        if ((v93 & 1) != v57) {
          goto LABEL_109;
        }
        unint64_t v51 = v55;
      }
      id v58 = (void *)v100[0];
      uint64_t v59 = 8 * v51;
      uint64_t v94 = v100[0];
      if (v50)
      {
        uint64_t v60 = *(void *)(v100[0] + 56);
        swift_bridgeObjectRelease();
        *(void *)(v60 + v59) = v85;
        uint64_t v61 = v87;
      }
      else
      {
        *(void *)(v100[0] + 8 * (v51 >> 6) + 64) |= 1 << v51;
        uint64_t v61 = v87;
        *(void *)(v58[6] + v59) = v87;
        *(void *)(v58[7] + v59) = v85;
        uint64_t v62 = v58[2];
        BOOL v63 = __OFADD__(v62, 1);
        uint64_t v64 = v62 + 1;
        if (v63) {
          goto LABEL_107;
        }
        v58[2] = v64;
        id v65 = v87;
      }

      swift_bridgeObjectRelease();
      id v66 = v61;
      char v67 = swift_isUniquelyReferenced_nonNull_native();
      v100[0] = (uint64_t)v90;
      uint64_t v88 = (uint64_t)v66;
      unint64_t v69 = sub_1D165A9D0((uint64_t)v66);
      uint64_t v70 = v90[2];
      BOOL v71 = (v68 & 1) == 0;
      uint64_t v72 = v70 + v71;
      if (__OFADD__(v70, v71)) {
        goto LABEL_106;
      }
      if (v90[3] >= v72)
      {
        if ((v67 & 1) == 0)
        {
          char v82 = v68;
          sub_1D16A6A54();
          char v68 = v82;
        }
        uint64_t v18 = v98;
        uint64_t v73 = (void *)v88;
      }
      else
      {
        char v91 = v68;
        sub_1D16A28F8(v72, v67);
        uint64_t v73 = (void *)v88;
        unint64_t v74 = sub_1D165A9D0(v88);
        int v76 = v75 & 1;
        char v68 = v91;
        if ((v91 & 1) != v76) {
          goto LABEL_109;
        }
        unint64_t v69 = v74;
        uint64_t v18 = v98;
      }
      int64_t v90 = (void *)v100[0];
      if (v68)
      {
        *(void *)(*(void *)(v100[0] + 56) + 8 * v69) = 0x3FF0000000000000;
      }
      else
      {
        *(void *)(v100[0] + 8 * (v69 >> 6) + 64) |= 1 << v69;
        uint64_t v77 = 8 * v69;
        *(void *)(v90[6] + v77) = v73;
        *(void *)(v90[7] + v77) = 0x3FF0000000000000;
        uint64_t v78 = v90[2];
        BOOL v63 = __OFADD__(v78, 1);
        uint64_t v79 = v78 + 1;
        if (v63) {
          goto LABEL_108;
        }
        v90[2] = v79;
        id v80 = v73;
      }
      uint64_t v9 = v94;

      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  char v84 = swift_isUniquelyReferenced_nonNull_native();
  v100[0] = v92;
  id v86 = v38;
  unint64_t v41 = sub_1D165A9D0((uint64_t)v86);
  uint64_t v42 = *(void *)(v92 + 16);
  BOOL v43 = (v40 & 1) == 0;
  uint64_t v44 = v42 + v43;
  if (__OFADD__(v42, v43)) {
    goto LABEL_103;
  }
  char v45 = v40;
  if (*(void *)(v92 + 24) >= v44)
  {
    if (v84)
    {
      if ((v40 & 1) == 0) {
        goto LABEL_104;
      }
    }
    else
    {
      sub_1D16A6DE0();
      if ((v45 & 1) == 0) {
        goto LABEL_104;
      }
    }
LABEL_72:
    uint64_t v99 = *(void *)(*(void *)(v100[0] + 56) + 8 * v41);
    sub_1D1691944(v85);
    sub_1D16DFF40(&v99, 1, v100, v41, v86);

    swift_bridgeObjectRelease();
    uint64_t v92 = v100[0];

    uint64_t v18 = v98;
    goto LABEL_37;
  }
  sub_1D16A2EE0(v44, v84);
  unint64_t v46 = sub_1D165A9D0((uint64_t)v86);
  if ((v45 & 1) != (v47 & 1)) {
    goto LABEL_109;
  }
  unint64_t v41 = v46;
  if (v45) {
    goto LABEL_72;
  }
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  sub_1D1668090();
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

uint64_t sub_1D16D6020()
{
  if (*(void *)(v0 + 56))
  {
    uint64_t v1 = *(void *)(v0 + 56);
  }
  else
  {
    uint64_t v1 = sub_1D16D6080(v0);
    *(void *)(v0 + 56) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1D16D6080(uint64_t a1)
{
  unint64_t v96 = MEMORY[0x1E4FBC860];
  unint64_t v95 = MEMORY[0x1E4FBC860];
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_1D167661C(v2);
  sub_1D16634F8(v3);
  uint64_t v4 = swift_bridgeObjectRetain();
  unint64_t v5 = sub_1D16D2D80(v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_1D167B3C0(v5);
  swift_bridgeObjectRelease();
  sub_1D16634F8(v6);
  int64_t v7 = (void *)v96;
  int64_t v93 = v96 >> 62;
  if (v96 >> 62) {
    goto LABEL_22;
  }
  uint64_t v8 = *(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (uint64_t i = v1; v8; uint64_t i = v1)
  {
    uint64_t v9 = 0;
    id v10 = (void *)MEMORY[0x1E4FBC868];
    while (1)
    {
      uint64_t v11 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v12 = v7;
      uint64_t v1 = (uint64_t)(id)v7[v9 + 4];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v97[0] = v10;
      int64_t v7 = v10;
      unint64_t v15 = sub_1D165A9D0(v1);
      uint64_t v16 = v10[2];
      BOOL v17 = (v14 & 1) == 0;
      uint64_t v18 = v16 + v17;
      if (__OFADD__(v16, v17)) {
        goto LABEL_20;
      }
      char v19 = v14;
      if (v10[3] >= v18)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          id v10 = (void *)v97[0];
          if (v14) {
            goto LABEL_4;
          }
        }
        else
        {
          int64_t v7 = v97;
          sub_1D16A6F98();
          id v10 = (void *)v97[0];
          if (v19) {
            goto LABEL_4;
          }
        }
      }
      else
      {
        sub_1D16A3218(v18, isUniquelyReferenced_nonNull_native);
        int64_t v7 = (void *)v97[0];
        unint64_t v20 = sub_1D165A9D0(v1);
        if ((v19 & 1) != (v21 & 1)) {
          goto LABEL_127;
        }
        unint64_t v15 = v20;
        id v10 = (void *)v97[0];
        if (v19)
        {
LABEL_4:
          *(void *)(v10[7] + 8 * v15) = v9;
          goto LABEL_5;
        }
      }
      v10[(v15 >> 6) + 8] |= 1 << v15;
      uint64_t v22 = 8 * v15;
      *(void *)(v10[6] + v22) = v1;
      *(void *)(v10[7] + v22) = v9;
      uint64_t v23 = v10[2];
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (v24) {
        goto LABEL_21;
      }
      v10[2] = v25;
      id v26 = (id)v1;
LABEL_5:

      swift_bridgeObjectRelease();
      ++v9;
      int64_t v7 = v12;
      if (v11 == v8)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = i;
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain_n();
    uint64_t v8 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  id v10 = (void *)MEMORY[0x1E4FBC868];
LABEL_24:
  unint64_t v27 = v95;
  id v91 = (id)(v95 >> 62);
  unint64_t v92 = (unint64_t)v7;
  if (v95 >> 62) {
    goto LABEL_118;
  }
  uint64_t v28 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v28) {
    goto LABEL_26;
  }
  while (2)
  {
    swift_bridgeObjectRelease();
    char v45 = (void *)MEMORY[0x1E4FBC868];
    unint64_t v46 = v92;
    if (v93) {
      goto LABEL_120;
    }
LABEL_42:
    uint64_t v47 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v91) {
      goto LABEL_43;
    }
LABEL_121:
    swift_bridgeObjectRetain();
    uint64_t v48 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
LABEL_44:
    if ((unsigned __int128)(v47 * (__int128)v48) >> 64 == (v47 * v48) >> 63)
    {
      uint64_t v86 = v47;
      uint64_t v87 = (void *)sub_1D1665914(v47 * v48, 0.0);
      uint64_t v49 = v1 + 64;
      uint64_t v50 = 1 << *(unsigned char *)(v1 + 32);
      if (v50 < 64) {
        uint64_t v51 = ~(-1 << v50);
      }
      else {
        uint64_t v51 = -1;
      }
      unint64_t v27 = v51 & *(void *)(v1 + 64);
      int64_t v93 = (unint64_t)(v50 + 63) >> 6;
      swift_bridgeObjectRetain();
      int64_t v52 = 0;
      while (1)
      {
        if (v27)
        {
          unint64_t v53 = __clz(__rbit64(v27));
          v27 &= v27 - 1;
          unint64_t v54 = v53 | (v52 << 6);
          if (!v10[2]) {
            continue;
          }
          goto LABEL_66;
        }
        int64_t v55 = v52 + 1;
        if (__OFADD__(v52, 1)) {
          goto LABEL_114;
        }
        if (v55 >= v93)
        {
LABEL_111:
          swift_release();
          type metadata accessor for MAMatrixRepresentation();
          char v81 = (void *)swift_allocObject();
          v81[2] = v86;
          v81[3] = v48;
          v81[4] = v87;
          v81[5] = v96;
          v81[6] = v95;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (uint64_t)v81;
        }
        unint64_t v56 = *(void *)(v49 + 8 * v55);
        ++v52;
        if (!v56)
        {
          int64_t v52 = v55 + 1;
          if (v55 + 1 >= v93) {
            goto LABEL_111;
          }
          unint64_t v56 = *(void *)(v49 + 8 * v52);
          if (!v56)
          {
            int64_t v52 = v55 + 2;
            if (v55 + 2 >= v93) {
              goto LABEL_111;
            }
            unint64_t v56 = *(void *)(v49 + 8 * v52);
            if (!v56) {
              break;
            }
          }
        }
LABEL_65:
        unint64_t v27 = (v56 - 1) & v56;
        unint64_t v54 = __clz(__rbit64(v56)) + (v52 << 6);
        if (!v10[2]) {
          continue;
        }
LABEL_66:
        uint64_t v58 = 8 * v54;
        uint64_t v59 = *(void *)(*(void *)(v1 + 56) + v58);
        id v60 = *(id *)(*(void *)(v1 + 48) + v58);
        swift_bridgeObjectRetain();
        unint64_t v61 = sub_1D165A9D0((uint64_t)v60);
        if ((v62 & 1) == 0)
        {
          swift_bridgeObjectRelease();

          continue;
        }
        id v91 = v60;
        uint64_t v85 = v49;
        uint64_t v1 = *(void *)(v10[7] + 8 * v61);
        if ((v59 & 0xC000000000000001) != 0)
        {
          sub_1D17BE710();
          sub_1D1668090();
          sub_1D1674A20();
          sub_1D17BE390();
          uint64_t v59 = v97[0];
          uint64_t v90 = v97[1];
          uint64_t v63 = v97[2];
          uint64_t v64 = v97[3];
          unint64_t v65 = v97[4];
        }
        else
        {
          uint64_t v64 = 0;
          uint64_t v66 = -1 << *(unsigned char *)(v59 + 32);
          uint64_t v90 = v59 + 56;
          uint64_t v63 = ~v66;
          uint64_t v67 = -v66;
          if (v67 < 64) {
            uint64_t v68 = ~(-1 << v67);
          }
          else {
            uint64_t v68 = -1;
          }
          unint64_t v65 = v68 & *(void *)(v59 + 56);
        }
        unint64_t v92 = v65;
        unint64_t v69 = v60;
        int64_t v89 = (unint64_t)(v63 + 64) >> 6;
        uint64_t v83 = v1 * v48;
        BOOL v84 = (unsigned __int128)(v1 * (__int128)v48) >> 64 != (v1 * v48) >> 63;
        while (1)
        {
          uint64_t v70 = v64;
          if (v59 < 0)
          {
            if (!sub_1D17BE7A0())
            {
              unint64_t v69 = v91;
              goto LABEL_110;
            }
            sub_1D1668090();
            swift_unknownObjectRetain();
            swift_dynamicCast();
            uint64_t v1 = v94;
            swift_unknownObjectRelease();
            unint64_t v69 = v91;
            if (!v94) {
              goto LABEL_110;
            }
            goto LABEL_98;
          }
          if (v92)
          {
            unint64_t v71 = __clz(__rbit64(v92));
            v92 &= v92 - 1;
            unint64_t v72 = v71 | (v64 << 6);
            goto LABEL_97;
          }
          int64_t v73 = v64 + 1;
          if (__OFADD__(v64, 1)) {
            goto LABEL_117;
          }
          if (v73 >= v89) {
            goto LABEL_110;
          }
          unint64_t v74 = *(void *)(v90 + 8 * v73);
          ++v64;
          if (!v74)
          {
            uint64_t v64 = v70 + 2;
            if (v70 + 2 >= v89) {
              goto LABEL_110;
            }
            unint64_t v74 = *(void *)(v90 + 8 * v64);
            if (!v74)
            {
              uint64_t v64 = v70 + 3;
              if (v70 + 3 >= v89) {
                goto LABEL_110;
              }
              unint64_t v74 = *(void *)(v90 + 8 * v64);
              if (!v74)
              {
                uint64_t v64 = v70 + 4;
                if (v70 + 4 >= v89) {
                  goto LABEL_110;
                }
                unint64_t v74 = *(void *)(v90 + 8 * v64);
                if (!v74) {
                  break;
                }
              }
            }
          }
LABEL_96:
          unint64_t v92 = (v74 - 1) & v74;
          unint64_t v72 = __clz(__rbit64(v74)) + (v64 << 6);
LABEL_97:
          uint64_t v1 = (uint64_t)*(id *)(*(void *)(v59 + 48) + 8 * v72);
          if (!v1) {
            goto LABEL_110;
          }
LABEL_98:
          if (v45[2])
          {
            id v76 = (id)v1;
            unint64_t v77 = sub_1D165A9D0((uint64_t)v76);
            if ((v78 & 1) == 0)
            {

              unint64_t v69 = v91;
              goto LABEL_76;
            }
            uint64_t v79 = *(void *)(v45[7] + 8 * v77);

            if (v84) {
              goto LABEL_123;
            }
            BOOL v24 = __OFADD__(v83, v79);
            unint64_t v80 = v83 + v79;
            if (v24) {
              goto LABEL_124;
            }
            uint64_t v1 = (uint64_t)v87;
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              if ((v80 & 0x8000000000000000) != 0) {
                goto LABEL_125;
              }
            }
            else
            {
              uint64_t v1 = (uint64_t)sub_1D1667604(v87);
              if ((v80 & 0x8000000000000000) != 0) {
                goto LABEL_125;
              }
            }
            if (v80 >= *(void *)(v1 + 16)) {
              goto LABEL_126;
            }
            uint64_t v87 = (void *)v1;
            *(void *)(v1 + 8 * v80 + 32) = 0x3FF0000000000000;

            unint64_t v69 = v91;
          }
          else
          {
LABEL_76:
          }
        }
        uint64_t v75 = v70 + 5;
        while (v89 != v75)
        {
          unint64_t v74 = *(void *)(v90 + 8 * v75++);
          if (v74)
          {
            uint64_t v64 = v75 - 1;
            goto LABEL_96;
          }
        }
LABEL_110:
        sub_1D1668088();

        uint64_t v1 = i;
        uint64_t v49 = v85;
      }
      int64_t v57 = v55 + 3;
      if (v57 >= v93) {
        goto LABEL_111;
      }
      unint64_t v56 = *(void *)(v49 + 8 * v57);
      if (v56)
      {
        int64_t v52 = v57;
        goto LABEL_65;
      }
      while (1)
      {
        int64_t v52 = v57 + 1;
        if (__OFADD__(v57, 1)) {
          break;
        }
        if (v52 >= v93) {
          goto LABEL_111;
        }
        unint64_t v56 = *(void *)(v49 + 8 * v52);
        ++v57;
        if (v56) {
          goto LABEL_65;
        }
      }
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      swift_bridgeObjectRetain_n();
      uint64_t v28 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
      if (!v28) {
        continue;
      }
LABEL_26:
      uint64_t v29 = 0;
      int64_t v30 = (void *)MEMORY[0x1E4FBC868];
      while (1)
      {
        uint64_t v1 = v29 + 1;
        if (__OFADD__(v29, 1))
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
          goto LABEL_116;
        }
        unint64_t v31 = v27;
        id v32 = *(id *)(v27 + 8 * v29 + 32);
        char v33 = swift_isUniquelyReferenced_nonNull_native();
        v97[0] = v30;
        unint64_t v35 = sub_1D165A9D0((uint64_t)v32);
        uint64_t v36 = v30[2];
        BOOL v37 = (v34 & 1) == 0;
        uint64_t v38 = v36 + v37;
        if (__OFADD__(v36, v37)) {
          goto LABEL_113;
        }
        unint64_t v27 = v34;
        if (v30[3] >= v38)
        {
          if (v33)
          {
            int64_t v30 = (void *)v97[0];
            if ((v34 & 1) == 0) {
              goto LABEL_37;
            }
          }
          else
          {
            sub_1D16A6F98();
            int64_t v30 = (void *)v97[0];
            if ((v27 & 1) == 0) {
              goto LABEL_37;
            }
          }
        }
        else
        {
          sub_1D16A3218(v38, v33);
          unint64_t v39 = sub_1D165A9D0((uint64_t)v32);
          if ((v27 & 1) != (v40 & 1)) {
            goto LABEL_127;
          }
          unint64_t v35 = v39;
          int64_t v30 = (void *)v97[0];
          if ((v27 & 1) == 0)
          {
LABEL_37:
            v30[(v35 >> 6) + 8] |= 1 << v35;
            uint64_t v41 = 8 * v35;
            *(void *)(v30[6] + v41) = v32;
            *(void *)(v30[7] + v41) = v29;
            uint64_t v42 = v30[2];
            BOOL v24 = __OFADD__(v42, 1);
            uint64_t v43 = v42 + 1;
            if (v24) {
              goto LABEL_115;
            }
            v30[2] = v43;
            id v44 = v32;
            goto LABEL_28;
          }
        }
        *(void *)(v30[7] + 8 * v35) = v29;
LABEL_28:

        swift_bridgeObjectRelease();
        ++v29;
        unint64_t v27 = v31;
        if (v1 == v28)
        {
          char v45 = v30;
          swift_bridgeObjectRelease();
          uint64_t v1 = i;
          unint64_t v46 = v92;
          if (!v93) {
            goto LABEL_42;
          }
LABEL_120:
          swift_bridgeObjectRetain();
          uint64_t v47 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
          if (v91) {
            goto LABEL_121;
          }
LABEL_43:
          uint64_t v48 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_44;
        }
      }
    }
    break;
  }
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  sub_1D1668090();
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

uint64_t sub_1D16D6A20(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  return swift_release();
}

uint64_t (*sub_1D16D6A30(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D6020();
  return sub_1D16D6A78;
}

uint64_t sub_1D16D6A78(void *a1)
{
  *(void *)(a1[1] + 56) = *a1;
  return swift_release();
}

uint64_t sub_1D16D6A88()
{
  if (*(void *)(v0 + 64))
  {
    uint64_t v1 = *(void *)(v0 + 64);
  }
  else
  {
    uint64_t v1 = sub_1D16D6AE8(v0);
    *(void *)(v0 + 64) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1D16D6AE8(uint64_t a1)
{
  unint64_t v109 = MEMORY[0x1E4FBC860];
  unint64_t v108 = MEMORY[0x1E4FBC860];
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_1D167661C(v2);
  sub_1D16634F8(v3);
  uint64_t v4 = swift_bridgeObjectRetain();
  unint64_t v5 = sub_1D16D2D80(v4);
  uint64_t v106 = v1;
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_1D167B3C0(v5);
  swift_bridgeObjectRelease();
  sub_1D16634F8(v6);
  unint64_t v7 = v109;
  int64_t v104 = v109 >> 62;
  if (v109 >> 62) {
    goto LABEL_22;
  }
  uint64_t v8 = *(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v8)
  {
    uint64_t v9 = 0;
    id v10 = (void *)MEMORY[0x1E4FBC868];
    while (1)
    {
      uint64_t v11 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      unint64_t v12 = v7;
      id v13 = *(id *)(v7 + 8 * v9 + 32);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v110 = v10;
      unint64_t v16 = sub_1D165A9D0((uint64_t)v13);
      uint64_t v17 = v10[2];
      BOOL v18 = (v15 & 1) == 0;
      uint64_t v19 = v17 + v18;
      if (__OFADD__(v17, v18)) {
        goto LABEL_20;
      }
      unint64_t v7 = v15;
      if (v10[3] >= v19)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if (v15) {
            goto LABEL_4;
          }
        }
        else
        {
          sub_1D16A6F98();
          if (v7) {
            goto LABEL_4;
          }
        }
      }
      else
      {
        sub_1D16A3218(v19, isUniquelyReferenced_nonNull_native);
        unint64_t v20 = sub_1D165A9D0((uint64_t)v13);
        if ((v7 & 1) != (v21 & 1)) {
          goto LABEL_141;
        }
        unint64_t v16 = v20;
        if (v7)
        {
LABEL_4:
          *(void *)(v10[7] + 8 * v16) = v9;
          goto LABEL_5;
        }
      }
      v10[(v16 >> 6) + 8] |= 1 << v16;
      uint64_t v22 = 8 * v16;
      *(void *)(v10[6] + v22) = v13;
      *(void *)(v10[7] + v22) = v9;
      uint64_t v23 = v10[2];
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (v24) {
        goto LABEL_21;
      }
      v10[2] = v25;
      id v26 = v13;
LABEL_5:

      swift_bridgeObjectRelease();
      ++v9;
      unint64_t v7 = v12;
      if (v11 == v8)
      {
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain_n();
    uint64_t v8 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  id v10 = (void *)MEMORY[0x1E4FBC868];
LABEL_24:
  uint64_t v27 = v108;
  unint64_t v28 = v108 >> 62;
  if (v108 >> 62)
  {
LABEL_132:
    swift_bridgeObjectRetain_n();
    uint64_t v29 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if (v29) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v29 = *(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v29)
    {
LABEL_26:
      uint64_t v98 = v10;
      unint64_t v100 = v28;
      unint64_t v102 = v7;
      uint64_t v30 = 0;
      id v10 = (void *)MEMORY[0x1E4FBC868];
      while (1)
      {
        unint64_t v28 = v30 + 1;
        if (__OFADD__(v30, 1))
        {
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
          goto LABEL_132;
        }
        uint64_t v31 = v27;
        id v32 = *(id *)(v27 + 8 * v30 + 32);
        uint64_t v27 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v110 = v10;
        unint64_t v34 = sub_1D165A9D0((uint64_t)v32);
        uint64_t v35 = v10[2];
        BOOL v36 = (v33 & 1) == 0;
        uint64_t v37 = v35 + v36;
        if (__OFADD__(v35, v36)) {
          goto LABEL_127;
        }
        unint64_t v7 = v33;
        if (v10[3] >= v37)
        {
          if (v27)
          {
            char v40 = v10;
            if ((v33 & 1) == 0) {
              goto LABEL_37;
            }
          }
          else
          {
            sub_1D16A6F98();
            char v40 = v10;
            if ((v7 & 1) == 0) {
              goto LABEL_37;
            }
          }
        }
        else
        {
          sub_1D16A3218(v37, v27);
          unint64_t v38 = sub_1D165A9D0((uint64_t)v32);
          if ((v7 & 1) != (v39 & 1)) {
            goto LABEL_141;
          }
          unint64_t v34 = v38;
          char v40 = v10;
          if ((v7 & 1) == 0)
          {
LABEL_37:
            v40[(v34 >> 6) + 8] |= 1 << v34;
            uint64_t v41 = 8 * v34;
            *(void *)(v40[6] + v41) = v32;
            *(void *)(v40[7] + v41) = v30;
            uint64_t v42 = v40[2];
            BOOL v24 = __OFADD__(v42, 1);
            uint64_t v43 = v42 + 1;
            if (v24) {
              goto LABEL_129;
            }
            id v10 = v40;
            v40[2] = v43;
            id v44 = v32;
            goto LABEL_28;
          }
        }
        id v10 = v40;
        *(void *)(v40[7] + 8 * v34) = v30;
LABEL_28:

        swift_bridgeObjectRelease();
        ++v30;
        uint64_t v27 = v31;
        if (v28 == v29)
        {
          swift_bridgeObjectRelease();
          unint64_t v28 = v100;
          unint64_t v7 = v102;
          char v45 = v10;
          id v10 = v98;
          if (v104) {
            goto LABEL_134;
          }
LABEL_42:
          uint64_t v46 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v28) {
            goto LABEL_43;
          }
LABEL_135:
          swift_bridgeObjectRetain();
          uint64_t v47 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  char v45 = (void *)MEMORY[0x1E4FBC868];
  if (!v104) {
    goto LABEL_42;
  }
LABEL_134:
  swift_bridgeObjectRetain();
  uint64_t v46 = sub_1D17BEAD0();
  swift_bridgeObjectRelease();
  if (v28) {
    goto LABEL_135;
  }
LABEL_43:
  uint64_t v47 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_44:
  uint64_t v96 = v47;
  if ((unsigned __int128)(v46 * (__int128)v47) >> 64 != (v46 * v47) >> 63)
  {
    __break(1u);
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }
  uint64_t v94 = v46;
  unint64_t v95 = (void *)sub_1D1665914(v46 * v47, 0.0);
  uint64_t v103 = v106 + 64;
  uint64_t v48 = 1 << *(unsigned char *)(v106 + 32);
  if (v48 < 64) {
    uint64_t v49 = ~(-1 << v48);
  }
  else {
    uint64_t v49 = -1;
  }
  unint64_t v50 = v49 & *(void *)(v106 + 64);
  int64_t v104 = (unint64_t)(v48 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v51 = 0;
  while (1)
  {
    while (1)
    {
LABEL_50:
      if (v50)
      {
        unint64_t v52 = __clz(__rbit64(v50));
        v50 &= v50 - 1;
        unint64_t v53 = v52 | (v51 << 6);
      }
      else
      {
        int64_t v54 = v51 + 1;
        if (__OFADD__(v51, 1)) {
          goto LABEL_128;
        }
        if (v54 >= v104)
        {
LABEL_125:
          swift_release();
          type metadata accessor for MAMatrixRepresentation();
          int64_t v89 = (void *)swift_allocObject();
          v89[2] = v94;
          v89[3] = v96;
          v89[4] = v95;
          v89[5] = v109;
          v89[6] = v108;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (uint64_t)v89;
        }
        unint64_t v55 = *(void *)(v103 + 8 * v54);
        ++v51;
        if (!v55)
        {
          int64_t v51 = v54 + 1;
          if (v54 + 1 >= v104) {
            goto LABEL_125;
          }
          unint64_t v55 = *(void *)(v103 + 8 * v51);
          if (!v55)
          {
            int64_t v51 = v54 + 2;
            if (v54 + 2 >= v104) {
              goto LABEL_125;
            }
            unint64_t v55 = *(void *)(v103 + 8 * v51);
            if (!v55)
            {
              int64_t v56 = v54 + 3;
              if (v56 >= v104) {
                goto LABEL_125;
              }
              unint64_t v55 = *(void *)(v103 + 8 * v56);
              if (!v55)
              {
                while (1)
                {
                  int64_t v51 = v56 + 1;
                  if (__OFADD__(v56, 1)) {
                    goto LABEL_130;
                  }
                  if (v51 >= v104) {
                    goto LABEL_125;
                  }
                  unint64_t v55 = *(void *)(v103 + 8 * v51);
                  ++v56;
                  if (v55) {
                    goto LABEL_65;
                  }
                }
              }
              int64_t v51 = v56;
            }
          }
        }
LABEL_65:
        unint64_t v50 = (v55 - 1) & v55;
        unint64_t v53 = __clz(__rbit64(v55)) + (v51 << 6);
      }
      uint64_t v57 = 8 * v53;
      unint64_t v28 = *(void *)(*(void *)(v106 + 48) + v57);
      unint64_t v58 = *(void *)(*(void *)(v106 + 56) + v57);
      uint64_t v59 = *(void *)(a1 + 24);
      if (!v59)
      {
        id v65 = (id)v28;
LABEL_72:
        swift_bridgeObjectRetain();
        goto LABEL_74;
      }
      uint64_t v60 = *(void *)(v59 + 16);
      id v61 = (id)v28;
      if (!v60) {
        goto LABEL_72;
      }
      unint64_t v7 = (unint64_t)v61;
      swift_bridgeObjectRetain();
      unint64_t v62 = sub_1D165A9D0(v7);
      if ((v63 & 1) == 0) {
        break;
      }
      double v64 = *(double *)(*(void *)(v59 + 56) + 8 * v62);

      if (v10[2]) {
        goto LABEL_75;
      }
LABEL_49:
      swift_bridgeObjectRelease();
    }
LABEL_74:
    double v64 = 1.0;
    if (!v10[2]) {
      goto LABEL_49;
    }
LABEL_75:
    unint64_t v7 = (unint64_t)(id)v28;
    unint64_t v66 = sub_1D165A9D0(v7);
    if (v67) {
      break;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v68 = *(void *)(v10[7] + 8 * v66);
  int64_t v93 = (void *)v7;

  if ((v58 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    unint64_t v7 = sub_1D1668090();
    sub_1D1674A20();
    sub_1D17BE390();
    unint64_t v58 = (unint64_t)v110;
    uint64_t v99 = v111;
    uint64_t v69 = v112;
    uint64_t v27 = v113;
    unint64_t v70 = v114;
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v71 = -1 << *(unsigned char *)(v58 + 32);
    uint64_t v99 = (void *)(v58 + 56);
    uint64_t v69 = ~v71;
    uint64_t v72 = -v71;
    if (v72 < 64) {
      uint64_t v73 = ~(-1 << v72);
    }
    else {
      uint64_t v73 = -1;
    }
    unint64_t v70 = v73 & *(void *)(v58 + 56);
  }
  int64_t v97 = (unint64_t)(v69 + 64) >> 6;
  uint64_t v91 = v68 * v96;
  BOOL v92 = (unsigned __int128)(v68 * (__int128)v96) >> 64 != (v68 * v96) >> 63;
  while (2)
  {
    unint64_t v28 = v70;
    while (2)
    {
      if ((v58 & 0x8000000000000000) != 0)
      {
        if (!sub_1D17BE7A0()) {
          goto LABEL_124;
        }
        sub_1D1668090();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        unint64_t v7 = v107;
        swift_unknownObjectRelease();
        uint64_t v75 = v27;
        uint64_t v101 = v28;
        if (!v107) {
          goto LABEL_124;
        }
      }
      else
      {
        if (v28)
        {
          uint64_t v101 = (v28 - 1) & v28;
          unint64_t v74 = __clz(__rbit64(v28)) | (v27 << 6);
          uint64_t v75 = v27;
        }
        else
        {
          int64_t v76 = v27 + 1;
          if (__OFADD__(v27, 1)) {
            goto LABEL_131;
          }
          if (v76 >= v97) {
            goto LABEL_123;
          }
          unint64_t v77 = v99[v76];
          uint64_t v75 = v27 + 1;
          if (!v77)
          {
            uint64_t v75 = v27 + 2;
            if (v27 + 2 >= v97) {
              goto LABEL_123;
            }
            unint64_t v77 = v99[v75];
            if (!v77)
            {
              uint64_t v75 = v27 + 3;
              if (v27 + 3 >= v97) {
                goto LABEL_123;
              }
              unint64_t v77 = v99[v75];
              if (!v77)
              {
                uint64_t v75 = v27 + 4;
                if (v27 + 4 >= v97) {
                  goto LABEL_123;
                }
                unint64_t v77 = v99[v75];
                if (!v77)
                {
                  uint64_t v78 = v27 + 5;
                  while (v97 != v78)
                  {
                    unint64_t v77 = v99[v78++];
                    if (v77)
                    {
                      uint64_t v75 = v78 - 1;
                      goto LABEL_105;
                    }
                  }
LABEL_123:
                  unint64_t v28 = 0;
LABEL_124:
                  sub_1D1668088();

                  goto LABEL_50;
                }
              }
            }
          }
LABEL_105:
          uint64_t v101 = (v77 - 1) & v77;
          unint64_t v74 = __clz(__rbit64(v77)) + (v75 << 6);
        }
        unint64_t v7 = (unint64_t)*(id *)(*(void *)(v58 + 48) + 8 * v74);
        if (!v7) {
          goto LABEL_124;
        }
      }
      double v79 = 1.0;
      if (v59 && *(void *)(v59 + 16))
      {
        id v80 = (id)v7;
        unint64_t v81 = sub_1D165A9D0((uint64_t)v80);
        if (v82) {
          double v79 = *(double *)(*(void *)(v59 + 56) + 8 * v81);
        }
      }
      if (!v45[2])
      {
LABEL_85:

        uint64_t v27 = v75;
        unint64_t v28 = v101;
        continue;
      }
      break;
    }
    uint64_t v27 = v75;
    id v83 = (id)v7;
    unint64_t v84 = sub_1D165A9D0((uint64_t)v83);
    if ((v85 & 1) == 0)
    {

      goto LABEL_85;
    }
    uint64_t v86 = *(void *)(v45[7] + 8 * v84);

    if (v92) {
      goto LABEL_137;
    }
    BOOL v24 = __OFADD__(v91, v86);
    unint64_t v87 = v91 + v86;
    if (!v24)
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v88 = v95;
        if ((v87 & 0x8000000000000000) != 0) {
          goto LABEL_139;
        }
      }
      else
      {
        uint64_t v88 = sub_1D1667604(v95);
        if ((v87 & 0x8000000000000000) != 0) {
          goto LABEL_139;
        }
      }
      if (v87 >= v88[2]) {
        goto LABEL_140;
      }
      unint64_t v95 = v88;
      *(double *)&v88[v87 + 4] = v64 * v79;

      unint64_t v70 = v101;
      continue;
    }
    break;
  }
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  sub_1D1668090();
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

uint64_t sub_1D16D7548(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  return swift_release();
}

uint64_t (*sub_1D16D7558(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D6A88();
  return sub_1D16D75A0;
}

uint64_t sub_1D16D75A0(void *a1)
{
  *(void *)(a1[1] + 64) = *a1;
  return swift_release();
}

id sub_1D16D75B0()
{
  uint64_t v1 = *(void **)(v0 + 72);
  if (v1)
  {
    id v2 = *(id *)(v0 + 72);
  }
  else
  {
    sub_1D16D760C(v0);
    uint64_t v3 = *(void **)(v0 + 72);
    *(void *)(v0 + 72) = v4;
    id v2 = v4;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

void sub_1D16D760C(uint64_t a1)
{
  id v66 = objc_msgSend(objc_allocWithZone((Class)MAGraph), sel_init);
  uint64_t v59 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v57 = v2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v2 + 32);
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v2 + 64);
  int64_t v58 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v60 = v2;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (2)
  {
    if (!v5)
    {
      int64_t v10 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_63;
      }
      if (v10 >= v58) {
        goto LABEL_61;
      }
      unint64_t v11 = *(void *)(v57 + 8 * v10);
      ++v6;
      if (!v11)
      {
        int64_t v6 = v10 + 1;
        if (v10 + 1 >= v58) {
          goto LABEL_61;
        }
        unint64_t v11 = *(void *)(v57 + 8 * v6);
        if (!v11)
        {
          int64_t v6 = v10 + 2;
          if (v10 + 2 >= v58) {
            goto LABEL_61;
          }
          unint64_t v11 = *(void *)(v57 + 8 * v6);
          if (!v11)
          {
            int64_t v12 = v10 + 3;
            if (v12 < v58)
            {
              unint64_t v11 = *(void *)(v57 + 8 * v12);
              if (v11)
              {
                int64_t v6 = v12;
                goto LABEL_21;
              }
              while (1)
              {
                int64_t v6 = v12 + 1;
                if (__OFADD__(v12, 1)) {
                  goto LABEL_64;
                }
                if (v6 >= v58) {
                  break;
                }
                unint64_t v11 = *(void *)(v57 + 8 * v6);
                ++v12;
                if (v11) {
                  goto LABEL_21;
                }
              }
            }
LABEL_61:
            swift_release();
            return;
          }
        }
      }
LABEL_21:
      uint64_t v8 = (v11 - 1) & v11;
      unint64_t v9 = __clz(__rbit64(v11)) + (v6 << 6);
      goto LABEL_22;
    }
    unint64_t v7 = __clz(__rbit64(v5));
    uint64_t v8 = (v5 - 1) & v5;
    unint64_t v9 = v7 | (v6 << 6);
LABEL_22:
    unint64_t v62 = v8;
    int64_t v63 = v6;
    uint64_t v13 = 8 * v9;
    char v14 = *(void **)(*(void *)(v60 + 48) + v13);
    uint64_t v15 = *(void *)(*(void *)(v60 + 56) + v13);
    uint64_t v16 = *(void *)(v59 + 24);
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + 16);
      id v18 = v14;
      swift_bridgeObjectRetain();
      double v19 = 1.0;
      if (v17)
      {
        unint64_t v20 = sub_1D165A9D0((uint64_t)v18);
        if (v21) {
          double v19 = *(double *)(*(void *)(v16 + 56) + 8 * v20);
        }
      }
    }
    else
    {
      id v22 = v14;
      swift_bridgeObjectRetain();
      double v19 = 1.0;
    }
    id v23 = objc_msgSend(v14, sel_label);
    id v24 = objc_msgSend(v14, sel_domain);
    float v25 = v19;
    id v61 = v14;
    id v26 = objc_msgSend(v14, sel_propertyDictionary);
    uint64_t v27 = sub_1D17BDE50();

    sub_1D16771C0(v27);
    swift_bridgeObjectRelease();
    unint64_t v28 = (void *)sub_1D17BDE30();
    swift_bridgeObjectRelease();
    *(float *)&double v29 = v25;
    id v67 = objc_msgSend(v66, sel_addUniqueNodeWithLabel_domain_weight_properties_didCreate_, v23, v24, v28, 0, v29);

    if ((v15 & 0xC000000000000001) != 0)
    {
      sub_1D17BE710();
      sub_1D1668090();
      sub_1D1674A20();
      sub_1D17BE390();
      uint64_t v15 = v69;
      uint64_t v65 = v70;
      uint64_t v30 = v71;
      uint64_t v31 = v72;
      unint64_t v32 = v73;
    }
    else
    {
      uint64_t v31 = 0;
      uint64_t v33 = -1 << *(unsigned char *)(v15 + 32);
      uint64_t v65 = v15 + 56;
      uint64_t v30 = ~v33;
      uint64_t v34 = -v33;
      if (v34 < 64) {
        uint64_t v35 = ~(-1 << v34);
      }
      else {
        uint64_t v35 = -1;
      }
      unint64_t v32 = v35 & *(void *)(v15 + 56);
    }
    int64_t v64 = (unint64_t)(v30 + 64) >> 6;
    while (v15 < 0)
    {
      if (!sub_1D17BE7A0()) {
        goto LABEL_5;
      }
      sub_1D1668090();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v49 = v68;
      swift_unknownObjectRelease();
      uint64_t v48 = v31;
      uint64_t v46 = v32;
      if (!v68) {
        goto LABEL_5;
      }
LABEL_57:
      double v53 = 1.0;
      if (v16 && *(void *)(v16 + 16))
      {
        id v54 = v49;
        unint64_t v55 = sub_1D165A9D0((uint64_t)v54);
        if (v56) {
          double v53 = *(double *)(*(void *)(v16 + 56) + 8 * v55);
        }
      }
      id v36 = objc_msgSend(v49, sel_label);
      id v37 = objc_msgSend(v49, sel_domain);
      float v38 = v53;
      id v39 = objc_msgSend(v49, sel_propertyDictionary);
      uint64_t v40 = sub_1D17BDE50();

      sub_1D16771C0(v40);
      swift_bridgeObjectRelease();
      uint64_t v41 = (void *)sub_1D17BDE30();
      swift_bridgeObjectRelease();
      *(float *)&double v42 = v38;
      id v43 = objc_msgSend(v66, sel_addUniqueNodeWithLabel_domain_weight_properties_didCreate_, v36, v37, v41, 0, v42);

      id v44 = (void *)sub_1D17BDFE0();
      id v45 = objc_msgSend(v66, sel_addEdgeWithLabel_sourceNode_targetNode_, v44, v67, v43);

      uint64_t v31 = v48;
      unint64_t v32 = v46;
    }
    if (v32)
    {
      uint64_t v46 = (v32 - 1) & v32;
      unint64_t v47 = __clz(__rbit64(v32)) | (v31 << 6);
      uint64_t v48 = v31;
LABEL_56:
      id v49 = *(id *)(*(void *)(v15 + 48) + 8 * v47);
      if (!v49) {
        goto LABEL_5;
      }
      goto LABEL_57;
    }
    int64_t v50 = v31 + 1;
    if (!__OFADD__(v31, 1))
    {
      if (v50 >= v64) {
        goto LABEL_5;
      }
      unint64_t v51 = *(void *)(v65 + 8 * v50);
      uint64_t v48 = v31 + 1;
      if (!v51)
      {
        uint64_t v48 = v31 + 2;
        if (v31 + 2 >= v64) {
          goto LABEL_5;
        }
        unint64_t v51 = *(void *)(v65 + 8 * v48);
        if (!v51)
        {
          uint64_t v48 = v31 + 3;
          if (v31 + 3 >= v64) {
            goto LABEL_5;
          }
          unint64_t v51 = *(void *)(v65 + 8 * v48);
          if (!v51)
          {
            uint64_t v48 = v31 + 4;
            if (v31 + 4 >= v64) {
              goto LABEL_5;
            }
            unint64_t v51 = *(void *)(v65 + 8 * v48);
            if (!v51)
            {
              uint64_t v52 = v31 + 5;
              while (v64 != v52)
              {
                unint64_t v51 = *(void *)(v65 + 8 * v52++);
                if (v51)
                {
                  uint64_t v48 = v52 - 1;
                  goto LABEL_55;
                }
              }
LABEL_5:
              sub_1D1668088();

              unint64_t v5 = v62;
              int64_t v6 = v63;
              continue;
            }
          }
        }
      }
LABEL_55:
      uint64_t v46 = (v51 - 1) & v51;
      unint64_t v47 = __clz(__rbit64(v51)) + (v48 << 6);
      goto LABEL_56;
    }
    break;
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
}

uint64_t sub_1D16D7CCC(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  return MEMORY[0x1F41817F8]();
}

void (*sub_1D16D7CD8(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D75B0();
  return sub_1D16D7D20;
}

void sub_1D16D7D20(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = *(void **)(v1 + 72);
  *(void *)(v1 + 72) = v2;
}

uint64_t sub_1D16D7D30()
{
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = *(void *)(v0 + 80);
  }
  else
  {
    sub_1D16D7E60(v0, (uint64_t (*)(void))sub_1D16D9474);
    uint64_t v1 = v2;
    *(void *)(v0 + 80) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t (*sub_1D16D7DA4(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D7D30();
  return sub_1D16789D8;
}

uint64_t sub_1D16D7DEC()
{
  if (*(void *)(v0 + 88))
  {
    uint64_t v1 = *(void *)(v0 + 88);
  }
  else
  {
    sub_1D16D7E60(v0, (uint64_t (*)(void))sub_1D16D9884);
    uint64_t v1 = v2;
    *(void *)(v0 + 88) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1D16D7E60(uint64_t a1, uint64_t (*a2)(void))
{
  v12[1] = (id)MEMORY[0x1E4FBC870];
  uint64_t v2 = (void *)a2();
  uint64_t v3 = v2[2];
  uint64_t v4 = v2[3];
  uint64_t v5 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 == (v3 * v4) >> 63)
  {
    int64_t v6 = v2;
    uint64_t v7 = v2[4];
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = 0;
    swift_bridgeObjectRetain_n();
    swift_retain();
    if (!v5)
    {
LABEL_13:
      *(void *)(v8 + 16) = v5;
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      return;
    }
    unint64_t v9 = 0;
    while (v9 < *(void *)(v7 + 16))
    {
      if (*(double *)(v7 + 32 + 8 * v9) == 1.0)
      {
        uint64_t v11 = v6[5];
        if ((v11 & 0xC000000000000001) != 0)
        {
          id v10 = (id)MEMORY[0x1D25F9260](v9);
        }
        else
        {
          if (v9 >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_15;
          }
          id v10 = *(id *)(v11 + 8 * v9 + 32);
        }
        sub_1D1671FA0(v12, v10);
      }
      if (v5 == ++v9) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1D16D7FD0(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1D16D7FE0(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D7DEC();
  return sub_1D16D8028;
}

uint64_t sub_1D16D8028(void *a1)
{
  *(void *)(a1[1] + 88) = *a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D16D8038()
{
  if (*(void *)(v0 + 96))
  {
    uint64_t v1 = *(void *)(v0 + 96);
  }
  else
  {
    uint64_t v1 = sub_1D16D80FC(0);
    *(void *)(v0 + 96) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1D16D8094(uint64_t a1)
{
  *(void *)(v1 + 96) = a1;
  return swift_release();
}

uint64_t (*sub_1D16D80A4(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D8038();
  return sub_1D16D80EC;
}

uint64_t sub_1D16D80EC(void *a1)
{
  *(void *)(a1[1] + 96) = *a1;
  return swift_release();
}

uint64_t sub_1D16D80FC(char a1)
{
  unint64_t v78 = MEMORY[0x1E4FBC860];
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_1D167661C(v3);
  sub_1D16634F8(v4);
  uint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = sub_1D16D2D80(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_1D167B3C0(v6);
  swift_bridgeObjectRelease();
  sub_1D16634F8(v7);
  int64_t v8 = v78;
  int64_t v9 = v78 >> 62;
  if (v78 >> 62) {
    goto LABEL_98;
  }
  uint64_t v10 = *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v69 = v2;
  if (v10) {
    goto LABEL_3;
  }
  while (2)
  {
    swift_bridgeObjectRelease();
    int64_t v12 = (void *)MEMORY[0x1E4FBC868];
    if (v9) {
      goto LABEL_100;
    }
LABEL_19:
    uint64_t v27 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    int64_t v9 = v27;
LABEL_20:
    if ((unsigned __int128)(v9 * (__int128)v27) >> 64 != (v9 * v27) >> 63)
    {
      __break(1u);
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    uint64_t v28 = sub_1D1665914(v9 * v27, 0.0);
    uint64_t v74 = v2 + 64;
    uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
    if (v29 < 64) {
      uint64_t v30 = ~(-1 << v29);
    }
    else {
      uint64_t v30 = -1;
    }
    unint64_t v31 = v30 & *(void *)(v2 + 64);
    int64_t v76 = (unint64_t)(v29 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v8 = 0;
LABEL_25:
    while (2)
    {
      if (v31)
      {
        unint64_t v32 = __clz(__rbit64(v31));
        v31 &= v31 - 1;
        unint64_t v33 = v32 | (v8 << 6);
        if (!v12[2]) {
          continue;
        }
        goto LABEL_42;
      }
      break;
    }
    int64_t v34 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_94;
    }
    if (v34 >= v76)
    {
LABEL_91:
      swift_release();
      type metadata accessor for MAAdjacencyMatrixRepresentation();
      uint64_t v63 = swift_allocObject();
      *(unsigned char *)(v63 + 48) = a1 & 1;
      *(void *)(v63 + 16) = v9;
      *(void *)(v63 + 24) = v27;
      *(void *)(v63 + 32) = v28;
      *(void *)(v63 + 40) = v78;
      swift_bridgeObjectRelease();
      return v63;
    }
    unint64_t v35 = *(void *)(v74 + 8 * v34);
    ++v8;
    if (!v35)
    {
      int64_t v8 = v34 + 1;
      if (v34 + 1 >= v76) {
        goto LABEL_91;
      }
      unint64_t v35 = *(void *)(v74 + 8 * v8);
      if (!v35)
      {
        int64_t v8 = v34 + 2;
        if (v34 + 2 >= v76) {
          goto LABEL_91;
        }
        unint64_t v35 = *(void *)(v74 + 8 * v8);
        if (!v35)
        {
          int64_t v36 = v34 + 3;
          if (v36 >= v76) {
            goto LABEL_91;
          }
          unint64_t v35 = *(void *)(v74 + 8 * v36);
          if (v35)
          {
            int64_t v8 = v36;
            break;
          }
          while (1)
          {
            int64_t v8 = v36 + 1;
            if (__OFADD__(v36, 1)) {
              break;
            }
            if (v8 >= v76) {
              goto LABEL_91;
            }
            unint64_t v35 = *(void *)(v74 + 8 * v8);
            ++v36;
            if (v35) {
              goto LABEL_41;
            }
          }
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          swift_bridgeObjectRetain_n();
          uint64_t v10 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
          uint64_t v69 = v2;
          if (!v10) {
            continue;
          }
LABEL_3:
          int64_t v75 = v9;
          uint64_t v11 = 0;
          int64_t v12 = (void *)MEMORY[0x1E4FBC868];
          while (1)
          {
            uint64_t v2 = v11 + 1;
            if (__OFADD__(v11, 1))
            {
              __break(1u);
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
LABEL_95:
              __break(1u);
              goto LABEL_96;
            }
            int64_t v9 = (int64_t)*(id *)(v8 + 8 * v11 + 32);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            double v79 = v12;
            unint64_t v15 = sub_1D165A9D0(v9);
            uint64_t v16 = v12[2];
            BOOL v17 = (v14 & 1) == 0;
            uint64_t v18 = v16 + v17;
            if (__OFADD__(v16, v17)) {
              goto LABEL_93;
            }
            char v19 = v14;
            if (v12[3] >= v18)
            {
              if (isUniquelyReferenced_nonNull_native)
              {
                if ((v14 & 1) == 0) {
                  goto LABEL_14;
                }
              }
              else
              {
                sub_1D16A6F98();
                if ((v19 & 1) == 0) {
                  goto LABEL_14;
                }
              }
            }
            else
            {
              sub_1D16A3218(v18, isUniquelyReferenced_nonNull_native);
              unint64_t v20 = sub_1D165A9D0(v9);
              if ((v19 & 1) != (v21 & 1)) {
                goto LABEL_109;
              }
              unint64_t v15 = v20;
              if ((v19 & 1) == 0)
              {
LABEL_14:
                v12[(v15 >> 6) + 8] |= 1 << v15;
                uint64_t v22 = 8 * v15;
                *(void *)(v12[6] + v22) = v9;
                *(void *)(v12[7] + v22) = v11;
                uint64_t v23 = v12[2];
                BOOL v24 = __OFADD__(v23, 1);
                uint64_t v25 = v23 + 1;
                if (v24) {
                  goto LABEL_95;
                }
                id v12[2] = v25;
                id v26 = (id)v9;
                goto LABEL_5;
              }
            }
            *(void *)(v12[7] + 8 * v15) = v11;
LABEL_5:

            swift_bridgeObjectRelease();
            ++v11;
            if (v2 == v10)
            {
              swift_bridgeObjectRelease();
              uint64_t v2 = v69;
              if (!v75) {
                goto LABEL_19;
              }
LABEL_100:
              swift_bridgeObjectRetain();
              int64_t v9 = sub_1D17BEAD0();
              uint64_t v27 = sub_1D17BEAD0();
              swift_bridgeObjectRelease();
              goto LABEL_20;
            }
          }
        }
      }
    }
    break;
  }
LABEL_41:
  unint64_t v31 = (v35 - 1) & v35;
  unint64_t v33 = __clz(__rbit64(v35)) + (v8 << 6);
  if (!v12[2]) {
    goto LABEL_25;
  }
LABEL_42:
  uint64_t v37 = 8 * v33;
  unint64_t v38 = *(void *)(*(void *)(v2 + 56) + v37);
  id v39 = *(id *)(*(void *)(v2 + 48) + v37);
  swift_bridgeObjectRetain();
  unint64_t v40 = sub_1D165A9D0((uint64_t)v39);
  if ((v41 & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_25;
  }
  uint64_t v71 = v27;
  int64_t v66 = v9;
  uint64_t v67 = *(void *)(v12[7] + 8 * v40);
  if ((v38 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D1668090();
    sub_1D1674A20();
    sub_1D17BE390();
    unint64_t v38 = (unint64_t)v79;
    unint64_t v73 = v80;
    uint64_t v42 = v81;
    uint64_t v43 = v82;
    int64_t v9 = v83;
  }
  else
  {
    uint64_t v43 = 0;
    uint64_t v44 = -1 << *(unsigned char *)(v38 + 32);
    unint64_t v73 = (void *)(v38 + 56);
    uint64_t v42 = ~v44;
    uint64_t v45 = -v44;
    if (v45 < 64) {
      uint64_t v46 = ~(-1 << v45);
    }
    else {
      uint64_t v46 = -1;
    }
    int64_t v9 = v46 & *(void *)(v38 + 56);
  }
  uint64_t v70 = (void *)v28;
  int64_t v72 = (unint64_t)(v42 + 64) >> 6;
  uint64_t v65 = v67 * v71;
  while (2)
  {
    uint64_t v2 = v43;
    while (1)
    {
      if ((v38 & 0x8000000000000000) != 0)
      {
        if (!sub_1D17BE7A0()) {
          goto LABEL_90;
        }
        sub_1D1668090();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v49 = v77;
        swift_unknownObjectRelease();
        uint64_t v43 = v2;
        uint64_t v47 = v9;
        if (!v77) {
          goto LABEL_90;
        }
      }
      else
      {
        if (v9)
        {
          uint64_t v47 = (v9 - 1) & v9;
          unint64_t v48 = __clz(__rbit64(v9)) | (v2 << 6);
          uint64_t v43 = v2;
        }
        else
        {
          int64_t v50 = v2 + 1;
          if (__OFADD__(v2, 1)) {
            goto LABEL_97;
          }
          if (v50 >= v72) {
            goto LABEL_90;
          }
          unint64_t v51 = v73[v50];
          uint64_t v43 = v2 + 1;
          if (!v51)
          {
            uint64_t v43 = v2 + 2;
            if (v2 + 2 >= v72) {
              goto LABEL_90;
            }
            unint64_t v51 = v73[v43];
            if (!v51)
            {
              uint64_t v43 = v2 + 3;
              if (v2 + 3 >= v72) {
                goto LABEL_90;
              }
              unint64_t v51 = v73[v43];
              if (!v51)
              {
                uint64_t v43 = v2 + 4;
                if (v2 + 4 >= v72) {
                  goto LABEL_90;
                }
                unint64_t v51 = v73[v43];
                if (!v51)
                {
                  uint64_t v52 = v2 + 5;
                  while (v72 != v52)
                  {
                    unint64_t v51 = v73[v52++];
                    if (v51)
                    {
                      uint64_t v43 = v52 - 1;
                      goto LABEL_73;
                    }
                  }
LABEL_90:
                  sub_1D1668088();

                  uint64_t v2 = v69;
                  uint64_t v28 = (uint64_t)v70;
                  int64_t v9 = v66;
                  uint64_t v27 = v71;
                  goto LABEL_25;
                }
              }
            }
          }
LABEL_73:
          uint64_t v47 = (v51 - 1) & v51;
          unint64_t v48 = __clz(__rbit64(v51)) + (v43 << 6);
        }
        id v49 = *(id *)(*(void *)(v38 + 48) + 8 * v48);
        if (!v49) {
          goto LABEL_90;
        }
      }
      if (v12[2]) {
        break;
      }
LABEL_53:

      uint64_t v2 = v43;
      int64_t v9 = v47;
    }
    int64_t v53 = v47;
    id v54 = v49;
    unint64_t v55 = sub_1D165A9D0((uint64_t)v54);
    if ((v56 & 1) == 0)
    {

      goto LABEL_53;
    }
    uint64_t v57 = *(void *)(v12[7] + 8 * v55);

    if ((unsigned __int128)(v67 * (__int128)v71) >> 64 != (v67 * v71) >> 63) {
      goto LABEL_102;
    }
    unint64_t v58 = v65 + v57;
    if (__OFADD__(v65, v57))
    {
LABEL_103:
      __break(1u);
      break;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v59 = v70;
      if ((v58 & 0x8000000000000000) != 0) {
        break;
      }
      goto LABEL_81;
    }
    uint64_t v59 = sub_1D1667604(v70);
    if ((v58 & 0x8000000000000000) == 0)
    {
LABEL_81:
      unint64_t v60 = v59[2];
      if (v58 >= v60) {
        goto LABEL_105;
      }
      v59[v58 + 4] = 0x3FF0000000000000;
      if (a1)
      {
LABEL_87:
        uint64_t v70 = v59;

        int64_t v9 = v53;
        continue;
      }
      uint64_t v61 = v57 * v71;
      if ((unsigned __int128)(v57 * (__int128)v71) >> 64 != (v57 * v71) >> 63) {
        goto LABEL_106;
      }
      BOOL v24 = __OFADD__(v61, v67);
      unint64_t v62 = v61 + v67;
      if (!v24)
      {
        if (v62 >= v60) {
          goto LABEL_108;
        }
        v59[v62 + 4] = 0x3FF0000000000000;
        goto LABEL_87;
      }
      goto LABEL_107;
    }
    break;
  }
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  sub_1D1668090();
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

uint64_t sub_1D16D88E0(uint64_t a1)
{
  unint64_t v118 = MEMORY[0x1E4FBC860];
  unint64_t isUniquelyReferenced_nonNull_native = *(void *)(v1 + 16);
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_1D167661C(v3);
  sub_1D16634F8(v4);
  uint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = sub_1D16D2D80(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_1D167B3C0(v6);
  swift_bridgeObjectRelease();
  sub_1D16634F8(v7);
  if (v118 >> 62) {
    goto LABEL_156;
  }
  unint64_t v8 = *(void *)((v118 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  uint64_t v113 = (void *)sub_1D1665914(v8, 0.0);
  uint64_t v9 = swift_bridgeObjectRetain();
  sub_1D167661C(v9);
  uint64_t v11 = v10;
  unint64_t v103 = v8;
  if ((v10 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D1668090();
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v11 = v119;
    uint64_t v108 = v120;
    uint64_t v12 = v121;
    uint64_t v13 = v122;
    unint64_t v14 = v123;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = -1 << *(unsigned char *)(v10 + 32);
    uint64_t v108 = v10 + 56;
    uint64_t v12 = ~v15;
    uint64_t v16 = -v15;
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    else {
      uint64_t v17 = -1;
    }
    unint64_t v14 = v17 & *(void *)(v10 + 56);
  }
  unint64_t v18 = 0;
  char v19 = (void *)MEMORY[0x1E4FBC868];
  int64_t v107 = (unint64_t)(v12 + 64) >> 6;
  uint64_t v104 = v11;
  unint64_t v105 = isUniquelyReferenced_nonNull_native;
  while (1)
  {
    uint64_t v22 = v13;
    if ((v11 & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v25 = sub_1D17BE7A0();
    if (!v25) {
      goto LABEL_104;
    }
    int64_t v117 = (void *)v25;
    sub_1D1668090();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    swift_unknownObjectRelease();
    id v20 = v129;
    if (!v129) {
      goto LABEL_104;
    }
LABEL_34:
    if (*(void *)(isUniquelyReferenced_nonNull_native + 16))
    {
      id v112 = v20;
      id v29 = v20;
      unint64_t v30 = sub_1D165A9D0((uint64_t)v29);
      if (v31)
      {
        unint64_t v110 = v14;
        uint64_t v111 = v13;
        uint64_t v32 = *(void *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + 8 * v30);
        swift_bridgeObjectRetain();

        if ((a1 | 2) == 3)
        {
          unint64_t v33 = v32 & 0xC000000000000001;
          if ((v32 & 0xC000000000000001) != 0) {
            uint64_t v34 = sub_1D17BE760();
          }
          else {
            uint64_t v34 = *(void *)(v32 + 16);
          }
          if (swift_isUniquelyReferenced_nonNull_native()) {
            unint64_t v35 = v113;
          }
          else {
            unint64_t v35 = sub_1D1667604(v113);
          }
          if (v18 >= v35[2]) {
            goto LABEL_154;
          }
          *(double *)&v35[v18 + 4] = (double)v34;
        }
        else
        {
          unint64_t v33 = v32 & 0xC000000000000001;
          unint64_t v35 = v113;
        }
        unint64_t v109 = v18;
        uint64_t v113 = v35;
        if (v33)
        {
          sub_1D17BE710();
          sub_1D1668090();
          sub_1D1674A20();
          sub_1D17BE390();
          uint64_t v32 = v124;
          uint64_t v115 = v125;
          uint64_t v36 = v126;
          uint64_t v37 = v127;
          unint64_t v38 = v128;
        }
        else
        {
          uint64_t v37 = 0;
          uint64_t v115 = v32 + 56;
          uint64_t v39 = -1 << *(unsigned char *)(v32 + 32);
          uint64_t v40 = ~v39;
          uint64_t v41 = -v39;
          if (v41 < 64) {
            uint64_t v42 = ~(-1 << v41);
          }
          else {
            uint64_t v42 = -1;
          }
          unint64_t v38 = v42 & *(void *)(v32 + 56);
          uint64_t v36 = v40;
        }
        int64_t v114 = (unint64_t)(v36 + 64) >> 6;
        while (1)
        {
          if (v32 < 0)
          {
            uint64_t v46 = sub_1D17BE7A0();
            if (!v46) {
              goto LABEL_102;
            }
            int64_t v117 = (void *)v46;
            unint64_t isUniquelyReferenced_nonNull_native = sub_1D1668090();
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v47 = v129;
            swift_unknownObjectRelease();
            uint64_t v45 = v37;
            uint64_t v43 = v38;
            if (!v129) {
              goto LABEL_102;
            }
          }
          else
          {
            if (v38)
            {
              uint64_t v43 = (v38 - 1) & v38;
              unint64_t v44 = __clz(__rbit64(v38)) | (v37 << 6);
              uint64_t v45 = v37;
            }
            else
            {
              int64_t v48 = v37 + 1;
              if (__OFADD__(v37, 1)) {
                goto LABEL_148;
              }
              if (v48 >= v114) {
                goto LABEL_102;
              }
              unint64_t v49 = *(void *)(v115 + 8 * v48);
              uint64_t v45 = v37 + 1;
              if (!v49)
              {
                uint64_t v45 = v37 + 2;
                if (v37 + 2 >= v114) {
                  goto LABEL_102;
                }
                unint64_t v49 = *(void *)(v115 + 8 * v45);
                if (!v49)
                {
                  uint64_t v45 = v37 + 3;
                  if (v37 + 3 >= v114) {
                    goto LABEL_102;
                  }
                  unint64_t v49 = *(void *)(v115 + 8 * v45);
                  if (!v49)
                  {
                    uint64_t v45 = v37 + 4;
                    if (v37 + 4 >= v114) {
                      goto LABEL_102;
                    }
                    unint64_t v49 = *(void *)(v115 + 8 * v45);
                    if (!v49)
                    {
                      uint64_t v50 = v37 + 5;
                      while (v114 != v50)
                      {
                        unint64_t v49 = *(void *)(v115 + 8 * v50++);
                        if (v49)
                        {
                          uint64_t v45 = v50 - 1;
                          goto LABEL_73;
                        }
                      }
LABEL_102:
                      sub_1D1668088();
                      unint64_t v18 = v109;
                      unint64_t v14 = v110;
                      uint64_t v11 = v104;
                      unint64_t isUniquelyReferenced_nonNull_native = v105;
                      uint64_t v13 = v111;
                      goto LABEL_11;
                    }
                  }
                }
              }
LABEL_73:
              uint64_t v43 = (v49 - 1) & v49;
              unint64_t v44 = __clz(__rbit64(v49)) + (v45 << 6);
            }
            id v47 = *(id *)(*(void *)(v32 + 48) + 8 * v44);
            if (!v47) {
              goto LABEL_102;
            }
          }
          if (!v19[2]) {
            goto LABEL_86;
          }
          id v51 = v47;
          unint64_t v52 = sub_1D165A9D0((uint64_t)v51);
          if ((v53 & 1) == 0) {
            break;
          }
          uint64_t v54 = *(void *)(v19[7] + 8 * v52);
          uint64_t v55 = v54 + 1;
          if (__OFADD__(v54, 1)) {
            goto LABEL_146;
          }
          unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v129 = v19;
          unint64_t v57 = sub_1D165A9D0((uint64_t)v51);
          uint64_t v58 = v19[2];
          BOOL v59 = (v56 & 1) == 0;
          uint64_t v60 = v58 + v59;
          if (__OFADD__(v58, v59)) {
            goto LABEL_147;
          }
          char v61 = v56;
          if (v19[3] >= v60)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              if ((v56 & 1) == 0) {
                goto LABEL_82;
              }
            }
            else
            {
              sub_1D16A6F98();
              if ((v61 & 1) == 0) {
                goto LABEL_82;
              }
            }
          }
          else
          {
            sub_1D16A3218(v60, isUniquelyReferenced_nonNull_native);
            unint64_t v62 = sub_1D165A9D0((uint64_t)v51);
            if ((v61 & 1) != (v63 & 1)) {
              goto LABEL_157;
            }
            unint64_t v57 = v62;
            if ((v61 & 1) == 0)
            {
LABEL_82:
              v19[(v57 >> 6) + 8] |= 1 << v57;
              uint64_t v64 = 8 * v57;
              *(void *)(v19[6] + v64) = v51;
              *(void *)(v19[7] + v64) = v55;
              uint64_t v65 = v19[2];
              BOOL v21 = __OFADD__(v65, 1);
              uint64_t v66 = v65 + 1;
              if (v21) {
                goto LABEL_151;
              }
              goto LABEL_94;
            }
          }
          *(void *)(v19[7] + 8 * v57) = v55;
LABEL_53:

          swift_bridgeObjectRelease();
          uint64_t v37 = v45;
          unint64_t v38 = v43;
        }

LABEL_86:
        id v51 = v47;
        unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v129 = v19;
        unint64_t v68 = sub_1D165A9D0((uint64_t)v51);
        uint64_t v69 = v19[2];
        BOOL v70 = (v67 & 1) == 0;
        uint64_t v71 = v69 + v70;
        if (__OFADD__(v69, v70))
        {
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          swift_bridgeObjectRetain();
          unint64_t v8 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        char v72 = v67;
        if (v19[3] >= v71)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if (v67) {
              goto LABEL_52;
            }
          }
          else
          {
            sub_1D16A6F98();
            if (v72) {
              goto LABEL_52;
            }
          }
        }
        else
        {
          sub_1D16A3218(v71, isUniquelyReferenced_nonNull_native);
          unint64_t v73 = sub_1D165A9D0((uint64_t)v51);
          if ((v72 & 1) != (v74 & 1))
          {
LABEL_157:
            sub_1D1668090();
            uint64_t result = sub_1D17BEC60();
            __break(1u);
            return result;
          }
          unint64_t v68 = v73;
          if (v72)
          {
LABEL_52:
            *(void *)(v19[7] + 8 * v68) = 1;
            goto LABEL_53;
          }
        }
        v19[(v68 >> 6) + 8] |= 1 << v68;
        uint64_t v75 = 8 * v68;
        *(void *)(v19[6] + v75) = v51;
        *(void *)(v19[7] + v75) = 1;
        uint64_t v76 = v19[2];
        BOOL v21 = __OFADD__(v76, 1);
        uint64_t v66 = v76 + 1;
        if (v21) {
          goto LABEL_145;
        }
LABEL_94:
        v19[2] = v66;
        id v77 = v51;
        goto LABEL_53;
      }

LABEL_11:
      id v20 = v112;
    }

    BOOL v21 = __OFADD__(v18++, 1);
    if (v21) {
      goto LABEL_149;
    }
  }
  if (v14)
  {
    unint64_t v23 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v24 = v23 | (v13 << 6);
    goto LABEL_33;
  }
  int64_t v26 = v13 + 1;
  if (__OFADD__(v13, 1)) {
    goto LABEL_152;
  }
  if (v26 < v107)
  {
    unint64_t v27 = *(void *)(v108 + 8 * v26);
    ++v13;
    if (!v27)
    {
      uint64_t v13 = v22 + 2;
      if (v22 + 2 >= v107) {
        goto LABEL_104;
      }
      unint64_t v27 = *(void *)(v108 + 8 * v13);
      if (!v27)
      {
        uint64_t v13 = v22 + 3;
        if (v22 + 3 >= v107) {
          goto LABEL_104;
        }
        unint64_t v27 = *(void *)(v108 + 8 * v13);
        if (!v27)
        {
          uint64_t v13 = v22 + 4;
          if (v22 + 4 >= v107) {
            goto LABEL_104;
          }
          unint64_t v27 = *(void *)(v108 + 8 * v13);
          if (!v27)
          {
            uint64_t v28 = v22 + 5;
            do
            {
              if (v107 == v28) {
                goto LABEL_104;
              }
              unint64_t v27 = *(void *)(v108 + 8 * v28++);
            }
            while (!v27);
            uint64_t v13 = v28 - 1;
          }
        }
      }
    }
    unint64_t v14 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v13 << 6);
LABEL_33:
    id v20 = *(id *)(*(void *)(v11 + 48) + 8 * v24);
    if (!v20) {
      goto LABEL_104;
    }
    goto LABEL_34;
  }
LABEL_104:
  sub_1D1668088();
  uint64_t v78 = swift_bridgeObjectRetain();
  unint64_t v79 = sub_1D16D2D80(v78);
  swift_bridgeObjectRelease();
  uint64_t v80 = sub_1D167B3C0(v79);
  swift_bridgeObjectRelease();
  if ((v80 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D1668090();
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v80 = (uint64_t)v129;
    uint64_t v116 = v130;
    uint64_t v81 = v131;
    unint64_t isUniquelyReferenced_nonNull_native = v132;
    unint64_t v82 = v133;
  }
  else
  {
    unint64_t isUniquelyReferenced_nonNull_native = 0;
    uint64_t v83 = -1 << *(unsigned char *)(v80 + 32);
    uint64_t v116 = v80 + 56;
    uint64_t v81 = ~v83;
    uint64_t v84 = -v83;
    if (v84 < 64) {
      uint64_t v85 = ~(-1 << v84);
    }
    else {
      uint64_t v85 = -1;
    }
    unint64_t v82 = v85 & *(void *)(v80 + 56);
  }
  int64_t v86 = (unint64_t)(v81 + 64) >> 6;
  while (1)
  {
    unint64_t v88 = v18;
    unint64_t v89 = isUniquelyReferenced_nonNull_native;
    if ((v80 & 0x8000000000000000) == 0) {
      break;
    }
    if (!sub_1D17BE7A0()) {
      goto LABEL_143;
    }
    sub_1D1668090();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v92 = v117;
    swift_unknownObjectRelease();
    if (!v117) {
      goto LABEL_143;
    }
LABEL_135:
    if (!v19[2]) {
      goto LABEL_112;
    }
    id v96 = v92;
    unint64_t v97 = sub_1D165A9D0((uint64_t)v96);
    if ((v98 & 1) == 0)
    {

LABEL_112:
      unint64_t v87 = v88;
      goto LABEL_113;
    }
    uint64_t v99 = *(void *)(v19[7] + 8 * v97);

    if ((a1 & 0xFFFFFFFFFFFFFFFELL) != 2) {
      goto LABEL_112;
    }
    unint64_t v87 = v88;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      unint64_t v100 = v113;
    }
    else {
      unint64_t v100 = sub_1D1667604(v113);
    }
    if (v88 >= v100[2]) {
      goto LABEL_155;
    }
    uint64_t v113 = v100;
    *(double *)&v100[v88 + 4] = (double)v99;
LABEL_113:

    BOOL v21 = __OFADD__(v87, 1);
    unint64_t v18 = v87 + 1;
    if (v21) {
      goto LABEL_150;
    }
  }
  if (v82)
  {
    unint64_t v90 = __clz(__rbit64(v82));
    v82 &= v82 - 1;
    unint64_t v91 = v90 | (isUniquelyReferenced_nonNull_native << 6);
    goto LABEL_134;
  }
  int64_t v93 = isUniquelyReferenced_nonNull_native + 1;
  if (__OFADD__(isUniquelyReferenced_nonNull_native, 1)) {
    goto LABEL_153;
  }
  if (v93 >= v86) {
    goto LABEL_143;
  }
  unint64_t v94 = *(void *)(v116 + 8 * v93);
  ++isUniquelyReferenced_nonNull_native;
  if (v94) {
    goto LABEL_133;
  }
  unint64_t isUniquelyReferenced_nonNull_native = v89 + 2;
  if ((uint64_t)(v89 + 2) >= v86) {
    goto LABEL_143;
  }
  unint64_t v94 = *(void *)(v116 + 8 * isUniquelyReferenced_nonNull_native);
  if (v94) {
    goto LABEL_133;
  }
  unint64_t isUniquelyReferenced_nonNull_native = v89 + 3;
  if ((uint64_t)(v89 + 3) >= v86) {
    goto LABEL_143;
  }
  unint64_t v94 = *(void *)(v116 + 8 * isUniquelyReferenced_nonNull_native);
  if (v94) {
    goto LABEL_133;
  }
  unint64_t isUniquelyReferenced_nonNull_native = v89 + 4;
  if ((uint64_t)(v89 + 4) >= v86) {
    goto LABEL_143;
  }
  unint64_t v94 = *(void *)(v116 + 8 * isUniquelyReferenced_nonNull_native);
  if (v94)
  {
LABEL_133:
    unint64_t v82 = (v94 - 1) & v94;
    unint64_t v91 = __clz(__rbit64(v94)) + (isUniquelyReferenced_nonNull_native << 6);
LABEL_134:
    id v92 = *(id *)(*(void *)(v80 + 48) + 8 * v91);
    if (!v92) {
      goto LABEL_143;
    }
    goto LABEL_135;
  }
  unint64_t v95 = v89 + 5;
  while (v86 != v95)
  {
    unint64_t v94 = *(void *)(v116 + 8 * v95++);
    if (v94)
    {
      unint64_t isUniquelyReferenced_nonNull_native = v95 - 1;
      goto LABEL_133;
    }
  }
LABEL_143:
  sub_1D1668088();
  type metadata accessor for MAVectorRepresentation();
  uint64_t v101 = (void *)swift_allocObject();
  v101[2] = 1;
  v101[3] = v103;
  v101[4] = v113;
  v101[5] = v118;
  swift_bridgeObjectRelease();
  return (uint64_t)v101;
}

void *sub_1D16D9474()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void **)(v0 + 104);
  }
  else
  {
    uint64_t v1 = sub_1D16D94D4(v0);
    *(void *)(v0 + 104) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_1D16D94D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = sub_1D1667170(v1);
  swift_bridgeObjectRelease();
  unint64_t v18 = v2;
  sub_1D16D2B44(&v18);
  swift_bridgeObjectRelease();
  uint64_t v3 = v18;
  int64_t v4 = v18[2];
  if (v4)
  {
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v18 = (void *)MEMORY[0x1E4FBC860];
    sub_1D168271C(0, v4, 0);
    unint64_t v6 = v18;
    uint64_t v7 = v3 + 5;
    int64_t v8 = v4;
    do
    {
      if ((*v7 & 0xC000000000000001) != 0)
      {
        id v9 = (id)*(v7 - 1);
        swift_bridgeObjectRetain();
        uint64_t v10 = sub_1D17BE760();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v10 = *(void *)(*v7 + 16);
      }
      unint64_t v18 = v6;
      unint64_t v12 = v6[2];
      unint64_t v11 = v6[3];
      unint64_t v13 = v12 + 1;
      if (v12 >= v11 >> 1)
      {
        sub_1D168271C(v11 > 1, v12 + 1, 1);
        unint64_t v6 = v18;
      }
      v6[2] = v13;
      *(double *)&v6[v12 + 4] = (double)v10;
      v7 += 2;
      --v8;
    }
    while (v8);
    unint64_t v18 = v5;
    sub_1D17BE920();
    uint64_t v14 = 4;
    do
    {
      id v15 = (id)v3[v14];
      sub_1D17BE8F0();
      sub_1D17BE930();
      sub_1D17BE940();
      sub_1D17BE900();
      v14 += 2;
      --v4;
    }
    while (v4);
    uint64_t v16 = v18;
    swift_release();
  }
  else
  {
    unint64_t v6 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    swift_release();
    uint64_t v16 = v6;
  }
  type metadata accessor for MAVectorRepresentation();
  uint64_t result = (void *)swift_allocObject();
  result[2] = 1;
  result[3] = v13;
  result[4] = v6;
  result[5] = v16;
  return result;
}

uint64_t sub_1D16D96E4(uint64_t a1)
{
  *(void *)(v1 + 104) = a1;
  return swift_release();
}

uint64_t (*sub_1D16D96F4(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D9474();
  return sub_1D16D973C;
}

uint64_t sub_1D16D973C(void *a1)
{
  *(void *)(a1[1] + 104) = *a1;
  return swift_release();
}

uint64_t sub_1D16D974C()
{
  if (*(void *)(v0 + 112))
  {
    uint64_t v1 = *(void *)(v0 + 112);
  }
  else
  {
    uint64_t v2 = v0;
    uint64_t v3 = sub_1D16D9474();
    MAMatrix.diag()();
    uint64_t v4 = v3[5];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MASquareMatrixRepresentation();
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = v6;
    *(void *)(v1 + 32) = v7;
    *(void *)(v1 + 40) = v4;
    *(void *)(v2 + 112) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1D16D981C(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  return swift_release();
}

uint64_t (*sub_1D16D982C(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D974C();
  return sub_1D16D9874;
}

uint64_t sub_1D16D9874(void *a1)
{
  *(void *)(a1[1] + 112) = *a1;
  return swift_release();
}

void *sub_1D16D9884()
{
  if (*(void *)(v0 + 120))
  {
    uint64_t v1 = *(void **)(v0 + 120);
  }
  else
  {
    uint64_t v1 = sub_1D16D98E4();
    *(void *)(v0 + 120) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_1D16D98E4()
{
  uint64_t v0 = (void *)sub_1D16D6020();
  vDSP_Length v2 = v0[2];
  unint64_t v1 = v0[3];
  uint64_t v3 = v0[4];
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)sub_1D1665914(v1, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = sub_1D1667604(v4);
    if ((v1 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v1 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
LABEL_3:
  if (!v1)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t v8 = v0[6];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MAVectorRepresentation();
    uint64_t result = (void *)swift_allocObject();
    result[2] = 1;
    result[3] = v1;
    result[4] = v4;
    result[5] = v8;
    return result;
  }
  uint64_t v5 = (const double *)(v3 + 32);
  long long v6 = (double *)(v4 + 4);
  unint64_t v7 = v1;
  while ((v2 & 0x8000000000000000) == 0)
  {
    vDSP_sveD(v5++, v1, v6++, v2);
    if (!--v7) {
      goto LABEL_7;
    }
  }
LABEL_10:
  uint64_t result = (void *)sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t sub_1D16D9A30(uint64_t a1)
{
  *(void *)(v1 + 120) = a1;
  return swift_release();
}

uint64_t (*sub_1D16D9A40(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D9884();
  return sub_1D16D9A88;
}

uint64_t sub_1D16D9A88(void *a1)
{
  *(void *)(a1[1] + 120) = *a1;
  return swift_release();
}

uint64_t sub_1D16D9A98()
{
  if (*(void *)(v0 + 128))
  {
    uint64_t v1 = *(void *)(v0 + 128);
  }
  else
  {
    uint64_t v2 = v0;
    uint64_t v3 = sub_1D16D9884();
    MAMatrix.diag()();
    uint64_t v4 = v3[5];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MASquareMatrixRepresentation();
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = v6;
    *(void *)(v1 + 32) = v7;
    *(void *)(v1 + 40) = v4;
    *(void *)(v2 + 128) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1D16D9B68(uint64_t a1)
{
  *(void *)(v1 + 128) = a1;
  return swift_release();
}

uint64_t (*sub_1D16D9B78(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D9A98();
  return sub_1D16D9BC0;
}

uint64_t sub_1D16D9BC0(void *a1)
{
  *(void *)(a1[1] + 128) = *a1;
  return swift_release();
}

void *sub_1D16D9BD0()
{
  if (*(void *)(v0 + 136))
  {
    uint64_t v1 = *(void **)(v0 + 136);
  }
  else
  {
    uint64_t v1 = sub_1D16D9C30();
    *(void *)(v0 + 136) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_1D16D9C30()
{
  uint64_t v0 = (void *)sub_1D16D6A88();
  unint64_t v1 = v0[2];
  int64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)sub_1D1665914(v1, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_16;
  }
  if ((v1 & 0x8000000000000000) != 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  while (v1)
  {
    uint64_t v5 = 0;
    long long v6 = (double *)(v4 + 4);
    while (v1 != v5)
    {
      int64_t v7 = v5 * v2;
      if ((unsigned __int128)(v5 * (__int128)v2) >> 64 != (v5 * v2) >> 63) {
        goto LABEL_15;
      }
      if (v2 < 0) {
        goto LABEL_20;
      }
      ++v5;
      vDSP_sveD((const double *)(v3 + 32 + 8 * v7), 1, v6++, v2);
      if (v1 == v5) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    uint64_t v4 = sub_1D1667604(v4);
    if ((v1 & 0x8000000000000000) != 0) {
      goto LABEL_17;
    }
  }
LABEL_9:
  swift_bridgeObjectRelease();
  if (v0[6] >> 62) {
    goto LABEL_18;
  }
LABEL_10:
  swift_bridgeObjectRetain();
  uint64_t v8 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = sub_1D1667604(v4);
  }
  if (v4[2] >> 31)
  {
    __break(1u);
LABEL_20:
    uint64_t result = (void *)sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    swift_bridgeObjectRelease();
    uint64_t v9 = v0[5];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MAVectorRepresentation();
    uint64_t result = (void *)swift_allocObject();
    result[2] = v1;
    result[3] = 1;
    result[4] = v8;
    result[5] = v9;
  }
  return result;
}

uint64_t sub_1D16D9E28(uint64_t a1)
{
  *(void *)(v1 + 136) = a1;
  return swift_release();
}

uint64_t (*sub_1D16D9E38(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D9BD0();
  return sub_1D16D9E80;
}

uint64_t sub_1D16D9E80(void *a1)
{
  *(void *)(a1[1] + 136) = *a1;
  return swift_release();
}

uint64_t sub_1D16D9E90()
{
  if (*(void *)(v0 + 144))
  {
    uint64_t v1 = *(void *)(v0 + 144);
  }
  else
  {
    uint64_t v2 = v0;
    uint64_t v3 = sub_1D16D9BD0();
    MAMatrix.diag()();
    uint64_t v4 = v3[5];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MASquareMatrixRepresentation();
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = v6;
    *(void *)(v1 + 32) = v7;
    *(void *)(v1 + 40) = v4;
    *(void *)(v2 + 144) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1D16D9F60(uint64_t a1)
{
  *(void *)(v1 + 144) = a1;
  return swift_release();
}

uint64_t (*sub_1D16D9F70(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D9E90();
  return sub_1D16D9FB8;
}

uint64_t sub_1D16D9FB8(void *a1)
{
  *(void *)(a1[1] + 144) = *a1;
  return swift_release();
}

void *sub_1D16D9FC8()
{
  if (*(void *)(v0 + 152))
  {
    uint64_t v1 = *(void **)(v0 + 152);
  }
  else
  {
    uint64_t v1 = sub_1D16DA028();
    *(void *)(v0 + 152) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_1D16DA028()
{
  uint64_t v0 = (void *)sub_1D16D6A88();
  vDSP_Length v2 = v0[2];
  unint64_t v1 = v0[3];
  uint64_t v3 = v0[4];
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)sub_1D1665914(v1, 0.0);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v1 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_13:
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v4 = sub_1D1667604(v4);
  if ((v1 & 0x8000000000000000) != 0) {
    goto LABEL_13;
  }
LABEL_3:
  if (v1)
  {
    uint64_t v5 = (const double *)(v3 + 32);
    long long v6 = (double *)(v4 + 4);
    unint64_t v7 = v1;
    while ((v2 & 0x8000000000000000) == 0)
    {
      vDSP_sveD(v5++, v1, v6++, v2);
      if (!--v7) {
        goto LABEL_7;
      }
    }
    goto LABEL_16;
  }
LABEL_7:
  swift_bridgeObjectRelease();
  if (v0[5] >> 62) {
    goto LABEL_14;
  }
LABEL_8:
  swift_bridgeObjectRetain();
  uint64_t v8 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = sub_1D1667604(v4);
  }
  if (!(v4[2] >> 31))
  {
    cblas_dscal_NEWLAPACK();
    swift_bridgeObjectRelease();
    uint64_t v9 = v0[6];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MAVectorRepresentation();
    uint64_t result = (void *)swift_allocObject();
    result[2] = 1;
    result[3] = v1;
    result[4] = v8;
    result[5] = v9;
    return result;
  }
  __break(1u);
LABEL_16:
  uint64_t result = (void *)sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t sub_1D16DA208(uint64_t a1)
{
  *(void *)(v1 + 152) = a1;
  return swift_release();
}

uint64_t (*sub_1D16DA218(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16D9FC8();
  return sub_1D16DA260;
}

uint64_t sub_1D16DA260(void *a1)
{
  *(void *)(a1[1] + 152) = *a1;
  return swift_release();
}

uint64_t sub_1D16DA270()
{
  if (*(void *)(v0 + 160))
  {
    uint64_t v1 = *(void *)(v0 + 160);
  }
  else
  {
    uint64_t v2 = v0;
    uint64_t v3 = sub_1D16D9FC8();
    MAMatrix.diag()();
    uint64_t v4 = v3[5];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MASquareMatrixRepresentation();
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = v6;
    *(void *)(v1 + 32) = v7;
    *(void *)(v1 + 40) = v4;
    *(void *)(v2 + 160) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1D16DA340(uint64_t a1)
{
  *(void *)(v1 + 160) = a1;
  return swift_release();
}

uint64_t (*sub_1D16DA350(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16DA270();
  return sub_1D16DA398;
}

uint64_t sub_1D16DA398(void *a1)
{
  *(void *)(a1[1] + 160) = *a1;
  return swift_release();
}

double sub_1D16DA3A8()
{
  if ((*(unsigned char *)(v0 + 176) & 1) == 0) {
    return *(double *)(v0 + 168);
  }
  sub_1D16D2EF0();
  int64_t v2 = v1;
  uint64_t v3 = sub_1D1665914(v1, 1.0);
  sub_1D16D2EF0();
  v8[0] = 1;
  v8[1] = v2;
  v8[2] = v3;
  v7[0] = 1;
  v7[1] = v4;
  v7[2] = sub_1D1665914(v4, 0.0);
  double v5 = sub_1D16F4588(v8, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(double *)(v0 + 168) = v5;
  *(unsigned char *)(v0 + 176) = 0;
  return v5;
}

void *sub_1D16DA470()
{
  if (*(void *)(v0 + 184))
  {
    unint64_t v1 = *(void **)(v0 + 184);
  }
  else
  {
    unint64_t v1 = sub_1D16DA4D0();
    *(void *)(v0 + 184) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_1D16DA4D0()
{
  int64_t v2 = (void *)sub_1D16D6020();
  uint64_t v3 = v2[5];
  if ((unint64_t)v3 >> 62) {
    goto LABEL_72;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 == (v4 * v5) >> 63)
  {
    unint64_t v1 = (void *)sub_1D1665914(v4 * v5, 0.0);
    unint64_t v0 = v2[5];
    if (!(v0 >> 62))
    {
      uint64_t v3 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      goto LABEL_7;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1D17BEAD0();
LABEL_7:
  unint64_t v26 = v0;
  uint64_t v24 = v4;
  if (v3)
  {
    uint64_t v6 = 0;
    uint64_t v29 = 0;
    unint64_t v30 = v2;
    uint64_t v27 = v3;
    unint64_t v28 = v0 & 0xC000000000000001;
    uint64_t v25 = v0 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v28)
      {
        MEMORY[0x1D25F9260](v6, v26);
        swift_unknownObjectRelease();
      }
      else if ((unint64_t)v6 >= *(void *)(v25 + 16))
      {
        goto LABEL_71;
      }
      if (__OFADD__(v6, 1)) {
        goto LABEL_70;
      }
      unint64_t v7 = v2[5];
      if (v7 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v3 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
        if (v3 < v6)
        {
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v3 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v3 < v6) {
          goto LABEL_51;
        }
      }
      if (v6 != v3) {
        break;
      }
LABEL_9:
      ++v6;
      --v29;
      if (v6 == v27) {
        goto LABEL_52;
      }
    }
    uint64_t v8 = 0;
    uint64_t v31 = v6 * v5;
    BOOL v32 = (unsigned __int128)(v6 * (__int128)v5) >> 64 != (v6 * v5) >> 63;
    uint64_t v33 = v3 + v29;
    while (1)
    {
      if (v8)
      {
        uint64_t v3 = v2[3];
        if (v3 < 0) {
          goto LABEL_83;
        }
        swift_bridgeObjectRetain();
        if (v3)
        {
          uint64_t v9 = sub_1D17BE1C0();
          *(void *)(v9 + 16) = v3;
          bzero((void *)(v9 + 32), 8 * v3);
          if ((unint64_t)v3 >> 31)
          {
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            if (v3 < 0) {
              unint64_t v0 = v3;
            }
            else {
              unint64_t v0 = v3 & 0xFFFFFFFFFFFFFF8;
            }
            swift_bridgeObjectRetain();
            uint64_t v4 = sub_1D17BEAD0();
            swift_bridgeObjectRelease();
            uint64_t v3 = v2[5];
            if (!((unint64_t)v3 >> 62)) {
              goto LABEL_3;
            }
            if (v3 < 0) {
              unint64_t v0 = v2[5];
            }
            else {
              unint64_t v0 = v3 & 0xFFFFFFFFFFFFFF8;
            }
            swift_bridgeObjectRetain();
            uint64_t v5 = sub_1D17BEAD0();
            swift_bridgeObjectRelease();
            goto LABEL_4;
          }
        }
        else
        {
          uint64_t v9 = MEMORY[0x1E4FBC860];
        }
        if ((unsigned __int128)(v6 * (__int128)v3) >> 64 != (v6 * v3) >> 63) {
          goto LABEL_56;
        }
        uint64_t v12 = v5;
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        uint64_t v13 = v2[3];
        if (v13 < 0) {
          goto LABEL_83;
        }
        uint64_t v14 = v1;
        uint64_t v34 = v12;
        swift_bridgeObjectRetain();
        if (v13)
        {
          int64_t v2 = (void *)sub_1D17BE1C0();
          v2[2] = v13;
          unint64_t v1 = v2 + 4;
          bzero(v2 + 4, 8 * v13);
          if ((unint64_t)v13 >> 31) {
            goto LABEL_57;
          }
        }
        else
        {
          int64_t v2 = (void *)MEMORY[0x1E4FBC860];
          unint64_t v1 = (void *)(MEMORY[0x1E4FBC860] + 32);
        }
        uint64_t v15 = v6 + v8;
        if ((unsigned __int128)((v6 + v8) * (__int128)v13) >> 64 != ((v6 + v8) * v13) >> 63) {
          goto LABEL_58;
        }
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        v36[0] = 1;
        v36[1] = v3;
        v36[2] = v9;
        v35[0] = 1;
        v35[1] = v13;
        v35[2] = (uint64_t)v2;
        uint64_t v3 = (uint64_t)&v37;
        double v16 = sub_1D16F4588(v36, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v32) {
          goto LABEL_59;
        }
        uint64_t v3 = v31 + v15;
        if (__OFADD__(v31, v15)) {
          goto LABEL_60;
        }
        unint64_t v1 = v14;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v1 = sub_1D1667604(v14);
        }
        int64_t v2 = v30;
        uint64_t v5 = v34;
        if (v3 < 0) {
          goto LABEL_61;
        }
        unint64_t v17 = v1[2];
        if (v3 >= v17) {
          goto LABEL_62;
        }
        *(double *)&v1[v3 + 4] = v16;
        uint64_t v18 = v15 * v34;
        if ((unsigned __int128)(v15 * (__int128)v34) >> 64 != (v15 * v34) >> 63) {
          goto LABEL_63;
        }
        BOOL v19 = __OFADD__(v18, v6);
        unint64_t v20 = v18 + v6;
        if (v19) {
          goto LABEL_64;
        }
        if (v20 >= v17) {
          goto LABEL_65;
        }
        *(double *)&v1[v20 + 4] = v16;
      }
      else
      {
        uint64_t v10 = v6 * v5;
        if ((unsigned __int128)(v6 * (__int128)v5) >> 64 != (v6 * v5) >> 63) {
          goto LABEL_66;
        }
        unint64_t v11 = v10 + v6;
        if (__OFADD__(v10, v6)) {
          goto LABEL_67;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_68;
          }
        }
        else
        {
          unint64_t v1 = sub_1D1667604(v1);
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_68;
          }
        }
        if (v11 >= v1[2]) {
          goto LABEL_69;
        }
        v1[v11 + 4] = 0;
      }
      if (v33 == ++v8) {
        goto LABEL_9;
      }
    }
  }
LABEL_52:
  swift_bridgeObjectRelease();
  sub_1D16DA3A8();
  swift_bridgeObjectRetain();
  BOOL v21 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    BOOL v21 = sub_1D1667604(v1);
  }
  if (v1[2] >> 31)
  {
    __break(1u);
LABEL_83:
    uint64_t result = (void *)sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    swift_bridgeObjectRelease();
    uint64_t v22 = v2[5];
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MASquareMatrixRepresentation();
    uint64_t result = (void *)swift_allocObject();
    result[2] = v24;
    result[3] = v5;
    result[4] = v21;
    result[5] = v22;
  }
  return result;
}

uint64_t sub_1D16DAA78(uint64_t a1)
{
  *(void *)(v1 + 184) = a1;
  return swift_release();
}

uint64_t (*sub_1D16DAA88(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16DA470();
  return sub_1D16DAAD0;
}

uint64_t sub_1D16DAAD0(void *a1)
{
  *(void *)(a1[1] + 184) = *a1;
  return swift_release();
}

uint64_t sub_1D16DAAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_1D16D6020();
  unint64_t v5 = v4[5];
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a1, v5);
  uint64_t v7 = v6;
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0
    || (unint64_t v9 = v4[5],
        swift_bridgeObjectRetain(),
        sub_1D167D2D8(a2, v9),
        uint64_t v11 = v10,
        char v13 = v12,
        swift_bridgeObjectRelease(),
        (v13 & 1) != 0))
  {
    swift_release();
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  int64_t v14 = v4[3];
  int64_t v15 = v4[4];
  swift_bridgeObjectRetain();
  double v16 = (void *)sub_1D1665914(v14, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    double v16 = sub_1D1667604(v16);
  }
  if (v14 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v14 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((unsigned __int128)(v7 * (__int128)v14) >> 64 == (v7 * v14) >> 63)
  {
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    int64_t v15 = v4[3];
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1D1665914(v15, 0.0);
    *(double *)&uint64_t result = COERCE_DOUBLE(swift_isUniquelyReferenced_nonNull_native());
    if (result) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  *(double *)&uint64_t result = COERCE_DOUBLE(sub_1D1667604((void *)v7));
  uint64_t v7 = result;
LABEL_9:
  if (v15 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v15 <= 0x7FFFFFFF)
  {
    if ((unsigned __int128)(v11 * (__int128)v15) >> 64 == (v11 * v15) >> 63)
    {
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      v21[0] = 1;
      v21[1] = v14;
      v21[2] = (int64_t)v16;
      v20[0] = 1;
      v20[1] = v15;
      v20[2] = v7;
      double v18 = sub_1D16F4588(v21, v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      double v19 = sub_1D16DA3A8();
      swift_release();
      *(double *)&uint64_t result = v18 / v19;
      return result;
    }
    goto LABEL_20;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

void *sub_1D16DAD14()
{
  if (*(void *)(v0 + 192))
  {
    uint64_t v1 = *(void **)(v0 + 192);
  }
  else
  {
    uint64_t v1 = sub_1D16DAD74();
    *(void *)(v0 + 192) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_1D16DAD74()
{
  uint64_t v0 = (void *)sub_1D16D6020();
  unint64_t v1 = v0[5];
  if (v1 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    unint64_t v2 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = (void *)sub_1D1665914(v2, 0.0);
  unint64_t v4 = v0[6];
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v6 = sub_1D1665914(v5, 1.0);
  unint64_t v7 = v0[5];
  unint64_t v20 = v7;
  uint64_t v21 = v6;
  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    unint64_t v18 = v2;
    if (v8) {
      goto LABEL_7;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1D16DA3A8();
    swift_bridgeObjectRetain();
    int64_t v15 = v3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v15 = sub_1D1667604(v3);
    }
    if (!(v3[2] >> 31))
    {
      cblas_dscal_NEWLAPACK();
      swift_bridgeObjectRelease();
      uint64_t v16 = v0[5];
      swift_bridgeObjectRetain();
      swift_release();
      type metadata accessor for MAVectorRepresentation();
      uint64_t result = (void *)swift_allocObject();
      result[2] = 1;
      result[3] = v18;
      result[4] = v15;
      result[5] = v16;
      return result;
    }
    __break(1u);
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_1D17BEAD0();
  unint64_t v18 = v2;
  if (!v8) {
    goto LABEL_28;
  }
LABEL_7:
  if (v8 >= 1)
  {
    unint64_t v9 = 0;
    unint64_t v19 = v7 & 0xC000000000000001;
    while (1)
    {
      id v10 = v19 ? (id)MEMORY[0x1D25F9260](v9, v7) : *(id *)(v7 + 8 * v9 + 32);
      uint64_t v11 = v10;
      int64_t v12 = v0[3];
      if (v12 < 0) {
        goto LABEL_34;
      }
      swift_bridgeObjectRetain();
      if (v12)
      {
        uint64_t v13 = sub_1D17BE1C0();
        *(void *)(v13 + 16) = v12;
        bzero((void *)(v13 + 32), 8 * v12);
        if ((unint64_t)v12 >> 31)
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v13 = MEMORY[0x1E4FBC860];
      }
      if ((unsigned __int128)((uint64_t)v9 * (__int128)v12) >> 64 != (uint64_t)(v9 * v12) >> 63) {
        goto LABEL_23;
      }
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      v23[0] = 1;
      v23[1] = v12;
      v23[2] = v13;
      v22[0] = 1;
      v22[1] = v5;
      v22[2] = v21;
      double v14 = sub_1D16F4588(v23, v22);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_1D1667604(v3);
      }
      if (v9 >= v3[2]) {
        goto LABEL_24;
      }
      *(double *)&v3[v9 + 4] = v14;

      ++v9;
      unint64_t v7 = v20;
      if (v8 == v9) {
        goto LABEL_28;
      }
    }
  }
LABEL_33:
  __break(1u);
LABEL_34:
  uint64_t result = (void *)sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t sub_1D16DB108(uint64_t a1)
{
  *(void *)(v1 + 192) = a1;
  return swift_release();
}

uint64_t (*sub_1D16DB118(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16DAD14();
  return sub_1D16DB160;
}

uint64_t sub_1D16DB160(void *a1)
{
  *(void *)(a1[1] + 192) = *a1;
  return swift_release();
}

uint64_t sub_1D16DB170(uint64_t a1)
{
  unint64_t v2 = (void *)sub_1D16D6020();
  unint64_t v3 = v2[5];
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a1, v3);
  uint64_t v5 = v4;
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    int64_t v7 = v2[3];
    swift_bridgeObjectRetain();
    uint64_t v8 = (void *)sub_1D1665914(v7, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v8 = sub_1D1667604(v8);
    }
    if (v7 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v7 <= 0x7FFFFFFF)
    {
      if ((unsigned __int128)(v5 * (__int128)v7) >> 64 == (v5 * v7) >> 63)
      {
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        unint64_t v9 = v2[6];
        if (!(v9 >> 62))
        {
          unint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_9:
          v15[0] = 1;
          v15[1] = v7;
          v15[2] = (int64_t)v8;
          v14[0] = 1;
          v14[1] = v10;
          v14[2] = sub_1D1665914(v10, 1.0);
          double v11 = sub_1D16F4588(v15, v14);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          double v12 = sub_1D16DA3A8();
          swift_release();
          *(double *)&uint64_t result = v11 / v12;
          return result;
        }
LABEL_14:
        swift_bridgeObjectRetain();
        unint64_t v10 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    __break(1u);
    goto LABEL_13;
  }
  swift_release();
  *(double *)&uint64_t result = 0.0;
  return result;
}

void *sub_1D16DB334()
{
  if (*(void *)(v0 + 200))
  {
    uint64_t v1 = *(void **)(v0 + 200);
  }
  else
  {
    uint64_t v1 = sub_1D16DB394();
    *(void *)(v0 + 200) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_1D16DB394()
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (void *)sub_1D16D6020();
  unint64_t v43 = MEMORY[0x1E4FBC860];
  unint64_t v3 = swift_bridgeObjectRetain();
  sub_1D1664074(v3);
  uint64_t v4 = v43;
  if (v43 >> 62) {
    goto LABEL_60;
  }
  uint64_t v5 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5;
  while ((unsigned __int128)(v6 * (__int128)v5) >> 64 == (v6 * v5) >> 63)
  {
    vDSP_Length v1 = sub_1D1665914(v6 * v5, 0.0);
    unint64_t v0 = v2[5];
    if (v0 >> 62) {
      goto LABEL_62;
    }
    uint64_t v7 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v7) {
      goto LABEL_63;
    }
LABEL_6:
    uint64_t v26 = v6;
    uint64_t v27 = v4;
    uint64_t v8 = 0;
    unint64_t v30 = v0;
    unint64_t v31 = v0 & 0xC000000000000001;
    uint64_t v28 = v0 & 0xFFFFFFFFFFFFFF8;
    uint64_t v29 = v7;
    uint64_t v33 = v5;
    uint64_t v34 = v2;
    while (1)
    {
      if (v31)
      {
        MEMORY[0x1D25F9260](v8, v0);
        swift_unknownObjectRelease();
      }
      else if ((unint64_t)v8 >= *(void *)(v28 + 16))
      {
        goto LABEL_59;
      }
      if (__OFADD__(v8, 1)) {
        break;
      }
      unint64_t v9 = v2[5];
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v4 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
        if (v4 < v8)
        {
LABEL_43:
          __break(1u);
LABEL_44:
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v6 = v26;
          uint64_t v4 = v27;
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v4 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v4 < v8) {
          goto LABEL_43;
        }
      }
      uint64_t v32 = v8 + 1;
      if (v8 != v4)
      {
        uint64_t v35 = v4;
        uint64_t v36 = v8 * v5;
        BOOL v37 = (unsigned __int128)(v8 * (__int128)v5) >> 64 != (v8 * v5) >> 63;
        uint64_t v10 = v8;
        while (1)
        {
          if (v10 >= v4)
          {
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
          vDSP_Length v11 = v2[3];
          if ((v11 & 0x8000000000000000) != 0) {
            break;
          }
          swift_bridgeObjectRetain();
          if (v11)
          {
            uint64_t v4 = sub_1D17BE1C0();
            *(void *)(v4 + 16) = v11;
            double v12 = (const double *)(v4 + 32);
            bzero((void *)(v4 + 32), 8 * v11);
            if (v11 >> 31) {
              goto LABEL_46;
            }
          }
          else
          {
            uint64_t v4 = MEMORY[0x1E4FBC860];
            double v12 = (const double *)(MEMORY[0x1E4FBC860] + 32);
          }
          if ((unsigned __int128)(v8 * (__int128)(uint64_t)v11) >> 64 != (uint64_t)(v8 * v11) >> 63) {
            goto LABEL_47;
          }
          unint64_t v0 = v8;
          uint64_t v13 = (void *)v1;
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          vDSP_Length v1 = v2[3];
          if ((v1 & 0x8000000000000000) != 0) {
            break;
          }
          swift_bridgeObjectRetain();
          if (v1)
          {
            unint64_t v2 = (void *)sub_1D17BE1C0();
            v2[2] = v1;
            double v14 = (const double *)(v2 + 4);
            bzero(v2 + 4, 8 * v1);
            if (v1 >> 31) {
              goto LABEL_48;
            }
          }
          else
          {
            unint64_t v2 = (void *)MEMORY[0x1E4FBC860];
            double v14 = (const double *)(MEMORY[0x1E4FBC860] + 32);
          }
          if ((unsigned __int128)(v10 * (__int128)(uint64_t)v1) >> 64 != (uint64_t)(v10 * v1) >> 63) {
            goto LABEL_49;
          }
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          __C[0] = 1;
          __C[1] = v11;
          __C[2] = v4;
          v38[0] = 1;
          v38[1] = v1;
          v38[2] = (vDSP_Length)v2;
          * infix(_:_:)(__C, v38, (int64_t *)&v40);
          __C[0] = 0;
          vDSP_Length v15 = *(void *)&v40 * v41;
          if ((unsigned __int128)(*(uint64_t *)&v40 * (__int128)v41) >> 64 != (*(void *)&v40 * v41) >> 63) {
            goto LABEL_50;
          }
          if ((v15 & 0x8000000000000000) != 0) {
            goto LABEL_66;
          }
          vDSP_sveD((const double *)(v42 + 32), 1, (double *)__C, v15);
          swift_bridgeObjectRelease();
          double v16 = *(double *)__C;
          double v40 = 0.0;
          vDSP_sveD(v12, 1, &v40, v11);
          swift_bridgeObjectRelease();
          double v17 = v40;
          double v40 = 0.0;
          vDSP_sveD(v14, 1, &v40, v1);
          swift_bridgeObjectRelease();
          if (v37) {
            goto LABEL_51;
          }
          unint64_t v18 = v36 + v10;
          if (__OFADD__(v36, v10)) {
            goto LABEL_52;
          }
          double v19 = v40;
          vDSP_Length v1 = (vDSP_Length)v13;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            vDSP_Length v1 = (vDSP_Length)sub_1D1667604(v13);
          }
          uint64_t v5 = v33;
          unint64_t v2 = v34;
          uint64_t v8 = v0;
          if ((v18 & 0x8000000000000000) != 0) {
            goto LABEL_53;
          }
          unint64_t v20 = *(void *)(v1 + 16);
          if (v18 >= v20) {
            goto LABEL_54;
          }
          double v21 = v16 / (v17 + v19);
          *(double *)(v1 + 32 + 8 * v18) = v21;
          uint64_t v22 = v10 * v33;
          if ((unsigned __int128)(v10 * (__int128)v33) >> 64 != (v10 * v33) >> 63) {
            goto LABEL_55;
          }
          BOOL v23 = __OFADD__(v22, v0);
          unint64_t v24 = v22 + v0;
          if (v23) {
            goto LABEL_56;
          }
          if (v24 >= v20) {
            goto LABEL_57;
          }
          ++v10;
          *(double *)(v1 + 32 + 8 * v24) = v21;
          uint64_t v4 = v35;
          if (v35 == v10) {
            goto LABEL_7;
          }
        }
        sub_1D17BEA30();
        __break(1u);
LABEL_66:
        uint64_t result = (void *)sub_1D17BEA30();
        __break(1u);
        return result;
      }
LABEL_7:
      uint64_t v8 = v32;
      unint64_t v0 = v30;
      if (v32 == v29) {
        goto LABEL_44;
      }
    }
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_1D17BEAD0();
    uint64_t v5 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_62:
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1D17BEAD0();
  if (v7) {
    goto LABEL_6;
  }
LABEL_63:
  swift_bridgeObjectRelease();
  swift_release();
LABEL_64:
  type metadata accessor for MASquareMatrixRepresentation();
  uint64_t result = (void *)swift_allocObject();
  result[2] = v6;
  result[3] = v5;
  result[4] = v1;
  result[5] = v4;
  return result;
}

uint64_t sub_1D16DB944(uint64_t a1)
{
  *(void *)(v1 + 200) = a1;
  return swift_release();
}

uint64_t (*sub_1D16DB954(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16DB334();
  return sub_1D16DB99C;
}

uint64_t sub_1D16DB99C(void *a1)
{
  *(void *)(a1[1] + 200) = *a1;
  return swift_release();
}

uint64_t sub_1D16DB9AC(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)sub_1D16D6020();
  unint64_t v5 = v4[5];
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a1, v5);
  int64_t v7 = v6;
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0
    || (unint64_t v10 = v4[5],
        swift_bridgeObjectRetain(),
        sub_1D167D2D8(a2, v10),
        uint64_t v12 = v11,
        char v14 = v13,
        swift_bridgeObjectRelease(),
        (v14 & 1) != 0))
  {
    swift_release();
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  int64_t v15 = v4[3];
  vDSP_Length v16 = v4[4];
  swift_bridgeObjectRetain();
  double v17 = (void *)sub_1D1665914(v15, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    double v17 = sub_1D1667604(v17);
  }
  if (v15 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v15 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((unsigned __int128)(v7 * (__int128)v15) >> 64 == (v7 * v15) >> 63)
  {
    unint64_t v9 = (const double *)(v17 + 4);
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    int64_t v7 = v4[3];
    swift_bridgeObjectRetain();
    vDSP_Length v16 = sub_1D1665914(v7, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  vDSP_Length v16 = (vDSP_Length)sub_1D1667604((void *)v16);
LABEL_9:
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v7 > 0x7FFFFFFF)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if ((unsigned __int128)(v12 * (__int128)v7) >> 64 != (v12 * v7) >> 63)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  __C[0] = 1;
  __C[1] = v15;
  __C[2] = (int64_t)v17;
  v22[0] = 1;
  v22[1] = v7;
  v22[2] = v16;
  * infix(_:_:)(__C, v22, (int64_t *)&v24);
  __C[0] = 0;
  vDSP_Length v18 = *(void *)&v24 * v25;
  if ((unsigned __int128)(*(uint64_t *)&v24 * (__int128)v25) >> 64 != (*(void *)&v24 * v25) >> 63) {
    goto LABEL_25;
  }
  if ((v18 & 0x8000000000000000) != 0) {
    goto LABEL_26;
  }
  vDSP_sveD((const double *)(v26 + 32), 1, (double *)__C, v18);
  swift_bridgeObjectRelease();
  double v19 = *(double *)__C;
  double v24 = 0.0;
  if (v15 < 0 || (vDSP_sveD(v9, 1, &v24, v15), swift_bridgeObjectRelease(), v20 = v24, double v24 = 0.0, v7 < 0))
  {
LABEL_26:
    *(double *)&uint64_t result = COERCE_DOUBLE(sub_1D17BEA30());
    __break(1u);
  }
  else
  {
    vDSP_sveD((const double *)(v16 + 32), 1, &v24, v7);
    swift_bridgeObjectRelease();
    swift_release();
    *(double *)&uint64_t result = v19 / (v20 + v24);
  }
  return result;
}

void *sub_1D16DBCD4()
{
  if (*(void *)(v0 + 208))
  {
    uint64_t v1 = *(void **)(v0 + 208);
  }
  else
  {
    uint64_t v1 = sub_1D16DBD34();
    *(void *)(v0 + 208) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_1D16DBD34()
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void *)sub_1D16D6020();
  unint64_t v48 = MEMORY[0x1E4FBC860];
  unint64_t v2 = swift_bridgeObjectRetain();
  sub_1D1664074(v2);
  unint64_t v29 = v48;
  if (v48 >> 62) {
    goto LABEL_63;
  }
  uint64_t v3 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v4 = v3;
  while ((unsigned __int128)(v4 * (__int128)v3) >> 64 == (v4 * v3) >> 63)
  {
    uint64_t v28 = v4;
    uint64_t v0 = sub_1D1665914(v4 * v3, 0.0);
    uint64_t v4 = v1[6];
    if ((unint64_t)v4 >> 62) {
      goto LABEL_65;
    }
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_66;
    }
LABEL_6:
    uint64_t v6 = 0;
    uint64_t v32 = v4;
    unint64_t v33 = v4 & 0xC000000000000001;
    uint64_t v30 = v4 & 0xFFFFFFFFFFFFFF8;
    uint64_t v31 = v5;
    uint64_t v7 = 32;
    uint64_t v36 = v3;
    BOOL v37 = v1;
    while (1)
    {
      if (v33)
      {
        MEMORY[0x1D25F9260](v6, v4);
        swift_unknownObjectRelease();
      }
      else if ((unint64_t)v6 >= *(void *)(v30 + 16))
      {
        goto LABEL_62;
      }
      uint64_t v35 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        break;
      }
      unint64_t v8 = v1[6];
      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v9 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
        if (v9 < v6)
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
          break;
        }
      }
      else
      {
        uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v9 < v6) {
          goto LABEL_45;
        }
      }
      uint64_t v34 = v7;
      if (v6 != v9)
      {
        uint64_t v38 = v9;
        uint64_t v39 = v6 * v3;
        BOOL v40 = (unsigned __int128)(v6 * (__int128)v3) >> 64 != (v6 * v3) >> 63;
        uint64_t v10 = v6;
        uint64_t v42 = v6;
        while (v10 < v9)
        {
          vDSP_Length v11 = v1[2];
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_67;
          }
          uint64_t v12 = v1[3];
          swift_bridgeObjectRetain();
          if (v11)
          {
            uint64_t v13 = sub_1D17BE1C0();
            *(void *)(v13 + 16) = v11;
            char v14 = (const double *)(v13 + 32);
            bzero((void *)(v13 + 32), 8 * v11);
            if (v11 >> 31) {
              goto LABEL_47;
            }
          }
          else
          {
            uint64_t v13 = MEMORY[0x1E4FBC860];
            char v14 = (const double *)(MEMORY[0x1E4FBC860] + 32);
          }
          if (v12 < (uint64_t)0xFFFFFFFF80000000) {
            goto LABEL_48;
          }
          if (v12 > 0x7FFFFFFF) {
            goto LABEL_49;
          }
          uint64_t v41 = (void *)v0;
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          vDSP_Length v15 = v1[2];
          if ((v15 & 0x8000000000000000) != 0)
          {
LABEL_67:
            sub_1D17BEA30();
            __break(1u);
LABEL_68:
            uint64_t result = (void *)sub_1D17BEA30();
            __break(1u);
            return result;
          }
          uint64_t v0 = v1[3];
          swift_bridgeObjectRetain();
          if (v15)
          {
            uint64_t v1 = (void *)sub_1D17BE1C0();
            v1[2] = v15;
            vDSP_Length v16 = (const double *)(v1 + 4);
            bzero(v1 + 4, 8 * v15);
            if (v15 >> 31) {
              goto LABEL_50;
            }
          }
          else
          {
            uint64_t v1 = (void *)MEMORY[0x1E4FBC860];
            vDSP_Length v16 = (const double *)(MEMORY[0x1E4FBC860] + 32);
          }
          if (v0 < (uint64_t)0xFFFFFFFF80000000) {
            goto LABEL_51;
          }
          if (v0 > 0x7FFFFFFF) {
            goto LABEL_52;
          }
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          __C[0] = v11;
          __C[1] = 1;
          __C[2] = v13;
          v43[0] = v15;
          v43[1] = 1;
          v43[2] = (vDSP_Length)v1;
          * infix(_:_:)(__C, v43, (int64_t *)&v45);
          __C[0] = 0;
          vDSP_Length v17 = *(void *)&v45 * v46;
          if ((unsigned __int128)(*(uint64_t *)&v45 * (__int128)v46) >> 64 != (*(void *)&v45 * v46) >> 63) {
            goto LABEL_53;
          }
          if ((v17 & 0x8000000000000000) != 0) {
            goto LABEL_68;
          }
          vDSP_sveD((const double *)(v47 + 32), 1, (double *)__C, v17);
          swift_bridgeObjectRelease();
          double v18 = *(double *)__C;
          double v45 = 0.0;
          vDSP_sveD(v14, 1, &v45, v11);
          swift_bridgeObjectRelease();
          double v19 = v45;
          double v45 = 0.0;
          vDSP_sveD(v16, 1, &v45, v15);
          swift_bridgeObjectRelease();
          uint64_t v0 = (uint64_t)v41;
          if (v40) {
            goto LABEL_54;
          }
          unint64_t v20 = v39 + v10;
          if (__OFADD__(v39, v10)) {
            goto LABEL_55;
          }
          double v21 = v45;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v0 = (uint64_t)sub_1D1667604(v41);
          }
          uint64_t v3 = v36;
          uint64_t v1 = v37;
          if ((v20 & 0x8000000000000000) != 0) {
            goto LABEL_56;
          }
          unint64_t v22 = *(void *)(v0 + 16);
          if (v20 >= v22) {
            goto LABEL_57;
          }
          double v23 = v18 / (v19 + v21);
          *(double *)(v0 + 32 + 8 * v20) = v23;
          uint64_t v24 = v10 * v36;
          if ((unsigned __int128)(v10 * (__int128)v36) >> 64 != (v10 * v36) >> 63) {
            goto LABEL_58;
          }
          BOOL v25 = __OFADD__(v24, v42);
          unint64_t v26 = v24 + v42;
          if (v25) {
            goto LABEL_59;
          }
          if (v26 >= v22) {
            goto LABEL_60;
          }
          ++v10;
          *(double *)(v0 + 32 + 8 * v26) = v23;
          v7 += 8;
          uint64_t v9 = v38;
          if (v38 == v10) {
            goto LABEL_7;
          }
        }
        goto LABEL_46;
      }
LABEL_7:
      uint64_t v7 = v34 + 8;
      uint64_t v6 = v35;
      uint64_t v4 = v32;
      if (v35 == v31) {
        goto LABEL_66;
      }
    }
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1D17BEAD0();
    uint64_t v3 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_65:
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1D17BEAD0();
  if (v5) {
    goto LABEL_6;
  }
LABEL_66:
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for MASquareMatrixRepresentation();
  uint64_t result = (void *)swift_allocObject();
  result[2] = v28;
  result[3] = v3;
  result[4] = v0;
  result[5] = v29;
  return result;
}

uint64_t sub_1D16DC300(uint64_t a1)
{
  *(void *)(v1 + 208) = a1;
  return swift_release();
}

uint64_t (*sub_1D16DC310(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16DBCD4();
  return sub_1D16DC358;
}

uint64_t sub_1D16DC358(void *a1)
{
  *(void *)(a1[1] + 208) = *a1;
  return swift_release();
}

uint64_t sub_1D16DC368(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)sub_1D16D6020();
  unint64_t v6 = v5[6];
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a1, v6);
  int64_t v8 = v7;
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0
    || (unint64_t v11 = v5[6],
        swift_bridgeObjectRetain(),
        sub_1D167D2D8(a2, v11),
        char v13 = v12,
        swift_bridgeObjectRelease(),
        (v13 & 1) != 0))
  {
    swift_release();
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  int64_t v14 = v5[2];
  uint64_t v15 = v5[3];
  vDSP_Length v16 = v5[4];
  swift_bridgeObjectRetain();
  vDSP_Length v17 = (void *)sub_1D1665914(v14, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    vDSP_Length v17 = sub_1D1667604(v17);
  }
  if (v14 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v14 < (uint64_t)0xFFFFFFFF80000000 || v15 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_21;
  }
  if (v15 <= 0x7FFFFFFF)
  {
    uint64_t v10 = (const double *)(v17 + 4);
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    int64_t v8 = v5[2];
    uint64_t v2 = v5[3];
    swift_bridgeObjectRetain();
    vDSP_Length v16 = sub_1D1665914(v8, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  vDSP_Length v16 = (vDSP_Length)sub_1D1667604((void *)v16);
LABEL_10:
  if (v8 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v8 < (uint64_t)0xFFFFFFFF80000000 || v2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_25;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  __C[0] = v14;
  __C[1] = 1;
  __C[2] = (int64_t)v17;
  v22[0] = v8;
  v22[1] = 1;
  v22[2] = v16;
  * infix(_:_:)(__C, v22, (int64_t *)&v24);
  __C[0] = 0;
  vDSP_Length v18 = *(void *)&v24 * v25;
  if ((unsigned __int128)(*(uint64_t *)&v24 * (__int128)v25) >> 64 != (*(void *)&v24 * v25) >> 63) {
    goto LABEL_27;
  }
  if ((v18 & 0x8000000000000000) != 0) {
    goto LABEL_28;
  }
  vDSP_sveD((const double *)(v26 + 32), 1, (double *)__C, v18);
  swift_bridgeObjectRelease();
  double v19 = *(double *)__C;
  double v24 = 0.0;
  if (v14 < 0 || (vDSP_sveD(v10, 1, &v24, v14), swift_bridgeObjectRelease(), v20 = v24, double v24 = 0.0, v8 < 0))
  {
LABEL_28:
    *(double *)&uint64_t result = COERCE_DOUBLE(sub_1D17BEA30());
    __break(1u);
  }
  else
  {
    vDSP_sveD((const double *)(v16 + 32), 1, &v24, v8);
    swift_bridgeObjectRelease();
    swift_release();
    *(double *)&uint64_t result = v19 / (v20 + v24);
  }
  return result;
}

void *sub_1D16DC6A0()
{
  if (*(void *)(v0 + 216))
  {
    uint64_t v1 = *(void **)(v0 + 216);
  }
  else
  {
    uint64_t v1 = sub_1D16DC700();
    *(void *)(v0 + 216) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_1D16DC700()
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1D16D6020();
  unint64_t v40 = MEMORY[0x1E4FBC860];
  uint64_t v34 = (void *)v2;
  unint64_t v3 = swift_bridgeObjectRetain();
  sub_1D1664074(v3);
  uint64_t v4 = (void *)v40;
  if (v40 >> 62) {
    goto LABEL_61;
  }
  uint64_t v5 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5;
  while ((unsigned __int128)(v6 * (__int128)v5) >> 64 == (v6 * v5) >> 63)
  {
    uint64_t v0 = (void *)sub_1D1665914(v6 * v5, 0.0);
    unint64_t v1 = v34[5];
    if (v1 >> 62) {
      goto LABEL_63;
    }
    uint64_t v7 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v7) {
      goto LABEL_64;
    }
LABEL_6:
    uint64_t v25 = v6;
    uint64_t v26 = v4;
    uint64_t v8 = 0;
    unint64_t v29 = v1;
    unint64_t v30 = v1 & 0xC000000000000001;
    uint64_t v27 = v1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v28 = v7;
    uint64_t v4 = v34;
    while (1)
    {
      if (v30)
      {
        MEMORY[0x1D25F9260](v8, v1);
        swift_unknownObjectRelease();
      }
      else if ((unint64_t)v8 >= *(void *)(v27 + 16))
      {
        goto LABEL_60;
      }
      if (__OFADD__(v8, 1)) {
        break;
      }
      unint64_t v9 = v4[5];
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
        if (v10 < v8)
        {
LABEL_44:
          __break(1u);
LABEL_45:
          swift_bridgeObjectRelease();
          uint64_t v6 = v25;
          uint64_t v4 = v26;
          goto LABEL_65;
        }
      }
      else
      {
        uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v10 < v8) {
          goto LABEL_44;
        }
      }
      uint64_t v31 = v8 + 1;
      if (v8 != v10)
      {
        uint64_t v32 = v10;
        uint64_t v33 = v8 * v5;
        uint64_t v11 = v8;
        while (1)
        {
          if (v11 >= v10)
          {
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
          int64_t v12 = v4[3];
          if (v12 < 0) {
            break;
          }
          unint64_t v1 = v4[4];
          swift_bridgeObjectRetain();
          if (v12)
          {
            uint64_t v13 = sub_1D17BE1C0();
            *(void *)(v13 + 16) = v12;
            bzero((void *)(v13 + 32), 8 * v12);
            if ((unint64_t)v12 >> 31) {
              goto LABEL_47;
            }
          }
          else
          {
            uint64_t v13 = MEMORY[0x1E4FBC860];
          }
          if ((unsigned __int128)(v8 * (__int128)v12) >> 64 != (v8 * v12) >> 63) {
            goto LABEL_48;
          }
          int64_t v14 = v0;
          uint64_t v0 = (void *)v5;
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          vDSP_Length v15 = v4[3];
          if ((v15 & 0x8000000000000000) != 0) {
            break;
          }
          swift_bridgeObjectRetain();
          if (v15)
          {
            unint64_t v1 = sub_1D17BE1C0();
            *(void *)(v1 + 16) = v15;
            uint64_t v4 = (void *)(v1 + 32);
            bzero((void *)(v1 + 32), 8 * v15);
            if (v15 >> 31) {
              goto LABEL_49;
            }
          }
          else
          {
            unint64_t v1 = MEMORY[0x1E4FBC860];
            uint64_t v4 = (void *)(MEMORY[0x1E4FBC860] + 32);
          }
          if ((unsigned __int128)(v11 * (__int128)(uint64_t)v15) >> 64 != (uint64_t)(v11 * v15) >> 63) {
            goto LABEL_50;
          }
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          __C[0] = 1;
          __C[1] = v12;
          __C[2] = v13;
          v35[0] = 1;
          v35[1] = v15;
          v35[2] = v1;
          * infix(_:_:)(__C, v35, &v37);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __C[0] = 0;
          vDSP_Length v16 = v37 * v38;
          if ((unsigned __int128)(v37 * (__int128)v38) >> 64 != (v37 * v38) >> 63) {
            goto LABEL_51;
          }
          if ((v16 & 0x8000000000000000) != 0) {
            goto LABEL_73;
          }
          vDSP_sveD((const double *)(v39 + 32), 1, (double *)__C, v16);
          swift_bridgeObjectRelease();
          uint64_t v4 = v34;
          if ((unsigned __int128)(v8 * (__int128)v5) >> 64 != (v8 * v5) >> 63) {
            goto LABEL_52;
          }
          unint64_t v17 = v33 + v11;
          if (__OFADD__(v33, v11)) {
            goto LABEL_53;
          }
          int64_t v18 = __C[0];
          uint64_t v0 = v14;
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            if ((v17 & 0x8000000000000000) != 0) {
              goto LABEL_54;
            }
          }
          else
          {
            uint64_t v0 = sub_1D1667604(v14);
            if ((v17 & 0x8000000000000000) != 0) {
              goto LABEL_54;
            }
          }
          unint64_t v19 = v0[2];
          if (v17 >= v19) {
            goto LABEL_55;
          }
          v0[v17 + 4] = v18;
          uint64_t v20 = v11 * v5;
          if ((unsigned __int128)(v11 * (__int128)v5) >> 64 != (v11 * v5) >> 63) {
            goto LABEL_56;
          }
          BOOL v21 = __OFADD__(v20, v8);
          unint64_t v22 = v20 + v8;
          if (v21) {
            goto LABEL_57;
          }
          if (v22 >= v19) {
            goto LABEL_58;
          }
          ++v11;
          v0[v22 + 4] = v18;
          uint64_t v10 = v32;
          if (v32 == v11) {
            goto LABEL_7;
          }
        }
        sub_1D17BEA30();
        __break(1u);
LABEL_73:
        uint64_t result = (void *)sub_1D17BEA30();
        __break(1u);
        return result;
      }
LABEL_7:
      ++v8;
      unint64_t v1 = v29;
      if (v31 == v28) {
        goto LABEL_45;
      }
    }
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_1D17BEAD0();
    uint64_t v5 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_63:
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1D17BEAD0();
  if (v7) {
    goto LABEL_6;
  }
LABEL_64:
  swift_bridgeObjectRelease();
LABEL_65:
  if (v34[6] >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  double v23 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    double v23 = sub_1D1667604(v0);
  }
  if (v0[2] >> 31) {
    __break(1u);
  }
  cblas_dscal_NEWLAPACK();
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for MASquareMatrixRepresentation();
  uint64_t result = (void *)swift_allocObject();
  result[2] = v6;
  result[3] = v5;
  result[4] = v23;
  result[5] = v4;
  return result;
}

uint64_t sub_1D16DCD00(uint64_t a1)
{
  *(void *)(v1 + 216) = a1;
  return swift_release();
}

uint64_t (*sub_1D16DCD10(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16DC6A0();
  return sub_1D16DCD58;
}

uint64_t sub_1D16DCD58(void *a1)
{
  *(void *)(a1[1] + 216) = *a1;
  return swift_release();
}

uint64_t sub_1D16DCD68(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)sub_1D16D6020();
  unint64_t v6 = v5[5];
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a1, v6);
  int64_t v8 = v7;
  LOBYTE(a1) = v9;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0
    || (unint64_t v10 = v5[5],
        swift_bridgeObjectRetain(),
        sub_1D167D2D8(a2, v10),
        uint64_t v12 = v11,
        char v14 = v13,
        swift_bridgeObjectRelease(),
        (v14 & 1) != 0))
  {
    swift_release();
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  int64_t v15 = v5[3];
  int64_t v16 = v5[4];
  swift_bridgeObjectRetain();
  unint64_t v17 = (void *)sub_1D1665914(v15, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v17 = sub_1D1667604(v17);
  }
  if (v15 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v15 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((unsigned __int128)(v8 * (__int128)v15) >> 64 == (v8 * v15) >> 63)
  {
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    int64_t v16 = v5[3];
    swift_bridgeObjectRetain();
    int64_t v8 = sub_1D1665914(v16, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  int64_t v8 = (int64_t)sub_1D1667604((void *)v8);
LABEL_9:
  if (v16 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v16 > 0x7FFFFFFF)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if ((unsigned __int128)(v12 * (__int128)v16) >> 64 != (v12 * v16) >> 63)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  __C[0] = 1;
  __C[1] = v15;
  __C[2] = (int64_t)v17;
  v22[0] = 1;
  v22[1] = v16;
  v22[2] = v8;
  * infix(_:_:)(__C, v22, &v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __C[0] = 0;
  vDSP_Length v18 = v24 * v25;
  if ((unsigned __int128)(v24 * (__int128)v25) >> 64 != (v24 * v25) >> 63)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    vDSP_sveD((const double *)(v26 + 32), 1, (double *)__C, v18);
    swift_bridgeObjectRelease();
    double v2 = *(double *)__C;
    unint64_t v19 = v5[6];
    if (!(v19 >> 62))
    {
      uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
      swift_release();
      *(double *)&uint64_t result = v2 / (double)v20;
      return result;
    }
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  *(double *)&uint64_t result = COERCE_DOUBLE(sub_1D17BEA30());
  __break(1u);
  return result;
}

void *sub_1D16DD080()
{
  if (*(void *)(v0 + 224))
  {
    uint64_t v1 = *(void **)(v0 + 224);
  }
  else
  {
    uint64_t v1 = sub_1D16DD0E0();
    *(void *)(v0 + 224) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_1D16DD0E0()
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void *)sub_1D16D6020();
  unint64_t v45 = MEMORY[0x1E4FBC860];
  unint64_t v2 = swift_bridgeObjectRetain();
  sub_1D1664074(v2);
  unint64_t v27 = v45;
  if (v45 >> 62) {
    goto LABEL_64;
  }
  uint64_t v3 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v4 = v3;
  while ((unsigned __int128)(v4 * (__int128)v3) >> 64 == (v4 * v3) >> 63)
  {
    uint64_t v26 = v4;
    uint64_t v0 = (void *)sub_1D1665914(v4 * v3, 0.0);
    uint64_t v4 = v1[6];
    if ((unint64_t)v4 >> 62) {
      goto LABEL_66;
    }
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_67;
    }
LABEL_6:
    uint64_t v6 = 0;
    uint64_t v30 = v4;
    unint64_t v31 = v4 & 0xC000000000000001;
    uint64_t v28 = v4 & 0xFFFFFFFFFFFFFF8;
    uint64_t v29 = v5;
    uint64_t v7 = 32;
    uint64_t v34 = v1;
    uint64_t v35 = v3;
    while (1)
    {
      if (v31)
      {
        MEMORY[0x1D25F9260](v6, v4);
        swift_unknownObjectRelease();
      }
      else if ((unint64_t)v6 >= *(void *)(v28 + 16))
      {
        goto LABEL_63;
      }
      if (__OFADD__(v6, 1)) {
        break;
      }
      unint64_t v8 = v1[6];
      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v9 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
        if (v9 < v6)
        {
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          break;
        }
      }
      else
      {
        uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v9 < v6) {
          goto LABEL_46;
        }
      }
      uint64_t v32 = v6 + 1;
      uint64_t v33 = v7;
      if (v6 != v9)
      {
        uint64_t v36 = v9;
        uint64_t v37 = v6 * v3;
        BOOL v38 = (unsigned __int128)(v6 * (__int128)v3) >> 64 != (v6 * v3) >> 63;
        uint64_t v10 = v6;
        uint64_t v39 = v6;
        while (v10 < v9)
        {
          unint64_t v11 = v1[2];
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_74;
          }
          uint64_t v12 = v1[3];
          swift_bridgeObjectRetain();
          if (v11)
          {
            uint64_t v13 = sub_1D17BE1C0();
            *(void *)(v13 + 16) = v11;
            bzero((void *)(v13 + 32), 8 * v11);
            if (v11 >> 31) {
              goto LABEL_48;
            }
          }
          else
          {
            uint64_t v13 = MEMORY[0x1E4FBC860];
          }
          if (v12 < (uint64_t)0xFFFFFFFF80000000) {
            goto LABEL_49;
          }
          if (v12 > 0x7FFFFFFF) {
            goto LABEL_50;
          }
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          vDSP_Length v14 = v1[2];
          if ((v14 & 0x8000000000000000) != 0)
          {
LABEL_74:
            sub_1D17BEA30();
            __break(1u);
LABEL_75:
            uint64_t result = (void *)sub_1D17BEA30();
            __break(1u);
            return result;
          }
          uint64_t v15 = v1[3];
          uint64_t v1 = (void *)v1[4];
          swift_bridgeObjectRetain();
          if (v14)
          {
            uint64_t v16 = sub_1D17BE1C0();
            *(void *)(v16 + 16) = v14;
            bzero((void *)(v16 + 32), 8 * v14);
            if (v14 >> 31) {
              goto LABEL_51;
            }
          }
          else
          {
            uint64_t v16 = MEMORY[0x1E4FBC860];
          }
          if (v15 < (uint64_t)0xFFFFFFFF80000000) {
            goto LABEL_52;
          }
          if (v15 > 0x7FFFFFFF) {
            goto LABEL_53;
          }
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          __C[0] = v11;
          __C[1] = 1;
          __C[2] = v13;
          v40[0] = v14;
          v40[1] = 1;
          v40[2] = v16;
          * infix(_:_:)(__C, v40, &v42);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __C[0] = 0;
          vDSP_Length v17 = v42 * v43;
          if ((unsigned __int128)(v42 * (__int128)v43) >> 64 != (v42 * v43) >> 63) {
            goto LABEL_54;
          }
          if ((v17 & 0x8000000000000000) != 0) {
            goto LABEL_75;
          }
          vDSP_sveD((const double *)(v44 + 32), 1, (double *)__C, v17);
          swift_bridgeObjectRelease();
          uint64_t v1 = v34;
          uint64_t v3 = v35;
          if (v38) {
            goto LABEL_55;
          }
          unint64_t v18 = v37 + v10;
          if (__OFADD__(v37, v10)) {
            goto LABEL_56;
          }
          int64_t v19 = __C[0];
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            if ((v18 & 0x8000000000000000) != 0) {
              goto LABEL_57;
            }
          }
          else
          {
            uint64_t v0 = sub_1D1667604(v0);
            if ((v18 & 0x8000000000000000) != 0) {
              goto LABEL_57;
            }
          }
          unint64_t v20 = v0[2];
          if (v18 >= v20) {
            goto LABEL_58;
          }
          v0[v18 + 4] = v19;
          uint64_t v21 = v10 * v35;
          if ((unsigned __int128)(v10 * (__int128)v35) >> 64 != (v10 * v35) >> 63) {
            goto LABEL_59;
          }
          BOOL v22 = __OFADD__(v21, v39);
          unint64_t v23 = v21 + v39;
          if (v22) {
            goto LABEL_60;
          }
          if (v23 >= v20) {
            goto LABEL_61;
          }
          ++v10;
          v0[v23 + 4] = v19;
          v7 += 8;
          uint64_t v9 = v36;
          if (v36 == v10) {
            goto LABEL_7;
          }
        }
        goto LABEL_47;
      }
LABEL_7:
      uint64_t v7 = v33 + 8;
      uint64_t v6 = v32;
      uint64_t v4 = v30;
      if (v32 == v29) {
        goto LABEL_67;
      }
    }
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1D17BEAD0();
    uint64_t v3 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_66:
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1D17BEAD0();
  if (v5) {
    goto LABEL_6;
  }
LABEL_67:
  swift_bridgeObjectRelease();
  if (v1[5] >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  int64_t v24 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v24 = sub_1D1667604(v0);
  }
  if (v0[2] >> 31) {
    __break(1u);
  }
  cblas_dscal_NEWLAPACK();
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for MASquareMatrixRepresentation();
  uint64_t result = (void *)swift_allocObject();
  result[2] = v26;
  result[3] = v3;
  result[4] = v24;
  result[5] = v27;
  return result;
}

uint64_t sub_1D16DD6F0(uint64_t a1)
{
  *(void *)(v1 + 224) = a1;
  return swift_release();
}

uint64_t (*sub_1D16DD700(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_1D16DD080();
  return sub_1D16DD748;
}

uint64_t sub_1D16DD748(void *a1)
{
  *(void *)(a1[1] + 224) = *a1;
  return swift_release();
}

uint64_t sub_1D16DD758(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)sub_1D16D6020();
  unint64_t v7 = v6[6];
  swift_bridgeObjectRetain();
  sub_1D167D2D8(a1, v7);
  uint64_t v9 = v8;
  LOBYTE(a1) = v10;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0
    || (unint64_t v11 = v6[6],
        swift_bridgeObjectRetain(),
        sub_1D167D2D8(a2, v11),
        char v13 = v12,
        swift_bridgeObjectRelease(),
        (v13 & 1) != 0))
  {
    swift_release();
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  int64_t v14 = v6[2];
  uint64_t v15 = v6[3];
  int64_t v16 = v6[4];
  swift_bridgeObjectRetain();
  vDSP_Length v17 = (void *)sub_1D1665914(v14, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    vDSP_Length v17 = sub_1D1667604(v17);
  }
  if (v14 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v14 < (uint64_t)0xFFFFFFFF80000000 || v15 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_21;
  }
  if (v15 <= 0x7FFFFFFF)
  {
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    int64_t v16 = v6[2];
    uint64_t v2 = v6[3];
    swift_bridgeObjectRetain();
    uint64_t v9 = (void *)sub_1D1665914(v16, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  uint64_t v9 = sub_1D1667604(v9);
LABEL_10:
  if (v16 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v16 < (uint64_t)0xFFFFFFFF80000000 || v2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_25;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  cblas_dcopy_NEWLAPACK();
  swift_bridgeObjectRelease();
  __C[0] = v14;
  __C[1] = 1;
  __C[2] = (int64_t)v17;
  v22[0] = v16;
  v22[1] = 1;
  v22[2] = (vDSP_Length)v9;
  * infix(_:_:)(__C, v22, &v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __C[0] = 0;
  vDSP_Length v18 = v24 * v25;
  if ((unsigned __int128)(v24 * (__int128)v25) >> 64 != (v24 * v25) >> 63)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    vDSP_sveD((const double *)(v26 + 32), 1, (double *)__C, v18);
    swift_bridgeObjectRelease();
    double v3 = *(double *)__C;
    unint64_t v19 = v6[5];
    if (!(v19 >> 62))
    {
      uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_18:
      swift_release();
      *(double *)&uint64_t result = v3 / (double)v20;
      return result;
    }
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  *(double *)&uint64_t result = COERCE_DOUBLE(sub_1D17BEA30());
  __break(1u);
  return result;
}

void sub_1D16DDA80(void (*a1)(uint64_t, uint64_t))
{
  uint64_t v3 = sub_1D16D2EF0();
  uint64_t v4 = sub_1D16D2EF0();
  uint64_t v50 = v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63) {
    goto LABEL_102;
  }
  char v53 = v2;
  uint64_t v48 = v3;
  uint64_t v5 = (void *)sub_1D1665914(v3 * v4, 0.0);
  uint64_t v61 = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_1D167661C(v7);
  sub_1D16634F8(v8);
  uint64_t v9 = sub_1D16D2EF0();
  if (v9 < 0)
  {
LABEL_103:
    __break(1u);
    return;
  }
  uint64_t v10 = v9;
  if (!v9) {
    goto LABEL_83;
  }
  uint64_t v11 = 0;
  uint64_t v12 = v6 + 64;
  uint64_t v54 = 0;
  uint64_t v55 = 32;
  uint64_t v51 = v9;
  while (2)
  {
    if (v11 == v10) {
      goto LABEL_93;
    }
    uint64_t v57 = v11;
    uint64_t v13 = swift_bridgeObjectRetain();
    sub_1D167661C(v13);
    if ((v14 & 0xC000000000000001) != 0) {
      uint64_t v15 = sub_1D17BE760();
    }
    else {
      uint64_t v15 = *(void *)(v14 + 16);
    }
    swift_bridgeObjectRelease();
    unint64_t v60 = MEMORY[0x1E4FBC860];
    uint64_t v16 = 1 << *(unsigned char *)(v6 + 32);
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    else {
      uint64_t v17 = -1;
    }
    uint64_t v18 = v17 & *(void *)(v6 + 64);
    int64_t v19 = (unint64_t)(v16 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    int64_t v20 = 0;
    while (1)
    {
      if (v18)
      {
        v18 &= v18 - 1;
        goto LABEL_15;
      }
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
      if (v20 >= v19) {
        goto LABEL_34;
      }
      uint64_t v23 = *(void *)(v12 + 8 * v20);
      if (!v23) {
        break;
      }
LABEL_29:
      uint64_t v18 = (v23 - 1) & v23;
LABEL_15:
      uint64_t v21 = swift_bridgeObjectRetain();
      sub_1D16634F8(v21);
    }
    int64_t v24 = v20 + 1;
    if (v20 + 1 >= v19) {
      goto LABEL_34;
    }
    uint64_t v23 = *(void *)(v12 + 8 * v24);
    if (v23) {
      goto LABEL_28;
    }
    int64_t v24 = v20 + 2;
    if (v20 + 2 >= v19) {
      goto LABEL_34;
    }
    uint64_t v23 = *(void *)(v12 + 8 * v24);
    if (v23) {
      goto LABEL_28;
    }
    int64_t v24 = v20 + 3;
    if (v20 + 3 >= v19) {
      goto LABEL_34;
    }
    uint64_t v23 = *(void *)(v12 + 8 * v24);
    if (v23)
    {
LABEL_28:
      int64_t v20 = v24;
      goto LABEL_29;
    }
    int64_t v24 = v20 + 4;
    if (v20 + 4 < v19)
    {
      uint64_t v23 = *(void *)(v12 + 8 * v24);
      if (!v23)
      {
        while (1)
        {
          int64_t v20 = v24 + 1;
          if (__OFADD__(v24, 1)) {
            break;
          }
          if (v20 >= v19) {
            goto LABEL_34;
          }
          uint64_t v23 = *(void *)(v12 + 8 * v20);
          ++v24;
          if (v23) {
            goto LABEL_29;
          }
        }
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      goto LABEL_28;
    }
LABEL_34:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v25 = sub_1D167B3C0(v60);
    swift_bridgeObjectRelease();
    if ((v25 & 0xC000000000000001) != 0) {
      sub_1D17BE760();
    }
    swift_bridgeObjectRelease();
    if (v15 < v57) {
      goto LABEL_94;
    }
    if (v57 == v15)
    {
LABEL_5:
      --v54;
      v55 += 8;
      uint64_t v11 = v57 + 1;
      uint64_t v10 = v51;
      if (v57 + 1 == v51) {
        goto LABEL_83;
      }
      continue;
    }
    break;
  }
  uint64_t v26 = 0;
  uint64_t v49 = v57 * v50;
  unint64_t v27 = v57 * v50 + v57;
  BOOL v28 = __OFADD__(v57 * v50, v57);
  BOOL v56 = v28;
  uint64_t v29 = v15 + v54;
  unint64_t v30 = v57;
  uint64_t v58 = v29;
  while (2)
  {
    if (!v26)
    {
      if ((unsigned __int128)(v57 * (__int128)v50) >> 64 != (v57 * v50) >> 63) {
        goto LABEL_86;
      }
      if (v56) {
        goto LABEL_87;
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        if ((v27 & 0x8000000000000000) != 0) {
          goto LABEL_88;
        }
      }
      else
      {
        uint64_t v5 = sub_1D1667604(v5);
        if ((v27 & 0x8000000000000000) != 0) {
          goto LABEL_88;
        }
      }
      if (v27 >= v5[2]) {
        goto LABEL_89;
      }
      v5[v27 + 4] = 0x3FF0000000000000;
      goto LABEL_42;
    }
    if (v30 >= *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_85;
    }
    if (!*(void *)(v6 + 16))
    {
LABEL_42:
      if (v29 == ++v26) {
        goto LABEL_5;
      }
      continue;
    }
    break;
  }
  id v31 = *(id *)(v61 + 8 * v30 + 32);
  unint64_t v32 = sub_1D165A9D0((uint64_t)v31);
  if ((v33 & 1) == 0)
  {

LABEL_70:
    uint64_t v29 = v58;
    unint64_t v27 = v57 * v50 + v57;
    goto LABEL_42;
  }
  BOOL v59 = v5;
  unint64_t v34 = v30 + v26;
  uint64_t v35 = *(void *)(*(void *)(v6 + 56) + 8 * v32);
  swift_bridgeObjectRetain();

  if ((v34 & 0x8000000000000000) != 0) {
    goto LABEL_90;
  }
  if (v34 >= *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_91;
  }
  if (!*(void *)(v6 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_69:
    uint64_t v5 = v59;
    unint64_t v30 = v57;
    goto LABEL_70;
  }
  id v36 = *(id *)(v61 + v55 + 8 * v26);
  unint64_t v37 = sub_1D165A9D0((uint64_t)v36);
  if ((v38 & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_69;
  }
  uint64_t v39 = *(void *)(*(void *)(v6 + 56) + 8 * v37);
  swift_bridgeObjectRetain();

  a1(v35, v39);
  if (v53)
  {
  }
  else
  {
    if ((unsigned __int128)(v57 * (__int128)v50) >> 64 != (v57 * v50) >> 63) {
      goto LABEL_95;
    }
    unint64_t v41 = v49 + v34;
    if (__OFADD__(v49, v34)) {
      goto LABEL_96;
    }
    uint64_t v42 = v40;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if ((v41 & 0x8000000000000000) != 0) {
        goto LABEL_101;
      }
    }
    else
    {
      BOOL v59 = sub_1D1667604(v59);
      if ((v41 & 0x8000000000000000) != 0) {
        goto LABEL_101;
      }
    }
    if (v41 >= v59[2]) {
      goto LABEL_97;
    }
    v59[v41 + 4] = v42;
  }
  a1(v39, v35);
  uint64_t v44 = v43;
  char v53 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v45 = v34 * v50;
  if ((unsigned __int128)((uint64_t)v34 * (__int128)v50) >> 64 != (uint64_t)(v34 * v50) >> 63) {
    goto LABEL_98;
  }
  unint64_t v46 = v45 + v57;
  if (__OFADD__(v45, v57)) {
    goto LABEL_99;
  }
  uint64_t v5 = v59;
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v29 = v58;
    unint64_t v27 = v57 * v50 + v57;
    if ((v46 & 0x8000000000000000) != 0) {
      goto LABEL_82;
    }
LABEL_75:
    if (v46 >= v5[2]) {
      goto LABEL_100;
    }
    v5[v46 + 4] = v44;
    unint64_t v30 = v57;
    goto LABEL_42;
  }
  uint64_t v5 = sub_1D1667604(v59);
  uint64_t v29 = v58;
  unint64_t v27 = v57 * v50 + v57;
  if ((v46 & 0x8000000000000000) == 0) {
    goto LABEL_75;
  }
LABEL_82:
  __break(1u);
LABEL_83:
  type metadata accessor for MASquareMatrixRepresentation();
  uint64_t v47 = (void *)swift_allocObject();
  v47[2] = v48;
  v47[3] = v50;
  v47[4] = v5;
  v47[5] = v61;
}

uint64_t sub_1D16DE098(Swift::Double a1)
{
  uint64_t v2 = (void *)sub_1D16D6020();
  uint64_t v3 = v2[2];
  uint64_t v4 = v2[3];
  uint64_t v5 = v2[4];
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)&long long v20 = v3;
  *((void *)&v20 + 1) = v4;
  uint64_t v21 = v5;
  MAMatrix.svd()(v6);
  swift_bridgeObjectRelease();
  long long v7 = v26;
  uint64_t v8 = v27;
  long long v9 = v22;
  uint64_t v10 = v23;
  long long v26 = v24;
  uint64_t v27 = v25;
  uint64_t result = *(_OWORD *)&MAMatrix.elbow(threshold:)(a1);
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    MAMatrix.trunc(rows:columns:)(1, result + 1);
    uint64_t v12 = v27;
    long long v13 = v26;
    long long v26 = v7;
    uint64_t v27 = v8;
    long long v24 = v13;
    uint64_t v25 = v12;
    Swift::Int v14 = *(void *)(sub_1D16D6020() + 16);
    swift_release();
    Swift::Int v15 = *(void *)(sub_1D16D6020() + 24);
    swift_release();
    MAMatrix.diag(rows:columns:)(v14, v15);
    swift_bridgeObjectRelease();
    long long v20 = v22;
    uint64_t v21 = v23;
    <*> infix(_:_:)((uint64_t *)&v26, &v20, (uint64_t *)&v24);
    swift_bridgeObjectRelease();
    long long v22 = v24;
    uint64_t v23 = v25;
    long long v20 = v9;
    uint64_t v21 = v10;
    <*> infix(_:_:)((uint64_t *)&v22, &v20, (uint64_t *)&v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v19 = v26;
    uint64_t v16 = v27;
    uint64_t v17 = *(void *)(sub_1D16D6020() + 40);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v18 = *(void *)(sub_1D16D6020() + 48);
    swift_bridgeObjectRetain();
    swift_release();
    type metadata accessor for MAMatrixRepresentation();
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = v19;
    *(void *)(result + 32) = v16;
    *(void *)(result + 40) = v17;
    *(void *)(result + 48) = v18;
  }
  return result;
}

uint64_t MADistribution.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t MADistribution.__deallocating_deinit()
{
  MADistribution.deinit();
  return MEMORY[0x1F4186488](v0, 232, 7);
}

uint64_t sub_1D16DE3D4(char a1)
{
  return sub_1D16D80FC(a1);
}

uint64_t sub_1D16DE3F8(uint64_t a1)
{
  return sub_1D16D88E0(a1);
}

uint64_t sub_1D16DE41C()
{
  return sub_1D16E0204();
}

void MADistribution.description.getter()
{
  sub_1D17BE850();
  swift_bridgeObjectRelease();
  uint64_t v35 = swift_bridgeObjectRetain();
  sub_1D167661C(v35);
  if ((v0 & 0xC000000000000001) != 0) {
    sub_1D17BE760();
  }
  swift_bridgeObjectRelease();
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  uint64_t v1 = swift_bridgeObjectRetain();
  unint64_t v2 = sub_1D16D2D80(v1);
  swift_bridgeObjectRelease();
  uint64_t v3 = sub_1D167B3C0(v2);
  swift_bridgeObjectRelease();
  if ((v3 & 0xC000000000000001) != 0) {
    sub_1D17BE760();
  }
  swift_bridgeObjectRelease();
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  uint64_t v33 = v35 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v35 + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v35 + 64);
  int64_t v34 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
LABEL_10:
  if (v6)
  {
    uint64_t v37 = (v6 - 1) & v6;
    int64_t v38 = v7;
    unint64_t v8 = __clz(__rbit64(v6)) | (v7 << 6);
  }
  else
  {
    int64_t v9 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_58;
    }
    if (v9 >= v34) {
      goto LABEL_56;
    }
    unint64_t v10 = *(void *)(v33 + 8 * v9);
    int64_t v11 = v7 + 1;
    if (!v10)
    {
      int64_t v11 = v7 + 2;
      if (v7 + 2 >= v34) {
        goto LABEL_56;
      }
      unint64_t v10 = *(void *)(v33 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v7 + 3;
        if (v7 + 3 >= v34) {
          goto LABEL_56;
        }
        unint64_t v10 = *(void *)(v33 + 8 * v11);
        if (!v10)
        {
          uint64_t v12 = v7 + 4;
          if (v7 + 4 >= v34) {
            goto LABEL_56;
          }
          unint64_t v10 = *(void *)(v33 + 8 * v12);
          if (v10)
          {
            int64_t v11 = v7 + 4;
          }
          else
          {
            do
            {
              int64_t v11 = v12 + 1;
              if (__OFADD__(v12, 1)) {
                goto LABEL_59;
              }
              if (v11 >= v34)
              {
LABEL_56:
                swift_release();
                return;
              }
              unint64_t v10 = *(void *)(v33 + 8 * v11);
              ++v12;
            }
            while (!v10);
          }
        }
      }
    }
    uint64_t v37 = (v10 - 1) & v10;
    int64_t v38 = v11;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
  }
  uint64_t v13 = 8 * v8;
  unint64_t v14 = *(void *)(*(void *)(v35 + 56) + v13);
  id v15 = *(id *)(*(void *)(v35 + 48) + v13);
  swift_bridgeObjectRetain();
  sub_1D17BE850();
  swift_bridgeObjectRelease();
  uint64_t v39 = 2314;
  id v36 = v15;
  id v16 = objc_msgSend(v15, sel_visualString);
  sub_1D17BDFF0();

  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  if ((v14 & 0xC000000000000001) != 0) {
    sub_1D17BE760();
  }
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  if ((v14 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D1668090();
    sub_1D1674A20();
    sub_1D17BE390();
    unint64_t v14 = 0xD00000000000001ALL;
    unint64_t v17 = 0x80000001D17D5CC0;
    uint64_t v18 = v40;
    uint64_t v19 = v41;
    unint64_t v20 = v42;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v21 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v17 = v14 + 56;
    uint64_t v18 = ~v21;
    uint64_t v22 = -v21;
    if (v22 < 64) {
      uint64_t v23 = ~(-1 << v22);
    }
    else {
      uint64_t v23 = -1;
    }
    unint64_t v20 = v23 & *(void *)(v14 + 56);
  }
  int64_t v24 = (unint64_t)(v18 + 64) >> 6;
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_37:
    if (!sub_1D17BE7A0()) {
      goto LABEL_9;
    }
    sub_1D1668090();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v28 = (id)v39;
    swift_unknownObjectRelease();
    uint64_t v27 = v19;
    uint64_t v25 = v20;
    goto LABEL_54;
  }
  while (1)
  {
    if (v20)
    {
      uint64_t v25 = (v20 - 1) & v20;
      unint64_t v26 = __clz(__rbit64(v20)) | (v19 << 6);
      uint64_t v27 = v19;
      goto LABEL_53;
    }
    int64_t v29 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v29 >= v24) {
      goto LABEL_9;
    }
    unint64_t v30 = *(void *)(v17 + 8 * v29);
    uint64_t v27 = v19 + 1;
    if (!v30)
    {
      uint64_t v27 = v19 + 2;
      if (v19 + 2 >= v24) {
        goto LABEL_9;
      }
      unint64_t v30 = *(void *)(v17 + 8 * v27);
      if (!v30)
      {
        uint64_t v27 = v19 + 3;
        if (v19 + 3 >= v24) {
          goto LABEL_9;
        }
        unint64_t v30 = *(void *)(v17 + 8 * v27);
        if (!v30)
        {
          uint64_t v27 = v19 + 4;
          if (v19 + 4 >= v24) {
            goto LABEL_9;
          }
          unint64_t v30 = *(void *)(v17 + 8 * v27);
          if (!v30)
          {
            uint64_t v31 = v19 + 5;
            while (v24 != v31)
            {
              unint64_t v30 = *(void *)(v17 + 8 * v31++);
              if (v30)
              {
                uint64_t v27 = v31 - 1;
                goto LABEL_52;
              }
            }
LABEL_9:
            sub_1D1668088();

            unint64_t v6 = v37;
            int64_t v7 = v38;
            goto LABEL_10;
          }
        }
      }
    }
LABEL_52:
    uint64_t v25 = (v30 - 1) & v30;
    unint64_t v26 = __clz(__rbit64(v30)) + (v27 << 6);
LABEL_53:
    id v28 = *(id *)(*(void *)(v14 + 48) + 8 * v26);
    if (!v28) {
      goto LABEL_9;
    }
LABEL_54:
    uint64_t v39 = 592138;
    id v32 = objc_msgSend(v28, sel_visualString, v33);
    sub_1D17BDFF0();

    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();

    swift_bridgeObjectRelease();
    uint64_t v19 = v27;
    unint64_t v20 = v25;
    if ((v14 & 0x8000000000000000) != 0) {
      goto LABEL_37;
    }
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
}

void sub_1D16DEAD4()
{
}

double MANode.neighborDistribution(withLabel:domain:)(uint64_t a1, void *a2, unsigned __int16 a3)
{
  return sub_1D16DEB10(a1, a2, a3, (SEL *)&selRef_neighborNodesWithLabel_domain_);
}

double MANode.neighborDistributionThroughEdges(withLabel:domain:)(uint64_t a1, void *a2, unsigned __int16 a3)
{
  return sub_1D16DEB10(a1, a2, a3, (SEL *)&selRef_neighborNodesThroughEdgesWithLabel_domain_);
}

double sub_1D16DEB10(uint64_t a1, void *a2, unsigned __int16 a3, SEL *a4)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D50);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D17C91F0;
  *(void *)(inited + 32) = v4;
  id v9 = v4;
  if (a2) {
    a2 = (void *)sub_1D17BDFE0();
  }
  id v10 = objc_msgSend(v4, *a4, a2, a3);

  sub_1D1668090();
  sub_1D1674A20();
  uint64_t v11 = sub_1D17BE350();

  *(void *)(inited + 40) = v11;
  unint64_t v12 = sub_1D165C964(inited);
  unint64_t v13 = sub_1D165C858(MEMORY[0x1E4FBC860]);
  type metadata accessor for MADistribution();
  uint64_t v14 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  *(_OWORD *)(v14 + 160) = 0u;
  *(unsigned char *)(v14 + 176) = 1;
  *(_OWORD *)(v14 + 184) = 0u;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(void *)(v14 + 16) = v12;
  *(void *)(v14 + 24) = v13;
  return result;
}

uint64_t MADistribution.sourceDegreeGaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:minimumDegree:)(char a1, double a2, double a3, double a4)
{
  __C[1] = *(double *)MEMORY[0x1E4F143B8];
  sub_1D16D9474();
  unint64_t v8 = (void *)sub_1D16884EC(a4);
  swift_release();
  uint64_t v9 = v8[2];
  uint64_t v10 = v8[3];
  uint64_t v11 = v8[4];
  __C[0] = 0.0;
  vDSP_Length v12 = v9 * v10;
  if ((unsigned __int128)(v9 * (__int128)v10) >> 64 != (v9 * v10) >> 63) {
    __break(1u);
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_meanvD((const double *)(v11 + 32), 1, __C, v12);
    swift_bridgeObjectRelease();
    double v13 = __C[0];
    double v14 = MAVectorRepresentation.pstddev()();
    uint64_t v15 = MAVectorRepresentation.gaussianCumulative(lowerBoundPercent:upperBoundPercent:inverse:mu:sigma:)(a1 & 1, a2, a3, v13, v14);
    swift_release();
    return v15;
  }
  return result;
}

void sub_1D16DEDAC(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[1];
  uint64_t v5 = sub_1D17BEB60();
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_133;
    }
    if (v4) {
      sub_1D16DF5B0(0, v4, 1, a1);
    }
    return;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_141;
  }
  uint64_t v102 = v5;
  unint64_t v97 = a1;
  if (v4 < 2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    uint64_t v111 = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v4 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_99:
      uint64_t v105 = v8;
      if (v12 >= 2)
      {
        uint64_t v91 = *v97;
        do
        {
          unint64_t v92 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_128;
          }
          if (!v91) {
            goto LABEL_140;
          }
          uint64_t v93 = *(void *)&v11[16 * v92 + 32];
          uint64_t v94 = *(void *)&v11[16 * v12 + 24];
          sub_1D16DF6EC((id *)(v91 + 16 * v93), (id *)(v91 + 16 * *(void *)&v11[16 * v12 + 16]), v91 + 16 * v94, v111);
          if (v2) {
            break;
          }
          if (v94 < v93) {
            goto LABEL_129;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v11 = sub_1D16FA24C((uint64_t)v11);
          }
          if (v92 >= *((void *)v11 + 2)) {
            goto LABEL_130;
          }
          unint64_t v95 = &v11[16 * v92 + 32];
          *(void *)unint64_t v95 = v93;
          *((void *)v95 + 1) = v94;
          unint64_t v96 = *((void *)v11 + 2);
          if (v12 > v96) {
            goto LABEL_131;
          }
          memmove(&v11[16 * v12 + 16], &v11[16 * v12 + 32], 16 * (v96 - v12));
          *((void *)v11 + 2) = v96 - 1;
          unint64_t v12 = v96 - 1;
        }
        while (v96 > 2);
      }
LABEL_110:
      swift_bridgeObjectRelease();
      *(void *)(v105 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v7 = v6 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651C78);
    uint64_t v8 = sub_1D17BE1C0();
    *(void *)(v8 + 16) = v7;
    uint64_t v111 = (char *)(v8 + 32);
  }
  uint64_t v105 = v8;
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v98 = *a1 - 16;
  uint64_t v99 = *a1 + 40;
  uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v108 = v4;
  uint64_t v114 = *a1;
  while (1)
  {
    uint64_t v13 = v9;
    uint64_t v14 = v9 + 1;
    uint64_t v107 = v9;
    if (v9 + 1 < v4)
    {
      uint64_t v103 = v2;
      uint64_t v15 = *(void **)(v10 + 16 * v9);
      id v16 = *(id *)(v10 + 16 * v14);
      swift_bridgeObjectRetain();
      id v17 = v15;
      swift_bridgeObjectRetain();
      id v112 = objc_msgSend(v16, sel_hash);
      id v109 = objc_msgSend(v17, sel_hash);
      uint64_t v4 = v108;
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      uint64_t v14 = v13 + 2;
      if (v13 + 2 < v108)
      {
        unint64_t v100 = v11;
        uint64_t v18 = v99 + 16 * v13;
        while (1)
        {
          uint64_t v19 = v14;
          unint64_t v20 = *(void **)(v18 - 24);
          id v21 = *(id *)(v18 - 8);
          swift_bridgeObjectRetain();
          id v22 = v20;
          swift_bridgeObjectRetain();
          id v23 = objc_msgSend(v21, sel_hash);
          id v24 = objc_msgSend(v22, sel_hash);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          if ((uint64_t)v112 < (uint64_t)v109 == (uint64_t)v23 >= (uint64_t)v24) {
            break;
          }
          ++v14;
          v18 += 16;
          uint64_t v4 = v108;
          if (v108 == v19 + 1)
          {
            uint64_t v14 = v108;
            uint64_t v11 = v100;
            goto LABEL_22;
          }
        }
        uint64_t v11 = v100;
        uint64_t v4 = v108;
LABEL_22:
        uint64_t v13 = v107;
      }
      uint64_t v2 = v103;
      uint64_t v10 = v114;
      if ((uint64_t)v112 < (uint64_t)v109)
      {
        if (v14 < v13) {
          goto LABEL_134;
        }
        if (v13 < v14)
        {
          uint64_t v25 = (long long *)(v98 + 16 * v14);
          uint64_t v26 = v14;
          uint64_t v27 = v13;
          id v28 = (long long *)(v114 + 16 * v13);
          do
          {
            if (v27 != --v26)
            {
              if (!v114) {
                goto LABEL_139;
              }
              long long v29 = *v28;
              *id v28 = *v25;
              *uint64_t v25 = v29;
            }
            ++v27;
            --v25;
            ++v28;
          }
          while (v27 < v26);
        }
      }
    }
    if (v14 < v4)
    {
      if (__OFSUB__(v14, v13)) {
        goto LABEL_132;
      }
      if (v14 - v13 < v102) {
        break;
      }
    }
LABEL_50:
    if (v14 < v13) {
      goto LABEL_127;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1D16F9FD8(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    uint64_t v10 = v114;
    if (v41 >= v40 >> 1)
    {
      unint64_t v90 = sub_1D16F9FD8((char *)(v40 > 1), v41 + 1, 1, v11);
      uint64_t v10 = v114;
      uint64_t v11 = v90;
    }
    *((void *)v11 + 2) = v12;
    unint64_t v42 = v11 + 32;
    uint64_t v43 = &v11[16 * v41 + 32];
    *(void *)uint64_t v43 = v13;
    *((void *)v43 + 1) = v14;
    uint64_t v113 = v14;
    if (v41)
    {
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_116;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_117;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_119;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_122;
          }
          if (v61 >= v52)
          {
            unint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_126;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_87;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_81;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_118;
        }
        unint64_t v56 = v12 - 2;
        unint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_121;
        }
        unint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_124;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_125;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_87:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v67) {
          goto LABEL_120;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_123;
        }
        if (v78 < v66) {
          goto LABEL_14;
        }
LABEL_89:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        if (!v10) {
          goto LABEL_138;
        }
        uint64_t v84 = v11;
        uint64_t v85 = &v42[16 * v83];
        uint64_t v86 = *(void *)v85;
        unint64_t v87 = &v42[16 * v44];
        uint64_t v88 = *((void *)v87 + 1);
        sub_1D16DF6EC((id *)(v10 + 16 * *(void *)v85), (id *)(v10 + 16 * *(void *)v87), v10 + 16 * v88, v111);
        if (v2) {
          goto LABEL_110;
        }
        if (v88 < v86) {
          goto LABEL_113;
        }
        if (v44 > *((void *)v84 + 2)) {
          goto LABEL_114;
        }
        *(void *)uint64_t v85 = v86;
        *(void *)&v42[16 * v83 + 8] = v88;
        unint64_t v89 = *((void *)v84 + 2);
        if (v44 >= v89) {
          goto LABEL_115;
        }
        uint64_t v11 = v84;
        unint64_t v12 = v89 - 1;
        memmove(&v42[16 * v44], v87 + 16, 16 * (v89 - 1 - v44));
        *((void *)v11 + 2) = v89 - 1;
        uint64_t v10 = v114;
        if (v89 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_14:
    uint64_t v4 = v108;
    uint64_t v9 = v113;
    uint64_t v8 = v105;
    if (v113 >= v108) {
      goto LABEL_99;
    }
  }
  if (__OFADD__(v13, v102)) {
    goto LABEL_135;
  }
  if (v13 + v102 >= v4) {
    uint64_t v30 = v4;
  }
  else {
    uint64_t v30 = v13 + v102;
  }
  if (v30 >= v13)
  {
    if (v14 != v30)
    {
      uint64_t v101 = v11;
      uint64_t v104 = v2;
      uint64_t v31 = v98 + 16 * v14;
      uint64_t v106 = v30;
      do
      {
        long long v32 = *(_OWORD *)(v10 + 16 * v14);
        uint64_t v33 = v13;
        uint64_t v110 = v31;
        while (1)
        {
          uint64_t v34 = v14;
          uint64_t v35 = *(void **)v31;
          id v36 = (id)v32;
          swift_bridgeObjectRetain();
          id v37 = v35;
          swift_bridgeObjectRetain();
          id v38 = objc_msgSend(v36, sel_hash);
          id v39 = objc_msgSend(v37, sel_hash);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          if ((uint64_t)v38 >= (uint64_t)v39) {
            break;
          }
          uint64_t v10 = v114;
          if (!v114) {
            goto LABEL_137;
          }
          uint64_t v14 = v34;
          long long v32 = *(_OWORD *)(v31 + 16);
          *(_OWORD *)(v31 + 16) = *(_OWORD *)v31;
          *(_OWORD *)uint64_t v31 = v32;
          v31 -= 16;
          if (v34 == ++v33) {
            goto LABEL_43;
          }
        }
        uint64_t v10 = v114;
        uint64_t v14 = v34;
LABEL_43:
        ++v14;
        uint64_t v31 = v110 + 16;
        uint64_t v13 = v107;
      }
      while (v14 != v106);
      uint64_t v14 = v106;
      uint64_t v2 = v104;
      uint64_t v11 = v101;
    }
    goto LABEL_50;
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  sub_1D17BEA30();
  __break(1u);
}

void sub_1D16DF5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v16 = *a4;
    uint64_t v5 = *a4 + 16 * a3 - 16;
LABEL_5:
    long long v6 = *(_OWORD *)(v16 + 16 * v4);
    uint64_t v7 = a1;
    uint64_t v15 = v5;
    while (1)
    {
      uint64_t v8 = *(void **)v5;
      id v9 = (id)v6;
      swift_bridgeObjectRetain();
      id v10 = v8;
      swift_bridgeObjectRetain();
      id v11 = objc_msgSend(v9, sel_hash);
      id v12 = objc_msgSend(v10, sel_hash);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      if ((uint64_t)v11 >= (uint64_t)v12)
      {
LABEL_4:
        ++v4;
        uint64_t v5 = v15 + 16;
        if (v4 == a2) {
          return;
        }
        goto LABEL_5;
      }
      if (!v16) {
        break;
      }
      long long v6 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)(v5 + 16) = *(_OWORD *)v5;
      *(_OWORD *)uint64_t v5 = v6;
      v5 -= 16;
      if (v4 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_1D16DF6EC(id *a1, id *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = __src;
  uint64_t v5 = (char *)__src - (char *)a1;
  uint64_t v6 = (char *)__src - (char *)a1 + 15;
  if ((char *)__src - (char *)a1 >= 0) {
    uint64_t v6 = (char *)__src - (char *)a1;
  }
  uint64_t v7 = v6 >> 4;
  uint64_t v8 = a3 - (void)__src;
  uint64_t v9 = a3 - (void)__src + 15;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v9 = a3 - (void)__src;
  }
  uint64_t v10 = v9 >> 4;
  id v37 = a1;
  id v36 = (void **)a4;
  if (v7 >= v9 >> 4)
  {
    if (v8 >= -15)
    {
      if (a4 != (char *)__src || &__src[2 * v10] <= (id *)a4) {
        memmove(a4, __src, 16 * v10);
      }
      uint64_t v19 = &a4[16 * v10];
      uint64_t v35 = v19;
      id v37 = v4;
      if (a1 < v4 && v8 >= 16)
      {
        unint64_t v20 = (id *)(a3 - 16);
        id v21 = v4;
        do
        {
          uint64_t v31 = (id *)v19;
          uint64_t v33 = v20 + 2;
          id v22 = (void *)*((void *)v19 - 2);
          v19 -= 16;
          id v23 = *(v21 - 2);
          v21 -= 2;
          id v24 = v22;
          swift_bridgeObjectRetain();
          id v25 = v23;
          swift_bridgeObjectRetain();
          id v26 = objc_msgSend(v24, sel_hash);
          id v27 = objc_msgSend(v25, sel_hash);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          if ((uint64_t)v26 >= (uint64_t)v27)
          {
            uint64_t v35 = v19;
            id v21 = v4;
            if (v33 < v31 || v20 >= v31 || v33 != v31) {
              *(_OWORD *)unint64_t v20 = *(_OWORD *)v19;
            }
          }
          else
          {
            uint64_t v19 = (char *)v31;
            if (v33 != v4 || v20 >= v4) {
              *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
            }
            id v37 = v21;
          }
          if (v21 <= a1) {
            break;
          }
          v20 -= 2;
          uint64_t v4 = v21;
        }
        while (v19 > a4);
      }
      goto LABEL_42;
    }
  }
  else if (v5 >= -15)
  {
    if (a4 != (char *)a1 || &a1[2 * v7] <= (id *)a4) {
      memmove(a4, a1, 16 * v7);
    }
    long long v32 = &a4[16 * v7];
    uint64_t v35 = v32;
    if ((unint64_t)v4 < a3 && v5 >= 16)
    {
      id v11 = (void **)a4;
      id v12 = a1;
      do
      {
        uint64_t v13 = *v11;
        id v14 = *v4;
        swift_bridgeObjectRetain();
        id v15 = v13;
        swift_bridgeObjectRetain();
        id v16 = objc_msgSend(v14, sel_hash);
        id v17 = objc_msgSend(v15, sel_hash);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        if ((uint64_t)v16 >= (uint64_t)v17)
        {
          if (v12 != v11) {
            *(_OWORD *)id v12 = *(_OWORD *)v11;
          }
          v11 += 2;
          id v36 = v11;
          uint64_t v18 = v4;
        }
        else
        {
          uint64_t v18 = v4 + 2;
          if (v12 < v4 || v12 >= v18 || v12 != v4) {
            *(_OWORD *)id v12 = *(_OWORD *)v4;
          }
        }
        v12 += 2;
        if (v11 >= (void **)v32) {
          break;
        }
        uint64_t v4 = v18;
      }
      while ((unint64_t)v18 < a3);
      id v37 = v12;
    }
LABEL_42:
    sub_1D16FA190((void **)&v37, (const void **)&v36, &v35);
    return 1;
  }
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D16DFA48(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x1E4FBC870];
LABEL_36:
    swift_release();
    return v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652CA8);
  uint64_t result = sub_1D17BE840();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    id v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    sub_1D17BED20();
    swift_bridgeObjectRetain();
    sub_1D17BE020();
    uint64_t result = sub_1D17BED80();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    id v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *id v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1D16DFCE0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = MEMORY[0x1E4FBC870];
LABEL_36:
    swift_release();
    return v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651A70);
  uint64_t result = sub_1D17BE840();
  uint64_t v9 = result;
  id v28 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v28[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v28[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    id v18 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = sub_1D17BE5B0();
    uint64_t v19 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*(void *)(v9 + 48) + 8 * v22) = v18;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = v28[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1D16DFF40(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *a1;
  if (*a1)
  {
    uint64_t v8 = (void *)*a3;
    if (a2)
    {
      *(void *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      sub_1D16A6338(a4, (uint64_t)a5, v7, v8);
      id v10 = a5;
    }
  }
  else if (a2)
  {
    sub_1D1668090();
    swift_arrayDestroy();
    sub_1D16A9284(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D16DFFEC(unint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
    if (!v4) {
      return v5;
    }
    uint64_t v23 = MEMORY[0x1E4FBC860];
    uint64_t result = sub_1D168271C(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0) {
      break;
    }
    uint64_t v7 = 0;
    uint64_t v5 = v23;
    uint64_t v21 = v3;
    unint64_t v22 = v3 & 0xC000000000000001;
    a2 = (void *)a2[3];
    while (v4 != v7)
    {
      if (v22) {
        id v8 = (id)MEMORY[0x1D25F9260](v7, v3);
      }
      else {
        id v8 = *(id *)(v3 + 8 * v7 + 32);
      }
      uint64_t v9 = v8;
      uint64_t v10 = swift_bridgeObjectRetain();
      sub_1D167661C(v10);
      char v12 = sub_1D1671E50(v9, v11);
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        uint64_t v13 = swift_bridgeObjectRetain();
        unint64_t v14 = sub_1D16D2D80(v13);
        swift_bridgeObjectRelease();
        uint64_t v3 = sub_1D167B3C0(v14);
        swift_bridgeObjectRelease();
        LOBYTE(v14) = sub_1D1671E50(v9, v3);
        swift_bridgeObjectRelease();
        if ((v14 & 1) == 0) {
          goto LABEL_22;
        }
      }
      double v15 = 1.0;
      if (a2 && a2[2])
      {
        id v16 = v9;
        unint64_t v17 = sub_1D165A9D0((uint64_t)v16);
        if (v18) {
          double v15 = *(double *)(a2[7] + 8 * v17);
        }
      }
      unint64_t v20 = *(void *)(v23 + 16);
      unint64_t v19 = *(void *)(v23 + 24);
      if (v20 >= v19 >> 1) {
        sub_1D168271C(v19 > 1, v20 + 1, 1);
      }
      ++v7;
      *(void *)(v23 + 16) = v20 + 1;
      *(double *)(v23 + 8 * v20 + 32) = v15;
      uint64_t v3 = v21;
      if (v4 == v7) {
        return v5;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1D16E0204()
{
  unint64_t v79 = MEMORY[0x1E4FBC860];
  unint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_1D167661C(v2);
  sub_1D16634F8(v3);
  uint64_t v4 = swift_bridgeObjectRetain();
  unint64_t v5 = sub_1D16D2D80(v4);
  unint64_t v72 = v1;
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_1D167B3C0(v5);
  swift_bridgeObjectRelease();
  sub_1D16634F8(v6);
  unint64_t v7 = v79;
  unint64_t v8 = v79 >> 62;
  if (v79 >> 62)
  {
LABEL_96:
    swift_bridgeObjectRetain_n();
    uint64_t v9 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9)
    {
LABEL_3:
      unint64_t v76 = v8;
      uint64_t v10 = 0;
      uint64_t v11 = (void *)MEMORY[0x1E4FBC868];
      while (1)
      {
        unint64_t v8 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
          goto LABEL_96;
        }
        id v12 = *(id *)(v7 + 8 * v10 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v80 = v11;
        unint64_t v15 = sub_1D165A9D0((uint64_t)v12);
        uint64_t v16 = v11[2];
        BOOL v17 = (v14 & 1) == 0;
        uint64_t v18 = v16 + v17;
        if (__OFADD__(v16, v17)) {
          goto LABEL_91;
        }
        char v19 = v14;
        if (v11[3] >= v18)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if ((v14 & 1) == 0) {
              goto LABEL_14;
            }
          }
          else
          {
            sub_1D16A6F98();
            if ((v19 & 1) == 0) {
              goto LABEL_14;
            }
          }
        }
        else
        {
          sub_1D16A3218(v18, isUniquelyReferenced_nonNull_native);
          unint64_t v20 = sub_1D165A9D0((uint64_t)v12);
          if ((v19 & 1) != (v21 & 1)) {
            goto LABEL_104;
          }
          unint64_t v15 = v20;
          if ((v19 & 1) == 0)
          {
LABEL_14:
            v11[(v15 >> 6) + 8] |= 1 << v15;
            uint64_t v22 = 8 * v15;
            *(void *)(v11[6] + v22) = v12;
            *(void *)(v11[7] + v22) = v10;
            uint64_t v23 = v11[2];
            BOOL v24 = __OFADD__(v23, 1);
            uint64_t v25 = v23 + 1;
            if (v24) {
              goto LABEL_93;
            }
            v11[2] = v25;
            id v26 = v12;
            goto LABEL_5;
          }
        }
        *(void *)(v11[7] + 8 * v15) = v10;
LABEL_5:

        swift_bridgeObjectRelease();
        ++v10;
        if (v8 == v9)
        {
          swift_bridgeObjectRelease();
          if (v76) {
            goto LABEL_98;
          }
LABEL_19:
          uint64_t v27 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v28 = v27;
          goto LABEL_20;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = (void *)MEMORY[0x1E4FBC868];
  if (!v8) {
    goto LABEL_19;
  }
LABEL_98:
  swift_bridgeObjectRetain();
  uint64_t v28 = sub_1D17BEAD0();
  uint64_t v27 = sub_1D17BEAD0();
  swift_bridgeObjectRelease();
LABEL_20:
  unint64_t v7 = v72;
  if ((unsigned __int128)(v28 * (__int128)v27) >> 64 != (v28 * v27) >> 63)
  {
    __break(1u);
    goto LABEL_100;
  }
  uint64_t v71 = (void *)sub_1D1665914(v28 * v27, 0.0);
  unint64_t v77 = v72 + 64;
  uint64_t v29 = 1 << *(unsigned char *)(v72 + 32);
  if (v29 < 64) {
    uint64_t v30 = ~(-1 << v29);
  }
  else {
    uint64_t v30 = -1;
  }
  unint64_t v8 = v30 & *(void *)(v72 + 64);
  int64_t v31 = (unint64_t)(v29 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v32 = 0;
  int64_t v69 = v31;
  while (1)
  {
    do
    {
LABEL_25:
      while (v8)
      {
        unint64_t v33 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v34 = v33 | (v32 << 6);
        if (v11[2]) {
          goto LABEL_42;
        }
      }
      int64_t v35 = v32 + 1;
      if (__OFADD__(v32, 1)) {
        goto LABEL_92;
      }
      if (v35 >= v31)
      {
LABEL_89:
        swift_release();
        type metadata accessor for MASquareMatrixRepresentation();
        uint64_t v64 = (void *)swift_allocObject();
        v64[2] = v28;
        v64[3] = v27;
        v64[4] = v71;
        v64[5] = v79;
        swift_bridgeObjectRelease();
        return (uint64_t)v64;
      }
      unint64_t v36 = *(void *)(v77 + 8 * v35);
      ++v32;
      if (!v36)
      {
        int64_t v32 = v35 + 1;
        if (v35 + 1 >= v31) {
          goto LABEL_89;
        }
        unint64_t v36 = *(void *)(v77 + 8 * v32);
        if (!v36)
        {
          int64_t v32 = v35 + 2;
          if (v35 + 2 >= v31) {
            goto LABEL_89;
          }
          unint64_t v36 = *(void *)(v77 + 8 * v32);
          if (!v36)
          {
            int64_t v37 = v35 + 3;
            if (v37 >= v31) {
              goto LABEL_89;
            }
            unint64_t v36 = *(void *)(v77 + 8 * v37);
            if (!v36)
            {
              while (1)
              {
                int64_t v32 = v37 + 1;
                if (__OFADD__(v37, 1)) {
                  goto LABEL_94;
                }
                if (v32 >= v31) {
                  goto LABEL_89;
                }
                unint64_t v36 = *(void *)(v77 + 8 * v32);
                ++v37;
                if (v36) {
                  goto LABEL_41;
                }
              }
            }
            int64_t v32 = v37;
          }
        }
      }
LABEL_41:
      unint64_t v8 = (v36 - 1) & v36;
      unint64_t v34 = __clz(__rbit64(v36)) + (v32 << 6);
    }
    while (!v11[2]);
LABEL_42:
    uint64_t v38 = 8 * v34;
    unint64_t v39 = *(void *)(*(void *)(v7 + 56) + v38);
    id v40 = *(id *)(*(void *)(v7 + 48) + v38);
    swift_bridgeObjectRetain();
    unint64_t v41 = sub_1D165A9D0((uint64_t)v40);
    if (v42) {
      break;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v70 = v27;
  uint64_t v68 = v28;
  uint64_t v43 = *(void *)(v11[7] + 8 * v41);
  if ((v39 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1D17BE710();
    sub_1D1668090();
    sub_1D1674A20();
    sub_1D17BE390();
    unint64_t v44 = (unint64_t)v80;
    unint64_t v74 = v81;
    uint64_t v45 = v82;
    unint64_t v7 = v83;
    unint64_t v46 = v84;
  }
  else
  {
    uint64_t v47 = -1 << *(unsigned char *)(v39 + 32);
    uint64_t v45 = ~v47;
    unint64_t v74 = v39 + 56;
    uint64_t v48 = -v47;
    if (v48 < 64) {
      uint64_t v49 = ~(-1 << v48);
    }
    else {
      uint64_t v49 = -1;
    }
    unint64_t v46 = v49 & *(void *)(v39 + 56);
    swift_bridgeObjectRetain();
    unint64_t v7 = 0;
    unint64_t v44 = v39;
  }
  int64_t v73 = (unint64_t)(v45 + 64) >> 6;
  uint64_t v66 = v43 * v70;
  BOOL v67 = (unsigned __int128)(v43 * (__int128)v70) >> 64 != (v43 * v70) >> 63;
  uint64_t v75 = (void *)v44;
  while (2)
  {
    unint64_t v50 = v7;
    while (2)
    {
      if ((v44 & 0x8000000000000000) != 0)
      {
        if (!sub_1D17BE7A0()) {
          goto LABEL_88;
        }
        sub_1D1668090();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v53 = v78;
        swift_unknownObjectRelease();
        unint64_t v7 = v50;
        uint64_t v51 = v46;
        if (!v78) {
          goto LABEL_88;
        }
      }
      else
      {
        if (v46)
        {
          uint64_t v51 = (v46 - 1) & v46;
          unint64_t v52 = __clz(__rbit64(v46)) | (v50 << 6);
          unint64_t v7 = v50;
        }
        else
        {
          int64_t v54 = v50 + 1;
          if (__OFADD__(v50, 1)) {
            goto LABEL_95;
          }
          if (v54 >= v73) {
            goto LABEL_88;
          }
          unint64_t v55 = *(void *)(v74 + 8 * v54);
          unint64_t v7 = v50 + 1;
          if (!v55)
          {
            unint64_t v7 = v50 + 2;
            if ((uint64_t)(v50 + 2) >= v73) {
              goto LABEL_88;
            }
            unint64_t v55 = *(void *)(v74 + 8 * v7);
            if (!v55)
            {
              unint64_t v7 = v50 + 3;
              if ((uint64_t)(v50 + 3) >= v73) {
                goto LABEL_88;
              }
              unint64_t v55 = *(void *)(v74 + 8 * v7);
              if (!v55)
              {
                unint64_t v7 = v50 + 4;
                if ((uint64_t)(v50 + 4) >= v73) {
                  goto LABEL_88;
                }
                unint64_t v55 = *(void *)(v74 + 8 * v7);
                if (!v55)
                {
                  unint64_t v56 = v50 + 5;
                  while (v73 != v56)
                  {
                    unint64_t v55 = *(void *)(v74 + 8 * v56++);
                    if (v55)
                    {
                      unint64_t v7 = v56 - 1;
                      unint64_t v44 = (unint64_t)v75;
                      goto LABEL_72;
                    }
                  }
LABEL_88:
                  sub_1D1668088();
                  swift_bridgeObjectRelease();

                  unint64_t v7 = v72;
                  uint64_t v28 = v68;
                  int64_t v31 = v69;
                  uint64_t v27 = v70;
                  goto LABEL_25;
                }
              }
            }
          }
LABEL_72:
          uint64_t v51 = (v55 - 1) & v55;
          unint64_t v52 = __clz(__rbit64(v55)) + (v7 << 6);
        }
        id v53 = *(id *)(*(void *)(v44 + 48) + 8 * v52);
        if (!v53) {
          goto LABEL_88;
        }
      }
      if (!v11[2])
      {
LABEL_52:

        unint64_t v50 = v7;
        unint64_t v46 = v51;
        unint64_t v44 = (unint64_t)v75;
        continue;
      }
      break;
    }
    unint64_t v46 = v51;
    id v57 = v53;
    unint64_t v58 = sub_1D165A9D0((uint64_t)v57);
    if ((v59 & 1) == 0)
    {

      goto LABEL_52;
    }
    uint64_t v60 = *(void *)(v11[7] + 8 * v58);

    if ((v39 & 0xC000000000000001) != 0) {
      uint64_t v61 = sub_1D17BE760();
    }
    else {
      uint64_t v61 = *(void *)(v39 + 16);
    }
    if (!v67)
    {
      BOOL v24 = __OFADD__(v66, v60);
      unint64_t v62 = v66 + v60;
      if (v24) {
        goto LABEL_101;
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v63 = v71;
        if ((v62 & 0x8000000000000000) != 0) {
          goto LABEL_102;
        }
      }
      else
      {
        uint64_t v63 = sub_1D1667604(v71);
        if ((v62 & 0x8000000000000000) != 0) {
          goto LABEL_102;
        }
      }
      if (v62 >= v63[2]) {
        goto LABEL_103;
      }
      uint64_t v71 = v63;
      *(double *)&v63[v62 + 4] = 1.0 / (double)v61;

      unint64_t v44 = (unint64_t)v75;
      continue;
    }
    break;
  }
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  sub_1D1668090();
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

uint64_t sub_1D16E09E0(unint64_t a1)
{
  unint64_t v2 = a1;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(unsigned char *)(v1 + 176) = 1;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  if (a1 >> 62) {
    goto LABEL_54;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
  {
LABEL_55:
    unint64_t v5 = (void *)MEMORY[0x1E4FBC868];
    uint64_t v45 = (void *)MEMORY[0x1E4FBC868];
LABEL_56:
    uint64_t result = v41;
    *(void *)(v41 + 16) = v5;
    *(void *)(v41 + 24) = v45;
    return result;
  }
LABEL_3:
  uint64_t v4 = 0;
  unint64_t v44 = v2 & 0xC000000000000001;
  unint64_t v42 = v2;
  unint64_t v5 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v45 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v43 = v3;
  while (1)
  {
    if (v44)
    {
      uint64_t v6 = MEMORY[0x1D25F9260](v4, v42);
      BOOL v7 = __OFADD__(v4, 1);
      uint64_t v8 = v4 + 1;
      if (v7) {
        goto LABEL_53;
      }
    }
    else
    {
      uint64_t v6 = swift_retain();
      BOOL v7 = __OFADD__(v4, 1);
      uint64_t v8 = v4 + 1;
      if (v7) {
        goto LABEL_53;
      }
    }
    uint64_t v46 = v6;
    uint64_t v47 = v8;
    uint64_t v9 = *(void *)(v6 + 16);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v49 = v5;
    uint64_t v11 = v9 + 64;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = v12 < 64 ? ~(-1 << v12) : -1;
    unint64_t v2 = v13 & *(void *)(v9 + 64);
    int64_t v48 = (unint64_t)(v12 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v14 = 0;
    if (v2) {
      break;
    }
LABEL_17:
    BOOL v7 = __OFADD__(v14++, 1);
    if (v7) {
      goto LABEL_51;
    }
    if (v14 < v48)
    {
      unint64_t v22 = *(void *)(v11 + 8 * v14);
      if (v22) {
        goto LABEL_29;
      }
      int64_t v23 = v14 + 1;
      if (v14 + 1 < v48)
      {
        unint64_t v22 = *(void *)(v11 + 8 * v23);
        if (v22) {
          goto LABEL_28;
        }
        int64_t v23 = v14 + 2;
        if (v14 + 2 < v48)
        {
          unint64_t v22 = *(void *)(v11 + 8 * v23);
          if (v22) {
            goto LABEL_28;
          }
          int64_t v23 = v14 + 3;
          if (v14 + 3 < v48)
          {
            unint64_t v22 = *(void *)(v11 + 8 * v23);
            if (v22) {
              goto LABEL_28;
            }
            int64_t v23 = v14 + 4;
            if (v14 + 4 < v48)
            {
              unint64_t v22 = *(void *)(v11 + 8 * v23);
              if (v22)
              {
LABEL_28:
                int64_t v14 = v23;
LABEL_29:
                unint64_t v2 = (v22 - 1) & v22;
                unint64_t v21 = __clz(__rbit64(v22)) + (v14 << 6);
                goto LABEL_30;
              }
              while (1)
              {
                int64_t v14 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  break;
                }
                if (v14 >= v48) {
                  goto LABEL_46;
                }
                unint64_t v22 = *(void *)(v11 + 8 * v14);
                ++v23;
                if (v22) {
                  goto LABEL_29;
                }
              }
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              swift_bridgeObjectRetain();
              uint64_t v3 = sub_1D17BEAD0();
              swift_bridgeObjectRelease();
              if (!v3) {
                goto LABEL_55;
              }
              goto LABEL_3;
            }
          }
        }
      }
    }
LABEL_46:
    uint64_t v4 = v47;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v38 = *(void *)(v46 + 24);
    if (v38)
    {
      swift_bridgeObjectRetain();
      char v39 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v49 = v45;
      unint64_t v2 = 0;
      sub_1D170EBA4(v38, (uint64_t)sub_1D16D2CDC, 0, v39, &v49);
      uint64_t v45 = v49;
      swift_release();
      swift_bridgeObjectRelease();
      if (v47 == v43) {
        goto LABEL_56;
      }
    }
    else
    {
      swift_release();
      if (v47 == v43) {
        goto LABEL_56;
      }
    }
  }
  while (2)
  {
    while (2)
    {
      unint64_t v20 = __clz(__rbit64(v2));
      v2 &= v2 - 1;
      unint64_t v21 = v20 | (v14 << 6);
LABEL_30:
      uint64_t v24 = 8 * v21;
      unint64_t v25 = *(void *)(*(void *)(v9 + 56) + v24);
      id v26 = *(id *)(*(void *)(v9 + 48) + v24);
      swift_bridgeObjectRetain();
      unint64_t v28 = sub_1D165A9D0((uint64_t)v26);
      uint64_t v29 = v5[2];
      BOOL v30 = (v27 & 1) == 0;
      uint64_t v31 = v29 + v30;
      if (__OFADD__(v29, v30))
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      char v32 = v27;
      if (v5[3] >= v31)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          unint64_t v5 = v49;
          if (v27) {
            goto LABEL_15;
          }
        }
        else
        {
          sub_1D16A6DE0();
          unint64_t v5 = v49;
          if (v32)
          {
LABEL_15:
            uint64_t v15 = 8 * v28;
            uint64_t v16 = *(void **)(v5[7] + v15);
            swift_bridgeObjectRetain();
            sub_1D168963C(v25, v16);
            uint64_t v18 = v17;

            uint64_t v19 = v5[7];
            swift_bridgeObjectRelease();
            *(void *)(v19 + v15) = v18;
            char isUniquelyReferenced_nonNull_native = 1;
            if (!v2) {
              goto LABEL_17;
            }
            continue;
          }
        }
        goto LABEL_37;
      }
      break;
    }
    sub_1D16A2EE0(v31, isUniquelyReferenced_nonNull_native & 1);
    unint64_t v33 = sub_1D165A9D0((uint64_t)v26);
    if ((v32 & 1) == (v34 & 1))
    {
      unint64_t v28 = v33;
      unint64_t v5 = v49;
      if (v32) {
        goto LABEL_15;
      }
LABEL_37:
      v5[(v28 >> 6) + 8] |= 1 << v28;
      uint64_t v35 = 8 * v28;
      *(void *)(v5[6] + v35) = v26;
      *(void *)(v5[7] + v35) = v25;
      uint64_t v36 = v5[2];
      BOOL v7 = __OFADD__(v36, 1);
      uint64_t v37 = v36 + 1;
      if (v7) {
        goto LABEL_50;
      }
      v5[2] = v37;
      char isUniquelyReferenced_nonNull_native = 1;
      if (!v2) {
        goto LABEL_17;
      }
      continue;
    }
    break;
  }
  sub_1D1668090();
  sub_1D17BEC60();
  __break(1u);
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MADistribution()
{
  return self;
}

void sub_1D16E0E74(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v35 = 0;
  int64_t v5 = 0;
  uint64_t v8 = *(void *)(a3 + 64);
  uint64_t v6 = a3 + 64;
  uint64_t v7 = v8;
  uint64_t v9 = 1 << *(unsigned char *)(v6 - 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v7;
  int64_t v38 = (unint64_t)(v9 + 63) >> 6;
  unint64_t v39 = a4 & 0xC000000000000001;
  uint64_t v37 = v6;
  uint64_t v42 = a4 + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v18 = __clz(__rbit64(v11));
      uint64_t v19 = (v11 - 1) & v11;
      unint64_t v20 = v18 | (v5 << 6);
      goto LABEL_20;
    }
    BOOL v21 = __OFADD__(v5++, 1);
    if (v21)
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v5 >= v38) {
      goto LABEL_41;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v5);
    if (!v22) {
      break;
    }
LABEL_19:
    uint64_t v19 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v5 << 6);
LABEL_20:
    uint64_t v24 = *(void **)(*(void *)(a3 + 48) + 8 * v20);
    unint64_t v41 = v20;
    unint64_t v43 = v19;
    if (v39)
    {
      int64_t v12 = v5;
      uint64_t v13 = *(void **)(*(void *)(a3 + 48) + 8 * v20);
      id v14 = v24;
      if (sub_1D17BE7B0()) {
        goto LABEL_37;
      }
    }
    else if (*(void *)(v4 + 16))
    {
      v24;
      unint64_t v25 = sub_1D17BE5B0() & ~(-1 << *(unsigned char *)(v4 + 32));
      if ((*(void *)(v42 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25))
      {
        uint64_t v36 = -1 << *(unsigned char *)(v4 + 32);
        uint64_t v13 = v24;
        int64_t v12 = v5;
        sub_1D1668090();
        uint64_t v26 = v4;
        id v27 = *(id *)(*(void *)(v4 + 48) + 8 * v25);
        char v28 = sub_1D17BE5C0();

        if (v28) {
          goto LABEL_36;
        }
        unint64_t v29 = (v25 + 1) & ~v36;
        if ((*(void *)(v42 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29))
        {
          uint64_t v4 = v26;
          while (1)
          {
            id v30 = *(id *)(*(void *)(v4 + 48) + 8 * v29);
            char v31 = sub_1D17BE5C0();

            if (v31) {
              break;
            }
            unint64_t v29 = (v29 + 1) & ~v36;
            uint64_t v4 = v26;
            if (((*(void *)(v42 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0) {
              goto LABEL_6;
            }
          }
LABEL_36:
          uint64_t v4 = v26;
LABEL_37:

          int64_t v5 = v12;
          unint64_t v11 = v43;
          goto LABEL_38;
        }
        uint64_t v4 = v26;
      }
      else
      {
        uint64_t v13 = v24;
        int64_t v12 = v5;
      }
    }
    else
    {
      int64_t v12 = v5;
      uint64_t v13 = *(void **)(*(void *)(a3 + 48) + 8 * v20);
      id v32 = v24;
    }
LABEL_6:
    uint64_t v15 = swift_bridgeObjectRetain();
    unint64_t v16 = sub_1D16D2D80(v15);
    swift_bridgeObjectRelease();
    uint64_t v17 = sub_1D167B3C0(v16);
    swift_bridgeObjectRelease();
    LOBYTE(v16) = sub_1D1671E50(v13, v17);

    swift_bridgeObjectRelease();
    int64_t v5 = v12;
    unint64_t v11 = v43;
    if (v16)
    {
LABEL_38:
      *(unint64_t *)((char *)a1 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
      BOOL v21 = __OFADD__(v35++, 1);
      if (v21)
      {
        __break(1u);
LABEL_41:
        sub_1D1684650(a1, a2, v35, a3);
        return;
      }
    }
  }
  int64_t v23 = v5 + 1;
  if (v5 + 1 >= v38) {
    goto LABEL_41;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v23);
  if (v22) {
    goto LABEL_18;
  }
  int64_t v23 = v5 + 2;
  if (v5 + 2 >= v38) {
    goto LABEL_41;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v23);
  if (v22) {
    goto LABEL_18;
  }
  int64_t v23 = v5 + 3;
  if (v5 + 3 >= v38) {
    goto LABEL_41;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v23);
  if (v22)
  {
LABEL_18:
    int64_t v5 = v23;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v5 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v5 >= v38) {
      goto LABEL_41;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v5);
    ++v23;
    if (v22) {
      goto LABEL_19;
    }
  }
LABEL_43:
  __break(1u);
}

uint64_t sub_1D16E121C(uint64_t a1, uint64_t a2)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  swift_bridgeObjectRetain_n();
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe, v10);
    bzero((char *)v16 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1D16E0E74((void *)((char *)v16 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    swift_release();
    if (v2) {
      swift_willThrow();
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v8);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1D16E0E74((unint64_t *)v13, v7, a1, a2);
    uint64_t v12 = v14;
    swift_bridgeObjectRelease();
    swift_release();
    MEMORY[0x1D25FAD70](v13, -1, -1);
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1D16E1440(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  id v30 = (unint64_t *)result;
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v36 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v11 = a4 & 0xC000000000000001;
  uint64_t v37 = a4 + 56;
  int64_t v33 = v10;
  unint64_t v32 = a4 & 0xC000000000000001;
LABEL_5:
  uint64_t v31 = v5;
  while (v9)
  {
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v15 = v14 | (v6 << 6);
LABEL_23:
    uint64_t v19 = *(void **)(*(void *)(v4 + 48) + 8 * v15);
    if (v11)
    {
      id v12 = v19;
      swift_bridgeObjectRetain();
      char v13 = sub_1D17BE7B0();

      uint64_t result = swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_33;
      }
    }
    else if (*(void *)(a4 + 16))
    {
      int64_t v35 = v6;
      id v20 = v19;
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_1D17BE5B0();
      uint64_t v22 = -1 << *(unsigned char *)(a4 + 32);
      unint64_t v23 = v21 & ~v22;
      if ((*(void *)(v37 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23))
      {
        sub_1D1668090();
        id v24 = *(id *)(*(void *)(a4 + 48) + 8 * v23);
        char v25 = sub_1D17BE5C0();

        if (v25)
        {
LABEL_32:

          uint64_t result = swift_bridgeObjectRelease();
          int64_t v10 = v33;
          uint64_t v4 = a3;
          unint64_t v11 = v32;
          int64_t v6 = v35;
LABEL_33:
          *(unint64_t *)((char *)v30 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
          uint64_t v5 = v31 + 1;
          if (!__OFADD__(v31, 1)) {
            goto LABEL_5;
          }
          __break(1u);
          return sub_1D16843B8(v30, a2, v31, v4);
        }
        uint64_t v26 = ~v22;
        while (1)
        {
          unint64_t v23 = (v23 + 1) & v26;
          if (((*(void *)(v37 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
            break;
          }
          id v27 = *(id *)(*(void *)(a4 + 48) + 8 * v23);
          char v28 = sub_1D17BE5C0();

          if (v28) {
            goto LABEL_32;
          }
        }
      }

      uint64_t result = swift_bridgeObjectRelease();
      int64_t v10 = v33;
      uint64_t v4 = a3;
      unint64_t v11 = v32;
      int64_t v6 = v35;
    }
  }
  int64_t v16 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v16 >= v10) {
    return sub_1D16843B8(v30, a2, v31, v4);
  }
  unint64_t v17 = *(void *)(v36 + 8 * v16);
  ++v6;
  if (v17) {
    goto LABEL_22;
  }
  int64_t v6 = v16 + 1;
  if (v16 + 1 >= v10) {
    return sub_1D16843B8(v30, a2, v31, v4);
  }
  unint64_t v17 = *(void *)(v36 + 8 * v6);
  if (v17) {
    goto LABEL_22;
  }
  int64_t v6 = v16 + 2;
  if (v16 + 2 >= v10) {
    return sub_1D16843B8(v30, a2, v31, v4);
  }
  unint64_t v17 = *(void *)(v36 + 8 * v6);
  if (v17)
  {
LABEL_22:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v6 << 6);
    goto LABEL_23;
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v10) {
    return sub_1D16843B8(v30, a2, v31, v4);
  }
  unint64_t v17 = *(void *)(v36 + 8 * v18);
  if (v17)
  {
    int64_t v6 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v6 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v6 >= v10) {
      return sub_1D16843B8(v30, a2, v31, v4);
    }
    unint64_t v17 = *(void *)(v36 + 8 * v6);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1D16E1760(uint64_t a1, uint64_t a2)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe, v10);
    bzero((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1D16E1440((uint64_t)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    id v12 = (void *)swift_slowAlloc();
    bzero(v12, v8);
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1D16E1440((uint64_t)v12, v7, a1, a2);
    swift_bridgeObjectRelease();
    MEMORY[0x1D25FAD70](v12, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v11;
}

void sub_1D16E191C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = a4 & 0xC000000000000001;
  uint64_t v37 = a4 + 56;
  uint64_t v35 = a3 + 56;
  unint64_t v33 = a4 & 0xC000000000000001;
  int64_t v34 = v11;
LABEL_5:
  uint64_t v32 = v5;
  while (v10)
  {
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v16 = v15 | (v6 << 6);
LABEL_23:
    id v20 = *(void **)(*(void *)(v4 + 48) + 8 * v16);
    if (v12)
    {
      id v13 = v20;
      char v14 = sub_1D17BE7B0();

      if (v14) {
        goto LABEL_33;
      }
    }
    else if (*(void *)(a4 + 16))
    {
      id v21 = v20;
      uint64_t v22 = sub_1D17BE5B0();
      uint64_t v23 = -1 << *(unsigned char *)(a4 + 32);
      unint64_t v24 = v22 & ~v23;
      if ((*(void *)(v37 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24))
      {
        sub_1D1668090();
        id v25 = *(id *)(*(void *)(a4 + 48) + 8 * v24);
        char v26 = sub_1D17BE5C0();

        if (v26)
        {
LABEL_32:

          uint64_t v7 = v35;
          uint64_t v4 = a3;
          unint64_t v12 = v33;
          int64_t v11 = v34;
LABEL_33:
          *(unint64_t *)((char *)a1 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
          uint64_t v5 = v32 + 1;
          if (!__OFADD__(v32, 1)) {
            goto LABEL_5;
          }
          __break(1u);
LABEL_36:
          swift_retain();
          sub_1D16DFCE0(a1, a2, v32, v4);
          return;
        }
        uint64_t v27 = ~v23;
        while (1)
        {
          unint64_t v24 = (v24 + 1) & v27;
          if (((*(void *)(v37 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
            break;
          }
          id v28 = *(id *)(*(void *)(a4 + 48) + 8 * v24);
          char v29 = sub_1D17BE5C0();

          if (v29) {
            goto LABEL_32;
          }
        }
      }

      uint64_t v7 = v35;
      uint64_t v4 = a3;
      unint64_t v12 = v33;
      int64_t v11 = v34;
    }
  }
  int64_t v17 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v17 >= v11) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v17);
  ++v6;
  if (v18) {
    goto LABEL_22;
  }
  int64_t v6 = v17 + 1;
  if (v17 + 1 >= v11) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v6);
  if (v18) {
    goto LABEL_22;
  }
  int64_t v6 = v17 + 2;
  if (v17 + 2 >= v11) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v6);
  if (v18)
  {
LABEL_22:
    unint64_t v10 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v6 << 6);
    goto LABEL_23;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v11) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v6 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v6 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v6);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_1D16E1BEC(uint64_t a1, uint64_t a2)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe, v10);
    bzero((char *)v16 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    sub_1D16E191C((void *)((char *)v16 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    uint64_t v12 = v11;
    swift_release();
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    id v13 = (void *)swift_slowAlloc();
    bzero(v13, v8);
    swift_bridgeObjectRetain();
    sub_1D16E191C((unint64_t *)v13, v7, a1, a2);
    uint64_t v12 = v14;
    swift_release();
    swift_bridgeObjectRelease();
    MEMORY[0x1D25FAD70](v13, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v12;
}

uint64_t sub_1D16E1DB8(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return sub_1D16E1BEC(a1, a2);
  }
  uint64_t v3 = MEMORY[0x1E4FBC870];
  uint64_t v27 = MEMORY[0x1E4FBC870];
  swift_bridgeObjectRetain();
  sub_1D17BE710();
  if (!sub_1D17BE7A0()) {
    goto LABEL_29;
  }
  sub_1D1668090();
  uint64_t v4 = a2 + 56;
  do
  {
    swift_dynamicCast();
    if ((a2 & 0xC000000000000001) != 0)
    {
      id v5 = v26;
      char v6 = sub_1D17BE7B0();

      if ((v6 & 1) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      if (!*(void *)(a2 + 16)) {
        goto LABEL_4;
      }
      uint64_t v14 = sub_1D17BE5B0();
      uint64_t v15 = -1 << *(unsigned char *)(a2 + 32);
      unint64_t v16 = v14 & ~v15;
      if (((*(void *)(v4 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
        goto LABEL_4;
      }
      id v17 = *(id *)(*(void *)(a2 + 48) + 8 * v16);
      char v18 = sub_1D17BE5C0();

      if ((v18 & 1) == 0)
      {
        uint64_t v19 = ~v15;
        while (1)
        {
          unint64_t v16 = (v16 + 1) & v19;
          if (((*(void *)(v4 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
            break;
          }
          id v20 = *(id *)(*(void *)(a2 + 48) + 8 * v16);
          char v21 = sub_1D17BE5C0();

          if (v21) {
            goto LABEL_8;
          }
        }
LABEL_4:

        continue;
      }
    }
LABEL_8:
    uint64_t v7 = v27;
    if (*(void *)(v27 + 24) <= *(void *)(v27 + 16))
    {
      sub_1D16FCB9C();
      uint64_t v7 = v27;
    }
    uint64_t result = sub_1D17BE5B0();
    uint64_t v9 = v7 + 56;
    uint64_t v10 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v11 = result & ~v10;
    unint64_t v12 = v11 >> 6;
    if (((-1 << v11) & ~*(void *)(v7 + 56 + 8 * (v11 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v11) & ~*(void *)(v7 + 56 + 8 * (v11 >> 6)))) | v11 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v10) >> 6;
      do
      {
        if (++v12 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          return result;
        }
        BOOL v24 = v12 == v23;
        if (v12 == v23) {
          unint64_t v12 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v9 + 8 * v12);
      }
      while (v25 == -1);
      unint64_t v13 = __clz(__rbit64(~v25)) + (v12 << 6);
    }
    *(void *)(v9 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v7 + 48) + 8 * v13) = v26;
    ++*(void *)(v7 + 16);
  }
  while (sub_1D17BE7A0());
  uint64_t v3 = v27;
LABEL_29:
  swift_bridgeObjectRelease();
  swift_release();
  return v3;
}

void sub_1D16E20B8(unint64_t a1)
{
  unint64_t v1 = a1;
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651A70);
      uint64_t v3 = sub_1D17BE840();
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = MEMORY[0x1E4FBC870];
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  uint64_t v7 = v3 + 56;
  uint64_t v42 = v5;
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    unint64_t v40 = v1;
    while (1)
    {
      uint64_t v9 = MEMORY[0x1D25F9260](v8, v1);
      BOOL v10 = __OFADD__(v8++, 1);
      if (v10)
      {
        __break(1u);
        goto LABEL_37;
      }
      uint64_t v11 = v9;
      uint64_t v12 = sub_1D17BE5B0();
      uint64_t v13 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v14 = v12 & ~v13;
      unint64_t v15 = v14 >> 6;
      uint64_t v16 = *(void *)(v7 + 8 * (v14 >> 6));
      uint64_t v17 = 1 << v14;
      if (((1 << v14) & v16) != 0)
      {
        sub_1D1668090();
        id v18 = *(id *)(*(void *)(v3 + 48) + 8 * v14);
        char v19 = sub_1D17BE5C0();

        if (v19)
        {
LABEL_11:
          swift_unknownObjectRelease();
          unint64_t v1 = v40;
          goto LABEL_12;
        }
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)(v7 + 8 * (v14 >> 6));
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(*(void *)(v3 + 48) + 8 * v14);
          char v22 = sub_1D17BE5C0();

          if (v22) {
            goto LABEL_11;
          }
        }
        unint64_t v1 = v40;
      }
      *(void *)(v7 + 8 * v15) = v17 | v16;
      *(void *)(*(void *)(v3 + 48) + 8 * v14) = v11;
      uint64_t v23 = *(void *)(v3 + 16);
      BOOL v10 = __OFADD__(v23, 1);
      uint64_t v24 = v23 + 1;
      if (v10) {
        goto LABEL_38;
      }
      *(void *)(v3 + 16) = v24;
LABEL_12:
      if (v8 == v42) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  uint64_t v41 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v41)
  {
    id v26 = *(id *)(v1 + 32 + 8 * v25);
    uint64_t v27 = sub_1D17BE5B0();
    uint64_t v28 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v29 = v27 & ~v28;
    unint64_t v30 = v29 >> 6;
    uint64_t v31 = *(void *)(v7 + 8 * (v29 >> 6));
    uint64_t v32 = 1 << v29;
    if (((1 << v29) & v31) != 0)
    {
      sub_1D1668090();
      id v33 = *(id *)(*(void *)(v3 + 48) + 8 * v29);
      char v34 = sub_1D17BE5C0();

      if (v34) {
        goto LABEL_24;
      }
      uint64_t v35 = ~v28;
      unint64_t v29 = (v29 + 1) & v35;
      unint64_t v30 = v29 >> 6;
      uint64_t v31 = *(void *)(v7 + 8 * (v29 >> 6));
      uint64_t v32 = 1 << v29;
      if ((v31 & (1 << v29)) != 0)
      {
        while (1)
        {
          id v36 = *(id *)(*(void *)(v3 + 48) + 8 * v29);
          char v37 = sub_1D17BE5C0();

          if (v37) {
            break;
          }
          unint64_t v29 = (v29 + 1) & v35;
          unint64_t v30 = v29 >> 6;
          uint64_t v31 = *(void *)(v7 + 8 * (v29 >> 6));
          uint64_t v32 = 1 << v29;
          if ((v31 & (1 << v29)) == 0) {
            goto LABEL_32;
          }
        }
LABEL_24:

        uint64_t v5 = v42;
        goto LABEL_25;
      }
LABEL_32:
      uint64_t v5 = v42;
    }
    *(void *)(v7 + 8 * v30) = v32 | v31;
    *(void *)(*(void *)(v3 + 48) + 8 * v29) = v26;
    uint64_t v38 = *(void *)(v3 + 16);
    BOOL v10 = __OFADD__(v38, 1);
    uint64_t v39 = v38 + 1;
    if (v10) {
      goto LABEL_39;
    }
    *(void *)(v3 + 16) = v39;
LABEL_25:
    if (++v25 == v5) {
      return;
    }
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

void *sub_1D16E2410@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1D16D31D8();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E243C(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 32) = *a1;
  swift_retain();
  return swift_release();
}

void *sub_1D16E2480@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1D16D3370();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E24AC(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 40) = *a1;
  swift_retain();
  return swift_release();
}

void *sub_1D16E24F0@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1D16D34AC();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E251C(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 48) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1D16E2560@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D16D6020();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E258C(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 56) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1D16E25D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D16D6A88();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E25FC(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 64) = *a1;
  swift_retain();
  return swift_release();
}

id sub_1D16E2640@<X0>(void *a1@<X8>)
{
  id result = sub_1D16D75B0();
  *a1 = result;
  return result;
}

void sub_1D16E266C(void **a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  id v4 = *(id *)(*(void *)a2 + 72);
  *(void *)(*(void *)a2 + 72) = *a1;
  id v3 = v2;
}

uint64_t sub_1D16E26B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D16D7D30();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E26E0(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 80) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D16E2724@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D16D7DEC();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E2750(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 88) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D16E2794@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D16D8038();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E27C0(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 96) = *a1;
  swift_retain();
  return swift_release();
}

void *sub_1D16E2804@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1D16D9474();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E2830(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 104) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1D16E2874@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D16D974C();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E28A0(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 112) = *a1;
  swift_retain();
  return swift_release();
}

void *sub_1D16E28E4@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1D16D9884();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E2910(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 120) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1D16E2954@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D16D9A98();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E2980(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 128) = *a1;
  swift_retain();
  return swift_release();
}

void *sub_1D16E29C4@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1D16D9BD0();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E29F0(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 136) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1D16E2A34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D16D9E90();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E2A60(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 144) = *a1;
  swift_retain();
  return swift_release();
}

void *sub_1D16E2AA4@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1D16D9FC8();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E2AD0(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 152) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1D16E2B14@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D16DA270();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E2B40(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 160) = *a1;
  swift_retain();
  return swift_release();
}

void *sub_1D16E2B84@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1D16DA470();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E2BB0(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 184) = *a1;
  swift_retain();
  return swift_release();
}

void *sub_1D16E2BF4@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1D16DAD14();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E2C20(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 192) = *a1;
  swift_retain();
  return swift_release();
}

void *sub_1D16E2C64@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1D16DB334();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E2C90(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 200) = *a1;
  swift_retain();
  return swift_release();
}

void *sub_1D16E2CD4@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1D16DBCD4();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E2D00(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 208) = *a1;
  swift_retain();
  return swift_release();
}

void *sub_1D16E2D44@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1D16DC6A0();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E2D70(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 216) = *a1;
  swift_retain();
  return swift_release();
}

void *sub_1D16E2DB4@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1D16DD080();
  *a1 = result;
  return result;
}

uint64_t sub_1D16E2DE0(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 224) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t method lookup function for MADistribution(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MADistribution);
}

uint64_t dispatch thunk of MADistribution.__allocating_init(projections:weights:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of MADistribution.__allocating_init(distributions:)()
{
  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of MADistribution.sources.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of MADistribution.targets.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of MADistribution.size.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of MADistribution.count.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of MADistribution.fullSize.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of MADistribution.weight(node:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of MADistribution.weightsVector.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of MADistribution.weightsVector.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of MADistribution.weightsVector.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of MADistribution.sourceWeightsVector.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of MADistribution.sourceWeightsVector.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of MADistribution.sourceWeightsVector.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of MADistribution.targetWeightsVector.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of MADistribution.targetWeightsVector.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of MADistribution.targetWeightsVector.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of MADistribution.merge(distributions:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of MADistribution.subset(sources:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of MADistribution.subset(targets:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of MADistribution.subset(sources:targets:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of MADistribution.groupTargetsBy(sourceSlices:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of MADistribution.inverse()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of MADistribution.intersect(distribution:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t dispatch thunk of MADistribution.projectionMatrix.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 480))();
}

uint64_t dispatch thunk of MADistribution.projectionMatrix.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488))();
}

uint64_t dispatch thunk of MADistribution.projectionMatrix.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 496))();
}

uint64_t dispatch thunk of MADistribution.weightedProjectionMatrix.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of MADistribution.weightedProjectionMatrix.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of MADistribution.weightedProjectionMatrix.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of MADistribution.projectionGraph.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of MADistribution.projectionGraph.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of MADistribution.projectionGraph.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of MADistribution.sourceSingletons.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of MADistribution.sourceSingletons.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of MADistribution.sourceSingletons.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of MADistribution.targetSingletons.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of MADistribution.targetSingletons.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of MADistribution.targetSingletons.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of MADistribution.adjacencyMatrix.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of MADistribution.adjacencyMatrix.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of MADistribution.adjacencyMatrix.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of MADistribution.adjacencyMatrix(directed:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of MADistribution.adjacencyWeightedMatrix(directed:repeating:weightedEdges:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of MADistribution.degreeVector(type:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of MADistribution.multiDegreeVector(type:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of MADistribution.transitionMatrix(directed:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of MADistribution.sourceDegreeVector.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of MADistribution.sourceDegreeVector.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of MADistribution.sourceDegreeVector.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of MADistribution.sourceDegreeMatrix.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of MADistribution.sourceDegreeMatrix.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of MADistribution.sourceDegreeMatrix.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of MADistribution.targetDegreeVector.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of MADistribution.targetDegreeVector.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of MADistribution.targetDegreeVector.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of MADistribution.targetDegreeMatrix.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of MADistribution.targetDegreeMatrix.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of MADistribution.targetDegreeMatrix.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of MADistribution.weightedSourceDegreeVector.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of MADistribution.weightedSourceDegreeVector.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t dispatch thunk of MADistribution.weightedSourceDegreeVector.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of MADistribution.weightedsourceDegreeMatrix.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of MADistribution.weightedsourceDegreeMatrix.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 792))();
}

uint64_t dispatch thunk of MADistribution.weightedsourceDegreeMatrix.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 800))();
}

uint64_t dispatch thunk of MADistribution.weightedTargetDegreeVector.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808))();
}

uint64_t dispatch thunk of MADistribution.weightedTargetDegreeVector.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 816))();
}

uint64_t dispatch thunk of MADistribution.weightedTargetDegreeVector.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 824))();
}

uint64_t dispatch thunk of MADistribution.weightedTargetDegreeMatrix.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 832))();
}

uint64_t dispatch thunk of MADistribution.weightedTargetDegreeMatrix.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t dispatch thunk of MADistribution.weightedTargetDegreeMatrix.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 848))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityMatrix.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 880))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityMatrix.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 888))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityMatrix.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 896))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityDistance(source1:source2:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 904))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityIdentityVector.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 912))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityIdentityVector.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 920))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityIdentityVector.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 928))();
}

uint64_t dispatch thunk of MADistribution.sourceSimilarityIdentityDistance(source:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 936))();
}

uint64_t dispatch thunk of MADistribution.sourceCommonalityMatrix.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 944))();
}

uint64_t dispatch thunk of MADistribution.sourceCommonalityMatrix.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 952))();
}

uint64_t dispatch thunk of MADistribution.sourceCommonalityMatrix.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 960))();
}

uint64_t dispatch thunk of MADistribution.sourceCommonality(source1:source2:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 968))();
}

uint64_t dispatch thunk of MADistribution.targetCommonalityMatrix.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 976))();
}

uint64_t dispatch thunk of MADistribution.targetCommonalityMatrix.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 984))();
}

uint64_t dispatch thunk of MADistribution.targetCommonalityMatrix.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 992))();
}

uint64_t dispatch thunk of MADistribution.targetCommonality(target1:target2:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1000))();
}

uint64_t dispatch thunk of MADistribution.sourceIdentityCommonalityMatrix.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1008))();
}

uint64_t dispatch thunk of MADistribution.sourceIdentityCommonalityMatrix.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1016))();
}

uint64_t dispatch thunk of MADistribution.sourceIdentityCommonalityMatrix.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1024))();
}

uint64_t dispatch thunk of MADistribution.sourceIdentityCommonality(source1:source2:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1032))();
}

uint64_t dispatch thunk of MADistribution.targetIdentityCommonalityMatrix.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1040))();
}

uint64_t dispatch thunk of MADistribution.targetIdentityCommonalityMatrix.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1048))();
}

uint64_t dispatch thunk of MADistribution.targetIdentityCommonalityMatrix.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1056))();
}

uint64_t dispatch thunk of MADistribution.targetIdentityCommonality(target1:target2:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1064))();
}

uint64_t dispatch thunk of MADistribution.sourceCustomCommonalityMatrix(closure:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1072))();
}

uint64_t dispatch thunk of MADistribution.projectionSingularDecompositionMatrix(elbowThreshold:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1080))();
}

uint64_t sub_1D16E3FAC()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t MAGraph.adjacencySparseMatrix(directed:)(char a1)
{
  if (!objc_msgSend((id)v1, sel_hasPendingRead)) {
    goto LABEL_90;
  }
  unint64_t v91 = MEMORY[0x1E4FBC860];
  char v69 = a1;
  id v5 = objc_msgSend((id)v1, sel_allNodes);
  sub_1D1668090();
  sub_1D1674A20();
  uint64_t v6 = sub_1D17BE350();

  sub_1D16634F8(v6);
  unint64_t v1 = v91;
  unint64_t v2 = v91 >> 62;
  if ((v69 & 1) == 0)
  {
    uint64_t v25 = v91 & 0xFFFFFFFFFFFFFF8;
    if (v2)
    {
      swift_bridgeObjectRetain();
      uint64_t v72 = sub_1D17BEAD0();
      if (v72)
      {
        swift_bridgeObjectRetain();
        uint64_t v26 = sub_1D17BEAD0();
        swift_bridgeObjectRelease();
        if ((v26 & 0x8000000000000000) == 0)
        {
LABEL_37:
          int64_t v27 = 0;
          uint64_t v74 = v25 + 32;
          unint64_t v75 = v91 & 0xC000000000000001;
          uint64_t v73 = (2 * v26) | 1;
          id v4 = (char *)(v26 + 1);
          uint64_t v78 = (char *)(v91 + 32);
          uint64_t v79 = v26 + 1;
          uint64_t v28 = (void *)MEMORY[0x1E4FBC860];
          unint64_t v29 = (void *)MEMORY[0x1E4FBC860];
          unint64_t v77 = v91 >> 62;
          uint64_t v71 = v91 & 0xFFFFFFFFFFFFFF8;
          uint64_t v70 = v26;
          do
          {
            uint64_t v30 = *(void *)(v25 + 16);
            if (v27 >= (unint64_t)v30) {
              goto LABEL_83;
            }
            id v4 = (char *)v79;
            if (v27 == v79) {
              goto LABEL_84;
            }
            uint64_t v31 = *(void **)&v78[8 * v27];
            uint64_t v86 = v31;
            if (v2)
            {
              swift_bridgeObjectRetain();
              id v33 = v31;
              uint64_t v34 = sub_1D17BEAD0();
              swift_bridgeObjectRelease();
              if (v34 < v27) {
                goto LABEL_87;
              }
              swift_bridgeObjectRetain();
              uint64_t v30 = sub_1D17BEAD0();
              swift_bridgeObjectRelease();
            }
            else
            {
              id v32 = v31;
            }
            if (v30 < v26) {
              goto LABEL_85;
            }
            id v4 = (char *)v75;
            if (v75 && v27 != v26)
            {
              if (v27 >= v26) {
                goto LABEL_88;
              }
              int64_t v35 = v27;
              do
              {
                int64_t v36 = v35 + 1;
                sub_1D17BE890();
                int64_t v35 = v36;
              }
              while (v26 != v36);
            }
            uint64_t v82 = v28;
            unint64_t v84 = v29;
            swift_bridgeObjectRetain();
            int64_t v37 = v27;
            uint64_t v38 = v74;
            uint64_t v88 = (char *)v37;
            unint64_t v39 = v73;
            if (v2)
            {
              sub_1D17BEAE0();
              uint64_t v38 = v40;
              int64_t v37 = v41;
              unint64_t v39 = v42;
              swift_bridgeObjectRelease();
            }
            id v4 = (char *)(v39 >> 1);
            unint64_t v43 = (void *)MEMORY[0x1E4FBC860];
            unint64_t v44 = (void *)MEMORY[0x1E4FBC860];
            uint64_t v45 = &v4[-v37];
            if (v4 != (char *)v37)
            {
              if ((uint64_t)v4 <= v37) {
                goto LABEL_89;
              }
              uint64_t v50 = 0;
              unint64_t v44 = (void *)MEMORY[0x1E4FBC860];
              uint64_t v51 = v38 + 8 * v37;
              while (!__OFADD__(v50, 1))
              {
                id v52 = *(id *)(v51 + 8 * v50);
                if (objc_msgSend(v31, sel_hasEdgeWithNode_, v52))
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    unint64_t v43 = sub_1D169C770(0, v43[2] + 1, 1, v43);
                  }
                  unint64_t v54 = v43[2];
                  unint64_t v53 = v43[3];
                  if (v54 >= v53 >> 1) {
                    unint64_t v43 = sub_1D169C770((void *)(v53 > 1), v54 + 1, 1, v43);
                  }
                  v43[2] = v54 + 1;
                  v43[v54 + 4] = 0x3FF0000000000000;
                  id v4 = v88;
                  if (__OFADD__(v50, v88)) {
                    goto LABEL_81;
                  }
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    unint64_t v44 = sub_1D169C880(0, v44[2] + 1, 1, v44);
                  }
                  unint64_t v2 = v44[2];
                  unint64_t v55 = v44[3];
                  if (v2 >= v55 >> 1) {
                    unint64_t v44 = sub_1D169C880((void *)(v55 > 1), v2 + 1, 1, v44);
                  }
                  v44[2] = v2 + 1;
                  v44[v2 + 4] = &v88[v50];
                  uint64_t v31 = v86;
                }

                if (v45 == (char *)++v50) {
                  goto LABEL_53;
                }
              }
              __break(1u);
LABEL_81:
              __break(1u);
              goto LABEL_82;
            }
LABEL_53:
            swift_unknownObjectRelease();
            uint64_t v28 = v82;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v28 = sub_1D169D280(0, v82[2] + 1, 1, v82);
            }
            unint64_t v29 = v84;
            unint64_t v47 = v28[2];
            unint64_t v46 = v28[3];
            if (v47 >= v46 >> 1) {
              uint64_t v28 = sub_1D169D280((void *)(v46 > 1), v47 + 1, 1, v28);
            }
            uint64_t v25 = v71;
            v28[2] = v47 + 1;
            v28[v47 + 4] = v43;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v29 = sub_1D169D150(0, v84[2] + 1, 1, v84);
            }
            unint64_t v2 = v77;
            unint64_t v49 = v29[2];
            unint64_t v48 = v29[3];
            if (v49 >= v48 >> 1) {
              unint64_t v29 = sub_1D169D150((void *)(v48 > 1), v49 + 1, 1, v29);
            }
            v29[2] = v49 + 1;
            int64_t v27 = (int64_t)(v88 + 1);
            v29[v49 + 4] = v44;

            id v4 = (char *)v72;
            uint64_t v26 = v70;
          }
          while (v88 + 1 != (char *)v72);
LABEL_101:
          swift_bridgeObjectRelease();
          if (v2)
          {
            swift_bridgeObjectRetain();
            uint64_t v66 = sub_1D17BEAD0();
            swift_bridgeObjectRelease();
            if (v66 < 0) {
              goto LABEL_107;
            }
            swift_bridgeObjectRetain();
            uint64_t v65 = sub_1D17BEAD0();
            swift_bridgeObjectRelease();
            if (v65 < 0) {
              goto LABEL_107;
            }
          }
          else
          {
            uint64_t v65 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
            uint64_t v66 = v65;
          }
          char v90 = 1;
          uint64_t v60 = (unsigned __int8 *)&v90;
          uint64_t v61 = (sparse_m_double *)v66;
          sparse_dimension v62 = v65;
          uint64_t v63 = (uint64_t)v28;
          uint64_t v64 = (uint64_t)v29;
          goto LABEL_106;
        }
        __break(1u);
      }
    }
    else
    {
      uint64_t v26 = *(void *)((v91 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v26)
      {
        uint64_t v72 = v26;
        goto LABEL_37;
      }
    }
    unint64_t v29 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v28 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_101;
  }
  id v4 = (char *)(v91 & 0xFFFFFFFFFFFFFF8);
  if (v2) {
    goto LABEL_91;
  }
  uint64_t v80 = v91 & 0xFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)((v91 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v7)
  {
    unint64_t v76 = v91 >> 62;
    uint64_t v8 = v7;
    while (1)
    {
      unint64_t v9 = 0;
      BOOL v10 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v87 = (void *)MEMORY[0x1E4FBC860];
      while (1)
      {
        id v4 = *(char **)(v80 + 16);
        if (v9 >= (unint64_t)v4) {
          break;
        }
        id v4 = (char *)(v1 + 32);
        uint64_t v11 = *(void **)(v1 + 32 + 8 * v9);
        unint64_t v85 = v9;
        unint64_t v83 = v11;
        if (v8)
        {
          if (v8 < 1) {
            goto LABEL_86;
          }
          unint64_t v81 = v10;
          swift_bridgeObjectRetain();
          id v12 = v11;
          uint64_t v13 = 0;
          unint64_t v14 = (void *)MEMORY[0x1E4FBC860];
          unint64_t v15 = (void *)MEMORY[0x1E4FBC860];
          do
          {
            id v16 = *(id *)(v1 + 8 * v13 + 32);
            if (objc_msgSend(v12, sel_hasEdgeTowardNode_, v16))
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v14 = sub_1D169C770(0, v14[2] + 1, 1, v14);
              }
              unint64_t v18 = v14[2];
              unint64_t v17 = v14[3];
              if (v18 >= v17 >> 1) {
                unint64_t v14 = sub_1D169C770((void *)(v17 > 1), v18 + 1, 1, v14);
              }
              void v14[2] = v18 + 1;
              v14[v18 + 4] = 0x3FF0000000000000;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v15 = sub_1D169C880(0, v15[2] + 1, 1, v15);
              }
              unint64_t v2 = v15[2];
              unint64_t v19 = v15[3];
              if (v2 >= v19 >> 1) {
                unint64_t v15 = sub_1D169C880((void *)(v19 > 1), v2 + 1, 1, v15);
              }
              v15[2] = v2 + 1;
              v15[v2 + 4] = v13;
            }
            ++v13;
          }
          while (v8 != v13);
          swift_bridgeObjectRelease();
          BOOL v10 = v81;
        }
        else
        {
          id v20 = v11;
          unint64_t v14 = (void *)MEMORY[0x1E4FBC860];
          unint64_t v15 = (void *)MEMORY[0x1E4FBC860];
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v87 = sub_1D169D280(0, v87[2] + 1, 1, v87);
        }
        unint64_t v22 = v87[2];
        unint64_t v21 = v87[3];
        if (v22 >= v21 >> 1) {
          unint64_t v87 = sub_1D169D280((void *)(v21 > 1), v22 + 1, 1, v87);
        }
        v87[2] = v22 + 1;
        v87[v22 + 4] = v14;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          BOOL v10 = sub_1D169D150(0, v10[2] + 1, 1, v10);
        }
        unint64_t v24 = v10[2];
        unint64_t v23 = v10[3];
        if (v24 >= v23 >> 1) {
          BOOL v10 = sub_1D169D150((void *)(v23 > 1), v24 + 1, 1, v10);
        }
        v10[2] = v24 + 1;
        v10[v24 + 4] = v15;
        unint64_t v9 = v85 + 1;

        if (v85 + 1 == v7)
        {
          swift_bridgeObjectRelease();
          uint64_t v56 = v1 & 0xFFFFFFFFFFFFFF8;
          if (v76) {
            goto LABEL_94;
          }
          goto LABEL_79;
        }
      }
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      uint64_t v80 = (uint64_t)v4;
      swift_bridgeObjectRetain();
      uint64_t v59 = sub_1D17BEAD0();
      if (!v59) {
        break;
      }
      uint64_t v7 = v59;
      unint64_t v76 = v2;
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  BOOL v10 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v87 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v56 = v1 & 0xFFFFFFFFFFFFFF8;
  if (!v2)
  {
LABEL_79:
    uint64_t v57 = *(void *)(v56 + 16);
    uint64_t v58 = v57;
LABEL_96:
    char v89 = 0;
    uint64_t v60 = (unsigned __int8 *)&v89;
    uint64_t v61 = (sparse_m_double *)v58;
    sparse_dimension v62 = v57;
    uint64_t v63 = (uint64_t)v87;
    uint64_t v64 = (uint64_t)v10;
LABEL_106:
    BOOL v67 = _s17KnowledgeGraphKit14MASparseMatrixC4rows7columns0F6Values0F7Indices4kindACs6UInt64V_AJSaySaySdGGSaySays5Int64VGGAA0dE4KindOtcfC_0(v61, v62, v63, v64, v60);
    type metadata accessor for MASparseAdjacencyMatrixRepresentation();
    uint64_t result = swift_allocObject();
    *(unsigned char *)(result + 32) = v69 & 1;
    *(void *)(result + 16) = v67;
    *(void *)(result + 24) = v1;
    return result;
  }
LABEL_94:
  swift_bridgeObjectRetain();
  uint64_t v58 = sub_1D17BEAD0();
  swift_bridgeObjectRelease();
  if ((v58 & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v57 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if ((v57 & 0x8000000000000000) == 0) {
      goto LABEL_96;
    }
  }
LABEL_107:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t sub_1D16E4960(char a1)
{
  return MAGraph.adjacencySparseMatrix(directed:)(a1);
}

uint64_t dispatch thunk of MAGraphSparseMatrix.adjacencySparseMatrix(directed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

unint64_t MASparseMatrix.count.getter()
{
  unint64_t v1 = *(void *)(v0 + 24);
  unint64_t v2 = *(void *)(v0 + 32);
  if (is_mul_ok(v1, v2)) {
    return v1 * v2;
  }
  __break(1u);
  return result;
}

double MASparseMatrix.subscript.getter(sparse_index row, sparse_index column_start)
{
  val[1] = *(double *)MEMORY[0x1E4F143B8];
  int v3 = *(unsigned __int8 *)(v2 + 16);
  do
  {
    while (1)
    {
      sparse_index v4 = column_start;
      column_start = row;
      if (v3 != 2) {
        break;
      }
      row = v4;
      if (column_start >= v4) {
        goto LABEL_6;
      }
    }
    if (v3 != 1) {
      break;
    }
    row = v4;
  }
  while (v4 < column_start);
LABEL_6:
  sparse_index column_end = 0;
  val[0] = 0.0;
  sparse_index v6 = 0;
  if (sparse_extract_sparse_row_double(*(sparse_matrix_double *)(v2 + 40), column_start, v4, &column_end, 1uLL, val, &v6) != 1|| (v3 || v6) && ((v3 - 1) > 1 || v6 != v4))
  {
    return 0.0;
  }
  else
  {
    return val[0];
  }
}

uint64_t MASparseMatrix.deinit()
{
  sparse_matrix_destroy(*(void **)(v0 + 40));
  return v0;
}

uint64_t MASparseMatrix.__deallocating_deinit()
{
  sparse_matrix_destroy(*(void **)(v0 + 40));
  return MEMORY[0x1F4186488](v0, 48, 7);
}

BOOL static MASparseMatrixKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MASparseMatrixKind.hash(into:)()
{
  return sub_1D17BED30();
}

uint64_t MASparseMatrixKind.hashValue.getter()
{
  return sub_1D17BED80();
}

sparse_m_double *MASparseMatrix.__allocating_init(rows:columns:columnsValues:columnsIndices:kind:)(sparse_m_double *result, sparse_dimension a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  if (*(void *)(a3 + 16) != a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sparse_dimension v6 = a2;
  if (*(void *)(a4 + 16) != a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  sparse_dimension v7 = (sparse_dimension)result;
  int v8 = *a5;
  type metadata accessor for MASparseMatrix();
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v7;
  *(void *)(v9 + 32) = v6;
  unint64_t result = sparse_matrix_create_double(v7, v6);
  if (!result)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  BOOL v10 = result;
  *(void *)(v9 + 40) = result;
  if (v8)
  {
    if (v8 == 1)
    {
      if (v7 != v6)
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      sparse_matrix_property v11 = SPARSE_UPPER_SYMMETRIC;
    }
    else
    {
      if (v7 != v6)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      sparse_matrix_property v11 = SPARSE_LOWER_SYMMETRIC;
    }
    sparse_set_matrix_property(result, v11);
  }
  if (v6)
  {
    unint64_t result = (sparse_m_double *)swift_retain();
    unint64_t v12 = 0;
    while (v12 < *(void *)(a3 + 16))
    {
      if (v12 >= *(void *)(a4 + 16)) {
        goto LABEL_20;
      }
      uint64_t v13 = *(void *)(a3 + 32 + 8 * v12);
      uint64_t v14 = *(void *)(a4 + 32 + 8 * v12);
      sparse_dimension v15 = v6;
      sparse_dimension v16 = *(void *)(v13 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sparse_dimension v17 = v16;
      sparse_dimension v6 = v15;
      sparse_insert_col_double(v10, v12, v17, (const double *)(v13 + 32), (const sparse_index *)(v14 + 32));
      swift_bridgeObjectRelease();
      unint64_t result = (sparse_m_double *)swift_bridgeObjectRelease();
      if (v15 == ++v12) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  swift_retain();
LABEL_18:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sparse_commit(v10);
  return (sparse_m_double *)v9;
}

uint64_t MASparseMatrix.size.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t MASparseMatrix.length.getter()
{
  if (*(void *)(v0 + 32) <= *(void *)(v0 + 24)) {
    return *(void *)(v0 + 24);
  }
  else {
    return *(void *)(v0 + 32);
  }
}

uint64_t MASparseMatrix.sparseCount.getter()
{
  unint64_t v1 = *(void *)(v0 + 24);
  unint64_t v2 = *(void *)(v0 + 32);
  if (!is_mul_ok(v1, v2))
  {
    __break(1u);
    goto LABEL_7;
  }
  unint64_t matrix_nonzero_count = sparse_get_matrix_nonzero_count(*(void **)(v0 + 40));
  if ((matrix_nonzero_count & 0x8000000000000000) != 0)
  {
LABEL_8:
    uint64_t result = sub_1D17BEA30();
    __break(1u);
    return result;
  }
  BOOL v4 = v1 * v2 >= matrix_nonzero_count;
  uint64_t result = v1 * v2 - matrix_nonzero_count;
  if (!v4)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  return result;
}

unint64_t MASparseMatrix.sparsity.getter()
{
  unint64_t v1 = *(void *)(v0 + 24);
  unint64_t v2 = *(void *)(v0 + 32);
  if (!is_mul_ok(v1, v2))
  {
    __break(1u);
    goto LABEL_6;
  }
  unint64_t result = sparse_get_matrix_nonzero_count(*(void **)(v0 + 40));
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_7:
    unint64_t result = sub_1D17BEA30();
    __break(1u);
    return result;
  }
  if (v1 * v2 < result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  return result;
}

unint64_t MASparseMatrix.density.getter()
{
  unint64_t v1 = *(void *)(v0 + 24);
  unint64_t v2 = *(void *)(v0 + 32);
  if (!is_mul_ok(v1, v2))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  unint64_t result = sparse_get_matrix_nonzero_count(*(void **)(v0 + 40));
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_9:
    unint64_t result = sub_1D17BEA30();
    __break(1u);
    return result;
  }
  if (v1 * v2 < result) {
    goto LABEL_7;
  }
  if (v1 * v2 < v1 * v2 - result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t MASparseMatrix.subscript.setter(sparse_index i, sparse_index j, double a3)
{
  return sparse_insert_entry_double(*(sparse_matrix_double *)(v3 + 40), a3, i, j);
}

uint64_t (*MASparseMatrix.subscript.modify(uint64_t a1, sparse_index row, sparse_index column_start))(uint64_t a1)
{
  *(void *)(a1 + 16) = column_start;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 8) = row;
  *(double *)a1 = MASparseMatrix.subscript.getter(row, column_start);
  return sub_1D16E4FE8;
}

uint64_t sub_1D16E4FE8(uint64_t a1)
{
  return sparse_insert_entry_double(*(sparse_matrix_double *)(*(void *)(a1 + 24) + 40), *(double *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
}

Swift::String __swiftcall MASparseMatrix.description(integerPrecision:doublePrecision:)(Swift::Int integerPrecision, Swift::Int doublePrecision)
{
  uint64_t v3 = (void *)0xE000000000000000;
  uint64_t v4 = *(void *)(v2 + 24);
  if (!v4)
  {
    integerPrecision = 0;
    goto LABEL_17;
  }
  uint64_t v5 = v2;
  int64_t v6 = *(void *)(v2 + 32);
  if (v6 < 0) {
    goto LABEL_16;
  }
  sparse_index v7 = 0;
  uint64_t v19 = *(void *)(v2 + 24);
  while (!v6)
  {
LABEL_12:
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652CB8);
    sub_1D16E5F04();
    sub_1D17BDF20();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BE030();
    ++v7;
    swift_bridgeObjectRelease();
    if (v7 == v4)
    {
      integerPrecision = 0;
      uint64_t v3 = (void *)0xE000000000000000;
      goto LABEL_17;
    }
  }
  uint64_t v20 = MEMORY[0x1E4FBC860];
  integerPrecision = sub_1D168268C(0, v6, 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    for (sparse_index i = 0; i != v6; ++i)
    {
      sub_1D17BEB70();
      sub_1D17BE030();
      swift_bridgeObjectRelease();
      sub_1D17BE030();
      sub_1D17BEB70();
      sub_1D17BE030();
      swift_bridgeObjectRelease();
      sub_1D17BE030();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652CB0);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_1D17C91F0;
      uint64_t v10 = v5;
      double v11 = MASparseMatrix.subscript.getter(v7, i);
      *(void *)(v9 + 56) = MEMORY[0x1E4FBB3D0];
      *(void *)(v9 + 64) = MEMORY[0x1E4FBB460];
      *(double *)(v9 + 32) = v11;
      uint64_t v12 = sub_1D17BE000();
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      unint64_t v16 = *(void *)(v20 + 16);
      unint64_t v15 = *(void *)(v20 + 24);
      if (v16 >= v15 >> 1) {
        sub_1D168268C(v15 > 1, v16 + 1, 1);
      }
      *(void *)(v20 + 16) = v16 + 1;
      uint64_t v17 = v20 + 16 * v16;
      *(void *)(v17 + 32) = v12;
      *(void *)(v17 + 40) = v14;
      uint64_t v5 = v10;
    }
    uint64_t v4 = v19;
    goto LABEL_12;
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  result._object = v3;
  result._countAndFlagsBits = integerPrecision;
  return result;
}

uint64_t MASparseMatrix.description.getter()
{
  return MASparseMatrix.description(integerPrecision:doublePrecision:)(20, 10)._countAndFlagsBits;
}

uint64_t sub_1D16E53BC()
{
  return MASparseMatrix.description(integerPrecision:doublePrecision:)(20, 10)._countAndFlagsBits;
}

uint64_t sub_1D16E53EC(uint64_t *a1, uint64_t *a2)
{
  return _s17KnowledgeGraphKit14MASparseMatrixC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

Swift::Void __swiftcall MASparseMatrix.setDiag(vector:)(KnowledgeGraphKit::MAMatrix vector)
{
  uint64_t v2 = *(void *)vector.rows;
  uint64_t v3 = *(void *)(vector.rows + 8);
  if (v3 != 1 && v2 != 1) {
    goto LABEL_20;
  }
  uint64_t v5 = v2 * v3;
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)(v1 + 24);
  if (v6 != v5 || v5 < 0 || v6 != *(void *)(v1 + 32)) {
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(vector.rows + 16);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  swift_bridgeObjectRetain();
  if (v5)
  {
    unint64_t v9 = 0;
    while (v9 < *(void *)(v7 + 16))
    {
      unint64_t v10 = v9 + 1;
      sparse_insert_entry_double(*(sparse_matrix_double *)(v1 + 40), *(double *)(v7 + 32 + 8 * v9), v9, v9);
      unint64_t v9 = v10;
      if (v5 == v10) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return;
  }
LABEL_14:
  *(void *)(v8 + 16) = v5;
  swift_bridgeObjectRelease();
  swift_release();
}

Swift::Void __swiftcall MASparseMatrix.setDiag(values:indices:)(Swift::OpaquePointer values, Swift::OpaquePointer indices)
{
  unint64_t v3 = *((void *)values._rawValue + 2);
  if (v3 == *((void *)indices._rawValue + 2))
  {
    if (v3)
    {
      uint64_t v5 = (char *)values._rawValue + 32;
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v3; ++i)
      {
        uint64_t v7 = (char *)indices._rawValue + 8 * i;
        unint64_t v8 = *((void *)v7 + 4);
        if (v8 >= v3)
        {
          __break(1u);
          goto LABEL_11;
        }
        sparse_insert_entry_double(*(sparse_matrix_double *)(v2 + 40), *(double *)&v5[8 * v8], v8, *((void *)v7 + 4));
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
LABEL_11:
    __break(1u);
  }
}

KnowledgeGraphKit::MAMatrix __swiftcall MASparseMatrix.denseMatrix()()
{
  v32[2] = *(double **)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2 < 0) {
    goto LABEL_46;
  }
  uint64_t v3 = v1;
  uint64_t v4 = *(void *)(v1 + 32);
  if (v4 < 0)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
  }
  if ((unsigned __int128)(v2 * (__int128)v4) >> 64 != (v2 * v4) >> 63) {
    goto LABEL_48;
  }
  uint64_t v26 = v0;
  uint64_t v27 = *(void *)(v1 + 32);
  Swift::Int matrix_nonzero_count_for_row = sub_1D1665914(v2 * v4, 0.0);
  *(void *)&long long v29 = v2;
  *((void *)&v29 + 1) = v27;
  uint64_t v30 = (void *)matrix_nonzero_count_for_row;
  if (v2)
  {
    for (sparse_index i = 0; i != v2; ++i)
    {
      Swift::Int matrix_nonzero_count_for_row = sparse_get_matrix_nonzero_count_for_row(*(void **)(v3 + 40), i);
      if (matrix_nonzero_count_for_row >= 1)
      {
        sparse_dimension v9 = matrix_nonzero_count_for_row;
        uint64_t v10 = sub_1D17BE1C0();
        *(void *)(v10 + 16) = v9;
        bzero((void *)(v10 + 32), 8 * v9);
        sparse_index v28 = 0;
        uint64_t v11 = sub_1D17BE1C0();
        *(void *)(v11 + 16) = v9;
        uint64_t v12 = (sparse_index *)(v11 + 32);
        bzero((void *)(v11 + 32), 8 * v9);
        uint64_t v13 = *(double **)(v10 + 16);
        v32[0] = (double *)(v10 + 32);
        v32[1] = v13;
        v31[0] = v12;
        v31[1] = (sparse_index *)v9;
        sub_1D16E5840(v31, v3, i, &v28, v9, v32, (uint64_t)&v29);
        swift_bridgeObjectRelease();
        Swift::Int matrix_nonzero_count_for_row = swift_bridgeObjectRelease();
      }
    }
    int v14 = *(unsigned __int8 *)(v3 + 16);
    unint64_t v15 = v30;
    if ((v14 - 3) >= 0xFFFFFFFE)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v27;
      while (1)
      {
        if (v16 == v2) {
          goto LABEL_42;
        }
        if (v14 == 2) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = v16 + 1;
        }
        if (v14 == 2) {
          uint64_t v19 = v16;
        }
        else {
          uint64_t v19 = 0;
        }
        if (v18 < v19) {
          goto LABEL_43;
        }
        if (v19 != v18) {
          break;
        }
LABEL_11:
        if (++v16 == v2) {
          goto LABEL_35;
        }
      }
      uint64_t v20 = v16 * v17;
      if ((unsigned __int128)(v16 * (__int128)v17) >> 64 == (v16 * v17) >> 63)
      {
        if (v19 >= v18)
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        Swift::Int matrix_nonzero_count_for_row = swift_isUniquelyReferenced_nonNull_native();
        if ((matrix_nonzero_count_for_row & 1) == 0)
        {
          Swift::Int matrix_nonzero_count_for_row = (Swift::Int)sub_1D1667604(v15);
          unint64_t v15 = (void *)matrix_nonzero_count_for_row;
        }
        uint64_t v17 = v27;
        while (1)
        {
          uint64_t v21 = v19 * v27;
          if ((unsigned __int128)(v19 * (__int128)v27) >> 64 != (v19 * v27) >> 63) {
            break;
          }
          BOOL v22 = __OFADD__(v21, v16);
          unint64_t v23 = v21 + v16;
          if (v22) {
            goto LABEL_37;
          }
          if ((v23 & 0x8000000000000000) != 0) {
            goto LABEL_38;
          }
          unint64_t v24 = v15[2];
          if (v23 >= v24) {
            goto LABEL_39;
          }
          unint64_t v25 = v20 + v19;
          if (__OFADD__(v20, v19)) {
            goto LABEL_40;
          }
          if (v25 >= v24) {
            goto LABEL_41;
          }
          ++v19;
          v15[v25 + 4] = v15[v23 + 4];
          if (v18 == v19) {
            goto LABEL_11;
          }
        }
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
      }
      __break(1u);
      goto LABEL_45;
    }
  }
  else
  {
    unint64_t v15 = (void *)matrix_nonzero_count_for_row;
  }
LABEL_35:
  *(_OWORD *)uint64_t v26 = v29;
  *(void *)(v26 + 16) = v15;
  result.elements._rawValue = v7;
  result.columns = v6;
  result.rows = matrix_nonzero_count_for_row;
  return result;
}

uint64_t sub_1D16E5840(sparse_index **a1, uint64_t a2, sparse_index row, sparse_index *a4, sparse_dimension nz, double **a6, uint64_t a7)
{
  if (row < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = (void *)nz;
  if ((nz & 0x8000000000000000) == 0)
  {
    uint64_t v11 = (const double **)a6;
    int v14 = *a6;
    if (!v14)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v12 = *a1;
    if (!*a1)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    uint64_t v7 = a7;
    sparse_index v8 = row;
    sparse_dimension v9 = (double *)a2;
    sparse_extract_sparse_row_double(*(sparse_matrix_double *)(a2 + 40), row, 0, a4, nz, v14, v12);
    sparse_dimension v13 = *((void *)v9 + 4);
    if ((v13 & 0x8000000000000000) == 0)
    {
      sparse_dimension v9 = (double *)sub_1D1665914(*((void *)v9 + 4), 0.0);
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        unint64_t v15 = *v11;
        if (*v11) {
          goto LABEL_8;
        }
        goto LABEL_17;
      }
LABEL_16:
      sparse_dimension v9 = (double *)sub_1D1667604(v9);
      unint64_t v15 = *v11;
      if (*v11)
      {
LABEL_8:
        sparse_unpack_vector_double(v13, (sparse_dimension)v10, 0, v15, v12, v9 + 4, 1);
        if (*((void *)v9 + 2) == *(void *)(v7 + 8))
        {
          uint64_t v10 = *(void **)(v7 + 16);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v7 + 16) = v10;
          if (isUniquelyReferenced_nonNull_native) {
            goto LABEL_10;
          }
          goto LABEL_19;
        }
LABEL_18:
        __break(1u);
LABEL_19:
        uint64_t v10 = sub_1D1667604(v10);
        *(void *)(v7 + 16) = v10;
LABEL_10:
        uint64_t v17 = *(void *)(v7 + 8);
        if (v17 < (uint64_t)0xFFFFFFFF80000000)
        {
          __break(1u);
        }
        else if (v17 <= 0x7FFFFFFF)
        {
          if ((unsigned __int128)(v8 * (__int128)v17) >> 64 == (v8 * v17) >> 63)
          {
            cblas_dcopy_NEWLAPACK();
            *(void *)(v7 + 16) = v10;
            return swift_bridgeObjectRelease();
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_25:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t _s17KnowledgeGraphKit14MASparseMatrixC2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  row_end[1] = *MEMORY[0x1E4F143B8];
  sparse_dimension v2 = *(void *)(a1 + 24);
  if (v2 != *(void *)(a2 + 24)) {
    return 0;
  }
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 != *(void *)(a2 + 32)) {
    return 0;
  }
  if (!v5) {
    return 1;
  }
  uint64_t matrix_nonzero_count_for_column = sparse_get_matrix_nonzero_count_for_column(*(void **)(a1 + 40), 0);
  if (matrix_nonzero_count_for_column != sparse_get_matrix_nonzero_count_for_column(*(void **)(v3 + 40), 0)) {
    return 0;
  }
  sparse_dimension nz = v2;
  uint64_t v17 = v3;
  sparse_index v7 = 0;
  uint64_t v18 = v5 - 1;
  uint64_t v19 = v4;
  while (1)
  {
    if (!matrix_nonzero_count_for_column) {
      goto LABEL_12;
    }
    if (matrix_nonzero_count_for_column < 0) {
      break;
    }
    uint64_t v8 = sub_1D17BE1C0();
    *(void *)(v8 + 16) = matrix_nonzero_count_for_column;
    bzero((void *)(v8 + 32), 8 * matrix_nonzero_count_for_column);
    row_end[0] = 0;
    sparse_dimension v9 = (void *)sub_1D17BE1C0();
    v9[2] = matrix_nonzero_count_for_column;
    bzero(v9 + 4, 8 * matrix_nonzero_count_for_column);
    uint64_t v10 = sub_1D17BE1C0();
    *(void *)(v10 + 16) = matrix_nonzero_count_for_column;
    bzero((void *)(v10 + 32), 8 * matrix_nonzero_count_for_column);
    sparse_index v20 = 0;
    uint64_t v11 = (void *)sub_1D17BE1C0();
    v11[2] = matrix_nonzero_count_for_column;
    bzero(v11 + 4, 8 * matrix_nonzero_count_for_column);
    sparse_extract_sparse_column_double(*(sparse_matrix_double *)(v19 + 40), v7, 0, row_end, nz, (double *)(v8 + 32), v9 + 4);
    uint64_t v3 = v17;
    sparse_extract_sparse_column_double(*(sparse_matrix_double *)(v17 + 40), v7, 0, &v20, nz, (double *)(v10 + 32), v11 + 4);
    if (row_end[0] != v20 || !sub_1D16667AC(v8, v10))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    BOOL v12 = sub_1D1666818(v9, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v12) {
      return 0;
    }
    uint64_t v4 = v19;
LABEL_12:
    BOOL v13 = v18 == v7;
    if (v18 != v7)
    {
      if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
        __break(1u);
      }
      uint64_t matrix_nonzero_count_for_column = sparse_get_matrix_nonzero_count_for_column(*(void **)(v4 + 40), v7 + 1);
      uint64_t v14 = sparse_get_matrix_nonzero_count_for_column(*(void **)(v3 + 40), ++v7);
      if (matrix_nonzero_count_for_column == v14) {
        continue;
      }
    }
    return v13;
  }
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

sparse_m_double *_s17KnowledgeGraphKit14MASparseMatrixC4rows7columns0F6Values0F7Indices4kindACs6UInt64V_AJSaySaySdGGSaySays5Int64VGGAA0dE4KindOtcfC_0(sparse_m_double *result, sparse_dimension a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  if (*(sparse_m_double **)(a3 + 16) != result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sparse_dimension v6 = (sparse_dimension)result;
  if (*(sparse_m_double **)(a4 + 16) != result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int v8 = *a5;
  type metadata accessor for MASparseMatrix();
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v6;
  *(void *)(v9 + 32) = a2;
  uint64_t result = sparse_matrix_create_double(v6, a2);
  if (!result)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  *(void *)(v9 + 40) = result;
  if (v8)
  {
    if (v8 == 1)
    {
      if (v6 != a2)
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      sparse_matrix_property v11 = SPARSE_UPPER_SYMMETRIC;
    }
    else
    {
      if (v6 != a2)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      sparse_matrix_property v11 = SPARSE_LOWER_SYMMETRIC;
    }
    sparse_set_matrix_property(result, v11);
  }
  if (v6)
  {
    uint64_t result = (sparse_m_double *)swift_retain();
    unint64_t v12 = 0;
    while (v12 < *(void *)(a3 + 16))
    {
      if (v12 >= *(void *)(a4 + 16)) {
        goto LABEL_20;
      }
      uint64_t v13 = *(void *)(a3 + 32 + 8 * v12);
      uint64_t v14 = *(void *)(a4 + 32 + 8 * v12);
      sparse_dimension v15 = v6;
      sparse_dimension v16 = *(void *)(v13 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sparse_dimension v17 = v16;
      sparse_dimension v6 = v15;
      sparse_insert_row_double(v10, v12, v17, (const double *)(v13 + 32), (const sparse_index *)(v14 + 32));
      swift_bridgeObjectRelease();
      uint64_t result = (sparse_m_double *)swift_bridgeObjectRelease();
      if (v15 == ++v12) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  swift_retain();
LABEL_18:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sparse_commit(v10);
  return (sparse_m_double *)v9;
}

uint64_t type metadata accessor for MASparseMatrix()
{
  return self;
}

unint64_t sub_1D16E5F04()
{
  unint64_t result = qword_1EA652CC0;
  if (!qword_1EA652CC0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA652CB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA652CC0);
  }
  return result;
}

uint64_t sub_1D16E5F60()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

unint64_t sub_1D16E5F74()
{
  unint64_t result = qword_1EA652CC8;
  if (!qword_1EA652CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA652CC8);
  }
  return result;
}

void sub_1D16E5FC8(sparse_index *a1@<X1>, double *a2@<X8>)
{
  *a2 = MASparseMatrix.subscript.getter(*a1, a1[1]);
}

uint64_t sub_1D16E5FF8(double *a1, uint64_t a2, sparse_index *a3)
{
  return sparse_insert_entry_double(*(sparse_matrix_double *)(*(void *)a2 + 40), *a1, *a3, a3[1]);
}

uint64_t sub_1D16E6010()
{
  return 0;
}

uint64_t method lookup function for MASparseMatrix(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MASparseMatrix);
}

unsigned char *storeEnumTagSinglePayload for MASparseMatrixKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D16E6104);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MASparseMatrixKind()
{
  return &type metadata for MASparseMatrixKind;
}

uint64_t sub_1D16E613C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a4 * a5;
  if ((unsigned __int128)(a4 * (__int128)a5) >> 64 != (a4 * a5) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v12 = (void *)result;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  uint64_t v14 = (void *)(v13 + 16);
  sparse_dimension v15 = (void *)swift_allocObject();
  v15[2] = v13;
  int64_t v15[3] = v6;
  v15[4] = a4;
  v15[5] = a5;
  v15[6] = a6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E98);
  unint64_t result = swift_allocObject();
  uint64_t v16 = 0;
  *(void *)(result + 16) = sub_1D1698260;
  *(void *)(result + 24) = v15;
  if (!a2 || !a3)
  {
LABEL_15:
    *unint64_t v12 = result;
    return v16;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (v6)
    {
      unint64_t v17 = 0;
      uint64_t v16 = 0;
      while (!__OFADD__(v17, 1))
      {
        uint64_t v18 = v15[6];
        void *v14 = v17 + 1;
        if ((v17 & 0x8000000000000000) != 0) {
          goto LABEL_17;
        }
        if (v17 >= *(void *)(v18 + 16)) {
          goto LABEL_18;
        }
        *(void *)(a2 + 8 * v16) = *(void *)(v18 + 8 * v17 + 32);
        if (a3 - 1 == v16)
        {
          uint64_t v16 = a3;
          goto LABEL_15;
        }
        uint64_t v19 = v15[2];
        unint64_t v20 = *(void *)(v19 + 16);
        uint64_t v14 = (void *)(v19 + 16);
        unint64_t v17 = v20;
        ++v16;
        if (v20 == v15[3]) {
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    uint64_t v16 = 0;
    goto LABEL_15;
  }
LABEL_20:
  __break(1u);
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.init(repeating:rows:columns:)(Swift::Double repeating, Swift::Int rows, Swift::Int columns)
{
  unsigned int v4 = v3;
  unint64_t v5 = rows * columns;
  if ((unsigned __int128)(rows * (__int128)columns) >> 64 != (rows * columns) >> 63)
  {
    __break(1u);
    goto LABEL_14;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_14:
    Swift::Int v8 = sub_1D17BEA30();
    __break(1u);
    goto LABEL_15;
  }
  if (v5)
  {
    Swift::Int v8 = sub_1D17BE1C0();
    *(void *)(v8 + 16) = v5;
    uint64_t v10 = (Swift::Double *)(v8 + 32);
    if (v5 >= 4)
    {
      unint64_t v11 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v10 += v5 & 0xFFFFFFFFFFFFFFFCLL;
      Swift::Double v12 = repeating;
      int64x2_t v13 = vdupq_lane_s64(*(uint64_t *)&repeating, 0);
      uint64_t v14 = (int64x2_t *)(v8 + 48);
      unint64_t v15 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v13;
        int64x2_t *v14 = v13;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v5 == v11) {
        goto LABEL_12;
      }
    }
    else
    {
      unint64_t v11 = 0;
      Swift::Double v12 = repeating;
    }
    unint64_t v16 = v5 - v11;
    do
    {
      *v10++ = v12;
      --v16;
    }
    while (v16);
  }
  else
  {
    Swift::Int v8 = MEMORY[0x1E4FBC860];
  }
LABEL_12:
  *unsigned int v4 = rows;
  v4[1] = columns;
  uint64_t v4[2] = v8;
LABEL_15:
  result.elements._rawValue = v9;
  result.columns = columns;
  result.rows = v8;
  return result;
}

Swift::Void __swiftcall MAMatrix.setDiag(vector:)(KnowledgeGraphKit::MAMatrix vector)
{
  uint64_t v3 = *(void *)vector.rows;
  uint64_t v4 = *(void *)(vector.rows + 8);
  if (v4 != 1 && v3 != 1) {
    goto LABEL_24;
  }
  uint64_t v6 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*v1 != v6 || *v1 != v1[1]) {
    goto LABEL_18;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v6 > 0x7FFFFFFF)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    sparse_dimension v2 = sub_1D1667604(v2);
    if (!__OFADD__(v6, 1)) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  sparse_dimension v2 = (void *)v1[2];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_21;
  }
  if (!__OFADD__(v6, 1))
  {
LABEL_16:
    cblas_dcopy_NEWLAPACK();
    v1[2] = v2;
    return;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
}

Swift::Void __swiftcall MAMatrix.normalize(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  vDSP_Length v2 = v1[2];
  if (*(unsigned char *)axe == 1)
  {
    long long v4 = *(_OWORD *)v1;
    vDSP_Length v5 = v2;
    char v3 = 1;
  }
  else
  {
    long long v4 = *(_OWORD *)v1;
    vDSP_Length v5 = v2;
    char v3 = 0;
  }
  MAMatrix.sum(axe:)((KnowledgeGraphKit::MAMatrixAxes)&v3);
  /= infix(_:_:)(v1, (uint64_t)&v6);
  swift_bridgeObjectRelease();
}

uint64_t <*> infix(_:_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = a1[1];
  if (v7 == *a2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a2[1];
    if ((unsigned __int128)(*a1 * (__int128)v4) >> 64 == (*a1 * v4) >> 63)
    {
      vDSP_Length v5 = (void *)sub_1D1665914(*a1 * v4, 0.0);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_13:
  uint64_t result = (uint64_t)sub_1D1667604(v5);
  vDSP_Length v5 = (void *)result;
LABEL_4:
  if (v3 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v4 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v7 < (uint64_t)0xFFFFFFFF80000000 || v3 < (uint64_t)0xFFFFFFFF80000000 || v4 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_16;
  }
  if (v7 <= 0x7FFFFFFF)
  {
    uint64_t result = cblas_dgemm_NEWLAPACK();
    *a3 = v3;
    a3[1] = v4;
    a3[2] = (uint64_t)v5;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

Swift::Void __swiftcall MAMatrix.inflate(power:axe:)(Swift::Double power, KnowledgeGraphKit::MAMatrixAxes axe)
{
  char v4 = *(unsigned char *)axe;
  vDSP_Length v5 = (void *)v2[2];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v2[2] = (uint64_t)v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    vDSP_Length v5 = sub_1D1667604(v5);
    v2[2] = (uint64_t)v5;
  }
  uint64_t v7 = (double *)v5[2];
  v8[0] = (double *)(v5 + 4);
  v8[1] = v7;
  sub_1D16F19B4(v8, v2, power);
  v2[2] = (uint64_t)v5;
  LOBYTE(v8[0]) = v4;
  MAMatrix.normalize(axe:)((KnowledgeGraphKit::MAMatrixAxes)v8);
}

Swift::Double __swiftcall MAMatrix.euclideanDistance(matrix:axe:)(KnowledgeGraphKit::MAMatrix matrix, KnowledgeGraphKit::MAMatrixAxes axe)
{
  int64x2_t v3 = *(int64x2_t *)matrix.rows;
  int64x2_t v4 = vdupq_n_s64(1uLL);
  if (vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*v2, v4), (int32x4_t)vceqq_s64(*(int64x2_t *)matrix.rows, v4)))))goto LABEL_39; {
  int32x2_t v5 = vmovn_s64(vceqq_s64(*v2, v3));
  }
  if ((v5.i8[4] & 1) == 0 || (v5.i8[0] & 1) == 0) {
    goto LABEL_39;
  }
  long long v6 = *(_OWORD *)matrix.rows;
  if (!*(unsigned char *)matrix.columns)
  {
    if ((v3.i64[0] & 0x8000000000000000) == 0)
    {
      if (v3.i64[0])
      {
        uint64_t v13 = 0;
        double v7 = 0.0;
        while ((*((void *)&v6 + 1) & 0x8000000000000000) == 0)
        {
          swift_bridgeObjectRetain();
          if (*((void *)&v6 + 1))
          {
            uint64_t v16 = sub_1D17BE1C0();
            *(void *)(v16 + 16) = *((void *)&v6 + 1);
            bzero((void *)(v16 + 32), 8 * *((void *)&v6 + 1));
            if (*((uint64_t *)&v6 + 1) > 0x7FFFFFFF)
            {
              __break(1u);
LABEL_33:
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
              goto LABEL_36;
            }
          }
          else
          {
            uint64_t v16 = MEMORY[0x1E4FBC860];
          }
          if ((unsigned __int128)(v13 * (__int128)*((uint64_t *)&v6 + 1)) >> 64 != (v13 * *((void *)&v6 + 1)) >> 63) {
            goto LABEL_35;
          }
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          int64_t v22 = 1;
          uint64_t v23 = *((void *)&v6 + 1);
          uint64_t v24 = v16;
          swift_bridgeObjectRetain();
          if (*((void *)&v6 + 1))
          {
            uint64_t v14 = sub_1D17BE1C0();
            *(void *)(v14 + 16) = *((void *)&v6 + 1);
            bzero((void *)(v14 + 32), 8 * *((void *)&v6 + 1));
          }
          else
          {
            uint64_t v14 = MEMORY[0x1E4FBC860];
          }
          ++v13;
          cblas_dcopy_NEWLAPACK();
          swift_bridgeObjectRelease();
          uint64_t v19 = 1;
          uint64_t v20 = *((void *)&v6 + 1);
          uint64_t v21 = v14;
          double v15 = sub_1D16F4588(&v22, &v19);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          double v7 = v7 + v15;
          if ((void)v6 == v13) {
            return sqrt(v7);
          }
        }
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    sub_1D17BEA30();
    __break(1u);
LABEL_39:
    sub_1D17BEA40();
    __break(1u);
    return result;
  }
  if (v3.i64[1] < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v3.i64[1])
  {
    double v7 = 0.0;
    uint64_t v8 = 32;
    unint64_t v18 = (unint64_t)v3.i64[1] >> 31;
    uint64_t v9 = *(void *)(matrix.rows + 8);
    while ((v6 & 0x8000000000000000) == 0)
    {
      swift_bridgeObjectRetain();
      if ((void)v6)
      {
        uint64_t v12 = sub_1D17BE1C0();
        *(void *)(v12 + 16) = v6;
        bzero((void *)(v12 + 32), 8 * v6);
        if ((uint64_t)v6 > 0x7FFFFFFF) {
          goto LABEL_33;
        }
        if (v18) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v12 = MEMORY[0x1E4FBC860];
        if (v18) {
          goto LABEL_34;
        }
      }
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      int64_t v22 = v6;
      uint64_t v23 = 1;
      uint64_t v24 = v12;
      swift_bridgeObjectRetain();
      if ((void)v6)
      {
        uint64_t v10 = sub_1D17BE1C0();
        *(void *)(v10 + 16) = v6;
        bzero((void *)(v10 + 32), 8 * v6);
      }
      else
      {
        uint64_t v10 = MEMORY[0x1E4FBC860];
      }
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      uint64_t v19 = v6;
      uint64_t v20 = 1;
      uint64_t v21 = v10;
      double v11 = sub_1D16F4588(&v22, &v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      double v7 = v7 + v11;
      v8 += 8;
      if (!--v9) {
        return sqrt(v7);
      }
    }
    goto LABEL_38;
  }
LABEL_31:
  double v7 = 0.0;
  return sqrt(v7);
}

uint64_t MAMatrix.subscript.getter(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = result * v3;
  if ((unsigned __int128)(result * (__int128)v3) >> 64 != (result * v3) >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }
  BOOL v5 = __OFADD__(v4, a2);
  unint64_t v6 = v4 + a2;
  if (v5)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v6 >= *(void *)(*(void *)(v2 + 16) + 16)) {
LABEL_9:
  }
    __break(1u);
  return result;
}

uint64_t MAMatrix.subscript.setter(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = *(void *)(v4 + 8);
  uint64_t v8 = a1 * v7;
  if ((unsigned __int128)(a1 * (__int128)v7) >> 64 != (a1 * v7) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v5 = v8 + a2;
  if (__OFADD__(v8, a2))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  double v6 = a3;
  uint64_t v3 = *(void **)(v4 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = (uint64_t)sub_1D1667604(v3);
  uint64_t v3 = (void *)result;
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if (v5 < v3[2])
  {
    *(double *)&v3[v5 + 4] = v6;
    *(void *)(v4 + 16) = v3;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t MAMatrix.subscript.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int64_t v5 = *(void *)(v2 + 8);
  double v6 = (void *)sub_1D1665914(v5, 0.0);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1D1667604(v6);
    double v6 = (void *)result;
  }
  if (v5 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v5 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((unsigned __int128)(a1 * (__int128)v5) >> 64 == (a1 * v5) >> 63)
  {
    uint64_t result = cblas_dcopy_NEWLAPACK();
    *a2 = 1;
    a2[1] = v5;
    a2[2] = v6;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  double v6 = *(void *)(v2 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  if ((unsigned __int128)(v7 * (__int128)v6) >> 64 != (v7 * v6) >> 63) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)(v2 + 16);
  uint64_t v3 = (void *)sub_1D1665914(v7 * v6, 0.0);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_15;
  }
  if (v7)
  {
    while (v6 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v6 > 0x7FFFFFFF) {
        goto LABEL_18;
      }
      v2 += 32;
      swift_bridgeObjectRetain();
      uint64_t v9 = 0;
      while ((unsigned __int128)(*(uint64_t *)(a1 + 8 * v9 + 32) * (__int128)v6) >> 64 == (*(void *)(a1 + 8 * v9 + 32)
                                                                                         * v6) >> 63)
      {
        if ((unsigned __int128)(v9 * (__int128)v6) >> 64 != (v9 * v6) >> 63) {
          goto LABEL_13;
        }
        ++v9;
        cblas_dcopy_NEWLAPACK();
        if (v7 == v9)
        {
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      uint64_t result = (uint64_t)sub_1D1667604(v3);
      uint64_t v3 = (void *)result;
      if (!v7) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
LABEL_11:
    *a2 = v7;
    a2[1] = v6;
    a2[2] = v3;
  }
  return result;
}

uint64_t MAMatrix.subscript.setter(void *a1, uint64_t a2)
{
  if (*a1 == 1)
  {
    uint64_t v3 = a1[1];
    if (v3 == *(void *)(v2 + 8))
    {
      uint64_t v5 = a2;
      uint64_t v4 = *(void **)(v2 + 16);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v2 + 16) = v4;
      if (result) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_12:
  uint64_t result = (uint64_t)sub_1D1667604(v4);
  uint64_t v4 = (void *)result;
  *(void *)(v2 + 16) = result;
LABEL_4:
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((unsigned __int128)(v5 * (__int128)v3) >> 64 != (v5 * v3) >> 63)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  cblas_dcopy_NEWLAPACK();
  *(void *)(v2 + 16) = v4;
  return swift_bridgeObjectRelease();
}

uint64_t MAMatrix.subscript.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = (void *)sub_1D1665914(*v1, 0.0);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1D1667604(v5);
    uint64_t v5 = (void *)result;
  }
  if (v4 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 < (uint64_t)0xFFFFFFFF80000000 || v3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_11;
  }
  if (v3 <= 0x7FFFFFFF)
  {
    uint64_t result = cblas_dcopy_NEWLAPACK();
    *a1 = v4;
    a1[1] = 1;
    a1[2] = (uint64_t)v5;
    return result;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t MAMatrix.subscript.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  if (a1[1] == 1 && v5 == *v2)
  {
    uint64_t v3 = v2[1];
    if (v3 > a2)
    {
      uint64_t v4 = (void *)v2[2];
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      v2[2] = v4;
      if (result) {
        goto LABEL_8;
      }
      goto LABEL_16;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_16:
  uint64_t result = (uint64_t)sub_1D1667604(v4);
  uint64_t v4 = (void *)result;
  v2[2] = result;
LABEL_8:
  if (v5 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v5 < (uint64_t)0xFFFFFFFF80000000 || v3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_18;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  cblas_dcopy_NEWLAPACK();
  v2[2] = v4;
  return swift_bridgeObjectRelease();
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.transpose()()
{
  uint64_t v3 = v0;
  vDSP_Length v5 = *v1;
  int64_t v4 = v1[1];
  int64_t v6 = v4 * *v1;
  if ((unsigned __int128)(v4 * (__int128)*v1) >> 64 != v6 >> 63)
  {
    __break(1u);
LABEL_7:
    uint64_t v2 = (uint64_t)sub_1D1667604((void *)v2);
    if (v4 < 0) {
      goto LABEL_8;
    }
    goto LABEL_4;
  }
  uint64_t v1 = (uint64_t *)v1[2];
  uint64_t v2 = sub_1D1665914(v6, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_7;
  }
  if (v4 < 0)
  {
LABEL_8:
    Swift::Int v7 = sub_1D17BEA30();
    __break(1u);
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_8;
  }
  vDSP_mtransD((const double *)v1 + 4, 1, (double *)(v2 + 32), 1, v4, v5);
  *uint64_t v3 = v4;
  v3[1] = v5;
  v3[2] = v2;
LABEL_9:
  result.elements._rawValue = v9;
  result.columns = v8;
  result.rows = v7;
  return result;
}

uint64_t MAMatrix.subscript.setter(unint64_t a1, double a2)
{
  vDSP_Length v5 = *(void **)(v2 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((a1 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)sub_1D1667604(v5);
  vDSP_Length v5 = (void *)result;
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v5[2] > a1)
  {
    *(double *)&v5[a1 + 4] = a2;
    *(void *)(v2 + 16) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void += infix(_:_:)(vDSP_Length *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int64_t v4 = *(double **)a2;
  vDSP_Stride v3 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int64_t v6 = a1[1];
  if (v6 == v3)
  {
    if (v4 == (double *)1)
    {
      int64_t v6 = a1[2];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      a1[2] = v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_40;
      }
      while ((v3 & 0x8000000000000000) == 0)
      {
        if (!v3) {
          goto LABEL_11;
        }
        unint64_t v8 = 0;
        int64_t v4 = (double *)(v6 + 32);
        vDSP_Length v9 = *a1;
        while (v3 != v8)
        {
          if (v8 >= *(void *)(v5 + 16)) {
            goto LABEL_37;
          }
          double __B = *(double *)(v5 + 32 + 8 * v8);
          if ((v9 & 0x8000000000000000) != 0)
          {
LABEL_44:
            sub_1D17BEA30();
            __break(1u);
            goto LABEL_45;
          }
          ++v8;
          vDSP_vsaddD(v4, v3, &__B, v4, v3, v9);
          ++v4;
          if (v3 == v8)
          {
LABEL_11:
            a1[2] = v6;
            return;
          }
        }
        while (1)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          vDSP_Stride v3 = (vDSP_Stride)sub_1D1667604((void *)v3);
          a1[2] = v3;
          if (((unint64_t)v4 & 0x8000000000000000) != 0) {
            break;
          }
LABEL_19:
          if (!v4) {
            goto LABEL_31;
          }
          uint64_t v12 = 0;
          while (v4 != (double *)v12)
          {
            if ((unint64_t)v12 >= *(void *)(v5 + 16)) {
              goto LABEL_34;
            }
            double __B = *(double *)(v5 + 32 + 8 * v12);
            int64_t v13 = v12 * v6;
            if ((unsigned __int128)(v12 * (__int128)v6) >> 64 != (v12 * v6) >> 63) {
              goto LABEL_35;
            }
            if (v6 < 0) {
              goto LABEL_44;
            }
            ++v12;
            vDSP_vsaddD((const double *)(v3 + 32 + 8 * v13), 1, &__B, (double *)(v3 + 32 + 8 * v13), 1, v6);
            if (v4 == (double *)v12) {
              goto LABEL_31;
            }
          }
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
        }
LABEL_39:
        __break(1u);
LABEL_40:
        int64_t v6 = (int64_t)sub_1D1667604((void *)v6);
        a1[2] = v6;
      }
      __break(1u);
    }
    else
    {
      if ((double *)*a1 != v4) {
        goto LABEL_45;
      }
      vDSP_Stride v3 = a1[2];
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_29;
      }
    }
    vDSP_Stride v3 = (vDSP_Stride)sub_1D1667604((void *)v3);
LABEL_29:
    if (*(void *)(v5 + 16) >> 31) {
      __break(1u);
    }
    cblas_daxpy_NEWLAPACK();
LABEL_31:
    a1[2] = v3;
    return;
  }
  if (v3 == 1 && *a1 == (void)v4)
  {
    vDSP_Stride v3 = a1[2];
    char v11 = swift_isUniquelyReferenced_nonNull_native();
    a1[2] = v3;
    if ((v11 & 1) == 0) {
      goto LABEL_38;
    }
    if (((unint64_t)v4 & 0x8000000000000000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_19;
  }
LABEL_45:
  double __B = 0.0;
  unint64_t v15 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1D17BE850();
  swift_bridgeObjectRelease();
  double __B = 7.22937896e159;
  unint64_t v15 = 0xEB00000000206464;
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEA40();
  __break(1u);
}

unint64_t /= infix(_:_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int64_t v4 = (void *)a1[2];
  swift_bridgeObjectRetain();
  uint64_t v5 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_1D1667604(v4);
  }
  unint64_t result = v4[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    unint64_t result = swift_bridgeObjectRelease();
    *a1 = v2;
    a1[1] = v3;
    a1[2] = (uint64_t)v5;
  }
  return result;
}

uint64_t sub_1D16E759C(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_1D16E7620(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1D16FA2D8(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_1D16F8E00(v5);
  *a1 = v2;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.init(_:axe:)(Swift::OpaquePointer _, KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t v3 = *((void *)_._rawValue + 2);
  if (*(unsigned char *)axe) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = *((void *)_._rawValue + 2);
  }
  if (!*(unsigned char *)axe) {
    uint64_t v3 = 1;
  }
  v2->_rawValue = (void *)v3;
  v2[1]._rawValue = (void *)v4;
  v2[2]._rawValue = _._rawValue;
  result.rows = (Swift::Int)_._rawValue;
  LOBYTE(result.columns) = axe;
  return result;
}

Swift::tuple_mean_Double_deviation_Double __swiftcall MAMatrix.sstddev()()
{
  v15[2] = *(double **)MEMORY[0x1E4F143B8];
  uint64_t v4 = *v0;
  uint64_t v5 = v0[1];
  uint64_t v6 = (double *)v0[2];
  __C[0] = 0;
  uint64_t v7 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
    __break(1u);
LABEL_8:
    uint64_t v6 = (double *)sub_1D1667604(v6);
    goto LABEL_4;
  }
  if (v7 < 0)
  {
    sub_1D17BEA30();
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v1 = v6 + 4;
  vDSP_meanvD(v6 + 4, 1, (double *)__C, v4 * v5);
  uint64_t v2 = __C[0];
  double v3 = -*(double *)__C;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  *(double *)__C = v3;
  vDSP_vsaddD(v1, 1, (const double *)__C, v6 + 4, 1, v4 * v5);
  __C[0] = v4;
  __C[1] = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v6 = (double *)sub_1D1667604(v6);
    uint64_t v14 = v6;
  }
  vDSP_Length v9 = (double *)*((void *)v6 + 2);
  v15[0] = v6 + 4;
  v15[1] = v9;
  sub_1D16F19B4(v15, __C, 2.0);
  v15[0] = 0;
  vDSP_sveD(v6 + 4, 1, (double *)v15, v4 * v5);
  swift_bridgeObjectRelease();
  double v10 = sqrt(*(double *)v15 / (double)(v7 - 1));
  double v11 = *(double *)&v2;
LABEL_10:
  result.deviation = v10;
  result.mean = v11;
  return result;
}

uint64_t MAMatrix.count.getter()
{
  uint64_t v1 = v0[1];
  uint64_t result = *v0 * v1;
  if ((unsigned __int128)(*v0 * (__int128)v1) >> 64 != result >> 63) {
    __break(1u);
  }
  return result;
}

unint64_t MAMatrix.subscript.getter(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(void *)(*(void *)(v1 + 16) + 16) <= result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.diag()()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  if (v3 != 1 && v4 != 1)
  {
    if (v4 == v3)
    {
      uint64_t v1 = (unint64_t *)sub_1D1665914(*v1, 0.0);
      Swift::Int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_14;
      }
      goto LABEL_25;
    }
LABEL_24:
    __break(1u);
LABEL_25:
    Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1D1667604(v1);
    uint64_t v1 = (unint64_t *)isUniquelyReferenced_nonNull_native;
LABEL_14:
    if (v4 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v4 <= 0x7FFFFFFF)
    {
      unint64_t v8 = (v4 + 1);
      if (!__OFADD__(v4, 1))
      {
        uint64_t v3 = 1;
        Swift::Int isUniquelyReferenced_nonNull_native = cblas_dcopy_NEWLAPACK();
        goto LABEL_18;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    __break(1u);
    goto LABEL_28;
  }
  if ((unsigned __int128)(v3 * (__int128)v3) >> 64 == (v3 * v3) >> 63)
  {
    uint64_t v1 = (unint64_t *)sub_1D1665914(v3 * v3, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v1 = sub_1D1667604(v1);
LABEL_8:
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__OFADD__(v3, 1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  Swift::Int isUniquelyReferenced_nonNull_native = cblas_dcopy_NEWLAPACK();
  uint64_t v4 = v3;
LABEL_18:
  *uint64_t v2 = v3;
  v2[1] = v4;
  v2[2] = (uint64_t)v1;
LABEL_29:
  result.elements._rawValue = (void *)v8;
  result.columns = v7;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

void * infix(_:_:)(int64_t *a1@<X0>, vDSP_Length *a2@<X1>, int64_t *a3@<X8>)
{
  __B[2] = *(double *)MEMORY[0x1E4F143B8];
  int64_t v5 = *a1;
  int64_t v4 = a1[1];
  int64_t v6 = a1[2];
  vDSP_Length v8 = *a2;
  uint64_t v7 = a2[1];
  vDSP_Length v9 = a2[2];
  if (v4 != v7)
  {
    if (v5 == v8 && v7 == 1)
    {
      if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63) {
        goto LABEL_40;
      }
      uint64_t v7 = sub_1D1665914(v5 * v4, 0.0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_41;
      }
      if (v5 < 0) {
        goto LABEL_42;
      }
      goto LABEL_21;
    }
    goto LABEL_49;
  }
  if (v8 == 1)
  {
    if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63) {
      goto LABEL_43;
    }
    uint64_t v7 = sub_1D1665914(v5 * v4, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_45;
    }
    while ((v4 & 0x8000000000000000) == 0)
    {
      if (!v4) {
        goto LABEL_34;
      }
      vDSP_Length v8 = 0;
      uint64_t v10 = 32;
      while (v4 != v8)
      {
        if (v8 >= *(void *)(v9 + 16)) {
          goto LABEL_39;
        }
        __B[0] = *(double *)(v9 + 32 + 8 * v8);
        if (v5 < 0) {
          goto LABEL_48;
        }
        ++v8;
        vDSP_vsmulD((const double *)(v6 + v10), v4, __B, (double *)(v7 + v10), v4, v5);
        v10 += 8;
        if (v4 == v8) {
          goto LABEL_34;
        }
      }
      while (1)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        uint64_t v7 = (uint64_t)sub_1D1667604((void *)v7);
        if (v5 < 0) {
          break;
        }
LABEL_21:
        if (!v5) {
          goto LABEL_34;
        }
        vDSP_Length v8 = 0;
        v6 += 32;
        while (v5 != v8)
        {
          if (v8 >= *(void *)(v9 + 16)) {
            goto LABEL_36;
          }
          __B[0] = *(double *)(v9 + 32 + 8 * v8);
          vDSP_Length v12 = v8 * v4;
          if ((unsigned __int128)((uint64_t)v8 * (__int128)v4) >> 64 != (uint64_t)(v8 * v4) >> 63) {
            goto LABEL_37;
          }
          if (v4 < 0) {
            goto LABEL_48;
          }
          ++v8;
          vDSP_vsmulD((const double *)(v6 + 8 * v12), 1, __B, (double *)(v7 + 32 + 8 * v12), 1, v4);
          if (v5 == v8) {
            goto LABEL_34;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
      }
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      uint64_t v7 = (uint64_t)sub_1D1667604((void *)v7);
    }
    __break(1u);
LABEL_47:
    uint64_t v7 = (uint64_t)sub_1D1667604((void *)v7);
    if ((v8 & 0x8000000000000000) != 0)
    {
LABEL_48:
      sub_1D17BEA30();
      __break(1u);
    }
    goto LABEL_33;
  }
  if (v5 != v8)
  {
LABEL_49:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D17BE850();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEA40();
    __break(1u);
    return;
  }
  vDSP_Length v8 = v5 * v4;
  if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63) {
    goto LABEL_44;
  }
  uint64_t v7 = sub_1D1665914(v5 * v4, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_47;
  }
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_48;
  }
LABEL_33:
  vDSP_vmulD((const double *)(v9 + 32), 1, (const double *)(v6 + 32), 1, (double *)(v7 + 32), 1, v8);
LABEL_34:
  *a3 = v5;
  a3[1] = v4;
  a3[2] = v7;
}

unint64_t * infix(_:_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  int64_t v5 = (void *)a1[2];
  swift_bridgeObjectRetain();
  int64_t v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v6 = sub_1D1667604(v5);
  }
  unint64_t result = v5[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = cblas_dscal_NEWLAPACK();
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v6;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unint64_t result;

  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  int64_t v5 = (void *)a1[2];
  swift_bridgeObjectRetain();
  int64_t v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v6 = sub_1D1667604(v5);
  }
  unint64_t result = v5[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = cblas_dscal_NEWLAPACK();
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v6;
  }
  return result;
}

unint64_t / infix(_:_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  int64_t v5 = (void *)a1[2];
  swift_bridgeObjectRetain();
  int64_t v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v6 = sub_1D1667604(v5);
  }
  unint64_t result = v5[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = cblas_dscal_NEWLAPACK();
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v6;
  }
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.max(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t v2 = (void (*)(unint64_t, uint64_t, void *, uint64_t *, uint64_t))MEMORY[0x1E4F16988];
  Swift::Int v3 = sub_1D16F03B8((unsigned char *)axe, v2, v1);
  result.elements._rawValue = v5;
  result.columns = v4;
  result.rows = v3;
  return result;
}

void / infix(_:_:)(int64_t *a1@<X0>, vDSP_Length *a2@<X1>, int64_t *a3@<X8>)
{
  __B[2] = *(double *)MEMORY[0x1E4F143B8];
  int64_t v5 = *a1;
  int64_t v4 = a1[1];
  int64_t v6 = a1[2];
  vDSP_Length v8 = *a2;
  uint64_t v7 = a2[1];
  vDSP_Length v9 = a2[2];
  if (v4 != v7)
  {
    if (v5 == v8 && v7 == 1)
    {
      if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63) {
        goto LABEL_40;
      }
      uint64_t v7 = sub_1D1665914(v5 * v4, 0.0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_41;
      }
      if (v5 < 0) {
        goto LABEL_42;
      }
      goto LABEL_21;
    }
    goto LABEL_49;
  }
  if (v8 == 1)
  {
    if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63) {
      goto LABEL_43;
    }
    uint64_t v7 = sub_1D1665914(v5 * v4, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_45;
    }
    while ((v4 & 0x8000000000000000) == 0)
    {
      if (!v4) {
        goto LABEL_34;
      }
      vDSP_Length v8 = 0;
      uint64_t v10 = 32;
      while (v4 != v8)
      {
        if (v8 >= *(void *)(v9 + 16)) {
          goto LABEL_39;
        }
        __B[0] = *(double *)(v9 + 32 + 8 * v8);
        if (v5 < 0) {
          goto LABEL_48;
        }
        ++v8;
        vDSP_vsdivD((const double *)(v6 + v10), v4, __B, (double *)(v7 + v10), v4, v5);
        v10 += 8;
        if (v4 == v8) {
          goto LABEL_34;
        }
      }
      while (1)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        uint64_t v7 = (uint64_t)sub_1D1667604((void *)v7);
        if (v5 < 0) {
          break;
        }
LABEL_21:
        if (!v5) {
          goto LABEL_34;
        }
        vDSP_Length v8 = 0;
        v6 += 32;
        while (v5 != v8)
        {
          if (v8 >= *(void *)(v9 + 16)) {
            goto LABEL_36;
          }
          __B[0] = *(double *)(v9 + 32 + 8 * v8);
          vDSP_Length v12 = v8 * v4;
          if ((unsigned __int128)((uint64_t)v8 * (__int128)v4) >> 64 != (uint64_t)(v8 * v4) >> 63) {
            goto LABEL_37;
          }
          if (v4 < 0) {
            goto LABEL_48;
          }
          ++v8;
          vDSP_vsdivD((const double *)(v6 + 8 * v12), 1, __B, (double *)(v7 + 32 + 8 * v12), 1, v4);
          if (v5 == v8) {
            goto LABEL_34;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
      }
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      uint64_t v7 = (uint64_t)sub_1D1667604((void *)v7);
    }
    __break(1u);
LABEL_47:
    uint64_t v7 = (uint64_t)sub_1D1667604((void *)v7);
    if ((v8 & 0x8000000000000000) != 0)
    {
LABEL_48:
      sub_1D17BEA30();
      __break(1u);
    }
    goto LABEL_33;
  }
  if (v5 != v8)
  {
LABEL_49:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D17BE850();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEA40();
    __break(1u);
    return;
  }
  vDSP_Length v8 = v5 * v4;
  if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63) {
    goto LABEL_44;
  }
  uint64_t v7 = sub_1D1665914(v5 * v4, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_47;
  }
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_48;
  }
LABEL_33:
  vDSP_vdivD((const double *)(v9 + 32), 1, (const double *)(v6 + 32), 1, (double *)(v7 + 32), 1, v8);
LABEL_34:
  *a3 = v5;
  a3[1] = v4;
  a3[2] = v7;
}

void - infix(_:_:)(int64_t *a1@<X0>, uint64_t *a2@<X1>, int64_t *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int64_t v5 = *a1;
  int64_t v4 = a1[1];
  int64_t v6 = (void *)a1[2];
  uint64_t v8 = *a2;
  uint64_t v7 = (void *)a2[1];
  uint64_t v9 = a2[2];
  if ((void *)v4 != v7)
  {
    if (v5 == v8 && v7 == (void *)1)
    {
      if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63) {
        goto LABEL_39;
      }
      uint64_t v7 = (void *)sub_1D1665914(v5 * v4, 0.0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_40;
      }
      if (v5 < 0) {
        goto LABEL_41;
      }
      goto LABEL_21;
    }
    goto LABEL_48;
  }
  if (v8 != 1)
  {
    if (v5 == v8)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_43;
      }
      goto LABEL_31;
    }
    goto LABEL_48;
  }
  if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63) {
    goto LABEL_42;
  }
  uint64_t v7 = (void *)sub_1D1665914(v5 * v4, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_45;
  }
  if (v4 < 0) {
LABEL_46:
  }
    __break(1u);
LABEL_6:
  if (!v4) {
    goto LABEL_28;
  }
  unint64_t v10 = 0;
  uint64_t v11 = 4;
  while (1)
  {
    if (v4 == v10) {
      goto LABEL_37;
    }
    if (v10 >= *(void *)(v9 + 16))
    {
      while (1)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        uint64_t v7 = sub_1D1667604(v7);
        if (v5 < 0)
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          int64_t v6 = sub_1D1667604(v6);
LABEL_31:
          if (!(*(void *)(v9 + 16) >> 31))
          {
            cblas_daxpy_NEWLAPACK();
            goto LABEL_33;
          }
          __break(1u);
LABEL_45:
          uint64_t v7 = sub_1D1667604(v7);
          if (v4 < 0) {
            goto LABEL_46;
          }
          goto LABEL_6;
        }
LABEL_21:
        if (!v5)
        {
LABEL_28:
          int64_t v6 = v7;
LABEL_33:
          *a3 = v5;
          a3[1] = v4;
          a3[2] = (int64_t)v6;
          return;
        }
        unint64_t v13 = 0;
        v6 += 4;
        while (v5 != v13)
        {
          if (v13 >= *(void *)(v9 + 16)) {
            goto LABEL_35;
          }
          double __B = -*(double *)(v9 + 32 + 8 * v13);
          int64_t v14 = v13 * v4;
          if ((unsigned __int128)((uint64_t)v13 * (__int128)v4) >> 64 != (uint64_t)(v13 * v4) >> 63) {
            goto LABEL_36;
          }
          if (v4 < 0) {
            goto LABEL_47;
          }
          ++v13;
          vDSP_vsaddD((const double *)&v6[v14], 1, &__B, (double *)&v7[v14 + 4], 1, v4);
          if (v5 == v13) {
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
      }
    }
    double __B = -*(double *)(v9 + 32 + 8 * v10);
    if (v5 < 0) {
      break;
    }
    ++v10;
    vDSP_vsaddD((const double *)&v6[v11], v4, &__B, (double *)&v7[v11], v4, v5);
    ++v11;
    if (v4 == v10) {
      goto LABEL_28;
    }
  }
LABEL_47:
  sub_1D17BEA30();
  __break(1u);
LABEL_48:
  double __B = 0.0;
  unint64_t v16 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D17BE850();
  swift_bridgeObjectRelease();
  double __B = -2.31584178e77;
  unint64_t v16 = 0x80000001D17D62B0;
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEA40();
  __break(1u);
}

Swift::Void __swiftcall MAMatrix.abs()()
{
  uint64_t v0 = (uint64_t (*)(void *, void *, int *))MEMORY[0x1E4F17298];
  sub_1D16F1B64(v0);
}

uint64_t MAMatrix.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v6 = *v2;
  uint64_t v7 = *(void *)(a1 + 16);
  int64_t v8 = *v2 * v7;
  if ((unsigned __int128)(*v2 * (__int128)v7) >> 64 == v8 >> 63)
  {
    uint64_t v3 = v2[1];
    int64_t v4 = (void *)sub_1D1665914(v8, 0.0);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if (v7) {
        goto LABEL_4;
      }
LABEL_12:
      *a2 = v6;
      a2[1] = v7;
      a2[2] = (uint64_t)v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (uint64_t)sub_1D1667604(v4);
  int64_t v4 = (void *)result;
  if (!v7) {
    goto LABEL_12;
  }
LABEL_4:
  if (v6 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000 || v3 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_18;
  }
  if (!((unint64_t)v7 >> 31))
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = 32;
    uint64_t v11 = v7;
    do
    {
      cblas_dcopy_NEWLAPACK();
      v10 += 8;
      --v11;
    }
    while (v11);
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_12;
  }
LABEL_19:
  __break(1u);
  return result;
}

Swift::Double __swiftcall MAMatrix.sum()()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, void *))MEMORY[0x1E4F16A48];
  sub_1D16F312C(v0);
  return result;
}

Swift::Double __swiftcall MAMatrix.mean()()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, void *))MEMORY[0x1E4F169A8];
  sub_1D16F312C(v0);
  return result;
}

Swift::Double __swiftcall MAMatrix.median()()
{
  if (!*(void *)(*(void *)(v0 + 16) + 16)) {
    return 0.0;
  }
  uint64_t v8 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  sub_1D16E759C(&v8, sub_1D16FA260, sub_1D16F8088);
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v8 + 16);
  if (v1)
  {
    unint64_t v6 = (v1 - 1) >> 1;
    if (v6 < v1)
    {
      double v5 = *(double *)(v8 + 8 * v6 + 32);
      swift_release();
      return v5;
    }
    goto LABEL_11;
  }
  if (v1 >> 1 >= v1)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v1 >= 2)
  {
    uint64_t v2 = v8 + 8 * (v1 >> 1);
    double v4 = *(double *)(v2 + 24);
    double v3 = *(double *)(v2 + 32);
    swift_release();
    return (v3 + v4) * 0.5;
  }
LABEL_12:
  __break(1u);
  swift_release();
  __break(1u);
  return result;
}

Swift::tuple_mean_Double_deviation_Double __swiftcall MAMatrix.pstddev()()
{
  __Mean[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  __Mean[0] = 0.0;
  double __StandardDeviation = 0.0;
  vDSP_Length v4 = v1 * v2;
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 != (v1 * v2) >> 63) {
    __break(1u);
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
    sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    vDSP_normalizeD((const double *)(v3 + 32), 1, 0, 1, __Mean, &__StandardDeviation, v4);
    double v5 = __Mean[0];
    double v6 = __StandardDeviation;
  }
  result.deviation = v6;
  result.mean = v5;
  return result;
}

uint64_t MAMatrix.frequencies()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1D16827AC(0, v2, 0);
    uint64_t v4 = 0;
    uint64_t v3 = v13;
    uint64_t v5 = *(void *)(v13 + 16);
    uint64_t v6 = 16 * v5;
    do
    {
      uint64_t v7 = *(void *)(v1 + 32 + 8 * v4);
      uint64_t v13 = v3;
      unint64_t v8 = *(void *)(v3 + 24);
      uint64_t v9 = v5 + v4 + 1;
      if (v5 + v4 >= v8 >> 1)
      {
        sub_1D16827AC(v8 > 1, v5 + v4 + 1, 1);
        uint64_t v3 = v13;
      }
      ++v4;
      *(void *)(v3 + 16) = v9;
      uint64_t v10 = v3 + v6;
      *(void *)(v10 + 32) = v7;
      *(void *)(v10 + 40) = 1;
      v6 += 16;
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v3 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652000);
    uint64_t v11 = sub_1D17BEB10();
  }
  else
  {
    uint64_t v11 = MEMORY[0x1E4FBC868];
  }
  uint64_t v13 = v11;
  sub_1D16FB8FC((double *)v3, 1, &v13);
  swift_bridgeObjectRelease();
  return v13;
}

Swift::tuple_value_Double_index_Int __swiftcall MAMatrix.min()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, uint64_t *))MEMORY[0x1E4F169E0];
  Swift::Int v1 = sub_1D16E90A0(v0);
  result.value = v2;
  result.index = v1;
  return result;
}

uint64_t MAMatrix.indices(of:)(double a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    uint64_t v7 = MEMORY[0x1E4FBC860];
    do
    {
      double v11 = *(double *)(v2 + 8 * v6 + 32);
      if (v11 == a1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1D16826FC(0, *(void *)(v7 + 16) + 1, 1);
        }
        unint64_t v9 = *(void *)(v7 + 16);
        unint64_t v8 = *(void *)(v7 + 24);
        if (v9 >= v8 >> 1) {
          sub_1D16826FC(v8 > 1, v9 + 1, 1);
        }
        *(void *)(v7 + 16) = v9 + 1;
        uint64_t v10 = v7 + 16 * v9;
        *(void *)(v10 + 32) = v6;
        *(double *)(v10 + 40) = v11;
      }
      ++v6;
    }
    while (v3 != v6);
    swift_bridgeObjectRelease();
    int64_t v12 = *(void *)(v7 + 16);
    if (v12) {
      goto LABEL_11;
    }
LABEL_17:
    swift_release();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v7 = MEMORY[0x1E4FBC860];
  int64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
  if (!v12) {
    goto LABEL_17;
  }
LABEL_11:
  sub_1D16826DC(0, v12, 0);
  uint64_t v13 = v4;
  unint64_t v14 = *(void *)(v4 + 16);
  uint64_t v15 = 32;
  do
  {
    uint64_t v16 = *(void *)(v7 + v15);
    unint64_t v17 = *(void *)(v13 + 24);
    if (v14 >= v17 >> 1) {
      sub_1D16826DC(v17 > 1, v14 + 1, 1);
    }
    *(void *)(v13 + 16) = v14 + 1;
    *(void *)(v13 + 8 * v14 + 32) = v16;
    v15 += 16;
    ++v14;
    --v12;
  }
  while (v12);
  swift_release();
  return v13;
}

Swift::tuple_value_Double_index_Int __swiftcall MAMatrix.max()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, uint64_t *))MEMORY[0x1E4F16988];
  Swift::Int v1 = sub_1D16E90A0(v0);
  result.value = v2;
  result.index = v1;
  return result;
}

uint64_t sub_1D16E90A0(void (*a1)(uint64_t, uint64_t, void *, uint64_t *))
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  v7[0] = 0;
  uint64_t v6 = 0;
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 * v3 < 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
    return result;
  }
  a1(v4 + 32, 1, v7, &v6);
  uint64_t result = v6;
  if (v6 < 0) {
LABEL_6:
  }
    __break(1u);
  return result;
}

uint64_t MAMatrix.size.getter()
{
  return *(void *)v0;
}

Swift::String __swiftcall MAMatrix.description(integerPrecision:doublePrecision:)(Swift::Int integerPrecision, Swift::Int doublePrecision)
{
  uint64_t v4 = *v2;
  int64_t v3 = v2[1];
  uint64_t v19 = v2[2];
  if (*v2 < 0) {
    goto LABEL_23;
  }
  if (v4)
  {
    if (v3 < 0)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = v19 + 32;
    uint64_t v17 = *v2;
    while (v6 != v4)
    {
      uint64_t v18 = v6;
      if (v3)
      {
        uint64_t v20 = MEMORY[0x1E4FBC860];
        integerPrecision = sub_1D168268C(0, v3, 0);
        if ((unsigned __int128)(v6 * (__int128)v3) >> 64 != (v6 * v3) >> 63) {
          goto LABEL_22;
        }
        uint64_t v8 = 0;
        while (1)
        {
          sub_1D17BEB70();
          sub_1D17BE030();
          swift_bridgeObjectRelease();
          sub_1D17BE030();
          sub_1D17BEB70();
          sub_1D17BE030();
          swift_bridgeObjectRelease();
          sub_1D17BE030();
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652CB0);
          integerPrecision = swift_allocObject();
          *(_OWORD *)(integerPrecision + 16) = xmmword_1D17C91F0;
          if (v5 < 0) {
            break;
          }
          if ((unint64_t)(v5 + v8) >= *(void *)(v19 + 16)) {
            goto LABEL_20;
          }
          uint64_t v9 = *(void *)(v7 + 8 * v8);
          *(void *)(integerPrecision + 56) = MEMORY[0x1E4FBB3D0];
          *(void *)(integerPrecision + 64) = MEMORY[0x1E4FBB460];
          *(void *)(integerPrecision + 32) = v9;
          uint64_t v10 = sub_1D17BE000();
          uint64_t v12 = v11;
          swift_bridgeObjectRelease();
          unint64_t v14 = *(void *)(v20 + 16);
          unint64_t v13 = *(void *)(v20 + 24);
          if (v14 >= v13 >> 1) {
            sub_1D168268C(v13 > 1, v14 + 1, 1);
          }
          ++v8;
          *(void *)(v20 + 16) = v14 + 1;
          uint64_t v15 = v20 + 16 * v14;
          *(void *)(v15 + 32) = v10;
          *(void *)(v15 + 40) = v12;
          if (v3 == v8)
          {
            uint64_t v4 = v17;
            goto LABEL_16;
          }
        }
        __break(1u);
LABEL_20:
        __break(1u);
        break;
      }
LABEL_16:
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652CB8);
      sub_1D16BCF1C((unint64_t *)&qword_1EA652CC0, &qword_1EA652CB8);
      sub_1D17BDF20();
      swift_bridgeObjectRelease();
      sub_1D17BE030();
      swift_bridgeObjectRelease();
      sub_1D17BE030();
      sub_1D17BE030();
      uint64_t v6 = v18 + 1;
      integerPrecision = swift_bridgeObjectRelease();
      v5 += v3;
      v7 += 8 * v3;
      if (v18 + 1 == v4)
      {
        integerPrecision = 0;
        doublePrecision = 0xE000000000000000;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  integerPrecision = 0;
  doublePrecision = 0xE000000000000000;
LABEL_25:
  result._object = (void *)doublePrecision;
  result._countAndFlagsBits = integerPrecision;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.mean(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  Swift::Int v1 = sub_1D16F3A7C((unsigned char *)axe, (uint64_t (*)(void, uint64_t, char *))MAMatrix.mean(range:axe:));
  result.elements._rawValue = v3;
  result.columns = v2;
  result.rows = (Swift::Int)v1;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.median(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  Swift::Int v1 = sub_1D16F3A7C((unsigned char *)axe, (uint64_t (*)(void, uint64_t, char *))MAMatrix.median(range:axe:));
  result.elements._rawValue = v3;
  result.columns = v2;
  result.rows = (Swift::Int)v1;
  return result;
}

void + infix(_:_:)(int64_t *a1@<X0>, uint64_t *a2@<X1>, int64_t *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int64_t v5 = *a1;
  int64_t v4 = a1[1];
  int64_t v6 = a1[2];
  uint64_t v8 = *a2;
  uint64_t v7 = (void *)a2[1];
  uint64_t v9 = (void *)a2[2];
  if ((void *)v4 != v7)
  {
    if (v5 == v8 && v7 == (void *)1)
    {
      if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63) {
        goto LABEL_39;
      }
      uint64_t v7 = (void *)sub_1D1665914(v5 * v4, 0.0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_40;
      }
      if (v5 < 0) {
        goto LABEL_41;
      }
      goto LABEL_21;
    }
    goto LABEL_48;
  }
  if (v8 != 1)
  {
    if (v5 == v8)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_43;
      }
      goto LABEL_31;
    }
    goto LABEL_48;
  }
  if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63) {
    goto LABEL_42;
  }
  uint64_t v7 = (void *)sub_1D1665914(v5 * v4, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_45;
  }
  if (v4 < 0) {
LABEL_46:
  }
    __break(1u);
LABEL_6:
  if (!v4) {
    goto LABEL_28;
  }
  unint64_t v10 = 0;
  uint64_t v11 = 4;
  while (1)
  {
    if (v4 == v10) {
      goto LABEL_37;
    }
    if (v10 >= v9[2])
    {
      while (1)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        uint64_t v7 = sub_1D1667604(v7);
        if (v5 < 0)
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          uint64_t v9 = sub_1D1667604(v9);
LABEL_31:
          if (!(*(void *)(v6 + 16) >> 31))
          {
            cblas_daxpy_NEWLAPACK();
            goto LABEL_33;
          }
          __break(1u);
LABEL_45:
          uint64_t v7 = sub_1D1667604(v7);
          if (v4 < 0) {
            goto LABEL_46;
          }
          goto LABEL_6;
        }
LABEL_21:
        if (!v5)
        {
LABEL_28:
          uint64_t v9 = v7;
LABEL_33:
          *a3 = v5;
          a3[1] = v4;
          a3[2] = (int64_t)v9;
          return;
        }
        unint64_t v13 = 0;
        v6 += 32;
        while (v5 != v13)
        {
          if (v13 >= v9[2]) {
            goto LABEL_35;
          }
          double __B = *(double *)&v9[v13 + 4];
          int64_t v14 = v13 * v4;
          if ((unsigned __int128)((uint64_t)v13 * (__int128)v4) >> 64 != (uint64_t)(v13 * v4) >> 63) {
            goto LABEL_36;
          }
          if (v4 < 0) {
            goto LABEL_47;
          }
          ++v13;
          vDSP_vsaddD((const double *)(v6 + 8 * v14), 1, &__B, (double *)&v7[v14 + 4], 1, v4);
          if (v5 == v13) {
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
      }
    }
    double __B = *(double *)&v9[v10 + 4];
    if (v5 < 0) {
      break;
    }
    ++v10;
    vDSP_vsaddD((const double *)(v6 + v11 * 8), v4, &__B, (double *)&v7[v11], v4, v5);
    ++v11;
    if (v4 == v10) {
      goto LABEL_28;
    }
  }
LABEL_47:
  sub_1D17BEA30();
  __break(1u);
LABEL_48:
  double __B = 0.0;
  unint64_t v16 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1D17BE850();
  swift_bridgeObjectRelease();
  double __B = 7.22937896e159;
  unint64_t v16 = 0xEB00000000206464;
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEA40();
  __break(1u);
}

void static MAMatrix.zeros(rows:columns:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 != (a1 * a2) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v4 < 0)
  {
LABEL_8:
    sub_1D17BEA30();
    __break(1u);
    return;
  }
  if (v4)
  {
    uint64_t v7 = sub_1D17BE1C0();
    *(void *)(v7 + 16) = v4;
    bzero((void *)(v7 + 32), 8 * v4);
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
  *a3 = a1;
  a3[1] = a2;
  a3[2] = v7;
}

Swift::Double __swiftcall MAMatrix.distance(row:column:distance:)(Swift::Int row, Swift::Int column, KnowledgeGraphKit::MAMatrixDistances distance)
{
  sub_1D16E9BF4(row, column, (unsigned char *)distance, (uint64_t (*)(void))MAMatrix.cosineSimilarity(row:column:), (uint64_t (*)(void))MAMatrix.euclideanDistance(row:column:), (uint64_t (*)(void))MAMatrix.manhattanDistance(row:column:));
  return result;
}

Swift::tuple_row_Int_column_Int __swiftcall MAMatrix.position(index:)(Swift::Int index)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (index == 0x8000000000000000 && v2 == -1) {
    goto LABEL_6;
  }
  Swift::Int v3 = index % v2;
  index /= v2;
LABEL_7:
  result.column = v3;
  result.row = index;
  return result;
}

Swift::Double __swiftcall MAMatrix.distance(columnA:columnB:distance:)(Swift::Int columnA, Swift::Int columnB, KnowledgeGraphKit::MAMatrixDistances distance)
{
  sub_1D16E9BF4(columnA, columnB, (unsigned char *)distance, (uint64_t (*)(void))MAMatrix.cosineSimilarity(columnA:columnB:), (uint64_t (*)(void))MAMatrix.euclideanDistance(columnA:columnB:), (uint64_t (*)(void))MAMatrix.manhattanDistance(columnA:columnB:));
  return result;
}

Swift::Double __swiftcall MAMatrix.distance(rowA:rowB:distance:)(Swift::Int rowA, Swift::Int rowB, KnowledgeGraphKit::MAMatrixDistances distance)
{
  sub_1D16E9BF4(rowA, rowB, (unsigned char *)distance, (uint64_t (*)(void))MAMatrix.cosineSimilarity(rowA:rowB:), (uint64_t (*)(void))MAMatrix.euclideanDistance(rowA:rowB:), (uint64_t (*)(void))MAMatrix.manhattanDistance(rowA:rowB:));
  return result;
}

uint64_t sub_1D16E9BF4(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  if (!*a3) {
    return a4();
  }
  if (*a3 == 1) {
    return a5();
  }
  return a6();
}

Swift::Double __swiftcall MAMatrix.asum()()
{
  sub_1D16F1F3C(MEMORY[0x1E4F167B0]);
  return result;
}

void ⋅ infix(_:_:)(uint64_t *a1, void *a2)
{
  __C[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a2[2];
  if (v3 != 1 && v2 != 1) {
    goto LABEL_12;
  }
  if (a2[1] != 1 && *a2 != 1) {
LABEL_13:
  }
    __break(1u);
  __C[0] = 0.0;
  vDSP_Length v7 = v2 * v3;
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    vDSP_dotprD((const double *)(v4 + 32), 1, (const double *)(v5 + 32), 1, __C, v7);
  }
}

uint64_t static MAMatrix.laplacian(degree:adjacency:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == *a2 && v5 == a2[1])
  {
    uint64_t v3 = a2[2];
    swift_bridgeObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v8 = (double *)v3;
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v8 = (double *)sub_1D1667604((void *)v3);
LABEL_8:
  vDSP_Length v9 = v6 * v5;
  if ((unsigned __int128)(v6 * (__int128)v5) >> 64 != (v6 * v5) >> 63)
  {
    __break(1u);
LABEL_17:
    uint64_t v8 = (double *)sub_1D1667604(v8);
LABEL_11:
    if (v5 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v5 <= 0x7FFFFFFF)
    {
      if (!__OFADD__(v5, 1))
      {
        uint64_t result = cblas_dcopy_NEWLAPACK();
        *a3 = v6;
        a3[1] = v5;
        a3[2] = v8;
        return result;
      }
      goto LABEL_20;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if ((v9 & 0x8000000000000000) == 0)
  {
    vDSP_vnegD((const double *)(v3 + 32), 1, v8 + 4, 1, v9);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_21:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t static MAMatrix.normalizedLaplacian(degree:adjacency:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a1;
  int64_t v6 = a1[1];
  if (*a1 == *a2 && v6 == a2[1])
  {
    uint64_t v3 = (void *)a1[2];
    uint64_t v4 = (void *)a2[2];
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_76;
    }
    vDSP_Length v9 = (double *)v4;
    goto LABEL_8;
  }
LABEL_75:
  __break(1u);
LABEL_76:
  vDSP_Length v9 = (double *)sub_1D1667604(v4);
LABEL_8:
  vDSP_Length v10 = v7 * v6;
  if ((unsigned __int128)(v7 * (__int128)v6) >> 64 != (v7 * v6) >> 63)
  {
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  if ((v10 & 0x8000000000000000) != 0) {
    goto LABEL_85;
  }
  vDSP_vnegD((const double *)v4 + 4, 1, v9 + 4, 1, v10);
  *(void *)&long long v52 = v7;
  *((void *)&v52 + 1) = v6;
  unint64_t v53 = v9;
  if (v7 < 0) {
    goto LABEL_78;
  }
  unint64_t v42 = a3;
  if (!v7) {
    goto LABEL_33;
  }
  a3 = v3 + 4;
  swift_bridgeObjectRetain_n();
  uint64_t v11 = 0;
  uint64_t v4 = v3;
  while (1)
  {
    int64_t v12 = v11 * v6;
    if ((unsigned __int128)(v11 * (__int128)v6) >> 64 != (v11 * v6) >> 63)
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    unint64_t v13 = v12 + v11;
    if (__OFADD__(v12, v11)) {
      goto LABEL_65;
    }
    if ((v13 & 0x8000000000000000) != 0) {
      goto LABEL_66;
    }
    if (v13 >= v3[2]) {
      goto LABEL_67;
    }
    if (v6 < 0) {
      break;
    }
    if (!v6) {
      goto LABEL_27;
    }
    uint64_t v43 = a3[v13];
    uint64_t v14 = sub_1D17BE1C0();
    *(void *)(v14 + 16) = v6;
    uint64_t v15 = (uint64_t *)(v14 + 32);
    if ((unint64_t)v6 < 4)
    {
      unint64_t v16 = 0;
      uint64_t v17 = v43;
LABEL_25:
      unint64_t v21 = v6 - v16;
      do
      {
        *v15++ = v17;
        --v21;
      }
      while (v21);
      goto LABEL_27;
    }
    v15 += v6 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v17 = v43;
    int64x2_t v18 = vdupq_lane_s64(v43, 0);
    uint64_t v19 = (int64x2_t *)(v14 + 48);
    unint64_t v20 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v19[-1] = v18;
      *uint64_t v19 = v18;
      v19 += 2;
      v20 -= 4;
    }
    while (v20);
    unint64_t v16 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if (v6 != (v6 & 0xFFFFFFFFFFFFFFFCLL)) {
      goto LABEL_25;
    }
LABEL_27:
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if (v6 > 0x7FFFFFFF) {
        goto LABEL_32;
      }
      goto LABEL_29;
    }
    uint64_t v4 = sub_1D1667604(v4);
    if (v6 > 0x7FFFFFFF)
    {
LABEL_32:
      __break(1u);
LABEL_33:
      swift_bridgeObjectRetain_n();
      uint64_t v4 = v3;
LABEL_34:
      if ((v6 & 0x8000000000000000) == 0)
      {
        if (v6)
        {
          uint64_t v22 = 0;
          uint64_t v23 = v3;
          while (1)
          {
            int64_t v24 = v22 * v6;
            if ((unsigned __int128)(v22 * (__int128)v6) >> 64 != (v22 * v6) >> 63) {
              goto LABEL_68;
            }
            BOOL v25 = __OFADD__(v24, v22);
            unint64_t v26 = v24 + v22;
            if (v25) {
              goto LABEL_69;
            }
            if ((v26 & 0x8000000000000000) != 0) {
              goto LABEL_70;
            }
            if (v26 >= v3[2]) {
              goto LABEL_71;
            }
            uint64_t v27 = v3[v26 + 4];
            if (v7 < 1)
            {
              uint64_t v29 = MEMORY[0x1E4FBC860];
              if (!v7) {
                goto LABEL_51;
              }
            }
            else
            {
              uint64_t v44 = v3[v26 + 4];
              uint64_t v28 = sub_1D17BE1C0();
              uint64_t v27 = v44;
              uint64_t v29 = v28;
              *(void *)(v28 + 16) = v7;
            }
            uint64_t v30 = (uint64_t *)(v29 + 32);
            if ((unint64_t)v7 >= 4)
            {
              v30 += v7 & 0xFFFFFFFFFFFFFFFCLL;
              int64x2_t v32 = vdupq_lane_s64(v27, 0);
              id v33 = (int64x2_t *)(v29 + 48);
              unint64_t v34 = v7 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v33[-1] = v32;
                *id v33 = v32;
                v33 += 2;
                v34 -= 4;
              }
              while (v34);
              unint64_t v31 = v7 & 0xFFFFFFFFFFFFFFFCLL;
              if (v7 == (v7 & 0xFFFFFFFFFFFFFFFCLL)) {
                goto LABEL_51;
              }
            }
            else
            {
              unint64_t v31 = 0;
            }
            unint64_t v35 = v7 - v31;
            do
            {
              *v30++ = v27;
              --v35;
            }
            while (v35);
LABEL_51:
            if (v22 == v6) {
              goto LABEL_72;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v23 = sub_1D1667604(v23);
            }
            if (v7 > 0x7FFFFFFF) {
              goto LABEL_73;
            }
            if ((unint64_t)v6 >> 31) {
              goto LABEL_74;
            }
            cblas_dcopy_NEWLAPACK();
            swift_bridgeObjectRelease();
            a3 = (void *)++v22;
            if (v22 == v6) {
              goto LABEL_59;
            }
          }
        }
        uint64_t v23 = v3;
LABEL_59:
        *(void *)unint64_t v46 = v7;
        int64_t v47 = v6;
        unint64_t v48 = v4;
        v45[0] = v7;
        v45[1] = v6;
        v45[2] = (vDSP_Length)v23;
        * infix(_:_:)((int64_t *)v46, v45, &v49);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v7 = v51;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_60:
          int64_t v36 = v49;
          int64_t v37 = v50;
          int64_t v38 = v49 * v50;
          if ((unsigned __int128)(v49 * (__int128)v50) >> 64 == (v49 * v50) >> 63)
          {
            if (v38 >= (uint64_t)0xFFFFFFFF80000000)
            {
              if (v38 <= 0x7FFFFFFF)
              {
                v46[0] = v49 * v50;
                vvsqrt((double *)(v7 + 32), (const double *)(v7 + 32), v46);
                *(void *)unint64_t v46 = v36;
                int64_t v47 = v37;
                unint64_t v48 = (void *)v7;
                /= infix(_:_:)((vDSP_Length *)&v52, (uint64_t)v46);
                swift_bridgeObjectRelease();
                uint64_t v39 = sub_1D1665914(v6, 1.0);
                *(void *)unint64_t v46 = 1;
                int64_t v47 = v6;
                unint64_t v48 = (void *)v39;
                v55.rows = (Swift::Int)v46;
                MAMatrix.setDiag(vector:)(v55);
                uint64_t result = swift_bridgeObjectRelease();
                int64_t v41 = v53;
                *(_OWORD *)unint64_t v42 = v52;
                v42[2] = v41;
                return result;
              }
LABEL_83:
              __break(1u);
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
          goto LABEL_83;
        }
LABEL_80:
        uint64_t v7 = (uint64_t)sub_1D1667604((void *)v7);
        uint64_t v51 = v7;
        goto LABEL_60;
      }
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }
LABEL_29:
    ++v11;
    cblas_dcopy_NEWLAPACK();
    swift_bridgeObjectRelease();
    if (v11 == v7) {
      goto LABEL_34;
    }
  }
  sub_1D17BEA30();
  __break(1u);
LABEL_85:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

void __swiftcall MAMatrix.svd()(Swift::tuple_U_KnowledgeGraphKit_MAMatrix_W_KnowledgeGraphKit_MAMatrix_V_KnowledgeGraphKit_MAMatrix *__return_ptr retstr)
{
  vDSP_Length v9 = *v3;
  vDSP_Length v8 = v3[1];
  int64_t v10 = v8 * *v3;
  if ((unsigned __int128)((uint64_t)v8 * (__int128)(uint64_t)*v3) >> 64 != v10 >> 63)
  {
    __break(1u);
LABEL_39:
    uint64_t v5 = (uint64_t)sub_1D1667604((void *)v5);
    if ((v8 & 0x8000000000000000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_4;
  }
  uint64_t v4 = v1;
  uint64_t v2 = v3[2];
  uint64_t v5 = sub_1D1665914(v10, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_39;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_40:
    sub_1D17BEA30();
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_4:
  if ((v9 & 0x8000000000000000) != 0) {
    goto LABEL_40;
  }
  vDSP_mtransD((const double *)(v2 + 32), 1, (double *)(v5 + 32), 1, v8, v9);
  sub_1D165C128(0, &qword_1EA652CD0);
  uint64_t v2 = sub_1D17BE5F0();
  id v11 = objc_msgSend((id)v2, sel_UTF8String);
  id v12 = (id)v2;
  if (!v11) {
    __break(1u);
  }
  if (v9 >> 31) {
    goto LABEL_41;
  }
  if (v8 >> 31)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  int64_t v6 = (void *)sub_1D1665914(v8, 0.0);
  uint64_t v7 = (void *)sub_1D1665914(v9 * v9, 0.0);
  uint64_t v17 = (void *)sub_1D1665914(v8 * v8, 0.0);
  double v19 = 0.0;
  int v18 = 0;
  if ((int)v9 >= (int)v8) {
    int v13 = v8;
  }
  else {
    int v13 = v9;
  }
  if ((v13 - 0x10000000) >> 29 == 7)
  {
    uint64_t v2 = sub_1D1665BFC(0, (8 * v13));
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  uint64_t v5 = (uint64_t)sub_1D1667604((void *)v5);
LABEL_13:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v6 = sub_1D1667604(v6);
  }
  unint64_t v16 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = sub_1D1667604(v7);
  }
  uint64_t v14 = (void *)(v5 + 32);
  uint64_t v15 = v7 + 4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v17 = sub_1D1667604(v17);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)sub_1D169D294(0, *(void *)(v2 + 16), 0, (char *)v2);
  }
  dgesdd_NEWLAPACK();
  if ((~*(void *)&v19 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_46;
  }
  if (v19 <= -2147483650.0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v19 < 2147483650.0)
  {
    uint64_t v15 = (void *)sub_1D1665914((int)v19, 0.0);
    uint64_t v14 = (void *)v5;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_25;
    }
    goto LABEL_48;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  sub_1D1667604(v14);
LABEL_25:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v6 = sub_1D1667604(v6);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1D1667604(v7);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1D1667604(v17);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1D169C770(0, v15[2], 0, v15);
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1D169D294(0, *(void *)(v2 + 16), 0, (char *)v2);
  }
  dgesdd_NEWLAPACK();
  swift_bridgeObjectRelease();
  if (v18 >= 1 || v18 < 0)
  {
    sub_1D17BEA40();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    MAMatrix.transpose()();
    *unint64_t v16 = 1;
    v16[1] = v8;
    void v16[2] = v6;
    swift_bridgeObjectRetain();
    MAMatrix.transpose()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

Swift::tuple_value_Double_index_Int __swiftcall MAMatrix.elbow(threshold:)(Swift::Double threshold)
{
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (v4 != 1 && v3 != 1) {
    goto LABEL_28;
  }
  uint64_t v6 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63) {
    goto LABEL_25;
  }
  Swift::Int v1 = v6 - 1;
  if (v6 < 1)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v7 = v2[2];
  if (v6 != 1)
  {
    uint64_t v9 = 0;
    unint64_t v8 = *(void *)(v7 + 16);
    if (v8 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = *(void *)(v7 + 16);
    }
    uint64_t v11 = v10 - 1;
    id v12 = (Swift::Double *)(v7 + 40);
    while (v1 != v9)
    {
      if (v8 == v9) {
        goto LABEL_23;
      }
      if (v11 == v9) {
        goto LABEL_24;
      }
      if (*(v12 - 1) * *(v12 - 1) - *v12 * *v12 < threshold)
      {
        Swift::Int v1 = v9 + 1;
        threshold = *v12;
        goto LABEL_29;
      }
      ++v9;
      ++v12;
      if (v1 == v9) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v8 = *(void *)(v7 + 16);
LABEL_19:
  if (v6 > (uint64_t)v8) {
    goto LABEL_27;
  }
  threshold = *(double *)(v7 + 8 * v1 + 32);
LABEL_29:
  result.value = threshold;
  result.index = v1;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.trunc(rows:columns:)(Swift::Int rows, Swift::Int columns)
{
  uint64_t v7 = v2;
  if (*v4 < rows || v4[1] < columns) {
    goto LABEL_16;
  }
  Swift::Int v3 = columns;
  Swift::Int v5 = rows;
  int64_t v9 = rows * columns;
  if ((unsigned __int128)(v5 * (__int128)columns) >> 64 != v9 >> 63) {
    goto LABEL_17;
  }
  uint64_t v4 = (Swift::Int *)v4[2];
  uint64_t v6 = (void *)sub_1D1665914(v9, 0.0);
  Swift::Int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_18;
  }
  if (v5 < 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  else
  {
    while (v5)
    {
      if (v3 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_20;
      }
      if (v3 > 0x7FFFFFFF) {
        goto LABEL_21;
      }
      uint64_t v13 = 0;
      v4 += 4;
      while ((unsigned __int128)(v13 * (__int128)v3) >> 64 == (v13 * v3) >> 63)
      {
        ++v13;
        Swift::Int isUniquelyReferenced_nonNull_native = cblas_dcopy_NEWLAPACK();
        if (v5 == v13) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1D1667604(v6);
      uint64_t v6 = (void *)isUniquelyReferenced_nonNull_native;
      if (v5 < 0) {
        goto LABEL_19;
      }
    }
LABEL_14:
    *uint64_t v7 = v5;
    v7[1] = v3;
    void v7[2] = (Swift::Int)v6;
  }
  result.elements._rawValue = v12;
  result.columns = v11;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.diag(rows:columns:)(Swift::Int rows, Swift::Int columns)
{
  Swift::Int v5 = v2;
  Swift::Int v6 = v3[1];
  if (v6 != 1 && *v3 != 1) {
    goto LABEL_26;
  }
  Swift::Int v9 = rows;
  int64_t v10 = rows * columns;
  if ((unsigned __int128)(v9 * (__int128)columns) >> 64 == v10 >> 63)
  {
    uint64_t v4 = (void *)sub_1D1665914(v10, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v4 = sub_1D1667604(v4);
LABEL_8:
  if (v6 >= v9) {
    Swift::Int v12 = v9;
  }
  else {
    Swift::Int v12 = v6;
  }
  if (v12 >= columns) {
    rows = columns;
  }
  else {
    rows = v12;
  }
  if (rows > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (columns < (uint64_t)0xFFFFFFFF80000000 || rows < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_23;
  }
  if (columns > 0x7FFFFFFF)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (__OFADD__(columns, 1))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  rows = cblas_dcopy_NEWLAPACK();
  *Swift::Int v5 = v9;
  v5[1] = columns;
  uint64_t v5[2] = (Swift::Int)v4;
LABEL_27:
  result.elements._rawValue = v11;
  result.columns = columns;
  result.rows = rows;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.sum(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  Swift::Int v3 = v1;
  unint64_t v5 = *v2;
  int64_t v4 = v2[1];
  unint64_t v6 = v2[2];
  if (*(unsigned char *)axe != 1)
  {
    uint64_t v7 = (void *)sub_1D1665914(v5, 0.0);
    Swift::Int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_23;
    }
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_11;
    }
LABEL_24:
    __break(1u);
LABEL_25:
    Swift::Int isUniquelyReferenced_nonNull_native = sub_1D17BEA30();
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v7 = (void *)sub_1D1665914(v4, 0.0);
  Swift::Int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_21;
  }
  for (; v4 < 0; uint64_t v7 = (void *)isUniquelyReferenced_nonNull_native)
  {
    __break(1u);
LABEL_23:
    Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1D1667604(v7);
    uint64_t v7 = (void *)isUniquelyReferenced_nonNull_native;
    if ((v5 & 0x8000000000000000) != 0) {
      goto LABEL_24;
    }
LABEL_11:
    if (!v5)
    {
LABEL_17:
      int64_t v4 = 1;
      goto LABEL_18;
    }
    uint64_t v13 = 0;
    v6 += 32;
    uint64_t v14 = (double *)(v7 + 4);
    while (v5 != v13)
    {
      int64_t v15 = v13 * v4;
      if ((unsigned __int128)(v13 * (__int128)v4) >> 64 != (v13 * v4) >> 63) {
        goto LABEL_20;
      }
      if (v4 < 0) {
        goto LABEL_25;
      }
      ++v13;
      vDSP_sveD((const double *)(v6 + 8 * v15), 1, v14++, v4);
      if (v5 == v13) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1D1667604(v7);
  }
  if (v4)
  {
    uint64_t v11 = 4;
    int64_t v12 = v4;
    while ((v5 & 0x8000000000000000) == 0)
    {
      vDSP_sveD((const double *)(v6 + v11 * 8), v4, (double *)&v7[v11], v5);
      ++v11;
      if (!--v12) {
        goto LABEL_8;
      }
    }
    goto LABEL_25;
  }
LABEL_8:
  unint64_t v5 = 1;
LABEL_18:
  *Swift::Int v3 = v5;
  v3[1] = v4;
  v3[2] = (unint64_t)v7;
LABEL_26:
  result.elements._rawValue = v10;
  result.columns = v9;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

Swift::Double __swiftcall MAMatrix.euclideanDistance(vector:)(KnowledgeGraphKit::MAMatrix vector)
{
  sub_1D16F5328((long long *)vector.rows, (uint64_t (*)(long long *, long long *))sub_1D16F4588);
  return result;
}

BOOL MAMatrix.isVector.getter()
{
  return v0[1] == 1 || *v0 == 1;
}

BOOL static MAMatrixAxes.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t MAMatrixAxes.hash(into:)()
{
  return sub_1D17BED30();
}

uint64_t MAMatrixAxes.hashValue.getter()
{
  return sub_1D17BED80();
}

BOOL static MAMatrixDistances.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MAMatrixDistances.hash(into:)()
{
  return sub_1D17BED30();
}

uint64_t MAMatrixDistances.hashValue.getter()
{
  return sub_1D17BED80();
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.init(_:)(Swift::OpaquePointer a1)
{
  uint64_t v6 = *((void *)a1._rawValue + 2);
  if (!v6) {
    goto LABEL_12;
  }
  rawValue = a1._rawValue;
  uint64_t v2 = (uint64_t)v1;
  unint64_t v4 = *(void *)(*((void *)a1._rawValue + 4) + 16);
  if ((unsigned __int128)(v6 * (__int128)(uint64_t)v4) >> 64 != (uint64_t)(v6 * v4) >> 63) {
    goto LABEL_13;
  }
  unint64_t v5 = (void *)sub_1D1665914(v6 * v4, 0.0);
  Swift::Int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_14;
  }
  int64_t v10 = (void *)rawValue[2];
  if (v10)
  {
    while (!(v4 >> 31))
    {
      uint64_t v11 = (void *)v2;
      swift_bridgeObjectRetain();
      uint64_t v2 = 0;
      while ((unsigned __int128)(v2 * (__int128)(uint64_t)v4) >> 64 == (uint64_t)(v2 * v4) >> 63)
      {
        ++v2;
        swift_bridgeObjectRetain();
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        if (v10 == (void *)v2)
        {
          swift_bridgeObjectRelease();
          uint64_t v2 = (uint64_t)v11;
          goto LABEL_10;
        }
      }
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1D1667604(v5);
      unint64_t v5 = (void *)isUniquelyReferenced_nonNull_native;
      int64_t v10 = (void *)rawValue[2];
      if (!v10) {
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    Swift::Int isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
    *(void *)uint64_t v2 = v6;
    *(void *)(v2 + 8) = v4;
    *(void *)(v2 + 16) = v5;
  }
  result.elements._rawValue = v9;
  result.columns = v8;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

{
  void *v1;
  void *v2;
  uint64_t rawValue;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  void *v17;
  void *v18;
  void *v19;
  KnowledgeGraphKit::MAMatrix result;

  rawValue = (uint64_t)a1._rawValue;
  unint64_t v4 = v1;
  unint64_t v5 = *((void *)a1._rawValue + 2);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (uint64_t *)((char *)a1._rawValue + 40);
    do
    {
      Swift::Int v8 = *(v7 - 1);
      Swift::Int v9 = v8 * *v7;
      if ((unsigned __int128)(v8 * (__int128)*v7) >> 64 != v9 >> 63)
      {
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      int64_t v10 = __OFADD__(v6, v9);
      v6 += v9;
      if (v10) {
        goto LABEL_19;
      }
      v7 += 3;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v2 = (void *)sub_1D1665914(v6, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_24;
  }
  for (sparse_index i = *(void *)(rawValue + 16); i; sparse_index i = *(void *)(rawValue + 16))
  {
    double v19 = v4;
    int v18 = v2;
    swift_bridgeObjectRetain();
    unint64_t v4 = 0;
    uint64_t v2 = (void *)(rawValue + 48);
    rawValue = 0x7FFFFFFFLL;
    while (1)
    {
      int64_t v12 = *(v2 - 2);
      uint64_t v13 = *(v2 - 1);
      uint64_t v14 = v12 * v13;
      if ((unsigned __int128)(v12 * (__int128)v13) >> 64 != (v12 * v13) >> 63) {
        break;
      }
      if (v14 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_21;
      }
      if (v14 > 0x7FFFFFFF) {
        goto LABEL_22;
      }
      swift_bridgeObjectRetain();
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      int64_t v10 = __OFADD__(v4, v14);
      unint64_t v4 = (void *)((char *)v4 + v14);
      if (v10) {
        goto LABEL_23;
      }
      v2 += 3;
      if (!--i)
      {
        swift_bridgeObjectRelease();
        unint64_t v4 = v19;
        uint64_t v2 = v18;
        goto LABEL_17;
      }
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    uint64_t v2 = sub_1D1667604(v2);
  }
LABEL_17:
  int64_t v15 = swift_bridgeObjectRelease();
  *unint64_t v4 = 1;
  v4[1] = v6;
  uint64_t v4[2] = v2;
  result.elements._rawValue = v17;
  result.columns = v16;
  result.rows = v15;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.init(_:rows:columns:)(Swift::OpaquePointer _, Swift::Int rows, Swift::Int columns)
{
  Swift::Int v8 = v3;
  unint64_t v9 = rows * columns;
  if ((unsigned __int128)(rows * (__int128)columns) >> 64 != (rows * columns) >> 63) {
    goto LABEL_13;
  }
  if (*((void *)_._rawValue + 2) != v9) {
    goto LABEL_14;
  }
  Swift::Int v4 = columns;
  Swift::Int v5 = rows;
  uint64_t v6 = (void *)sub_1D1665914(v9, 0.0);
  Swift::Int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_15;
  }
  if (v5 < 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    while (v5)
    {
      if (v4 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_17;
      }
      if (v4 > 0x7FFFFFFF) {
        goto LABEL_18;
      }
      uint64_t v13 = 0;
      while ((unsigned __int128)(v13 * (__int128)v4) >> 64 == (v13 * v4) >> 63)
      {
        ++v13;
        cblas_dcopy_NEWLAPACK();
        if (v5 == v13) {
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1D1667604(v6);
      uint64_t v6 = (void *)isUniquelyReferenced_nonNull_native;
      if (v5 < 0) {
        goto LABEL_16;
      }
    }
LABEL_11:
    Swift::Int isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
    *Swift::Int v8 = v5;
    v8[1] = v4;
    v8[2] = (Swift::Int)v6;
  }
  result.elements._rawValue = v12;
  result.columns = v11;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

void static MAMatrix.ones(rows:columns:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 != (a1 * a2) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v4 < 0)
  {
LABEL_8:
    sub_1D17BEA30();
    __break(1u);
    return;
  }
  if (v4)
  {
    uint64_t v7 = sub_1D17BE1C0();
    *(void *)(v7 + 16) = v4;
    memset_pattern16((void *)(v7 + 32), &unk_1D17CC420, 8 * v4);
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
  *a3 = a1;
  a3[1] = a2;
  a3[2] = v7;
}

void static MAMatrix.identity(size:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1 * a1;
  if ((unsigned __int128)(a1 * (__int128)a1) >> 64 != (a1 * a1) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    if (v3)
    {
      uint64_t v5 = sub_1D17BE1C0();
      *(void *)(v5 + 16) = v3;
      bzero((void *)(v5 + 32), 8 * v3);
      if ((a1 & 0x8000000000000000) == 0)
      {
LABEL_5:
        if (!a1)
        {
LABEL_12:
          *a2 = a1;
          a2[1] = a1;
          a2[2] = v5;
          return;
        }
        uint64_t v6 = 0;
        while (1)
        {
          uint64_t v7 = v6 * a1;
          if ((unsigned __int128)(v6 * (__int128)a1) >> 64 != (v6 * a1) >> 63) {
            goto LABEL_15;
          }
          BOOL v8 = __OFADD__(v7, v6);
          unint64_t v9 = v7 + v6;
          if (v8) {
            goto LABEL_16;
          }
          if ((v9 & 0x8000000000000000) != 0) {
            goto LABEL_17;
          }
          if (v9 >= *(void *)(v5 + 16)) {
            goto LABEL_18;
          }
          ++v6;
          *(void *)(v5 + 32 + 8 * v9) = 0x3FF0000000000000;
          if (a1 == v6) {
            goto LABEL_12;
          }
        }
      }
    }
    else
    {
      uint64_t v5 = MEMORY[0x1E4FBC860];
      if ((a1 & 0x8000000000000000) == 0) {
        goto LABEL_5;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_20:
  sub_1D17BEA30();
  __break(1u);
}

void static MAMatrix.random(rows:columns:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 != (a1 * a2) >> 63)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    if (v4)
    {
      uint64_t v7 = sub_1D17BE1C0();
      *(void *)(v7 + 16) = v4;
      bzero((void *)(v7 + 32), 8 * v4);
      if ((a1 & 0x8000000000000000) == 0)
      {
LABEL_5:
        if (!a1)
        {
LABEL_16:
          *a3 = a1;
          a3[1] = a2;
          a3[2] = v7;
          return;
        }
        if (a2 < 0) {
          goto LABEL_24;
        }
        unint64_t v8 = 0;
        uint64_t v9 = 0;
        while (v9 != a1)
        {
          if (a2)
          {
            uint64_t v10 = a2;
            unint64_t v11 = v8;
            if ((unsigned __int128)(v9 * (__int128)a2) >> 64 != (v9 * a2) >> 63) {
              goto LABEL_22;
            }
            do
            {
              uint32_t v12 = arc4random();
              if ((v8 & 0x8000000000000000) != 0) {
                goto LABEL_19;
              }
              if (v11 >= *(void *)(v7 + 16)) {
                goto LABEL_20;
              }
              *(double *)(v7 + 8 * v11++ + 32) = (double)v12 / 4294967300.0;
            }
            while (--v10);
          }
          ++v9;
          v8 += a2;
          if (v9 == a1) {
            goto LABEL_16;
          }
        }
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v7 = MEMORY[0x1E4FBC860];
      if ((a1 & 0x8000000000000000) == 0) {
        goto LABEL_5;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_25:
  sub_1D17BEA30();
  __break(1u);
}

uint64_t MAMatrix.init(arrayLiteral:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = 1;
  a2[1] = v2;
  a2[2] = result;
  return result;
}

uint64_t sub_1D16EB730@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = 1;
  a2[1] = v2;
  a2[2] = result;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.tile(rows:)(Swift::Int rows)
{
  uint64_t v6 = v1;
  if (*v2 != 1) {
    goto LABEL_13;
  }
  Swift::Int v5 = rows;
  uint64_t v3 = v2[1];
  int64_t v7 = rows * v3;
  if ((unsigned __int128)(v5 * (__int128)v3) >> 64 != v7 >> 63) {
    goto LABEL_14;
  }
  uint64_t v4 = (void *)sub_1D1665914(v7, 0.0);
  Swift::Int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_15;
  }
  if (v5 < 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    while (v5)
    {
      if (v3 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_17;
      }
      if (v3 > 0x7FFFFFFF) {
        goto LABEL_18;
      }
      uint64_t v11 = 0;
      while ((unsigned __int128)(v11 * (__int128)v3) >> 64 == (v11 * v3) >> 63)
      {
        ++v11;
        Swift::Int isUniquelyReferenced_nonNull_native = cblas_dcopy_NEWLAPACK();
        if (v5 == v11) {
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1D1667604(v4);
      uint64_t v4 = (void *)isUniquelyReferenced_nonNull_native;
      if (v5 < 0) {
        goto LABEL_16;
      }
    }
LABEL_11:
    *uint64_t v6 = v5;
    v6[1] = v3;
    v6[2] = (Swift::Int)v4;
  }
  result.elements._rawValue = v10;
  result.columns = v9;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.expand(rows:columns:)(Swift::Int rows, Swift::Int columns)
{
  Swift::Int v9 = *v4;
  Swift::Int v8 = v4[1];
  if (*v4 <= rows && v8 <= columns)
  {
    Swift::Int v3 = columns;
    Swift::Int v5 = rows;
    int64_t v7 = v2;
    int64_t v11 = rows * columns;
    if ((unsigned __int128)(v5 * (__int128)columns) >> 64 != v11 >> 63) {
      goto LABEL_20;
    }
    uint64_t v4 = (Swift::Int *)v4[2];
    uint64_t v6 = (void *)sub_1D1665914(v11, 0.0);
    Swift::Int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_21;
    }
    if ((v9 & 0x8000000000000000) == 0) {
      goto LABEL_9;
    }
  }
  else
  {
    while (1)
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1D1667604(v6);
      uint64_t v6 = (void *)isUniquelyReferenced_nonNull_native;
      if (v9 < 0) {
        break;
      }
LABEL_9:
      if (!v9)
      {
LABEL_16:
        *int64_t v7 = v5;
        v7[1] = v3;
        void v7[2] = (Swift::Int)v6;
        goto LABEL_25;
      }
      if (v8 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_23;
      }
      if (v8 > 0x7FFFFFFF) {
        goto LABEL_24;
      }
      uint64_t v15 = 0;
      v4 += 4;
      while ((unsigned __int128)(v15 * (__int128)v8) >> 64 == (v15 * v8) >> 63)
      {
        if ((unsigned __int128)(v15 * (__int128)v3) >> 64 != (v15 * v3) >> 63) {
          goto LABEL_18;
        }
        ++v15;
        Swift::Int isUniquelyReferenced_nonNull_native = cblas_dcopy_NEWLAPACK();
        if (v9 == v15) {
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_18:
      __break(1u);
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  result.elements._rawValue = v14;
  result.columns = v13;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

void - prefix(_:)(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  swift_bridgeObjectRetain();
  if (swift_isUniquelyReferenced_nonNull_native()) {
    uint64_t v6 = (double *)v5;
  }
  else {
    uint64_t v6 = (double *)sub_1D1667604((void *)v5);
  }
  vDSP_Length v7 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 == (v3 * v4) >> 63)
  {
    if ((v7 & 0x8000000000000000) == 0)
    {
      vDSP_vnegD((const double *)(v5 + 32), 1, v6 + 4, 1, v7);
      *a2 = v3;
      a2[1] = v4;
      a2[2] = v6;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  sub_1D17BEA30();
  __break(1u);
}

Swift::Void __swiftcall MAMatrix.sqrt()()
{
  uint64_t v0 = (uint64_t (*)(void *, void *, int *))MEMORY[0x1E4F173C0];
  sub_1D16F1B64(v0);
}

void /= infix(_:_:)(vDSP_Length *a1, uint64_t a2)
{
  __B[2] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v4 = *(double **)a2;
  vDSP_Stride v3 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int64_t v6 = a1[1];
  if (v6 != v3)
  {
    if (v3 == 1 && *a1 == (void)v4)
    {
      vDSP_Stride v3 = a1[2];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      a1[2] = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_39;
      }
      if (((unint64_t)v4 & 0x8000000000000000) != 0) {
        goto LABEL_40;
      }
      goto LABEL_19;
    }
    goto LABEL_46;
  }
  if (v4 == (double *)1)
  {
    int64_t v6 = a1[2];
    char v7 = swift_isUniquelyReferenced_nonNull_native();
    a1[2] = v6;
    if ((v7 & 1) == 0) {
      goto LABEL_41;
    }
    while ((v3 & 0x8000000000000000) == 0)
    {
      if (!v3) {
        goto LABEL_32;
      }
      unint64_t v8 = 0;
      uint64_t v4 = (double *)(v6 + 32);
      vDSP_Length v9 = *a1;
      while (v3 != v8)
      {
        if (v8 >= *(void *)(v5 + 16)) {
          goto LABEL_38;
        }
        __B[0] = *(double *)(v5 + 32 + 8 * v8);
        if ((v9 & 0x8000000000000000) != 0) {
          goto LABEL_45;
        }
        ++v8;
        vDSP_vsdivD(v4, v3, __B, v4, v3, v9);
        ++v4;
        if (v3 == v8) {
          goto LABEL_32;
        }
      }
      while (1)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        vDSP_Stride v3 = (vDSP_Stride)sub_1D1667604((void *)v3);
        a1[2] = v3;
        if (((unint64_t)v4 & 0x8000000000000000) != 0) {
          break;
        }
LABEL_19:
        if (!v4)
        {
LABEL_26:
          a1[2] = v3;
          return;
        }
        uint64_t v12 = 0;
        while (v4 != (double *)v12)
        {
          if ((unint64_t)v12 >= *(void *)(v5 + 16)) {
            goto LABEL_35;
          }
          __B[0] = *(double *)(v5 + 32 + 8 * v12);
          int64_t v13 = v12 * v6;
          if ((unsigned __int128)(v12 * (__int128)v6) >> 64 != (v12 * v6) >> 63) {
            goto LABEL_36;
          }
          if (v6 < 0) {
            goto LABEL_45;
          }
          ++v12;
          vDSP_vsdivD((const double *)(v3 + 32 + 8 * v13), 1, __B, (double *)(v3 + 32 + 8 * v13), 1, v6);
          if (v4 == (double *)v12) {
            goto LABEL_26;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
      }
LABEL_40:
      __break(1u);
LABEL_41:
      int64_t v6 = (int64_t)sub_1D1667604((void *)v6);
      a1[2] = v6;
    }
    __break(1u);
LABEL_43:
    int64_t v6 = (int64_t)sub_1D1667604((void *)v6);
    a1[2] = v6;
    goto LABEL_29;
  }
  if ((double *)*a1 != v4)
  {
LABEL_46:
    __B[0] = 0.0;
    __B[1] = -2.68156159e154;
    swift_bridgeObjectRetain();
    sub_1D17BE850();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEA40();
    __break(1u);
    return;
  }
  int64_t v6 = a1[2];
  char v14 = swift_isUniquelyReferenced_nonNull_native();
  a1[2] = v6;
  if ((v14 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_29:
  vDSP_Length v15 = (void)v4 * v3;
  if ((unsigned __int128)((uint64_t)v4 * (__int128)v3) >> 64 != ((uint64_t)v4 * v3) >> 63) {
    __break(1u);
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
LABEL_45:
    sub_1D17BEA30();
    __break(1u);
    goto LABEL_46;
  }
  vDSP_vdivD((const double *)(v5 + 32), 1, (const double *)(v6 + 32), 1, (double *)(v6 + 32), 1, v15);
LABEL_32:
  a1[2] = v6;
}

uint64_t MAMatrix.length.getter()
{
  if (v0[1] <= *v0) {
    return *v0;
  }
  else {
    return v0[1];
  }
}

uint64_t MAMatrix.sparseCount.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    uint64_t v4 = MEMORY[0x1E4FBC860];
    do
    {
      double v8 = *(double *)(v1 + 8 * v3 + 32);
      if (v8 == 0.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1D16826FC(0, *(void *)(v4 + 16) + 1, 1);
        }
        unint64_t v6 = *(void *)(v4 + 16);
        unint64_t v5 = *(void *)(v4 + 24);
        if (v6 >= v5 >> 1) {
          sub_1D16826FC(v5 > 1, v6 + 1, 1);
        }
        *(void *)(v4 + 16) = v6 + 1;
        uint64_t v7 = v4 + 16 * v6;
        *(void *)(v7 + 32) = v3;
        *(double *)(v7 + 40) = v8;
      }
      ++v3;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4FBC860];
  }
  uint64_t v9 = *(void *)(v4 + 16);
  swift_release();
  return v9;
}

uint64_t MAMatrix.sparsity.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t result = MAMatrix.sparseCount.getter();
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 != (v1 * v2) >> 63) {
    __break(1u);
  }
  return result;
}

void MAMatrix.density.getter()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = *v0 * v1;
  if ((unsigned __int128)(*v0 * (__int128)v1) >> 64 != v2 >> 63)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (__OFSUB__(v2, MAMatrix.sparseCount.getter())) {
LABEL_5:
  }
    __break(1u);
}

Swift::Int __swiftcall MAMatrix.index(row:column:)(Swift::Int row, Swift::Int column)
{
  uint64_t v3 = *(void *)(v2 + 8);
  Swift::Int v4 = row * v3;
  if ((unsigned __int128)(row * (__int128)v3) >> 64 != (row * v3) >> 63)
  {
    __break(1u);
    goto LABEL_5;
  }
  row = v4 + column;
  if (__OFADD__(v4, column)) {
LABEL_5:
  }
    __break(1u);
  return row;
}

Swift::Bool __swiftcall MAMatrix.positionIsValid(row:column:)(Swift::Int row, Swift::Int column)
{
  Swift::Bool result = 0;
  if ((row & 0x8000000000000000) == 0 && *v2 > row && (column & 0x8000000000000000) == 0) {
    return v2[1] > column;
  }
  return result;
}

Swift::Bool __swiftcall MAMatrix.indexIsValid(index:)(Swift::Int index)
{
  if (index < 0)
  {
    LOBYTE(index) = 0;
  }
  else
  {
    uint64_t v2 = v1[1];
    Swift::Int v3 = *v1 * v2;
    if ((unsigned __int128)(*v1 * (__int128)v2) >> 64 == v3 >> 63) {
      LOBYTE(index) = v3 > index;
    }
    else {
      __break(1u);
    }
  }
  return index;
}

uint64_t sub_1D16EC150@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *a2 * v3;
  if ((unsigned __int128)(*a2 * (__int128)v3) >> 64 != v4 >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  BOOL v6 = __OFADD__(v4, v5);
  unint64_t v7 = v4 + v5;
  if (v6)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v8 = *(void *)(result + 16);
  if (v7 < *(void *)(v8 + 16))
  {
    *a3 = *(void *)(v8 + 8 * v7 + 32);
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1D16EC1A8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *a3 * v7;
  if ((unsigned __int128)(*a3 * (__int128)v7) >> 64 != v8 >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v9 = a3[1];
  unint64_t v5 = v8 + v9;
  if (__OFADD__(v8, v9))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v3 = a2;
  uint64_t v6 = *a1;
  uint64_t v4 = *(void **)(a2 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = (uint64_t)sub_1D1667604(v4);
  uint64_t v4 = (void *)result;
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if (v5 < v4[2])
  {
    v4[v5 + 4] = v6;
    *(void *)(v3 + 16) = v4;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t (*MAMatrix.subscript.modify(uint64_t (*result)(uint64_t result, char a2), uint64_t a2, uint64_t a3))(uint64_t result, char a2)
{
  *((void *)result + 2) = a3;
  *((void *)result + 3) = v3;
  *((void *)result + 1) = a2;
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = a2 * v4;
  if ((unsigned __int128)(a2 * (__int128)v4) >> 64 != (a2 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }
  BOOL v6 = __OFADD__(v5, a3);
  unint64_t v7 = v5 + a3;
  if (v6)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  if (v7 < *(void *)(v8 + 16))
  {
    *(void *)uint64_t result = *(void *)(v8 + 8 * v7 + 32);
    return sub_1D16EC2C4;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1D16EC2C4(uint64_t result, char a2)
{
  uint64_t v4 = *(void *)(result + 24);
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v6 = *(void *)result;
  uint64_t v7 = *(void *)(v4 + 8);
  unint64_t v8 = v5 * v7;
  BOOL v9 = (unsigned __int128)(v5 * (__int128)v7) >> 64 != (v5 * v7) >> 63;
  if ((a2 & 1) == 0) {
    goto LABEL_8;
  }
  if (v9)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)(result + 16);
  unint64_t v3 = v8 + v10;
  if (__OFADD__(v8, v10))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    uint64_t result = (uint64_t)sub_1D1667604(v2);
    uint64_t v2 = (void *)result;
    if ((v3 & 0x8000000000000000) == 0) {
      goto LABEL_6;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v2 = *(void **)(v4 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_16;
  }
  if ((v3 & 0x8000000000000000) != 0) {
    goto LABEL_17;
  }
LABEL_6:
  unint64_t v8 = v2[2];
  if (v3 < v8)
  {
LABEL_13:
    v2[v3 + 4] = v6;
    *(void *)(v4 + 16) = v2;
    return result;
  }
  __break(1u);
LABEL_8:
  if (v9)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v11 = *(void *)(result + 16);
  unint64_t v3 = v8 + v11;
  if (__OFADD__(v8, v11))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v2 = *(void **)(v4 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((v3 & 0x8000000000000000) == 0) {
      goto LABEL_12;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_20:
  uint64_t result = (uint64_t)sub_1D1667604(v2);
  uint64_t v2 = (void *)result;
  if ((v3 & 0x8000000000000000) != 0) {
    goto LABEL_21;
  }
LABEL_12:
  if (v3 < v2[2]) {
    goto LABEL_13;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1D16EC3C0(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4 = *a3;
  uint64_t v5 = *a1;
  uint64_t v6 = *(void **)(a2 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((v4 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)sub_1D1667604(v6);
  uint64_t v6 = (void *)result;
  if ((v4 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v4 < v6[2])
  {
    v6[v4 + 4] = v5;
    *(void *)(a2 + 16) = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*MAMatrix.subscript.modify(uint64_t (*result)(uint64_t *a1, char a2), unint64_t a2))(uint64_t *a1, char a2)
{
  *((void *)result + 1) = a2;
  *((void *)result + 2) = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (*(void *)(v3 + 16) > a2)
    {
      *(void *)uint64_t result = *(void *)(v3 + 8 * a2 + 32);
      return sub_1D16EC48C;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1D16EC48C(uint64_t *a1, char a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = *a1;
  uint64_t v6 = *(void **)(v4 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1D1667604(v6);
      uint64_t v6 = (void *)result;
    }
    unint64_t v8 = a1[1];
    if (v6[2] > v8) {
      goto LABEL_9;
    }
    __break(1u);
  }
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1D1667604(v6);
    uint64_t v6 = (void *)result;
  }
  unint64_t v8 = a1[1];
  if (v6[2] > v8)
  {
LABEL_9:
    v6[v8 + 4] = v5;
    *(void *)(v4 + 16) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t MAMatrix.subscript.getter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1D16FA2EC(a1, v3, v4, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1D16EC5A0(void *a1, uint64_t a2, uint64_t *a3)
{
  if (*a1 == 1)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1[1];
    if (v4 == *(void *)(a2 + 8))
    {
      uint64_t v6 = *a3;
      uint64_t v5 = *(void **)(a2 + 16);
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v3 + 16) = v5;
      if (result) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_12:
  uint64_t result = (uint64_t)sub_1D1667604(v5);
  uint64_t v5 = (void *)result;
  *(void *)(v3 + 16) = result;
LABEL_4:
  if (v4 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v4 > 0x7FFFFFFF)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((unsigned __int128)(v6 * (__int128)v4) >> 64 != (v6 * v4) >> 63)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  cblas_dcopy_NEWLAPACK();
  *(void *)(v3 + 16) = v5;
  return swift_bridgeObjectRelease();
}

uint64_t MAMatrix.subscript.modify(void *a1, uint64_t a2)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[3] = a2;
  v5[4] = v2;
  int64_t v6 = *(void *)(v2 + 8);
  uint64_t v7 = (void *)sub_1D1665914(v6, 0.0);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1D1667604(v7);
    uint64_t v7 = (void *)result;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v6 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((unsigned __int128)(a2 * (__int128)v6) >> 64 == (a2 * v6) >> 63)
  {
    cblas_dcopy_NEWLAPACK();
    *uint64_t v5 = 1;
    v5[1] = v6;
    uint64_t v5[2] = v7;
    return (uint64_t)sub_1D16EC780;
  }
LABEL_9:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  int64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[3] = a2;
  v6[4] = v2;
  uint64_t v7 = *(void *)(v2 + 8);
  unint64_t v8 = *(void *)(v2 + 16);
  BOOL v9 = *(void *)(a2 + 16);
  v6[5] = v9;
  if ((unsigned __int128)(v9 * (__int128)v7) >> 64 != (v9 * v7) >> 63) {
    goto LABEL_14;
  }
  uint64_t v3 = (void *)sub_1D1665914(v9 * v7, 0.0);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_15;
  }
  if (v9)
  {
    while (v7 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v7 > 0x7FFFFFFF) {
        goto LABEL_18;
      }
      v8 += 32;
      swift_bridgeObjectRetain();
      uint64_t v11 = 0;
      while ((unsigned __int128)(*(uint64_t *)(a2 + 8 * v11 + 32) * (__int128)v7) >> 64 == (*(void *)(a2 + 8 * v11 + 32)
                                                                                          * v7) >> 63)
      {
        if ((unsigned __int128)(v11 * (__int128)v7) >> 64 != (v11 * v7) >> 63) {
          goto LABEL_13;
        }
        ++v11;
        cblas_dcopy_NEWLAPACK();
        if (v9 == v11)
        {
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      uint64_t result = (uint64_t)sub_1D1667604(v3);
      uint64_t v3 = (void *)result;
      if (!v9) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
LABEL_11:
    *int64_t v6 = v9;
    v6[1] = v7;
    v6[2] = v3;
    return (uint64_t)sub_1D16ED634;
  }
  return result;
}

{
  unint64_t *v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t result;

  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[3] = a2;
  v5[4] = v2;
  int64_t v6 = *v2;
  uint64_t v7 = v2[1];
  unint64_t v8 = (void *)sub_1D1665914(*v2, 0.0);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1D1667604(v8);
    unint64_t v8 = (void *)result;
  }
  if (v6 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000 || v7 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_9;
  }
  if (v7 <= 0x7FFFFFFF)
  {
    cblas_dcopy_NEWLAPACK();
    *uint64_t v5 = v6;
    v5[1] = 1;
    uint64_t v5[2] = v8;
    return (uint64_t)sub_1D16EDA80;
  }
LABEL_10:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  void *v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;

  int64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[3] = a2;
  v6[4] = v2;
  uint64_t v7 = *v2;
  unint64_t v8 = v2[1];
  BOOL v9 = *(void *)(a2 + 16);
  v6[5] = v9;
  if ((unsigned __int128)(v7 * (__int128)(uint64_t)v9) >> 64 == (uint64_t)(v7 * v9) >> 63)
  {
    uint64_t v3 = (void *)sub_1D1665914(v7 * v9, 0.0);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if (v9) {
        goto LABEL_4;
      }
LABEL_12:
      *int64_t v6 = v7;
      v6[1] = v9;
      v6[2] = v3;
      return (uint64_t)sub_1D16EEA9C;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (uint64_t)sub_1D1667604(v3);
  uint64_t v3 = (void *)result;
  if (!v9) {
    goto LABEL_12;
  }
LABEL_4:
  if (v7 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v7 < (uint64_t)0xFFFFFFFF80000000 || v8 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_18;
  }
  if (!(v9 >> 31))
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = 32;
    uint64_t v12 = v9;
    do
    {
      cblas_dcopy_NEWLAPACK();
      v11 += 8;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
LABEL_19:
  __break(1u);
  return result;
}

void sub_1D16EC780(uint64_t **a1, char a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = **a1;
  if ((a2 & 1) == 0)
  {
    if (v5 == 1)
    {
      uint64_t v9 = v4[4];
      uint64_t v2 = v4[1];
      if (v2 == *(void *)(v9 + 8))
      {
        uint64_t v3 = *(void **)(v9 + 16);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v9 + 16) = v3;
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_13;
        }
        goto LABEL_27;
      }
LABEL_26:
      __break(1u);
LABEL_27:
      uint64_t v13 = v4[4];
      uint64_t v3 = sub_1D1667604(v3);
      *(void *)(v13 + 16) = v3;
LABEL_13:
      if (v2 < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
      }
      else if (v2 <= 0x7FFFFFFF)
      {
        if ((unsigned __int128)(v4[3] * (__int128)v2) >> 64 == (v4[3] * v2) >> 63)
        {
          uint64_t v11 = v4[4];
          cblas_dcopy_NEWLAPACK();
          *(void *)(v11 + 16) = v3;
          goto LABEL_17;
        }
LABEL_30:
        __break(1u);
        return;
      }
      __break(1u);
      goto LABEL_30;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v5 == 1)
  {
    uint64_t v6 = v4[4];
    uint64_t v2 = v4[1];
    if (v2 == *(void *)(v6 + 8))
    {
      uint64_t v3 = *(void **)(v6 + 16);
      swift_bridgeObjectRetain();
      char v7 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v6 + 16) = v3;
      if (v7) {
        goto LABEL_6;
      }
      goto LABEL_21;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_21:
  uint64_t v12 = v4[4];
  uint64_t v3 = sub_1D1667604(v3);
  *(void *)(v12 + 16) = v3;
LABEL_6:
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if ((unsigned __int128)(v4[3] * (__int128)v2) >> 64 != (v4[3] * v2) >> 63)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = v4[4];
  cblas_dcopy_NEWLAPACK();
  *(void *)(v8 + 16) = v3;
  swift_bridgeObjectRelease();
LABEL_17:
  swift_bridgeObjectRelease();
  free(v4);
}

uint64_t MAMatrix.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*v3 < a2) {
    goto LABEL_19;
  }
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    goto LABEL_20;
  }
  uint64_t v4 = v3[1];
  if ((unsigned __int128)(v8 * (__int128)v4) >> 64 != (v8 * v4) >> 63) {
    goto LABEL_21;
  }
  uint64_t v3 = (void *)v3[2];
  uint64_t v5 = (void *)sub_1D1665914(v8 * v4, 0.0);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_22;
  }
  BOOL v11 = v6 == v7;
  if (v6 < v7)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    while (!v11)
    {
      if (v4 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_24;
      }
      if (v4 > 0x7FFFFFFF) {
        goto LABEL_25;
      }
      BOOL v12 = v6 <= v7;
      v6 -= v7;
      if (v12) {
        goto LABEL_26;
      }
      uint64_t v13 = 0;
      v3 += 4;
      while (!__OFADD__(v13, 1))
      {
        if ((unsigned __int128)((v7 + v13) * (__int128)v4) >> 64 != ((v7 + v13) * v4) >> 63) {
          goto LABEL_17;
        }
        if ((unsigned __int128)(v13 * (__int128)v4) >> 64 != (v13 * v4) >> 63) {
          goto LABEL_18;
        }
        uint64_t result = cblas_dcopy_NEWLAPACK();
        if (v6 == ++v13) {
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      uint64_t result = (uint64_t)sub_1D1667604(v5);
      uint64_t v5 = (void *)result;
      BOOL v11 = v6 == v7;
      if (v6 < v7) {
        goto LABEL_23;
      }
    }
LABEL_15:
    *a3 = v8;
    a3[1] = v4;
    a3[2] = v5;
  }
  return result;
}

uint64_t sub_1D16ECA98(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v7 = a3[1];
  if (*a2 < v7)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = (uint64_t)a2;
    uint64_t v4 = *a3;
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = (void *)a2[2];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = sub_1D1667604(v6);
  *(void *)(v3 + 16) = v6;
LABEL_3:
  uint64_t v9 = v6[2];
  v11[0] = v6 + 4;
  v11[1] = v9;
  sub_1D16ECCA4(v5 + 32, *(void *)(v5 + 16), v4, v7, v3, v11);
  *(void *)(v3 + 16) = v6;
  return swift_bridgeObjectRelease();
}

uint64_t MAMatrix.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*v4 < a3) {
    goto LABEL_19;
  }
  uint64_t v6 = a3;
  uint64_t v3 = a2;
  uint64_t v5 = (void *)v4[2];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4[2] = v5;
  if ((result & 1) == 0) {
    goto LABEL_20;
  }
  BOOL v8 = v6 == v3;
  if (v6 < v3)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  else
  {
    while (!v8)
    {
      uint64_t v9 = v4[1];
      if (v9 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_22;
      }
      if (v9 > 0x7FFFFFFF) {
        goto LABEL_23;
      }
      BOOL v10 = v6 <= v3;
      v6 -= v3;
      if (v10) {
        goto LABEL_24;
      }
      uint64_t v11 = 0;
      while (!__OFADD__(v11, 1))
      {
        if ((unsigned __int128)(v11 * (__int128)v9) >> 64 != (v11 * v9) >> 63) {
          goto LABEL_17;
        }
        if ((unsigned __int128)((v3 + v11) * (__int128)v9) >> 64 != ((v3 + v11) * v9) >> 63) {
          goto LABEL_18;
        }
        cblas_dcopy_NEWLAPACK();
        if (v6 == ++v11) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      uint64_t result = (uint64_t)sub_1D1667604(v5);
      uint64_t v5 = (void *)result;
      uint64_t v4[2] = result;
      BOOL v8 = v6 == v3;
      if (v6 < v3) {
        goto LABEL_21;
      }
    }
LABEL_13:
    uint64_t v4[2] = v5;
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t vars8;

  BOOL v8 = v3[1];
  if (v8 < a3) {
    goto LABEL_20;
  }
  uint64_t v7 = a3;
  uint64_t v6 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = (void *)v3[2];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  v3[2] = (uint64_t)v5;
  if ((result & 1) == 0) {
    goto LABEL_21;
  }
  if (v7 < v6)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  else
  {
    while (v6 != v7)
    {
      if (*v3 > 0x7FFFFFFF) {
        goto LABEL_23;
      }
      BOOL v10 = v7 - v6;
      if (__OFSUB__(v7, v6)) {
        goto LABEL_24;
      }
      if (v10 > 0x7FFFFFFF) {
        goto LABEL_25;
      }
      if (v8 < (uint64_t)0xFFFFFFFF80000000
        || v10 < (uint64_t)0xFFFFFFFF80000000
        || *v3 < (uint64_t)0xFFFFFFFF80000000)
      {
        goto LABEL_26;
      }
      if (v8 > 0x7FFFFFFF) {
        goto LABEL_27;
      }
      if (v6 >= v7) {
        goto LABEL_28;
      }
      uint64_t v11 = 0;
      uint64_t v7 = v4 + 32;
      uint64_t v6 = (uint64_t)&v5[v6 + 4];
      while (!__OFADD__(v11, 1))
      {
        cblas_dcopy_NEWLAPACK();
        v7 += 8;
        ++v11;
        v6 += 8;
        if (v10 == v11) {
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      uint64_t result = (uint64_t)sub_1D1667604(v5);
      uint64_t v5 = (void *)result;
      v3[2] = result;
      if (v7 < v6) {
        goto LABEL_22;
      }
    }
LABEL_16:
    v3[2] = (uint64_t)v5;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D16ECCA4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6 = a4 - a3;
  if (a4 >= a3)
  {
    if (a4 == a3) {
      return result;
    }
    uint64_t v11 = result;
    uint64_t v12 = 0;
    while (a3 + v12 < a4)
    {
      if (__OFADD__(v12, 1)) {
        goto LABEL_15;
      }
      uint64_t result = *(void *)(a5 + 8);
      if (result < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_16;
      }
      if (result > 0x7FFFFFFF) {
        goto LABEL_17;
      }
      if (!v11) {
        goto LABEL_21;
      }
      if ((unsigned __int128)(v12 * (__int128)result) >> 64 != (v12 * result) >> 63) {
        goto LABEL_18;
      }
      if (!*a6) {
        goto LABEL_22;
      }
      if ((unsigned __int128)((a3 + v12) * (__int128)result) >> 64 != ((a3 + v12) * result) >> 63) {
        goto LABEL_19;
      }
      uint64_t result = cblas_dcopy_NEWLAPACK();
      if (v6 == ++v12) {
        return result;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t MAMatrix.subscript.modify(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = malloc(0x30uLL);
  *a1 = v11;
  v11[4] = a3;
  v11[5] = v3;
  v11[3] = a2;
  if (*v3 < a3) {
    goto LABEL_19;
  }
  uint64_t v7 = a3 - a2;
  if (__OFSUB__(a3, a2)) {
    goto LABEL_20;
  }
  uint64_t v6 = v11;
  uint64_t v4 = v3[1];
  if ((unsigned __int128)(v7 * (__int128)v4) >> 64 != (v7 * v4) >> 63) {
    goto LABEL_21;
  }
  uint64_t v3 = (void *)v3[2];
  uint64_t v5 = (void *)sub_1D1665914(v7 * v4, 0.0);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_22;
  }
  BOOL v13 = a3 == a2;
  if (a3 < a2)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    while (!v13)
    {
      if (v4 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_24;
      }
      if (v4 > 0x7FFFFFFF) {
        goto LABEL_25;
      }
      BOOL v14 = a3 <= a2;
      a3 -= a2;
      if (v14) {
        goto LABEL_26;
      }
      uint64_t v15 = 0;
      v3 += 4;
      while (!__OFADD__(v15, 1))
      {
        if ((unsigned __int128)((a2 + v15) * (__int128)v4) >> 64 != ((a2 + v15) * v4) >> 63) {
          goto LABEL_17;
        }
        if ((unsigned __int128)(v15 * (__int128)v4) >> 64 != (v15 * v4) >> 63) {
          goto LABEL_18;
        }
        cblas_dcopy_NEWLAPACK();
        if (a3 == ++v15) {
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      uint64_t result = (uint64_t)sub_1D1667604(v5);
      uint64_t v5 = (void *)result;
      BOOL v13 = a3 == a2;
      if (a3 < a2) {
        goto LABEL_23;
      }
    }
LABEL_15:
    *uint64_t v6 = v7;
    v6[1] = v4;
    v6[2] = v5;
    return (uint64_t)sub_1D16ECF34;
  }
  return result;
}

void sub_1D16ECF34(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v5 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    if (*v5 < v4) {
      goto LABEL_35;
    }
    uint64_t v2 = (void *)v5[2];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v5[2] = v2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_36;
    }
    while (1)
    {
      uint64_t v8 = v3[3];
      uint64_t v7 = v3[4];
      if (v8 == v7)
      {
LABEL_13:
        *(void *)(v3[5] + 16) = v2;
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      uint64_t v9 = *(void *)(v3[5] + 8);
      if (v9 < (uint64_t)0xFFFFFFFF80000000) {
        break;
      }
      if (v9 > 0x7FFFFFFF) {
        goto LABEL_40;
      }
      if (v8 >= v7) {
        goto LABEL_41;
      }
      uint64_t v10 = 0;
      while (!__OFADD__(v10, 1))
      {
        if ((unsigned __int128)(v10 * (__int128)v9) >> 64 != (v10 * v9) >> 63) {
          goto LABEL_30;
        }
        if ((unsigned __int128)((v8 + v10) * (__int128)v9) >> 64 != ((v8 + v10) * v9) >> 63) {
          goto LABEL_31;
        }
        uint64_t v11 = v3[4];
        cblas_dcopy_NEWLAPACK();
        ++v10;
        if (v8 + v10 == v11) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      uint64_t v18 = v3[5];
      uint64_t v2 = sub_1D1667604(v2);
      *(void *)(v18 + 16) = v2;
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (*v5 < v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = (void *)v5[2];
    char v12 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v5[2] = v2;
    if (v12) {
      goto LABEL_16;
    }
  }
  uint64_t v19 = v3[5];
  uint64_t v2 = sub_1D1667604(v2);
  *(void *)(v19 + 16) = v2;
LABEL_16:
  uint64_t v14 = v3[3];
  uint64_t v13 = v3[4];
  if (v14 != v13)
  {
    uint64_t v15 = *(void *)(v3[5] + 8);
    if (v15 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v15 > 0x7FFFFFFF)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v14 >= v13)
    {
LABEL_44:
      __break(1u);
      return;
    }
    uint64_t v16 = 0;
    do
    {
      if (__OFADD__(v16, 1)) {
        goto LABEL_32;
      }
      if ((unsigned __int128)(v16 * (__int128)v15) >> 64 != (v16 * v15) >> 63) {
        goto LABEL_33;
      }
      if ((unsigned __int128)((v14 + v16) * (__int128)v15) >> 64 != ((v14 + v16) * v15) >> 63) {
        goto LABEL_34;
      }
      uint64_t v17 = v3[4];
      cblas_dcopy_NEWLAPACK();
      ++v16;
    }
    while (v14 + v16 != v17);
  }
  *(void *)(v3[5] + 16) = v2;
LABEL_26:
  swift_bridgeObjectRelease();
  free(v3);
}

uint64_t MAMatrix.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(v2 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 16) = v4;
  if ((result & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v2 + 8);
      if (v7 < (uint64_t)0xFFFFFFFF80000000) {
        break;
      }
      if (v7 > 0x7FFFFFFF) {
        goto LABEL_18;
      }
      swift_bridgeObjectRetain();
      uint64_t v8 = 0;
      while ((unsigned __int128)(v8 * (__int128)v7) >> 64 == (v8 * v7) >> 63)
      {
        if ((unsigned __int128)(*(uint64_t *)(a2 + 8 * v8 + 32) * (__int128)v7) >> 64 != (*(void *)(a2 + 8 * v8 + 32)
                                                                                        * v7) >> 63)
          goto LABEL_14;
        ++v8;
        cblas_dcopy_NEWLAPACK();
        if (v6 == v8)
        {
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      uint64_t result = (uint64_t)sub_1D1667604(v4);
      uint64_t v4 = (void *)result;
      *(void *)(v2 + 16) = result;
      uint64_t v6 = *(void *)(a2 + 16);
      if (!v6) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
LABEL_10:
    *(void *)(v2 + 16) = v4;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t *v2;
  void *v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t vars8;

  uint64_t v4 = (void *)v2[2];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  v2[2] = (uint64_t)v4;
  if (result)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    if (!v6) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t result = (uint64_t)sub_1D1667604(v4);
    uint64_t v4 = (void *)result;
    v2[2] = result;
    uint64_t v6 = *(void *)(a2 + 16);
    if (!v6) {
      goto LABEL_11;
    }
  }
  if (*v2 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (*v2 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 >> 31)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = v2[1];
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v7 > 0x7FFFFFFF)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = 32;
  uint64_t v9 = v6;
  do
  {
    cblas_dcopy_NEWLAPACK();
    v8 += 8;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
LABEL_11:
  v2[2] = (uint64_t)v4;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D16ED3E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    uint64_t v9 = result;
    swift_bridgeObjectRetain();
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t result = *(void *)(a4 + 8);
      if (result < (uint64_t)0xFFFFFFFF80000000) {
        break;
      }
      if (result > 0x7FFFFFFF) {
        goto LABEL_13;
      }
      if (!v9) {
        goto LABEL_16;
      }
      if ((unsigned __int128)(v10 * (__int128)result) >> 64 != (v10 * result) >> 63) {
        goto LABEL_14;
      }
      if (!*a5) {
        goto LABEL_17;
      }
      if ((unsigned __int128)(*(uint64_t *)(a3 + 8 * v10 + 32) * (__int128)result) >> 64 != (*(void *)(a3 + 8 * v10 + 32)
                                                                                           * result) >> 63)
        goto LABEL_15;
      ++v10;
      cblas_dcopy_NEWLAPACK();
      if (v5 == v10) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  return result;
}

void sub_1D16ED634(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v5 = *(void **)(v4 + 16);
  swift_bridgeObjectRetain();
  if ((a2 & 1) == 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v4 + 16) = v5;
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v3[5])
      {
LABEL_14:
        uint64_t v12 = *(void *)(v3[4] + 8);
        if (v12 < (uint64_t)0xFFFFFFFF80000000)
        {
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
        if (v12 > 0x7FFFFFFF)
        {
LABEL_36:
          __break(1u);
          return;
        }
        uint64_t v13 = v3[3] + 32;
        swift_bridgeObjectRetain();
        uint64_t v14 = 0;
        do
        {
          if ((unsigned __int128)(v14 * (__int128)v12) >> 64 != (v14 * v12) >> 63) {
            goto LABEL_27;
          }
          if ((unsigned __int128)(*(uint64_t *)(v13 + 8 * v14) * (__int128)v12) >> 64 != (*(void *)(v13 + 8 * v14)
                                                                                        * v12) >> 63)
            goto LABEL_28;
          ++v14;
          uint64_t v15 = v3[5];
          cblas_dcopy_NEWLAPACK();
        }
        while (v14 != v15);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      uint64_t v17 = v3[4];
      uint64_t v5 = sub_1D1667604(v5);
      *(void *)(v17 + 16) = v5;
      if (v3[5]) {
        goto LABEL_14;
      }
    }
    *(void *)(v3[4] + 16) = v5;
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 16) = v5;
  if ((v6 & 1) == 0) {
    goto LABEL_29;
  }
  if (v3[5])
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v3[4] + 8);
      if (v7 < (uint64_t)0xFFFFFFFF80000000) {
        break;
      }
      if (v7 > 0x7FFFFFFF) {
        goto LABEL_34;
      }
      uint64_t v8 = v3[3] + 32;
      swift_bridgeObjectRetain();
      uint64_t v9 = 0;
      while ((unsigned __int128)(v9 * (__int128)v7) >> 64 == (v9 * v7) >> 63)
      {
        if ((unsigned __int128)(*(uint64_t *)(v8 + 8 * v9) * (__int128)v7) >> 64 != (*(void *)(v8 + 8 * v9) * v7) >> 63) {
          goto LABEL_26;
        }
        ++v9;
        uint64_t v10 = v3[5];
        cblas_dcopy_NEWLAPACK();
        if (v9 == v10)
        {
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      uint64_t v16 = v3[4];
      uint64_t v5 = sub_1D1667604(v5);
      *(void *)(v16 + 16) = v5;
      if (!v3[5]) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_11:
  *(void *)(v3[4] + 16) = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_22:
  swift_bridgeObjectRelease();
  free(v3);
}

uint64_t sub_1D16ED888(uint64_t *a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (a1[1] == 1 && v6 == *a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a2[1];
    if (*a3 < v4)
    {
      uint64_t v5 = (void *)a2[2];
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      v3[2] = v5;
      if (result) {
        goto LABEL_8;
      }
      goto LABEL_16;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_16:
  uint64_t result = (uint64_t)sub_1D1667604(v5);
  uint64_t v5 = (void *)result;
  v3[2] = result;
LABEL_8:
  if (v6 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000 || v4 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_18;
  }
  if (v4 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  cblas_dcopy_NEWLAPACK();
  v3[2] = v5;
  return swift_bridgeObjectRelease();
}

void sub_1D16EDA80(uint64_t **a1, char a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)(*a1)[4];
  uint64_t v6 = **a1;
  BOOL v8 = (*a1)[1] != 1 || v6 != *v5;
  if ((a2 & 1) == 0)
  {
    if (!v8)
    {
      uint64_t v2 = v5[1];
      if (v2 > v4[3])
      {
        uint64_t v3 = (void *)v5[2];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v5[2] = v3;
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_21;
        }
        goto LABEL_39;
      }
LABEL_38:
      __break(1u);
LABEL_39:
      uint64_t v16 = v4[4];
      uint64_t v3 = sub_1D1667604(v3);
      *(void *)(v16 + 16) = v3;
LABEL_21:
      if (v6 > 0x7FFFFFFF)
      {
        __break(1u);
      }
      else if (v6 >= (uint64_t)0xFFFFFFFF80000000 && v2 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (v2 <= 0x7FFFFFFF)
        {
          uint64_t v14 = v4[4];
          cblas_dcopy_NEWLAPACK();
          *(void *)(v14 + 16) = v3;
          goto LABEL_28;
        }
LABEL_42:
        __break(1u);
        return;
      }
      __break(1u);
      goto LABEL_42;
    }
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v8)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = v5[1];
    if (v2 > v4[3])
    {
      uint64_t v3 = (void *)v5[2];
      swift_bridgeObjectRetain();
      char v9 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v5[2] = v3;
      if (v9) {
        goto LABEL_11;
      }
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_33:
  uint64_t v15 = v4[4];
  uint64_t v3 = sub_1D1667604(v3);
  *(void *)(v15 + 16) = v3;
LABEL_11:
  if (v6 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000 || v2 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_35;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v11 = v4[4];
  cblas_dcopy_NEWLAPACK();
  *(void *)(v11 + 16) = v3;
  swift_bridgeObjectRelease();
LABEL_28:
  swift_bridgeObjectRelease();
  free(v4);
}

uint64_t MAMatrix.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v10 = v4[1];
  if (v10 < a2) {
    goto LABEL_19;
  }
  char v9 = (void *)a2;
  uint64_t v8 = a1;
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    goto LABEL_20;
  }
  uint64_t v3 = a3;
  uint64_t v6 = *v4;
  int64_t v11 = *v4 * v5;
  if ((unsigned __int128)(*v4 * (__int128)v5) >> 64 != v11 >> 63) {
    goto LABEL_21;
  }
  uint64_t v4 = (uint64_t *)v4[2];
  uint64_t v7 = (void *)sub_1D1665914(v11, 0.0);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_22;
  }
  if ((uint64_t)v9 < v8)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  else
  {
    while ((void *)v8 != v9)
    {
      if (v6 > 0x7FFFFFFF) {
        goto LABEL_24;
      }
      if (v10 > 0x7FFFFFFF) {
        goto LABEL_25;
      }
      if (v5 < (uint64_t)0xFFFFFFFF80000000
        || v6 < (uint64_t)0xFFFFFFFF80000000
        || v10 < (uint64_t)0xFFFFFFFF80000000)
      {
        goto LABEL_26;
      }
      if (v5 > 0x7FFFFFFF) {
        goto LABEL_27;
      }
      if (v8 >= (uint64_t)v9) {
        goto LABEL_28;
      }
      uint64_t v13 = 0;
      char v9 = v7 + 4;
      uint64_t v8 = (uint64_t)&v4[v8 + 4];
      while (!__OFADD__(v13, 1))
      {
        uint64_t result = cblas_dcopy_NEWLAPACK();
        ++v9;
        ++v13;
        v8 += 8;
        if (v5 == v13) {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      uint64_t result = (uint64_t)sub_1D1667604(v7);
      uint64_t v7 = (void *)result;
      if ((uint64_t)v9 < v8) {
        goto LABEL_23;
      }
    }
LABEL_17:
    *uint64_t v3 = v6;
    v3[1] = v5;
    v3[2] = (uint64_t)v7;
  }
  return result;
}

double sub_1D16EDDAC@<D0>(void *a1@<X1>, void (*a2)(long long *__return_ptr, void, void)@<X3>, uint64_t a3@<X8>)
{
  a2(&v6, *a1, a1[1]);
  uint64_t v4 = v7;
  double result = *(double *)&v6;
  *(_OWORD *)a3 = v6;
  *(void *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_1D16EDE0C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v7 = a3[1];
  if (a2[1] < v7)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a2;
    uint64_t v4 = *a3;
    uint64_t v5 = *(void *)(a1 + 16);
    long long v6 = (void *)a2[2];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v3[2] = (uint64_t)v6;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_3;
    }
  }
  long long v6 = sub_1D1667604(v6);
  v3[2] = (uint64_t)v6;
LABEL_3:
  uint64_t v9 = v6[2];
  v11[0] = v6 + 4;
  v11[1] = v9;
  sub_1D16EE038(v5 + 32, *(void *)(v5 + 16), v4, v7, v3, v11);
  v3[2] = (uint64_t)v6;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D16EE038(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t v17 = result;
  if (a4 >= a3)
  {
    if (a3 == a4) {
      return result;
    }
    uint64_t v9 = 0;
    uint64_t v10 = a4 - a3;
    BOOL v11 = __OFSUB__(a4, a3);
    BOOL v15 = v11;
    uint64_t v12 = 8 * a3;
    uint64_t v13 = result;
    while (a3 + v9 < a4)
    {
      if (__OFADD__(v9, 1)) {
        goto LABEL_21;
      }
      double result = *a5;
      if (*a5 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_22;
      }
      if (result > 0x7FFFFFFF) {
        goto LABEL_23;
      }
      if (!v17) {
        goto LABEL_30;
      }
      if (v15) {
        goto LABEL_24;
      }
      if (v10 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_25;
      }
      if (v10 > 0x7FFFFFFF) {
        goto LABEL_26;
      }
      if (!*a6) {
        goto LABEL_31;
      }
      uint64_t v14 = a5[1];
      if (v14 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_27;
      }
      if (v14 > 0x7FFFFFFF) {
        goto LABEL_28;
      }
      double result = cblas_dcopy_NEWLAPACK();
      v13 += 8;
      ++v9;
      v12 += 8;
      if (v10 == v9) {
        return result;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t MAMatrix.subscript.modify(uint64_t **a1, uint64_t a2, void *a3)
{
  BOOL v11 = (uint64_t *)malloc(0x38uLL);
  *a1 = v11;
  v11[4] = (uint64_t)a3;
  v11[5] = (uint64_t)v3;
  v11[3] = a2;
  uint64_t v12 = v3[1];
  if (v12 < (uint64_t)a3) {
    goto LABEL_19;
  }
  uint64_t v7 = v11;
  uint64_t v4 = *v3;
  uint64_t v3 = (uint64_t *)v3[2];
  uint64_t v5 = (uint64_t)a3 - a2;
  v11[6] = (uint64_t)a3 - a2;
  if (__OFSUB__(a3, a2)) {
    goto LABEL_20;
  }
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63) {
    goto LABEL_21;
  }
  long long v6 = (void *)sub_1D1665914(v4 * v5, 0.0);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_22;
  }
  if ((uint64_t)a3 < a2)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  else
  {
    while ((void *)a2 != a3)
    {
      if (v4 > 0x7FFFFFFF) {
        goto LABEL_24;
      }
      if (v12 > 0x7FFFFFFF) {
        goto LABEL_25;
      }
      if (v5 < (uint64_t)0xFFFFFFFF80000000
        || v4 < (uint64_t)0xFFFFFFFF80000000
        || v12 < (uint64_t)0xFFFFFFFF80000000)
      {
        goto LABEL_26;
      }
      if (v5 > 0x7FFFFFFF) {
        goto LABEL_27;
      }
      if (a2 >= (uint64_t)a3) {
        goto LABEL_28;
      }
      uint64_t v14 = 0;
      a3 = v6 + 4;
      a2 = (uint64_t)&v3[a2 + 4];
      while (!__OFADD__(v14, 1))
      {
        cblas_dcopy_NEWLAPACK();
        ++a3;
        ++v14;
        a2 += 8;
        if (v5 == v14) {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      uint64_t result = (uint64_t)sub_1D1667604(v6);
      long long v6 = (void *)result;
      if ((uint64_t)a3 < a2) {
        goto LABEL_23;
      }
    }
LABEL_17:
    *uint64_t v7 = v4;
    v7[1] = v5;
    void v7[2] = (uint64_t)v6;
    return (uint64_t)sub_1D16EE320;
  }
  return result;
}

void sub_1D16EE320(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v29 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    if (v6 < v4) {
      goto LABEL_39;
    }
    uint64_t v2 = *(void **)(v5 + 16);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 16) = v2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_40;
    }
    while (1)
    {
      uint64_t v9 = v3[3];
      uint64_t v8 = v3[4];
      if (v9 == v8)
      {
LABEL_17:
        *(void *)(v3[5] + 16) = v2;
        swift_bridgeObjectRelease();
        goto LABEL_34;
      }
      uint64_t v10 = v3[6];
      if (v10 < (uint64_t)0xFFFFFFFF80000000) {
        break;
      }
      if (v10 > 0x7FFFFFFF) {
        goto LABEL_44;
      }
      uint64_t v11 = *(void *)v3[5];
      if (v11 > 0x7FFFFFFF) {
        goto LABEL_45;
      }
      if (v6 < (uint64_t)0xFFFFFFFF80000000 || v11 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_46;
      }
      if (v6 > 0x7FFFFFFF) {
        goto LABEL_47;
      }
      if (v9 >= v8) {
        goto LABEL_48;
      }
      uint64_t v13 = 0;
      uint64_t v14 = v29 + 32;
      uint64_t v15 = (uint64_t)&v2[v9 + 4];
      while (!__OFADD__(v13, 1))
      {
        uint64_t v16 = v3[4];
        cblas_dcopy_NEWLAPACK();
        v14 += 8;
        ++v13;
        v15 += 8;
        if (v9 + v13 == v16) {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      uint64_t v27 = v3[5];
      uint64_t v2 = sub_1D1667604(v2);
      *(void *)(v27 + 16) = v2;
    }
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v6 < v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = *(void **)(v5 + 16);
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 16) = v2;
    if (v17) {
      goto LABEL_20;
    }
  }
  uint64_t v28 = v3[5];
  uint64_t v2 = sub_1D1667604(v2);
  *(void *)(v28 + 16) = v2;
LABEL_20:
  uint64_t v19 = v3[3];
  uint64_t v18 = v3[4];
  if (v19 != v18)
  {
    uint64_t v20 = v3[6];
    if (v20 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if (v20 > 0x7FFFFFFF)
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    uint64_t v21 = *(void *)v3[5];
    if (v21 > 0x7FFFFFFF)
    {
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    if (v6 < (uint64_t)0xFFFFFFFF80000000 || v21 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_52;
    }
    if (v6 > 0x7FFFFFFF)
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v19 >= v18)
    {
LABEL_54:
      __break(1u);
      return;
    }
    uint64_t v23 = 0;
    uint64_t v24 = v29 + 32;
    uint64_t v25 = (uint64_t)&v2[v19 + 4];
    do
    {
      if (__OFADD__(v23, 1)) {
        goto LABEL_38;
      }
      uint64_t v26 = v3[4];
      cblas_dcopy_NEWLAPACK();
      v24 += 8;
      ++v23;
      v25 += 8;
    }
    while (v19 + v23 != v26);
  }
  *(void *)(v3[5] + 16) = v2;
LABEL_34:
  swift_bridgeObjectRelease();
  free(v3);
}

double sub_1D16EE5C4@<D0>(uint64_t *a1@<X1>, void (*a2)(long long *__return_ptr, uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_bridgeObjectRetain();
  a2(&v8, v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = v9;
  double result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  *(void *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_1D16EE648(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t, void, uint64_t, uint64_t, void *))
{
  uint64_t v7 = *a3;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void **)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v9 = sub_1D1667604(v9);
    *(void *)(a2 + 16) = v9;
  }
  uint64_t v11 = v9[2];
  v13[0] = v9 + 4;
  v13[1] = v11;
  a5(v8 + 32, *(void *)(v8 + 16), v7, a2, v13);
  *(void *)(a2 + 16) = v9;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D16EE844(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  unint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    uint64_t v7 = result;
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    for (uint64_t i = v7; ; i += 8)
    {
      double result = *a4;
      if (*a4 < (uint64_t)0xFFFFFFFF80000000) {
        break;
      }
      if (result > 0x7FFFFFFF) {
        goto LABEL_14;
      }
      if (!v7) {
        goto LABEL_18;
      }
      if (v5 >> 31) {
        goto LABEL_15;
      }
      if (!*a5) {
        goto LABEL_19;
      }
      uint64_t v10 = a4[1];
      if (v10 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_16;
      }
      if (v10 > 0x7FFFFFFF) {
        goto LABEL_17;
      }
      ++v8;
      cblas_dcopy_NEWLAPACK();
      if (v5 == v8) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  return result;
}

void sub_1D16EEA9C(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  uint64_t v6 = *(void **)(v4 + 16);
  swift_bridgeObjectRetain();
  if ((a2 & 1) == 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v4 + 16) = v6;
    if (isUniquelyReferenced_nonNull_native)
    {
      unint64_t v15 = v3[5];
      if (!v15) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v22 = v3[4];
      uint64_t v6 = sub_1D1667604(v6);
      *(void *)(v22 + 16) = v6;
      unint64_t v15 = v3[5];
      if (!v15) {
        goto LABEL_23;
      }
    }
    if (v15 >> 31)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    uint64_t v16 = (uint64_t *)v3[4];
    if (*v16 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (*v16 > 0x7FFFFFFF)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    uint64_t v17 = v16[1];
    if (v17 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 > 0x7FFFFFFF)
    {
LABEL_40:
      __break(1u);
      return;
    }
    uint64_t v18 = v5 + 32;
    swift_bridgeObjectRetain();
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = v3[5];
      ++v19;
      cblas_dcopy_NEWLAPACK();
      v18 += 8;
    }
    while (v19 != v20);
    swift_bridgeObjectRelease();
LABEL_23:
    *(void *)(v3[4] + 16) = v6;
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  char v7 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 16) = v6;
  if (v7)
  {
    unint64_t v8 = v3[5];
    if (v8) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v21 = v3[4];
    uint64_t v6 = sub_1D1667604(v6);
    *(void *)(v21 + 16) = v6;
    unint64_t v8 = v3[5];
    if (v8)
    {
LABEL_4:
      if (v8 >> 31)
      {
        __break(1u);
      }
      else
      {
        uint64_t v9 = (uint64_t *)v3[4];
        if (*v9 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (*v9 <= 0x7FFFFFFF)
          {
            uint64_t v10 = v9[1];
            if (v10 >= (uint64_t)0xFFFFFFFF80000000)
            {
              if (v10 <= 0x7FFFFFFF)
              {
                uint64_t v11 = v5 + 32;
                swift_bridgeObjectRetain();
                uint64_t v12 = 0;
                do
                {
                  uint64_t v13 = v3[5];
                  ++v12;
                  cblas_dcopy_NEWLAPACK();
                  v11 += 8;
                }
                while (v12 != v13);
                swift_bridgeObjectRelease();
                goto LABEL_12;
              }
              goto LABEL_35;
            }
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
      }
      __break(1u);
      goto LABEL_33;
    }
  }
LABEL_12:
  *(void *)(v3[4] + 16) = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_24:
  swift_bridgeObjectRelease();
  free(v3);
}

uint64_t MAMatrix.contents.getter()
{
  uint64_t v1 = *v0;
  int64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = sub_1D1665914(v2, 0.0);
  uint64_t v5 = (void *)sub_1D1665CE8(v4, v1);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_13;
  }
  if (v1 < 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
    while (v1)
    {
      if (v2 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_15;
      }
      if (v2 > 0x7FFFFFFF) {
        goto LABEL_16;
      }
      uint64_t v7 = 0;
      v3 += 32;
      unint64_t v8 = v5 + 4;
      while (1)
      {
        uint64_t v9 = (void *)v8[v7];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v8[v7] = v9;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v9 = sub_1D1667604(v9);
          v8[v7] = v9;
        }
        if ((unsigned __int128)(v7 * (__int128)v2) >> 64 != (v7 * v2) >> 63) {
          break;
        }
        cblas_dcopy_NEWLAPACK();
        v8[v7++] = v9;
        if (v1 == v7) {
          return (uint64_t)v5;
        }
      }
      __break(1u);
LABEL_13:
      uint64_t result = (uint64_t)sub_1D166767C(v5);
      uint64_t v5 = (void *)result;
      if (v1 < 0) {
        goto LABEL_14;
      }
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t MAMatrix.values.getter()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = *v0 * v1;
  if ((unsigned __int128)(*v0 * (__int128)v1) >> 64 == v2 >> 63)
  {
    uint64_t v0 = (uint64_t *)sub_1D1665914(*v0 * v1, 0.0);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (uint64_t)sub_1D1667604(v0);
  uint64_t v0 = (uint64_t *)result;
LABEL_3:
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFF)
  {
    cblas_dcopy_NEWLAPACK();
    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

uint64_t MAMatrix.indices(_:)(uint64_t (*a1)(unint64_t, double))
{
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_1D16FA3D0(v2, a1);
  int64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    sub_1D16826DC(0, v4, 0);
    uint64_t v5 = v11;
    unint64_t v6 = *(void *)(v11 + 16);
    uint64_t v7 = 32;
    do
    {
      uint64_t v8 = *(void *)(v3 + v7);
      unint64_t v9 = *(void *)(v11 + 24);
      if (v6 >= v9 >> 1) {
        sub_1D16826DC(v9 > 1, v6 + 1, 1);
      }
      *(void *)(v11 + 16) = v6 + 1;
      *(void *)(v11 + 8 * v6 + 32) = v8;
      v7 += 16;
      ++v6;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return v5;
}

uint64_t MAMatrix.description.getter()
{
  return MAMatrix.description(integerPrecision:doublePrecision:)(20, 10)._countAndFlagsBits;
}

uint64_t sub_1D16EF02C()
{
  return MAMatrix.description(integerPrecision:doublePrecision:)(20, 10)._countAndFlagsBits;
}

void MAMatrix.makeIterator()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = *v0 * v2;
  if ((unsigned __int128)(*v0 * (__int128)v2) >> 64 == v3 >> 63)
  {
    uint64_t v4 = v0[2];
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = 0;
    unint64_t v6 = (void *)swift_allocObject();
    v6[2] = v5;
    v6[3] = v3;
    v6[4] = v1;
    v6[5] = v2;
    v6[6] = v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E98);
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_1D1698260;
    *(void *)(v7 + 24) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1D16EF134@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void *)(result + 16);
  if (v4 == a2)
  {
    uint64_t v5 = 0;
LABEL_7:
    *(void *)a4 = v5;
    *(unsigned char *)(a4 + 8) = v4 == a2;
    return result;
  }
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_9;
  }
  *(void *)(result + 16) = v4 + 1;
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 < *(void *)(a3 + 16))
  {
    uint64_t v5 = *(void *)(a3 + 8 * v4 + 32);
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t MAMatrix.sorted(by:)@<X0>(uint64_t (*a1)(__n128, double)@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain_n();
  sub_1D16FAC68(&v9, a1);
  if (v3)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v7 = v9;
    uint64_t v8 = *(void *)(v9 + 16);
    *a2 = 1;
    a2[1] = v8;
    a2[2] = v7;
  }
  return result;
}

void sub_1D16EF238(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = *v1 * v4;
  if ((unsigned __int128)(*v1 * (__int128)v4) >> 64 == v5 >> 63)
  {
    uint64_t v6 = v1[2];
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = 0;
    uint64_t v8 = (void *)swift_allocObject();
    v8[2] = v7;
    int64_t v8[3] = v5;
    v8[4] = v3;
    v8[5] = v4;
    v8[6] = v6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E98);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = sub_1D1698260;
    *(void *)(v9 + 24) = v8;
    *a1 = v9;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1D16EF2FC()
{
  uint64_t v1 = sub_1D1694678(*v0, v0[1], v0[2]);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1D16EF338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D16E613C(a1, a2, a3, *v3, v3[1], v3[2]);
}

BOOL static MAMatrix.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && sub_1D16667AC(a1[2], a2[2]);
}

BOOL sub_1D16EF36C(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && sub_1D16667AC(a1[2], a2[2]);
}

Swift::Void __swiftcall MAMatrix.inverse()()
{
  if (*v1 != v1[1])
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v0 = (void *)v1[2];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v1[2] = (uint64_t)v0;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_5:
    uint64_t v0 = sub_1D1667604(v0);
    v1[2] = (uint64_t)v0;
  }
  uint64_t v3 = v0[2];
  v4[0] = v0 + 4;
  v4[1] = v3;
  sub_1D16EF418((uint64_t)v4, v1);
  v1[2] = (uint64_t)v0;
}

uint64_t sub_1D16EF418(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unsigned __int128)(v3 * (__int128)v3) >> 64 != (v3 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v4 = sub_1D1665BFC(0, v3 * v3);
  uint64_t v5 = a2[1];
  int64_t v6 = v5 * v5;
  if ((unsigned __int128)(v5 * (__int128)v5) >> 64 != (v5 * v5) >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v6 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = sub_1D1665914(v6, 0.0);
  uint64_t v8 = a2[1];
  if (v8 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  if (v8 > 0x7FFFFFFF) {
    goto LABEL_17;
  }
  uint64_t v9 = (void *)v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1D169D294(0, *(void *)(v4 + 16), 0, (char *)v4);
  }
  dgetrf_NEWLAPACK();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1D169C770(0, v9[2], 0, v9);
  }
  dgetri_NEWLAPACK();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

Swift::Void __swiftcall MAMatrix.setDiag(value:)(Swift::Double value)
{
  unint64_t v2 = *v1;
  if (*v1 == v1[1])
  {
    uint64_t v3 = sub_1D1665914(*v1, value);
    v4[0] = 1;
    v4[1] = v2;
    void v4[2] = v3;
    v6.rows = (Swift::Int)v4;
    MAMatrix.setDiag(vector:)(v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.triu()()
{
  uint64_t v4 = v0;
  uint64_t v6 = *v1;
  uint64_t v5 = v1[1];
  int64_t v7 = v5 * *v1;
  if ((unsigned __int128)(v5 * (__int128)*v1) >> 64 != v7 >> 63)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v1 = (uint64_t *)v1[2];
  uint64_t v3 = (void *)sub_1D1665914(v7, 0.0);
  uint64_t v2 = v1[2];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_5:
  }
    uint64_t v3 = sub_1D1667604(v3);
  uint64_t v8 = v3[2];
  v12[0] = v3 + 4;
  v12[1] = v8;
  Swift::Int v9 = sub_1D16EF6E8((uint64_t)v12, (uint64_t)(v1 + 4), v2, v6, v5);
  *uint64_t v4 = v5;
  v4[1] = v6;
  void v4[2] = (uint64_t)v3;
  result.elements._rawValue = v11;
  result.columns = v10;
  result.rows = v9;
  return result;
}

uint64_t sub_1D16EF6E8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    goto LABEL_25;
  }
  if (!*(void *)result)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  uint64_t v5 = a4 - 1;
  if (__OFSUB__(a4, 1)) {
    goto LABEL_23;
  }
  if (v5 < 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (a4 != 1)
  {
    uint64_t v7 = 0;
    unint64_t v8 = a5 ^ 0x8000000000000000;
    while (1)
    {
      uint64_t v9 = a5 - v7;
      if (__OFSUB__(a5, v7)) {
        break;
      }
      if (v8 == v7) {
        goto LABEL_17;
      }
      uint64_t v10 = v7 * a5;
      if ((unsigned __int128)(v7 * (__int128)a5) >> 64 != (v7 * a5) >> 63) {
        goto LABEL_18;
      }
      BOOL v11 = __OFADD__(v10, v7);
      uint64_t v12 = v10 + v7;
      if (v11) {
        goto LABEL_19;
      }
      if (__OFADD__(v12, 1)) {
        goto LABEL_20;
      }
      KnowledgeGraphKit::MAMatrix result = v9 - 1;
      if (v9 - 1 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_21;
      }
      if (result > 0x7FFFFFFF) {
        goto LABEL_22;
      }
      ++v7;
      KnowledgeGraphKit::MAMatrix result = cblas_dcopy_NEWLAPACK();
      if (v5 == v7) {
        return result;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.tril()()
{
  uint64_t v3 = v0;
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  int64_t v6 = v5 * *v1;
  if ((unsigned __int128)(v5 * (__int128)*v1) >> 64 != v6 >> 63) {
    goto LABEL_12;
  }
  uint64_t v2 = v1[2];
  uint64_t v1 = (uint64_t *)sub_1D1665914(v6, 0.0);
  Swift::Int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_13;
  }
  BOOL v10 = v4 == 1;
  if (v4 < 1)
  {
LABEL_14:
    __break(1u);
  }
  else
  {
    while (!v10)
    {
      v2 += 32;
      Swift::Int isUniquelyReferenced_nonNull_native = 1;
      while (isUniquelyReferenced_nonNull_native != 0x80000000)
      {
        if ((unsigned __int128)(isUniquelyReferenced_nonNull_native * (__int128)v5) >> 64 != (isUniquelyReferenced_nonNull_native
                                                                                             * v5) >> 63)
          goto LABEL_11;
        Swift::Int v11 = isUniquelyReferenced_nonNull_native + 1;
        cblas_dcopy_NEWLAPACK();
        Swift::Int isUniquelyReferenced_nonNull_native = v11;
        if (v4 == v11) {
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_11:
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      Swift::Int isUniquelyReferenced_nonNull_native = (Swift::Int)sub_1D1667604(v1);
      uint64_t v1 = (uint64_t *)isUniquelyReferenced_nonNull_native;
      BOOL v10 = v4 == 1;
      if (v4 < 1) {
        goto LABEL_14;
      }
    }
LABEL_9:
    *uint64_t v3 = v5;
    v3[1] = v4;
    v3[2] = (uint64_t)v1;
  }
  result.elements._rawValue = v9;
  result.columns = v8;
  result.rows = isUniquelyReferenced_nonNull_native;
  return result;
}

void __swiftcall MAMatrix.evd()(Swift::tuple_values_KnowledgeGraphKit_MAMatrix_vectors_KnowledgeGraphKit_MAMatrix *__return_ptr retstr)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int64_t v6 = *v1;
  if (*v1 != v1[1])
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v6 <= 0x7FFFFFFF)
  {
    uint64_t v1 = (int64_t *)v1[2];
    int v28 = v6;
    int v29 = v6;
    int v26 = v6;
    int v27 = v6;
    uint64_t v3 = (void *)sub_1D1665914(v6, 0.0);
    uint64_t v5 = (void *)sub_1D1665914(v6, 0.0);
    uint64_t v2 = (void *)sub_1D1665914(v6 * v6, 0.0);
    uint64_t v4 = (void *)sub_1D1665914(v6 * v6, 0.0);
    int v25 = 0;
    double v24 = 0.0;
    int v23 = -1;
    swift_bridgeObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  uint64_t v1 = sub_1D1667604(v1);
LABEL_5:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_1D1667604(v3);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_1D1667604(v5);
  }
  uint64_t v7 = v1;
  Swift::Int v8 = v3 + 4;
  uint64_t v9 = v5 + 4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1D1667604(v2);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = sub_1D1667604(v4);
  }
  dgeev_NEWLAPACK();
  if ((~*(void *)&v24 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v24 <= -2147483650.0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v24 < 2147483650.0)
  {
    int v23 = (int)v24;
    uint64_t v9 = (void *)sub_1D1665914((int)v24, 0.0);
    Swift::Int v8 = v7;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  sub_1D1667604(v8);
LABEL_17:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_1D1667604(v3);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1D1667604(v5);
  }
  uint64_t v18 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1D1667604(v2);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v18 = sub_1D1667604(v4);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1D169C770(0, v9[2], 0, v9);
  }
  dgeev_NEWLAPACK();
  swift_bridgeObjectRetain_n();
  uint64_t v10 = sub_1D1695188((uint64_t)v3);
  swift_bridgeObjectRelease();
  uint64_t rawValue = v10;
  sub_1D16E759C(&rawValue, sub_1D16FA2C4, sub_1D16F871C);
  swift_bridgeObjectRelease();
  uint64_t v11 = rawValue;
  int64_t v12 = *(void *)(rawValue + 16);
  if (v12)
  {
    uint64_t rawValue = MEMORY[0x1E4FBC860];
    sub_1D16826DC(0, v12, 0);
    v13._uint64_t rawValue = (void *)rawValue;
    unint64_t v14 = *(void *)(rawValue + 16);
    uint64_t v15 = 32;
    do
    {
      uint64_t v16 = *(void *)(v11 + v15);
      uint64_t rawValue = (uint64_t)v13._rawValue;
      unint64_t v17 = *((void *)v13._rawValue + 3);
      if (v14 >= v17 >> 1)
      {
        sub_1D16826DC(v17 > 1, v14 + 1, 1);
        v13._uint64_t rawValue = (void *)rawValue;
      }
      *((void *)v13._rawValue + 2) = v14 + 1;
      *((void *)v13._rawValue + v14 + 4) = v16;
      v15 += 16;
      ++v14;
      --v12;
    }
    while (v12);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    v13._uint64_t rawValue = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t rawValue = 1;
  int64_t v21 = v6;
  uint64_t v22 = v3;
  char v19 = 1;
  swift_bridgeObjectRetain();
  MAMatrix.swap(indices:axe:)(v13, (KnowledgeGraphKit::MAMatrixAxes)&v19);
  swift_bridgeObjectRelease();
  uint64_t rawValue = v6;
  int64_t v21 = v6;
  uint64_t v22 = v18;
  char v19 = 0;
  swift_bridgeObjectRetain();
  MAMatrix.swap(indices:axe:)(v13, (KnowledgeGraphKit::MAMatrixAxes)&v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.swap(indices:axe:)(Swift::OpaquePointer indices, KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t v5 = v2;
  uint64_t v6 = *v3;
  uint64_t v7 = v3[1];
  int64_t v8 = *v3 * v7;
  if ((unsigned __int128)(*v3 * (__int128)v7) >> 64 != v8 >> 63)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  int v9 = *(unsigned __int8 *)axe;
  Swift::Int v10 = sub_1D1665914(v8, 0.0);
  Swift::OpaquePointer v13 = (void *)v10;
  uint64_t v14 = *((void *)indices._rawValue + 2);
  if (v9 != 1)
  {
    if (v14 != v6)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (!v6) {
      goto LABEL_28;
    }
    int v23 = v5;
    swift_bridgeObjectRetain();
    if (v7 < 0)
    {
LABEL_37:
      Swift::Int v10 = sub_1D17BEA30();
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v19 = 0;
    uint64_t v20 = (char *)indices._rawValue + 32;
    while (1)
    {
      uint64_t v21 = *(void *)&v20[8 * v19];
      swift_bridgeObjectRetain();
      if (v7)
      {
        uint64_t v22 = sub_1D17BE1C0();
        *(void *)(v22 + 16) = v7;
        bzero((void *)(v22 + 32), 8 * v7);
        if (v7 > 0x7FFFFFFF) {
          break;
        }
      }
      if ((unsigned __int128)(v21 * (__int128)v7) >> 64 != (v21 * v7) >> 63) {
        goto LABEL_31;
      }
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::OpaquePointer v13 = sub_1D1667604(v13);
      }
      if ((unsigned __int128)(v19 * (__int128)v7) >> 64 != (v19 * v7) >> 63) {
        goto LABEL_33;
      }
      ++v19;
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      if (v6 == v19)
      {
LABEL_27:
        Swift::Int v10 = swift_bridgeObjectRelease();
        uint64_t v5 = v23;
        goto LABEL_28;
      }
    }
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v14 != v7)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v7)
  {
    int v23 = v5;
    swift_bridgeObjectRetain();
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v15 = 32;
      unint64_t v16 = (unint64_t)v7 >> 31;
      uint64_t v17 = v7;
      while (1)
      {
        swift_bridgeObjectRetain();
        if (v6)
        {
          uint64_t v18 = sub_1D17BE1C0();
          *(void *)(v18 + 16) = v6;
          bzero((void *)(v18 + 32), 8 * v6);
          if (v6 > 0x7FFFFFFF)
          {
            __break(1u);
            goto LABEL_30;
          }
          if (v16) {
            goto LABEL_32;
          }
        }
        else if (v16)
        {
          goto LABEL_32;
        }
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::OpaquePointer v13 = sub_1D1667604(v13);
        }
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        v15 += 8;
        if (!--v17) {
          goto LABEL_27;
        }
      }
    }
    goto LABEL_37;
  }
LABEL_28:
  *uint64_t v5 = v6;
  v5[1] = v7;
  uint64_t v5[2] = (uint64_t)v13;
LABEL_38:
  result.elements._uint64_t rawValue = v12;
  result.columns = v11;
  result.rows = v10;
  return result;
}

Swift::Void __swiftcall MAMatrix.signalNormalize(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  if (*(unsigned char *)axe == 1)
  {
    uint64_t v2 = v1[1];
    vDSP_Length v4 = v1[2];
    *(void *)&long long v17 = *v1;
    uint64_t v3 = v17;
    *((void *)&v17 + 1) = v2;
    vDSP_Length v18 = v4;
    LOBYTE(v16[0]) = 1;
    MAMatrix.max(axe:)((KnowledgeGraphKit::MAMatrixAxes)v16);
    uint64_t v5 = v20;
    uint64_t v13 = *((void *)&v19 + 1);
    uint64_t v14 = v19;
    *(void *)&long long v17 = v3;
    *((void *)&v17 + 1) = v2;
    vDSP_Length v18 = v4;
    LOBYTE(v16[0]) = 1;
    MAMatrix.min(axe:)((KnowledgeGraphKit::MAMatrixAxes)v16);
    uint64_t v7 = *((void *)&v19 + 1);
    uint64_t v6 = v19;
    uint64_t v8 = v20;
    *(void *)&long long v17 = v3;
    *((void *)&v17 + 1) = v2;
    vDSP_Length v18 = v4;
    if ((v2 & 0x8000000000000000) == 0)
    {
      LOBYTE(v16[0]) = 1;
      MAMatrix.mean(range:axe:)(0, v2, v16, (uint64_t *)&v19);
      -= infix(_:_:)(v1, (uint64_t)&v19);
      swift_bridgeObjectRelease();
      *(void *)&long long v17 = v14;
      *((void *)&v17 + 1) = v13;
LABEL_6:
      vDSP_Length v18 = v5;
      v16[0] = v6;
      v16[1] = v7;
      void v16[2] = v8;
      - infix(_:_:)((int64_t *)&v17, v16, (int64_t *)&v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v17 = v19;
      vDSP_Length v18 = v20;
      /= infix(_:_:)(v1, (uint64_t)&v17);
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  else
  {
    vDSP_Length v10 = v1[1];
    vDSP_Length v11 = v1[2];
    *(void *)&long long v17 = *v1;
    uint64_t v9 = v17;
    *((void *)&v17 + 1) = v10;
    vDSP_Length v18 = v11;
    LOBYTE(v16[0]) = 0;
    MAMatrix.max(axe:)((KnowledgeGraphKit::MAMatrixAxes)v16);
    uint64_t v12 = *((void *)&v19 + 1);
    uint64_t v15 = v19;
    uint64_t v5 = v20;
    *(void *)&long long v17 = v9;
    *((void *)&v17 + 1) = v10;
    vDSP_Length v18 = v11;
    LOBYTE(v16[0]) = 0;
    MAMatrix.min(axe:)((KnowledgeGraphKit::MAMatrixAxes)v16);
    uint64_t v7 = *((void *)&v19 + 1);
    uint64_t v6 = v19;
    uint64_t v8 = v20;
    *(void *)&long long v17 = v9;
    *((void *)&v17 + 1) = v10;
    vDSP_Length v18 = v11;
    if ((v9 & 0x8000000000000000) == 0)
    {
      LOBYTE(v16[0]) = 0;
      MAMatrix.mean(range:axe:)(0, v9, v16, (uint64_t *)&v19);
      -= infix(_:_:)(v1, (uint64_t)&v19);
      swift_bridgeObjectRelease();
      *(void *)&long long v17 = v15;
      *((void *)&v17 + 1) = v12;
      goto LABEL_6;
    }
  }
  __break(1u);
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.min(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t v2 = (void (*)(unint64_t, uint64_t, void *, uint64_t *, uint64_t))MEMORY[0x1E4F169E0];
  Swift::Int v3 = sub_1D16F03B8((unsigned char *)axe, v2, v1);
  result.elements._uint64_t rawValue = v5;
  result.columns = v4;
  result.rows = v3;
  return result;
}

uint64_t sub_1D16F03B8@<X0>(unsigned char *a1@<X0>, void (*a2)(unint64_t, uint64_t, void *, uint64_t *, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *v3;
  uint64_t v6 = v3[1];
  unint64_t v8 = v3[2];
  if (*a1 == 1)
  {
    uint64_t result = sub_1D1665914(v3[1], 0.0);
    if (v6 < 0)
    {
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
    }
    vDSP_Length v10 = (void *)result;
    if (v6)
    {
      unint64_t v11 = 0;
      unint64_t v12 = v8 + 32;
      while (v6 != v11)
      {
        uint64_t v16 = 0;
        v17[0] = 0;
        if (v7 < 0) {
          goto LABEL_37;
        }
        a2(v12, v6, v17, &v16, v7);
        if (v16 < 0) {
          goto LABEL_29;
        }
        uint64_t v13 = v17[0];
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1D1667604(v10);
          vDSP_Length v10 = (void *)result;
        }
        if (v11 >= v10[2]) {
          goto LABEL_30;
        }
        v10[v11 + 4] = v13;
        v12 += 8;
        if (v6 == ++v11) {
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_25:
    uint64_t v7 = 1;
    goto LABEL_27;
  }
  uint64_t result = sub_1D1665914(*v3, 0.0);
  if (v7 < 0) {
    goto LABEL_36;
  }
  vDSP_Length v10 = (void *)result;
  if (!v7)
  {
LABEL_26:
    uint64_t v6 = 1;
LABEL_27:
    *a3 = v7;
    a3[1] = v6;
    a3[2] = (uint64_t)v10;
    return result;
  }
  unint64_t v14 = 0;
  while (1)
  {
    if (v7 == v14) {
      goto LABEL_31;
    }
    uint64_t v16 = 0;
    v17[0] = 0;
    if ((unsigned __int128)((uint64_t)v14 * (__int128)v6) >> 64 != (uint64_t)(v14 * v6) >> 63) {
      goto LABEL_32;
    }
    if (v6 < 0) {
      break;
    }
    a2(v8 + 32 + 8 * v14 * v6, 1, v17, &v16, v6);
    if (v16 < 0) {
      goto LABEL_33;
    }
    uint64_t v15 = v17[0];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1D1667604(v10);
      vDSP_Length v10 = (void *)result;
    }
    if (v14 >= v10[2]) {
      goto LABEL_34;
    }
    v10[v14++ + 4] = v15;
    if (v7 == v14) {
      goto LABEL_26;
    }
  }
LABEL_37:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

void -= infix(_:_:)(vDSP_Length *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  Swift::Int v4 = *(double **)a2;
  vDSP_Stride v3 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int64_t v6 = a1[1];
  if (v6 == v3)
  {
    if (v4 == (double *)1)
    {
      int64_t v6 = a1[2];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      a1[2] = v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_40;
      }
      while ((v3 & 0x8000000000000000) == 0)
      {
        if (!v3) {
          goto LABEL_11;
        }
        unint64_t v8 = 0;
        Swift::Int v4 = (double *)(v6 + 32);
        vDSP_Length v9 = *a1;
        while (v3 != v8)
        {
          if (v8 >= *(void *)(v5 + 16)) {
            goto LABEL_37;
          }
          double __B = -*(double *)(v5 + 32 + 8 * v8);
          if ((v9 & 0x8000000000000000) != 0)
          {
LABEL_44:
            sub_1D17BEA30();
            __break(1u);
            goto LABEL_45;
          }
          ++v8;
          vDSP_vsaddD(v4, v3, &__B, v4, v3, v9);
          ++v4;
          if (v3 == v8)
          {
LABEL_11:
            a1[2] = v6;
            return;
          }
        }
        while (1)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          vDSP_Stride v3 = (vDSP_Stride)sub_1D1667604((void *)v3);
          a1[2] = v3;
          if (((unint64_t)v4 & 0x8000000000000000) != 0) {
            break;
          }
LABEL_19:
          if (!v4) {
            goto LABEL_31;
          }
          uint64_t v12 = 0;
          while (v4 != (double *)v12)
          {
            if ((unint64_t)v12 >= *(void *)(v5 + 16)) {
              goto LABEL_34;
            }
            double __B = -*(double *)(v5 + 32 + 8 * v12);
            int64_t v13 = v12 * v6;
            if ((unsigned __int128)(v12 * (__int128)v6) >> 64 != (v12 * v6) >> 63) {
              goto LABEL_35;
            }
            if (v6 < 0) {
              goto LABEL_44;
            }
            ++v12;
            vDSP_vsaddD((const double *)(v3 + 32 + 8 * v13), 1, &__B, (double *)(v3 + 32 + 8 * v13), 1, v6);
            if (v4 == (double *)v12) {
              goto LABEL_31;
            }
          }
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
        }
LABEL_39:
        __break(1u);
LABEL_40:
        int64_t v6 = (int64_t)sub_1D1667604((void *)v6);
        a1[2] = v6;
      }
      __break(1u);
    }
    else
    {
      if ((double *)*a1 != v4) {
        goto LABEL_45;
      }
      vDSP_Stride v3 = a1[2];
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_29;
      }
    }
    vDSP_Stride v3 = (vDSP_Stride)sub_1D1667604((void *)v3);
LABEL_29:
    if (*(void *)(v5 + 16) >> 31) {
      __break(1u);
    }
    cblas_daxpy_NEWLAPACK();
LABEL_31:
    a1[2] = v3;
    return;
  }
  if (v3 == 1 && *a1 == (void)v4)
  {
    vDSP_Stride v3 = a1[2];
    char v11 = swift_isUniquelyReferenced_nonNull_native();
    a1[2] = v3;
    if ((v11 & 1) == 0) {
      goto LABEL_38;
    }
    if (((unint64_t)v4 & 0x8000000000000000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_19;
  }
LABEL_45:
  double __B = 0.0;
  unint64_t v15 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1D17BE850();
  swift_bridgeObjectRelease();
  double __B = -2.31584178e77;
  unint64_t v15 = 0x80000001D17D62B0;
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  sub_1D17BEA40();
  __break(1u);
}

Swift::Void __swiftcall MAMatrix.pow(alpha:)(Swift::Double alpha)
{
  vDSP_Stride v3 = (void *)v1[2];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v1[2] = (uint64_t)v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    vDSP_Stride v3 = sub_1D1667604(v3);
    v1[2] = (uint64_t)v3;
  }
  uint64_t v5 = (double *)v3[2];
  v6[0] = (double *)(v3 + 4);
  v6[1] = v5;
  sub_1D16F19B4(v6, v1, alpha);
  v1[2] = (uint64_t)v3;
}

void + infix(_:_:)(uint64_t *a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  __B[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  swift_bridgeObjectRetain();
  if (swift_isUniquelyReferenced_nonNull_native()) {
    unint64_t v8 = (double *)v7;
  }
  else {
    unint64_t v8 = (double *)sub_1D1667604((void *)v7);
  }
  __B[0] = a3;
  vDSP_Length v9 = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63) {
    __break(1u);
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    vDSP_vsaddD((const double *)(v7 + 32), 1, __B, v8 + 4, 1, v9);
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v8;
  }
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  vDSP_Length v9;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  swift_bridgeObjectRetain();
  if (swift_isUniquelyReferenced_nonNull_native()) {
    unint64_t v8 = (double *)v7;
  }
  else {
    unint64_t v8 = (double *)sub_1D1667604((void *)v7);
  }
  __B[0] = a3;
  vDSP_Length v9 = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63) {
    __break(1u);
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    vDSP_vsaddD((const double *)(v7 + 32), 1, __B, v8 + 4, 1, v9);
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v8;
  }
}

uint64_t += infix(_:_:)(uint64_t *a1, double a2)
{
  __B[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  swift_bridgeObjectRetain();
  uint64_t v7 = (double *)v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = (double *)sub_1D1667604((void *)v6);
  }
  __B[0] = a2;
  vDSP_Length v8 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63) {
    __break(1u);
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    vDSP_vsaddD((const double *)(v6 + 32), 1, __B, v7 + 4, 1, v8);
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v4;
    a1[1] = v5;
    a1[2] = (uint64_t)v7;
  }
  return result;
}

void - infix(_:_:)(uint64_t *a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  __B[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  double v7 = -a3;
  swift_bridgeObjectRetain();
  if (swift_isUniquelyReferenced_nonNull_native()) {
    vDSP_Length v8 = (double *)v6;
  }
  else {
    vDSP_Length v8 = (double *)sub_1D1667604((void *)v6);
  }
  __B[0] = v7;
  vDSP_Length v9 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63) {
    __break(1u);
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    vDSP_vsaddD((const double *)(v6 + 32), 1, __B, v8 + 4, 1, v9);
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v8;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = (double *)a1[2];
  __B[0] = a3;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (((v4 * v5) & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_4:
      vDSP_vnegD(v6 + 4, 1, v6 + 4, 1, v4 * v5);
      vDSP_vsaddD(v6 + 4, 1, __B, v6 + 4, 1, v4 * v5);
      *a2 = v4;
      a2[1] = v5;
      a2[2] = v6;
      return;
    }
LABEL_6:
    uint64_t v6 = (double *)sub_1D1667604(v6);
    goto LABEL_4;
  }
  sub_1D17BEA30();
  __break(1u);
}

uint64_t -= infix(_:_:)(uint64_t *a1, double a2)
{
  __B[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  double v6 = -a2;
  swift_bridgeObjectRetain();
  double v7 = (double *)v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    double v7 = (double *)sub_1D1667604((void *)v5);
  }
  __B[0] = v6;
  vDSP_Length v8 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63) {
    __break(1u);
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    vDSP_vsaddD((const double *)(v5 + 32), 1, __B, v7 + 4, 1, v8);
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v3;
    a1[1] = v4;
    a1[2] = (uint64_t)v7;
  }
  return result;
}

void *= infix(_:_:)(vDSP_Length *a1, uint64_t a2)
{
  double __B[2] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v4 = *(double **)a2;
  vDSP_Stride v3 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int64_t v6 = a1[1];
  if (v6 != v3)
  {
    if (v3 == 1 && *a1 == (void)v4)
    {
      vDSP_Stride v3 = a1[2];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      a1[2] = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_39;
      }
      if (((unint64_t)v4 & 0x8000000000000000) != 0) {
        goto LABEL_40;
      }
      goto LABEL_19;
    }
    goto LABEL_46;
  }
  if (v4 == (double *)1)
  {
    int64_t v6 = a1[2];
    char v7 = swift_isUniquelyReferenced_nonNull_native();
    a1[2] = v6;
    if ((v7 & 1) == 0) {
      goto LABEL_41;
    }
    while ((v3 & 0x8000000000000000) == 0)
    {
      if (!v3) {
        goto LABEL_32;
      }
      unint64_t v8 = 0;
      uint64_t v4 = (double *)(v6 + 32);
      vDSP_Length v9 = *a1;
      while (v3 != v8)
      {
        if (v8 >= *(void *)(v5 + 16)) {
          goto LABEL_38;
        }
        __B[0] = *(double *)(v5 + 32 + 8 * v8);
        if ((v9 & 0x8000000000000000) != 0) {
          goto LABEL_45;
        }
        ++v8;
        vDSP_vsmulD(v4, v3, __B, v4, v3, v9);
        ++v4;
        if (v3 == v8) {
          goto LABEL_32;
        }
      }
      while (1)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        vDSP_Stride v3 = (vDSP_Stride)sub_1D1667604((void *)v3);
        a1[2] = v3;
        if (((unint64_t)v4 & 0x8000000000000000) != 0) {
          break;
        }
LABEL_19:
        if (!v4)
        {
LABEL_26:
          a1[2] = v3;
          return;
        }
        uint64_t v12 = 0;
        while (v4 != (double *)v12)
        {
          if ((unint64_t)v12 >= *(void *)(v5 + 16)) {
            goto LABEL_35;
          }
          __B[0] = *(double *)(v5 + 32 + 8 * v12);
          int64_t v13 = v12 * v6;
          if ((unsigned __int128)(v12 * (__int128)v6) >> 64 != (v12 * v6) >> 63) {
            goto LABEL_36;
          }
          if (v6 < 0) {
            goto LABEL_45;
          }
          ++v12;
          vDSP_vsmulD((const double *)(v3 + 32 + 8 * v13), 1, __B, (double *)(v3 + 32 + 8 * v13), 1, v6);
          if (v4 == (double *)v12) {
            goto LABEL_26;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
      }
LABEL_40:
      __break(1u);
LABEL_41:
      int64_t v6 = (int64_t)sub_1D1667604((void *)v6);
      a1[2] = v6;
    }
    __break(1u);
LABEL_43:
    int64_t v6 = (int64_t)sub_1D1667604((void *)v6);
    a1[2] = v6;
    goto LABEL_29;
  }
  if ((double *)*a1 != v4)
  {
LABEL_46:
    __B[0] = 0.0;
    __B[1] = -2.68156159e154;
    swift_bridgeObjectRetain();
    sub_1D17BE850();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEB70();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();
    sub_1D17BEA40();
    __break(1u);
    return;
  }
  int64_t v6 = a1[2];
  char v14 = swift_isUniquelyReferenced_nonNull_native();
  a1[2] = v6;
  if ((v14 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_29:
  vDSP_Length v15 = (void)v4 * v3;
  if ((unsigned __int128)((uint64_t)v4 * (__int128)v3) >> 64 != ((uint64_t)v4 * v3) >> 63) {
    __break(1u);
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
LABEL_45:
    sub_1D17BEA30();
    __break(1u);
    goto LABEL_46;
  }
  vDSP_vmulD((const double *)(v5 + 32), 1, (const double *)(v6 + 32), 1, (double *)(v6 + 32), 1, v15);
LABEL_32:
  a1[2] = v6;
}

unint64_t *= infix(_:_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)a1[2];
  swift_bridgeObjectRetain();
  uint64_t v5 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_1D1667604(v4);
  }
  unint64_t result = v4[2];
  if (result >> 31)
  {
    __break(1u);
  }
  else
  {
    cblas_dscal_NEWLAPACK();
    unint64_t result = swift_bridgeObjectRelease();
    *a1 = v2;
    a1[1] = v3;
    a1[2] = (uint64_t)v5;
  }
  return result;
}

uint64_t </> infix(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  vDSP_Length v9 = (void *)a2[2];
  v16[0] = v8;
  v16[1] = v7;
  if (v8 == v7)
  {
    swift_bridgeObjectRetain();
    long long v17 = v9;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  vDSP_Length v9 = sub_1D1667604(v9);
  long long v17 = v9;
LABEL_3:
  uint64_t v10 = v9[2];
  int64_t v13 = v9 + 4;
  uint64_t v14 = v10;
  uint64_t result = sub_1D16EF418((uint64_t)&v13, v16);
  if (v4 == v8)
  {
    int64_t v13 = (void *)v5;
    uint64_t v14 = v4;
    uint64_t v15 = v6;
    v12[0] = v4;
    v12[1] = v4;
    void v12[2] = v9;
    <*> infix(_:_:)((uint64_t *)&v13, v12, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void / infix(_:_:)(uint64_t *a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  __A[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  swift_bridgeObjectRetain();
  if (swift_isUniquelyReferenced_nonNull_native()) {
    uint64_t v8 = (double *)v7;
  }
  else {
    uint64_t v8 = (double *)sub_1D1667604((void *)v7);
  }
  __A[0] = a3;
  vDSP_Length v9 = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63) {
    __break(1u);
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    vDSP_svdivD(__A, (const double *)(v7 + 32), 1, v8 + 4, 1, v9);
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v8;
  }
}

Swift::Void __swiftcall MAMatrix.exp()()
{
  uint64_t v0 = (uint64_t (*)(void *, void *, int *))MEMORY[0x1E4F17268];
  sub_1D16F1B64(v0);
}

Swift::Void __swiftcall MAMatrix.log()()
{
  uint64_t v0 = (uint64_t (*)(void *, void *, int *))MEMORY[0x1E4F172D0];
  sub_1D16F1B64(v0);
}

void sub_1D16F19B4(double **a1, uint64_t *a2, double a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a3 == 2.0)
  {
    uint64_t v3 = *a1;
    if (v3)
    {
      uint64_t v4 = a2[1];
      int64_t v5 = *a2 * v4;
      if ((unsigned __int128)(*a2 * (__int128)v4) >> 64 == v5 >> 63)
      {
        if ((v5 & 0x8000000000000000) == 0)
        {
          vDSP_vsqD(v3, 1, v3, 1, v5);
          return;
        }
        goto LABEL_18;
      }
      __break(1u);
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = a2[1];
  uint64_t v7 = *a2 * v6;
  if ((unsigned __int128)(*a2 * (__int128)v6) >> 64 != v7 >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v7 > 0x7FFFFFFF) {
    goto LABEL_15;
  }
  int v10 = *(_DWORD *)a2 * v6;
  double v9 = a3;
  uint64_t v8 = *a1;
  if (!v8)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    sub_1D17BEA30();
    __break(1u);
    return;
  }
  vvpows(v8, &v9, v8, &v10);
}

Swift::Void __swiftcall MAMatrix.round()()
{
  uint64_t v0 = (uint64_t (*)(void *, void *, int *))MEMORY[0x1E4F17320];
  sub_1D16F1B64(v0);
}

uint64_t sub_1D16F1B64(uint64_t (*a1)(void *, void *, int *))
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)v1[2];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v1[2] = (uint64_t)v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v3 = sub_1D1667604(v3);
    v1[2] = (uint64_t)v3;
  }
  uint64_t v5 = v1[1];
  uint64_t v6 = *v1 * v5;
  if ((unsigned __int128)(*v1 * (__int128)v5) >> 64 != v6 >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v6 > 0x7FFFFFFF) {
    goto LABEL_9;
  }
  int v8 = *(_DWORD *)v1 * v5;
  uint64_t result = a1(v3 + 4, v3 + 4, &v8);
  v1[2] = (uint64_t)v3;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.rounded()()
{
  uint64_t v2 = v0;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = (double *)v1[2];
  *uint64_t v0 = v3;
  v0[1] = v4;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v2[2] = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v5 = (double *)sub_1D1667604(v5);
    v2[2] = v5;
  }
  uint64_t v7 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v7 > 0x7FFFFFFF) {
    goto LABEL_9;
  }
  int v11 = v3 * v4;
  vvnint(v5 + 4, v5 + 4, &v11);
  v2[2] = v5;
  result.elements._uint64_t rawValue = v10;
  result.columns = v9;
  result.rows = v8;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.asum(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t v4 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v7 = v2[2] + 32;
  if (*(unsigned char *)axe != 1)
  {
    Swift::Int v8 = sub_1D1665914(*v2, 0.0);
    if (v6 < 0) {
      goto LABEL_25;
    }
    uint64_t v3 = (void *)v8;
    if (!v6)
    {
LABEL_20:
      uint64_t v5 = 1;
      goto LABEL_21;
    }
    if (v5 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v5 <= 0x7FFFFFFF)
    {
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_17;
      }
      goto LABEL_32;
    }
    __break(1u);
LABEL_32:
    uint64_t v3 = sub_1D1667604(v3);
LABEL_17:
    for (unint64_t i = 0; i != v6; ++i)
    {
      Swift::Int v8 = cblas_dasum_NEWLAPACK();
      if (i >= v3[2]) {
        goto LABEL_23;
      }
      v3[i + 4] = v14;
      v7 += 8 * v5;
    }
    goto LABEL_20;
  }
  Swift::Int v8 = sub_1D1665914(v2[1], 0.0);
  if (v5 < 0) {
    goto LABEL_24;
  }
  uint64_t v3 = (void *)v8;
  if (v5)
  {
    if (v6 > 0x7FFFFFFF) {
      goto LABEL_26;
    }
    if (v6 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_27;
    }
    if ((unint64_t)v5 >> 31) {
      goto LABEL_28;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_29;
    }
    while (1)
    {
      unint64_t v11 = 0;
      while (1)
      {
        Swift::Int v8 = cblas_dasum_NEWLAPACK();
        if (v11 >= v3[2]) {
          break;
        }
        v3[v11 + 4] = v12;
        v7 += 8;
        if (v5 == ++v11) {
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      uint64_t v3 = sub_1D1667604(v3);
    }
  }
LABEL_11:
  uint64_t v6 = 1;
LABEL_21:
  *uint64_t v4 = v6;
  v4[1] = v5;
  void v4[2] = (uint64_t)v3;
  result.elements._uint64_t rawValue = v10;
  result.columns = v9;
  result.rows = v8;
  return result;
}

Swift::Double __swiftcall MAMatrix.norm1()()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, void *))MEMORY[0x1E4F16A48];
  sub_1D16F312C(v0);
  return result;
}

Swift::Double __swiftcall MAMatrix.norm2()()
{
  sub_1D16F1F3C(MEMORY[0x1E4F167B8]);
  return result;
}

uint64_t sub_1D16F1F3C(uint64_t (*a1)(void))
{
  uint64_t v3 = v1[1];
  uint64_t result = *v1 * v3;
  if ((unsigned __int128)(*v1 * (__int128)v3) >> 64 != result >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result <= 0x7FFFFFFF) {
    return a1();
  }
LABEL_7:
  __break(1u);
  return result;
}

Swift::tuple_value_Double_index_Int __swiftcall MAMatrix.min(row:)(Swift::Int row)
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, void *, uint64_t *))MEMORY[0x1E4F169E0];
  Swift::Int v2 = sub_1D16F2064(row, v1);
  result.value = v3;
  result.index = v2;
  return result;
}

Swift::tuple_value_Double_index_Int __swiftcall MAMatrix.max(row:)(Swift::Int row)
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, void *, uint64_t *))MEMORY[0x1E4F16988];
  Swift::Int v2 = sub_1D16F2064(row, v1);
  result.value = v3;
  result.index = v2;
  return result;
}

uint64_t sub_1D16F2064(uint64_t a1, void (*a2)(uint64_t, uint64_t, void *, uint64_t *))
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = 0;
  uint64_t v6 = 0;
  if ((unsigned __int128)(a1 * (__int128)v3) >> 64 != (a1 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 < 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
    return result;
  }
  a2(v4 + 8 * a1 * v3 + 32, 1, v7, &v6);
  uint64_t result = v6;
  if (v6 < 0) {
LABEL_6:
  }
    __break(1u);
  return result;
}

Swift::tuple_value_Double_index_Int __swiftcall MAMatrix.min(column:)(Swift::Int column)
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, void *, uint64_t *))MEMORY[0x1E4F169E0];
  Swift::Int v2 = sub_1D16F2220(column, v1);
  result.value = v3;
  result.index = v2;
  return result;
}

Swift::tuple_value_Double_index_Int __swiftcall MAMatrix.max(column:)(Swift::Int column)
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, void *, uint64_t *))MEMORY[0x1E4F16988];
  Swift::Int v2 = sub_1D16F2220(column, v1);
  result.value = v3;
  result.index = v2;
  return result;
}

uint64_t sub_1D16F2220(uint64_t a1, void (*a2)(uint64_t, uint64_t, void *, uint64_t *))
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  uint64_t v7 = 0;
  v8[0] = 0;
  if ((v3 & 0x8000000000000000) == 0)
  {
    a2(v5 + 8 * a1 + 32, v4, v8, &v7);
    if (v7 < 0)
    {
      __break(1u);
    }
    else if (v4)
    {
      return v7 / v4;
    }
    __break(1u);
  }
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

int64_t *MAMatrix.argsort()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v5 = sub_1D1666E28(0, *(void *)(v3 + 16));
  swift_bridgeObjectRetain();
  sub_1D16FB83C(&v5, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v5;
}

Swift::Int __swiftcall MAMatrix.argmax()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, uint64_t *))MEMORY[0x1E4F16988];
  return sub_1D16F244C(v0);
}

Swift::Int __swiftcall MAMatrix.argmin()()
{
  uint64_t v0 = (void (*)(uint64_t, uint64_t, void *, uint64_t *))MEMORY[0x1E4F169E0];
  return sub_1D16F244C(v0);
}

uint64_t sub_1D16F244C(void (*a1)(uint64_t, uint64_t, void *, uint64_t *))
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  v7[0] = 0;
  uint64_t v6 = 0;
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 * v3 < 0)
  {
    uint64_t result = sub_1D17BEA30();
    __break(1u);
    return result;
  }
  a1(v4 + 32, 1, v7, &v6);
  uint64_t result = v6;
  if (v6 < 0) {
LABEL_6:
  }
    __break(1u);
  return result;
}

uint64_t *MAMatrix.mean(range:axe:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1D16F2F54(a1, a2, a3, MEMORY[0x1E4F169A8], a4);
}

uint64_t *sub_1D16F2544(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1D16F322C(a1, a2, a3, a4, a5, a6, a7, a8, MEMORY[0x1E4F169A8]);
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.pstddev(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t v1 = sub_1D16F3A7C((unsigned char *)axe, (uint64_t (*)(void, uint64_t, char *))MAMatrix.pstddev(range:axe:));
  result.elements._uint64_t rawValue = v3;
  result.columns = v2;
  result.rows = (Swift::Int)v1;
  return result;
}

void MAMatrix.pstddev(range:axe:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t *a4@<X8>)
{
  vDSP_Length v11 = *v4;
  int64_t v12 = v4[1];
  vDSP_Length v13 = v4[2];
  uint64_t v14 = a2 - a1;
  BOOL v15 = __OFSUB__(a2, a1);
  if (*a3 != 1)
  {
    if (v15)
    {
      __break(1u);
    }
    else
    {
      uint64_t v5 = sub_1D1665914(a2 - a1, 0.0);
      uint64_t v6 = v13 + 32;
      uint64_t v7 = *(void *)(v13 + 16);
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_10:
        uint64_t v18 = *(void *)(v5 + 16);
        long long v19 = (double *)(v5 + 32);
        uint64_t v20 = v18;
        sub_1D16F2828(&v19, v6, v7, a1, a2, v11, v12);
        uint64_t v17 = v14;
        uint64_t v14 = 1;
        goto LABEL_11;
      }
    }
    uint64_t v5 = (uint64_t)sub_1D1667604((void *)v5);
    goto LABEL_10;
  }
  if (v15)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v5 = sub_1D1665914(a2 - a1, 0.0);
  uint64_t v6 = v13 + 32;
  uint64_t v7 = *(void *)(v13 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_13:
  }
    uint64_t v5 = (uint64_t)sub_1D1667604((void *)v5);
  uint64_t v16 = *(void *)(v5 + 16);
  long long v19 = (double *)(v5 + 32);
  uint64_t v20 = v16;
  sub_1D16F26EC(&v19, v6, v7, a1, a2, v11, v12);
  uint64_t v17 = 1;
LABEL_11:
  *a4 = v17;
  a4[1] = v14;
  a4[2] = v5;
}

void sub_1D16F26EC(double **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, vDSP_Length __N, vDSP_Stride __IA)
{
  __Mean[1] = *(double *)MEMORY[0x1E4F143B8];
  if (!a2) {
    goto LABEL_12;
  }
  uint64_t v7 = *a1;
  if (!*a1) {
    goto LABEL_13;
  }
  uint64_t v9 = a4;
  if (a5 < a4)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  if (a4 != a5)
  {
    int64_t v12 = (const double *)(a2 + 8 * a4);
    while (v9 < a5)
    {
      __Mean[0] = 0.0;
      if ((__N & 0x8000000000000000) != 0)
      {
        sub_1D17BEA30();
        __break(1u);
        return;
      }
      ++v9;
      vDSP_normalizeD(v12++, __IA, 0, 1, __Mean, v7++, __N);
      if (a5 == v9) {
        return;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
}

void sub_1D16F2828(double **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, int64_t __N)
{
  __Mean[1] = *(double *)MEMORY[0x1E4F143B8];
  if (!a2) {
    goto LABEL_14;
  }
  uint64_t v8 = a4;
  if ((unsigned __int128)(a4 * (__int128)__N) >> 64 != (a4 * __N) >> 63) {
    goto LABEL_12;
  }
  uint64_t v9 = *a1;
  if (!*a1) {
    goto LABEL_15;
  }
  if (a5 < a4) {
    goto LABEL_13;
  }
  if (a4 != a5)
  {
    vDSP_Length v11 = (const double *)(a2 + 8 * a4 * __N);
    while (v8 < a5)
    {
      __Mean[0] = 0.0;
      if (__N < 0)
      {
        sub_1D17BEA30();
        __break(1u);
        return;
      }
      ++v8;
      vDSP_normalizeD(v11, 1, 0, 1, __Mean, v9++, __N);
      v11 += __N;
      if (a5 == v8) {
        return;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.sstddev(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t v1 = sub_1D16F3A7C((unsigned char *)axe, (uint64_t (*)(void, uint64_t, char *))MAMatrix.sstddev(range:axe:));
  result.elements._uint64_t rawValue = v3;
  result.columns = v2;
  result.rows = (Swift::Int)v1;
  return result;
}

uint64_t MAMatrix.sstddev(range:axe:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = (double *)a2;
  uint64_t v8 = (double *)a1;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int64_t v10 = *v4;
  int64_t v9 = v4[1];
  vDSP_Length v11 = (const double *)v4[2];
  int64_t v12 = a2 - a1;
  BOOL v13 = __OFSUB__(a2, a1);
  if (*a3 == 1)
  {
    int64_t v24 = *v4;
    int64_t v25 = v9;
    int v26 = v11;
    char v23 = 1;
    MAMatrix.mean(range:axe:)(a1, a2, &v23, __B);
    if (v13) {
      goto LABEL_46;
    }
    uint64_t v6 = (uint64_t)v28;
    uint64_t v5 = (double *)sub_1D1665914(v12, 0.0);
    if ((unsigned __int128)(v10 * (__int128)v12) >> 64 != (v10 * v12) >> 63) {
      goto LABEL_48;
    }
    uint64_t v22 = (void *)sub_1D1665914(v10 * v12, 0.0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_50;
    }
    while (1)
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        if ((uint64_t)v7 < (uint64_t)v8) {
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v5 = (double *)sub_1D1667604(v5);
        if ((uint64_t)v7 < (uint64_t)v8)
        {
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
      }
      if (v8 == v7) {
        break;
      }
      unint64_t v14 = 0;
      BOOL v15 = &v11[(void)v8];
      uint64_t v8 = (double *)(v22 + 4);
      uint64_t v7 = v5 + 4;
      vDSP_Length v11 = v15 + 4;
      while (v12 != v14)
      {
        if (v14 >= *(void *)(v6 + 16)) {
          goto LABEL_43;
        }
        *(double *)double __B = -*(double *)(v6 + 32 + 8 * v14);
        if (v10 < 0) {
          goto LABEL_66;
        }
        ++v14;
        vDSP_vsaddD(v11, v9, (const double *)__B, v8, v9, v10);
        vDSP_vsqD(v8, v9, v8, v9, v10);
        vDSP_sveD(v8, v9, v7, v10);
        ++v11;
        ++v8;
        ++v7;
        if (v12 == v14) {
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      uint64_t v22 = sub_1D1667604(v22);
    }
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v16 = v5;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_17:
      if (*((void *)v5 + 2) >> 31)
      {
        __break(1u);
      }
      else
      {
        cblas_dscal_NEWLAPACK();
        swift_bridgeObjectRelease();
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_19:
          if (v12 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (v12 <= 0x7FFFFFFF)
            {
              LODWORD(__B[0]) = v12;
              vvsqrt(v16 + 4, v16 + 4, (const int *)__B);
              uint64_t v17 = 1;
LABEL_41:
              uint64_t result = swift_bridgeObjectRelease();
              *a4 = v17;
              a4[1] = v12;
              a4[2] = (uint64_t)v16;
              return result;
            }
            goto LABEL_62;
          }
          __break(1u);
          goto LABEL_60;
        }
      }
      uint64_t v16 = (double *)sub_1D1667604(v16);
      goto LABEL_19;
    }
LABEL_56:
    uint64_t v16 = (double *)sub_1D1667604(v5);
    goto LABEL_17;
  }
  int64_t v24 = *v4;
  int64_t v25 = v9;
  int v26 = v11;
  char v23 = 0;
  MAMatrix.mean(range:axe:)(a1, a2, &v23, __B);
  if (v13) {
    goto LABEL_47;
  }
  uint64_t v5 = v28;
  int64_t v10 = sub_1D1665914(v12, 0.0);
  if ((unsigned __int128)(v12 * (__int128)v9) >> 64 != (v12 * v9) >> 63) {
    goto LABEL_49;
  }
  uint64_t v22 = (void *)sub_1D1665914(v12 * v9, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_53:
  }
    uint64_t v22 = sub_1D1667604(v22);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v10 = (int64_t)sub_1D1667604((void *)v10);
  }
  int64_t v18 = (void)v8 * v9;
  if ((unsigned __int128)((uint64_t)v8 * (__int128)v9) >> 64 != ((uint64_t)v8 * v9) >> 63)
  {
    __break(1u);
    goto LABEL_55;
  }
  if ((uint64_t)v7 < (uint64_t)v8)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v8 == v7)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v16 = (double *)v10;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_36:
      if (!(*(void *)(v10 + 16) >> 31))
      {
        cblas_dscal_NEWLAPACK();
        swift_bridgeObjectRelease();
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_38;
        }
        goto LABEL_63;
      }
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      uint64_t v16 = (double *)sub_1D1667604(v16);
LABEL_38:
      if (v12 < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
      }
      else if (v12 <= 0x7FFFFFFF)
      {
        LODWORD(__B[0]) = v12;
        vvsqrt(v16 + 4, v16 + 4, (const int *)__B);
        uint64_t v17 = v12;
        int64_t v12 = 1;
        goto LABEL_41;
      }
      __break(1u);
    }
LABEL_60:
    uint64_t v16 = (double *)sub_1D1667604((void *)v10);
    goto LABEL_36;
  }
  unint64_t v19 = 0;
  uint64_t v8 = (double *)(v22 + 4);
  uint64_t v7 = (double *)(v10 + 32);
  uint64_t v6 = (uint64_t)&v11[v18 + 4];
  vDSP_Length v11 = v5 + 4;
  while (1)
  {
    if (v12 == v19) {
      goto LABEL_44;
    }
    if (v19 >= *((void *)v5 + 2)) {
      goto LABEL_45;
    }
    *(double *)double __B = -v11[v19];
    if (v9 < 0) {
      break;
    }
    ++v19;
    vDSP_vsaddD((const double *)v6, 1, (const double *)__B, v8, 1, v9);
    vDSP_vsqD(v8, 1, v8, 1, v9);
    vDSP_sveD(v8++, 1, v7++, v9);
    v6 += 8 * v9;
    if (v12 == v19) {
      goto LABEL_35;
    }
  }
LABEL_66:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

Swift::Double __swiftcall MAMatrix.meamg()()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, void *))MEMORY[0x1E4F16998];
  sub_1D16F312C(v0);
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.meamg(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t v1 = sub_1D16F3A7C((unsigned char *)axe, (uint64_t (*)(void, uint64_t, char *))MAMatrix.meamg(range:axe:));
  result.elements._uint64_t rawValue = v3;
  result.columns = v2;
  result.rows = (Swift::Int)v1;
  return result;
}

uint64_t *MAMatrix.meamg(range:axe:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1D16F2F54(a1, a2, a3, MEMORY[0x1E4F16998], a4);
}

uint64_t *sub_1D16F2F54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v13 = *v5;
  uint64_t v14 = v5[1];
  uint64_t v15 = v5[2];
  uint64_t v16 = a2 - a1;
  BOOL v17 = __OFSUB__(a2, a1);
  uint64_t v22 = v13;
  if (*a3 != 1)
  {
    if (v17)
    {
      __break(1u);
    }
    else
    {
      uint64_t v7 = (void *)sub_1D1665914(a2 - a1, 0.0);
      uint64_t v8 = v15 + 32;
      uint64_t v6 = *(void *)(v15 + 16);
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_10:
        uint64_t v21 = v7[2];
        char v23 = v7 + 4;
        uint64_t v24 = v21;
        KnowledgeGraphKit::MAMatrix result = sub_1D16F3354((uint64_t *)&v23, v8, v6, a1, a2, v22, v14, v15, a4);
        uint64_t v20 = v16;
        uint64_t v16 = 1;
        goto LABEL_11;
      }
    }
    uint64_t v7 = sub_1D1667604(v7);
    goto LABEL_10;
  }
  if (v17)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = (void *)sub_1D1665914(a2 - a1, 0.0);
  uint64_t v8 = v15 + 32;
  uint64_t v6 = *(void *)(v15 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_13:
  }
    uint64_t v7 = sub_1D1667604(v7);
  uint64_t v18 = v7[2];
  char v23 = v7 + 4;
  uint64_t v24 = v18;
  KnowledgeGraphKit::MAMatrix result = sub_1D16F322C((uint64_t *)&v23, v8, v6, a1, a2, v22, v14, v15, a4);
  uint64_t v20 = 1;
LABEL_11:
  *a5 = v20;
  a5[1] = v16;
  a5[2] = (uint64_t)v7;
  return result;
}

Swift::Double __swiftcall MAMatrix.measq()()
{
  uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, void *))MEMORY[0x1E4F169B8];
  sub_1D16F312C(v0);
  return result;
}

uint64_t sub_1D16F312C(uint64_t (*a1)(uint64_t, uint64_t, void *))
{
  v6[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  v6[0] = 0;
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63) {
    __break(1u);
  }
  if (((v2 * v3) & 0x8000000000000000) == 0) {
    return a1(v4 + 32, 1, v6);
  }
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.measq(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t v1 = sub_1D16F3A7C((unsigned char *)axe, (uint64_t (*)(void, uint64_t, char *))MAMatrix.measq(range:axe:));
  result.elements._uint64_t rawValue = v3;
  result.columns = v2;
  result.rows = (Swift::Int)v1;
  return result;
}

uint64_t *MAMatrix.measq(range:axe:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1D16F2F54(a1, a2, a3, MEMORY[0x1E4F169B8], a4);
}

uint64_t *sub_1D16F322C(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (!a2) {
    goto LABEL_15;
  }
  uint64_t v9 = *result;
  if (!*result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a5 < a4)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a4 == a5) {
    return result;
  }
  if (a4 >= a5) {
    goto LABEL_14;
  }
  if (a6 < 0)
  {
LABEL_17:
    KnowledgeGraphKit::MAMatrix result = (uint64_t *)sub_1D17BEA30();
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 + 8 * a4;
  uint64_t v15 = a4 + 1;
  while (1)
  {
    KnowledgeGraphKit::MAMatrix result = (uint64_t *)a9(v14, a7, v9, a6);
    if (a5 == v15) {
      return result;
    }
    if (v15 >= a4)
    {
      v9 += 8;
      v14 += 8;
      if (v15++ < a5) {
        continue;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
}

uint64_t *sub_1D16F3354(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (!a2) {
    goto LABEL_17;
  }
  if ((unsigned __int128)(a4 * (__int128)a7) >> 64 != (a4 * a7) >> 63)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v11 = *result;
  if (!*result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (a5 < a4) {
    goto LABEL_15;
  }
  if (a4 == a5) {
    return result;
  }
  if (a4 >= a5) {
    goto LABEL_16;
  }
  if (a7 < 0)
  {
LABEL_19:
    KnowledgeGraphKit::MAMatrix result = (uint64_t *)sub_1D17BEA30();
    __break(1u);
    return result;
  }
  uint64_t v13 = a4 + 1;
  uint64_t v14 = a2 + 8 * a4 * a7;
  while (1)
  {
    KnowledgeGraphKit::MAMatrix result = (uint64_t *)a9(v14, 1, v11, a7);
    if (a5 == v13) {
      return result;
    }
    if (v13 >= a4)
    {
      v11 += 8;
      v14 += 8 * a7;
      if (v13++ < a5) {
        continue;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
}

uint64_t MAMatrix.median(range:axe:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = v4[1];
  uint64_t v8 = v4[2];
  uint64_t v9 = a2 - a1;
  BOOL v10 = __OFSUB__(a2, a1);
  if (*a3 != 1)
  {
    if (v10)
    {
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    uint64_t v33 = a2 - a1;
    uint64_t result = sub_1D1665914(a2 - a1, 0.0);
    if (a2 < a1) {
      goto LABEL_83;
    }
    uint64_t v13 = (void *)result;
    if (a2 != a1)
    {
      unint64_t v24 = 0;
      while ((uint64_t)(a1 + v24) < a2)
      {
        if (__OFADD__(v24, 1)) {
          goto LABEL_62;
        }
        if (v7 < 0) {
          goto LABEL_84;
        }
        swift_bridgeObjectRetain();
        if (v7)
        {
          uint64_t v26 = sub_1D17BE1C0();
          *(void *)(v26 + 16) = v7;
          bzero((void *)(v26 + 32), 8 * v7);
          if (v7 > 0x7FFFFFFF) {
            goto LABEL_63;
          }
        }
        else
        {
          uint64_t v26 = MEMORY[0x1E4FBC860];
        }
        if ((unsigned __int128)((uint64_t)(a1 + v24) * (__int128)v7) >> 64 != (uint64_t)((a1 + v24) * v7) >> 63) {
          goto LABEL_64;
        }
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        uint64_t v36 = v26;
        swift_bridgeObjectRetain();
        sub_1D16E759C(&v36, sub_1D16FA260, sub_1D16F8088);
        swift_bridgeObjectRelease();
        unint64_t v27 = *(void *)(v36 + 16);
        if (v27)
        {
          unint64_t v31 = (v27 - 1) >> 1;
          if (v31 >= v27) {
            goto LABEL_71;
          }
          double v25 = *(double *)(v36 + 8 * v31 + 32);
          swift_release();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1D1667604(v13);
            uint64_t v13 = (void *)result;
          }
          if (v24 >= v13[2]) {
            goto LABEL_73;
          }
        }
        else
        {
          if (v27 >> 1 >= v27) {
            goto LABEL_70;
          }
          if (v27 < 2) {
            goto LABEL_72;
          }
          uint64_t v28 = v36 + 8 * (v27 >> 1);
          double v30 = *(double *)(v28 + 24);
          double v29 = *(double *)(v28 + 32);
          swift_release();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1D1667604(v13);
            uint64_t v13 = (void *)result;
          }
          if (v24 >= v13[2]) {
            goto LABEL_74;
          }
          double v25 = (v29 + v30) * 0.5;
        }
        *(double *)&v13[v24++ + 4] = v25;
        if (a2 - a1 == v24) {
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
LABEL_35:
    uint64_t v23 = v33;
    uint64_t v9 = 1;
LABEL_60:
    *a4 = v23;
    a4[1] = v9;
    a4[2] = (uint64_t)v13;
    return result;
  }
  if (v10)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v11 = *v4;
  uint64_t result = sub_1D1665914(a2 - a1, 0.0);
  if (a2 >= a1)
  {
    uint64_t v13 = (void *)result;
    if (a2 != a1)
    {
      uint64_t v32 = v9;
      unint64_t v34 = a4;
      unint64_t v14 = 0;
      uint64_t v15 = v8 + 8 * a1 + 32;
      while ((uint64_t)(a1 + v14) < a2)
      {
        if (__OFADD__(v14, 1)) {
          goto LABEL_66;
        }
        if (v11 < 0) {
          goto LABEL_84;
        }
        swift_bridgeObjectRetain();
        if (v11)
        {
          uint64_t v16 = sub_1D17BE1C0();
          *(void *)(v16 + 16) = v11;
          bzero((void *)(v16 + 32), 8 * v11);
          if (v11 > 0x7FFFFFFF) {
            goto LABEL_67;
          }
        }
        else
        {
          uint64_t v16 = MEMORY[0x1E4FBC860];
        }
        if (v7 < (uint64_t)0xFFFFFFFF80000000) {
          goto LABEL_68;
        }
        if (v7 > 0x7FFFFFFF) {
          goto LABEL_69;
        }
        cblas_dcopy_NEWLAPACK();
        swift_bridgeObjectRelease();
        uint64_t v36 = v16;
        swift_bridgeObjectRetain();
        sub_1D16E759C(&v36, sub_1D16FA260, sub_1D16F8088);
        swift_bridgeObjectRelease();
        unint64_t v17 = *(void *)(v36 + 16);
        if (v17)
        {
          unint64_t v22 = (v17 - 1) >> 1;
          if (v22 >= v17) {
            goto LABEL_76;
          }
          double v21 = *(double *)(v36 + 8 * v22 + 32);
          swift_release();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1D1667604(v13);
            uint64_t v13 = (void *)result;
          }
          if (v14 >= v13[2]) {
            goto LABEL_78;
          }
        }
        else
        {
          if (v17 >> 1 >= v17) {
            goto LABEL_75;
          }
          if (v17 < 2) {
            goto LABEL_77;
          }
          uint64_t v18 = v36 + 8 * (v17 >> 1);
          double v20 = *(double *)(v18 + 24);
          double v19 = *(double *)(v18 + 32);
          swift_release();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1D1667604(v13);
            uint64_t v13 = (void *)result;
          }
          if (v14 >= v13[2]) {
            goto LABEL_79;
          }
          double v21 = (v19 + v20) * 0.5;
        }
        *(double *)&v13[v14++ + 4] = v21;
        v15 += 8;
        if (a2 - a1 == v14)
        {
          uint64_t v9 = v32;
          a4 = v34;
          goto LABEL_59;
        }
      }
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }
LABEL_59:
    uint64_t v23 = 1;
    goto LABEL_60;
  }
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
  swift_release();
  __break(1u);
LABEL_84:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

Swift::Double __swiftcall MAMatrix.mode()()
{
  uint64_t v1 = *((void *)v0 + 2);
  long long v6 = *v0;
  uint64_t v7 = v1;
  MAMatrix.frequencies()();
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_1D16671A4(v2);
  swift_bridgeObjectRelease();
  *(void *)&long long v6 = v3;
  sub_1D16E7620((uint64_t *)&v6);
  swift_bridgeObjectRelease();
  if (*(void *)(v6 + 16))
  {
    double v4 = *(double *)(v6 + 32);
    swift_release();
    return v4;
  }
  else
  {
    swift_release();
    __break(1u);
    swift_release();
    __break(1u);
  }
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.mode(axe:)(KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t v1 = sub_1D16F3A7C((unsigned char *)axe, (uint64_t (*)(void, uint64_t, char *))MAMatrix.mode(range:axe:));
  result.elements._uint64_t rawValue = v3;
  result.columns = v2;
  result.rows = (Swift::Int)v1;
  return result;
}

unsigned char *sub_1D16F3A7C(unsigned char *result, uint64_t (*a2)(void, uint64_t, char *))
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  if (*result == 1)
  {
    uint64_t v8 = *v2;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    if ((v5 & 0x8000000000000000) == 0)
    {
      char v7 = 1;
      uint64_t v4 = v5;
      return (unsigned char *)a2(0, v4, &v7);
    }
    __break(1u);
  }
  else
  {
    uint64_t v8 = *v2;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    if ((v4 & 0x8000000000000000) == 0)
    {
      char v7 = 0;
      return (unsigned char *)a2(0, v4, &v7);
    }
  }
  __break(1u);
  return result;
}

uint64_t MAMatrix.mode(range:axe:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = v4[1];
  uint64_t v101 = v7;
  uint64_t v9 = a2 - a1;
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v96 = a2 - a1;
  char v90 = a4;
  if (*a3 != 1)
  {
    if (v10)
    {
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }
    uint64_t result = sub_1D1665914(a2 - a1, 0.0);
    if (a2 < a1) {
      goto LABEL_129;
    }
    uint64_t v16 = a1;
    if (a1 == a2)
    {
      uint64_t v14 = v9;
      uint64_t v9 = 1;
      uint64_t v15 = (void *)result;
      goto LABEL_104;
    }
    unint64_t v53 = 0;
    uint64_t v91 = 8 * v7;
    uint64_t v54 = MEMORY[0x1E4FBC860];
    uint64_t v15 = (void *)result;
    while (v53 != v9)
    {
      if (v7 < 0) {
        goto LABEL_133;
      }
      unint64_t v100 = v15;
      swift_bridgeObjectRetain();
      if (v7)
      {
        uint64_t v55 = sub_1D17BE1C0();
        *(void *)(v55 + 16) = v7;
        uint64_t v56 = (unint64_t *)(v55 + 16);
        uint64_t v57 = v55 + 32;
        bzero((void *)(v55 + 32), v91);
        if (v7 > 0x7FFFFFFF) {
          goto LABEL_116;
        }
      }
      else
      {
        uint64_t v56 = (unint64_t *)(v54 + 16);
        uint64_t v57 = v54 + 32;
      }
      if ((unsigned __int128)(v16 * (__int128)v7) >> 64 != (v16 * v7) >> 63) {
        goto LABEL_117;
      }
      uint64_t v98 = v16;
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      uint64_t v102 = (void *)v54;
      sub_1D16827AC(0, 0, 0);
      uint64_t v58 = swift_allocObject();
      *(void *)(v58 + 16) = 0;
      if (v7)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        unint64_t v59 = 0;
        while (v59 < *v56)
        {
          uint64_t v60 = *(void *)(v57 + 8 * v59);
          uint64_t v61 = (uint64_t)v102;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1D16827AC(0, *(void *)(v61 + 16) + 1, 1);
            uint64_t v61 = (uint64_t)v102;
          }
          unint64_t v63 = *(void *)(v61 + 16);
          unint64_t v62 = *(void *)(v61 + 24);
          if (v63 >= v62 >> 1)
          {
            sub_1D16827AC(v62 > 1, v63 + 1, 1);
            uint64_t v61 = (uint64_t)v102;
          }
          ++v59;
          *(void *)(v61 + 16) = v63 + 1;
          uint64_t v64 = v61 + 16 * v63;
          *(void *)(v64 + 32) = v60;
          *(void *)(v64 + 40) = 1;
          if (v101 == v59)
          {
            *(void *)(v58 + 16) = v101;
            swift_bridgeObjectRelease_n();
            swift_release_n();
            goto LABEL_77;
          }
        }
        __break(1u);
LABEL_106:
        __break(1u);
        goto LABEL_107;
      }
      swift_bridgeObjectRelease();
      swift_release();
LABEL_77:
      uint64_t v65 = (uint64_t)v102;
      if (v102[2])
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652000);
        uint64_t v66 = (void *)sub_1D17BEB10();
        uint64_t v67 = *(void *)(v65 + 16);
        uint64_t v102 = v66;
        if (v67)
        {
          swift_retain();
          uint64_t v68 = 0;
          char v69 = (double *)(v65 + 40);
          while (1)
          {
            uint64_t v74 = v68 + 1;
            if (__OFADD__(v68, 1)) {
              break;
            }
            double v75 = *(v69 - 1);
            double v76 = *v69;
            unint64_t v77 = sub_1D165AB40(v75);
            uint64_t v79 = v66[2];
            BOOL v80 = (v78 & 1) == 0;
            BOOL v36 = __OFADD__(v79, v80);
            uint64_t v81 = v79 + v80;
            if (v36) {
              goto LABEL_108;
            }
            char v82 = v78;
            if (v66[3] < v81)
            {
              sub_1D16A4A1C(v81, 1);
              uint64_t v66 = v102;
              unint64_t v77 = sub_1D165AB40(v75);
              if ((v82 & 1) != (v83 & 1)) {
                goto LABEL_132;
              }
            }
            if (v82)
            {
              uint64_t v71 = (void *)(v66[7] + 8 * v77);
              uint64_t v73 = *v71 + *(void *)&v76;
              if (__OFADD__(*v71, *(void *)&v76)) {
                goto LABEL_112;
              }
            }
            else
            {
              v66[(v77 >> 6) + 8] |= 1 << v77;
              uint64_t v70 = 8 * v77;
              *(double *)(v66[6] + v70) = v75;
              *(double *)(v66[7] + v70) = v76;
              uint64_t v71 = v66 + 2;
              uint64_t v72 = v66[2];
              BOOL v36 = __OFADD__(v72, 1);
              uint64_t v73 = v72 + 1;
              if (v36) {
                goto LABEL_111;
              }
            }
            v69 += 2;
            *uint64_t v71 = v73;
            ++v68;
            if (v74 == v67)
            {
              swift_release();
              goto LABEL_92;
            }
          }
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
          break;
        }
      }
      else
      {
        uint64_t v66 = (void *)MEMORY[0x1E4FBC868];
      }
LABEL_92:
      swift_release();
      uint64_t v84 = v66[2];
      if (v84)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6516E0);
        unint64_t v85 = (void *)swift_allocObject();
        int64_t v86 = _swift_stdlib_malloc_size(v85);
        uint64_t v87 = v86 - 32;
        if (v86 < 32) {
          uint64_t v87 = v86 - 17;
        }
        v85[2] = v84;
        v85[3] = 2 * (v87 >> 4);
        uint64_t v94 = sub_1D16F7EE4(&v102, v85 + 4, v84, (uint64_t)v66);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_1D1668088();
        if (v94 != (void *)v84) {
          goto LABEL_124;
        }
        swift_release();
      }
      else
      {
        unint64_t v85 = (void *)v54;
      }
      uint64_t v102 = v85;
      sub_1D16E7620((uint64_t *)&v102);
      uint64_t v9 = v96;
      uint64_t v15 = v100;
      swift_release();
      uint64_t v7 = v101;
      if (!v102[2]) {
        goto LABEL_130;
      }
      uint64_t v88 = v102[4];
      swift_release();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1D1667604(v100);
        uint64_t v15 = (void *)result;
      }
      if (v53 >= v15[2]) {
        goto LABEL_122;
      }
      uint64_t v16 = v98 + 1;
      char v89 = &v15[v53++];
      v89[4] = v88;
      if (v98 + 1 == a2)
      {
        uint64_t v14 = v96;
        uint64_t v9 = 1;
        goto LABEL_104;
      }
    }
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
  if (v10)
  {
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  uint64_t v11 = *v4;
  uint64_t result = sub_1D1665914(a2 - a1, 0.0);
  if (a2 >= a1)
  {
    uint64_t v13 = a1;
    if (a1 == a2)
    {
      uint64_t v14 = 1;
      uint64_t v15 = (void *)result;
LABEL_104:
      *char v90 = v14;
      v90[1] = v9;
      v90[2] = (uint64_t)v15;
      return result;
    }
    unint64_t v17 = 0;
    uint64_t v14 = 1;
    uint64_t v15 = (void *)result;
    while (v17 != v9)
    {
      if (v11 < 0) {
        goto LABEL_133;
      }
      unint64_t v93 = v17;
      uint64_t v99 = v15;
      swift_bridgeObjectRetain();
      if (v11)
      {
        uint64_t v18 = sub_1D17BE1C0();
        *(void *)(v18 + 16) = v11;
        double v19 = (unint64_t *)(v18 + 16);
        uint64_t v20 = v18 + 32;
        bzero((void *)(v18 + 32), 8 * v11);
        if (v11 > 0x7FFFFFFF) {
          goto LABEL_119;
        }
      }
      else
      {
        double v19 = (unint64_t *)(MEMORY[0x1E4FBC860] + 16);
        uint64_t v20 = MEMORY[0x1E4FBC860] + 32;
      }
      if (v7 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_120;
      }
      if (v7 > 0x7FFFFFFF) {
        goto LABEL_121;
      }
      uint64_t v97 = v13;
      cblas_dcopy_NEWLAPACK();
      swift_bridgeObjectRelease();
      uint64_t v102 = (void *)MEMORY[0x1E4FBC860];
      sub_1D16827AC(0, 0, 0);
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = 0;
      if (v11)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        unint64_t v22 = 0;
        while (v22 < *v19)
        {
          uint64_t v23 = *(void *)(v20 + 8 * v22);
          uint64_t v24 = (uint64_t)v102;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1D16827AC(0, *(void *)(v24 + 16) + 1, 1);
            uint64_t v24 = (uint64_t)v102;
          }
          unint64_t v26 = *(void *)(v24 + 16);
          unint64_t v25 = *(void *)(v24 + 24);
          if (v26 >= v25 >> 1)
          {
            sub_1D16827AC(v25 > 1, v26 + 1, 1);
            uint64_t v24 = (uint64_t)v102;
          }
          ++v22;
          *(void *)(v24 + 16) = v26 + 1;
          uint64_t v27 = v24 + 16 * v26;
          *(void *)(v27 + 32) = v23;
          *(void *)(v27 + 40) = 1;
          if (v11 == v22)
          {
            *(void *)(v21 + 16) = v11;
            swift_bridgeObjectRelease_n();
            swift_release_n();
            uint64_t v7 = v101;
            goto LABEL_32;
          }
        }
        goto LABEL_106;
      }
      swift_bridgeObjectRelease();
      swift_release();
LABEL_32:
      uint64_t v28 = (uint64_t)v102;
      if (v102[2])
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652000);
        double v29 = (void *)sub_1D17BEB10();
        uint64_t v30 = *(void *)(v28 + 16);
        uint64_t v102 = v29;
        if (v30)
        {
          swift_retain();
          uint64_t v31 = 0;
          uint64_t v32 = (double *)(v28 + 40);
          while (1)
          {
            uint64_t v38 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_109;
            }
            double v39 = *(v32 - 1);
            double v40 = *v32;
            unint64_t v41 = sub_1D165AB40(v39);
            uint64_t v43 = v29[2];
            BOOL v44 = (v42 & 1) == 0;
            BOOL v36 = __OFADD__(v43, v44);
            uint64_t v45 = v43 + v44;
            if (v36) {
              goto LABEL_110;
            }
            char v46 = v42;
            if (v29[3] < v45)
            {
              sub_1D16A4A1C(v45, 1);
              double v29 = v102;
              unint64_t v41 = sub_1D165AB40(v39);
              if ((v46 & 1) != (v47 & 1)) {
                goto LABEL_132;
              }
            }
            if (v46)
            {
              unint64_t v34 = (void *)(v29[7] + 8 * v41);
              uint64_t v37 = *v34 + *(void *)&v40;
              if (__OFADD__(*v34, *(void *)&v40)) {
                goto LABEL_114;
              }
            }
            else
            {
              v29[(v41 >> 6) + 8] |= 1 << v41;
              uint64_t v33 = 8 * v41;
              *(double *)(v29[6] + v33) = v39;
              *(double *)(v29[7] + v33) = v40;
              unint64_t v34 = v29 + 2;
              uint64_t v35 = v29[2];
              BOOL v36 = __OFADD__(v35, 1);
              uint64_t v37 = v35 + 1;
              if (v36) {
                goto LABEL_113;
              }
            }
            v32 += 2;
            void *v34 = v37;
            ++v31;
            if (v38 == v30)
            {
              swift_release();
              uint64_t v7 = v101;
              break;
            }
          }
        }
      }
      else
      {
        double v29 = (void *)MEMORY[0x1E4FBC868];
      }
      swift_release();
      uint64_t v48 = v29[2];
      if (v48)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6516E0);
        int64_t v49 = (void *)swift_allocObject();
        int64_t v50 = _swift_stdlib_malloc_size(v49);
        uint64_t v51 = v50 - 32;
        if (v50 < 32) {
          uint64_t v51 = v50 - 17;
        }
        v49[2] = v48;
        v49[3] = 2 * (v51 >> 4);
        unint64_t v92 = sub_1D16F7EE4(&v102, v49 + 4, v48, (uint64_t)v29);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_1D1668088();
        if (v92 != (void *)v48) {
          goto LABEL_125;
        }
        swift_release();
        uint64_t v7 = v101;
      }
      else
      {
        int64_t v49 = (void *)MEMORY[0x1E4FBC860];
      }
      uint64_t v102 = v49;
      sub_1D16E7620((uint64_t *)&v102);
      swift_release();
      uint64_t v9 = v96;
      uint64_t v15 = v99;
      if (!v102[2]) {
        goto LABEL_131;
      }
      uint64_t v52 = v102[4];
      swift_release();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1D1667604(v99);
        uint64_t v15 = (void *)result;
      }
      if (v93 >= v15[2]) {
        goto LABEL_123;
      }
      uint64_t v13 = v97 + 1;
      unint64_t v17 = v93 + 1;
      v15[v93 + 4] = v52;
      if (v97 + 1 == a2) {
        goto LABEL_104;
      }
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  swift_release();
  __break(1u);
LABEL_131:
  swift_release();
  __break(1u);
LABEL_132:
  sub_1D17BEC60();
  __break(1u);
LABEL_133:
  sub_1D17BEA30();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

double sub_1D16F4588(int64_t *a1, uint64_t *a2)
{
  int64_t __C[3] = *MEMORY[0x1E4F143B8];
  int64_t v4 = *a1;
  int64_t v5 = a1[1];
  if (v5 != 1 && v4 != 1) {
    goto LABEL_22;
  }
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (v8 != 1 && v7 != 1) {
LABEL_23:
  }
    __break(1u);
  unint64_t v10 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v10 != v7 * v8)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    uint64_t v2 = (uint64_t)sub_1D1667604((void *)v2);
    if ((v10 & 0x8000000000000000) == 0) {
      goto LABEL_16;
    }
LABEL_21:
    sub_1D17BEA30();
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int64_t v11 = a1[2];
  uint64_t v12 = a2[2];
  v16[0] = *a1;
  v16[1] = v5;
  uint64_t v16[2] = v11;
  v15[0] = v7;
  v15[1] = v8;
  v15[2] = v12;
  - infix(_:_:)(v16, v15, __C);
  int64_t v3 = __C[2];
  uint64_t v2 = sub_1D1665914(v10, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_20;
  }
  if ((v10 & 0x8000000000000000) != 0) {
    goto LABEL_21;
  }
LABEL_16:
  vDSP_vsqD((const double *)(v3 + 32), 1, (double *)(v2 + 32), 1, v10);
  swift_bridgeObjectRelease();
  __C[0] = 0;
  swift_bridgeObjectRetain();
  vDSP_sveD((const double *)(v2 + 32), 1, (double *)__C, v10);
  swift_bridgeObjectRelease();
  double v13 = *(double *)__C;
  swift_bridgeObjectRelease();
  return sqrt(v13);
}

Swift::Double __swiftcall MAMatrix.euclideanDistance(row:column:)(Swift::Int row, Swift::Int column)
{
  __B[1] = *(double *)MEMORY[0x1E4F143B8];
  int64_t v6 = *((void *)v2 + 1);
  int64_t v7 = *(void *)v2 * v6;
  if ((unsigned __int128)(*(uint64_t *)v2 * (__int128)v6) >> 64 == v7 >> 63)
  {
    Swift::Int v3 = column;
    Swift::Int v4 = row;
    uint64_t v5 = *((void *)v2 + 2);
    uint64_t v2 = (double *)sub_1D1665914(*(void *)v2 * v6, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v2 = (double *)sub_1D1667604(v2);
LABEL_3:
  __B[0] = 1.0;
  if ((unsigned __int128)(v4 * (__int128)v6) >> 64 != (v4 * v6) >> 63) {
    __break(1u);
  }
  if (v6 < 0
    || (vDSP_vsmsbD((const double *)(v5 + 32 + 8 * v4 * v6), 1, __B, (const double *)(v5 + 32 + 8 * v3), v6, v2 + 4, 1, v6), vDSP_vsqD(v2 + 4, 1, v2 + 4, 1, v6), __B[0] = 0.0, v7 < 0))
  {
    sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_sveD(v2 + 4, 1, __B, v7);
    swift_bridgeObjectRelease();
    double v8 = __B[0];
    swift_bridgeObjectRelease();
    return sqrt(v8);
  }
  return result;
}

Swift::Double __swiftcall MAMatrix.euclideanDistance(rowA:rowB:)(Swift::Int rowA, Swift::Int rowB)
{
  __B[1] = *(double *)MEMORY[0x1E4F143B8];
  int64_t v6 = *((void *)v2 + 1);
  int64_t v7 = *(void *)v2 * v6;
  if ((unsigned __int128)(*(uint64_t *)v2 * (__int128)v6) >> 64 == v7 >> 63)
  {
    Swift::Int v3 = rowB;
    Swift::Int v4 = rowA;
    uint64_t v5 = *((void *)v2 + 2);
    uint64_t v2 = (double *)sub_1D1665914(*(void *)v2 * v6, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v2 = (double *)sub_1D1667604(v2);
LABEL_3:
  __B[0] = 1.0;
  if ((unsigned __int128)(v4 * (__int128)v6) >> 64 != (v4 * v6) >> 63)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if ((unsigned __int128)(v3 * (__int128)v6) >> 64 != (v3 * v6) >> 63) {
    goto LABEL_11;
  }
  if (v6 < 0
    || (vDSP_vsmsbD((const double *)(v5 + 32 + 8 * v4 * v6), 1, __B, (const double *)(v5 + 32 + 8 * v3 * v6), 1, v2 + 4, 1, v6), vDSP_vsqD(v2 + 4, 1, v2 + 4, 1, v6), __B[0] = 0.0, v7 < 0))
  {
    sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_sveD(v2 + 4, 1, __B, v7);
    swift_bridgeObjectRelease();
    double v8 = __B[0];
    swift_bridgeObjectRelease();
    return sqrt(v8);
  }
  return result;
}

Swift::Double __swiftcall MAMatrix.euclideanDistance(columnA:columnB:)(Swift::Int columnA, Swift::Int columnB)
{
  __B[1] = *(double *)MEMORY[0x1E4F143B8];
  int64_t v6 = *((void *)v2 + 1);
  int64_t v7 = *(void *)v2 * v6;
  if ((unsigned __int128)(*(uint64_t *)v2 * (__int128)v6) >> 64 != v7 >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }
  Swift::Int v3 = columnB;
  Swift::Int v4 = columnA;
  uint64_t v5 = *((void *)v2 + 2);
  uint64_t v2 = (double *)sub_1D1665914(*(void *)v2 * v6, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_7:
  }
    uint64_t v2 = (double *)sub_1D1667604(v2);
  __B[0] = 1.0;
  if (v6 < 0
    || (vDSP_vsmsbD((const double *)(v5 + 32 + 8 * v4), v6, __B, (const double *)(v5 + 32 + 8 * v3), v6, v2 + 4, 1, v6), vDSP_vsqD(v2 + 4, 1, v2 + 4, 1, v6), __B[0] = 0.0, v7 < 0))
  {
    sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    vDSP_sveD(v2 + 4, 1, __B, v7);
    swift_bridgeObjectRelease();
    double v8 = __B[0];
    swift_bridgeObjectRelease();
    return sqrt(v8);
  }
  return result;
}

Swift::Double __swiftcall MAMatrix.cosineSimilarity(vector:)(KnowledgeGraphKit::MAMatrix vector)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if (v4 != 1 && v3 != 1) {
    goto LABEL_26;
  }
  uint64_t v6 = *(void *)vector.rows;
  uint64_t v7 = *(void *)(vector.rows + 8);
  if (v7 != 1 && v6 != 1) {
    goto LABEL_27;
  }
  uint64_t v9 = v3 * v4;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_22;
  }
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v9 != v6 * v7)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v10 = *(void *)(vector.rows + 16);
  uint64_t v11 = v1[2];
  v17[0] = v3;
  v17[1] = v4;
  void v17[2] = v11;
  v16[0] = v6;
  v16[1] = v7;
  uint64_t v16[2] = v10;
  ⋅ infix(_:_:)(v17, v16);
  if (v9 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v9 > 0x7FFFFFFF)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }
  double v12 = result;
  cblas_dnrm2_NEWLAPACK();
  double v14 = v13;
  cblas_dnrm2_NEWLAPACK();
  Swift::Double result = v12 / (v14 * v15);
  if (result > 1.0) {
    Swift::Double result = 1.0;
  }
  if (result <= 0.0) {
    return 0.0;
  }
  return result;
}

Swift::Double __swiftcall MAMatrix.cosineSimilarity(row:column:)(Swift::Int row, Swift::Int column)
{
  __C[1] = *(double *)MEMORY[0x1E4F143B8];
  vDSP_Length v3 = *v2;
  if (*v2 != v2[1])
  {
    __break(1u);
    goto LABEL_11;
  }
  vDSP_Length v4 = v2[2];
  __C[0] = 0.0;
  if ((unsigned __int128)(row * (__int128)(uint64_t)v3) >> 64 != (uint64_t)(row * v3) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    sub_1D17BEA30();
    __break(1u);
    return result;
  }
  vDSP_dotprD((const double *)(v4 + 32 + 8 * row * v3), 1, (const double *)(v4 + 32 + 8 * column), v3, __C, v3);
  if (v3 >> 31) {
LABEL_12:
  }
    __break(1u);
  cblas_dnrm2_NEWLAPACK();
  double v6 = v5;
  cblas_dnrm2_NEWLAPACK();
  Swift::Double result = __C[0] / (v6 * v7);
  if (result > 1.0) {
    Swift::Double result = 1.0;
  }
  if (result <= 0.0) {
    return 0.0;
  }
  return result;
}

Swift::Double __swiftcall MAMatrix.cosineSimilarity(rowA:rowB:)(Swift::Int rowA, Swift::Int rowB)
{
  __C[1] = *(double *)MEMORY[0x1E4F143B8];
  int64_t v4 = *(void *)(v2 + 8);
  uint64_t v3 = *(void *)(v2 + 16);
  __C[0] = 0.0;
  if ((unsigned __int128)(rowA * (__int128)v4) >> 64 != (rowA * v4) >> 63)
  {
    __break(1u);
    goto LABEL_11;
  }
  if ((unsigned __int128)(rowB * (__int128)v4) >> 64 != (rowB * v4) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 < 0)
  {
    sub_1D17BEA30();
    __break(1u);
    return result;
  }
  vDSP_dotprD((const double *)(v3 + 32 + 8 * rowA * v4), 1, (const double *)(v3 + 32 + 8 * rowB * v4), 1, __C, v4);
  if ((unint64_t)v4 >> 31) {
LABEL_12:
  }
    __break(1u);
  cblas_dnrm2_NEWLAPACK();
  double v6 = v5;
  cblas_dnrm2_NEWLAPACK();
  Swift::Double result = __C[0] / (v6 * v7);
  if (result > 1.0) {
    Swift::Double result = 1.0;
  }
  if (result <= 0.0) {
    return 0.0;
  }
  return result;
}

Swift::Double __swiftcall MAMatrix.cosineSimilarity(columnA:columnB:)(Swift::Int columnA, Swift::Int columnB)
{
  __C[1] = *(double *)MEMORY[0x1E4F143B8];
  vDSP_Length v4 = *v2;
  vDSP_Stride v3 = v2[1];
  vDSP_Length v5 = v2[2];
  __C[0] = 0.0;
  if ((v4 & 0x8000000000000000) != 0)
  {
    sub_1D17BEA30();
    __break(1u);
    return result;
  }
  vDSP_dotprD((const double *)(v5 + 32 + 8 * columnA), v3, (const double *)(v5 + 32 + 8 * columnB), v3, __C, v4);
  if (v4 >> 31)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  if (v3 > 0x7FFFFFFF) {
    goto LABEL_12;
  }
  cblas_dnrm2_NEWLAPACK();
  double v7 = v6;
  cblas_dnrm2_NEWLAPACK();
  Swift::Double result = __C[0] / (v7 * v8);
  if (result > 1.0) {
    Swift::Double result = 1.0;
  }
  if (result <= 0.0) {
    return 0.0;
  }
  return result;
}

Swift::Double __swiftcall MAMatrix.cosineDistance(vector:)(KnowledgeGraphKit::MAMatrix vector)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if (v4 != 1 && v3 != 1) {
    goto LABEL_22;
  }
  uint64_t v6 = *(void *)vector.rows;
  uint64_t v7 = *(void *)(vector.rows + 8);
  if (v7 != 1 && v6 != 1) {
    goto LABEL_23;
  }
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_20;
  }
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v3 * v4 != v6 * v7)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    return result;
  }
  uint64_t v9 = *(void *)(vector.rows + 16);
  uint64_t v10 = v1[2];
  v13[3] = *v1;
  v13[4] = v4;
  v13[5] = v10;
  v13[0] = v6;
  v13[1] = v7;
  void v13[2] = v9;
  vector.rows = (Swift::Int)v13;
  long double v11 = MAMatrix.cosineSimilarity(vector:)(vector);
  Swift::Double result = acos(v11) / 3.14159265;
  double v12 = 1.0;
  if ((*(void *)&result & 0xFFFFFFFFFFFFFLL) == 0) {
    double v12 = result;
  }
  if ((~*(void *)&result & 0x7FF0000000000000) == 0) {
    return v12;
  }
  return result;
}

uint64_t sub_1D16F5208(uint64_t result, uint64_t *a2)
{
  int64_t v2 = *(void *)result;
  int64_t v3 = *(void *)(result + 8);
  if (v3 != 1 && v2 != 1) {
    goto LABEL_24;
  }
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != 1 && v5 != 1) {
    goto LABEL_25;
  }
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_19;
  }
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v2 * v3 != v5 * v6)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  int64_t v8 = *(void *)(result + 16);
  uint64_t v9 = a2[2];
  v11[0] = *(void *)result;
  v11[1] = v3;
  void v11[2] = v8;
  v10[0] = v5;
  v10[1] = v6;
  v10[2] = v9;
  - infix(_:_:)(v11, v10, &v12);
  Swift::Double result = v12 * v13;
  if ((unsigned __int128)(v12 * (__int128)v13) >> 64 != (v12 * v13) >> 63)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (result >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (result <= 0x7FFFFFFF)
    {
      cblas_dasum_NEWLAPACK();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

Swift::Double __swiftcall MAMatrix.manhattanDistance(vector:)(KnowledgeGraphKit::MAMatrix vector)
{
  sub_1D16F5328((long long *)vector.rows, (uint64_t (*)(long long *, long long *))sub_1D16F5208);
  return result;
}

uint64_t sub_1D16F5328(long long *a1, uint64_t (*a2)(long long *, long long *))
{
  uint64_t v3 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)v2 + 2);
  long long v8 = *v2;
  uint64_t v9 = v4;
  long long v6 = *a1;
  uint64_t v7 = v3;
  return a2(&v8, &v6);
}

Swift::Double __swiftcall MAMatrix.manhattanDistance(row:column:)(Swift::Int row, Swift::Int column)
{
  __B[1] = *(double *)MEMORY[0x1E4F143B8];
  int64_t v6 = *((void *)v2 + 1);
  uint64_t v7 = *(void *)v2 * v6;
  if ((unsigned __int128)(*(uint64_t *)v2 * (__int128)v6) >> 64 == v7 >> 63)
  {
    Swift::Int v3 = column;
    Swift::Int v4 = row;
    uint64_t v5 = *((void *)v2 + 2);
    int64_t v2 = (double *)sub_1D1665914(*(void *)v2 * v6, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  int64_t v2 = (double *)sub_1D1667604(v2);
LABEL_3:
  __B[0] = 1.0;
  if ((unsigned __int128)(v4 * (__int128)v6) >> 64 != (v4 * v6) >> 63)
  {
    __break(1u);
    goto LABEL_11;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    vDSP_vsmsbD((const double *)(v5 + 32 + 8 * v4 * v6), 1, __B, (const double *)(v5 + 32 + 8 * v3), v6, v2 + 4, 1, v6);
    if (v7 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v7 <= 0x7FFFFFFF)
      {
        swift_bridgeObjectRetain();
        cblas_dasum_NEWLAPACK();
        double v9 = v8;
        swift_bridgeObjectRelease_n();
        return v9;
      }
LABEL_12:
      __break(1u);
    }
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  sub_1D17BEA30();
  __break(1u);
  return result;
}

Swift::Double __swiftcall MAMatrix.manhattanDistance(rowA:rowB:)(Swift::Int rowA, Swift::Int rowB)
{
  __B[1] = *(double *)MEMORY[0x1E4F143B8];
  int64_t v6 = *((void *)v2 + 1);
  uint64_t v7 = *(void *)v2 * v6;
  if ((unsigned __int128)(*(uint64_t *)v2 * (__int128)v6) >> 64 == v7 >> 63)
  {
    Swift::Int v3 = rowB;
    Swift::Int v4 = rowA;
    uint64_t v5 = *((void *)v2 + 2);
    int64_t v2 = (double *)sub_1D1665914(*(void *)v2 * v6, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  int64_t v2 = (double *)sub_1D1667604(v2);
LABEL_3:
  __B[0] = 1.0;
  if ((unsigned __int128)(v4 * (__int128)v6) >> 64 != (v4 * v6) >> 63)
  {
    __break(1u);
    goto LABEL_12;
  }
  if ((unsigned __int128)(v3 * (__int128)v6) >> 64 != (v3 * v6) >> 63)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    vDSP_vsmsbD((const double *)(v5 + 32 + 8 * v4 * v6), 1, __B, (const double *)(v5 + 32 + 8 * v3 * v6), 1, v2 + 4, 1, v6);
    if (v7 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v7 <= 0x7FFFFFFF)
      {
        swift_bridgeObjectRetain();
        cblas_dasum_NEWLAPACK();
        double v9 = v8;
        swift_bridgeObjectRelease_n();
        return v9;
      }
LABEL_14:
      __break(1u);
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  sub_1D17BEA30();
  __break(1u);
  return result;
}

Swift::Double __swiftcall MAMatrix.manhattanDistance(columnA:columnB:)(Swift::Int columnA, Swift::Int columnB)
{
  __B[1] = *(double *)MEMORY[0x1E4F143B8];
  int64_t v6 = *((void *)v2 + 1);
  uint64_t v7 = *(void *)v2 * v6;
  if ((unsigned __int128)(*(uint64_t *)v2 * (__int128)v6) >> 64 == v7 >> 63)
  {
    Swift::Int v3 = columnB;
    Swift::Int v4 = columnA;
    uint64_t v5 = *((void *)v2 + 2);
    int64_t v2 = (double *)sub_1D1665914(*(void *)v2 * v6, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  int64_t v2 = (double *)sub_1D1667604(v2);
LABEL_3:
  __B[0] = 1.0;
  if ((v6 & 0x8000000000000000) == 0)
  {
    vDSP_vsmsbD((const double *)(v5 + 32 + 8 * v4), v6, __B, (const double *)(v5 + 32 + 8 * v3), v6, v2 + 4, 1, v6);
    if (v7 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v7 <= 0x7FFFFFFF)
    {
      swift_bridgeObjectRetain();
      cblas_dasum_NEWLAPACK();
      double v9 = v8;
      swift_bridgeObjectRelease_n();
      return v9;
    }
    __break(1u);
  }
  sub_1D17BEA30();
  __break(1u);
  return result;
}

Swift::Double __swiftcall MAMatrix.distance(vector:distance:)(KnowledgeGraphKit::MAMatrix vector, KnowledgeGraphKit::MAMatrixDistances distance)
{
  uint64_t v4 = *(void *)vector.rows;
  uint64_t v3 = *(void *)(vector.rows + 8);
  uint64_t v5 = *(void *)(vector.rows + 16);
  int v6 = *(unsigned __int8 *)vector.columns;
  int64_t v7 = v2[1];
  int64_t v8 = v2[2];
  if (*(unsigned char *)vector.columns)
  {
    int64_t v11 = *v2;
    uint64_t v12 = v7;
    uint64_t v13 = v8;
    v10[0] = v4;
    v10[1] = v3;
    v10[2] = v5;
    if (v6 == 1) {
      return sub_1D16F4588(&v11, v10);
    }
    else {
      sub_1D16F5208((uint64_t)&v11, v10);
    }
  }
  else
  {
    int64_t v14 = *v2;
    int64_t v15 = v7;
    int64_t v16 = v8;
    int64_t v11 = v4;
    uint64_t v12 = v3;
    uint64_t v13 = v5;
    vector.rows = (Swift::Int)&v11;
    return MAMatrix.cosineSimilarity(vector:)(vector);
  }
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.similarity(axe:distance:identity:)(KnowledgeGraphKit::MAMatrixAxes axe, KnowledgeGraphKit::MAMatrixDistances distance, Swift::Bool identity)
{
  uint64_t v5 = v3;
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  if (*(unsigned char *)axe != 1)
  {
    if ((unsigned __int128)(v6 * (__int128)v6) >> 64 == (v6 * v6) >> 63)
    {
      *(void *)&long long v15 = *v4;
      *((void *)&v15 + 1) = *v4;
      uint64_t v16 = sub_1D1665914(v6 * v6, 0.0);
      uint64_t v10 = sub_1D165C128(0, &qword_1EA651958);
      MEMORY[0x1F4188790](v10, v11);
      goto LABEL_6;
    }
LABEL_8:
    __break(1u);
  }
  if ((unsigned __int128)(v7 * (__int128)v7) >> 64 != (v7 * v7) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  *(void *)&long long v15 = v4[1];
  *((void *)&v15 + 1) = v15;
  uint64_t v16 = sub_1D1665914(v7 * v7, 0.0);
  uint64_t v8 = sub_1D165C128(0, &qword_1EA651958);
  MEMORY[0x1F4188790](v8, v9);
LABEL_6:
  Swift::Int v12 = sub_1D17BE570();
  *(_OWORD *)uint64_t v5 = v15;
  *(void *)(v5 + 16) = v16;
  result.elements._uint64_t rawValue = v14;
  result.columns = v13;
  result.rows = v12;
  return result;
}

uint64_t sub_1D16F5AC8(Swift::Int a1, vDSP_Length a2, vDSP_Length a3, uint64_t a4, char a5, char a6, os_unfair_lock_s *a7, uint64_t *a8)
{
  int64_t __C[3] = *(double *)MEMORY[0x1E4F143B8];
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_54:
    sub_1D17BEA30();
    __break(1u);
LABEL_55:
    uint64_t result = sub_1D17BEA30();
    __break(1u);
  }
  else if (a3)
  {
    long long v15 = (void *)sub_1D17BE1C0();
    v15[2] = a3;
    bzero(v15 + 4, 8 * a3);
    unint64_t v16 = 0;
    BOOL v34 = (unsigned __int128)((uint64_t)a2 * (__int128)(uint64_t)a3) >> 64 != (uint64_t)(a3 * a2) >> 63;
    unint64_t v17 = (const double *)(a4 + 32);
    uint64_t v36 = a3 * a2;
    __A = (double *)(a4 + 32 + 8 * a1);
    uint64_t v30 = 8 * a3 * a2;
    vDSP_Length __N = a2;
    vDSP_Length v33 = a2 >> 31;
    char v31 = a5;
    char v32 = a6;
    do
    {
      if (a3 == v16)
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
      }
      if (a1 != v16 || (a5 & 1) != 0)
      {
        if (a6)
        {
          if (a6 == 1)
          {
            *(void *)&__C[0] = __N;
            *(void *)&__C[1] = a3;
            *(void *)&double __C[2] = a4;
            double v18 = MAMatrix.euclideanDistance(columnA:columnB:)(a1, v16);
          }
          else
          {
            if (v34) {
              goto LABEL_50;
            }
            if (v36 < 0) {
              goto LABEL_54;
            }
            if (v36)
            {
              uint64_t v23 = sub_1D17BE1C0();
              *(void *)(v23 + 16) = v36;
              uint64_t v24 = (double *)(v23 + 32);
              bzero((void *)(v23 + 32), v30);
              __C[0] = 1.0;
              vDSP_vsmsbD(__A, a3, __C, v17, a3, v24, 1, a3);
              if (v36 > 0x7FFFFFFF) {
                goto LABEL_53;
              }
            }
            else
            {
              __C[0] = 1.0;
              vDSP_vsmsbD(__A, a3, __C, v17, a3, (double *)(MEMORY[0x1E4FBC860] + 32), 1, a3);
            }
            swift_bridgeObjectRetain();
            cblas_dasum_NEWLAPACK();
            double v18 = v25;
            swift_bridgeObjectRelease_n();
            a5 = v31;
            a6 = v32;
          }
        }
        else
        {
          __C[0] = 0.0;
          if ((__N & 0x8000000000000000) != 0) {
            goto LABEL_55;
          }
          vDSP_dotprD(__A, a3, v17, a3, __C, __N);
          if (v33) {
            goto LABEL_51;
          }
          if (a3 >> 31) {
            goto LABEL_52;
          }
          cblas_dnrm2_NEWLAPACK();
          double v20 = v19;
          cblas_dnrm2_NEWLAPACK();
          double v22 = __C[0] / (v20 * v21);
          if (v22 > 1.0) {
            double v22 = 1.0;
          }
          if (v22 > 0.0) {
            double v18 = v22;
          }
          else {
            double v18 = 0.0;
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v15 = sub_1D1667604(v15);
        }
        if (v16 >= v15[2]) {
          goto LABEL_49;
        }
        *(double *)&v15[v16 + 4] = v18;
      }
      os_unfair_lock_lock(a7);
      if (*a8 != a3) {
        goto LABEL_43;
      }
      if (a8[1] <= a1) {
        goto LABEL_44;
      }
      unint64_t v26 = (void *)a8[2];
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      a8[2] = (uint64_t)v26;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v26 = sub_1D1667604(v26);
        a8[2] = (uint64_t)v26;
      }
      if (*a8 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_45;
      }
      if (*a8 > 0x7FFFFFFF) {
        goto LABEL_46;
      }
      uint64_t v28 = a8[1];
      if (v28 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_47;
      }
      if (v28 > 0x7FFFFFFF) {
        goto LABEL_48;
      }
      ++v16;
      cblas_dcopy_NEWLAPACK();
      a8[2] = (uint64_t)v26;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(a7);
      ++v17;
    }
    while (a3 != v16);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D16F5F98(Swift::Int a1, uint64_t a2, int64_t a3, uint64_t a4, char a5, char a6, os_unfair_lock_s *a7, uint64_t a8)
{
  int64_t __C[3] = *(double *)MEMORY[0x1E4F143B8];
  if (a2 < 0)
  {
LABEL_58:
    uint64_t result = sub_1D17BEA30();
    __break(1u);
  }
  else
  {
    double v8 = *(double *)&a2;
    if (*(double *)&a2 != 0.0)
    {
      int64_t v14 = (double *)sub_1D17BE1C0();
      void v14[2] = v8;
      bzero(v14 + 4, 8 * *(void *)&v8);
      Swift::Int v15 = 0;
      uint64_t v16 = *(void *)&v8 * a3;
      BOOL v31 = (unsigned __int128)(*(uint64_t *)&v8 * (__int128)a3) >> 64 != (*(void *)&v8 * a3) >> 63;
      BOOL v35 = (unsigned __int128)(a1 * (__int128)a3) >> 64 != (a1 * a3) >> 63;
      vDSP_Length v33 = (const double *)(a4 + 32 + 8 * a1 * a3);
      uint64_t v34 = a4 + 32;
      uint64_t v28 = 8 * *(void *)&v8 * a3;
      Swift::Int v29 = a1;
      double v30 = v8;
      uint64_t v37 = *(void *)&v8 * a3;
      while (1)
      {
        if (*(void *)&v8 == v15)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
        }
        if (a1 != v15 || (a5 & 1) != 0)
        {
          if (a6)
          {
            if (a6 == 1)
            {
              __C[0] = v8;
              *(void *)&__C[1] = a3;
              *(void *)&double __C[2] = a4;
              double v17 = MAMatrix.euclideanDistance(rowA:rowB:)(a1, v15);
            }
            else
            {
              if (v31) {
                goto LABEL_51;
              }
              if (v16 < 0) {
                goto LABEL_58;
              }
              if (v16)
              {
                uint64_t v22 = sub_1D17BE1C0();
                *(void *)(v22 + 16) = v16;
                bzero((void *)(v22 + 32), v28);
              }
              else
              {
                uint64_t v22 = MEMORY[0x1E4FBC860];
              }
              __C[0] = 1.0;
              if (v35) {
                goto LABEL_53;
              }
              if ((unsigned __int128)(v15 * (__int128)a3) >> 64 != (v15 * a3) >> 63) {
                goto LABEL_55;
              }
              if (a3 < 0)
              {
LABEL_57:
                sub_1D17BEA30();
                __break(1u);
                goto LABEL_58;
              }
              vDSP_vsmsbD(v33, 1, __C, (const double *)(v34 + 8 * v15 * a3), 1, (double *)(v22 + 32), 1, a3);
              if (v37 > 0x7FFFFFFF) {
                goto LABEL_56;
              }
              swift_bridgeObjectRetain();
              cblas_dasum_NEWLAPACK();
              double v17 = v23;
              swift_bridgeObjectRelease_n();
              a1 = v29;
              double v8 = v30;
            }
          }
          else
          {
            __C[0] = 0.0;
            if (v35) {
              goto LABEL_50;
            }
            if ((unsigned __int128)(v15 * (__int128)a3) >> 64 != (v15 * a3) >> 63) {
              goto LABEL_52;
            }
            if (a3 < 0) {
              goto LABEL_57;
            }
            vDSP_dotprD(v33, 1, (const double *)(v34 + 8 * v15 * a3), 1, __C, a3);
            if ((unint64_t)a3 >> 31) {
              goto LABEL_54;
            }
            cblas_dnrm2_NEWLAPACK();
            double v19 = v18;
            cblas_dnrm2_NEWLAPACK();
            double v21 = __C[0] / (v19 * v20);
            if (v21 > 1.0) {
              double v21 = 1.0;
            }
            if (v21 > 0.0) {
              double v17 = v21;
            }
            else {
              double v17 = 0.0;
            }
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int64_t v14 = (double *)sub_1D1667604(v14);
          }
          if ((unint64_t)v15 >= *((void *)v14 + 2)) {
            goto LABEL_49;
          }
          v14[v15 + 4] = v17;
        }
        os_unfair_lock_lock(a7);
        if (*(void *)(a8 + 8) != *(void *)&v8) {
          goto LABEL_45;
        }
        uint64_t v24 = *(void **)(a8 + 16);
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(a8 + 16) = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v24 = sub_1D1667604(v24);
          *(void *)(a8 + 16) = v24;
        }
        uint64_t v26 = *(void *)(a8 + 8);
        if (v26 < (uint64_t)0xFFFFFFFF80000000) {
          goto LABEL_46;
        }
        if (v26 > 0x7FFFFFFF) {
          goto LABEL_47;
        }
        if ((unsigned __int128)(a1 * (__int128)v26) >> 64 != (a1 * v26) >> 63) {
          goto LABEL_48;
        }
        ++v15;
        cblas_dcopy_NEWLAPACK();
        *(void *)(a8 + 16) = v24;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(a7);
        uint64_t v16 = v37;
        if (*(void *)&v8 == v15) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.jaccardSimilarity()()
{
  uint64_t v5 = v0;
  uint64_t v6 = v1[1];
  uint64_t v7 = (double *)v1[2];
  *(void *)&long long v30 = *v1;
  *((void *)&v30 + 1) = v6;
  BOOL v31 = v7;
  *(void *)&long long v28 = v30;
  *((void *)&v28 + 1) = v6;
  Swift::Int v29 = v7;
  <*> infix(_:_:)((uint64_t *)&v30, &v28, (uint64_t *)&v32);
  long long v8 = v32;
  uint64_t v9 = (uint64_t)v33;
  long long v30 = v32;
  BOOL v31 = v33;
  uint64_t v10 = &v30;
  MAMatrix.diag()();
  uint64_t v11 = *((void *)&v8 + 1) * v8;
  if ((unsigned __int128)(*((uint64_t *)&v8 + 1) * (__int128)(uint64_t)v8) >> 64 == (uint64_t)(*((void *)&v8 + 1) * v8) >> 63)
  {
    uint64_t v24 = v5;
    int64_t v3 = *((void *)&v32 + 1);
    int64_t v4 = v32;
    unint64_t v22 = v6;
    uint64_t v23 = (uint64_t)v33;
    uint64_t v10 = (long long *)sub_1D1665914(*((void *)&v8 + 1) * v8, 0.0);
    uint64_t v6 = v9 + 32;
    uint64_t v2 = *(void *)(v9 + 16);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v10 = (long long *)sub_1D1667604(v10);
LABEL_3:
  uint64_t v12 = *((void *)v10 + 2);
  *(void *)&long long v32 = v10 + 2;
  *((void *)&v32 + 1) = v12;
  sub_1D16EF6E8((uint64_t)&v32, v6, v2, v8, *((uint64_t *)&v8 + 1));
  swift_bridgeObjectRelease();
  *(void *)&long long v32 = *((void *)&v8 + 1);
  *((void *)&v32 + 1) = v8;
  vDSP_Length v33 = (double *)v10;
  swift_bridgeObjectRetain();
  Swift::Int v13 = (double *)v10;
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if (v11 < 0) {
      goto LABEL_25;
    }
  }
  else
  {
    Swift::Int v13 = (double *)sub_1D1667604(v10);
    if (v11 < 0) {
      goto LABEL_25;
    }
  }
  vDSP_vnegD((const double *)v10 + 4, 1, v13 + 4, 1, *((void *)&v8 + 1) * v8);
  *(void *)&long long v30 = *((void *)&v8 + 1);
  *((void *)&v30 + 1) = v8;
  BOOL v31 = v13;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
LABEL_21:
    uint64_t v9 = (uint64_t)sub_1D1667604((void *)v9);
    if (v3 < 0) {
      goto LABEL_25;
    }
    goto LABEL_8;
  }
  uint64_t v9 = sub_1D1665914(v3 * v4, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_21;
  }
  if (v3 < 0) {
    goto LABEL_25;
  }
LABEL_8:
  if (v4 < 0) {
    goto LABEL_25;
  }
  uint64_t v14 = v23;
  vDSP_mtransD((const double *)(v23 + 32), 1, (double *)(v9 + 32), 1, v3, v4);
  *(void *)&long long v26 = v3;
  *((void *)&v26 + 1) = v4;
  uint64_t v27 = v9;
  + infix(_:_:)((int64_t *)&v30, (uint64_t *)&v26, (int64_t *)&v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v26 = v28;
  uint64_t v27 = (uint64_t)v29;
  v25[0] = v4;
  v25[1] = v3;
  v25[2] = v23;
  + infix(_:_:)((int64_t *)&v26, v25, (int64_t *)&v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v28 = v30;
  Swift::Int v29 = v31;
  / infix(_:_:)((int64_t *)&v32, (vDSP_Length *)&v28, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  vDSP_Length v15 = *v24;
  int64_t v16 = v24[1];
  int64_t v17 = v16 * *v24;
  if ((unsigned __int128)(v16 * (__int128)*v24) >> 64 == v17 >> 63)
  {
    uint64_t v9 = v24[2];
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_1D1665914(v17, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if ((v16 & 0x8000000000000000) == 0) {
        goto LABEL_12;
      }
LABEL_25:
      Swift::Int v19 = sub_1D17BEA30();
      __break(1u);
      goto _$s17KnowledgeGraphKit8MAMatrixV17jaccardSimilarityACyF;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v14 = (uint64_t)sub_1D1667604((void *)v14);
  if (v16 < 0) {
    goto LABEL_25;
  }
LABEL_12:
  if ((v15 & 0x8000000000000000) != 0) {
    goto LABEL_25;
  }
  vDSP_mtransD((const double *)(v9 + 32), 1, (double *)(v14 + 32), 1, v16, v15);
  swift_bridgeObjectRelease();
  *(void *)&long long v32 = v16;
  *((void *)&v32 + 1) = v15;
  vDSP_Length v33 = (double *)v14;
  += infix(_:_:)((vDSP_Length *)v24, (uint64_t)&v32);
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_1D1665914(v22, 1.0);
  *(void *)&long long v32 = 1;
  *((void *)&v32 + 1) = v22;
  vDSP_Length v33 = (double *)v18;
  v35.rows = (Swift::Int)&v32;
  MAMatrix.setDiag(vector:)(v35);
  Swift::Int v19 = swift_bridgeObjectRelease();
_$s17KnowledgeGraphKit8MAMatrixV17jaccardSimilarityACyF:
  result.elements._uint64_t rawValue = v21;
  result.columns = v20;
  result.rows = v19;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.jaccardDistance()()
{
  uint64_t v2 = v0;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)v1 + 2);
  long long __B = *v1;
  uint64_t v13 = v3;
  MAMatrix.jaccardSimilarity()();
  uint64_t v4 = v14;
  uint64_t v5 = v15;
  swift_bridgeObjectRetain();
  uint64_t v6 = v16;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = (double *)sub_1D1667604(v16);
  }
  *(void *)&long long __B = 0xBFF0000000000000;
  vDSP_Length v7 = v14 * v15;
  if ((unsigned __int128)(v14 * (__int128)v15) >> 64 != (v14 * v15) >> 63)
  {
    __break(1u);
LABEL_9:
    long long v8 = sub_1D1667604(v6);
    goto LABEL_6;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    Swift::Int v9 = sub_1D17BEA30();
    __break(1u);
    goto LABEL_12;
  }
  vDSP_vsaddD(v16 + 4, 1, (const double *)&__B, v6 + 4, 1, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  long long v8 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_9;
  }
LABEL_6:
  if (*((void *)v6 + 2) >> 31) {
    __break(1u);
  }
  cblas_dscal_NEWLAPACK();
  Swift::Int v9 = swift_bridgeObjectRelease();
  *uint64_t v2 = v4;
  v2[1] = v5;
  v2[2] = v8;
LABEL_12:
  result.elements._uint64_t rawValue = v11;
  result.columns = v10;
  result.rows = v9;
  return result;
}

KnowledgeGraphKit::MAMatrix __swiftcall MAMatrix.exponentialSmoothing(factor:axe:)(Swift::Double factor, KnowledgeGraphKit::MAMatrixAxes axe)
{
  uint64_t v5 = v2;
  uint64_t v6 = *v3;
  uint64_t v7 = v3[1];
  long long v8 = (void *)v3[2];
  if (*(unsigned char *)axe == 1)
  {
    if (v7 < 0)
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    if (v7)
    {
      if (v6 < 0)
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      *(void *)&axe = swift_bridgeObjectRetain();
      unint64_t v11 = 0;
      while (v11 != v7)
      {
        if (v6)
        {
          if (v11 >= v8[2]) {
            goto LABEL_74;
          }
          double v12 = *(double *)&v8[v11 + 4];
          *(void *)&axe = swift_isUniquelyReferenced_nonNull_native();
          if ((axe & 1) == 0)
          {
            *(void *)&axe = sub_1D1667604(v8);
            long long v8 = (void *)axe;
          }
          if (v11 >= v8[2]) {
            goto LABEL_75;
          }
          *(double *)&v8[v11 + 4] = v12 * factor;
          if (v6 != 1)
          {
            uint64_t v13 = 1;
            do
            {
              uint64_t v14 = v13 * v7;
              if ((unsigned __int128)(v13 * (__int128)v7) >> 64 != (v13 * v7) >> 63) {
                goto LABEL_60;
              }
              unint64_t v15 = v14 + v11;
              if (__OFADD__(v14, v11)) {
                goto LABEL_61;
              }
              if ((v15 & 0x8000000000000000) != 0) {
                goto LABEL_62;
              }
              unint64_t v16 = v8[2];
              if (v15 >= v16) {
                goto LABEL_63;
              }
              uint64_t v17 = v13 - 1;
              uint64_t v18 = (v13 - 1) * v7;
              if ((unsigned __int128)(v17 * (__int128)v7) >> 64 != v18 >> 63) {
                goto LABEL_64;
              }
              BOOL v19 = __OFADD__(v18, v11);
              unint64_t v20 = v18 + v11;
              if (v19) {
                goto LABEL_65;
              }
              if (v20 >= v16) {
                goto LABEL_66;
              }
              double v21 = *(double *)&v8[v15 + 4];
              double v22 = *(double *)&v8[v20 + 4];
              *(void *)&axe = swift_isUniquelyReferenced_nonNull_native();
              if ((axe & 1) == 0)
              {
                *(void *)&axe = sub_1D1667604(v8);
                long long v8 = (void *)axe;
              }
              if (v15 >= v8[2]) {
                goto LABEL_67;
              }
              *(double *)&v8[v15 + 4] = v21 * factor + (1.0 - factor) * v22;
              uint64_t v13 = v17 + 2;
            }
            while (v17 + 2 != v6);
          }
        }
        if (++v11 == v7) {
          goto LABEL_53;
        }
      }
      goto LABEL_69;
    }
  }
  else
  {
    if (v6 < 0)
    {
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    if (v6)
    {
      if (v7 < 0)
      {
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      *(void *)&axe = swift_bridgeObjectRetain();
      uint64_t v23 = 0;
      while (v23 != v6)
      {
        if (v7)
        {
          unint64_t v24 = v23 * v7;
          if ((unsigned __int128)(v23 * (__int128)v7) >> 64 != (v23 * v7) >> 63) {
            goto LABEL_70;
          }
          if ((v24 & 0x8000000000000000) != 0) {
            goto LABEL_71;
          }
          if (v24 >= v8[2]) {
            goto LABEL_72;
          }
          double v25 = *(double *)&v8[v24 + 4];
          *(void *)&axe = swift_isUniquelyReferenced_nonNull_native();
          if ((axe & 1) == 0)
          {
            *(void *)&axe = sub_1D1667604(v8);
            long long v8 = (void *)axe;
          }
          if (v24 >= v8[2]) {
            goto LABEL_73;
          }
          *(double *)&v8[v24 + 4] = v25 * factor;
          if (v7 != 1)
          {
            uint64_t v26 = 1;
            while (1)
            {
              unint64_t v27 = v24 + v26;
              if (__OFADD__(v24, v26)) {
                break;
              }
              if ((v27 & 0x8000000000000000) != 0) {
                goto LABEL_55;
              }
              unint64_t v28 = v8[2];
              if (v27 >= v28) {
                goto LABEL_56;
              }
              uint64_t v29 = v26 - 1;
              BOOL v19 = __OFADD__(v24, v26 - 1);
              unint64_t v30 = v24 + v26 - 1;
              if (v19) {
                goto LABEL_57;
              }
              if (v30 >= v28) {
                goto LABEL_58;
              }
              double v31 = *(double *)&v8[v27 + 4];
              double v32 = *(double *)&v8[v30 + 4];
              *(void *)&axe = swift_isUniquelyReferenced_nonNull_native();
              if ((axe & 1) == 0)
              {
                *(void *)&axe = sub_1D1667604(v8);
                long long v8 = (void *)axe;
              }
              if (v27 >= v8[2]) {
                goto LABEL_59;
              }
              *(double *)&v8[v27 + 4] = v31 * factor + (1.0 - factor) * v32;
              uint64_t v26 = v29 + 2;
              if (v29 + 2 == v7) {
                goto LABEL_31;
              }
            }
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
            break;
          }
        }
LABEL_31:
        if (++v23 == v6) {
          goto LABEL_53;
        }
      }
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
  }
  *(void *)&axe = swift_bridgeObjectRetain();
LABEL_53:
  *uint64_t v5 = v6;
  v5[1] = v7;
  uint64_t v5[2] = v8;
LABEL_80:
  result.elements._uint64_t rawValue = v10;
  result.columns = v9;
  LOBYTE(result.rows) = axe;
  return result;
}

sparse_m_double *MAMatrix.sparseMatrix()()
{
  uint64_t v1 = *(sparse_m_double **)v0;
  if ((*(void *)v0 & 0x8000000000000000) != 0) {
    goto LABEL_40;
  }
  int64_t v2 = *(void *)(v0 + 8);
  if (v1)
  {
    if (v2 < 0)
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v6 = v5 + 32;
    double v21 = (void *)MEMORY[0x1E4FBC860];
    double v22 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v20 = v1;
    while (v4 != v1)
    {
      if (v2)
      {
        if ((unsigned __int128)((uint64_t)v4 * (__int128)v2) >> 64 != ((uint64_t)v4 * v2) >> 63) {
          goto LABEL_39;
        }
        uint64_t v7 = 0;
        long long v8 = (void *)MEMORY[0x1E4FBC860];
        Swift::Int v9 = (void *)MEMORY[0x1E4FBC860];
        while ((v3 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)(v3 + v7) >= *(void *)(v5 + 16)) {
            goto LABEL_37;
          }
          double v10 = *(double *)(v6 + 8 * v7);
          if (v10 != 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              long long v8 = sub_1D169C770(0, v8[2] + 1, 1, v8);
            }
            unint64_t v12 = v8[2];
            unint64_t v11 = v8[3];
            if (v12 >= v11 >> 1) {
              long long v8 = sub_1D169C770((void *)(v11 > 1), v12 + 1, 1, v8);
            }
            void v8[2] = v12 + 1;
            *(double *)&v8[v12 + 4] = v10;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              Swift::Int v9 = sub_1D169C880(0, v9[2] + 1, 1, v9);
            }
            unint64_t v14 = v9[2];
            unint64_t v13 = v9[3];
            if (v14 >= v13 >> 1) {
              Swift::Int v9 = sub_1D169C880((void *)(v13 > 1), v14 + 1, 1, v9);
            }
            void v9[2] = v14 + 1;
            v9[v14 + 4] = v7;
          }
          if (v2 == ++v7) {
            goto LABEL_23;
          }
        }
        __break(1u);
LABEL_37:
        __break(1u);
        break;
      }
      long long v8 = (void *)MEMORY[0x1E4FBC860];
      Swift::Int v9 = (void *)MEMORY[0x1E4FBC860];
LABEL_23:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        double v21 = sub_1D169D280(0, v21[2] + 1, 1, v21);
      }
      unint64_t v16 = v21[2];
      unint64_t v15 = v21[3];
      if (v16 >= v15 >> 1) {
        double v21 = sub_1D169D280((void *)(v15 > 1), v16 + 1, 1, v21);
      }
      v21[2] = v16 + 1;
      v21[v16 + 4] = v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        double v22 = sub_1D169D150(0, v22[2] + 1, 1, v22);
      }
      unint64_t v18 = v22[2];
      unint64_t v17 = v22[3];
      if (v18 >= v17 >> 1) {
        double v22 = sub_1D169D150((void *)(v17 > 1), v18 + 1, 1, v22);
      }
      uint64_t v4 = (sparse_m_double *)((char *)v4 + 1);
      v22[2] = v18 + 1;
      v22[v18 + 4] = v9;
      v3 += v2;
      uint64_t v1 = v20;
      v6 += 8 * v2;
      if (v4 == v20) {
        goto LABEL_34;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  double v21 = (void *)MEMORY[0x1E4FBC860];
  double v22 = (void *)MEMORY[0x1E4FBC860];
LABEL_34:
  if ((v2 & 0x8000000000000000) == 0)
  {
    unsigned __int8 v23 = 0;
    return _s17KnowledgeGraphKit14MASparseMatrixC4rows7columns0F6Values0F7Indices4kindACs6UInt64V_AJSaySaySdGGSaySays5Int64VGGAA0dE4KindOtcfC_0(v1, v2, (uint64_t)v21, (uint64_t)v22, &v23);
  }
LABEL_42:
  KnowledgeGraphKit::MAMatrix result = (sparse_m_double *)sub_1D17BEA30();
  __break(1u);
  return result;
}

id sub_1D16F6FD4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id result = objc_msgSend(*(id *)(a4 + 16), sel_startIndex);
  id v9 = result;
  uint64_t v11 = v10;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3) {
    goto LABEL_10;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (result == objc_msgSend(*(id *)(a4 + 16), sel_endIndex))
    {
LABEL_5:
      uint64_t v12 = 0;
LABEL_11:
      *a1 = a4;
      a1[1] = v9;
      a1[2] = v11;
      return (id)v12;
    }
    uint64_t v12 = 0;
    while (1)
    {
      id v13 = v9;
      id v9 = objc_msgSend(*(id *)(a4 + 16), sel_indexAfterIndex_, v9, v11);
      uint64_t v11 = v14;
      *(void *)(a2 + 8 * v12) = v13;
      if (a3 - 1 == v12) {
        break;
      }
      ++v12;
      if (v9 == objc_msgSend(*(id *)(a4 + 16), sel_endIndex)) {
        goto LABEL_11;
      }
    }
LABEL_10:
    uint64_t v12 = a3;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

id sub_1D16F70D0(uint64_t a1, void *a2, uint64_t a3)
{
  MACluster.makeIterator()((uint64_t)&v22);
  swift_bridgeObjectRelease();
  id result = (id)swift_bridgeObjectRelease();
  if (!a2)
  {
    uint64_t v10 = 0;
    long long v18 = v23;
    *(_OWORD *)a1 = v22;
    *(_OWORD *)(a1 + 16) = v18;
    *(void *)(a1 + 32) = v24;
    return (id)v10;
  }
  long long v7 = v22;
  int64_t v8 = *((void *)&v23 + 1);
  unint64_t v9 = v24;
  uint64_t v19 = v23;
  if (!a3)
  {
LABEL_32:
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 16) = v19;
    *(void *)(a1 + 24) = v8;
    uint64_t v10 = a3;
LABEL_39:
    *(void *)(a1 + 32) = v9;
    return (id)v10;
  }
  if (a3 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = 0;
  int64_t v20 = (unint64_t)(v23 + 64) >> 6;
  while ((v7 & 0x8000000000000000) != 0)
  {
    if (!sub_1D17BE7A0()) {
      goto LABEL_38;
    }
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v13 = v21;
    id result = (id)swift_unknownObjectRelease();
    if (!v21) {
      goto LABEL_38;
    }
LABEL_7:
    ++v10;
    *a2++ = v13;
    if (v10 == a3) {
      goto LABEL_32;
    }
  }
  if (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v12 = v11 | (v8 << 6);
    goto LABEL_6;
  }
  int64_t v14 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v14 >= v20)
    {
      unint64_t v9 = 0;
LABEL_38:
      *(_OWORD *)a1 = v7;
      *(void *)(a1 + 16) = v19;
      *(void *)(a1 + 24) = v8;
      goto LABEL_39;
    }
    unint64_t v15 = *(void *)(*((void *)&v7 + 1) + 8 * v14);
    if (v15) {
      goto LABEL_22;
    }
    int64_t v16 = v8 + 2;
    if (v8 + 2 >= v20)
    {
      unint64_t v9 = 0;
      ++v8;
      goto LABEL_38;
    }
    unint64_t v15 = *(void *)(*((void *)&v7 + 1) + 8 * v16);
    if (!v15)
    {
      if (v8 + 3 >= v20) {
        goto LABEL_35;
      }
      unint64_t v15 = *(void *)(*((void *)&v7 + 1) + 8 * (v8 + 3));
      if (v15)
      {
        int64_t v14 = v8 + 3;
        goto LABEL_22;
      }
      int64_t v16 = v8 + 4;
      if (v8 + 4 >= v20)
      {
        unint64_t v9 = 0;
        v8 += 3;
        goto LABEL_38;
      }
      unint64_t v15 = *(void *)(*((void *)&v7 + 1) + 8 * v16);
      if (!v15)
      {
        int64_t v14 = v8 + 5;
        if (v8 + 5 >= v20)
        {
LABEL_35:
          unint64_t v9 = 0;
          int64_t v8 = v16;
          goto LABEL_38;
        }
        unint64_t v15 = *(void *)(*((void *)&v7 + 1) + 8 * v14);
        if (!v15)
        {
          int64_t v17 = v8 + 6;
          while (v20 != v17)
          {
            unint64_t v15 = *(void *)(*((void *)&v7 + 1) + 8 * v17++);
            if (v15)
            {
              int64_t v14 = v17 - 1;
              goto LABEL_22;
            }
          }
          unint64_t v9 = 0;
          int64_t v8 = v20 - 1;
          goto LABEL_38;
        }
        goto LABEL_22;
      }
    }
    int64_t v14 = v16;
LABEL_22:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v14 << 6);
    int64_t v8 = v14;
LABEL_6:
    id result = *(id *)(*(void *)(v7 + 48) + 8 * v12);
    id v13 = result;
    if (!result) {
      goto LABEL_38;
    }
    goto LABEL_7;
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void sub_1D16F73A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  if (!a2 || !a3)
  {
LABEL_15:
    *(void *)a1 = a4;
    *(double *)(a1 + 8) = a6;
    *(void *)(a1 + 16) = a5;
    *(double *)(a1 + 24) = a7;
    return;
  }
  if (a3 < 0) {
    goto LABEL_20;
  }
  uint64_t v14 = 0;
  while (a6 != 1.0)
  {
    sub_1D167C4C8(a1, 0.0, 1.0);
    double v17 = ceil(log(1.0 - v16) * a7);
    if ((~*(void *)&v17 & 0x7FF0000000000000) == 0) {
      goto LABEL_16;
    }
    if (v17 <= -9.22337204e18) {
      goto LABEL_17;
    }
    if (v17 >= 9.22337204e18) {
      goto LABEL_18;
    }
    BOOL v15 = __OFADD__(a4, (uint64_t)v17);
    a4 += (uint64_t)v17;
    if (v15) {
      goto LABEL_19;
    }
LABEL_13:
    if (a4 <= a5)
    {
      *(void *)(a2 + 8 * v14++) = a4;
      if (a3 != v14) {
        continue;
      }
    }
    goto LABEL_15;
  }
  BOOL v15 = __OFADD__(a4++, 1);
  if (!v15) {
    goto LABEL_13;
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
}

uint64_t sub_1D16F74E4(uint64_t *a1, void *a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(v3 + 40);
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v9 = (void *)swift_allocObject();
  void v9[2] = 0;
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v9;
  uint64_t v10[3] = v8;
  v10[4] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651E90);
  uint64_t result = swift_allocObject();
  uint64_t v12 = result;
  uint64_t v13 = 0;
  *(void *)(result + 16) = sub_1D1698240;
  *(void *)(result + 24) = v10;
  if (!a2 || !a3)
  {
LABEL_13:
    *a1 = v12;
    return v13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    sub_1D168A044(v9, v8, v3, &v16);
    uint64_t v14 = v16;
    if (v16)
    {
      uint64_t v13 = 0;
      uint64_t v15 = v17;
      while (1)
      {
        *a2 = v14;
        a2[1] = v15;
        if (a3 - 1 == v13) {
          break;
        }
        sub_1D168A044((void *)v10[2], v10[3], v10[4], &v16);
        uint64_t v14 = v16;
        uint64_t v15 = v17;
        a2 += 2;
        ++v13;
        if (!v16) {
          goto LABEL_13;
        }
      }
      uint64_t v13 = a3;
    }
    else
    {
      uint64_t v13 = 0;
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void *sub_1D16F7668(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D16F79D0(a1, a2, a3, a4, (unint64_t *)&qword_1EA652D30, (uint64_t)off_1E68DA178, (unint64_t *)&qword_1EA651A78);
}

uint64_t sub_1D16F7684(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    int64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

int64_t *sub_1D16F7884(int64_t *result, int64_t *a2, int64_t a3, int64_t a4, int64_t a5)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    unint64_t v5 = a4;
LABEL_7:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0) {
    goto LABEL_31;
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4) {
    goto LABEL_32;
  }
  if (a5 > a4)
  {
    unint64_t v5 = a4 + 1;
    *a2 = a4;
    unint64_t v6 = a3 - 1;
    if (a3 == 1) {
      goto LABEL_7;
    }
    unint64_t v7 = a3 - 2;
    if (a3 - 2 >= (unint64_t)(~a4 + a5)) {
      unint64_t v7 = ~a4 + a5;
    }
    if (v7 < v6) {
      unint64_t v6 = v7;
    }
    unint64_t v8 = v6 + 1;
    if (v8 > 4)
    {
      uint64_t v11 = v8 & 3;
      if ((v8 & 3) == 0) {
        uint64_t v11 = 4;
      }
      unint64_t v12 = v8 - v11;
      uint64_t v9 = v8 - v11 + 1;
      unint64_t v13 = v5 + v12;
      uint64_t v10 = &a2[v12];
      int64x2_t v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_1D17CC410);
      unint64_t v15 = (int64x2_t *)(a2 + 3);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *unint64_t v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      unint64_t v5 = v13;
    }
    else
    {
      uint64_t v9 = 1;
      uint64_t v10 = a2;
    }
    int64_t v17 = v10 + 1;
    int64_t v18 = v5;
    while (a3 != v9)
    {
      if (a5 == v18)
      {
        unint64_t v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v18 >= a5) {
        goto LABEL_30;
      }
      ++v9;
      unint64_t v5 = v18 + 1;
      *v17++ = v18++;
      if (a3 == v9) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1D16F79B4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1D16F79D0(a1, a2, a3, a4, (unint64_t *)&qword_1EA6514F0, (uint64_t)off_1E68DA0C0, &qword_1EA651C58);
}

void *sub_1D16F79D0(void *result, void *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v9 = a2;
  uint64_t v29 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D165C128(0, a5);
    sub_1D1680D38(a7, a5);
    uint64_t result = (void *)sub_1D17BE390();
    uint64_t v7 = v33;
    uint64_t v12 = v34;
    uint64_t v13 = v35;
    int64_t v14 = v36;
    unint64_t v15 = v37;
    if (v9) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v16 = 0;
    goto LABEL_38;
  }
  int64_t v14 = 0;
  uint64_t v24 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v12 = a4 + 56;
  uint64_t v13 = ~v24;
  uint64_t v25 = -v24;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  else {
    uint64_t v26 = -1;
  }
  unint64_t v15 = v26 & *(void *)(a4 + 56);
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v16 = 0;
LABEL_38:
    unint64_t v27 = v29;
LABEL_41:
    *unint64_t v27 = v7;
    v27[1] = v12;
    v27[2] = v13;
    v27[3] = v14;
    v27[4] = v15;
    return (void *)v16;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v16 = 0;
  int64_t v30 = (unint64_t)(v13 + 64) >> 6;
  uint64_t v28 = v13;
  while (1)
  {
    if (v7 < 0)
    {
      if (!sub_1D17BE7A0()) {
        goto LABEL_40;
      }
      sub_1D165C128(0, a5);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v19 = v32;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v32) {
        goto LABEL_40;
      }
      goto LABEL_8;
    }
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_7;
    }
    int64_t v20 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v20 >= v30)
    {
      unint64_t v15 = 0;
      goto LABEL_40;
    }
    unint64_t v21 = *(void *)(v12 + 8 * v20);
    if (v21) {
      goto LABEL_23;
    }
    int64_t v22 = v14 + 2;
    if (v14 + 2 >= v30)
    {
      unint64_t v15 = 0;
      ++v14;
      goto LABEL_40;
    }
    unint64_t v21 = *(void *)(v12 + 8 * v22);
    if (!v21)
    {
      if (v14 + 3 >= v30) {
        goto LABEL_44;
      }
      unint64_t v21 = *(void *)(v12 + 8 * (v14 + 3));
      if (v21)
      {
        int64_t v20 = v14 + 3;
        goto LABEL_23;
      }
      int64_t v22 = v14 + 4;
      if (v14 + 4 >= v30)
      {
        unint64_t v15 = 0;
        v14 += 3;
        goto LABEL_40;
      }
      unint64_t v21 = *(void *)(v12 + 8 * v22);
      if (!v21)
      {
        int64_t v20 = v14 + 5;
        if (v14 + 5 >= v30)
        {
LABEL_44:
          unint64_t v15 = 0;
          int64_t v14 = v22;
          goto LABEL_40;
        }
        unint64_t v21 = *(void *)(v12 + 8 * v20);
        if (!v21)
        {
          int64_t v23 = v14 + 6;
          while (v30 != v23)
          {
            unint64_t v21 = *(void *)(v12 + 8 * v23++);
            if (v21)
            {
              int64_t v20 = v23 - 1;
              goto LABEL_23;
            }
          }
          unint64_t v15 = 0;
          int64_t v14 = v30 - 1;
          goto LABEL_40;
        }
        goto LABEL_23;
      }
    }
    int64_t v20 = v22;
LABEL_23:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v20 << 6);
    int64_t v14 = v20;
LABEL_7:
    uint64_t result = *(id *)(*(void *)(v7 + 48) + 8 * v18);
    id v19 = result;
    if (!result) {
      goto LABEL_40;
    }
LABEL_8:
    ++v16;
    *v9++ = v19;
    if (v16 == a3)
    {
      uint64_t v16 = a3;
LABEL_40:
      uint64_t v13 = v28;
      unint64_t v27 = v29;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1D16F7CCC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    *unint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v25 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    uint64_t v20 = 8 * v16;
    unint64_t v21 = *(void **)(*(void *)(a4 + 48) + v20);
    ++v13;
    uint64_t v22 = *(void *)(*(void *)(a4 + 56) + v20);
    *uint64_t v11 = v21;
    v11[1] = v22;
    if (v13 == v10)
    {
      id v24 = v21;
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    id v23 = v21;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v25;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void *sub_1D16F7EE4(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    uint64_t v13 = *(void *)(*(void *)(a4 + 56) + 8 * v12);
    *a2 = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    a2[1] = v13;
    a2 += 2;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v14 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v10) {
    goto LABEL_30;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v14);
  if (v15) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v14 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v14;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v8);
  if (v15)
  {
LABEL_15:
    int64_t v14 = v8;
LABEL_19:
    unint64_t v17 = __clz(__rbit64(v15));
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v12 = v17 + (v14 << 6);
    int64_t v8 = v14;
    goto LABEL_8;
  }
  int64_t v16 = v14 + 2;
  if (v14 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
LABEL_18:
    int64_t v14 = v16;
    goto LABEL_19;
  }
  int64_t v8 = v14 + 3;
  if (v14 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v14 + 2;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v8);
  if (v15) {
    goto LABEL_15;
  }
  int64_t v16 = v14 + 4;
  if (v14 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v14 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v14 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1D16F8088(void *a1)
{
  int64_t v2 = a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_1D17BEB60();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v80 = 0;
      uint64_t v81 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        double v83 = *(double *)(v81 + 8 * i);
        uint64_t v84 = v80;
        do
        {
          uint64_t v85 = v81 + 8 * v84;
          if (v83 >= *(double *)v85) {
            break;
          }
          if (!v81) {
            goto LABEL_140;
          }
          *(void *)(v85 + 8) = *(void *)v85;
          *(double *)(v81 + 8 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  uint64_t v97 = result;
  uint64_t v98 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    __dst = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_102:
      uint64_t v96 = v8;
      if (v12 >= 2)
      {
        uint64_t v86 = *v2;
        do
        {
          unint64_t v87 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_131;
          }
          if (!v86) {
            goto LABEL_144;
          }
          uint64_t v88 = v11;
          char v89 = v11 + 32;
          uint64_t v90 = *(void *)&v11[16 * v87 + 32];
          uint64_t v91 = *(void *)&v11[16 * v12 + 24];
          sub_1D16F9570((double *)(v86 + 8 * v90), (double *)(v86 + 8 * *(void *)&v89[16 * v12 - 16]), v86 + 8 * v91, __dst);
          if (v1) {
            break;
          }
          if (v91 < v90) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v88 = sub_1D16FA24C((uint64_t)v88);
          }
          if (v87 >= *((void *)v88 + 2)) {
            goto LABEL_133;
          }
          unint64_t v92 = &v88[16 * v87 + 32];
          *(void *)unint64_t v92 = v90;
          *((void *)v92 + 1) = v91;
          unint64_t v93 = *((void *)v88 + 2);
          if (v12 > v93) {
            goto LABEL_134;
          }
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          unint64_t v11 = v88;
          *((void *)v88 + 2) = v93 - 1;
          unint64_t v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(void *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v96 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_1D17BE1C0();
    *(void *)(v7 + 16) = v6;
    uint64_t v3 = v98;
    uint64_t v96 = v7;
    __dst = (double *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *v2;
  uint64_t v94 = v2;
  uint64_t v95 = *v2 - 8;
  unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v99 = *v2;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 < v3)
    {
      double v14 = *(double *)(v10 + 8 * v9);
      double v15 = *(double *)(v10 + 8 * v13);
      uint64_t v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        double v16 = v14;
        while (1)
        {
          double v17 = v16;
          double v16 = *(double *)(v10 + 8 * v9);
          if (v14 < v15 == v16 >= v17) {
            break;
          }
          if (v3 == ++v9)
          {
            uint64_t v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_137;
        }
        if (v13 < v9)
        {
          unint64_t v18 = (uint64_t *)(v95 + 8 * v9);
          uint64_t v19 = v9;
          uint64_t v20 = v13;
          unint64_t v21 = (uint64_t *)(v10 + 8 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10) {
                goto LABEL_143;
              }
              uint64_t v22 = *v21;
              *unint64_t v21 = *v18;
              *unint64_t v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_135;
    }
    if (v9 - v13 >= v97) {
      goto LABEL_46;
    }
    uint64_t v23 = v13 + v97;
    if (__OFADD__(v13, v97)) {
      goto LABEL_138;
    }
    if (v23 >= v3) {
      uint64_t v23 = v3;
    }
    if (v23 < v13) {
      break;
    }
    if (v9 != v23)
    {
      id v24 = (double *)(v95 + 8 * v9);
      do
      {
        double v25 = *(double *)(v10 + 8 * v9);
        uint64_t v26 = v13;
        unint64_t v27 = v24;
        do
        {
          double v28 = *v27;
          if (v25 >= *v27) {
            break;
          }
          if (!v10) {
            goto LABEL_141;
          }
          *unint64_t v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      uint64_t v9 = v23;
    }
LABEL_46:
    if (v9 < v13) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = sub_1D16F9FD8(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v30 = *((void *)v11 + 2);
    unint64_t v29 = *((void *)v11 + 3);
    unint64_t v12 = v30 + 1;
    uint64_t v10 = v99;
    if (v30 >= v29 >> 1)
    {
      uint64_t v79 = sub_1D16F9FD8((char *)(v29 > 1), v30 + 1, 1, v11);
      uint64_t v10 = v99;
      unint64_t v11 = v79;
    }
    *((void *)v11 + 2) = v12;
    double v31 = v11 + 32;
    double v32 = &v11[16 * v30 + 32];
    *(void *)double v32 = v13;
    *((void *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        unint64_t v33 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v38 = &v31[16 * v12];
          uint64_t v39 = *((void *)v38 - 8);
          uint64_t v40 = *((void *)v38 - 7);
          BOOL v44 = __OFSUB__(v40, v39);
          uint64_t v41 = v40 - v39;
          if (v44) {
            goto LABEL_119;
          }
          uint64_t v43 = *((void *)v38 - 6);
          uint64_t v42 = *((void *)v38 - 5);
          BOOL v44 = __OFSUB__(v42, v43);
          uint64_t v36 = v42 - v43;
          char v37 = v44;
          if (v44) {
            goto LABEL_120;
          }
          unint64_t v45 = v12 - 2;
          char v46 = &v31[16 * v12 - 32];
          uint64_t v48 = *(void *)v46;
          uint64_t v47 = *((void *)v46 + 1);
          BOOL v44 = __OFSUB__(v47, v48);
          uint64_t v49 = v47 - v48;
          if (v44) {
            goto LABEL_122;
          }
          BOOL v44 = __OFADD__(v36, v49);
          uint64_t v50 = v36 + v49;
          if (v44) {
            goto LABEL_125;
          }
          if (v50 >= v41)
          {
            uint64_t v68 = &v31[16 * v33];
            uint64_t v70 = *(void *)v68;
            uint64_t v69 = *((void *)v68 + 1);
            BOOL v44 = __OFSUB__(v69, v70);
            uint64_t v71 = v69 - v70;
            if (v44) {
              goto LABEL_129;
            }
            BOOL v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v62 = *((void *)v11 + 4);
            uint64_t v63 = *((void *)v11 + 5);
            BOOL v44 = __OFSUB__(v63, v62);
            uint64_t v55 = v63 - v62;
            char v56 = v44;
            goto LABEL_77;
          }
          uint64_t v35 = *((void *)v11 + 4);
          uint64_t v34 = *((void *)v11 + 5);
          BOOL v44 = __OFSUB__(v34, v35);
          uint64_t v36 = v34 - v35;
          char v37 = v44;
        }
        if (v37) {
          goto LABEL_121;
        }
        unint64_t v45 = v12 - 2;
        uint64_t v51 = &v31[16 * v12 - 32];
        uint64_t v53 = *(void *)v51;
        uint64_t v52 = *((void *)v51 + 1);
        BOOL v54 = __OFSUB__(v52, v53);
        uint64_t v55 = v52 - v53;
        char v56 = v54;
        if (v54) {
          goto LABEL_124;
        }
        uint64_t v57 = &v31[16 * v33];
        uint64_t v59 = *(void *)v57;
        uint64_t v58 = *((void *)v57 + 1);
        BOOL v44 = __OFSUB__(v58, v59);
        uint64_t v60 = v58 - v59;
        if (v44) {
          goto LABEL_127;
        }
        if (__OFADD__(v55, v60)) {
          goto LABEL_128;
        }
        if (v55 + v60 >= v36)
        {
          BOOL v61 = v36 < v60;
LABEL_83:
          if (v61) {
            unint64_t v33 = v45;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v56) {
          goto LABEL_123;
        }
        uint64_t v64 = &v31[16 * v33];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        BOOL v44 = __OFSUB__(v65, v66);
        uint64_t v67 = v65 - v66;
        if (v44) {
          goto LABEL_126;
        }
        if (v67 < v55) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10) {
          goto LABEL_142;
        }
        uint64_t v73 = &v31[16 * v72];
        uint64_t v74 = *(void *)v73;
        double v75 = v31;
        double v76 = &v31[16 * v33];
        uint64_t v77 = *((void *)v76 + 1);
        sub_1D16F9570((double *)(v10 + 8 * *(void *)v73), (double *)(v10 + 8 * *(void *)v76), v10 + 8 * v77, __dst);
        if (v1) {
          goto LABEL_113;
        }
        if (v77 < v74) {
          goto LABEL_116;
        }
        if (v33 > *((void *)v11 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v73 = v74;
        *(void *)&v75[16 * v72 + 8] = v77;
        unint64_t v78 = *((void *)v11 + 2);
        if (v33 >= v78) {
          goto LABEL_118;
        }
        unint64_t v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        double v31 = v75;
        *((void *)v11 + 2) = v78 - 1;
        uint64_t v10 = v99;
        if (v78 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    uint64_t v3 = v98;
    if (v9 >= v98)
    {
      uint64_t v8 = v96;
      int64_t v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t sub_1D16F871C(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_1D17BEB60();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v84 = *a1;
      uint64_t v85 = *a1 + 8;
      uint64_t v86 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        double v88 = *(double *)(v84 + 16 * i + 8);
        uint64_t v89 = v86;
        uint64_t v90 = v85;
        do
        {
          if (v88 >= *(double *)v90) {
            break;
          }
          if (!v84) {
            goto LABEL_141;
          }
          uint64_t v91 = *(void *)(v90 + 8);
          *(_OWORD *)(v90 + 8) = *(_OWORD *)(v90 - 8);
          *(void *)(v90 - 8) = v91;
          *(double *)uint64_t v90 = v88;
          v90 -= 16;
        }
        while (!__CFADD__(v89++, 1));
        v85 += 16;
        --v86;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  uint64_t v6 = result;
  uint64_t v101 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    __dst = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
LABEL_103:
      unint64_t v93 = v12;
      uint64_t v103 = v9;
      if (v13 >= 2)
      {
        uint64_t v94 = *v101;
        do
        {
          unint64_t v95 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_132;
          }
          if (!v94) {
            goto LABEL_145;
          }
          uint64_t v96 = v93;
          uint64_t v97 = *(void *)&v93[16 * v95 + 32];
          uint64_t v98 = *(void *)&v93[16 * v13 + 24];
          sub_1D16F9A90((double *)(v94 + 16 * v97), (double *)(v94 + 16 * *(void *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1) {
            break;
          }
          if (v98 < v97) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v96 = sub_1D16FA24C((uint64_t)v96);
          }
          if (v95 >= *((void *)v96 + 2)) {
            goto LABEL_134;
          }
          uint64_t v99 = &v96[16 * v95 + 32];
          *(void *)uint64_t v99 = v97;
          *((void *)v99 + 1) = v98;
          unint64_t v100 = *((void *)v96 + 2);
          if (v13 > v100) {
            goto LABEL_135;
          }
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          unint64_t v93 = v96;
          *((void *)v96 + 2) = v100 - 1;
          unint64_t v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v103 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v103 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D08);
    uint64_t v8 = sub_1D17BE1C0();
    *(void *)(v8 + 16) = v7;
    uint64_t v103 = v8;
    __dst = (double *)(v8 + 32);
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v102 = *a1 + 40;
  unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v104 = v6;
  uint64_t v105 = v3;
  uint64_t v106 = v11;
  while (1)
  {
    uint64_t v14 = v10++;
    if (v10 < v3)
    {
      double v15 = *(double *)(v11 + 16 * v10 + 8);
      double v16 = *(double *)(v11 + 16 * v14 + 8);
      uint64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        double v17 = (double *)(v102 + 16 * v14);
        double v18 = v15;
        while (1)
        {
          double v19 = v18;
          double v18 = *v17;
          if (v15 < v16 == *v17 >= v19) {
            break;
          }
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            uint64_t v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_138;
        }
        if (v14 < v10)
        {
          uint64_t v20 = 16 * v10;
          uint64_t v21 = 16 * v14;
          uint64_t v22 = v10;
          uint64_t v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11) {
                goto LABEL_144;
              }
              uint64_t v24 = v11 + v20;
              uint64_t v25 = *(void *)(v11 + v21);
              uint64_t v26 = *(void *)(v11 + v21 + 8);
              *(_OWORD *)(v11 + v21) = *(_OWORD *)(v11 + v20 - 16);
              *(void *)(v24 - 16) = v25;
              *(void *)(v24 - 8) = v26;
            }
            ++v23;
            v20 -= 16;
            v21 += 16;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_136;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v27 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_139;
    }
    if (v27 >= v3) {
      uint64_t v27 = v3;
    }
    if (v27 < v14) {
      break;
    }
    if (v10 != v27)
    {
      double v28 = (double *)(v11 + 16 * v10);
      do
      {
        double v29 = *(double *)(v11 + 16 * v10 + 8);
        uint64_t v30 = v14;
        double v31 = v28;
        do
        {
          if (v29 >= *(v31 - 1)) {
            break;
          }
          if (!v11) {
            goto LABEL_142;
          }
          double v32 = *v31;
          *(_OWORD *)double v31 = *((_OWORD *)v31 - 1);
          *(v31 - 1) = v29;
          *(v31 - 2) = v32;
          v31 -= 2;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 2;
      }
      while (v10 != v27);
      uint64_t v10 = v27;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = sub_1D16F9FD8(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v34 = *((void *)v12 + 2);
    unint64_t v33 = *((void *)v12 + 3);
    unint64_t v13 = v34 + 1;
    uint64_t v11 = v106;
    if (v34 >= v33 >> 1)
    {
      double v83 = sub_1D16F9FD8((char *)(v33 > 1), v34 + 1, 1, v12);
      uint64_t v11 = v106;
      unint64_t v12 = v83;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v35 = v12 + 32;
    uint64_t v36 = &v12[16 * v34 + 32];
    *(void *)uint64_t v36 = v14;
    *((void *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        unint64_t v37 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v42 = &v35[16 * v13];
          uint64_t v43 = *((void *)v42 - 8);
          uint64_t v44 = *((void *)v42 - 7);
          BOOL v48 = __OFSUB__(v44, v43);
          uint64_t v45 = v44 - v43;
          if (v48) {
            goto LABEL_120;
          }
          uint64_t v47 = *((void *)v42 - 6);
          uint64_t v46 = *((void *)v42 - 5);
          BOOL v48 = __OFSUB__(v46, v47);
          uint64_t v40 = v46 - v47;
          char v41 = v48;
          if (v48) {
            goto LABEL_121;
          }
          unint64_t v49 = v13 - 2;
          uint64_t v50 = &v35[16 * v13 - 32];
          uint64_t v52 = *(void *)v50;
          uint64_t v51 = *((void *)v50 + 1);
          BOOL v48 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          if (v48) {
            goto LABEL_123;
          }
          BOOL v48 = __OFADD__(v40, v53);
          uint64_t v54 = v40 + v53;
          if (v48) {
            goto LABEL_126;
          }
          if (v54 >= v45)
          {
            unint64_t v72 = &v35[16 * v37];
            uint64_t v74 = *(void *)v72;
            uint64_t v73 = *((void *)v72 + 1);
            BOOL v48 = __OFSUB__(v73, v74);
            uint64_t v75 = v73 - v74;
            if (v48) {
              goto LABEL_130;
            }
            BOOL v65 = v40 < v75;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v66 = *((void *)v12 + 4);
            uint64_t v67 = *((void *)v12 + 5);
            BOOL v48 = __OFSUB__(v67, v66);
            uint64_t v59 = v67 - v66;
            char v60 = v48;
            goto LABEL_77;
          }
          uint64_t v39 = *((void *)v12 + 4);
          uint64_t v38 = *((void *)v12 + 5);
          BOOL v48 = __OFSUB__(v38, v39);
          uint64_t v40 = v38 - v39;
          char v41 = v48;
        }
        if (v41) {
          goto LABEL_122;
        }
        unint64_t v49 = v13 - 2;
        uint64_t v55 = &v35[16 * v13 - 32];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v58 = __OFSUB__(v56, v57);
        uint64_t v59 = v56 - v57;
        char v60 = v58;
        if (v58) {
          goto LABEL_125;
        }
        BOOL v61 = &v35[16 * v37];
        uint64_t v63 = *(void *)v61;
        uint64_t v62 = *((void *)v61 + 1);
        BOOL v48 = __OFSUB__(v62, v63);
        uint64_t v64 = v62 - v63;
        if (v48) {
          goto LABEL_128;
        }
        if (__OFADD__(v59, v64)) {
          goto LABEL_129;
        }
        if (v59 + v64 >= v40)
        {
          BOOL v65 = v40 < v64;
LABEL_83:
          if (v65) {
            unint64_t v37 = v49;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v60) {
          goto LABEL_124;
        }
        uint64_t v68 = &v35[16 * v37];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v48 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v48) {
          goto LABEL_127;
        }
        if (v71 < v59) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11) {
          goto LABEL_143;
        }
        uint64_t v77 = v12;
        unint64_t v78 = &v35[16 * v76];
        uint64_t v79 = *(void *)v78;
        uint64_t v80 = &v35[16 * v37];
        uint64_t v81 = *((void *)v80 + 1);
        sub_1D16F9A90((double *)(v11 + 16 * *(void *)v78), (double *)(v11 + 16 * *(void *)v80), v11 + 16 * v81, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v81 < v79) {
          goto LABEL_117;
        }
        if (v37 > *((void *)v77 + 2)) {
          goto LABEL_118;
        }
        *(void *)unint64_t v78 = v79;
        *(void *)&v35[16 * v76 + 8] = v81;
        unint64_t v82 = *((void *)v77 + 2);
        if (v37 >= v82) {
          goto LABEL_119;
        }
        unint64_t v12 = v77;
        unint64_t v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((void *)v77 + 2) = v82 - 1;
        uint64_t v11 = v106;
        if (v82 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    uint64_t v6 = v104;
    uint64_t v3 = v105;
    if (v10 >= v105)
    {
      uint64_t v9 = v103;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t sub_1D16F8E00(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_1D17BEB60();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_139;
    }
    if (v3) {
      return sub_1D16F94D8(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_147;
  }
  uint64_t v6 = result;
  uint64_t v101 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    __dst = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
LABEL_105:
      unint64_t v92 = v12;
      uint64_t v103 = v9;
      if (v13 >= 2)
      {
        uint64_t v93 = *v101;
        do
        {
          unint64_t v94 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_134;
          }
          if (!v93) {
            goto LABEL_146;
          }
          unint64_t v95 = v92;
          uint64_t v96 = *(void *)&v92[16 * v94 + 32];
          uint64_t v97 = *(void *)&v92[16 * v13 + 24];
          sub_1D16F9D1C((double *)(v93 + 16 * v96), (double *)(v93 + 16 * *(void *)&v92[16 * v13 + 16]), v93 + 16 * v97, __dst);
          if (v1) {
            break;
          }
          if (v97 < v96) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v95 = sub_1D16FA24C((uint64_t)v95);
          }
          if (v94 >= *((void *)v95 + 2)) {
            goto LABEL_136;
          }
          uint64_t v98 = &v95[16 * v94 + 32];
          *(void *)uint64_t v98 = v96;
          *((void *)v98 + 1) = v97;
          unint64_t v99 = *((void *)v95 + 2);
          if (v13 > v99) {
            goto LABEL_137;
          }
          memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v99 - v13));
          unint64_t v92 = v95;
          *((void *)v95 + 2) = v99 - 1;
          unint64_t v13 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_102:
      swift_bridgeObjectRelease();
      *(void *)(v103 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v103 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652CF8);
    uint64_t v8 = sub_1D17BE1C0();
    *(void *)(v8 + 16) = v7;
    uint64_t v103 = v8;
    __dst = (double *)(v8 + 32);
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v102 = *a1 + 40;
  uint64_t v100 = *a1 - 16;
  unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v104 = v6;
  uint64_t v105 = v3;
  uint64_t v106 = v11;
  while (1)
  {
    uint64_t v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = v11 + 16 * v10;
      double v16 = *(double *)v15;
      double v17 = *(double *)(v15 + 8);
      uint64_t v18 = v11 + 16 * v14;
      double v19 = *(double *)v18;
      uint64_t v20 = *(void *)(v18 + 8);
      if (*(void *)&v17 == v20) {
        int v21 = v16 < v19;
      }
      else {
        int v21 = v20 < *(void *)&v17;
      }
      uint64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v22 = (double *)(v102 + 16 * v14);
        while (1)
        {
          double v23 = v16;
          double v16 = *(v22 - 1);
          double v24 = *v22;
          int v25 = *(void *)v22 == *(void *)&v17 ? v16 < v23 : *(void *)&v17 < *(void *)v22;
          if (v21 != v25) {
            break;
          }
          v22 += 2;
          ++v10;
          double v17 = v24;
          if (v3 == v10)
          {
            uint64_t v10 = v3;
            break;
          }
        }
      }
      if (v21)
      {
        if (v10 < v14) {
          goto LABEL_140;
        }
        if (v14 < v10)
        {
          uint64_t v26 = 16 * v10;
          uint64_t v27 = 16 * v14;
          uint64_t v28 = v10;
          uint64_t v29 = v14;
          do
          {
            if (v29 != --v28)
            {
              if (!v11) {
                goto LABEL_145;
              }
              uint64_t v30 = v11 + v26;
              uint64_t v31 = *(void *)(v11 + v27);
              uint64_t v32 = *(void *)(v11 + v27 + 8);
              *(_OWORD *)(v11 + v27) = *(_OWORD *)(v11 + v26 - 16);
              *(void *)(v30 - 16) = v31;
              *(void *)(v30 - 8) = v32;
            }
            ++v29;
            v26 -= 16;
            v27 += 16;
          }
          while (v29 < v28);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_55;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_138;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_55;
    }
    uint64_t v33 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_141;
    }
    if (v33 >= v3) {
      uint64_t v33 = v3;
    }
    if (v33 < v14) {
      break;
    }
    if (v10 != v33)
    {
      uint64_t v34 = v100 + 16 * v10;
      do
      {
        uint64_t v35 = v11 + 16 * v10;
        double v36 = *(double *)v35;
        uint64_t v37 = *(void *)(v35 + 8);
        uint64_t v38 = v14;
        uint64_t v39 = v34;
        do
        {
          uint64_t v40 = *(void *)(v39 + 8);
          if (v37 == v40) {
            BOOL v41 = v36 < *(double *)v39;
          }
          else {
            BOOL v41 = v40 < v37;
          }
          if (!v41) {
            break;
          }
          if (!v11) {
            goto LABEL_143;
          }
          *(_OWORD *)(v39 + 16) = *(_OWORD *)v39;
          *(double *)uint64_t v39 = v36;
          *(void *)(v39 + 8) = v37;
          v39 -= 16;
          ++v38;
        }
        while (v10 != v38);
        ++v10;
        v34 += 16;
      }
      while (v10 != v33);
      uint64_t v10 = v33;
    }
LABEL_55:
    if (v10 < v14) {
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = sub_1D16F9FD8(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v43 = *((void *)v12 + 2);
    unint64_t v42 = *((void *)v12 + 3);
    unint64_t v13 = v43 + 1;
    uint64_t v11 = v106;
    if (v43 >= v42 >> 1)
    {
      uint64_t v91 = sub_1D16F9FD8((char *)(v42 > 1), v43 + 1, 1, v12);
      uint64_t v11 = v106;
      unint64_t v12 = v91;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v44 = v12 + 32;
    uint64_t v45 = &v12[16 * v43 + 32];
    *(void *)uint64_t v45 = v14;
    *((void *)v45 + 1) = v10;
    if (v43)
    {
      while (1)
      {
        unint64_t v46 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v51 = &v44[16 * v13];
          uint64_t v52 = *((void *)v51 - 8);
          uint64_t v53 = *((void *)v51 - 7);
          BOOL v57 = __OFSUB__(v53, v52);
          uint64_t v54 = v53 - v52;
          if (v57) {
            goto LABEL_122;
          }
          uint64_t v56 = *((void *)v51 - 6);
          uint64_t v55 = *((void *)v51 - 5);
          BOOL v57 = __OFSUB__(v55, v56);
          uint64_t v49 = v55 - v56;
          char v50 = v57;
          if (v57) {
            goto LABEL_123;
          }
          unint64_t v58 = v13 - 2;
          uint64_t v59 = &v44[16 * v13 - 32];
          uint64_t v61 = *(void *)v59;
          uint64_t v60 = *((void *)v59 + 1);
          BOOL v57 = __OFSUB__(v60, v61);
          uint64_t v62 = v60 - v61;
          if (v57) {
            goto LABEL_125;
          }
          BOOL v57 = __OFADD__(v49, v62);
          uint64_t v63 = v49 + v62;
          if (v57) {
            goto LABEL_128;
          }
          if (v63 >= v54)
          {
            uint64_t v81 = &v44[16 * v46];
            uint64_t v83 = *(void *)v81;
            uint64_t v82 = *((void *)v81 + 1);
            BOOL v57 = __OFSUB__(v82, v83);
            uint64_t v84 = v82 - v83;
            if (v57) {
              goto LABEL_132;
            }
            BOOL v74 = v49 < v84;
            goto LABEL_92;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v75 = *((void *)v12 + 4);
            uint64_t v76 = *((void *)v12 + 5);
            BOOL v57 = __OFSUB__(v76, v75);
            uint64_t v68 = v76 - v75;
            char v69 = v57;
            goto LABEL_86;
          }
          uint64_t v48 = *((void *)v12 + 4);
          uint64_t v47 = *((void *)v12 + 5);
          BOOL v57 = __OFSUB__(v47, v48);
          uint64_t v49 = v47 - v48;
          char v50 = v57;
        }
        if (v50) {
          goto LABEL_124;
        }
        unint64_t v58 = v13 - 2;
        uint64_t v64 = &v44[16 * v13 - 32];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        BOOL v67 = __OFSUB__(v65, v66);
        uint64_t v68 = v65 - v66;
        char v69 = v67;
        if (v67) {
          goto LABEL_127;
        }
        uint64_t v70 = &v44[16 * v46];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        BOOL v57 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v57) {
          goto LABEL_130;
        }
        if (__OFADD__(v68, v73)) {
          goto LABEL_131;
        }
        if (v68 + v73 >= v49)
        {
          BOOL v74 = v49 < v73;
LABEL_92:
          if (v74) {
            unint64_t v46 = v58;
          }
          goto LABEL_94;
        }
LABEL_86:
        if (v69) {
          goto LABEL_126;
        }
        uint64_t v77 = &v44[16 * v46];
        uint64_t v79 = *(void *)v77;
        uint64_t v78 = *((void *)v77 + 1);
        BOOL v57 = __OFSUB__(v78, v79);
        uint64_t v80 = v78 - v79;
        if (v57) {
          goto LABEL_129;
        }
        if (v80 < v68) {
          goto LABEL_15;
        }
LABEL_94:
        unint64_t v85 = v46 - 1;
        if (v46 - 1 >= v13)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v11) {
          goto LABEL_144;
        }
        uint64_t v86 = &v44[16 * v85];
        uint64_t v87 = *(void *)v86;
        double v88 = &v44[16 * v46];
        uint64_t v89 = *((void *)v88 + 1);
        sub_1D16F9D1C((double *)(v11 + 16 * *(void *)v86), (double *)(v11 + 16 * *(void *)v88), v11 + 16 * v89, __dst);
        if (v1) {
          goto LABEL_102;
        }
        if (v89 < v87) {
          goto LABEL_119;
        }
        if (v46 > *((void *)v12 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v44[16 * v85 + 8] = v89;
        unint64_t v90 = *((void *)v12 + 2);
        if (v46 >= v90) {
          goto LABEL_121;
        }
        unint64_t v13 = v90 - 1;
        memmove(&v44[16 * v46], v88 + 16, 16 * (v90 - 1 - v46));
        *((void *)v12 + 2) = v90 - 1;
        uint64_t v11 = v106;
        if (v90 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    uint64_t v6 = v104;
    uint64_t v3 = v105;
    if (v10 >= v105)
    {
      uint64_t v9 = v103;
      goto LABEL_105;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t sub_1D16F94D8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 16 * a3 - 16;
LABEL_5:
    uint64_t v6 = v4 + 16 * a3;
    double v7 = *(double *)v6;
    uint64_t v8 = *(void *)(v6 + 8);
    uint64_t v9 = result;
    uint64_t v10 = v5;
    while (1)
    {
      uint64_t v11 = *(void *)(v10 + 8);
      if (v8 == v11) {
        BOOL v12 = v7 < *(double *)v10;
      }
      else {
        BOOL v12 = v11 < v8;
      }
      if (!v12)
      {
LABEL_4:
        ++a3;
        v5 += 16;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v4) {
        break;
      }
      *(_OWORD *)(v10 + 16) = *(_OWORD *)v10;
      *(double *)uint64_t v10 = v7;
      *(void *)(v10 + 8) = v8;
      v10 -= 16;
      if (a3 == ++v9) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1D16F9570(double *__src, double *a2, unint64_t a3, double *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  double v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  double v24 = __src;
  double v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      double v16 = &v4[v13];
      uint64_t v22 = v16;
      double v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        double v17 = (double *)(a3 - 8);
        while (1)
        {
          uint64_t v18 = v17 + 1;
          double v19 = v6 - 1;
          double v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            uint64_t v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *double v17 = *(v16 - 1);
            }
            --v16;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *double v17 = v20;
            }
            double v24 = --v6;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          --v17;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4) {
            *double v7 = *v4;
          }
          double v23 = ++v4;
          uint64_t v15 = v6;
        }
        else
        {
          uint64_t v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *double v7 = *v6;
          }
        }
        ++v7;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      double v24 = v7;
    }
LABEL_42:
    sub_1D16FA0D4((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D16F97E0(double *__src, double *a2, unint64_t a3, double *__dst, uint64_t (*a5)(double *, double, double))
{
  uint64_t v6 = __dst;
  double v7 = a2;
  int64_t v8 = __src;
  int64_t v9 = (char *)a2 - (char *)__src;
  int64_t v10 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v10 = (char *)a2 - (char *)__src;
  }
  uint64_t v11 = v10 >> 3;
  uint64_t v12 = a3 - (void)a2;
  uint64_t v13 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v13 = a3 - (void)a2;
  }
  uint64_t v14 = v13 >> 3;
  uint64_t v27 = __src;
  uint64_t v26 = __dst;
  if (v11 >= v13 >> 3)
  {
    if (v12 >= -7)
    {
      if (__dst != a2 || &a2[v14] <= __dst) {
        __src = (double *)memmove(__dst, a2, 8 * v14);
      }
      double v17 = &v6[v14];
      int v25 = v17;
      uint64_t v27 = v7;
      if (v8 < v7 && v12 >= 8)
      {
        uint64_t v18 = (double *)(a3 - 8);
        double v19 = v7;
        while (1)
        {
          double v20 = *--v19;
          __src = (double *)a5(__src, *(v17 - 1), v20);
          if (v5) {
            break;
          }
          int v21 = v18 + 1;
          if (__src)
          {
            if (v21 != v7 || v18 >= v7) {
              *uint64_t v18 = *v19;
            }
            uint64_t v27 = v19;
            if (v19 <= v8) {
              goto LABEL_44;
            }
          }
          else
          {
            int v25 = v17 - 1;
            if (v21 < v17 || v18 >= v17 || v21 != v17) {
              *uint64_t v18 = *(v17 - 1);
            }
            double v19 = v7;
            --v17;
            if (v7 <= v8) {
              goto LABEL_44;
            }
          }
          --v18;
          double v7 = v19;
          if (v17 <= v6) {
            goto LABEL_44;
          }
        }
      }
      goto LABEL_44;
    }
  }
  else if (v9 >= -7)
  {
    if (__dst != __src || &__src[v11] <= __dst) {
      __src = (double *)memmove(__dst, __src, 8 * v11);
    }
    uint64_t v15 = &v6[v11];
    int v25 = v15;
    if ((unint64_t)v7 < a3 && v9 >= 8)
    {
      do
      {
        __src = (double *)a5(__src, *v7, *v6);
        if (v5) {
          break;
        }
        if (__src)
        {
          double v16 = v7 + 1;
          if (v8 < v7 || v8 >= v16 || v8 != v7) {
            *int64_t v8 = *v7;
          }
        }
        else
        {
          if (v8 != v6) {
            *int64_t v8 = *v6;
          }
          uint64_t v26 = ++v6;
          double v16 = v7;
        }
        uint64_t v27 = ++v8;
        if (v6 >= v15) {
          break;
        }
        double v7 = v16;
      }
      while ((unint64_t)v16 < a3);
    }
LABEL_44:
    sub_1D16FA0D4((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D16F9A90(double *__src, double *a2, unint64_t a3, double *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  double v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  int v25 = __src;
  double v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v18 = &v4[2 * v13];
      double v23 = (char *)v18;
      int v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        double v19 = (double *)(a3 - 16);
        do
        {
          double v20 = v19 + 2;
          if (*(v18 - 1) >= *(v6 - 1))
          {
            double v23 = (char *)(v18 - 2);
            if (v20 < v18 || v19 >= v18 || v20 != v18) {
              *(_OWORD *)double v19 = *((_OWORD *)v18 - 1);
            }
            int v21 = v6;
            v18 -= 2;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            int v21 = v6 - 2;
            if (v20 != v6 || v19 >= v6) {
              *(_OWORD *)double v19 = *(_OWORD *)v21;
            }
            int v25 = v6 - 2;
            if (v21 <= v7) {
              break;
            }
          }
          v19 -= 2;
          uint64_t v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      sub_1D16FA190((void **)&v25, (const void **)&v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[2 * v10];
    double v23 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      uint64_t v15 = v4;
      while (1)
      {
        if (v6[1] >= v15[1])
        {
          uint64_t v4 = v15 + 2;
          double v17 = v15;
          double v16 = v6;
          if (v7 == v15)
          {
            v15 += 2;
            if (v7 < v4) {
              goto LABEL_22;
            }
          }
          else
          {
            v15 += 2;
          }
        }
        else
        {
          double v16 = v6 + 2;
          double v17 = v6;
          if (v7 == v6 && v7 < v16) {
            goto LABEL_22;
          }
        }
        *(_OWORD *)double v7 = *(_OWORD *)v17;
LABEL_22:
        v7 += 2;
        if (v15 < v14)
        {
          uint64_t v6 = v16;
          if ((unint64_t)v16 < a3) {
            continue;
          }
        }
        double v24 = v4;
        int v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D16F9D1C(double *__src, double *a2, unint64_t a3, double *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  double v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  uint64_t v31 = __src;
  uint64_t v30 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      double v19 = &v4[2 * v13];
      uint64_t v29 = (char *)v19;
      uint64_t v31 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        double v20 = (double *)(a3 - 16);
        int v21 = v6;
        while (1)
        {
          uint64_t v22 = v20 + 2;
          uint64_t v23 = *((void *)v19 - 1);
          double v24 = *(v21 - 2);
          v21 -= 2;
          uint64_t v25 = *((void *)v21 + 1);
          BOOL v26 = *(v19 - 2) < v24;
          if (v23 == v25) {
            BOOL v27 = v26;
          }
          else {
            BOOL v27 = v25 < v23;
          }
          if (v27)
          {
            if (v22 != v6 || v20 >= v6) {
              *(_OWORD *)double v20 = *(_OWORD *)v21;
            }
            uint64_t v31 = v21;
            if (v21 <= v7) {
              goto LABEL_48;
            }
          }
          else
          {
            uint64_t v29 = (char *)(v19 - 2);
            if (v22 < v19 || v20 >= v19 || v22 != v19) {
              *(_OWORD *)double v20 = *((_OWORD *)v19 - 1);
            }
            int v21 = v6;
            v19 -= 2;
            if (v6 <= v7) {
              goto LABEL_48;
            }
          }
          v20 -= 2;
          uint64_t v6 = v21;
          if (v19 <= v4) {
            goto LABEL_48;
          }
        }
      }
      goto LABEL_48;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[2 * v10];
    uint64_t v29 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        uint64_t v15 = *((void *)v6 + 1);
        uint64_t v16 = *((void *)v4 + 1);
        if (v15 == v16) {
          BOOL v17 = *v6 < *v4;
        }
        else {
          BOOL v17 = v16 < v15;
        }
        if (v17)
        {
          uint64_t v18 = v6 + 2;
          if (v7 < v6 || v7 >= v18 || v7 != v6) {
            *(_OWORD *)double v7 = *(_OWORD *)v6;
          }
        }
        else
        {
          if (v7 != v4) {
            *(_OWORD *)double v7 = *(_OWORD *)v4;
          }
          v4 += 2;
          uint64_t v30 = v4;
          uint64_t v18 = v6;
        }
        v7 += 2;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v18;
      }
      while ((unint64_t)v18 < a3);
      uint64_t v31 = v7;
    }
LABEL_48:
    sub_1D16FA190((void **)&v31, (const void **)&v30, &v29);
    return 1;
  }
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

char *sub_1D16F9FD8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D00);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1D16FA0D4(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)sub_1D17BEB20();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_1D16FA190(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)sub_1D17BEB20();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_1D16FA24C(uint64_t a1)
{
  return sub_1D16F9FD8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1D16FA260(uint64_t a1)
{
  return sub_1D1682F30(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1D16FA274(uint64_t a1)
{
  return sub_1D1682C70(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1D16FA288(void *a1)
{
  return sub_1D1683530(0, a1[2], 0, a1);
}

void sub_1D16FA29C()
{
}

uint64_t sub_1D16FA2B0(void *a1)
{
  return sub_1D1683B94(0, a1[2], 0, a1);
}

uint64_t sub_1D16FA2C4(uint64_t a1)
{
  return sub_1D1682DD0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1D16FA2D8(uint64_t a1)
{
  return sub_1D1683D20(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1D16FA2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
    sub_1D168271C(0, v5, 0);
    uint64_t result = v15;
    uint64_t v8 = (unint64_t *)(a1 + 32);
    unint64_t v9 = *(void *)(a4 + 16);
    while (1)
    {
      unint64_t v11 = *v8++;
      unint64_t v10 = v11;
      if (v11 >= v9) {
        break;
      }
      uint64_t v12 = *(void *)(a4 + 32 + 8 * v10);
      uint64_t v16 = result;
      unint64_t v14 = *(void *)(result + 16);
      unint64_t v13 = *(void *)(result + 24);
      if (v14 >= v13 >> 1)
      {
        sub_1D168271C(v13 > 1, v14 + 1, 1);
        uint64_t result = v16;
      }
      *(void *)(result + 16) = v14 + 1;
      *(void *)(result + 8 * v14 + 32) = v12;
      if (!--v5) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1D16FA3D0(uint64_t result, uint64_t (*a2)(unint64_t, double))
{
  uint64_t v4 = result;
  unint64_t v5 = 0;
  uint64_t v6 = *(void *)(result + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  while (1)
  {
    if (v6 == v5) {
      goto LABEL_12;
    }
    if (v5 >= *(void *)(v4 + 16)) {
      break;
    }
    double v8 = *(double *)(v4 + 8 * v5 + 32);
    uint64_t result = a2(v5, v8);
    if (v2)
    {
      swift_release();
LABEL_12:
      swift_bridgeObjectRelease();
      return v7;
    }
    ++v5;
    if (result)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = sub_1D16826FC(0, *(void *)(v7 + 16) + 1, 1);
      }
      unint64_t v10 = *(void *)(v7 + 16);
      unint64_t v9 = *(void *)(v7 + 24);
      unint64_t v11 = v10 + 1;
      if (v10 >= v9 >> 1)
      {
        uint64_t result = sub_1D16826FC(v9 > 1, v10 + 1, 1);
        unint64_t v11 = v10 + 1;
      }
      *(void *)(v7 + 16) = v11;
      uint64_t v12 = v7 + 16 * v10;
      *(void *)(v12 + 32) = v5 - 1;
      *(double *)(v12 + 40) = v8;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1D16FA518(uint64_t *a1, uint64_t (*a2)(__n128, double))
{
  uint64_t v4 = a1[1];
  uint64_t result = sub_1D17BEB60();
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_145;
    }
    if ((unint64_t)v4 >= 2)
    {
      uint64_t v80 = v4;
      uint64_t v81 = *a1;
      uint64_t v82 = -1;
      uint64_t v83 = 1;
      uint64_t v84 = v81;
LABEL_99:
      v6.n128_u64[0] = *(void *)(v81 + 8 * v83);
      uint64_t v85 = v82;
      uint64_t v86 = v84;
      while (1)
      {
        uint64_t result = a2(v6, *(double *)v86);
        if (v2) {
          break;
        }
        if (result)
        {
          if (!v81) {
            goto LABEL_150;
          }
          v6.n128_u64[0] = *(void *)(v86 + 8);
          *(void *)(v86 + 8) = *(void *)v86;
          *(void *)uint64_t v86 = v6.n128_u64[0];
          v86 -= 8;
          if (!__CFADD__(v85++, 1)) {
            continue;
          }
        }
        ++v83;
        v84 += 8;
        --v82;
        if (v83 != v80) {
          goto LABEL_99;
        }
        return result;
      }
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_155;
  }
  uint64_t v100 = result;
  uint64_t v97 = a1;
  if (v4 < 2)
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
    __dst = (double *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v101 = MEMORY[0x1E4FBC860];
    if (v4 != 1)
    {
      unint64_t v25 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_109:
      uint64_t v105 = v2;
      double v88 = v10;
      if (v25 >= 2)
      {
        uint64_t v89 = *v97;
        do
        {
          unint64_t v90 = v25 - 2;
          if (v25 < 2) {
            goto LABEL_140;
          }
          if (!v89) {
            goto LABEL_154;
          }
          uint64_t v91 = v88;
          uint64_t v92 = *(void *)&v88[16 * v90 + 32];
          uint64_t v93 = *(void *)&v88[16 * v25 + 24];
          sub_1D16F97E0((double *)(v89 + 8 * v92), (double *)(v89 + 8 * *(void *)&v88[16 * v25 + 16]), v89 + 8 * v93, __dst, (uint64_t (*)(double *, double, double))a2);
          if (v105) {
            goto LABEL_123;
          }
          if (v93 < v92) {
            goto LABEL_141;
          }
          uint64_t v105 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v91 = sub_1D16FA24C((uint64_t)v91);
          }
          if (v90 >= *((void *)v91 + 2)) {
            goto LABEL_142;
          }
          unint64_t v94 = &v91[16 * v90 + 32];
          *(void *)unint64_t v94 = v92;
          *((void *)v94 + 1) = v93;
          unint64_t v95 = *((void *)v91 + 2);
          if (v25 > v95) {
            goto LABEL_143;
          }
          memmove(&v91[16 * v25 + 16], &v91[16 * v25 + 32], 16 * (v95 - v25));
          double v88 = v91;
          *((void *)v91 + 2) = v95 - 1;
          unint64_t v25 = v95 - 1;
        }
        while (v95 > 2);
      }
      swift_bridgeObjectRelease();
      *(void *)(v101 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v8 = v7 >> 1;
    uint64_t v9 = sub_1D17BE1C0();
    *(void *)(v9 + 16) = v8;
    uint64_t v101 = v9;
    __dst = (double *)(v9 + 32);
  }
  uint64_t v11 = 0;
  uint64_t v12 = *a1;
  uint64_t v98 = *a1 + 16;
  uint64_t v96 = *a1 - 8;
  unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v104 = *a1;
  uint64_t v99 = v4;
  while (1)
  {
    uint64_t v13 = v11 + 1;
    if (v11 + 1 < v4)
    {
      int v14 = ((uint64_t (*)(double, double))a2)(*(double *)(v12 + 8 * v13), *(double *)(v12 + 8 * v11));
      if (v2)
      {
LABEL_123:
        swift_bridgeObjectRelease();
        *(void *)(v101 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      int v15 = v14;
      uint64_t v13 = v11 + 2;
      if (v11 + 2 < v4)
      {
        uint64_t v16 = (double *)(v98 + 8 * v11);
        while (((v15 ^ ((unsigned int (*)(double, double))a2)(*v16, *(v16 - 1))) & 1) == 0)
        {
          ++v13;
          ++v16;
          if (v4 == v13)
          {
            uint64_t v13 = v4;
            break;
          }
        }
      }
      uint64_t v12 = v104;
      if (v15)
      {
        if (v13 < v11) {
          goto LABEL_149;
        }
        if (v11 < v13)
        {
          BOOL v17 = (uint64_t *)(v96 + 8 * v13);
          uint64_t v18 = v13;
          uint64_t v19 = v11;
          double v20 = (uint64_t *)(v104 + 8 * v11);
          do
          {
            if (v19 != --v18)
            {
              if (!v104) {
                goto LABEL_153;
              }
              uint64_t v21 = *v20;
              uint64_t *v20 = *v17;
              *BOOL v17 = v21;
            }
            ++v19;
            --v17;
            ++v20;
          }
          while (v19 < v18);
        }
      }
    }
    if (v13 >= v4) {
      goto LABEL_37;
    }
    if (__OFSUB__(v13, v11)) {
      goto LABEL_146;
    }
    if (v13 - v11 >= v100) {
      goto LABEL_37;
    }
    if (__OFADD__(v11, v100)) {
      goto LABEL_147;
    }
    uint64_t v22 = v11 + v100 >= v4 ? v4 : v11 + v100;
    if (v22 < v11) {
      break;
    }
    if (v13 != v22)
    {
      BOOL v74 = v10;
      uint64_t v75 = v96 + 8 * v13;
      do
      {
        v6.n128_u64[0] = *(void *)(v12 + 8 * v13);
        uint64_t v76 = v11;
        uint64_t v77 = v75;
        while (1)
        {
          char v78 = a2(v6, *(double *)v77);
          if (v2) {
            goto LABEL_123;
          }
          if ((v78 & 1) == 0) {
            break;
          }
          uint64_t v12 = v104;
          if (!v104) {
            goto LABEL_152;
          }
          v6.n128_u64[0] = *(void *)(v77 + 8);
          *(void *)(v77 + 8) = *(void *)v77;
          *(void *)uint64_t v77 = v6.n128_u64[0];
          v77 -= 8;
          if (v13 == ++v76) {
            goto LABEL_95;
          }
        }
        uint64_t v12 = v104;
LABEL_95:
        ++v13;
        v75 += 8;
      }
      while (v13 != v22);
      uint64_t v13 = v22;
      unint64_t v10 = v74;
      if (v22 < v11) {
        goto LABEL_144;
      }
      goto LABEL_38;
    }
LABEL_37:
    if (v13 < v11) {
      goto LABEL_144;
    }
LABEL_38:
    uint64_t v102 = v13;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v10 = sub_1D16F9FD8(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v24 = *((void *)v10 + 2);
    unint64_t v23 = *((void *)v10 + 3);
    unint64_t v25 = v24 + 1;
    uint64_t v12 = v104;
    if (v24 >= v23 >> 1)
    {
      uint64_t v79 = sub_1D16F9FD8((char *)(v23 > 1), v24 + 1, 1, v10);
      uint64_t v12 = v104;
      unint64_t v10 = v79;
    }
    *((void *)v10 + 2) = v25;
    BOOL v26 = v10 + 32;
    BOOL v27 = &v10[16 * v24 + 32];
    *(void *)BOOL v27 = v11;
    uint64_t v11 = v13;
    *((void *)v27 + 1) = v13;
    if (v24)
    {
      while (1)
      {
        unint64_t v28 = v25 - 1;
        if (v25 >= 4)
        {
          uint64_t v33 = &v26[16 * v25];
          uint64_t v34 = *((void *)v33 - 8);
          uint64_t v35 = *((void *)v33 - 7);
          BOOL v39 = __OFSUB__(v35, v34);
          uint64_t v36 = v35 - v34;
          if (v39) {
            goto LABEL_129;
          }
          uint64_t v38 = *((void *)v33 - 6);
          uint64_t v37 = *((void *)v33 - 5);
          BOOL v39 = __OFSUB__(v37, v38);
          uint64_t v31 = v37 - v38;
          char v32 = v39;
          if (v39) {
            goto LABEL_130;
          }
          unint64_t v40 = v25 - 2;
          BOOL v41 = &v26[16 * v25 - 32];
          uint64_t v43 = *(void *)v41;
          uint64_t v42 = *((void *)v41 + 1);
          BOOL v39 = __OFSUB__(v42, v43);
          uint64_t v44 = v42 - v43;
          if (v39) {
            goto LABEL_132;
          }
          BOOL v39 = __OFADD__(v31, v44);
          uint64_t v45 = v31 + v44;
          if (v39) {
            goto LABEL_135;
          }
          if (v45 >= v36)
          {
            uint64_t v63 = &v26[16 * v28];
            uint64_t v65 = *(void *)v63;
            uint64_t v64 = *((void *)v63 + 1);
            BOOL v39 = __OFSUB__(v64, v65);
            uint64_t v66 = v64 - v65;
            if (v39) {
              goto LABEL_139;
            }
            BOOL v56 = v31 < v66;
            goto LABEL_74;
          }
        }
        else
        {
          if (v25 != 3)
          {
            uint64_t v57 = *((void *)v10 + 4);
            uint64_t v58 = *((void *)v10 + 5);
            BOOL v39 = __OFSUB__(v58, v57);
            uint64_t v50 = v58 - v57;
            char v51 = v39;
            goto LABEL_68;
          }
          uint64_t v30 = *((void *)v10 + 4);
          uint64_t v29 = *((void *)v10 + 5);
          BOOL v39 = __OFSUB__(v29, v30);
          uint64_t v31 = v29 - v30;
          char v32 = v39;
        }
        if (v32) {
          goto LABEL_131;
        }
        unint64_t v40 = v25 - 2;
        unint64_t v46 = &v26[16 * v25 - 32];
        uint64_t v48 = *(void *)v46;
        uint64_t v47 = *((void *)v46 + 1);
        BOOL v49 = __OFSUB__(v47, v48);
        uint64_t v50 = v47 - v48;
        char v51 = v49;
        if (v49) {
          goto LABEL_134;
        }
        uint64_t v52 = &v26[16 * v28];
        uint64_t v54 = *(void *)v52;
        uint64_t v53 = *((void *)v52 + 1);
        BOOL v39 = __OFSUB__(v53, v54);
        uint64_t v55 = v53 - v54;
        if (v39) {
          goto LABEL_137;
        }
        if (__OFADD__(v50, v55)) {
          goto LABEL_138;
        }
        if (v50 + v55 >= v31)
        {
          BOOL v56 = v31 < v55;
LABEL_74:
          if (v56) {
            unint64_t v28 = v40;
          }
          goto LABEL_76;
        }
LABEL_68:
        if (v51) {
          goto LABEL_133;
        }
        uint64_t v59 = &v26[16 * v28];
        uint64_t v61 = *(void *)v59;
        uint64_t v60 = *((void *)v59 + 1);
        BOOL v39 = __OFSUB__(v60, v61);
        uint64_t v62 = v60 - v61;
        if (v39) {
          goto LABEL_136;
        }
        if (v62 < v50) {
          goto LABEL_85;
        }
LABEL_76:
        BOOL v67 = v10;
        unint64_t v68 = v28 - 1;
        if (v28 - 1 >= v25)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
          goto LABEL_148;
        }
        if (!v12) {
          goto LABEL_151;
        }
        char v69 = &v26[16 * v68];
        uint64_t v70 = *(void *)v69;
        uint64_t v71 = &v26[16 * v28];
        uint64_t v72 = *((void *)v71 + 1);
        sub_1D16F97E0((double *)(v12 + 8 * *(void *)v69), (double *)(v12 + 8 * *(void *)v71), v12 + 8 * v72, __dst, (uint64_t (*)(double *, double, double))a2);
        if (v2) {
          goto LABEL_123;
        }
        if (v72 < v70) {
          goto LABEL_126;
        }
        if (v28 > *((void *)v67 + 2)) {
          goto LABEL_127;
        }
        *(void *)char v69 = v70;
        *(void *)&v26[16 * v68 + 8] = v72;
        unint64_t v73 = *((void *)v67 + 2);
        if (v28 >= v73) {
          goto LABEL_128;
        }
        unint64_t v10 = v67;
        unint64_t v25 = v73 - 1;
        memmove(&v26[16 * v28], v71 + 16, 16 * (v73 - 1 - v28));
        *((void *)v67 + 2) = v73 - 1;
        uint64_t v12 = v104;
        uint64_t v11 = v102;
        if (v73 <= 2) {
          goto LABEL_85;
        }
      }
    }
    unint64_t v25 = 1;
LABEL_85:
    uint64_t v4 = v99;
    if (v11 >= v99) {
      goto LABEL_109;
    }
  }
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t sub_1D16FAC68(uint64_t *a1, uint64_t (*a2)(__n128, double))
{
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = sub_1D16FA260(v4);
  }
  uint64_t v5 = *(void *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  uint64_t result = sub_1D16FA518(v7, a2);
  *a1 = v4;
  return result;
}

uint64_t sub_1D16FACEC(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (unint64_t *)__dst;
  unint64_t v10 = a2;
  uint64_t v11 = __src;
  int64_t v12 = a2 - __src;
  int64_t v13 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v13 = a2 - __src;
  }
  uint64_t v14 = v13 >> 3;
  uint64_t v15 = a3 - (void)a2;
  uint64_t v16 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v16 = a3 - (void)a2;
  }
  uint64_t v17 = v16 >> 3;
  uint64_t v33 = __src;
  char v32 = (unint64_t *)__dst;
  if (v14 >= v16 >> 3)
  {
    if (v15 >= -7)
    {
      if (__dst != a2 || &a2[8 * v17] <= __dst) {
        memmove(__dst, a2, 8 * v17);
      }
      unint64_t v23 = &v8[v17];
      uint64_t v31 = v23;
      uint64_t v33 = v10;
      if (v11 < v10 && v15 >= 8)
      {
        unint64_t v24 = *(void *)(a7 + 16);
        unint64_t v25 = (unint64_t *)(a3 - 8);
        while (1)
        {
          unint64_t v26 = *(v23 - 1);
          if (v26 >= v24) {
            break;
          }
          BOOL v27 = v10 - 8;
          unint64_t v28 = *((void *)v10 - 1);
          if (v28 >= v24) {
            goto LABEL_49;
          }
          uint64_t v29 = (char *)(v25 + 1);
          if (*(double *)(a7 + 32 + 8 * v26) >= *(double *)(a7 + 32 + 8 * v28))
          {
            uint64_t v31 = v23 - 1;
            if (v29 < (char *)v23 || v25 >= v23 || v29 != (char *)v23) {
              *unint64_t v25 = *(v23 - 1);
            }
            --v23;
            if (v10 <= v11) {
              goto LABEL_47;
            }
          }
          else
          {
            if (v29 != v10 || v25 >= (unint64_t *)v10) {
              *unint64_t v25 = v28;
            }
            uint64_t v33 = v10 - 8;
            v10 -= 8;
            if (v27 <= v11) {
              goto LABEL_47;
            }
          }
          --v25;
          if (v23 <= v8) {
            goto LABEL_47;
          }
        }
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
LABEL_47:
      sub_1D16FA0D4((void **)&v33, (const void **)&v32, &v31);
      return 1;
    }
  }
  else if (v12 >= -7)
  {
    if (__dst != __src || &__src[8 * v14] <= __dst) {
      memmove(__dst, __src, 8 * v14);
    }
    uint64_t v18 = &v8[v14];
    uint64_t v31 = v18;
    if ((unint64_t)v10 < a3 && v12 >= 8)
    {
      unint64_t v19 = *(void *)(a7 + 16);
      while (1)
      {
        uint64_t v20 = *(void *)v10;
        if (*(void *)v10 >= v19) {
          break;
        }
        unint64_t v21 = *v8;
        if (*v8 >= v19) {
          goto LABEL_51;
        }
        if (*(double *)(a7 + 32 + 8 * v20) >= *(double *)(a7 + 32 + 8 * v21))
        {
          if (v11 != (char *)v8) {
            *(void *)uint64_t v11 = v21;
          }
          char v32 = ++v8;
          uint64_t v22 = v10;
        }
        else
        {
          uint64_t v22 = v10 + 8;
          if (v11 < v10 || v11 >= v22 || v11 != v10) {
            *(void *)uint64_t v11 = v20;
          }
        }
        v11 += 8;
        if (v8 < v18)
        {
          unint64_t v10 = v22;
          if ((unint64_t)v22 < a3) {
            continue;
          }
        }
        uint64_t v33 = v11;
        goto LABEL_47;
      }
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    goto LABEL_47;
  }
LABEL_52:
  swift_bridgeObjectRelease();
  uint64_t result = sub_1D17BEB20();
  __break(1u);
  return result;
}

uint64_t sub_1D16FAFB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a2)
  {
    uint64_t v7 = *a4;
    unint64_t v8 = *(void *)(a7 + 16);
    uint64_t v9 = *a4 + 8 * a3 - 8;
LABEL_5:
    unint64_t v10 = *(void *)(v7 + 8 * a3);
    uint64_t v11 = result;
    int64_t v12 = (unint64_t *)v9;
    while (v10 < v8)
    {
      unint64_t v13 = *v12;
      if (*v12 >= v8) {
        goto LABEL_13;
      }
      if (*(double *)(a7 + 32 + 8 * v10) < *(double *)(a7 + 32 + 8 * v13))
      {
        if (!v7) {
          goto LABEL_14;
        }
        *int64_t v12 = v10;
        v12[1] = v13;
        --v12;
        if (a3 != ++v11) {
          continue;
        }
      }
      ++a3;
      v9 += 8;
      if (a3 == a2) {
        return result;
      }
      goto LABEL_5;
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  return result;
}

uint64_t sub_1D16FB040(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1[1];
  swift_bridgeObjectRetain_n();
  uint64_t v7 = sub_1D17BEB60();
  if (v7 >= v6)
  {
    if (v6 < 0) {
      goto LABEL_151;
    }
    if (!v6) {
      goto LABEL_121;
    }
    swift_bridgeObjectRetain();
    sub_1D16FAFB8(0, v6, 1, a1, a2, a3, a4);
    if (v116) {
      goto LABEL_121;
    }
    goto LABEL_120;
  }
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  if (v6 < -1) {
    goto LABEL_159;
  }
  uint64_t v113 = a4;
  uint64_t v104 = v6;
  uint64_t v102 = v7;
  uint64_t v100 = a1;
  if (v6 < 2)
  {
    uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v110 = (char *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v101 = MEMORY[0x1E4FBC860];
    if (v6 == 1) {
      goto LABEL_13;
    }
    unint64_t v36 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_108:
    if (v36 >= 2)
    {
      uint64_t v89 = *v100;
      uint64_t v109 = *v100;
      while (v36 >= 2)
      {
        if (!v89) {
          goto LABEL_158;
        }
        unint64_t v90 = v11;
        unint64_t v115 = v36 - 2;
        uint64_t v91 = *(void *)&v11[16 * v36];
        uint64_t v92 = *(void *)&v11[16 * v36 + 24];
        uint64_t v93 = (char *)(v89 + 8 * v91);
        unint64_t v94 = (char *)(v89 + 8 * *(void *)&v11[16 * v36 + 16]);
        unint64_t v95 = v89 + 8 * v92;
        swift_bridgeObjectRetain();
        sub_1D16FACEC(v93, v94, v95, v110, a2, a3, v113);
        if (v116)
        {
          uint64_t v88 = v101;
          goto LABEL_104;
        }
        swift_bridgeObjectRelease();
        if (v92 < v91) {
          goto LABEL_143;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v90 = sub_1D16FA24C((uint64_t)v90);
        }
        if (v115 >= *((void *)v90 + 2)) {
          goto LABEL_144;
        }
        uint64_t v96 = &v90[16 * v115 + 32];
        *(void *)uint64_t v96 = v91;
        *((void *)v96 + 1) = v92;
        unint64_t v97 = *((void *)v90 + 2);
        if (v36 > v97) {
          goto LABEL_145;
        }
        memmove(&v90[16 * v36 + 16], &v90[16 * v36 + 32], 16 * (v97 - v36));
        *((void *)v90 + 2) = v97 - 1;
        unint64_t v36 = v97 - 1;
        uint64_t v11 = v90;
        uint64_t v89 = v109;
        if (v97 <= 2) {
          goto LABEL_119;
        }
      }
      goto LABEL_142;
    }
LABEL_119:
    swift_bridgeObjectRelease();
    *(void *)(v101 + 16) = 0;
LABEL_120:
    swift_bridgeObjectRelease();
    goto LABEL_121;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = sub_1D17BE1C0();
  *(void *)(v10 + 16) = v9;
  uint64_t v101 = v10;
  uint64_t v110 = (char *)(v10 + 32);
LABEL_13:
  uint64_t v12 = 0;
  uint64_t v13 = *a1;
  uint64_t v103 = a4 + 32;
  uint64_t v99 = *a1 - 8;
  uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v14 = v6;
  uint64_t v107 = *a1;
  while (1)
  {
    uint64_t v15 = v12;
    uint64_t v16 = v12 + 1;
    if (v12 + 1 >= v14) {
      goto LABEL_34;
    }
    unint64_t v17 = *(void *)(v13 + 8 * v16);
    if ((v17 & 0x8000000000000000) != 0) {
      goto LABEL_147;
    }
    unint64_t v18 = *(void *)(v113 + 16);
    if (v17 >= v18) {
      goto LABEL_148;
    }
    unint64_t v19 = *(void *)(v13 + 8 * v15);
    if (v19 >= v18) {
      goto LABEL_149;
    }
    double v20 = *(double *)(v103 + 8 * v17);
    double v21 = *(double *)(v103 + 8 * v19);
    uint64_t v16 = v15 + 2;
    if (v15 + 2 >= v14) {
      goto LABEL_25;
    }
    double v22 = *(double *)(v103 + 8 * v17);
    do
    {
      unint64_t v23 = *(void *)(v13 + 8 * v16);
      if (v23 >= v18) {
        goto LABEL_129;
      }
      if (v17 >= v18)
      {
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
        goto LABEL_150;
      }
      if (v20 < v21 == *(double *)(v103 + 8 * v23) >= v22) {
        goto LABEL_25;
      }
      ++v16;
      double v22 = *(double *)(v103 + 8 * v23);
      unint64_t v17 = v23;
    }
    while (v14 != v16);
    uint64_t v16 = v14;
LABEL_25:
    if (v20 < v21)
    {
      if (v16 >= v15)
      {
        if (v15 < v16)
        {
          uint64_t v24 = v16 - 1;
          uint64_t v25 = v15;
          while (1)
          {
            if (v25 != v24)
            {
              if (!v13) {
                goto LABEL_157;
              }
              uint64_t v26 = *(void *)(v13 + 8 * v25);
              *(void *)(v13 + 8 * v25) = *(void *)(v13 + 8 * v24);
              *(void *)(v13 + 8 * v24) = v26;
            }
            BOOL v67 = ++v25 < v24--;
            if (!v67) {
              goto LABEL_34;
            }
          }
        }
        goto LABEL_34;
      }
LABEL_154:
      __break(1u);
LABEL_155:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_156:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_157:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_158:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_159:
      swift_bridgeObjectRelease_n();
      uint64_t result = sub_1D17BEA30();
      __break(1u);
      return result;
    }
LABEL_34:
    if (v16 < v14)
    {
      if (!__OFSUB__(v16, v15))
      {
        if (v16 - v15 >= v102) {
          goto LABEL_52;
        }
        uint64_t v27 = v15 + v102;
        if (!__OFADD__(v15, v102))
        {
          if (v27 >= v14) {
            uint64_t v27 = v14;
          }
          if (v27 >= v15)
          {
            if (v16 != v27)
            {
              unint64_t v28 = *(void *)(v113 + 16);
              uint64_t v29 = (unint64_t *)(v99 + 8 * v16);
              do
              {
                unint64_t v30 = *(void *)(v13 + 8 * v16);
                uint64_t v31 = v15;
                char v32 = v29;
                do
                {
                  if (v30 >= v28)
                  {
                    __break(1u);
LABEL_124:
                    __break(1u);
LABEL_125:
                    __break(1u);
LABEL_126:
                    __break(1u);
LABEL_127:
                    __break(1u);
LABEL_128:
                    __break(1u);
LABEL_129:
                    __break(1u);
                    goto LABEL_130;
                  }
                  unint64_t v33 = *v32;
                  if (*v32 >= v28) {
                    goto LABEL_124;
                  }
                  if (*(double *)(v103 + 8 * v30) >= *(double *)(v103 + 8 * v33)) {
                    break;
                  }
                  if (!v13) {
                    goto LABEL_155;
                  }
                  *char v32 = v30;
                  v32[1] = v33;
                  --v32;
                  ++v31;
                }
                while (v16 != v31);
                ++v16;
                ++v29;
              }
              while (v16 != v27);
              uint64_t v16 = v27;
            }
            goto LABEL_52;
          }
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
LABEL_52:
    if (v16 < v15) {
      goto LABEL_146;
    }
    uint64_t v105 = v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1D16F9FD8(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v35 = *((void *)v11 + 2);
    unint64_t v34 = *((void *)v11 + 3);
    unint64_t v36 = v35 + 1;
    uint64_t v13 = v107;
    if (v35 >= v34 >> 1)
    {
      uint64_t v87 = sub_1D16F9FD8((char *)(v34 > 1), v35 + 1, 1, v11);
      uint64_t v13 = v107;
      uint64_t v11 = v87;
    }
    *((void *)v11 + 2) = v36;
    uint64_t v108 = v11 + 32;
    uint64_t v37 = &v11[16 * v35 + 32];
    *(void *)uint64_t v37 = v15;
    *((void *)v37 + 1) = v105;
    if (v35) {
      break;
    }
    unint64_t v36 = 1;
LABEL_101:
    uint64_t v14 = v104;
    uint64_t v12 = v105;
    if (v105 >= v104) {
      goto LABEL_108;
    }
  }
  uint64_t v38 = v11 + 32;
  uint64_t v106 = v11;
  while (1)
  {
    unint64_t v39 = v36 - 1;
    if (v36 >= 4)
    {
      uint64_t v44 = &v38[16 * v36];
      uint64_t v45 = *((void *)v44 - 8);
      uint64_t v46 = *((void *)v44 - 7);
      BOOL v50 = __OFSUB__(v46, v45);
      uint64_t v47 = v46 - v45;
      if (v50) {
        goto LABEL_131;
      }
      uint64_t v49 = *((void *)v44 - 6);
      uint64_t v48 = *((void *)v44 - 5);
      BOOL v50 = __OFSUB__(v48, v49);
      uint64_t v42 = v48 - v49;
      char v43 = v50;
      if (v50) {
        goto LABEL_132;
      }
      unint64_t v51 = v36 - 2;
      uint64_t v52 = &v38[16 * v36 - 32];
      uint64_t v54 = *(void *)v52;
      uint64_t v53 = *((void *)v52 + 1);
      BOOL v50 = __OFSUB__(v53, v54);
      uint64_t v55 = v53 - v54;
      if (v50) {
        goto LABEL_134;
      }
      BOOL v50 = __OFADD__(v42, v55);
      uint64_t v56 = v42 + v55;
      if (v50) {
        goto LABEL_137;
      }
      if (v56 >= v47)
      {
        BOOL v74 = &v38[16 * v39];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        BOOL v50 = __OFSUB__(v75, v76);
        uint64_t v77 = v75 - v76;
        if (v50) {
          goto LABEL_141;
        }
        BOOL v67 = v42 < v77;
        goto LABEL_90;
      }
    }
    else
    {
      if (v36 != 3)
      {
        uint64_t v68 = *((void *)v11 + 4);
        uint64_t v69 = *((void *)v11 + 5);
        BOOL v50 = __OFSUB__(v69, v68);
        uint64_t v61 = v69 - v68;
        char v62 = v50;
        goto LABEL_84;
      }
      uint64_t v41 = *((void *)v11 + 4);
      uint64_t v40 = *((void *)v11 + 5);
      BOOL v50 = __OFSUB__(v40, v41);
      uint64_t v42 = v40 - v41;
      char v43 = v50;
    }
    if (v43) {
      goto LABEL_133;
    }
    unint64_t v51 = v36 - 2;
    uint64_t v57 = &v38[16 * v36 - 32];
    uint64_t v59 = *(void *)v57;
    uint64_t v58 = *((void *)v57 + 1);
    BOOL v60 = __OFSUB__(v58, v59);
    uint64_t v61 = v58 - v59;
    char v62 = v60;
    if (v60) {
      goto LABEL_136;
    }
    uint64_t v63 = &v38[16 * v39];
    uint64_t v65 = *(void *)v63;
    uint64_t v64 = *((void *)v63 + 1);
    BOOL v50 = __OFSUB__(v64, v65);
    uint64_t v66 = v64 - v65;
    if (v50) {
      goto LABEL_139;
    }
    if (__OFADD__(v61, v66)) {
      goto LABEL_140;
    }
    if (v61 + v66 >= v42)
    {
      BOOL v67 = v42 < v66;
LABEL_90:
      if (v67) {
        unint64_t v39 = v51;
      }
      goto LABEL_92;
    }
LABEL_84:
    if (v62) {
      goto LABEL_135;
    }
    uint64_t v70 = &v38[16 * v39];
    uint64_t v72 = *(void *)v70;
    uint64_t v71 = *((void *)v70 + 1);
    BOOL v50 = __OFSUB__(v71, v72);
    uint64_t v73 = v71 - v72;
    if (v50) {
      goto LABEL_138;
    }
    if (v73 < v61) {
      goto LABEL_101;
    }
LABEL_92:
    unint64_t v78 = v39 - 1;
    if (v39 - 1 >= v36) {
      goto LABEL_125;
    }
    if (!v13) {
      goto LABEL_156;
    }
    uint64_t v79 = &v38[16 * v78];
    uint64_t v80 = *(void *)v79;
    unint64_t v81 = v39;
    uint64_t v82 = &v38[16 * v39];
    uint64_t v83 = *((void *)v82 + 1);
    uint64_t v114 = (char *)(v13 + 8 * *(void *)v79);
    uint64_t v84 = (char *)(v13 + 8 * *(void *)v82);
    unint64_t v85 = v13 + 8 * v83;
    swift_bridgeObjectRetain();
    sub_1D16FACEC(v114, v84, v85, v110, a2, a3, v113);
    if (v116) {
      break;
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v106;
    if (v83 < v80) {
      goto LABEL_126;
    }
    if (v81 > *((void *)v106 + 2)) {
      goto LABEL_127;
    }
    *(void *)uint64_t v79 = v80;
    uint64_t v38 = v108;
    *(void *)&v108[16 * v78 + 8] = v83;
    unint64_t v86 = *((void *)v106 + 2);
    if (v81 >= v86) {
      goto LABEL_128;
    }
    unint64_t v36 = v86 - 1;
    memmove(v82, v82 + 16, 16 * (v86 - 1 - v81));
    *((void *)v106 + 2) = v86 - 1;
    uint64_t v13 = v107;
    if (v86 <= 2) {
      goto LABEL_101;
    }
  }
  uint64_t v88 = v101;
LABEL_104:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v88 + 16) = 0;
LABEL_121:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1D16FB83C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = sub_1D1667640(v8);
  }
  uint64_t v9 = v8[2];
  v11[0] = (uint64_t)(v8 + 4);
  v11[1] = v9;
  swift_bridgeObjectRetain();
  sub_1D16FB040(v11, a2, a3, a4);
  swift_bridgeObjectRelease();
  *a1 = v8;
  return swift_bridgeObjectRelease_n();
}

double *sub_1D16FB8FC(double *result, char a2, void *a3)
{
  uint64_t v3 = *((void *)result + 2);
  if (v3)
  {
    uint64_t v6 = result;
    double v7 = result[4];
    uint64_t v8 = *((void *)result + 5);
    uint64_t v9 = (void *)*a3;
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_1D165AB40(v7);
    uint64_t v12 = v9[2];
    BOOL v13 = (v10 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (!__OFADD__(v12, v13))
    {
      char v15 = v10;
      if (v9[3] >= v14)
      {
        if (a2)
        {
          unint64_t v18 = (void *)*a3;
          if ((v10 & 1) == 0) {
            goto LABEL_13;
          }
        }
        else
        {
          sub_1D16A7DD0();
          unint64_t v18 = (void *)*a3;
          if ((v15 & 1) == 0) {
            goto LABEL_13;
          }
        }
      }
      else
      {
        sub_1D16A4A1C(v14, a2 & 1);
        unint64_t v16 = sub_1D165AB40(v7);
        if ((v15 & 1) != (v17 & 1))
        {
LABEL_29:
          uint64_t result = (double *)sub_1D17BEC60();
          __break(1u);
          return result;
        }
        unint64_t v11 = v16;
        unint64_t v18 = (void *)*a3;
        if ((v15 & 1) == 0)
        {
LABEL_13:
          v18[(v11 >> 6) + 8] |= 1 << v11;
          uint64_t v21 = 8 * v11;
          *(double *)(v18[6] + v21) = v7;
          *(void *)(v18[7] + v21) = v8;
          uint64_t v22 = v18[2];
          unint64_t v19 = v18 + 2;
          uint64_t v20 = v22 + 1;
          if (__OFADD__(v22, 1))
          {
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
          goto LABEL_14;
        }
      }
      unint64_t v19 = (void *)(v18[7] + 8 * v11);
      uint64_t v20 = *v19 + v8;
      if (!__OFADD__(*v19, v8))
      {
LABEL_14:
        *unint64_t v19 = v20;
        uint64_t v23 = v3 - 1;
        if (v3 == 1) {
          return (double *)swift_bridgeObjectRelease();
        }
        for (uint64_t i = v6 + 7; ; i += 2)
        {
          double v29 = *(i - 1);
          double v30 = *i;
          uint64_t v31 = (void *)*a3;
          unint64_t v32 = sub_1D165AB40(v29);
          uint64_t v34 = v31[2];
          BOOL v35 = (v33 & 1) == 0;
          BOOL v36 = __OFADD__(v34, v35);
          uint64_t v37 = v34 + v35;
          if (v36) {
            break;
          }
          char v38 = v33;
          if (v31[3] < v37)
          {
            sub_1D16A4A1C(v37, 1);
            unint64_t v32 = sub_1D165AB40(v29);
            if ((v38 & 1) != (v39 & 1)) {
              goto LABEL_29;
            }
          }
          uint64_t v40 = (void *)*a3;
          if (v38)
          {
            uint64_t v26 = (void *)(v40[7] + 8 * v32);
            uint64_t v28 = *v26 + *(void *)&v30;
            if (__OFADD__(*v26, *(void *)&v30)) {
              goto LABEL_26;
            }
          }
          else
          {
            v40[(v32 >> 6) + 8] |= 1 << v32;
            uint64_t v25 = 8 * v32;
            *(double *)(v40[6] + v25) = v29;
            *(double *)(v40[7] + v25) = v30;
            uint64_t v27 = v40[2];
            uint64_t v26 = v40 + 2;
            uint64_t v28 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_28;
            }
          }
          *uint64_t v26 = v28;
          if (!--v23) {
            return (double *)swift_bridgeObjectRelease();
          }
        }
        goto LABEL_27;
      }
LABEL_26:
      __break(1u);
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_1D16FBB48()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D16FBB5C(uint64_t a1)
{
  return sub_1D16FBB8C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))sub_1D16F5F98);
}

uint64_t sub_1D16FBB74(uint64_t a1)
{
  return sub_1D16FBB8C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))sub_1D16F5AC8);
}

uint64_t sub_1D16FBB8C(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned __int8 *)(v2 + 40), *(unsigned __int8 *)(v2 + 41), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

unint64_t sub_1D16FBBB0()
{
  unint64_t result = qword_1EA652CD8;
  if (!qword_1EA652CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA652CD8);
  }
  return result;
}

unint64_t sub_1D16FBC08()
{
  unint64_t result = qword_1EA652CE0;
  if (!qword_1EA652CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA652CE0);
  }
  return result;
}

uint64_t sub_1D16FBC5C()
{
  return sub_1D16BCF1C(&qword_1EA652CE8, &qword_1EA652CF0);
}

uint64_t sub_1D16FBCA0()
{
  return 0;
}

uint64_t sub_1D16FBCB0@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *(void *)(result + 16);
    if (v3 < *(void *)(v4 + 16))
    {
      *a3 = *(void *)(v4 + 8 * v3 + 32);
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1D16FBCE4()
{
  return 0;
}

double sub_1D16FBCF4@<D0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  return keypath_get_13Tm(a1, (void (*)(long long *__return_ptr, void))MAMatrix.subscript.getter, a2);
}

uint64_t sub_1D16FBD10()
{
  return 0;
}

double sub_1D16FBD20@<D0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1D16EDDAC(a1, (void (*)(long long *__return_ptr, void, void))MAMatrix.subscript.getter, a2);
}

uint64_t sub_1D16FBD50()
{
  return 0;
}

double sub_1D16FBD60@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1D16EE5C4(a1, (void (*)(long long *__return_ptr, uint64_t))MAMatrix.subscript.getter, a2);
}

uint64_t sub_1D16FBD8C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_1D16EE648(a1, a2, a3, a4, (void (*)(uint64_t, void, uint64_t, uint64_t, void *))sub_1D16ED3E4);
}

uint64_t sub_1D16FBDB8()
{
  return 0;
}

double sub_1D16FBDC8@<D0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  return keypath_get_13Tm(a1, (void (*)(long long *__return_ptr, void))MAMatrix.subscript.getter, a2);
}

double keypath_get_13Tm@<D0>(void *a1@<X1>, void (*a2)(long long *__return_ptr, void)@<X3>, uint64_t a3@<X8>)
{
  a2(&v6, *a1);
  uint64_t v4 = v7;
  double result = *(double *)&v6;
  *(_OWORD *)a3 = v6;
  *(void *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_1D16FBE44()
{
  return 0;
}

double sub_1D16FBE54@<D0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1D16EDDAC(a1, (void (*)(long long *__return_ptr, void, void))MAMatrix.subscript.getter, a2);
}

uint64_t sub_1D16FBE84()
{
  return 0;
}

double sub_1D16FBE94@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1D16EE5C4(a1, (void (*)(long long *__return_ptr, uint64_t))MAMatrix.subscript.getter, a2);
}

uint64_t sub_1D16FBEC0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_1D16EE648(a1, a2, a3, a4, (void (*)(uint64_t, void, uint64_t, uint64_t, void *))sub_1D16EE844);
}

uint64_t sub_1D16FBEEC()
{
  return 0;
}

unsigned char *storeEnumTagSinglePayload for MAMatrixAxes(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D16FBFC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MAMatrixAxes()
{
  return &type metadata for MAMatrixAxes;
}

unsigned char *storeEnumTagSinglePayload for MAMatrixDistances(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *double result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D16FC0CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MAMatrixDistances()
{
  return &type metadata for MAMatrixDistances;
}

uint64_t initializeBufferWithCopyOfBuffer for MAMatrix(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MAMatrix()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for MAMatrix(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MAMatrix(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MAMatrix(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MAMatrix(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MAMatrix()
{
  return &type metadata for MAMatrix;
}

uint64_t sub_1D16FC268()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t MAFeatureVector.definition.getter()
{
  return swift_retain();
}

uint64_t MAFeatureVector.values.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MAFeatureVector.space.getter()
{
  return *(void *)(*(void *)(v0 + 8) + 16);
}

id MAFeatureVector.stringValues.getter()
{
  if (*(void *)(v0 + 16))
  {
    id v1 = *(id *)(v0 + 16);
  }
  else
  {
    uint64_t v2 = v0;
    swift_retain();
    unint64_t v3 = swift_bridgeObjectRetain();
    id v1 = sub_1D167A1A0(v3);
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)(v2 + 16) = v1;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MAFeatureVector.stringValues.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MAFeatureVector.stringValues.modify(id *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = MAFeatureVector.stringValues.getter();
  return sub_1D16FC3C0;
}

uint64_t sub_1D16FC3C0(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 16) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 16) = v2;
  }
  return result;
}

uint64_t MAFeatureVector.keys.getter()
{
  if (*(void *)(v0 + 24))
  {
    uint64_t v1 = *(void *)(v0 + 24);
  }
  else
  {
    swift_retain();
    uint64_t v1 = sub_1D16787A4();
    swift_release();
    *(void *)(v0 + 24) = v1;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MAFeatureVector.keys.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*MAFeatureVector.keys.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = MAFeatureVector.keys.getter();
  return sub_1D16FC514;
}

uint64_t sub_1D16FC514(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 24) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 24) = v2;
  }
  return result;
}

uint64_t MAFeatureVector.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1D167ABB8(*(void **)(v2 + 8), a1, a2);
}

uint64_t MAFeatureVector.description.getter()
{
  BOOL v36 = (void *)v0[1];
  if (!objc_msgSend(*(id *)(*v0 + 16), sel_hasPendingRead)) {
    goto LABEL_47;
  }
  unint64_t v1 = 0xD000000000000011;
  unint64_t v53 = 0xD000000000000011;
  unint64_t v54 = 0x80000001D17D6320;
  uint64_t v2 = sub_1D16787A4();
  uint64_t v34 = *(void *)(v2 + 16);
  if (!v34)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    return v1;
  }
  unint64_t v3 = 0;
  uint64_t v35 = v2 + 32;
  uint64_t v33 = v2;
  while (1)
  {
    if (v3 >= *(void *)(v2 + 16)) {
      goto LABEL_46;
    }
    unint64_t v37 = v3;
    unsigned int v4 = (uint64_t *)(v35 + 16 * v3);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_1D167ABB8(v36, v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (!v7) {
      goto LABEL_39;
    }
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFF8;
    if (!(v7 >> 62))
    {
      uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v9) {
        break;
      }
      goto LABEL_38;
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    if (v9) {
      break;
    }
LABEL_38:
    swift_bridgeObjectRelease();
LABEL_39:
    swift_bridgeObjectRelease();
LABEL_5:
    unint64_t v3 = v37 + 1;
    uint64_t v2 = v33;
    if (v37 + 1 == v34)
    {
      swift_bridgeObjectRelease();
      return v53;
    }
  }
  unint64_t v10 = 0;
  unint64_t v42 = v7 & 0xC000000000000001;
  unint64_t v38 = v7 + 32;
  uint64_t v40 = v7 & 0xFFFFFFFFFFFFFF8;
  unint64_t v41 = v7;
  uint64_t v39 = v9;
  while (v42)
  {
    id v13 = (id)MEMORY[0x1D25F9260](v10, v7);
    BOOL v14 = __OFADD__(v10++, 1);
    if (v14) {
      goto LABEL_44;
    }
LABEL_18:
    uint64_t v44 = v13;
    v52[15] = 2314;
    v52[16] = 0xE200000000000000;
    char v43 = (void *)sub_1D17BDFE0();
    long long v51 = xmmword_1D17C9930;
    uint64_t v49 = 1701667182;
    unint64_t v50 = 0xE400000000000000;
    sub_1D17BE800();
    uint64_t v49 = 25705;
    unint64_t v50 = 0xE200000000000000;
    sub_1D17BE800();
    uint64_t v49 = 1684632949;
    unint64_t v50 = 0xE400000000000000;
    sub_1D17BE800();
    uint64_t v15 = sub_1D17BE360();
    for (uint64_t i = 0; i != 3; ++i)
    {
      sub_1D165C164((uint64_t)&v52[5 * i], (uint64_t)&v49);
      swift_bridgeObjectRetain();
      uint64_t v17 = sub_1D17BE7E0();
      uint64_t v18 = -1 << *(unsigned char *)(v15 + 32);
      unint64_t v19 = v17 & ~v18;
      unint64_t v1 = v15 + 56;
      if ((*(void *)(v15 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
      {
        uint64_t v20 = ~v18;
        while (1)
        {
          sub_1D165C164(*(void *)(v15 + 48) + 40 * v19, (uint64_t)v47);
          char v21 = MEMORY[0x1D25F91A0](v47, &v49);
          sub_1D165C1C0((uint64_t)v47);
          if (v21) {
            break;
          }
          unint64_t v19 = (v19 + 1) & v20;
          if (((*(void *)(v1 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
            goto LABEL_24;
          }
        }
      }
      else
      {
LABEL_24:
        swift_bridgeObjectRelease();
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        sub_1D165C164((uint64_t)&v49, (uint64_t)v47);
        uint64_t v46 = v15;
        if (*(void *)(v15 + 24) <= *(void *)(v15 + 16))
        {
          if (isUniquelyReferenced_nonNull_native) {
            sub_1D16FCE3C();
          }
          else {
            sub_1D16FE86C();
          }
          uint64_t v15 = v46;
          uint64_t v23 = sub_1D17BE7E0();
          uint64_t v24 = -1 << *(unsigned char *)(v15 + 32);
          unint64_t v19 = v23 & ~v24;
          unint64_t v1 = v15 + 56;
          if ((*(void *)(v15 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
          {
            uint64_t v25 = ~v24;
            do
            {
              sub_1D165C164(*(void *)(v15 + 48) + 40 * v19, (uint64_t)v45);
              char v26 = MEMORY[0x1D25F91A0](v45, v47);
              sub_1D165C1C0((uint64_t)v45);
              if (v26) {
                goto LABEL_48;
              }
              unint64_t v19 = (v19 + 1) & v25;
            }
            while (((*(void *)(v1 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) != 0);
          }
        }
        else if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1D16FDD6C();
          uint64_t v15 = v46;
        }
        *(void *)(v15 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v19;
        uint64_t v27 = *(void *)(v15 + 48) + 40 * v19;
        long long v28 = v47[0];
        long long v29 = v47[1];
        *(void *)(v27 + 32) = v48;
        *(_OWORD *)uint64_t v27 = v28;
        *(_OWORD *)(v27 + 16) = v29;
        uint64_t v30 = *(void *)(v15 + 16);
        BOOL v14 = __OFADD__(v30, 1);
        uint64_t v31 = v30 + 1;
        if (v14)
        {
          __break(1u);
          goto LABEL_41;
        }
        *(void *)(v15 + 16) = v31;
      }
      swift_bridgeObjectRelease();
      sub_1D165C1C0((uint64_t)&v49);
    }
    swift_arrayDestroy();
    unint64_t v11 = (void *)sub_1D17BE340();
    swift_bridgeObjectRelease();
    id v12 = objc_msgSend(v44, sel_visualStringWithName_andPropertyKeys_, v43, v11);

    sub_1D17BDFF0();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    sub_1D17BE030();

    swift_bridgeObjectRelease();
    uint64_t v8 = v40;
    unint64_t v7 = v41;
    if (v10 == v39)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
  }
  if (v10 >= *(void *)(v8 + 16)) {
    goto LABEL_45;
  }
  id v13 = *(id *)(v38 + 8 * v10);
  BOOL v14 = __OFADD__(v10++, 1);
  if (!v14) {
    goto LABEL_18;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  uint64_t result = sub_1D17BEC50();
  __break(1u);
  return result;
}

uint64_t sub_1D16FCB9C()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651A70);
  uint64_t v3 = sub_1D17BE820();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    long long v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v28;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = sub_1D17BE5B0();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_1D16FCE3C()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D10);
  uint64_t v3 = sub_1D17BE820();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9) {
          goto LABEL_33;
        }
        unint64_t v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v18 = v6[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v18 = v6[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v6[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      uint64_t v20 = *(void *)(v2 + 48) + 40 * v16;
      long long v29 = *(_OWORD *)v20;
      long long v30 = *(_OWORD *)(v20 + 16);
      uint64_t v31 = *(void *)(v20 + 32);
      uint64_t result = sub_1D17BE7E0();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
      *(_OWORD *)uint64_t v14 = v29;
      *(_OWORD *)(v14 + 16) = v30;
      *(void *)(v14 + 32) = v31;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

unint64_t sub_1D16FD108()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D20);
  uint64_t v3 = sub_1D17BE820();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    unint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v12 << 6);
      }
      else
      {
        int64_t v19 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v19 >= v9) {
          goto LABEL_23;
        }
        unint64_t v20 = v6[v19];
        ++v12;
        if (!v20)
        {
          int64_t v12 = v19 + 1;
          if (v19 + 1 >= v9) {
            goto LABEL_23;
          }
          unint64_t v20 = v6[v12];
          if (!v20)
          {
            int64_t v12 = v19 + 2;
            if (v19 + 2 >= v9) {
              goto LABEL_23;
            }
            unint64_t v20 = v6[v12];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v9)
              {
LABEL_23:
                swift_release();
                uint64_t v22 = 1 << *(unsigned char *)(v2 + 32);
                if (v22 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v22;
                }
                unint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v20 = v6[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v12 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_29;
                  }
                  if (v12 >= v9) {
                    goto LABEL_23;
                  }
                  unint64_t v20 = v6[v12];
                  ++v21;
                  if (v20) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v12 = v21;
            }
          }
        }
LABEL_22:
        unint64_t v8 = (v20 - 1) & v20;
        unint64_t v14 = __clz(__rbit64(v20)) + (v12 << 6);
      }
      unint64_t v15 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v14);
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      sub_1D17BED20();
      swift_bridgeObjectRetain();
      sub_1D1675190((uint64_t)v23, v16);
      swift_bridgeObjectRelease();
      sub_1D17BED80();
      unint64_t result = sub_1D17BE6F0();
      *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      unint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * result);
      *unint64_t v18 = v16;
      v18[1] = v17;
      ++*(void *)(v4 + 16);
    }
  }
  unint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_1D16FD36C()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D18);
  uint64_t result = sub_1D17BE820();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                unint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = sub_1D17BED10();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_1D16FD5F0()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652CA8);
  uint64_t v3 = sub_1D17BE820();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    long long v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_1D17BED20();
      sub_1D17BE020();
      uint64_t result = sub_1D17BED80();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_1D16FD8D0()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651A68);
  uint64_t v3 = sub_1D17BE820();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      sub_1D17BED20();
      (*(void (**)(char *))(*(void *)v19 + 272))(v28);
      uint64_t result = sub_1D17BED80();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

id sub_1D16FDBC0()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651A70);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BE810();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1D16FDD6C()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D10);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BE810();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    id result = (void *)sub_1D165C164(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v17 = *(void *)(v4 + 48) + v16;
    long long v18 = v23[0];
    long long v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1D16FDF3C()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D20);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BE810();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    long long v19 = (void *)(*(void *)(v4 + 48) + v16);
    *long long v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1D16FE0F8()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D18);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BE810();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1D16FE290()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652CA8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BE810();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    long long v19 = (void *)(*(void *)(v4 + 48) + v16);
    *long long v19 = *v17;
    v19[1] = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1D16FE444()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651A68);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D17BE810();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    id result = (void *)swift_retain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1D16FE5F0()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651A70);
  uint64_t v3 = sub_1D17BE820();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t v27 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    id v19 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = sub_1D17BE5B0();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v27;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1D16FE86C()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D10);
  uint64_t v3 = sub_1D17BE820();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_24:
    sub_1D165C164(*(void *)(v2 + 48) + 40 * v18, (uint64_t)v29);
    uint64_t result = sub_1D17BE7E0();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
    long long v15 = v29[0];
    long long v16 = v29[1];
    *(void *)(v14 + 32) = v30;
    *(_OWORD *)uint64_t v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
    ++*(void *)(v4 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1D16FEB00()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D20);
  uint64_t v3 = sub_1D17BE820();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    unint64_t result = swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  unint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_7;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v9) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v9) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v9) {
          goto LABEL_23;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v14 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_7:
    long long v15 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    sub_1D17BED20();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_1D1675190((uint64_t)v22, v16);
    swift_bridgeObjectRelease();
    sub_1D17BED80();
    unint64_t result = sub_1D17BE6F0();
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * result);
    *unint64_t v18 = v16;
    v18[1] = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_23:
    swift_release();
    unint64_t v1 = v0;
    goto LABEL_24;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1D16FED34()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D18);
  uint64_t result = sub_1D17BE820();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = sub_1D17BED10();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    unint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1D16FEF98()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652CA8);
  uint64_t v3 = sub_1D17BE820();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_1D17BED20();
    swift_bridgeObjectRetain();
    sub_1D17BE020();
    uint64_t result = sub_1D17BED80();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1D16FF248()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651A68);
  uint64_t v3 = sub_1D17BE820();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v26 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v27 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v27) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v27) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v26 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v27) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v26 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    sub_1D17BED20();
    int64_t v18 = *(void (**)(char *))(*(void *)v17 + 272);
    swift_retain();
    v18(v28);
    uint64_t result = sub_1D17BED80();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v8 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v27)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v26 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t destroy for MAFeatureVector()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MAFeatureVector(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MAFeatureVector(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for MAFeatureVector(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MAFeatureVector(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MAFeatureVector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MAFeatureVector()
{
  return &type metadata for MAFeatureVector;
}

uint64_t sub_1D16FF75C(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = sub_1D17BE700();
    uint64_t v5 = v4;
    uint64_t v6 = sub_1D17BE7C0();
    char v8 = MEMORY[0x1D25F90E0](v3, v5, v6, v7);
    swift_bridgeObjectRelease();
    if (v8)
    {
LABEL_3:
      sub_1D167C268(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    sub_1D170F378(v3, v5, v2 != 0, a1);
    uint64_t v9 = v13;
    sub_1D167C268(v3, v5, v2 != 0);
    return v9;
  }
  uint64_t result = sub_1D170F5F0(a1);
  if ((v12 & 1) == 0)
  {
    uint64_t v5 = v11;
    if (*(_DWORD *)(a1 + 36) == v11)
    {
      uint64_t v3 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D16FF86C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1D1684B84(a1);
  if (v6) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    sub_1D170F678((uint64_t)v7, (uint64_t)v8, result, v5, 0, a1);
    sub_1D165C164((uint64_t)v7, a2);
    sub_1D1668120((uint64_t)v8, a2 + 40);
    return sub_1D166817C((uint64_t)v7, &qword_1EA652DA8);
  }
  return result;
}

uint64_t sub_1D16FF934(uint64_t a1, double a2)
{
  uint64_t v5 = swift_bridgeObjectRetain();
  char v6 = (void *)sub_1D16FF75C(v5);
  swift_bridgeObjectRelease();
  if (v6 && (id v7 = objc_msgSend(v6, sel_graph), v6, v7))
  {
    id v8 = objc_msgSend(v7, sel_graphReference);
    swift_unknownObjectRelease();
    return (*(uint64_t (**)(id, uint64_t, double))(v2 + 208))(v8, a1, a2);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

void sub_1D16FF9F8(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1D17BE710();
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v2 = v21;
    uint64_t v3 = v22;
    unint64_t v4 = v23;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
      uint64_t v11 = v3;
      goto LABEL_29;
    }
    int64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v18 + 8 * v13);
    uint64_t v11 = v3 + 1;
    if (!v14)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v18 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v8) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v18 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v8) {
            goto LABEL_32;
          }
          unint64_t v14 = *(void *)(v18 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v8) {
              goto LABEL_32;
            }
            unint64_t v14 = *(void *)(v18 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v8 != v15)
              {
                unint64_t v14 = *(void *)(v18 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_1D1668088();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_32;
    }
    while (1)
    {
      id v16 = v12;
      sub_1D1671FA0(&v24, v16);
      uint64_t v17 = v24;

      uint64_t v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (sub_1D17BE7A0())
      {
        sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v24;
        swift_unknownObjectRelease();
        uint64_t v11 = v3;
        uint64_t v9 = v4;
        if (v12) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t sub_1D16FFCC8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t result = v10;
    uint64_t v3 = v11;
    long long v4 = v12;
    uint64_t v5 = v13;
  }
  else
  {
    uint64_t v6 = -1;
    uint64_t v7 = -1 << *(unsigned char *)(result + 32);
    uint64_t v8 = ~v7;
    uint64_t v3 = result + 56;
    uint64_t v9 = -v7;
    if (v9 < 64) {
      uint64_t v6 = ~(-1 << v9);
    }
    uint64_t v5 = v6 & *(void *)(result + 56);
    long long v4 = (unint64_t)v8;
  }
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = 0;
  return result;
}

id MASlice.graphReference.getter()
{
  return *(id *)(v0 + 16);
}

double sub_1D16FFDA0()
{
  return *(double *)(v0 + 32);
}

void sub_1D16FFDA8(double a1)
{
  *(double *)(v1 + 32) = a1;
}

double static MASlice.MASliceFullPrecision.getter()
{
  return 1.0;
}

double static MASlice.MASliceLowPrecision.getter()
{
  return 0.0;
}

double sub_1D16FFDC0(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 40) = MEMORY[0x1E4FBC868];
  double result = 0.0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(double *)(v6 + 32) = a3;
  return result;
}

void sub_1D16FFE24()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = objc_msgSend(v1, sel_concreteGraph);
  if (!v2) {
    goto LABEL_8;
  }
  uint64_t v3 = v2;
  unsigned int v4 = objc_msgSend(v2, sel_hasPendingRead);

  if (!v4)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (*(void *)(v0 + 24))
  {
LABEL_6:
    swift_bridgeObjectRetain();
    return;
  }
  id v5 = objc_msgSend(v1, sel_concreteGraph);
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = objc_msgSend(v5, sel_allNodes);

    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    sub_1D1674A20();
    sub_1D17BE350();

    goto LABEL_6;
  }
LABEL_9:
  __break(1u);
}

uint64_t sub_1D16FFF24()
{
  id v1 = objc_msgSend(v0[2], sel_concreteGraph);
  if (!v1) {
    goto LABEL_8;
  }
  id v2 = v1;
  unsigned int v3 = objc_msgSend(v1, sel_hasPendingRead);

  if (!v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  uint64_t v4 = (*((uint64_t (**)(void))*v0 + 27))();
  swift_retain();
  uint64_t v5 = sub_1D170F764(v4, (uint64_t)v0);
  swift_release();
  if (*(void *)(v5 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D40);
    uint64_t v6 = sub_1D17BEB10();
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4FBC868];
  }
  uint64_t v8 = v6;
  sub_1D170F9CC(v5, 1, &v8);
  swift_bridgeObjectRelease();
  return v4;
}

BOOL sub_1D1700044()
{
  return *(double *)(v0 + 32) != 1.0;
}

void sub_1D1700058(uint64_t a1, uint64_t a2, double a3)
{
  id v8 = objc_msgSend(*(id *)(v3 + 16), sel_concreteGraph);
  if (!v8) {
    goto LABEL_40;
  }
  uint64_t v9 = v8;
  unsigned int v10 = objc_msgSend(v8, sel_hasPendingRead);

  if (!v10) {
    goto LABEL_39;
  }
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v3 + 216))();
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v48 = MEMORY[0x1E4FBC860];
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 48);
  if (v13)
  {
    swift_retain();
    uint64_t v14 = v13(v11, a1, a2, a3);
    if (v4)
    {
      sub_1D165B3A4((uint64_t)v13);
      swift_bridgeObjectRelease();
      return;
    }
    if (!v14)
    {
      sub_1D165B3A4((uint64_t)v13);
      uint64_t v12 = MEMORY[0x1E4FBC860];
      uint64_t v15 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (v15) {
        goto LABEL_9;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    sub_1D1663AD8(v14);
    sub_1D165B3A4((uint64_t)v13);
    uint64_t v12 = v48;
  }
  uint64_t v15 = *(void *)(v12 + 16);
  if (!v15) {
    goto LABEL_37;
  }
LABEL_9:
  uint64_t v16 = v12 + 32;
  unint64_t v47 = v11 & 0xC000000000000001;
  uint64_t v45 = v11 + 56;
  swift_bridgeObjectRetain();
  unint64_t v17 = 0;
  uint64_t v18 = MEMORY[0x1E4FBC860];
  uint64_t v46 = v12 + 32;
  uint64_t v43 = v15;
  uint64_t v44 = v11;
  uint64_t v40 = v12;
  while (v17 < *(void *)(v12 + 16))
  {
    uint64_t v19 = v16 + 16 * v17;
    double v20 = *(double *)(v19 + 8);
    if (v20 >= a3)
    {
      uint64_t v21 = *(void **)v19;
      if (v47)
      {
        id v22 = v21;
        char v23 = sub_1D17BE7B0();

        if ((v23 & 1) == 0) {
          goto LABEL_29;
        }
      }
      else
      {
        if (!*(void *)(v11 + 16))
        {
          id v33 = v21;
LABEL_29:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1D16826AC(0, *(void *)(v18 + 16) + 1, 1);
          }
          unint64_t v38 = *(void *)(v18 + 16);
          unint64_t v37 = *(void *)(v18 + 24);
          if (v38 >= v37 >> 1) {
            sub_1D16826AC(v37 > 1, v38 + 1, 1);
          }
          *(void *)(v18 + 16) = v38 + 1;
          uint64_t v39 = v18 + 16 * v38;
          *(void *)(v39 + 32) = v21;
          *(double *)(v39 + 40) = v20;
          uint64_t v16 = v46;
          goto LABEL_11;
        }
        id v24 = v21;
        uint64_t v25 = sub_1D17BE5B0();
        uint64_t v26 = -1 << *(unsigned char *)(v11 + 32);
        unint64_t v27 = v25 & ~v26;
        if (((*(void *)(v45 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
        {
          uint64_t v12 = v40;
          goto LABEL_29;
        }
        sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
        id v28 = *(id *)(*(void *)(v11 + 48) + 8 * v27);
        char v29 = sub_1D17BE5C0();

        if ((v29 & 1) == 0)
        {
          uint64_t v41 = ~v26;
          unint64_t v42 = v24;
          unint64_t v30 = (v27 + 1) & ~v26;
          if (((*(void *)(v45 + ((v30 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
          {
            uint64_t v15 = v43;
            uint64_t v11 = v44;
            uint64_t v12 = v40;
            goto LABEL_29;
          }
          id v31 = *(id *)(*(void *)(v44 + 48) + 8 * v30);
          char v32 = sub_1D17BE5C0();

          if ((v32 & 1) == 0)
          {
            uint64_t v12 = v40;
            unint64_t v34 = (v30 + 1) & v41;
            uint64_t v11 = v44;
            uint64_t v15 = v43;
            uint64_t v16 = v46;
            if ((*(void *)(v45 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34))
            {
              while (1)
              {
                id v35 = *(id *)(*(void *)(v11 + 48) + 8 * v34);
                char v36 = sub_1D17BE5C0();

                if (v36) {
                  break;
                }
                unint64_t v34 = (v34 + 1) & v41;
                uint64_t v11 = v44;
                uint64_t v15 = v43;
                if (((*(void *)(v45 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0) {
                  goto LABEL_29;
                }
              }

              uint64_t v15 = v43;
              uint64_t v11 = v44;
              goto LABEL_11;
            }
            goto LABEL_29;
          }
        }

        uint64_t v15 = v43;
        uint64_t v11 = v44;
        uint64_t v16 = v46;
        uint64_t v12 = v40;
      }
    }
LABEL_11:
    if (++v17 == v15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

void sub_1D17004A8(void *a1)
{
  id v3 = objc_msgSend(v1[2], sel_concreteGraph);
  if (v3)
  {
    uint64_t v4 = v3;
    unsigned int v5 = objc_msgSend(v3, sel_hasPendingRead);

    if (v5)
    {
      uint64_t v6 = (*((uint64_t (**)(void))*v1 + 27))();
      sub_1D1671E50(a1, v6);
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void sub_1D1700554()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 216))();
  uint64_t v2 = v1;
  if ((v1 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v2 = v32;
    uint64_t v27 = v33;
    uint64_t v3 = v34;
    uint64_t v4 = v35;
    unint64_t v5 = v36;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = -1 << *(unsigned char *)(v1 + 32);
    uint64_t v27 = v1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(v1 + 56);
  }
  int64_t v26 = (unint64_t)(v3 + 64) >> 6;
  uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  if (v2 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
      uint64_t v12 = v4;
      goto LABEL_27;
    }
    int64_t v15 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_34;
    }
    unint64_t v16 = *(void *)(v27 + 8 * v15);
    uint64_t v12 = v4 + 1;
    if (!v16)
    {
      uint64_t v12 = v4 + 2;
      if (v4 + 2 >= v26) {
        goto LABEL_34;
      }
      unint64_t v16 = *(void *)(v27 + 8 * v12);
      if (!v16)
      {
        uint64_t v12 = v4 + 3;
        if (v4 + 3 >= v26) {
          goto LABEL_34;
        }
        unint64_t v16 = *(void *)(v27 + 8 * v12);
        if (!v16)
        {
          uint64_t v12 = v4 + 4;
          if (v4 + 4 >= v26) {
            goto LABEL_34;
          }
          unint64_t v16 = *(void *)(v27 + 8 * v12);
          if (!v16)
          {
            uint64_t v17 = v4 + 5;
            while (v26 != v17)
            {
              unint64_t v16 = *(void *)(v27 + 8 * v17++);
              if (v16)
              {
                uint64_t v12 = v17 - 1;
                goto LABEL_26;
              }
            }
LABEL_34:
            sub_1D1668088();
            return;
          }
        }
      }
    }
LABEL_26:
    uint64_t v10 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_27:
    id v14 = *(id *)(*(void *)(v2 + 48) + 8 * v11);
    if (!v14) {
      goto LABEL_34;
    }
    while (1)
    {
      uint64_t v31 = sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
      *(void *)&long long v30 = v14;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_1D17C9600;
      *(void *)(v18 + 32) = v14;
      *(void *)&v28[0] = v18;
      sub_1D17BE150();
      uint64_t v19 = *(void *)&v28[0];
      sub_1D16607C4(&v30, v28);
      uint64_t v29 = v19;
      id v20 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = sub_1D169CDF8(0, v9[2] + 1, 1, v9);
      }
      unint64_t v22 = v9[2];
      unint64_t v21 = v9[3];
      if (v22 >= v21 >> 1) {
        uint64_t v9 = sub_1D169CDF8((void *)(v21 > 1), v22 + 1, 1, v9);
      }
      void v9[2] = v22 + 1;
      char v23 = &v9[5 * v22];
      long long v24 = v28[0];
      long long v25 = v28[1];
      v23[8] = v29;
      *((_OWORD *)v23 + 2) = v24;
      *((_OWORD *)v23 + 3) = v25;

      uint64_t v4 = v12;
      unint64_t v5 = v10;
      if ((v2 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      uint64_t v13 = sub_1D17BE7A0();
      if (v13)
      {
        *(void *)&long long v30 = v13;
        sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v14 = *(id *)&v28[0];
        swift_unknownObjectRelease();
        uint64_t v12 = v4;
        uint64_t v10 = v5;
        if (v14) {
          continue;
        }
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

void sub_1D1700908()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 216))();
  uint64_t v2 = v1;
  if ((v1 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v2 = v30;
    uint64_t v25 = v31;
    uint64_t v3 = v32;
    uint64_t v4 = v33;
    unint64_t v5 = v34;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = -1 << *(unsigned char *)(v1 + 32);
    uint64_t v25 = v1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(v1 + 56);
  }
  int64_t v24 = (unint64_t)(v3 + 64) >> 6;
  uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  if (v2 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
      uint64_t v12 = v4;
      goto LABEL_27;
    }
    int64_t v15 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v15 >= v24) {
      goto LABEL_34;
    }
    unint64_t v16 = *(void *)(v25 + 8 * v15);
    uint64_t v12 = v4 + 1;
    if (!v16)
    {
      uint64_t v12 = v4 + 2;
      if (v4 + 2 >= v24) {
        goto LABEL_34;
      }
      unint64_t v16 = *(void *)(v25 + 8 * v12);
      if (!v16)
      {
        uint64_t v12 = v4 + 3;
        if (v4 + 3 >= v24) {
          goto LABEL_34;
        }
        unint64_t v16 = *(void *)(v25 + 8 * v12);
        if (!v16)
        {
          uint64_t v12 = v4 + 4;
          if (v4 + 4 >= v24) {
            goto LABEL_34;
          }
          unint64_t v16 = *(void *)(v25 + 8 * v12);
          if (!v16)
          {
            uint64_t v17 = v4 + 5;
            while (v24 != v17)
            {
              unint64_t v16 = *(void *)(v25 + 8 * v17++);
              if (v16)
              {
                uint64_t v12 = v17 - 1;
                goto LABEL_26;
              }
            }
LABEL_34:
            sub_1D1668088();
            return;
          }
        }
      }
    }
LABEL_26:
    uint64_t v10 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_27:
    id v14 = *(id *)(*(void *)(v2 + 48) + 8 * v11);
    if (!v14) {
      goto LABEL_34;
    }
    while (1)
    {
      uint64_t v29 = sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
      *(void *)&long long v28 = v14;
      *(void *)&v26[0] = v0;
      sub_1D16607C4(&v28, (_OWORD *)((char *)v26 + 8));
      swift_retain();
      id v18 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = sub_1D169CBC4(0, v9[2] + 1, 1, v9);
      }
      unint64_t v20 = v9[2];
      unint64_t v19 = v9[3];
      if (v20 >= v19 >> 1) {
        uint64_t v9 = sub_1D169CBC4((void *)(v19 > 1), v20 + 1, 1, v9);
      }
      void v9[2] = v20 + 1;
      unint64_t v21 = &v9[5 * v20];
      long long v22 = v26[0];
      long long v23 = v26[1];
      v21[8] = v27;
      *((_OWORD *)v21 + 2) = v22;
      *((_OWORD *)v21 + 3) = v23;

      uint64_t v4 = v12;
      unint64_t v5 = v10;
      if ((v2 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      uint64_t v13 = sub_1D17BE7A0();
      if (v13)
      {
        *(void *)&long long v28 = v13;
        sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v14 = *(id *)&v26[0];
        swift_unknownObjectRelease();
        uint64_t v12 = v4;
        uint64_t v10 = v5;
        if (*(void *)&v26[0]) {
          continue;
        }
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

id sub_1D1700C84(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1D17BDD90();
  uint64_t v5 = *(void *)(v4 - 8);
  double v7 = MEMORY[0x1F4188790](v4, v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = objc_msgSend(*(id *)(v2 + 16), sel_concreteGraph, v7);
  if (result)
  {
    unint64_t v11 = result;
    id v12 = objc_msgSend(result, sel_identifier);

    sub_1D17BDD80();
    sub_1D170FC54(&qword_1EA652D48, 255, MEMORY[0x1E4F27990]);
    sub_1D17BDF10();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    uint64_t v13 = *(void *)(v2 + 24);
    if (v13)
    {
      sub_1D17BED40();
      swift_bridgeObjectRetain();
      sub_1D1675190(a1, v13);
      return (id)swift_bridgeObjectRelease();
    }
    else
    {
      return (id)sub_1D17BED40();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1D1700E2C(uint64_t a1)
{
  uint64_t v2 = v1;
  id result = objc_msgSend(*(id *)(v1 + 16), sel_concreteGraph);
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = result;
  id result = objc_msgSend(*(id *)(a1 + 16), sel_concreteGraph);
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  sub_1D165C128(0, &qword_1EA6518E0);
  char v7 = sub_1D17BE5C0();

  id result = 0;
  if (v7)
  {
    uint64_t v8 = *(void *)(v2 + 24);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 24);
      if (v9)
      {
        sub_1D1673874(v8, v9);
        if (v10) {
          return (id)1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1D1700F00()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1D1700F30(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1D1700F40(void *a1))(uint64_t a1)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 72);
  *a1 = *(void *)(v1 + 64);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return sub_1D1700F90;
}

uint64_t sub_1D1700F90(uint64_t a1)
{
  *(_OWORD *)(*(void *)(a1 + 16) + 64) = *(_OWORD *)a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D1700FA8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  void (*v17)(uint64_t *__return_ptr, uint64_t *, void *);
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  void v22[2];
  uint64_t v23;
  unint64_t v24;

  if (((*(uint64_t (**)(void))(*v7 + 248))() & 1) == 0) {
    return 0;
  }
  uint64_t v14 = v7[5];
  if (!*(void *)(v14 + 16))
  {
LABEL_8:
    if (a7)
    {
LABEL_9:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA651720);
      id v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_1D17C91F0;
      long long v23 = 40;
      int64_t v24 = 0xE100000000000000;
      sub_1D17BE030();
      sub_1D17BE030();
      sub_1D17BE030();
      sub_1D17BE030();
      unint64_t v19 = v24;
      *(void *)(v18 + 32) = v23;
      *(void *)(v18 + 40) = v19;
      return v18;
    }
    return 0;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_1D165AA20(a2);
  if ((v16 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v17 = *(void (**)(uint64_t *__return_ptr, uint64_t *, void *))(*(void *)(v14 + 56) + 16 * v15);
  swift_retain();
  swift_release();
  swift_bridgeObjectRelease();
  long long v23 = a3;
  int64_t v24 = a4;
  v22[0] = a5;
  v22[1] = a6;
  v17(&v21, &v23, v22);
  swift_release();
  id v18 = v21;
  if (!v21 && (a7 & 1) != 0) {
    goto LABEL_9;
  }
  return v18;
}

uint64_t sub_1D1701158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  swift_retain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *(void *)(v4 + 40);
  *(void *)(v4 + 40) = 0x8000000000000000;
  sub_1D165F034((uint64_t)sub_1D170FCD4, v8, a1, isUniquelyReferenced_nonNull_native);
  *(void *)(v4 + 40) = v11;
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D1701230(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1D165AA20(a1);
  LOBYTE(a1) = v5;
  uint64_t result = swift_bridgeObjectRelease();
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v2 + 40);
    *(void *)(v2 + 40) = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_1D16A71B0();
    }
    swift_release();
    sub_1D16A9438(v4, v8);
    *(void *)(v2 + 40) = v8;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D17012F8()
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v0 + 40) = MEMORY[0x1E4FBC868];
  return result;
}

uint64_t sub_1D1701320(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  swift_retain();
  return sub_1D165B3A4(v3);
}

uint64_t sub_1D170136C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  return sub_1D165B3A4(v1);
}

uint64_t sub_1D1701378(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1D170FCDC(a1, a2, a3);
}

uint64_t sub_1D1701390(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1D170FCDC(a1, a2, a3);
  uint64_t v6 = result;
  if (!v3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D50);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D17C91F0;
    *(void *)(inited + 32) = a1;
    *(void *)(inited + 40) = v6;
    id v8 = a1;
    unint64_t v9 = sub_1D165C964(inited);
    unint64_t v10 = sub_1D165C858(MEMORY[0x1E4FBC860]);
    type metadata accessor for MADistribution();
    swift_allocObject();
    return MADistribution.init(projections:weights:)(v9, v10);
  }
  return result;
}

void sub_1D1701444(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v114 = (void *)a3[2];
  id v9 = objc_msgSend(v114, sel_concreteGraph);
  if (!v9) {
    goto LABEL_97;
  }
  unint64_t v10 = v9;
  unsigned int v11 = objc_msgSend(v9, sel_hasPendingRead);

  if (!v11) {
    goto LABEL_93;
  }
  uint64_t v12 = (*(uint64_t (**)(void))(*a3 + 224))();
  uint64_t v14 = v13;
  uint64_t v123 = MEMORY[0x1E4FBC860];
  if (a4 != 1.0)
  {
    uint64_t v47 = (*(uint64_t (**)(uint64_t (*)(), void, double))(*a3 + 240))(nullsub_1, 0, a4);
    if (v4)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
LABEL_36:
      swift_bridgeObjectRelease();
      return;
    }
    if (v47) {
      sub_1D1663AD8(v47);
    }
  }
  swift_bridgeObjectRetain_n();
  sub_1D16FFCC8(v12, (uint64_t)&v122);
  sub_1D16D27DC();
  char v16 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v112 = v12;
  if (v15)
  {
    uint64_t v17 = v15;
    uint64_t v118 = MEMORY[0x1E4FBC868];
    while (1)
    {
      uint64_t v19 = sub_1D170FCDC(v17, a1, a2);
      if (v5)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease_n();
        sub_1D1668088();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }
      uint64_t v20 = v19;
      uint64_t v21 = a1;
      id v22 = v17;
      long long v23 = v16;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v121 = v23;
      unint64_t v26 = sub_1D165A9D0((uint64_t)v22);
      uint64_t v27 = v23[2];
      BOOL v28 = (v25 & 1) == 0;
      uint64_t v29 = v27 + v28;
      if (__OFADD__(v27, v28))
      {
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
        sub_1D17BEC60();
        __break(1u);
        return;
      }
      char v30 = v25;
      if (v23[3] >= v29)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_1D16A6DE0();
        }
      }
      else
      {
        sub_1D16A2EE0(v29, isUniquelyReferenced_nonNull_native);
        unint64_t v31 = sub_1D165A9D0((uint64_t)v22);
        if ((v30 & 1) != (v32 & 1)) {
          goto LABEL_98;
        }
        unint64_t v26 = v31;
      }
      char v16 = v121;
      uint64_t v33 = 8 * v26;
      if (v30)
      {
        uint64_t v34 = v121[7];
        swift_bridgeObjectRelease();
        *(void *)(v34 + v33) = v20;
      }
      else
      {
        v121[(v26 >> 6) + 8] |= 1 << v26;
        *(void *)(v16[6] + 8 * v26) = v22;
        *(void *)(v16[7] + 8 * v26) = v20;
        uint64_t v35 = v16[2];
        BOOL v36 = __OFADD__(v35, 1);
        uint64_t v37 = v35 + 1;
        if (v36) {
          goto LABEL_92;
        }
        uint64_t v16[2] = v37;
        id v38 = v22;
      }

      swift_bridgeObjectRelease();
      uint64_t v5 = 0;
      if (*(void *)(v14 + 16))
      {
        id v39 = v22;
        swift_bridgeObjectRetain();
        unint64_t v40 = sub_1D165A9D0((uint64_t)v39);
        if ((v41 & 1) == 0)
        {

          goto LABEL_23;
        }
        double v42 = *(double *)(*(void *)(v14 + 56) + 8 * v40);

        swift_bridgeObjectRelease();
        if (v42 != 1.0)
        {
          id v43 = v39;
          objc_msgSend(v43, sel_weight);
          double v45 = v42 * v44;
          char v46 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v121 = (void *)v118;
          sub_1D165EC88(v43, v46, v45);

LABEL_23:
          swift_bridgeObjectRelease();
        }
      }
      a1 = v21;
      if ((v12 & 0xC000000000000001) != 0) {
        sub_1D17BE760();
      }

      sub_1D16D27DC();
      uint64_t v17 = v18;
      if (!v18) {
        goto LABEL_29;
      }
    }
  }
  uint64_t v118 = MEMORY[0x1E4FBC868];
LABEL_29:
  sub_1D1668088();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v48 = v123;
  uint64_t v49 = *(void *)(v123 + 16);
  if (v49)
  {
    uint64_t v115 = a1;
    uint64_t v117 = v5;
    swift_bridgeObjectRetain();
    unint64_t v50 = (double *)(v48 + 40);
    do
    {
      long long v51 = v16;
      uint64_t v52 = (void *)*((void *)v50 - 1);
      double v53 = *v50;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1D17C9600;
      *(void *)(inited + 32) = v52;
      uint64_t v122 = inited;
      id v55 = v52;
      sub_1D17BE150();
      sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
      sub_1D1674A20();
      id v56 = v55;
      id v57 = v114;
      uint64_t v122 = sub_1D17BE360();
      sub_1D1671FA0(&v121, v56);
      uint64_t v58 = v121;
      swift_bridgeObjectRelease();

      uint64_t v59 = v122;
      type metadata accessor for MASlice();
      uint64_t v60 = swift_initStackObject();
      *(_OWORD *)(v60 + 48) = 0u;
      *(_OWORD *)(v60 + 64) = 0u;
      *(void *)(v60 + 16) = v57;
      *(void *)(v60 + 24) = v59;
      uint64_t v61 = MEMORY[0x1E4FBC868];
      *(void *)(v60 + 32) = 0x3FF0000000000000;
      *(void *)(v60 + 40) = v61;
      uint64_t v62 = sub_1D170FCDC(v56, v115, a2);
      if (v117)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_setDeallocating();
        swift_bridgeObjectRelease();
        sub_1D165B3A4(*(void *)(v60 + 48));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }
      uint64_t v63 = v62;
      id v64 = v56;
      char v65 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v122 = (uint64_t)v51;
      sub_1D165EDC4(v63, v64, v65);
      char v16 = (void *)v122;

      swift_bridgeObjectRelease();
      id v66 = v64;
      objc_msgSend(v66, sel_weight);
      double v68 = v53 * v67;
      char v69 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v122 = v118;
      sub_1D165EC88(v66, v69, v68);
      uint64_t v118 = v122;

      swift_bridgeObjectRelease();
      if ((v112 & 0xC000000000000001) != 0)
      {
        sub_1D17BE760();
        sub_1D17BE760();
      }
      swift_setDeallocating();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1D165B3A4(*(void *)(v60 + 48));
      swift_bridgeObjectRelease();

      v50 += 2;
      --v49;
    }
    while (v49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v115;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v70 = swift_bridgeObjectRelease();
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 232))(v70) & 1) == 0) {
    goto LABEL_90;
  }
  uint64_t v113 = v16;
  uint64_t v71 = (*(uint64_t (**)(void))(*(void *)a1 + 224))();
  uint64_t v73 = v72;
  if ((v71 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1D17BE710();
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v74 = v124;
    uint64_t v120 = v125;
    uint64_t v75 = v126;
    int64_t v76 = v127;
    unint64_t v77 = v128;
  }
  else
  {
    uint64_t v78 = -1 << *(unsigned char *)(v71 + 32);
    uint64_t v120 = v71 + 56;
    uint64_t v75 = ~v78;
    uint64_t v79 = -v78;
    if (v79 < 64) {
      uint64_t v80 = ~(-1 << v79);
    }
    else {
      uint64_t v80 = -1;
    }
    unint64_t v77 = v80 & *(void *)(v71 + 56);
    int64_t v76 = 0;
    uint64_t v74 = swift_bridgeObjectRetain();
  }
  int64_t v116 = (unint64_t)(v75 + 64) >> 6;
  while (1)
  {
    int64_t v81 = v76;
    if ((v74 & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v84 = sub_1D17BE7A0();
    if (!v84) {
      goto LABEL_89;
    }
    uint64_t v121 = (void *)v84;
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v85 = (id)v122;
    swift_unknownObjectRelease();
    if (!v85) {
      goto LABEL_89;
    }
LABEL_67:
    if (*(void *)(v73 + 16))
    {
      swift_bridgeObjectRetain();
      id v88 = v85;
      unint64_t v89 = sub_1D165A9D0((uint64_t)v88);
      if (v90)
      {
        double v91 = *(double *)(*(void *)(v73 + 56) + 8 * v89);

        swift_bridgeObjectRelease();
        if (v91 == 1.0)
        {
        }
        else
        {
          id v93 = v88;
          objc_msgSend(v93, sel_weight);
          float v95 = v94;
          char v96 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v122 = v118;
          unint64_t v97 = v93;
          unint64_t v99 = sub_1D165A9D0((uint64_t)v93);
          uint64_t v100 = *(void *)(v118 + 16);
          BOOL v101 = (v98 & 1) == 0;
          uint64_t v102 = v100 + v101;
          if (__OFADD__(v100, v101)) {
            goto LABEL_95;
          }
          char v103 = v98;
          if (*(void *)(v118 + 24) >= v102)
          {
            if ((v96 & 1) == 0) {
              sub_1D16A6A54();
            }
          }
          else
          {
            sub_1D16A28F8(v102, v96);
            unint64_t v104 = sub_1D165A9D0((uint64_t)v97);
            if ((v103 & 1) != (v105 & 1)) {
              goto LABEL_98;
            }
            unint64_t v99 = v104;
          }
          double v106 = v91 * v95;
          uint64_t v107 = (void *)v122;
          uint64_t v118 = v122;
          if (v103)
          {
            *(double *)(*(void *)(v122 + 56) + 8 * v99) = v106;
          }
          else
          {
            *(void *)(v122 + 8 * (v99 >> 6) + 64) |= 1 << v99;
            uint64_t v108 = 8 * v99;
            *(void *)(v107[6] + v108) = v97;
            *(double *)(v107[7] + v108) = v106;
            uint64_t v109 = v107[2];
            BOOL v36 = __OFADD__(v109, 1);
            uint64_t v110 = v109 + 1;
            if (v36) {
              goto LABEL_96;
            }
            v107[2] = v110;
            id v111 = v97;
          }

          swift_bridgeObjectRelease();
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
    else
    {
    }
  }
  if (v77)
  {
    unint64_t v82 = __clz(__rbit64(v77));
    v77 &= v77 - 1;
    unint64_t v83 = v82 | (v76 << 6);
    goto LABEL_66;
  }
  ++v76;
  if (__OFADD__(v81, 1)) {
    goto LABEL_94;
  }
  if (v76 >= v116) {
    goto LABEL_89;
  }
  unint64_t v86 = *(void *)(v120 + 8 * v76);
  if (v86)
  {
LABEL_65:
    unint64_t v77 = (v86 - 1) & v86;
    unint64_t v83 = __clz(__rbit64(v86)) + (v76 << 6);
LABEL_66:
    id v85 = *(id *)(*(void *)(v74 + 48) + 8 * v83);
    if (!v85) {
      goto LABEL_89;
    }
    goto LABEL_67;
  }
  int64_t v87 = v81 + 2;
  if (v81 + 2 >= v116) {
    goto LABEL_89;
  }
  unint64_t v86 = *(void *)(v120 + 8 * v87);
  if (v86) {
    goto LABEL_64;
  }
  int64_t v87 = v81 + 3;
  if (v81 + 3 >= v116) {
    goto LABEL_89;
  }
  unint64_t v86 = *(void *)(v120 + 8 * v87);
  if (v86)
  {
LABEL_64:
    int64_t v76 = v87;
    goto LABEL_65;
  }
  int64_t v76 = v81 + 4;
  if (v81 + 4 >= v116) {
    goto LABEL_89;
  }
  unint64_t v86 = *(void *)(v120 + 8 * v76);
  if (v86) {
    goto LABEL_65;
  }
  int64_t v92 = v81 + 5;
  while (v116 != v92)
  {
    unint64_t v86 = *(void *)(v120 + 8 * v92++);
    if (v86)
    {
      int64_t v76 = v92 - 1;
      goto LABEL_65;
    }
  }
LABEL_89:
  sub_1D1668088();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v16 = v113;
LABEL_90:
  type metadata accessor for MADistribution();
  swift_allocObject();
  MADistribution.init(projections:weights:)((uint64_t)v16, v118);
}

void sub_1D1701FE4(uint64_t a1, uint64_t a2, void (*a3)(char *, double), uint64_t a4, double a5)
{
  uint64_t v7 = v6;
  uint64_t v8 = v5;
  v135 = *(void **)(v5 + 16);
  id v13 = objc_msgSend(v135, sel_concreteGraph);
  if (!v13) {
    goto LABEL_116;
  }
  uint64_t v14 = v13;
  unsigned int v15 = objc_msgSend(v13, sel_hasPendingRead);

  if (!v15) {
    goto LABEL_112;
  }
  char v156 = 0;
  uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v8 + 224))();
  uint64_t v140 = v17;
  uint64_t v150 = MEMORY[0x1E4FBC860];
  uint64_t v146 = v16;
  if (a5 == 1.0)
  {
    uint64_t v18 = v16;
  }
  else
  {
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = a3;
    *(void *)(v56 + 24) = a4;
    id v57 = *(uint64_t (**)(uint64_t (*)(double), uint64_t, double))(*(void *)v8 + 240);
    swift_retain();
    uint64_t v58 = v57(sub_1D17112E4, v56, a5);
    if (v6)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_52:
      swift_bridgeObjectRelease();
      return;
    }
    if (v58) {
      sub_1D1663AD8(v58);
    }
    swift_release();
    uint64_t v18 = v146;
  }
  v144 = a3;
  swift_bridgeObjectRetain_n();
  sub_1D16FFCC8(v18, (uint64_t)&v149);
  sub_1D16D27DC();
  uint64_t v21 = v150;
  uint64_t v138 = v150;
  if (v20)
  {
    uint64_t v22 = v19;
    long long v23 = v20;
    unint64_t v136 = v18 & 0xC000000000000001;
    uint64_t v147 = MEMORY[0x1E4FBC868];
    uint64_t v142 = MEMORY[0x1E4FBC868];
    while (1)
    {
      uint64_t v24 = sub_1D170FCDC(v23, a1, a2);
      if (v7)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease_n();
        sub_1D1668088();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_52;
      }
      uint64_t v25 = v24;
      id v26 = v23;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v148 = (void *)v147;
      unint64_t v29 = sub_1D165A9D0((uint64_t)v26);
      uint64_t v30 = *(void *)(v147 + 16);
      BOOL v31 = (v28 & 1) == 0;
      uint64_t v32 = v30 + v31;
      if (__OFADD__(v30, v31))
      {
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
        sub_1D17BEC60();
        __break(1u);
        return;
      }
      char v33 = v28;
      if (*(void *)(v147 + 24) >= v32)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_1D16A6DE0();
        }
      }
      else
      {
        sub_1D16A2EE0(v32, isUniquelyReferenced_nonNull_native);
        unint64_t v34 = sub_1D165A9D0((uint64_t)v26);
        if ((v33 & 1) != (v35 & 1)) {
          goto LABEL_117;
        }
        unint64_t v29 = v34;
      }
      BOOL v36 = v148;
      uint64_t v147 = (uint64_t)v148;
      if (v33)
      {
        uint64_t v37 = v148[7];
        swift_bridgeObjectRelease();
        *(void *)(v37 + 8 * v29) = v25;
      }
      else
      {
        v148[(v29 >> 6) + 8] |= 1 << v29;
        uint64_t v38 = 8 * v29;
        *(void *)(v36[6] + v38) = v26;
        *(void *)(v36[7] + v38) = v25;
        uint64_t v39 = v36[2];
        BOOL v40 = __OFADD__(v39, 1);
        uint64_t v41 = v39 + 1;
        if (v40) {
          goto LABEL_111;
        }
        v36[2] = v41;
        id v42 = v26;
      }

      swift_bridgeObjectRelease();
      uint64_t v7 = 0;
      if (!*(void *)(v140 + 16)) {
        goto LABEL_24;
      }
      id v43 = v26;
      swift_bridgeObjectRetain();
      unint64_t v44 = sub_1D165A9D0((uint64_t)v43);
      if ((v45 & 1) == 0) {
        break;
      }
      double v46 = *(double *)(*(void *)(v140 + 56) + 8 * v44);

      swift_bridgeObjectRelease();
      uint64_t v18 = v146;
      if (v46 != 1.0)
      {
        id v47 = v43;
        objc_msgSend(v47, sel_weight);
        double v49 = v46 * v48;
        char v50 = swift_isUniquelyReferenced_nonNull_native();
        v148 = (void *)v142;
        sub_1D165EC88(v47, v50, v49);

        swift_bridgeObjectRelease();
      }
LABEL_25:
      uint64_t v21 = v138;
      if (__OFADD__(v22, 1)) {
        goto LABEL_107;
      }
      if (v136) {
        uint64_t v51 = sub_1D17BE760();
      }
      else {
        uint64_t v51 = *(void *)(v18 + 16);
      }
      uint64_t v52 = *(void *)(v138 + 16);
      BOOL v40 = __OFADD__(v51, v52);
      uint64_t v53 = v51 + v52;
      if (v40) {
        goto LABEL_108;
      }
      v144(&v156, (double)(v22 + 1) / (double)v53 * 0.9 + 0.1);
      if (v156 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        sub_1D1672594();
        swift_allocError();
        *float v95 = 0;
        swift_willThrow();

        sub_1D1668088();
        return;
      }

      sub_1D16D27DC();
      uint64_t v22 = v54;
      long long v23 = v55;
      if (!v55) {
        goto LABEL_36;
      }
    }

    swift_bridgeObjectRelease();
LABEL_24:
    uint64_t v18 = v146;
    goto LABEL_25;
  }
  uint64_t v142 = MEMORY[0x1E4FBC868];
  uint64_t v147 = MEMORY[0x1E4FBC868];
LABEL_36:
  sub_1D1668088();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v134 = *(void *)(v21 + 16);
  if (v134)
  {
    uint64_t v141 = v7;
    unint64_t v133 = v18 & 0xC000000000000001;
    uint64_t v137 = a1;
    swift_bridgeObjectRetain();
    uint64_t v59 = 0;
    uint64_t v60 = (double *)(v21 + 40);
    do
    {
      uint64_t v61 = v59;
      uint64_t v62 = (void *)*((void *)v60 - 1);
      double v63 = *v60;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1D17C9600;
      *(void *)(inited + 32) = v62;
      uint64_t v149 = inited;
      id v65 = v62;
      sub_1D17BE150();
      sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
      sub_1D1674A20();
      id v66 = v65;
      id v67 = v135;
      uint64_t v149 = sub_1D17BE360();
      sub_1D1671FA0(&v148, v66);
      double v68 = v148;
      swift_bridgeObjectRelease();

      uint64_t v69 = v149;
      type metadata accessor for MASlice();
      uint64_t v70 = swift_initStackObject();
      *(_OWORD *)(v70 + 48) = 0u;
      *(_OWORD *)(v70 + 64) = 0u;
      *(void *)(v70 + 16) = v67;
      *(void *)(v70 + 24) = v69;
      uint64_t v71 = MEMORY[0x1E4FBC868];
      *(void *)(v70 + 32) = 0x3FF0000000000000;
      *(void *)(v70 + 40) = v71;
      uint64_t v72 = sub_1D170FCDC(v66, v137, a2);
      if (v141)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_setDeallocating();
        swift_bridgeObjectRelease();
        sub_1D165B3A4(*(void *)(v70 + 48));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }
      uint64_t v73 = v72;
      uint64_t v59 = v61 + 1;
      id v74 = v66;
      char v75 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v149 = v147;
      sub_1D165EDC4(v73, v74, v75);
      uint64_t v147 = v149;

      swift_bridgeObjectRelease();
      id v76 = v74;
      objc_msgSend(v76, sel_weight);
      double v78 = v63 * v77;
      char v79 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v149 = v142;
      sub_1D165EC88(v76, v79, v78);
      uint64_t v142 = v149;

      swift_bridgeObjectRelease();
      if (v133)
      {
        uint64_t v80 = sub_1D17BE760();
        uint64_t v81 = v59 + v80;
        unint64_t v82 = v144;
        if (__OFADD__(v59, v80)) {
          goto LABEL_109;
        }
        uint64_t v83 = sub_1D17BE760();
      }
      else
      {
        uint64_t v83 = *(void *)(v146 + 16);
        uint64_t v81 = v59 + v83;
        unint64_t v82 = v144;
        if (__OFADD__(v59, v83)) {
          goto LABEL_109;
        }
      }
      uint64_t v84 = *(void *)(v150 + 16);
      BOOL v40 = __OFADD__(v83, v84);
      uint64_t v85 = v83 + v84;
      if (v40) {
        goto LABEL_110;
      }
      v82(&v156, (double)v81 / (double)v85 * 0.9 + 0.1);
      if (v156 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1D1672594();
        swift_allocError();
        *char v96 = 0;
        swift_willThrow();
        swift_setDeallocating();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1D165B3A4(*(void *)(v70 + 48));
        swift_bridgeObjectRelease();

        return;
      }
      swift_setDeallocating();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1D165B3A4(*(void *)(v70 + 48));
      swift_bridgeObjectRelease();

      v60 += 2;
    }
    while (v134 != v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v137;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v86 = swift_bridgeObjectRelease();
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 232))(v86) & 1) == 0) {
    goto LABEL_105;
  }
  uint64_t v87 = (*(uint64_t (**)(void))(*(void *)a1 + 224))();
  uint64_t v89 = v88;
  if ((v87 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1D17BE710();
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v91 = v151;
    uint64_t v90 = v152;
    uint64_t v93 = v153;
    int64_t v92 = v154;
    unint64_t v94 = v155;
  }
  else
  {
    uint64_t v97 = -1 << *(unsigned char *)(v87 + 32);
    uint64_t v90 = v87 + 56;
    uint64_t v93 = ~v97;
    uint64_t v98 = -v97;
    if (v98 < 64) {
      uint64_t v99 = ~(-1 << v98);
    }
    else {
      uint64_t v99 = -1;
    }
    unint64_t v94 = v99 & *(void *)(v87 + 56);
    int64_t v92 = 0;
    uint64_t v91 = swift_bridgeObjectRetain();
  }
  int64_t v100 = (unint64_t)(v93 + 64) >> 6;
  while (1)
  {
    int64_t v101 = v92;
    if ((v91 & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v104 = sub_1D17BE7A0();
    if (!v104) {
      goto LABEL_104;
    }
    v148 = (void *)v104;
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v105 = (id)v149;
    swift_unknownObjectRelease();
    if (!v105) {
      goto LABEL_104;
    }
LABEL_81:
    if (*(void *)(v89 + 16))
    {
      swift_bridgeObjectRetain();
      id v108 = v105;
      unint64_t v109 = sub_1D165A9D0((uint64_t)v108);
      if (v110)
      {
        double v111 = *(double *)(*(void *)(v89 + 56) + 8 * v109);

        swift_bridgeObjectRelease();
        if (v111 == 1.0)
        {
        }
        else
        {
          id v113 = v108;
          objc_msgSend(v113, sel_weight);
          float v115 = v114;
          char v116 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v149 = v142;
          uint64_t v139 = (uint64_t)v113;
          unint64_t v118 = sub_1D165A9D0((uint64_t)v113);
          uint64_t v119 = *(void *)(v142 + 16);
          BOOL v120 = (v117 & 1) == 0;
          uint64_t v121 = v119 + v120;
          if (__OFADD__(v119, v120)) {
            goto LABEL_114;
          }
          if (*(void *)(v142 + 24) >= v121)
          {
            if ((v116 & 1) == 0)
            {
              char v132 = v117;
              sub_1D16A6A54();
              char v117 = v132;
            }
            uint64_t v122 = (void *)v139;
          }
          else
          {
            char v143 = v117;
            sub_1D16A28F8(v121, v116);
            uint64_t v122 = (void *)v139;
            unint64_t v123 = sub_1D165A9D0(v139);
            int v125 = v124 & 1;
            char v117 = v143;
            if ((v143 & 1) != v125) {
              goto LABEL_117;
            }
            unint64_t v118 = v123;
          }
          double v126 = v111 * v115;
          int64_t v127 = (void *)v149;
          uint64_t v142 = v149;
          if (v117)
          {
            *(double *)(*(void *)(v149 + 56) + 8 * v118) = v126;
          }
          else
          {
            *(void *)(v149 + 8 * (v118 >> 6) + 64) |= 1 << v118;
            uint64_t v128 = 8 * v118;
            *(void *)(v127[6] + v128) = v122;
            *(double *)(v127[7] + v128) = v126;
            uint64_t v129 = v127[2];
            BOOL v40 = __OFADD__(v129, 1);
            uint64_t v130 = v129 + 1;
            if (v40) {
              goto LABEL_115;
            }
            v127[2] = v130;
            id v131 = v122;
          }

          swift_bridgeObjectRelease();
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
    else
    {
    }
  }
  if (v94)
  {
    unint64_t v102 = __clz(__rbit64(v94));
    v94 &= v94 - 1;
    unint64_t v103 = v102 | (v92 << 6);
    goto LABEL_80;
  }
  ++v92;
  if (__OFADD__(v101, 1)) {
    goto LABEL_113;
  }
  if (v92 >= v100) {
    goto LABEL_104;
  }
  unint64_t v106 = *(void *)(v90 + 8 * v92);
  if (v106)
  {
LABEL_79:
    unint64_t v94 = (v106 - 1) & v106;
    unint64_t v103 = __clz(__rbit64(v106)) + (v92 << 6);
LABEL_80:
    id v105 = *(id *)(*(void *)(v91 + 48) + 8 * v103);
    if (!v105) {
      goto LABEL_104;
    }
    goto LABEL_81;
  }
  int64_t v107 = v101 + 2;
  if (v101 + 2 >= v100) {
    goto LABEL_104;
  }
  unint64_t v106 = *(void *)(v90 + 8 * v107);
  if (v106) {
    goto LABEL_78;
  }
  int64_t v107 = v101 + 3;
  if (v101 + 3 >= v100) {
    goto LABEL_104;
  }
  unint64_t v106 = *(void *)(v90 + 8 * v107);
  if (v106)
  {
LABEL_78:
    int64_t v92 = v107;
    goto LABEL_79;
  }
  int64_t v92 = v101 + 4;
  if (v101 + 4 >= v100) {
    goto LABEL_104;
  }
  unint64_t v106 = *(void *)(v90 + 8 * v92);
  if (v106) {
    goto LABEL_79;
  }
  int64_t v112 = v101 + 5;
  while (v100 != v112)
  {
    unint64_t v106 = *(void *)(v90 + 8 * v112++);
    if (v106)
    {
      int64_t v92 = v112 - 1;
      goto LABEL_79;
    }
  }
LABEL_104:
  sub_1D1668088();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_105:
  type metadata accessor for MADistribution();
  swift_allocObject();
  MADistribution.init(projections:weights:)(v147, v142);
}

uint64_t sub_1D1702DE4(uint64_t a1)
{
  void (*v167)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  id v173;
  id v174;
  void *v175;
  id v176;
  void *v177;
  void *v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  void *v183;
  uint64_t v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  id v189;
  id v190;
  void *v191;
  id v192;
  void *v193;
  void *v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  id v198;
  void *v199;
  uint64_t v200;
  id v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  id v205;
  char isUniquelyReferenced_nonNull_native;
  char v207;
  unint64_t v208;
  uint64_t v209;
  BOOL v210;
  uint64_t v211;
  char v212;
  unint64_t v213;
  char v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  id v220;
  uint64_t result;
  uint64_t v222;
  uint64_t v223;
  uint64_t (*v224)(uint64_t);
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int64_t v230;
  uint64_t v231;
  char v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  uint64_t i;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  id v255;
  id v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void v264[4];
  uint64_t v265;
  uint64_t v266;
  _OWORD v267[2];
  uint64_t v268;
  long long v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;

  v255 = *(id *)(v1 + 16);
  id v3 = objc_msgSend(v255, sel_concreteGraph);
  if (!v3) {
    goto LABEL_153;
  }
  uint64_t v4 = v3;
  unsigned int v5 = objc_msgSend(v3, sel_hasPendingRead);

  if (!v5) {
    goto LABEL_146;
  }
  uint64_t v6 = (*(uint64_t (**)(void))(*v257 + 264))();
  v223 = *(void *)(v6 + 16);
  if (!v223)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC868];
  }
  unint64_t v7 = 0;
  v225 = v6 + 32;
  v224 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 216);
  uint64_t v8 = MEMORY[0x1E4FBC868];
  v239 = a1;
  v222 = v6;
LABEL_6:
  if (v7 >= *(void *)(v6 + 16)) {
    goto LABEL_145;
  }
  v238 = v8;
  v226 = v7;
  sub_1D1711360(v225 + 40 * v7, (uint64_t)&v268, &qword_1EA6516D0);
  uint64_t v9 = v268;
  v266 = v268;
  sub_1D16607C4(&v269, v267);
  v237 = v9;
  uint64_t v10 = swift_retain();
  uint64_t v11 = v224(v10);
  if ((v11 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v11 = v270;
    v231 = v271;
    uint64_t v12 = v272;
    uint64_t v13 = v273;
    unint64_t v14 = v274;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = -1 << *(unsigned char *)(v11 + 32);
    v231 = v11 + 56;
    uint64_t v12 = ~v15;
    uint64_t v16 = -v15;
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    else {
      uint64_t v17 = -1;
    }
    unint64_t v14 = v17 & *(void *)(v11 + 56);
  }
  v227 = v226 + 1;
  v230 = (unint64_t)(v12 + 64) >> 6;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v11 < 0)
    {
      uint64_t v20 = sub_1D17BE7A0();
      if (!v20) {
        goto LABEL_5;
      }
      v259 = v20;
      sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v21 = (id)v263;
      swift_unknownObjectRelease();
      uint64_t v19 = v13;
      v241 = v14;
      if (!v21) {
        goto LABEL_5;
      }
    }
    else
    {
      if (v14)
      {
        v241 = (v14 - 1) & v14;
        unint64_t v18 = __clz(__rbit64(v14)) | (v13 << 6);
        uint64_t v19 = v13;
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_142;
        }
        if (v22 >= v230) {
          goto LABEL_5;
        }
        unint64_t v23 = *(void *)(v231 + 8 * v22);
        uint64_t v19 = v13 + 1;
        if (!v23)
        {
          uint64_t v19 = v13 + 2;
          if (v13 + 2 >= v230) {
            goto LABEL_5;
          }
          unint64_t v23 = *(void *)(v231 + 8 * v19);
          if (!v23)
          {
            uint64_t v19 = v13 + 3;
            if (v13 + 3 >= v230) {
              goto LABEL_5;
            }
            unint64_t v23 = *(void *)(v231 + 8 * v19);
            if (!v23)
            {
              uint64_t v19 = v13 + 4;
              if (v13 + 4 >= v230) {
                goto LABEL_5;
              }
              unint64_t v23 = *(void *)(v231 + 8 * v19);
              if (!v23)
              {
                uint64_t v24 = v13 + 5;
                while (v230 != v24)
                {
                  unint64_t v23 = *(void *)(v231 + 8 * v24++);
                  if (v23)
                  {
                    uint64_t v19 = v24 - 1;
                    goto LABEL_35;
                  }
                }
LABEL_5:
                swift_release();
                sub_1D1668088();
                sub_1D166817C((uint64_t)&v266, &qword_1EA6516D0);
                uint64_t v6 = v222;
                unint64_t v7 = v227;
                uint64_t v8 = v238;
                if (v227 != v223) {
                  goto LABEL_6;
                }
LABEL_137:
                swift_bridgeObjectRelease();
                return v238;
              }
            }
          }
        }
LABEL_35:
        v241 = (v23 - 1) & v23;
        unint64_t v18 = __clz(__rbit64(v23)) + (v19 << 6);
      }
      id v21 = *(id *)(*(void *)(v11 + 48) + 8 * v18);
      if (!v21) {
        goto LABEL_5;
      }
    }
    v240 = v19;
    v265 = MEMORY[0x1E4FBC870];
    v263 = v237;
    sub_1D1668120((uint64_t)v267, (uint64_t)v264);
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    v256 = v21;
    if (swift_dynamicCast())
    {
      v253 = (void *)v259;
      uint64_t v25 = v239;
      uint64_t v26 = (*(uint64_t (**)(id, void *, uint64_t, unint64_t, uint64_t, unint64_t, void))(*(void *)v239 + 352))(v21, v257, 0x656372756F73, 0xE600000000000000, 0x746567726174, 0xE600000000000000, 0);
      if (v26)
      {
        uint64_t v27 = *(void *)(v26 + 16);
        if (v27)
        {
          char v28 = 0;
          uint64_t v29 = 0;
          v245 = -v27;
          v249 = v26;
          uint64_t v30 = v26 + 40;
          v242 = v26 + 40;
          while (2)
          {
            v232 = v28;
            uint64_t v31 = v30 + 16 * v29++;
            while (1)
            {
              if ((unint64_t)(v29 - 1) >= *(void *)(v26 + 16))
              {
                __break(1u);
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
                goto LABEL_134;
              }
              swift_bridgeObjectRetain();
              id v32 = objc_msgSend(v21, sel_visualString);
              sub_1D17BDFF0();

              id v33 = objc_allocWithZone(NSString);
              swift_bridgeObjectRetain();
              unint64_t v34 = (void *)sub_1D17BDFE0();
              swift_bridgeObjectRelease();
              id v35 = objc_msgSend(v33, sel_initWithString_, v34);

              BOOL v36 = (void *)sub_1D17BDFE0();
              uint64_t v37 = (void *)sub_1D17BDFE0();
              id v38 = objc_msgSend(v35, sel_stringByReplacingOccurrencesOfString_withString_, v36, v37);

              sub_1D17BDFF0();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              id v39 = objc_allocWithZone(NSString);
              swift_bridgeObjectRetain();
              BOOL v40 = (void *)sub_1D17BDFE0();
              swift_bridgeObjectRelease();
              id v41 = objc_msgSend(v39, sel_initWithString_, v40);

              id v42 = (void *)sub_1D17BDFE0();
              id v43 = (void *)sub_1D17BDFE0();
              id v44 = objc_msgSend(v41, sel_stringByReplacingOccurrencesOfString_withString_, v42, v43);

              uint64_t v45 = sub_1D17BDFF0();
              uint64_t v47 = v46;
              swift_bridgeObjectRelease();

              id v48 = objc_msgSend(v255, sel_concreteGraph);
              if (!v48) {
                goto LABEL_147;
              }
              double v49 = v48;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D80);
              uint64_t inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = xmmword_1D17C91F0;
              *(void *)(inited + 32) = 0x746E656D67617266;
              *(void *)(inited + 40) = 0xE800000000000000;
              *(void *)(inited + 48) = v253;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA6515E0);
              uint64_t v51 = (void *)sub_1D17BEB10();
              id v52 = v253;
              swift_retain();
              uint64_t v53 = *(void *)(inited + 32);
              uint64_t v54 = *(void *)(inited + 40);
              uint64_t v55 = *(void *)(inited + 48);
              swift_bridgeObjectRetain();
              swift_unknownObjectRetain();
              unint64_t v56 = sub_1D165A868(v53, v54);
              if (v57) {
                goto LABEL_132;
              }
              v51[(v56 >> 6) + 8] |= 1 << v56;
              uint64_t v58 = (uint64_t *)(v51[6] + 16 * v56);
              *uint64_t v58 = v53;
              v58[1] = v54;
              *(void *)(v51[7] + 8 * v56) = v55;
              uint64_t v59 = v51[2];
              BOOL v60 = __OFADD__(v59, 1);
              uint64_t v61 = v59 + 1;
              if (v60) {
                goto LABEL_133;
              }
              v51[2] = v61;
              swift_release();
              swift_bridgeObjectRelease();
              type metadata accessor for MAQuerySlice();
              uint64_t v62 = swift_allocObject();
              *(_OWORD *)(v62 + 104) = xmmword_1D17CC410;
              *(void *)(v62 + 80) = v45;
              *(void *)(v62 + 88) = v47;
              *(void *)(v62 + 96) = v51;
              id v63 = objc_msgSend(v49, sel_graphReference);
              *(_OWORD *)(v62 + 48) = 0u;
              *(_OWORD *)(v62 + 64) = 0u;
              *(void *)(v62 + 16) = v63;
              *(void *)(v62 + 24) = 0;
              uint64_t v64 = MEMORY[0x1E4FBC868];
              *(void *)(v62 + 32) = 0x3FF0000000000000;
              *(void *)(v62 + 40) = v64;

              *(void *)(v62 + 40) = v257[5];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              LOBYTE(v62) = sub_1D1672894(&v263, v62);
              swift_release();
              if (v62) {
                break;
              }
              ++v29;
              v31 += 16;
              uint64_t v26 = v249;
              id v21 = v256;
              if (v245 + v29 == 1)
              {
                char v28 = v232;
                goto LABEL_65;
              }
            }
            char v28 = 1;
            uint64_t v26 = v249;
            id v21 = v256;
            uint64_t v30 = v242;
            if (v245 + v29) {
              continue;
            }
            break;
          }
        }
        else
        {
          char v28 = 0;
        }
LABEL_65:
        swift_bridgeObjectRelease();
        uint64_t v25 = v239;
      }
      else
      {
        char v28 = 0;
      }
      uint64_t v90 = (*(uint64_t (**)(void *, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, void))(*v257 + 352))(v253, v25, 0x656372756F73, 0xE600000000000000, 0x746567726174, 0xE600000000000000, 0);
      if (v90)
      {
        uint64_t v91 = v90;
        uint64_t v92 = *(void *)(v90 + 16);
        if (v92)
        {
          uint64_t v93 = 0;
          v244 = -v92;
          v247 = v90;
          uint64_t v94 = v90 + 40;
          v229 = v90 + 40;
LABEL_69:
          v234 = v28;
          uint64_t v95 = v94 + 16 * v93;
          uint64_t v96 = v93 + 1;
          while ((unint64_t)(v96 - 1) < *(void *)(v91 + 16))
          {
            v251 = v96;
            swift_bridgeObjectRetain();
            id v97 = objc_msgSend(v21, sel_visualString);
            sub_1D17BDFF0();

            id v98 = objc_allocWithZone(NSString);
            swift_bridgeObjectRetain();
            uint64_t v99 = (void *)sub_1D17BDFE0();
            swift_bridgeObjectRelease();
            id v100 = objc_msgSend(v98, sel_initWithString_, v99);

            int64_t v101 = (void *)sub_1D17BDFE0();
            unint64_t v102 = (void *)sub_1D17BDFE0();
            id v103 = objc_msgSend(v100, sel_stringByReplacingOccurrencesOfString_withString_, v101, v102);

            sub_1D17BDFF0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            id v104 = objc_allocWithZone(NSString);
            swift_bridgeObjectRetain();
            id v105 = (void *)sub_1D17BDFE0();
            swift_bridgeObjectRelease();
            id v106 = objc_msgSend(v104, sel_initWithString_, v105);

            int64_t v107 = (void *)sub_1D17BDFE0();
            id v108 = (void *)sub_1D17BDFE0();
            id v109 = objc_msgSend(v106, sel_stringByReplacingOccurrencesOfString_withString_, v107, v108);

            uint64_t v110 = sub_1D17BDFF0();
            uint64_t v112 = v111;
            swift_bridgeObjectRelease();

            id v113 = objc_msgSend(v255, sel_concreteGraph);
            if (!v113) {
              goto LABEL_148;
            }
            float v114 = v113;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D80);
            uint64_t v115 = swift_initStackObject();
            *(_OWORD *)(v115 + 16) = xmmword_1D17C91F0;
            *(void *)(v115 + 32) = 0x746E656D67617266;
            *(void *)(v115 + 40) = 0xE800000000000000;
            *(void *)(v115 + 48) = v253;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA6515E0);
            char v116 = (void *)sub_1D17BEB10();
            id v117 = v253;
            swift_retain();
            uint64_t v119 = *(void *)(v115 + 32);
            uint64_t v118 = *(void *)(v115 + 40);
            uint64_t v120 = *(void *)(v115 + 48);
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            unint64_t v121 = sub_1D165A868(v119, v118);
            if (v122) {
              goto LABEL_135;
            }
            v116[(v121 >> 6) + 8] |= 1 << v121;
            unint64_t v123 = (uint64_t *)(v116[6] + 16 * v121);
            *unint64_t v123 = v119;
            v123[1] = v118;
            *(void *)(v116[7] + 8 * v121) = v120;
            uint64_t v124 = v116[2];
            BOOL v60 = __OFADD__(v124, 1);
            uint64_t v125 = v124 + 1;
            if (v60) {
              goto LABEL_136;
            }
            v116[2] = v125;
            swift_release();
            swift_bridgeObjectRelease();
            type metadata accessor for MAQuerySlice();
            uint64_t v126 = swift_allocObject();
            *(_OWORD *)(v126 + 104) = xmmword_1D17CC410;
            *(void *)(v126 + 80) = v110;
            *(void *)(v126 + 88) = v112;
            *(void *)(v126 + 96) = v116;
            id v127 = objc_msgSend(v114, sel_graphReference);
            *(_OWORD *)(v126 + 48) = 0u;
            *(_OWORD *)(v126 + 64) = 0u;
            *(void *)(v126 + 16) = v127;
            *(void *)(v126 + 24) = 0;
            uint64_t v128 = MEMORY[0x1E4FBC868];
            *(void *)(v126 + 32) = 0x3FF0000000000000;
            *(void *)(v126 + 40) = v128;

            *(void *)(v126 + 40) = v257[5];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            LOBYTE(v126) = sub_1D1672894(&v263, v126);
            swift_release();
            if (v126)
            {
              char v28 = 1;
              uint64_t v91 = v247;
              uint64_t v93 = v251;
              id v21 = v256;
              uint64_t v94 = v229;
              if (v244 + v251) {
                goto LABEL_69;
              }

              goto LABEL_106;
            }
            uint64_t v91 = v247;
            uint64_t v96 = v251 + 1;
            v95 += 16;
            id v21 = v256;
            if (v244 + v251 + 1 == 1)
            {
              swift_bridgeObjectRelease();
              if (v234) {
                goto LABEL_80;
              }
              goto LABEL_82;
            }
          }
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        swift_bridgeObjectRelease();
        if (v28)
        {
LABEL_80:

          goto LABEL_115;
        }
      }
      else if (v28)
      {
        goto LABEL_80;
      }
LABEL_82:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA651720);
      uint64_t v129 = swift_initStackObject();
      *(_OWORD *)(v129 + 16) = xmmword_1D17C91F0;
      v263 = 40;
      v264[0] = 0xE100000000000000;
      sub_1D17BE030();
      sub_1D17BE030();
      sub_1D17BE030();
      sub_1D17BE030();
      uint64_t v130 = v264[0];
      *(void *)(v129 + 32) = v263;
      *(void *)(v129 + 40) = v130;
      swift_bridgeObjectRetain();
      id v131 = objc_msgSend(v21, sel_visualString);
      sub_1D17BDFF0();

      id v132 = objc_allocWithZone(NSString);
      swift_bridgeObjectRetain();
      unint64_t v133 = (void *)sub_1D17BDFE0();
      swift_bridgeObjectRelease();
      id v134 = objc_msgSend(v132, sel_initWithString_, v133);

      v135 = (void *)sub_1D17BDFE0();
      unint64_t v136 = (void *)sub_1D17BDFE0();
      id v137 = objc_msgSend(v134, sel_stringByReplacingOccurrencesOfString_withString_, v135, v136);

      sub_1D17BDFF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      id v138 = objc_allocWithZone(NSString);
      swift_bridgeObjectRetain();
      uint64_t v139 = (void *)sub_1D17BDFE0();
      swift_bridgeObjectRelease();
      id v140 = objc_msgSend(v138, sel_initWithString_, v139);

      uint64_t v141 = (void *)sub_1D17BDFE0();
      uint64_t v142 = (void *)sub_1D17BDFE0();
      id v143 = objc_msgSend(v140, sel_stringByReplacingOccurrencesOfString_withString_, v141, v142);

      uint64_t v144 = sub_1D17BDFF0();
      uint64_t v146 = v145;
      swift_bridgeObjectRelease();

      id v147 = objc_msgSend(v255, sel_concreteGraph);
      if (!v147) {
        goto LABEL_151;
      }
      v148 = v147;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D80);
      uint64_t v149 = swift_initStackObject();
      *(_OWORD *)(v149 + 16) = xmmword_1D17C91F0;
      *(void *)(v149 + 32) = 0x746E656D67617266;
      *(void *)(v149 + 40) = 0xE800000000000000;
      *(void *)(v149 + 48) = v253;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA6515E0);
      uint64_t v150 = (void *)sub_1D17BEB10();
      id v151 = v253;
      swift_retain();
      uint64_t v152 = *(void *)(v149 + 32);
      uint64_t v153 = *(void *)(v149 + 40);
      uint64_t v154 = *(void *)(v149 + 48);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      unint64_t v155 = sub_1D165A868(v152, v153);
      if (v156) {
        goto LABEL_143;
      }
      v150[(v155 >> 6) + 8] |= 1 << v155;
      v157 = (uint64_t *)(v150[6] + 16 * v155);
      uint64_t *v157 = v152;
      v157[1] = v153;
      *(void *)(v150[7] + 8 * v155) = v154;
      uint64_t v158 = v150[2];
      BOOL v60 = __OFADD__(v158, 1);
      uint64_t v159 = v158 + 1;
      if (v60) {
        goto LABEL_144;
      }
      v150[2] = v159;
      swift_release();
      swift_bridgeObjectRelease();
      type metadata accessor for MAQuerySlice();
      uint64_t v160 = swift_allocObject();
      *(_OWORD *)(v160 + 104) = xmmword_1D17CC410;
      *(void *)(v160 + 80) = v144;
      *(void *)(v160 + 88) = v146;
      *(void *)(v160 + 96) = v150;
      id v161 = objc_msgSend(v148, sel_graphReference);
      *(_OWORD *)(v160 + 48) = 0u;
      *(_OWORD *)(v160 + 64) = 0u;
      *(void *)(v160 + 16) = v161;
      *(void *)(v160 + 24) = 0;
      uint64_t v162 = MEMORY[0x1E4FBC868];
      *(void *)(v160 + 32) = 0x3FF0000000000000;
      *(void *)(v160 + 40) = v162;

      *(void *)(v160 + 40) = v257[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1D1672894(&v263, v160);
      swift_release();
      swift_bridgeObjectRelease();

      goto LABEL_114;
    }
    v263 = v237;
    sub_1D1668120((uint64_t)v267, (uint64_t)v264);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D70);
    uint64_t v65 = v239;
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_115;
    }
    v254 = v259;
    unint64_t v66 = v260;
    uint64_t v67 = v261;
    uint64_t v68 = v262;
    uint64_t v69 = (*(uint64_t (**)(id, void *, uint64_t, unint64_t, uint64_t, uint64_t, void))(*(void *)v239 + 352))(v21, v257, 0x656372756F73, 0xE600000000000000, v261, v262, 0);
    if (v69)
    {
      uint64_t v70 = v69;
      v233 = v67;
      v243 = v68;
      unint64_t v71 = v66;
      uint64_t v72 = *(void *)(v69 + 16);
      if (v72)
      {
        v246 = 0;
        uint64_t v73 = 0;
        v250 = -v72;
        uint64_t v74 = v69 + 40;
        v228 = v69 + 40;
        while (2)
        {
          uint64_t v75 = v74 + 16 * v73++;
          while (1)
          {
            if ((unint64_t)(v73 - 1) >= *(void *)(v70 + 16))
            {
              __break(1u);
              goto LABEL_139;
            }
            swift_bridgeObjectRetain();
            id v76 = objc_msgSend(v21, sel_visualString);
            sub_1D17BDFF0();

            id v77 = objc_allocWithZone(NSString);
            swift_bridgeObjectRetain();
            double v78 = (void *)sub_1D17BDFE0();
            swift_bridgeObjectRelease();
            id v79 = objc_msgSend(v77, sel_initWithString_, v78);

            uint64_t v80 = (void *)sub_1D17BDFE0();
            uint64_t v81 = (void *)sub_1D17BDFE0();
            id v82 = objc_msgSend(v79, sel_stringByReplacingOccurrencesOfString_withString_, v80, v81);

            sub_1D17BDFF0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            v263 = v254;
            v264[0] = v71;
            swift_bridgeObjectRetain();
            sub_1D17BE030();
            sub_1D17BE030();
            swift_bridgeObjectRelease();
            uint64_t v83 = v263;
            uint64_t v84 = v264[0];
            id v85 = objc_msgSend(v255, sel_concreteGraph);
            if (!v85) {
              goto LABEL_149;
            }
            uint64_t v86 = v85;
            type metadata accessor for MAQuerySlice();
            uint64_t v87 = swift_allocObject();
            *(_OWORD *)(v87 + 104) = xmmword_1D17CC410;
            *(void *)(v87 + 80) = v83;
            *(void *)(v87 + 88) = v84;
            *(void *)(v87 + 96) = MEMORY[0x1E4FBC868];
            id v88 = objc_msgSend(v86, sel_graphReference);

            *(_OWORD *)(v87 + 48) = 0u;
            *(_OWORD *)(v87 + 64) = 0u;
            *(void *)(v87 + 16) = v88;
            *(void *)(v87 + 24) = 0;
            uint64_t v89 = v257[5];
            *(void *)(v87 + 32) = 0x3FF0000000000000;
            *(void *)(v87 + 40) = v89;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            LOBYTE(v86) = sub_1D1672894(&v263, v87);
            swift_release();
            if (v86) {
              break;
            }
            ++v73;
            v75 += 16;
            id v21 = v256;
            if (v250 + v73 == 1) {
              goto LABEL_90;
            }
          }
          v246 = 1;
          id v21 = v256;
          uint64_t v74 = v228;
          if (v250 + v73) {
            continue;
          }
          break;
        }
      }
      else
      {
        v246 = 0;
      }
LABEL_90:
      swift_bridgeObjectRelease();
      uint64_t v65 = v239;
      unint64_t v66 = v71;
      uint64_t v68 = v243;
      char v163 = v246;
      uint64_t v67 = v233;
    }
    else
    {
      char v163 = 0;
    }
    uint64_t v164 = v257[5];
    if (!*(void *)(v164 + 16))
    {
LABEL_104:
      if ((v163 & 1) == 0) {
        goto LABEL_112;
      }
      goto LABEL_105;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v165 = sub_1D165AA20(v65);
    if ((v166 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      if ((v163 & 1) == 0) {
        goto LABEL_112;
      }
      goto LABEL_105;
    }
    v167 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(*(void *)(v164 + 56) + 16 * v165);
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    v263 = v67;
    v264[0] = v68;
    v259 = 0x746567726174;
    v260 = 0xE600000000000000;
    v167(&v258, &v263, &v259);
    swift_release();
    v168 = v258;
    if (!v258) {
      goto LABEL_104;
    }
    v169 = *(void *)(v258 + 16);
    if (v169) {
      break;
    }
    swift_bridgeObjectRelease();
    if ((v163 & 1) == 0)
    {
LABEL_112:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA651720);
      v187 = swift_initStackObject();
      *(_OWORD *)(v187 + 16) = xmmword_1D17C91F0;
      v263 = 40;
      v264[0] = 0xE100000000000000;
      sub_1D17BE030();
      sub_1D17BE030();
      sub_1D17BE030();
      sub_1D17BE030();
      v188 = v264[0];
      *(void *)(v187 + 32) = v263;
      *(void *)(v187 + 40) = v188;
      swift_bridgeObjectRetain();
      v189 = objc_msgSend(v21, sel_visualString);
      sub_1D17BDFF0();

      v190 = objc_allocWithZone(NSString);
      swift_bridgeObjectRetain();
      v191 = (void *)sub_1D17BDFE0();
      swift_bridgeObjectRelease();
      v192 = objc_msgSend(v190, sel_initWithString_, v191);

      v193 = (void *)sub_1D17BDFE0();
      v194 = (void *)sub_1D17BDFE0();
      v195 = objc_msgSend(v192, sel_stringByReplacingOccurrencesOfString_withString_, v193, v194);

      sub_1D17BDFF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v263 = v254;
      v264[0] = v66;
      swift_bridgeObjectRetain();
      sub_1D17BE030();
      sub_1D17BE030();
      swift_bridgeObjectRelease();
      v196 = v263;
      v197 = v264[0];
      v198 = objc_msgSend(v255, sel_concreteGraph);
      if (!v198) {
        goto LABEL_152;
      }
      v199 = v198;
      type metadata accessor for MAQuerySlice();
      v200 = swift_allocObject();
      *(_OWORD *)(v200 + 104) = xmmword_1D17CC410;
      *(void *)(v200 + 80) = v196;
      *(void *)(v200 + 88) = v197;
      *(void *)(v200 + 96) = MEMORY[0x1E4FBC868];
      v201 = objc_msgSend(v199, sel_graphReference);

      *(_OWORD *)(v200 + 48) = 0u;
      *(_OWORD *)(v200 + 64) = 0u;
      *(void *)(v200 + 16) = v201;
      *(void *)(v200 + 24) = 0;
      v202 = v257[5];
      *(void *)(v200 + 32) = 0x3FF0000000000000;
      *(void *)(v200 + 40) = v202;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1D1672894(&v263, v200);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_114:
      id v21 = v256;
      goto LABEL_115;
    }
LABEL_105:
    swift_bridgeObjectRelease();
LABEL_106:
    swift_bridgeObjectRelease();
LABEL_115:
    v203 = v265;
    if ((v265 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v204 = sub_1D17BE760();
      swift_bridgeObjectRelease();
      if (v204 < 1) {
        goto LABEL_14;
      }
    }
    else if (*(uint64_t *)(v265 + 16) < 1)
    {
LABEL_14:

      goto LABEL_15;
    }
    v205 = v21;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v263 = v238;
    v208 = sub_1D165A9D0((uint64_t)v205);
    v209 = *(void *)(v238 + 16);
    v210 = (v207 & 1) == 0;
    v211 = v209 + v210;
    if (__OFADD__(v209, v210)) {
      goto LABEL_140;
    }
    v212 = v207;
    if (*(void *)(v238 + 24) >= v211)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1D16A8654();
      }
    }
    else
    {
      sub_1D16A58A0(v211, isUniquelyReferenced_nonNull_native);
      v213 = sub_1D165A9D0((uint64_t)v205);
      if ((v212 & 1) != (v214 & 1)) {
        goto LABEL_154;
      }
      v208 = v213;
    }
    v215 = (void *)v263;
    v238 = v263;
    if (v212)
    {
      v216 = *(void *)(v263 + 56);
      swift_bridgeObjectRelease();
      *(void *)(v216 + 8 * v208) = v203;
    }
    else
    {
      *(void *)(v263 + 8 * (v208 >> 6) + 64) |= 1 << v208;
      v217 = 8 * v208;
      *(void *)(v215[6] + v217) = v205;
      *(void *)(v215[7] + v217) = v203;
      v218 = v215[2];
      BOOL v60 = __OFADD__(v218, 1);
      v219 = v218 + 1;
      if (v60) {
        goto LABEL_141;
      }
      v215[2] = v219;
      v220 = v205;
    }

LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v13 = v240;
    unint64_t v14 = v241;
  }
  v248 = v163;
  v170 = 0;
  v252 = -v169;
  v171 = v258 + 40;
  v235 = v258 + 40;
LABEL_96:
  v172 = v171 + 16 * v170++;
  while ((unint64_t)(v170 - 1) < *(void *)(v168 + 16))
  {
    swift_bridgeObjectRetain();
    v173 = objc_msgSend(v21, sel_visualString);
    sub_1D17BDFF0();

    v174 = objc_allocWithZone(NSString);
    swift_bridgeObjectRetain();
    v175 = (void *)sub_1D17BDFE0();
    swift_bridgeObjectRelease();
    v176 = objc_msgSend(v174, sel_initWithString_, v175);

    v177 = (void *)sub_1D17BDFE0();
    v178 = (void *)sub_1D17BDFE0();
    v179 = objc_msgSend(v176, sel_stringByReplacingOccurrencesOfString_withString_, v177, v178);

    sub_1D17BDFF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v263 = v254;
    v264[0] = v66;
    swift_bridgeObjectRetain();
    sub_1D17BE030();
    sub_1D17BE030();
    swift_bridgeObjectRelease();
    v180 = v263;
    v181 = v264[0];
    v182 = objc_msgSend(v255, sel_concreteGraph);
    if (!v182) {
      goto LABEL_150;
    }
    v183 = v182;
    type metadata accessor for MAQuerySlice();
    v184 = swift_allocObject();
    *(_OWORD *)(v184 + 104) = xmmword_1D17CC410;
    *(void *)(v184 + 80) = v180;
    *(void *)(v184 + 88) = v181;
    *(void *)(v184 + 96) = MEMORY[0x1E4FBC868];
    v185 = objc_msgSend(v183, sel_graphReference);

    *(_OWORD *)(v184 + 48) = 0u;
    *(_OWORD *)(v184 + 64) = 0u;
    *(void *)(v184 + 16) = v185;
    *(void *)(v184 + 24) = 0;
    v186 = v257[5];
    *(void *)(v184 + 32) = 0x3FF0000000000000;
    *(void *)(v184 + 40) = v186;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    LOBYTE(v183) = sub_1D1672894(&v263, v184);
    swift_release();
    if (v183)
    {
      v248 = 1;
      id v21 = v256;
      v171 = v235;
      if (v252 + v170) {
        goto LABEL_96;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_106;
    }
    ++v170;
    v172 += 16;
    id v21 = v256;
    if (v252 + v170 == 1)
    {
      swift_bridgeObjectRelease();
      if (v248) {
        goto LABEL_105;
      }
      goto LABEL_112;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

uint64_t MAGraph.slice(visualFormat:visualElements:weight:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  type metadata accessor for MAQuerySlice();
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 104) = xmmword_1D17CC410;
  *(void *)(v9 + 80) = a1;
  *(void *)(v9 + 88) = a2;
  *(void *)(v9 + 96) = a3;
  id v10 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v11 = objc_msgSend(v10, sel_graphReference);
  *(void *)(v9 + 40) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(void *)(v9 + 16) = v11;
  *(void *)(v9 + 24) = 0;
  *(double *)(v9 + 32) = a4;

  return v9;
}

void *sub_1D1704B30(void (*a1)(void))
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 216))();
  uint64_t v4 = sub_1D1666CF8(v3);
  swift_bridgeObjectRelease();
  if (v4 < 0 || (v4 & 0x4000000000000000) != 0) {
    goto LABEL_15;
  }
  unint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = (void *)sub_1D1665914(v5, 0.0);
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t result = (void *)swift_retain();
  unint64_t v15 = v5;
  if (v7)
  {
    while (v7 >= 1)
    {
      unint64_t v9 = 0;
      while (1)
      {
        id v10 = (v4 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x1D25F9260](v9, v4)
            : *(id *)(v4 + 8 * v9 + 32);
        id v11 = v10;
        a1();
        uint64_t v13 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = sub_1D1667604(v6);
        }
        if (v9 >= v6[2]) {
          break;
        }
        v6[v9++ + 4] = v13;

        if (v7 == v9) {
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_15:
      swift_bridgeObjectRetain();
      unint64_t v14 = sub_1D17BEAD0();
      swift_release();
      uint64_t v6 = (void *)sub_1D1665914(v14, 0.0);
      swift_retain();
      uint64_t result = (void *)sub_1D17BEAD0();
      uint64_t v7 = (uint64_t)result;
      unint64_t v15 = v14;
      if (!result) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_release();
    type metadata accessor for MAVectorRepresentation();
    uint64_t result = (void *)swift_allocObject();
    result[2] = 1;
    result[3] = v15;
    result[4] = v6;
    result[5] = v4;
  }
  return result;
}

void sub_1D1704D04(uint64_t (*a1)(id))
{
  uint64_t v28 = MEMORY[0x1E4FBC870];
  uint64_t v3 = (*((uint64_t (**)(void))*v1 + 27))();
  uint64_t v4 = v3;
  if ((v3 & 0xC000000000000001) != 0)
  {
    sub_1D17BE710();
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v4 = v29;
    uint64_t v26 = v30;
    uint64_t v5 = v31;
    int64_t v6 = v32;
    unint64_t v7 = v33;
  }
  else
  {
    int64_t v6 = 0;
    uint64_t v8 = -1 << *(unsigned char *)(v3 + 32);
    uint64_t v26 = v3 + 56;
    uint64_t v9 = ~v8;
    uint64_t v10 = -v8;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v7 = v11 & *(void *)(v3 + 56);
    uint64_t v5 = v9;
  }
  int64_t v25 = (unint64_t)(v5 + 64) >> 6;
  while (v4 < 0)
  {
    if (!sub_1D17BE7A0()) {
      goto LABEL_34;
    }
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v15 = v27[0];
    swift_unknownObjectRelease();
    int64_t v14 = v6;
    uint64_t v12 = v7;
    if (!v15) {
      goto LABEL_34;
    }
LABEL_25:
    if (a1(v15))
    {
      sub_1D1671FA0(v27, v15);
    }
    else
    {
    }
    int64_t v6 = v14;
    unint64_t v7 = v12;
  }
  if (v7)
  {
    uint64_t v12 = (v7 - 1) & v7;
    unint64_t v13 = __clz(__rbit64(v7)) | (v6 << 6);
    int64_t v14 = v6;
    goto LABEL_24;
  }
  int64_t v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v25) {
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v26 + 8 * v14);
  if (v16)
  {
LABEL_23:
    uint64_t v12 = (v16 - 1) & v16;
    unint64_t v13 = __clz(__rbit64(v16)) + (v14 << 6);
LABEL_24:
    id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v13);
    if (!v15) {
      goto LABEL_34;
    }
    goto LABEL_25;
  }
  int64_t v17 = v6 + 2;
  if (v6 + 2 >= v25) {
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v26 + 8 * v17);
  if (v16) {
    goto LABEL_22;
  }
  int64_t v17 = v6 + 3;
  if (v6 + 3 >= v25) {
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v26 + 8 * v17);
  if (v16)
  {
LABEL_22:
    int64_t v14 = v17;
    goto LABEL_23;
  }
  int64_t v14 = v6 + 4;
  if (v6 + 4 >= v25) {
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v26 + 8 * v14);
  if (v16) {
    goto LABEL_23;
  }
  int64_t v18 = v6 + 5;
  while (v25 != v18)
  {
    unint64_t v16 = *(void *)(v26 + 8 * v18++);
    if (v16)
    {
      int64_t v14 = v18 - 1;
      goto LABEL_23;
    }
  }
LABEL_34:
  sub_1D1668088();
  id v19 = objc_msgSend(v1[2], sel_concreteGraph);
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = v28;
    id v22 = objc_msgSend(v19, sel_graphReference);
    type metadata accessor for MASlice();
    uint64_t v23 = swift_allocObject();

    uint64_t v24 = MEMORY[0x1E4FBC868];
    *(_OWORD *)(v23 + 48) = 0u;
    *(_OWORD *)(v23 + 64) = 0u;
    *(void *)(v23 + 16) = v22;
    *(void *)(v23 + 24) = v21;
    *(void *)(v23 + 32) = 0x3FF0000000000000;
    *(void *)(v23 + 40) = v24;
    return;
  }
LABEL_37:
  __break(1u);
}

uint64_t MASlice.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D165B3A4(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MASlice.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D165B3A4(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 80, 7);
}

uint64_t sub_1D1705130()
{
  sub_1D17BED20();
  (*(void (**)(unsigned char *))(*(void *)v0 + 272))(v2);
  return sub_1D17BED80();
}

uint64_t sub_1D1705198()
{
  uint64_t v1 = *v0;
  sub_1D17BED20();
  (*(void (**)(unsigned char *))(*(void *)v1 + 272))(v3);
  return sub_1D17BED80();
}

uint64_t sub_1D1705204()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 272))();
}

uint64_t sub_1D1705250()
{
  sub_1D17BED20();
  (*(void (**)(unsigned char *))(**(void **)v0 + 272))(v2);
  return sub_1D17BED80();
}

uint64_t sub_1D17052B8(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 280))(*a2) & 1;
}

uint64_t == infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 280))(a2) & 1;
}

void MASlice.description.getter()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(*(id *)(v0 + 16), sel_concreteGraph);
  if (!v2) {
    goto LABEL_30;
  }
  uint64_t v3 = v2;
  unsigned int v4 = objc_msgSend(v2, sel_hasPendingRead);

  if (!v4) {
    goto LABEL_29;
  }
  *(void *)&v31[0] = 0;
  *((void *)&v31[0] + 1) = 0xE000000000000000;
  sub_1D17BE850();
  uint64_t v5 = sub_1D17BE030();
  int64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 256);
  uint64_t v7 = *(void *)(v6(v5) + 16);
  swift_bridgeObjectRelease();
  *(void *)&v29[0] = v7;
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_1D17BE030();
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 216))(v8);
  if ((v9 & 0xC000000000000001) != 0) {
    uint64_t v10 = sub_1D17BE760();
  }
  else {
    uint64_t v10 = *(void *)(v9 + 16);
  }
  swift_bridgeObjectRelease();
  *(void *)&v29[0] = v10;
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_1D17BE030();
  long long v33 = v31[0];
  uint64_t v12 = v6(v11);
  uint64_t v23 = *(void *)(v12 + 16);
  if (!v23)
  {
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v13 = 0;
  uint64_t v22 = v12 + 32;
  uint64_t v21 = v12;
  while (v13 < *(void *)(v12 + 16))
  {
    sub_1D1711360(v22 + 40 * v13, (uint64_t)v31, &qword_1EA652D90);
    unint64_t v14 = v32;
    sub_1D16607C4(v31, v29);
    unint64_t v30 = v14;
    sub_1D1668120((uint64_t)v29, (uint64_t)&v26);
    unint64_t v28 = v14;
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    swift_bridgeObjectRetain();
    if (swift_dynamicCast())
    {
      uint64_t v26 = 2314;
      unint64_t v27 = 0xE200000000000000;
      id v15 = objc_msgSend(v25, sel_visualString);
      sub_1D17BDFF0();

      sub_1D17BE030();
      swift_bridgeObjectRelease();
      sub_1D17BE030();
    }
    else
    {
      sub_1D1668120((uint64_t)v29, (uint64_t)&v26);
      unint64_t v28 = v14;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D70);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_15;
      }
      uint64_t v26 = 2314;
      unint64_t v27 = 0xE200000000000000;
      sub_1D17BE030();
      sub_1D17BE030();
      sub_1D17BE030();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1D17BE030();
      sub_1D17BE030();
    }
    swift_bridgeObjectRelease();
LABEL_15:
    unint64_t v24 = v13;
    sub_1D1668120((uint64_t)v29, (uint64_t)&v26);
    unint64_t v28 = v14;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
      if (!v16) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v16) {
        goto LABEL_8;
      }
    }
    if (v16 < 1) {
      goto LABEL_28;
    }
    uint64_t v17 = 0;
    do
    {
      if ((v14 & 0xC000000000000001) != 0) {
        id v18 = (id)MEMORY[0x1D25F9260](v17, v14);
      }
      else {
        id v18 = *(id *)(v14 + 8 * v17 + 32);
      }
      id v19 = v18;
      ++v17;
      uint64_t v26 = 592138;
      unint64_t v27 = 0xE300000000000000;
      id v20 = objc_msgSend(v18, sel_visualString);
      sub_1D17BDFF0();

      sub_1D17BE030();
      swift_bridgeObjectRelease();
      sub_1D17BE030();

      swift_bridgeObjectRelease();
    }
    while (v16 != v17);
LABEL_8:
    ++v13;
    swift_bridgeObjectRelease();
    sub_1D166817C((uint64_t)v29, &qword_1EA652D90);
    uint64_t v12 = v21;
    if (v24 + 1 == v23)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

void MASlice.shortDescription.getter()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(*(id *)(v0 + 16), sel_concreteGraph);
  if (!v2) {
    goto LABEL_17;
  }
  uint64_t v3 = v2;
  unsigned int v4 = objc_msgSend(v2, sel_hasPendingRead);

  if (!v4)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return;
  }
  *(void *)&v23[0] = 0;
  *((void *)&v23[0] + 1) = 0xE000000000000000;
  sub_1D17BE850();
  uint64_t v5 = sub_1D17BE030();
  int64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 256);
  uint64_t v7 = *(void *)(v6(v5) + 16);
  swift_bridgeObjectRelease();
  *(void *)&v21[0] = v7;
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_1D17BE030();
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 216))(v8);
  if ((v9 & 0xC000000000000001) != 0) {
    uint64_t v10 = sub_1D17BE760();
  }
  else {
    uint64_t v10 = *(void *)(v9 + 16);
  }
  swift_bridgeObjectRelease();
  *(void *)&v21[0] = v10;
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_1D17BE030();
  long long v25 = v23[0];
  uint64_t v12 = v6(v11);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    for (uint64_t i = v12 + 32; ; i += 40)
    {
      sub_1D1711360(i, (uint64_t)v23, &qword_1EA652D90);
      uint64_t v16 = v24;
      sub_1D16607C4(v23, v21);
      uint64_t v22 = v16;
      sub_1D1668120((uint64_t)v21, (uint64_t)&v18);
      uint64_t v20 = v16;
      sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
      swift_bridgeObjectRetain();
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = 2314;
        unint64_t v19 = 0xE200000000000000;
        id v15 = objc_msgSend(v17, sel_visualString);
        sub_1D17BDFF0();

        sub_1D17BE030();
        swift_bridgeObjectRelease();
        sub_1D17BE030();
      }
      else
      {
        sub_1D1668120((uint64_t)v21, (uint64_t)&v18);
        swift_bridgeObjectRelease();
        uint64_t v20 = v16;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D70);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_10;
        }
        uint64_t v18 = 2314;
        unint64_t v19 = 0xE200000000000000;
        sub_1D17BE030();
        sub_1D17BE030();
        sub_1D17BE030();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1D17BE030();
        sub_1D17BE030();
      }
      swift_bridgeObjectRelease();
LABEL_10:
      sub_1D166817C((uint64_t)v21, &qword_1EA652D90);
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
  swift_bridgeObjectRelease();
}

void sub_1D1705CCC()
{
}

uint64_t MAGraph.slice(domain:weight:)(__int16 a1, double a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D98);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1D17C91F0;
  *(_WORD *)(v5 + 32) = a1;
  type metadata accessor for MADomainsSlice();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 80) = v5;
  id v7 = v2;
  id v8 = objc_msgSend(v7, sel_graphReference);

  *(void *)(v6 + 40) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(void *)(v6 + 16) = v8;
  *(void *)(v6 + 24) = 0;
  *(double *)(v6 + 32) = a2;
  return v6;
}

uint64_t MAGraph.slice(domains:weight:)(uint64_t a1, double a2)
{
  return sub_1D1705DDC(a1, (void (*)(void))type metadata accessor for MADomainsSlice, a2);
}

uint64_t MAGraph.slice(slices:weight:)(uint64_t a1, double a2)
{
  return sub_1D1705DDC(a1, (void (*)(void))type metadata accessor for MASlices, a2);
}

uint64_t sub_1D1705DDC(uint64_t a1, void (*a2)(void), double a3)
{
  a2();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 80) = a1;
  id v7 = v3;
  swift_bridgeObjectRetain();
  id v8 = objc_msgSend(v7, sel_graphReference);

  *(void *)(v6 + 40) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(void *)(v6 + 16) = v8;
  *(void *)(v6 + 24) = 0;
  *(double *)(v6 + 32) = a3;
  return v6;
}

uint64_t MAGraph.slice(label:weight:)(uint64_t a1, uint64_t a2, double a3)
{
  type metadata accessor for MAFetchSlice();
  uint64_t v7 = swift_allocObject();
  *(_WORD *)(v7 + 80) = kMAElementIgnoreDomain;
  *(unsigned char *)(v7 + 82) = 0;
  *(void *)(v7 + 88) = a1;
  *(void *)(v7 + 96) = a2;
  *(void *)(v7 + 104) = 0;
  *(void *)(v7 + 112) = 0;
  id v8 = v3;
  swift_bridgeObjectRetain();
  id v9 = objc_msgSend(v8, sel_graphReference);

  *(void *)(v7 + 40) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(void *)(v7 + 16) = v9;
  *(void *)(v7 + 24) = 0;
  *(double *)(v7 + 32) = a3;
  return v7;
}

uint64_t MAGraph.slice(label:domain:properties:weight:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  type metadata accessor for MAFetchSlice();
  uint64_t v11 = swift_allocObject();
  swift_bridgeObjectRetain();
  id v12 = v5;
  swift_bridgeObjectRetain();
  __int16 v13 = kMAElementIgnoreDomain;
  if ((a3 & 0x10000) == 0) {
    __int16 v13 = a3;
  }
  *(_WORD *)(v11 + 80) = v13;
  *(unsigned char *)(v11 + 82) = 0;
  *(void *)(v11 + 88) = a1;
  *(void *)(v11 + 96) = a2;
  *(void *)(v11 + 104) = a4;
  *(void *)(v11 + 112) = 0;
  id v14 = objc_msgSend(v12, sel_graphReference);
  *(void *)(v11 + 40) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(void *)(v11 + 16) = v14;
  *(void *)(v11 + 24) = 0;
  *(double *)(v11 + 32) = a5;

  return v11;
}

uint64_t MAGraph.slice(node:weight:)(void *a1, double a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D17C9600;
  *(void *)(inited + 32) = a1;
  unint64_t v12 = inited;
  sub_1D17BE150();
  id v6 = a1;
  uint64_t v7 = sub_1D167B3C0(v12);
  swift_bridgeObjectRelease();
  id v8 = v2;
  id v9 = objc_msgSend(v8, sel_graphReference);
  type metadata accessor for MASlice();
  uint64_t v10 = swift_allocObject();

  *(void *)(v10 + 40) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v7;
  *(double *)(v10 + 32) = a2;
  return v10;
}

uint64_t MAGraph.slice(nodes:weight:)(uint64_t a1, double a2)
{
  swift_bridgeObjectRetain();
  id v5 = v2;
  id v6 = objc_msgSend(v5, sel_graphReference);
  type metadata accessor for MASlice();
  uint64_t v7 = swift_allocObject();

  *(void *)(v7 + 40) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = a1;
  *(double *)(v7 + 32) = a2;
  return v7;
}

uint64_t MAGraph.slice(weight:)(double a1)
{
  id v3 = v1;
  id v4 = objc_msgSend(v3, sel_graphReference);
  type metadata accessor for MASlice();
  uint64_t v5 = swift_allocObject();

  *(void *)(v5 + 40) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = 0;
  *(double *)(v5 + 32) = a1;
  return v5;
}

uint64_t MAGraph.slice(edgeLabel:direction:weight:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (a4 == 2)
  {
    id v8 = v4;
    sub_1D17BE850();
    swift_bridgeObjectRelease();
    strcpy((char *)v15, "(::)-[:");
    v15[1] = 0xE700000000000000;
  }
  else
  {
    id v7 = v4;
    sub_1D17BE850();
    swift_bridgeObjectRelease();
    strcpy((char *)v15, "(source::)-[:");
    HIWORD(v15[1]) = -4864;
  }
  sub_1D17BE030();
  sub_1D17BE030();
  uint64_t v9 = v15[0];
  uint64_t v10 = v15[1];
  unint64_t v11 = sub_1D165C4A8(MEMORY[0x1E4FBC860]);
  type metadata accessor for MAQuerySlice();
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 104) = xmmword_1D17CC410;
  *(void *)(v12 + 80) = v9;
  *(void *)(v12 + 88) = v10;
  *(void *)(v12 + 96) = v11;
  id v13 = objc_msgSend(v5, sel_graphReference);
  *(void *)(v12 + 40) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(void *)(v12 + 16) = v13;
  *(void *)(v12 + 24) = 0;
  *(double *)(v12 + 32) = a1;

  return v12;
}

uint64_t MAGraph.slice(edgeDomain:direction:weight:)(double a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  if (a3 == 2)
  {
    id v7 = v3;
    sub_1D17BE850();
    swift_bridgeObjectRelease();
    strcpy((char *)v14, "(::)-[::");
    BYTE1(v14[1]) = 0;
    WORD1(v14[1]) = 0;
    HIDWORD(v14[1]) = -402653184;
  }
  else
  {
    id v6 = v3;
    sub_1D17BE850();
    swift_bridgeObjectRelease();
    strcpy((char *)v14, "(source::)-[::");
    HIBYTE(v14[1]) = -18;
  }
  sub_1D17BEB70();
  sub_1D17BE030();
  swift_bridgeObjectRelease();
  sub_1D17BE030();
  uint64_t v8 = v14[0];
  uint64_t v9 = v14[1];
  unint64_t v10 = sub_1D165C4A8(MEMORY[0x1E4FBC860]);
  type metadata accessor for MAQuerySlice();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 104) = xmmword_1D17CC410;
  *(void *)(v11 + 80) = v8;
  *(void *)(v11 + 88) = v9;
  *(void *)(v11 + 96) = v10;
  id v12 = objc_msgSend(v4, sel_graphReference);
  *(void *)(v11 + 40) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(void *)(v11 + 16) = v12;
  *(void *)(v11 + 24) = 0;
  *(double *)(v11 + 32) = a1;

  return v11;
}

uint64_t MANode.slice(weight:)(double a1)
{
  id v3 = objc_msgSend(v1, sel_graph);
  if (!v3) {
    return 0;
  }
  id v4 = v3;
  uint64_t v5 = type metadata accessor for MASlice();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D17C9600;
  *(void *)(inited + 32) = v1;
  unint64_t v11 = inited;
  sub_1D17BE150();
  id v7 = v1;
  uint64_t v8 = sub_1D167B3C0(v11);
  swift_bridgeObjectRelease();
  uint64_t v9 = (*(uint64_t (**)(id, uint64_t, double))(v5 + 208))(objc_msgSend(v4, sel_graphReference), v8, a1);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t Array<A>.slice(weight:)(unint64_t a1, double a2)
{
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_1D17BEAD0();
  if (!result) {
    goto LABEL_9;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v6 = (id)MEMORY[0x1D25F9260](0, a1);
LABEL_6:
    id v7 = v6;
    swift_bridgeObjectRelease();
    id v8 = objc_msgSend(v7, sel_graph);

    if (v8)
    {
      uint64_t v9 = type metadata accessor for MASlice();
      unint64_t v10 = swift_bridgeObjectRetain();
      uint64_t v11 = sub_1D167B3C0(v10);
      swift_bridgeObjectRelease();
      uint64_t v12 = (*(uint64_t (**)(id, uint64_t, double))(v9 + 208))(objc_msgSend(v8, sel_graphReference), v11, a2);
      swift_unknownObjectRelease();
      return v12;
    }
    return 0;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v6 = *(id *)(a1 + 32);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t Set<>.slice(weight:)(uint64_t a1, double a2)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = (void *)sub_1D16FF75C(v4);
  swift_bridgeObjectRelease();
  if (!v5) {
    return 0;
  }
  id v6 = objc_msgSend(v5, sel_graph);

  if (!v6) {
    return 0;
  }
  uint64_t v7 = type metadata accessor for MASlice();
  swift_bridgeObjectRetain();
  uint64_t v8 = (*(uint64_t (**)(id, uint64_t, double))(v7 + 208))(objc_msgSend(v6, sel_graphReference), a1, a2);
  swift_unknownObjectRelease();
  return v8;
}

id sub_1D17069D4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1D17BDD90();
  uint64_t v5 = *(void *)(v4 - 8);
  double v7 = MEMORY[0x1F4188790](v4, v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = objc_msgSend(*(id *)(v2 + 16), sel_concreteGraph, v7);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v11 = result;
  id v12 = objc_msgSend(result, sel_identifier);

  sub_1D17BDD80();
  sub_1D170FC54(&qword_1EA652D48, 255, MEMORY[0x1E4F27990]);
  sub_1D17BDF10();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  unint64_t v13 = *(void *)(v2 + 80);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain_n();
    sub_1D17BEAD0();
    swift_bridgeObjectRelease();
    sub_1D17BED30();
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_1D17BEAD0();
    id result = (id)swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_4;
    }
    return (id)swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  id result = (id)sub_1D17BED30();
  uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v14) {
    return (id)swift_bridgeObjectRelease();
  }
LABEL_4:
  if (v14 >= 1)
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      if ((v13 & 0xC000000000000001) != 0)
      {
        uint64_t v16 = MEMORY[0x1D25F9260](i, v13);
      }
      else
      {
        uint64_t v16 = *(void *)(v13 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(uint64_t))(*(void *)v16 + 272))(a1);
      swift_release();
    }
    return (id)swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1D1706C50()
{
  uint64_t v1 = v0;
  type metadata accessor for MASlices();
  uint64_t v2 = swift_dynamicCastClass();
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v0 + 16);
  swift_retain();
  uint64_t result = (uint64_t)objc_msgSend(v4, sel_concreteGraph);
  if (result)
  {
    uint64_t v6 = (void *)result;
    double v7 = *(void **)(v3 + 16);
    swift_retain();
    uint64_t result = (uint64_t)objc_msgSend(v7, sel_concreteGraph);
    if (result)
    {
      uint64_t v8 = (void *)result;
      swift_release();
      sub_1D165C128(0, &qword_1EA6518E0);
      char v9 = sub_1D17BE5C0();

      if (v9)
      {
        unint64_t v10 = *(void *)(v1 + 80);
        uint64_t v11 = *(void *)(v3 + 80);
        swift_bridgeObjectRetain();
        LOBYTE(v10) = sub_1D166647C(v10, v11);
        swift_bridgeObjectRelease();
        swift_release();
        if (v10) {
          return 1;
        }
      }
      else
      {
        swift_release();
      }
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1D1706D80()
{
  id result = objc_msgSend(*(id *)(v0 + 16), sel_concreteGraph);
  if (result)
  {
    uint64_t v2 = result;
    unsigned int v3 = objc_msgSend(result, sel_hasPendingRead);

    if (!v3) {
      goto LABEL_48;
    }
    v32[0] = MEMORY[0x1E4FBC870];
    unint64_t v0 = *(void *)(v0 + 80);
    if (v0 >> 62) {
      goto LABEL_49;
    }
    uint64_t v4 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_5:
      unint64_t v5 = 0;
      unint64_t v29 = v0 & 0xC000000000000001;
      uint64_t v26 = v0 & 0xFFFFFFFFFFFFFF8;
      uint64_t v27 = v4;
      unint64_t v28 = v0;
LABEL_7:
      if (v29)
      {
        uint64_t v6 = MEMORY[0x1D25F9260](v5, v0);
        BOOL v7 = __OFADD__(v5, 1);
        unint64_t v8 = v5 + 1;
        if (v7) {
          goto LABEL_46;
        }
      }
      else
      {
        if (v5 >= *(void *)(v26 + 16)) {
          goto LABEL_47;
        }
        uint64_t v6 = swift_retain();
        BOOL v7 = __OFADD__(v5, 1);
        unint64_t v8 = v5 + 1;
        if (v7) {
          goto LABEL_46;
        }
      }
      unint64_t v0 = v6;
      uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v6 + 216))();
      uint64_t v10 = v9;
      unint64_t v30 = v8;
      if ((v9 & 0xC000000000000001) != 0)
      {
        sub_1D17BE710();
        unint64_t v0 = sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
        sub_1D1674A20();
        sub_1D17BE390();
        uint64_t v10 = v32[1];
        uint64_t v11 = v32[2];
        uint64_t v12 = v32[3];
        uint64_t v13 = v32[4];
        unint64_t v14 = v32[5];
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v15 = -1 << *(unsigned char *)(v9 + 32);
        uint64_t v11 = v9 + 56;
        uint64_t v12 = ~v15;
        uint64_t v16 = -v15;
        if (v16 < 64) {
          uint64_t v17 = ~(-1 << v16);
        }
        else {
          uint64_t v17 = -1;
        }
        unint64_t v14 = v17 & *(void *)(v9 + 56);
      }
      int64_t v18 = (unint64_t)(v12 + 64) >> 6;
      if (v10 < 0) {
        goto LABEL_22;
      }
      while (1)
      {
        if (v14)
        {
          uint64_t v19 = (v14 - 1) & v14;
          unint64_t v20 = __clz(__rbit64(v14)) | (v13 << 6);
          uint64_t v21 = v13;
        }
        else
        {
          int64_t v23 = v13 + 1;
          if (__OFADD__(v13, 1))
          {
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            swift_bridgeObjectRetain();
            uint64_t v4 = sub_1D17BEAD0();
            if (!v4) {
              break;
            }
            goto LABEL_5;
          }
          if (v23 >= v18) {
            goto LABEL_6;
          }
          unint64_t v24 = *(void *)(v11 + 8 * v23);
          uint64_t v21 = v13 + 1;
          if (!v24)
          {
            uint64_t v21 = v13 + 2;
            if (v13 + 2 >= v18) {
              goto LABEL_6;
            }
            unint64_t v24 = *(void *)(v11 + 8 * v21);
            if (!v24)
            {
              uint64_t v21 = v13 + 3;
              if (v13 + 3 >= v18) {
                goto LABEL_6;
              }
              unint64_t v24 = *(void *)(v11 + 8 * v21);
              if (!v24)
              {
                uint64_t v21 = v13 + 4;
                if (v13 + 4 >= v18) {
                  goto LABEL_6;
                }
                unint64_t v24 = *(void *)(v11 + 8 * v21);
                if (!v24)
                {
                  uint64_t v21 = v13 + 5;
                  if (v13 + 5 >= v18) {
                    goto LABEL_6;
                  }
                  unint64_t v24 = *(void *)(v11 + 8 * v21);
                  if (!v24)
                  {
                    uint64_t v25 = v13 + 6;
                    do
                    {
                      if (v18 == v25) {
                        goto LABEL_6;
                      }
                      unint64_t v24 = *(void *)(v11 + 8 * v25++);
                    }
                    while (!v24);
                    uint64_t v21 = v25 - 1;
                  }
                }
              }
            }
          }
          uint64_t v19 = (v24 - 1) & v24;
          unint64_t v20 = __clz(__rbit64(v24)) + (v21 << 6);
        }
        id v22 = *(id *)(*(void *)(v10 + 48) + 8 * v20);
        if (!v22)
        {
LABEL_6:
          sub_1D1668088();
          swift_release();
          unint64_t v0 = v28;
          unint64_t v5 = v30;
          if (v30 == v27)
          {
            swift_bridgeObjectRelease();
            return (id)v32[0];
          }
          goto LABEL_7;
        }
        while (1)
        {
          unint64_t v0 = (unint64_t)v32;
          sub_1D1671FA0(&v31, v22);

          uint64_t v13 = v21;
          unint64_t v14 = v19;
          if ((v10 & 0x8000000000000000) == 0) {
            break;
          }
LABEL_22:
          if (sub_1D17BE7A0())
          {
            sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v22 = v31;
            swift_unknownObjectRelease();
            uint64_t v21 = v13;
            uint64_t v19 = v14;
            if (v22) {
              continue;
            }
          }
          goto LABEL_6;
        }
      }
    }
    swift_bridgeObjectRelease();
    return (id)MEMORY[0x1E4FBC870];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D1707164()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_concreteGraph);
  if (v1)
  {
    uint64_t v2 = v1;
    unsigned int v3 = objc_msgSend(v1, sel_hasPendingRead);

    if (!v3) {
      goto LABEL_54;
    }
    uint64_t v48 = MEMORY[0x1E4FBC870];
    unint64_t v49 = MEMORY[0x1E4FBC868];
    unint64_t v4 = *(void *)(v0 + 80);
    unint64_t v43 = v4;
    if (v4 >> 62) {
      goto LABEL_55;
    }
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    while (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v44 = v5;
      while (1)
      {
        if ((v43 & 0xC000000000000001) != 0)
        {
          uint64_t v8 = MEMORY[0x1D25F9260](v6, v43);
          BOOL v9 = __OFADD__(v6, 1);
          uint64_t v10 = v6 + 1;
          if (v9) {
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v8 = swift_retain();
          BOOL v9 = __OFADD__(v6, 1);
          uint64_t v10 = v6 + 1;
          if (v9) {
            goto LABEL_53;
          }
        }
        uint64_t v46 = v10;
        uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v8 + 224))();
        uint64_t v13 = v12;
        sub_1D16FF9F8(v11);
        uint64_t v45 = v7;
        swift_bridgeObjectRelease();
        unint64_t v14 = (void *)v49;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v47 = (void *)v49;
        unint64_t v49 = 0x8000000000000000;
        uint64_t v16 = v13 + 64;
        uint64_t v17 = 1 << *(unsigned char *)(v13 + 32);
        if (v17 < 64) {
          uint64_t v18 = ~(-1 << v17);
        }
        else {
          uint64_t v18 = -1;
        }
        unint64_t v19 = v18 & *(void *)(v13 + 64);
        int64_t v20 = (unint64_t)(v17 + 63) >> 6;
        swift_bridgeObjectRetain();
        int64_t v21 = 0;
        if (v19)
        {
          while (1)
          {
            unint64_t v24 = __clz(__rbit64(v19));
            v19 &= v19 - 1;
            unint64_t v25 = v24 | (v21 << 6);
LABEL_38:
            uint64_t v29 = 8 * v25;
            double v30 = *(double *)(*(void *)(v13 + 56) + v29);
            id v31 = *(id *)(*(void *)(v13 + 48) + v29);
            unint64_t v33 = sub_1D165A9D0((uint64_t)v31);
            uint64_t v34 = v14[2];
            BOOL v35 = (v32 & 1) == 0;
            uint64_t v36 = v34 + v35;
            if (__OFADD__(v34, v35)) {
              break;
            }
            char v37 = v32;
            if (v14[3] >= v36)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                sub_1D16A6A54();
              }
            }
            else
            {
              sub_1D16A28F8(v36, isUniquelyReferenced_nonNull_native & 1);
              unint64_t v38 = sub_1D165A9D0((uint64_t)v31);
              if ((v37 & 1) != (v39 & 1)) {
                goto LABEL_58;
              }
              unint64_t v33 = v38;
            }
            unint64_t v14 = v47;
            if (v37)
            {
              double v22 = *(double *)(v47[7] + 8 * v33);

              if (v22 > v30) {
                double v23 = v22;
              }
              else {
                double v23 = v30;
              }
              *(double *)(v47[7] + 8 * v33) = v23;
              char isUniquelyReferenced_nonNull_native = 1;
              if (!v19) {
                goto LABEL_22;
              }
            }
            else
            {
              v47[(v33 >> 6) + 8] |= 1 << v33;
              *(void *)(v47[6] + 8 * v33) = v31;
              *(double *)(v47[7] + 8 * v33) = v30;
              uint64_t v40 = v47[2];
              BOOL v9 = __OFADD__(v40, 1);
              uint64_t v41 = v40 + 1;
              if (v9) {
                goto LABEL_50;
              }
              _OWORD v47[2] = v41;
              char isUniquelyReferenced_nonNull_native = 1;
              if (!v19) {
                goto LABEL_22;
              }
            }
          }
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
LABEL_22:
        int64_t v26 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          goto LABEL_51;
        }
        if (v26 < v20)
        {
          unint64_t v27 = *(void *)(v16 + 8 * v26);
          ++v21;
          if (v27) {
            goto LABEL_37;
          }
          int64_t v21 = v26 + 1;
          if (v26 + 1 < v20)
          {
            unint64_t v27 = *(void *)(v16 + 8 * v21);
            if (v27) {
              goto LABEL_37;
            }
            int64_t v21 = v26 + 2;
            if (v26 + 2 < v20)
            {
              unint64_t v27 = *(void *)(v16 + 8 * v21);
              if (v27) {
                goto LABEL_37;
              }
              int64_t v21 = v26 + 3;
              if (v26 + 3 < v20)
              {
                unint64_t v27 = *(void *)(v16 + 8 * v21);
                if (v27) {
                  goto LABEL_37;
                }
                int64_t v28 = v26 + 4;
                if (v28 < v20) {
                  break;
                }
              }
            }
          }
        }
LABEL_6:
        swift_bridgeObjectRelease();
        swift_release();
        unint64_t v49 = (unint64_t)v14;
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v7 = v45;
        uint64_t v6 = v46;
        if (v46 == v44)
        {
          swift_bridgeObjectRelease();
          return v48;
        }
      }
      unint64_t v27 = *(void *)(v16 + 8 * v28);
      if (v27)
      {
        int64_t v21 = v28;
LABEL_37:
        unint64_t v19 = (v27 - 1) & v27;
        unint64_t v25 = __clz(__rbit64(v27)) + (v21 << 6);
        goto LABEL_38;
      }
      while (1)
      {
        int64_t v21 = v28 + 1;
        if (__OFADD__(v28, 1)) {
          break;
        }
        if (v21 >= v20) {
          goto LABEL_6;
        }
        unint64_t v27 = *(void *)(v16 + 8 * v21);
        ++v28;
        if (v27) {
          goto LABEL_37;
        }
      }
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      swift_bridgeObjectRetain_n();
      uint64_t v5 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  else
  {
    __break(1u);
LABEL_58:
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    uint64_t result = sub_1D17BEC60();
    __break(1u);
  }
  return result;
}

uint64_t sub_1D17075A0()
{
  unint64_t v1 = *(void *)(v0 + 80);
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    return v2;
  }
LABEL_20:
  swift_bridgeObjectRetain();
  uint64_t result = sub_1D17BEAD0();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_17;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = MEMORY[0x1D25F9260](0, v1);
    uint64_t v4 = v5;
LABEL_6:
    char v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 232))(v5);
    swift_release();
    if (v6)
    {
      uint64_t v2 = 1;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = v2 - 1;
      while (1)
      {
        uint64_t v2 = v8 != v7;
        if (v8 == v7) {
          break;
        }
        unint64_t v9 = v7 + 1;
        if ((v1 & 0xC000000000000001) != 0)
        {
          uint64_t v10 = MEMORY[0x1D25F9260](v7 + 1, v1);
          if (__OFADD__(v9, 1)) {
            goto LABEL_18;
          }
        }
        else
        {
          if (v9 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_19;
          }
          uint64_t v10 = *(void *)(v1 + 8 * v7 + 40);
          swift_retain();
          if (__OFADD__(v9, 1))
          {
LABEL_18:
            __break(1u);
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        char v11 = (*(uint64_t (**)(void))(*(void *)v10 + 232))();
        swift_release();
        ++v7;
        if (v11) {
          goto LABEL_17;
        }
      }
    }
    goto LABEL_17;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v4 = *(void *)(v1 + 32);
    uint64_t v5 = swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

id sub_1D1707740(uint64_t a1, uint64_t a2, double a3)
{
  id result = objc_msgSend(*(id *)(v3 + 16), sel_concreteGraph);
  if (result)
  {
    unint64_t v8 = (unint64_t)result;
    unsigned int v9 = objc_msgSend(result, sel_hasPendingRead);

    if (!v9) {
      goto LABEL_18;
    }
    uint64_t v17 = MEMORY[0x1E4FBC860];
    unint64_t v8 = *(void *)(v3 + 80);
    if (v8 >> 62)
    {
LABEL_19:
      swift_bridgeObjectRetain();
      uint64_t v10 = sub_1D17BEAD0();
      if (v10) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v10)
      {
LABEL_5:
        for (uint64_t i = 4; ; ++i)
        {
          uint64_t v12 = i - 4;
          if ((v8 & 0xC000000000000001) != 0)
          {
            uint64_t v13 = MEMORY[0x1D25F9260](i - 4, v8);
            uint64_t v14 = i - 3;
            if (__OFADD__(v12, 1)) {
              goto LABEL_17;
            }
          }
          else
          {
            uint64_t v13 = *(void *)(v8 + 8 * i);
            swift_retain();
            uint64_t v14 = i - 3;
            if (__OFADD__(v12, 1))
            {
LABEL_17:
              __break(1u);
LABEL_18:
              __break(1u);
              goto LABEL_19;
            }
          }
          uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)v13 + 240))(a1, a2, a3);
          if (v4)
          {
            swift_bridgeObjectRelease();
            swift_release();
            return (id)swift_bridgeObjectRelease();
          }
          if (v15) {
            sub_1D1663AD8(v15);
          }
          swift_release();
          if (v14 == v10)
          {
            swift_bridgeObjectRelease();
            return (id)v17;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    return (id)MEMORY[0x1E4FBC860];
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1D1707918(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(v1 + 16), sel_concreteGraph);
  if (!result) {
    goto LABEL_34;
  }
  unint64_t v4 = (unint64_t)result;
  unsigned int v5 = objc_msgSend(result, sel_hasPendingRead);

  if (!v5)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    swift_bridgeObjectRetain();
    id result = (void *)sub_1D17BEAD0();
    uint64_t v6 = (uint64_t)result;
    if (!result) {
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(v1 + 80);
  if (v4 >> 62) {
    goto LABEL_28;
  }
  uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id result = (void *)swift_bridgeObjectRetain();
  if (!v6)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return (void *)v6;
  }
LABEL_5:
  unint64_t v7 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = MEMORY[0x1D25F9260](0, v4);
    goto LABEL_8;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v8 = *(void *)(v4 + 32);
    swift_retain();
LABEL_8:
    char v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 248))(a1);
    id result = (void *)swift_release();
    if (v9)
    {
LABEL_9:
      uint64_t v6 = 1;
      goto LABEL_12;
    }
    if (v6 == 1)
    {
      uint64_t v6 = 0;
      goto LABEL_12;
    }
    if (v7)
    {
      uint64_t v10 = MEMORY[0x1D25F9260](1, v4);
      goto LABEL_17;
    }
    if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      uint64_t v10 = *(void *)(v4 + 40);
      swift_retain();
LABEL_17:
      char v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 248))(a1);
      id result = (void *)swift_release();
      if ((v11 & 1) == 0)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v6 - 2;
        while (1)
        {
          uint64_t v6 = v13 != v12;
          if (v13 == v12) {
            goto LABEL_12;
          }
          unint64_t v16 = v12 + 2;
          if (v7)
          {
            uint64_t v14 = MEMORY[0x1D25F9260](v12 + 2, v4);
            if (__OFADD__(v16, 1)) {
              goto LABEL_26;
            }
          }
          else
          {
            if (v16 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_32;
            }
            uint64_t v14 = *(void *)(v4 + 8 * v12 + 48);
            swift_retain();
            if (__OFADD__(v16, 1))
            {
LABEL_26:
              __break(1u);
              goto LABEL_27;
            }
          }
          char v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 248))(a1);
          id result = (void *)swift_release();
          ++v12;
          if (v15) {
            goto LABEL_12;
          }
        }
      }
      goto LABEL_9;
    }
    goto LABEL_33;
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1D1707B88()
{
  unint64_t v1 = *(void *)(v0 + 80);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (v2) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain_n();
  uint64_t result = sub_1D17BEAD0();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_11;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = MEMORY[0x1D25F9260](v4, v1);
      }
      else
      {
        uint64_t v5 = *(void *)(v1 + 8 * v4 + 32);
        swift_retain();
      }
      ++v4;
      uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v5 + 256))();
      swift_release();
      sub_1D1663F08(v6);
    }
    while (v2 != v4);
    swift_bridgeObjectRelease_n();
    return v7;
  }
  return result;
}

uint64_t sub_1D1707CCC()
{
  unint64_t v1 = *(void *)(v0 + 80);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (v2) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain_n();
  uint64_t result = sub_1D17BEAD0();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_11;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = MEMORY[0x1D25F9260](v4, v1);
      }
      else
      {
        uint64_t v5 = *(void *)(v1 + 8 * v4 + 32);
        swift_retain();
      }
      ++v4;
      uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v5 + 264))();
      swift_release();
      sub_1D1663C44(v6);
    }
    while (v2 != v4);
    swift_bridgeObjectRelease_n();
    return v7;
  }
  return result;
}

uint64_t sub_1D1707E10(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  void (*v20)(uint64_t *__return_ptr, void *, void *);
  uint64_t v24;
  void v25[2];
  void v26[2];
  uint64_t v27;
  uint64_t vars8;

  unint64_t v27 = MEMORY[0x1E4FBC860];
  unint64_t v12 = *(void *)(v7 + 80);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_1D17BEAD0();
    uint64_t v13 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t result = MEMORY[0x1E4FBC860];
    if (!*(void *)(MEMORY[0x1E4FBC860] + 16)) {
      goto LABEL_19;
    }
    return result;
  }
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v13) {
    goto LABEL_18;
  }
LABEL_3:
  if (v13 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v13; ++i)
  {
    if ((v12 & 0xC000000000000001) != 0)
    {
      uint64_t v16 = MEMORY[0x1D25F9260](i, v12);
    }
    else
    {
      uint64_t v16 = *(void *)(v12 + 8 * i + 32);
      swift_retain();
    }
    uint64_t v17 = *(void *)(v16 + 40);
    if (!*(void *)(v17 + 16)) {
      goto LABEL_5;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v18 = sub_1D165AA20(a2);
    if (v19)
    {
      int64_t v20 = *(void (**)(uint64_t *__return_ptr, void *, void *))(*(void *)(v17 + 56) + 16 * v18);
      swift_retain();
      swift_release();
      swift_bridgeObjectRelease();
      v26[0] = a3;
      v26[1] = a4;
      v25[0] = a5;
      v25[1] = a6;
      v20(&v24, v26, v25);
      swift_release();
      if (v24) {
        sub_1D1663DB0(v24);
      }
LABEL_5:
      swift_release();
      continue;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = v27;
  if (*(void *)(v27 + 16)) {
    return result;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  return sub_1D1700FA8(a1, a2, a3, a4, a5, a6, a7 & 1);
}

void sub_1D1708050()
{
}

id Array<A>.contentNodes()(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  id result = (id)sub_1D17BEAD0();
  if (!result) {
    goto LABEL_9;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_10:
    uint64_t v4 = MEMORY[0x1D25F9260](0, a1);
    goto LABEL_6;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  swift_retain();
LABEL_6:
  swift_bridgeObjectRelease();
  id result = objc_msgSend(*(id *)(v4 + 16), sel_concreteGraph);
  if (result)
  {
    uint64_t v5 = result;
    swift_release();
    type metadata accessor for MASlices();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 80) = a1;
    swift_bridgeObjectRetain();
    id v7 = objc_msgSend(v5, sel_graphReference);

    uint64_t v8 = MEMORY[0x1E4FBC868];
    *(_OWORD *)(inited + 48) = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    *(void *)(inited + 16) = v7;
    *(void *)(inited + 24) = 0;
    *(void *)(inited + 32) = 0x3FF0000000000000;
    *(void *)(inited + 40) = v8;
    id v9 = sub_1D1706D80();
    swift_bridgeObjectRelease();

    return v9;
  }
LABEL_12:
  __break(1u);
  return result;
}

id Array<A>.weightedContentNodes()(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  id result = (id)sub_1D17BEAD0();
  if (!result) {
    goto LABEL_9;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_10:
    uint64_t v4 = MEMORY[0x1D25F9260](0, a1);
    goto LABEL_6;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  swift_retain();
LABEL_6:
  swift_bridgeObjectRelease();
  id result = objc_msgSend(*(id *)(v4 + 16), sel_concreteGraph);
  if (result)
  {
    uint64_t v5 = result;
    swift_release();
    type metadata accessor for MASlices();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 80) = a1;
    swift_bridgeObjectRetain();
    id v7 = objc_msgSend(v5, sel_graphReference);

    uint64_t v8 = MEMORY[0x1E4FBC868];
    *(_OWORD *)(inited + 48) = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    *(void *)(inited + 16) = v7;
    *(void *)(inited + 24) = 0;
    *(void *)(inited + 32) = 0x3FF0000000000000;
    *(void *)(inited + 40) = v8;
    uint64_t v9 = sub_1D1707164();
    swift_bridgeObjectRelease();

    return (id)v9;
  }
LABEL_12:
  __break(1u);
  return result;
}

id Array<A>.fuzzyContentNodes(precision:progress:)(uint64_t a1, uint64_t a2, unint64_t a3, double a4)
{
  if (!(a3 >> 62))
  {
    uint64_t v8 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  id result = (id)sub_1D17BEAD0();
  if (!result) {
    goto LABEL_9;
  }
LABEL_3:
  if ((a3 & 0xC000000000000001) != 0)
  {
LABEL_10:
    uint64_t v10 = MEMORY[0x1D25F9260](0, a3);
    goto LABEL_6;
  }
  if (!*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v10 = *(void *)(a3 + 32);
  swift_retain();
LABEL_6:
  swift_bridgeObjectRelease();
  id result = objc_msgSend(*(id *)(v10 + 16), sel_concreteGraph);
  if (result)
  {
    char v11 = result;
    swift_release();
    type metadata accessor for MASlices();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 80) = a3;
    swift_bridgeObjectRetain();
    id v13 = objc_msgSend(v11, sel_graphReference);

    uint64_t v14 = MEMORY[0x1E4FBC868];
    *(_OWORD *)(inited + 48) = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    *(void *)(inited + 16) = v13;
    *(void *)(inited + 24) = 0;
    *(void *)(inited + 32) = 0x3FF0000000000000;
    *(void *)(inited + 40) = v14;
    id v15 = sub_1D1707740(a1, a2, a4);
    swift_bridgeObjectRelease();

    return v15;
  }
LABEL_12:
  __break(1u);
  return result;
}

id Array<A>.contains(node:)(uint64_t a1, unint64_t a2)
{
  if (!(a2 >> 62))
  {
    uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  id result = (id)sub_1D17BEAD0();
  if (!result) {
    goto LABEL_9;
  }
LABEL_3:
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_10:
    uint64_t v6 = MEMORY[0x1D25F9260](0, a2);
    goto LABEL_6;
  }
  if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  swift_retain();
LABEL_6:
  swift_bridgeObjectRelease();
  id result = objc_msgSend(*(id *)(v6 + 16), sel_concreteGraph);
  if (result)
  {
    id v7 = result;
    swift_release();
    type metadata accessor for MASlices();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 80) = a2;
    swift_bridgeObjectRetain();
    id v9 = objc_msgSend(v7, sel_graphReference);

    uint64_t v10 = MEMORY[0x1E4FBC868];
    *(_OWORD *)(inited + 48) = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    *(void *)(inited + 16) = v9;
    *(void *)(inited + 24) = 0;
    *(void *)(inited + 32) = 0x3FF0000000000000;
    *(void *)(inited + 40) = v10;
    unsigned __int8 v11 = sub_1D1707918(a1);
    swift_bridgeObjectRelease();

    return (id)(v11 & 1);
  }
LABEL_12:
  __break(1u);
  return result;
}

id Array<A>.projectTo(slice:paths:precision:progress:)(uint64_t a1, uint64_t a2, void (*a3)(char *, double), uint64_t a4, unint64_t a5, double a6)
{
  uint64_t v7 = v6;
  if (!(a5 >> 62))
  {
    uint64_t v14 = *(void *)((a5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    sub_1D1672594();
    swift_allocError();
    *double v23 = 5;
    swift_willThrow();
    return (id)v7;
  }
  swift_bridgeObjectRetain();
  id result = (id)sub_1D17BEAD0();
  if (!result) {
    goto LABEL_9;
  }
LABEL_3:
  if ((a5 & 0xC000000000000001) != 0)
  {
    uint64_t v16 = MEMORY[0x1D25F9260](0, a5);
  }
  else
  {
    if (!*(void *)((a5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_13;
    }
    uint64_t v16 = *(void *)(a5 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  id result = objc_msgSend(*(id *)(v16 + 16), sel_concreteGraph);
  if (result)
  {
    uint64_t v17 = result;
    swift_release();
    type metadata accessor for MASlices();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 80) = a5;
    swift_bridgeObjectRetain();
    id v19 = v17;
    id v20 = objc_msgSend(v19, sel_graphReference);

    uint64_t v21 = MEMORY[0x1E4FBC868];
    *(_OWORD *)(inited + 48) = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    *(void *)(inited + 16) = v20;
    *(void *)(inited + 24) = 0;
    *(void *)(inited + 32) = 0x3FF0000000000000;
    *(void *)(inited + 40) = v21;
    sub_1D1701FE4(a1, a2, a3, a4, a6);
    uint64_t v7 = v22;

    swift_setDeallocating();
    swift_bridgeObjectRelease();
    sub_1D165B3A4(*(void *)(inited + 48));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return (id)v7;
  }
LABEL_13:
  __break(1u);
  return result;
}

id Array<A>.slice(weight:)(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  id result = (id)sub_1D17BEAD0();
  if (!result) {
    goto LABEL_9;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_10:
    uint64_t v4 = MEMORY[0x1D25F9260](0, a1);
    goto LABEL_6;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  swift_retain();
LABEL_6:
  swift_bridgeObjectRelease();
  id result = objc_msgSend(*(id *)(v4 + 16), sel_concreteGraph);
  if (result)
  {
    uint64_t v5 = result;
    swift_release();
    type metadata accessor for MASlices();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 80) = a1;
    swift_bridgeObjectRetain();
    id v7 = objc_msgSend(v5, sel_graphReference);

    uint64_t v8 = MEMORY[0x1E4FBC868];
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(void *)(v6 + 16) = v7;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0x3FF0000000000000;
    *(void *)(v6 + 40) = v8;
    return (id)v6;
  }
LABEL_12:
  __break(1u);
  return result;
}

id sub_1D1708990()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1D17BDD90();
  uint64_t v3 = *(void *)(v2 - 8);
  double v5 = MEMORY[0x1F4188790](v2, v4);
  id v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = objc_msgSend(*(id *)(v1 + 16), sel_concreteGraph, v5);
  if (result)
  {
    id v9 = result;
    id v10 = objc_msgSend(result, sel_identifier);

    sub_1D17BDD80();
    sub_1D170FC54(&qword_1EA652D48, 255, MEMORY[0x1E4F27990]);
    sub_1D17BDF10();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
    uint64_t v11 = *(void *)(v1 + 80);
    id result = (id)sub_1D17BED30();
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v13 = v11 + 32;
      do
      {
        v13 += 2;
        id result = (id)sub_1D17BED50();
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D1708B28()
{
  uint64_t v1 = v0;
  type metadata accessor for MADomainsSlice();
  uint64_t v2 = swift_dynamicCastClass();
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v0 + 16);
  swift_retain();
  uint64_t result = (uint64_t)objc_msgSend(v4, sel_concreteGraph);
  if (result)
  {
    uint64_t v6 = (void *)result;
    id v7 = *(void **)(v3 + 16);
    swift_retain();
    uint64_t result = (uint64_t)objc_msgSend(v7, sel_concreteGraph);
    if (result)
    {
      uint64_t v8 = (void *)result;
      swift_release();
      sub_1D165C128(0, &qword_1EA6518E0);
      char v9 = sub_1D17BE5C0();

      if (v9)
      {
        BOOL v10 = sub_1D1666740(*(void *)(v1 + 80), *(void *)(v3 + 80));
        swift_release();
        if (v10) {
          return 1;
        }
      }
      else
      {
        swift_release();
      }
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1D1708C40()
{
  id v29 = *(id *)(v0 + 16);
  id v1 = objc_msgSend(v29, sel_concreteGraph);
  if (!v1)
  {
LABEL_45:
    __break(1u);
    return;
  }
  uint64_t v2 = v1;
  unsigned int v3 = objc_msgSend(v1, sel_hasPendingRead);

  if (!v3)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v31[1] = (id)MEMORY[0x1E4FBC870];
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v28 = *(void *)(v4 + 16);
  if (!v28) {
    return;
  }
  uint64_t v27 = v4 + 32;
  swift_bridgeObjectRetain();
  unint64_t v5 = 0;
  uint64_t v26 = v4;
  do
  {
    if (v5 >= *(void *)(v4 + 16)) {
      goto LABEL_42;
    }
    uint64_t v6 = *(unsigned __int16 *)(v27 + 2 * v5);
    id v7 = objc_msgSend(v29, sel_concreteGraph);
    if (!v7) {
      goto LABEL_44;
    }
    uint64_t v8 = v7;
    id v9 = objc_msgSend(v7, sel_nodesForDomain_, v6);

    if (v9)
    {
      sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
      sub_1D1674A20();
      uint64_t v10 = sub_1D17BE350();

      unint64_t v30 = v5;
      if ((v10 & 0xC000000000000001) != 0)
      {
        sub_1D17BE710();
        sub_1D17BE390();
        uint64_t v10 = (uint64_t)v31[2];
        uint64_t v11 = v31[3];
        uint64_t v12 = (uint64_t)v31[4];
        id v13 = v31[5];
        unint64_t v14 = (unint64_t)v31[6];
      }
      else
      {
        id v13 = 0;
        uint64_t v15 = -1 << *(unsigned char *)(v10 + 32);
        uint64_t v11 = (void *)(v10 + 56);
        uint64_t v12 = ~v15;
        uint64_t v16 = -v15;
        if (v16 < 64) {
          uint64_t v17 = ~(-1 << v16);
        }
        else {
          uint64_t v17 = -1;
        }
        unint64_t v14 = v17 & *(void *)(v10 + 56);
      }
      int64_t v18 = (unint64_t)(v12 + 64) >> 6;
      if (v10 < 0) {
        goto LABEL_19;
      }
      while (1)
      {
        if (v14)
        {
          uint64_t v19 = (v14 - 1) & v14;
          unint64_t v20 = __clz(__rbit64(v14)) | ((void)v13 << 6);
          uint64_t v21 = (char *)v13;
        }
        else
        {
          uint64_t v23 = (uint64_t)v13 + 1;
          if (__OFADD__(v13, 1))
          {
            __break(1u);
LABEL_42:
            __break(1u);
            goto LABEL_43;
          }
          if (v23 >= v18) {
            goto LABEL_5;
          }
          unint64_t v24 = v11[v23];
          uint64_t v21 = (char *)v13 + 1;
          if (!v24)
          {
            uint64_t v21 = (char *)v13 + 2;
            if ((uint64_t)v13 + 2 >= v18) {
              goto LABEL_5;
            }
            unint64_t v24 = v11[(void)v21];
            if (!v24)
            {
              uint64_t v21 = (char *)v13 + 3;
              if ((uint64_t)v13 + 3 >= v18) {
                goto LABEL_5;
              }
              unint64_t v24 = v11[(void)v21];
              if (!v24)
              {
                uint64_t v21 = (char *)v13 + 4;
                if ((uint64_t)v13 + 4 >= v18) {
                  goto LABEL_5;
                }
                unint64_t v24 = v11[(void)v21];
                if (!v24)
                {
                  unint64_t v25 = (char *)v13 + 5;
                  while ((char *)v18 != v25)
                  {
                    unint64_t v24 = v11[(void)v25++];
                    if (v24)
                    {
                      uint64_t v21 = v25 - 1;
                      goto LABEL_35;
                    }
                  }
LABEL_5:
                  sub_1D1668088();
                  uint64_t v4 = v26;
                  unint64_t v5 = v30;
                  break;
                }
              }
            }
          }
LABEL_35:
          uint64_t v19 = (v24 - 1) & v24;
          unint64_t v20 = __clz(__rbit64(v24)) + ((void)v21 << 6);
        }
        id v22 = *(id *)(*(void *)(v10 + 48) + 8 * v20);
        if (!v22) {
          goto LABEL_5;
        }
        while (1)
        {
          sub_1D1671FA0(v31, v22);

          id v13 = v21;
          unint64_t v14 = v19;
          if ((v10 & 0x8000000000000000) == 0) {
            break;
          }
LABEL_19:
          if (sub_1D17BE7A0())
          {
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v22 = v31[0];
            swift_unknownObjectRelease();
            uint64_t v21 = (char *)v13;
            uint64_t v19 = v14;
            if (v22) {
              continue;
            }
          }
          goto LABEL_5;
        }
      }
    }
    ++v5;
  }
  while (v5 != v28);
  swift_bridgeObjectRelease();
}

void sub_1D1708FA0(void *a1)
{
  id v3 = objc_msgSend(*(id *)(v1 + 16), sel_concreteGraph);
  if (!v3) {
    goto LABEL_13;
  }
  uint64_t v4 = v3;
  unsigned int v5 = objc_msgSend(v3, sel_hasPendingRead);

  if (!v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  uint64_t v6 = *(void *)(v1 + 80);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    uint64_t v9 = v7 - 1;
    do
      int v10 = *(unsigned __int16 *)(v6 + 2 * v8 + 32);
    while (objc_msgSend(a1, sel_domain) != v10 && v9 != v8++);
    swift_bridgeObjectRelease();
  }
}

void *sub_1D1709064()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v23 = *(void *)(v1 + 16);
  if (v23)
  {
    id v22 = *(id *)(v0 + 16);
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
    id v3 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v21 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      uint64_t v7 = *(unsigned __int16 *)(v1 + 2 * v2 + 32);
      uint64_t result = objc_msgSend(v22, sel_concreteGraph, v21);
      if (!result) {
        break;
      }
      uint64_t v9 = result;
      id v10 = objc_msgSend(result, sel_nodesForDomain_, v7);

      if (v10)
      {
        sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
        sub_1D1674A20();
        uint64_t v11 = sub_1D17BE350();

        sub_1D165C37C(MEMORY[0x1E4FBC860]);
        id v12 = objc_allocWithZone((Class)MAAbstractNode);
        id v13 = (void *)sub_1D17BDFE0();
        unint64_t v14 = (void *)sub_1D17BDE30();
        swift_bridgeObjectRelease();
        LODWORD(v15) = 1065353216;
        id v16 = objc_msgSend(v12, sel_initWithLabel_domain_weight_properties_, v13, v7, v14, v15);

        uint64_t v27 = sub_1D165C128(0, (unint64_t *)&unk_1EA652DD0);
        *(void *)&long long v26 = v16;
        id v17 = v16;
        uint64_t v18 = sub_1D1666CF8(v11);
        swift_bridgeObjectRelease();
        sub_1D16607C4(&v26, v24);
        uint64_t v25 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v3 = sub_1D169CDF8(0, v3[2] + 1, 1, v3);
        }
        unint64_t v20 = v3[2];
        unint64_t v19 = v3[3];
        if (v20 >= v19 >> 1) {
          id v3 = sub_1D169CDF8((void *)(v19 > 1), v20 + 1, 1, v3);
        }
        v3[2] = v20 + 1;
        uint64_t v4 = &v3[5 * v20];
        long long v5 = v24[0];
        long long v6 = v24[1];
        v4[8] = v25;
        *((_OWORD *)v4 + 2) = v5;
        *((_OWORD *)v4 + 3) = v6;
      }
      if (v23 == ++v2)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    __break(1u);
  }
  else
  {
    return (void *)MEMORY[0x1E4FBC860];
  }
  return result;
}

void *sub_1D17092FC()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v17 = *(void *)(v1 + 16);
  if (!v17) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = 0;
  id v3 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v4 = *(unsigned __int16 *)(v1 + 2 * v2 + 32);
    sub_1D165C37C(MEMORY[0x1E4FBC860]);
    id v5 = objc_allocWithZone((Class)MAAbstractNode);
    long long v6 = (void *)sub_1D17BDFE0();
    uint64_t v7 = (void *)sub_1D17BDE30();
    swift_bridgeObjectRelease();
    LODWORD(v8) = 1065353216;
    id v9 = objc_msgSend(v5, sel_initWithLabel_domain_weight_properties_, v6, v4, v7, v8);

    uint64_t v21 = sub_1D165C128(0, (unint64_t *)&unk_1EA652DD0);
    *(void *)&long long v20 = v9;
    *(void *)&v18[0] = v0;
    sub_1D16607C4(&v20, (_OWORD *)((char *)v18 + 8));
    id v10 = v9;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v3 = sub_1D169CBC4(0, v3[2] + 1, 1, v3);
    }
    unint64_t v12 = v3[2];
    unint64_t v11 = v3[3];
    if (v12 >= v11 >> 1) {
      id v3 = sub_1D169CBC4((void *)(v11 > 1), v12 + 1, 1, v3);
    }
    ++v2;
    v3[2] = v12 + 1;
    id v13 = &v3[5 * v12];
    long long v14 = v18[0];
    long long v15 = v18[1];
    v13[8] = v19;
    *((_OWORD *)v13 + 2) = v14;
    *((_OWORD *)v13 + 3) = v15;
  }
  while (v17 != v2);
  swift_bridgeObjectRelease();
  return v3;
}

void sub_1D1709514()
{
}

uint64_t sub_1D1709530()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s17KnowledgeGraphKit8MASlicesCfd_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D165B3A4(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _s17KnowledgeGraphKit8MASlicesCfD_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D165B3A4(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 88, 7);
}

void sub_1D17095E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1D17BDD90();
  uint64_t v3 = *(void *)(v2 - 8);
  double v5 = MEMORY[0x1F4188790](v2, v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(*(id *)(v1 + 16), sel_concreteGraph, v5);
  if (!v8)
  {
    __break(1u);
    return;
  }
  id v9 = v8;
  id v10 = objc_msgSend(v8, sel_identifier);

  sub_1D17BDD80();
  sub_1D170FC54(&qword_1EA652D48, 255, MEMORY[0x1E4F27990]);
  sub_1D17BDF10();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  if (*(unsigned char *)(v1 + 82) == 1)
  {
    sub_1D17BED40();
    if (*(void *)(v1 + 96)) {
      goto LABEL_4;
    }
  }
  else
  {
    sub_1D17BED40();
    sub_1D17BED50();
    if (*(void *)(v1 + 96))
    {
LABEL_4:
      sub_1D17BED40();
      swift_bridgeObjectRetain();
      sub_1D17BE020();
      swift_bridgeObjectRelease();
      if (*(void *)(v1 + 104))
      {
LABEL_5:
        uint64_t v11 = swift_bridgeObjectRetain();
        sub_1D16767AC(v11);
        id v12 = objc_allocWithZone(MEMORY[0x1E4F1C9E8]);
        id v13 = (void *)sub_1D17BDE30();
        swift_bridgeObjectRelease();
        id v14 = objc_msgSend(v12, sel_initWithDictionary_, v13);
        swift_bridgeObjectRelease();

        sub_1D17BED40();
        id v15 = v14;
        sub_1D17BE5D0();

        return;
      }
      goto LABEL_8;
    }
  }
  sub_1D17BED40();
  if (*(void *)(v1 + 104)) {
    goto LABEL_5;
  }
LABEL_8:
  sub_1D17BED40();
}

uint64_t sub_1D1709884()
{
  uint64_t v1 = v0;
  type metadata accessor for MAFetchSlice();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void **)(v0 + 16);
    swift_retain();
    uint64_t result = (uint64_t)objc_msgSend(v4, sel_concreteGraph);
    if (result)
    {
      double v5 = (void *)result;
      uint64_t v6 = *(void **)(v3 + 16);
      swift_retain();
      uint64_t result = (uint64_t)objc_msgSend(v6, sel_concreteGraph);
      if (result)
      {
        uint64_t v7 = (void *)result;
        swift_release();
        sub_1D165C128(0, &qword_1EA6518E0);
        char v8 = sub_1D17BE5C0();

        if ((v8 & 1) != 0
          && ((*(unsigned char *)(v1 + 82) & 1) != 0
           || (*(unsigned char *)(v3 + 82) & 1) != 0
           || *(unsigned __int16 *)(v1 + 80) == *(unsigned __int16 *)(v3 + 80))
          && ((uint64_t v9 = *(void *)(v1 + 96)) == 0
           || (uint64_t v10 = *(void *)(v3 + 96)) == 0
           || *(void *)(v1 + 88) == *(void *)(v3 + 88) && v9 == v10
           || (sub_1D17BEBC0() & 1) != 0))
        {
          uint64_t v11 = *(void *)(v1 + 104);
          if (!v11 || (uint64_t v12 = *(void *)(v3 + 104)) == 0)
          {
            swift_release();
            return 1;
          }
          swift_bridgeObjectRetain();
          sub_1D16767AC(v11);
          id v13 = objc_allocWithZone(MEMORY[0x1E4F1C9E8]);
          id v14 = (void *)sub_1D17BDE30();
          swift_bridgeObjectRelease();
          id v15 = objc_msgSend(v13, sel_initWithDictionary_, v14);

          sub_1D16767AC(v12);
          swift_bridgeObjectRelease();
          uint64_t v16 = (void *)sub_1D17BDE30();
          swift_bridgeObjectRelease();
          LOBYTE(v13) = objc_msgSend(v15, sel_isEqualToDictionary_, v16);

          swift_release();
          if (v13) {
            return 1;
          }
        }
        else
        {
          swift_release();
        }
        return 0;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1D1709AD4()
{
  uint64_t v1 = v0;
  if (v0[9])
  {
    uint64_t v2 = v0[8];
  }
  else
  {
    uint64_t v3 = v0[13];
    if (v3
      && *(void *)(v3 + 16)
      && (sub_1D165A868(1701667182, 0xE400000000000000), (v4 & 1) != 0)
      && (swift_unknownObjectRetain(), (swift_dynamicCast() & 1) != 0))
    {
      uint64_t v2 = sub_1D17BE010();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v2 = v1[11];
      if (v1[12]) {
        uint64_t v2 = sub_1D17BE010();
      }
    }
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t (*sub_1D1709BC8(uint64_t *a1))(uint64_t)
{
  a1[2] = v1;
  *a1 = sub_1D1709AD4();
  a1[1] = v3;
  return sub_1D1709C10;
}

void sub_1D1709C14()
{
  uint64_t v1 = *(void **)(v0 + 112);
  if (v1)
  {
LABEL_8:
    id v11 = v1;
    return;
  }
  if (*(void *)(v0 + 96))
  {
    if ((*(unsigned char *)(v0 + 82) & 1) == 0)
    {
      uint64_t v2 = *(unsigned __int16 *)(v0 + 80);
      unint64_t v3 = *(void *)(v0 + 104);
      swift_bridgeObjectRetain();
      if (v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = sub_1D165C370(MEMORY[0x1E4FBC860]);
      }
      swift_bridgeObjectRetain();
      sub_1D1676B28(v4);
      swift_bridgeObjectRelease();
      id v5 = objc_allocWithZone((Class)MAAbstractNode);
      uint64_t v6 = (void *)sub_1D17BDFE0();
      swift_bridgeObjectRelease();
      uint64_t v7 = (void *)sub_1D17BDE30();
      swift_bridgeObjectRelease();
      LODWORD(v8) = 1065353216;
      id v9 = objc_msgSend(v5, sel_initWithLabel_domain_weight_properties_, v6, v2, v7, v8);

      uint64_t v10 = *(void **)(v0 + 112);
      *(void *)(v0 + 112) = v9;
      v9;

      uint64_t v1 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1D1709D74()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = objc_msgSend(v1, sel_concreteGraph);
  if (!v2) {
    goto LABEL_13;
  }
  unint64_t v3 = v2;
  id v4 = objc_msgSend(v2, sel_hasPendingRead);

  if (!v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  id v5 = objc_msgSend(v1, sel_concreteGraph);
  if (v5)
  {
    uint64_t v6 = v5;
    if (*(void *)(v0 + 96))
    {
      uint64_t v7 = (void *)sub_1D17BDFE0();
      if ((*(unsigned char *)(v0 + 82) & 1) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v7 = 0;
      if ((*(unsigned char *)(v0 + 82) & 1) == 0)
      {
LABEL_6:
        id v4 = (id)*(unsigned __int16 *)(v0 + 80);
        uint64_t v8 = *(void *)(v0 + 104);
        if (v8)
        {
          sub_1D16767AC(v8);
          id v9 = (void *)sub_1D17BDE30();
          swift_bridgeObjectRelease();
LABEL_11:
          id v10 = objc_msgSend(v6, sel_nodesForLabel_domain_properties_, v7, v4, v9);

          sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
          sub_1D1674A20();
          sub_1D17BE350();

          return;
        }
LABEL_10:
        id v9 = 0;
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
}

void sub_1D1709EE8(void *a1)
{
  id v3 = objc_msgSend(*(id *)(v1 + 16), sel_concreteGraph);
  if (v3)
  {
    id v4 = v3;
    unsigned int v5 = objc_msgSend(v3, sel_hasPendingRead);

    if (v5)
    {
      sub_1D1709C14();
      uint64_t v7 = v6;
      objc_msgSend(a1, sel_matchesNode_includingProperties_, v6, 1);

      return;
    }
    __break(1u);
  }
  __break(1u);
}

void *sub_1D1709F7C()
{
  uint64_t result = objc_msgSend(*(id *)(v0 + 16), sel_concreteGraph);
  if (!result)
  {
    __break(1u);
    return result;
  }
  id v3 = result;
  if (*(void *)(v0 + 96))
  {
    id v4 = (void *)sub_1D17BDFE0();
    if ((*(unsigned char *)(v0 + 82) & 1) == 0) {
      goto LABEL_4;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  id v4 = 0;
  if (*(unsigned char *)(v0 + 82)) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v1 = *(unsigned __int16 *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 104);
  if (!v5)
  {
LABEL_8:
    uint64_t v6 = 0;
    goto LABEL_9;
  }
  sub_1D16767AC(v5);
  uint64_t v6 = (void *)sub_1D17BDE30();
  swift_bridgeObjectRelease();
LABEL_9:
  id v7 = objc_msgSend(v3, sel_nodesForLabel_domain_properties_, v4, v1, v6);

  sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
  sub_1D1674A20();
  uint64_t v8 = sub_1D17BE350();

  sub_1D1709C14();
  uint64_t v10 = v9;
  uint64_t v21 = sub_1D165C128(0, (unint64_t *)&unk_1EA652DD0);
  *(void *)&long long v20 = v10;
  uint64_t v11 = sub_1D1666CF8(v8);
  swift_bridgeObjectRelease();
  sub_1D16607C4(&v20, v18);
  uint64_t v19 = v11;
  uint64_t v12 = sub_1D169CDF8(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v14 = v12[2];
  unint64_t v13 = v12[3];
  if (v14 >= v13 >> 1) {
    uint64_t v12 = sub_1D169CDF8((void *)(v13 > 1), v14 + 1, 1, v12);
  }
  void v12[2] = v14 + 1;
  id v15 = &v12[5 * v14];
  long long v16 = v18[0];
  long long v17 = v18[1];
  v15[8] = v19;
  *((_OWORD *)v15 + 2) = v16;
  *((_OWORD *)v15 + 3) = v17;
  return v12;
}

uint64_t sub_1D170A16C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651F60);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1D17C91F0;
  *(void *)(v1 + 32) = v0;
  swift_retain();
  sub_1D1709C14();
  uint64_t v3 = v2;
  *(void *)(v1 + 64) = sub_1D165C128(0, (unint64_t *)&unk_1EA652DD0);
  *(void *)(v1 + 40) = v3;
  return v1;
}

void sub_1D170A1E8()
{
}

void sub_1D170A204()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void **)(v0 + 112);
}

uint64_t MAFetchSlice.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D165B3A4(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t MAFetchSlice.__deallocating_deinit()
{
  MAFetchSlice.deinit();
  return MEMORY[0x1F4186488](v0, 120, 7);
}

id sub_1D170A2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t)v3;
  uint64_t v7 = v3[11];
  uint64_t v19 = v3[10];
  uint64_t v20 = v7;
  swift_bridgeObjectRetain();
  sub_1D17BE030();
  sub_1D17BE030();
  uint64_t v9 = v19;
  uint64_t v8 = v20;
  uint64_t v10 = v3[12];
  uint64_t v11 = MEMORY[0x1E4FBC868];
  if (!v10)
  {
    uint64_t v13 = MEMORY[0x1E4FBC868];
    if (!a3) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v19 = v11;
  sub_1D170EE98(v10, (uint64_t)sub_1D170F71C, 0, isUniquelyReferenced_nonNull_native, &v19);
  uint64_t v13 = v19;
  swift_bridgeObjectRelease();
  if (v4) {
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_6:
    swift_bridgeObjectRetain();
    char v14 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = v13;
    sub_1D170EE98(a3, (uint64_t)sub_1D170F71C, 0, v14, &v19);
    uint64_t v13 = v19;
    swift_bridgeObjectRelease();
    if (!v4) {
      goto LABEL_8;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (id)v5;
  }
LABEL_8:
  id result = objc_msgSend(*(id *)(v5 + 16), sel_concreteGraph, v19);
  if (result)
  {
    long long v16 = result;
    uint64_t v17 = *(void *)(v5 + 32);
    type metadata accessor for MAQuerySlice();
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 104) = xmmword_1D17CC410;
    *(void *)(v5 + 80) = v9;
    *(void *)(v5 + 88) = v8;
    *(void *)(v5 + 96) = v13;
    id v18 = objc_msgSend(v16, sel_graphReference);
    *(void *)(v5 + 40) = v11;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(void *)(v5 + 16) = v18;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = v17;

    return (id)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D170A4B4()
{
  swift_bridgeObjectRetain();
  sub_1D17BE020();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 96);
  if (!v2) {
    return result;
  }
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_22;
    }
    int64_t v9 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }
    if (v9 >= v7) {
      goto LABEL_25;
    }
    uint64_t v10 = *(void *)(v3 + 8 * v9);
    ++v8;
    if (!v10)
    {
      int64_t v8 = v9 + 1;
      if (v9 + 1 >= v7) {
        goto LABEL_25;
      }
      uint64_t v10 = *(void *)(v3 + 8 * v8);
      if (!v10)
      {
        int64_t v8 = v9 + 2;
        if (v9 + 2 >= v7) {
          goto LABEL_25;
        }
        uint64_t v10 = *(void *)(v3 + 8 * v8);
        if (!v10) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v6 = (v10 - 1) & v10;
LABEL_22:
    self;
    if (!swift_dynamicCastObjCClass())
    {
      self;
      uint64_t result = swift_dynamicCastObjCClass();
      if (!result) {
        continue;
      }
    }
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_1D17BE5D0();
    swift_unknownObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v11 = v9 + 3;
  if (v11 < v7)
  {
    uint64_t v10 = *(void *)(v3 + 8 * v11);
    if (!v10)
    {
      while (1)
      {
        int64_t v8 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          goto LABEL_30;
        }
        if (v8 >= v7) {
          goto LABEL_25;
        }
        uint64_t v10 = *(void *)(v3 + 8 * v8);
        ++v11;
        if (v10) {
          goto LABEL_21;
        }
      }
    }
    int64_t v8 = v11;
    goto LABEL_21;
  }
LABEL_25:
  return swift_release();
}

uint64_t sub_1D170A6C0()
{
  uint64_t v1 = v0;
  type metadata accessor for MAQuerySlice();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = (void *)v0[2];
    swift_retain();
    uint64_t result = (uint64_t)objc_msgSend(v4, sel_concreteGraph);
    if (!result)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    uint64_t v5 = (void *)result;
    uint64_t v6 = (void *)v3[2];
    swift_retain();
    uint64_t result = (uint64_t)objc_msgSend(v6, sel_concreteGraph);
    if (!result)
    {
LABEL_62:
      __break(1u);
      return result;
    }
    int64_t v7 = (void *)result;
    swift_release();
    sub_1D165C128(0, &qword_1EA6518E0);
    char v8 = sub_1D17BE5C0();

    if (v8 & 1) != 0 && (v1[10] == v3[10] && v1[11] == v3[11] || (sub_1D17BEBC0()))
    {
      uint64_t v9 = v1[12];
      if (!v9) {
        goto LABEL_57;
      }
      uint64_t v10 = v3[12];
      if (!v10) {
        goto LABEL_57;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      char v11 = sub_1D170E5F8(v9, v10);
      uint64_t result = swift_bridgeObjectRelease();
      if (v11)
      {
        int64_t v12 = 0;
        uint64_t v13 = *(void *)(v9 + 64);
        uint64_t v30 = v9 + 64;
        uint64_t v14 = 1 << *(unsigned char *)(v9 + 32);
        uint64_t v15 = -1;
        if (v14 < 64) {
          uint64_t v15 = ~(-1 << v14);
        }
        unint64_t v16 = v15 & v13;
        int64_t v31 = (unint64_t)(v14 + 63) >> 6;
        uint64_t v32 = v10;
        if ((v15 & v13) != 0) {
          goto LABEL_19;
        }
LABEL_20:
        int64_t v20 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
        if (v20 >= v31) {
          goto LABEL_56;
        }
        unint64_t v21 = *(void *)(v30 + 8 * v20);
        ++v12;
        if (!v21)
        {
          int64_t v12 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_56;
          }
          unint64_t v21 = *(void *)(v30 + 8 * v12);
          if (v21) {
            goto LABEL_33;
          }
          int64_t v12 = v20 + 2;
          if (v20 + 2 >= v31)
          {
LABEL_56:
            swift_bridgeObjectRelease();
            swift_release();
LABEL_57:
            swift_release();
            return 1;
          }
          unint64_t v21 = *(void *)(v30 + 8 * v12);
          if (!v21)
          {
            int64_t v22 = v20 + 3;
            if (v22 < v31)
            {
              unint64_t v21 = *(void *)(v30 + 8 * v22);
              if (v21)
              {
                int64_t v12 = v22;
                goto LABEL_33;
              }
              while (1)
              {
                int64_t v12 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_60;
                }
                if (v12 >= v31) {
                  goto LABEL_56;
                }
                unint64_t v21 = *(void *)(v30 + 8 * v12);
                ++v22;
                if (v21) {
                  goto LABEL_33;
                }
              }
            }
            goto LABEL_56;
          }
        }
LABEL_33:
        unint64_t v16 = (v21 - 1) & v21;
        for (unint64_t i = __clz(__rbit64(v21)) + (v12 << 6); ; unint64_t i = v18 | (v12 << 6))
        {
          uint64_t v23 = (uint64_t *)(*(void *)(v9 + 48) + 16 * i);
          uint64_t v24 = v23[1];
          if (*(void *)(v10 + 16))
          {
            uint64_t v25 = *v23;
            swift_bridgeObjectRetain_n();
            swift_unknownObjectRetain();
            unint64_t v26 = sub_1D165A868(v25, v24);
            if (v27)
            {
              uint64_t v28 = *(void *)(*(void *)(v10 + 56) + 8 * v26);
              swift_unknownObjectRetain();
              swift_bridgeObjectRelease();
              goto LABEL_40;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
          }
          uint64_t v28 = 0;
LABEL_40:
          self;
          if (swift_dynamicCastObjCClass())
          {
            if (!v28) {
              goto LABEL_51;
            }
            self;
            if (!swift_dynamicCastObjCClass())
            {
LABEL_52:
              swift_release();
              swift_unknownObjectRelease();
              goto LABEL_53;
            }
            id v29 = &qword_1EA652D30;
          }
          else
          {
            self;
            if (!swift_dynamicCastObjCClass())
            {
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = swift_unknownObjectRelease();
              if (!v16) {
                goto LABEL_20;
              }
              goto LABEL_19;
            }
            if (!v28)
            {
LABEL_51:
              swift_release();
LABEL_53:
              swift_release();
              swift_unknownObjectRelease();
              goto LABEL_54;
            }
            self;
            if (!swift_dynamicCastObjCClass()) {
              goto LABEL_52;
            }
            id v29 = &qword_1EA6514F0;
          }
          sub_1D165C128(0, (unint64_t *)v29);
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          uint64_t v10 = v32;
          char v17 = sub_1D17BE5C0();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease_n();
          uint64_t result = swift_bridgeObjectRelease();
          if ((v17 & 1) == 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_15;
          }
          if (!v16) {
            goto LABEL_20;
          }
LABEL_19:
          unint64_t v18 = __clz(__rbit64(v16));
          v16 &= v16 - 1;
        }
      }
      swift_release();
LABEL_54:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_15:
      swift_release();
    }
    return 0;
  }
  return result;
}

uint64_t sub_1D170AB84()
{
  if (*(void *)(v0 + 72))
  {
    uint64_t v1 = *(void *)(v0 + 64);
LABEL_25:
    swift_bridgeObjectRetain();
    return v1;
  }
  uint64_t v2 = sub_1D170B0C8();
  uint64_t v4 = sub_1D170E7AC(v2, v3);
  swift_bridgeObjectRelease();
  sub_1D16FF86C(v4, (uint64_t)&v12);
  swift_release();
  if (!*((void *)&v13 + 1))
  {
    sub_1D166817C((uint64_t)&v12, &qword_1EA652DA0);
LABEL_15:
    uint64_t v1 = 0;
    goto LABEL_25;
  }
  v16[0] = v12;
  v16[1] = v13;
  uint64_t v17 = v14;
  sub_1D16607C4(v15, v18);
  sub_1D165C164((uint64_t)v16, (uint64_t)&v12);
  sub_1D1668120((uint64_t)v18, (uint64_t)v15);
  if (!swift_dynamicCast())
  {
    sub_1D166817C((uint64_t)v16, &qword_1EA652DA8);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
    goto LABEL_15;
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
  sub_1D165C164((uint64_t)v16, (uint64_t)&v12);
  sub_1D1668120((uint64_t)v18, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652DB0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_1D165C1C0((uint64_t)&v12);
LABEL_24:
    uint64_t v1 = sub_1D17BE010();
    swift_bridgeObjectRelease();
    sub_1D166817C((uint64_t)v16, &qword_1EA652DA8);
    goto LABEL_25;
  }
  uint64_t result = sub_1D165C1C0((uint64_t)&v12);
  if (!(*(void *)&v11[0] >> 62))
  {
    if (*(void *)((*(void *)&v11[0] & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_8;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    long long v12 = 0u;
    long long v13 = 0u;
LABEL_23:
    sub_1D166817C((uint64_t)&v12, &qword_1EBD272F8);
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1D17BEAD0();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_22;
  }
LABEL_8:
  if ((*(void *)&v11[0] & 0xC000000000000001) != 0)
  {
    id v6 = (id)MEMORY[0x1D25F9260](0, *(void *)&v11[0]);
LABEL_11:
    int64_t v7 = v6;
    swift_bridgeObjectRelease();
    char v8 = (void *)sub_1D17BDFE0();
    id v9 = objc_msgSend(v7, sel_propertyForKey_, v8);

    if (v9)
    {
      sub_1D17BE690();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v11, 0, sizeof(v11));
    }
    sub_1D1711B30((uint64_t)v11, (uint64_t)&v12, &qword_1EBD272F8);
    if (*((void *)&v13 + 1))
    {
      if (swift_dynamicCast()) {
        swift_bridgeObjectRelease();
      }
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (*(void *)((*(void *)&v11[0] & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v6 = *(id *)(*(void *)&v11[0] + 32);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_1D170AEA4(uint64_t *a1))(uint64_t)
{
  a1[2] = v1;
  *a1 = sub_1D170AB84();
  a1[1] = v3;
  return sub_1D1709C10;
}

uint64_t sub_1D170AEEC()
{
  v17[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = objc_msgSend(v1, sel_concreteGraph);
  if (!v2) {
    goto LABEL_10;
  }
  uint64_t v3 = v2;
  unsigned int v4 = objc_msgSend(v2, sel_hasPendingRead);

  if (!v4)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v5 = objc_msgSend(v1, sel_concreteGraph);
  if (!v5)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  id v6 = v5;
  uint64_t v7 = sub_1D17BDFE0();
  if (!*(void *)(v0 + 96)) {
    goto LABEL_12;
  }
  char v8 = (void *)v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652DC0);
  id v9 = (void *)sub_1D17BDE30();
  v17[0] = 0;
  id v10 = objc_msgSend(v6, sel_matchWithVisualFormat_elements_error_, v8, v9, v17);

  if (v10)
  {
    id v11 = v17[0];
    id v12 = objc_msgSend(v10, sel_allNamedNodes);
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    sub_1D1674A20();
    uint64_t v13 = sub_1D17BE350();
  }
  else
  {
    id v14 = v17[0];
    uint64_t v15 = (void *)sub_1D17BDCF0();

    swift_willThrow();
    return MEMORY[0x1E4FBC870];
  }
  return v13;
}

uint64_t sub_1D170B0C8()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void *)(v0 + 104);
  }
  else
  {
    sub_1D170B128(v0);
    uint64_t v1 = v2;
    *(void *)(v0 + 104) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1D170B128(uint64_t a1)
{
  v29[1] = *MEMORY[0x1E4F143B8];
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA60]), sel_init);
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    uint64_t v26 = v3 + 64;
    uint64_t v4 = 1 << *(unsigned char *)(v3 + 32);
    uint64_t v5 = -1;
    if (v4 < 64) {
      uint64_t v5 = ~(-1 << v4);
    }
    unint64_t v6 = v5 & *(void *)(v3 + 64);
    int64_t v27 = (unint64_t)(v4 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v7 = 0;
    while (1)
    {
      if (v6)
      {
        unint64_t v8 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v9 = v8 | (v7 << 6);
      }
      else
      {
        int64_t v15 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
          goto LABEL_29;
        }
        if (v15 >= v27) {
          goto LABEL_22;
        }
        unint64_t v16 = *(void *)(v26 + 8 * v15);
        ++v7;
        if (!v16)
        {
          int64_t v7 = v15 + 1;
          if (v15 + 1 >= v27) {
            goto LABEL_22;
          }
          unint64_t v16 = *(void *)(v26 + 8 * v7);
          if (!v16)
          {
            int64_t v7 = v15 + 2;
            if (v15 + 2 >= v27) {
              goto LABEL_22;
            }
            unint64_t v16 = *(void *)(v26 + 8 * v7);
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v27)
              {
LABEL_22:
                swift_release();
                break;
              }
              unint64_t v16 = *(void *)(v26 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  int64_t v7 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    break;
                  }
                  if (v7 >= v27) {
                    goto LABEL_22;
                  }
                  unint64_t v16 = *(void *)(v26 + 8 * v7);
                  ++v17;
                  if (v16) {
                    goto LABEL_21;
                  }
                }
LABEL_29:
                __break(1u);
              }
              int64_t v7 = v17;
            }
          }
        }
LABEL_21:
        unint64_t v6 = (v16 - 1) & v16;
        unint64_t v9 = __clz(__rbit64(v16)) + (v7 << 6);
      }
      uint64_t v10 = *(void *)(*(void *)(v3 + 56) + 8 * v9);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_1D17C9600;
      *(void *)(v11 + 32) = v10;
      v29[0] = v11;
      sub_1D17BE150();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      id v12 = v2;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652DC0);
      uint64_t v13 = (void *)sub_1D17BE110();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      id v14 = (void *)sub_1D17BDFE0();
      swift_bridgeObjectRelease();
      objc_msgSend(v12, sel_setValue_forKey_, v13, v14);

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  unint64_t v18 = self;
  uint64_t v19 = (void *)sub_1D17BDFE0();
  id v28 = 0;
  v29[0] = v2;
  unsigned int v20 = objc_msgSend(v18, sel_scanMatchString_definitions_constraints_forCreation_error_, v19, v29, 0, 0, &v28);

  unint64_t v21 = (void *)v29[0];
  id v22 = v28;
  id v23 = v21;

  if (v20)
  {
    if (v23)
    {
      v29[0] = 0;
      id v24 = v23;
      sub_1D17BDE40();
      if (v29[0])
      {

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    uint64_t v25 = (void *)sub_1D17BDCF0();

    swift_willThrow();
  }
}

uint64_t sub_1D170B4BC()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = v1;
  if (v1 == 1)
  {
    uint64_t v2 = sub_1D170B51C();
    uint64_t v3 = *(void *)(v0 + 112);
    *(void *)(v0 + 112) = v2;
    swift_bridgeObjectRetain();
    sub_1D1711430(v3);
  }
  sub_1D1711B20(v1);
  return v2;
}

uint64_t sub_1D170B51C()
{
  v11[1] = *MEMORY[0x1E4F143B8];
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA48]), sel_init);
  uint64_t v1 = self;
  uint64_t v2 = (void *)sub_1D17BDFE0();
  id v10 = 0;
  v11[0] = v0;
  unsigned int v3 = objc_msgSend(v1, sel_scanMatchString_definitions_constraints_forCreation_error_, v2, 0, v11, 0, &v10);

  uint64_t v4 = (void *)v11[0];
  id v5 = v10;
  id v6 = v4;

  if (v3)
  {
    if (!v6) {
      return 0;
    }
    v11[0] = 0;
    id v6 = v6;
    sub_1D17BE120();

    uint64_t v7 = v11[0];
  }
  else
  {
    unint64_t v8 = (void *)sub_1D17BDCF0();

    swift_willThrow();
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }

  return v7;
}

uint64_t sub_1D170B664(void *a1)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  id v78 = *(id *)(v1 + 16);
  id v3 = objc_msgSend(v78, sel_concreteGraph);
  if (!v3) {
    goto LABEL_112;
  }
  uint64_t v4 = v3;
  unsigned int v5 = objc_msgSend(v3, sel_hasPendingRead);

  if (!v5) {
    goto LABEL_110;
  }
  uint64_t v6 = sub_1D170B0C8();
  uint64_t v7 = v6;
  int64_t v8 = 0;
  uint64_t v9 = v6 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v82 = v6;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          if (v12)
          {
            uint64_t v85 = (v12 - 1) & v12;
            unint64_t v14 = __clz(__rbit64(v12)) | (v8 << 6);
          }
          else
          {
            BOOL v15 = __OFADD__(v8++, 1);
            if (v15) {
              goto LABEL_107;
            }
            if (v8 >= v13) {
              goto LABEL_100;
            }
            unint64_t v16 = *(void *)(v9 + 8 * v8);
            if (!v16)
            {
              int64_t v17 = v8 + 1;
              if (v8 + 1 >= v13) {
                goto LABEL_100;
              }
              unint64_t v16 = *(void *)(v9 + 8 * v17);
              if (!v16)
              {
                int64_t v17 = v8 + 2;
                if (v8 + 2 >= v13) {
                  goto LABEL_100;
                }
                unint64_t v16 = *(void *)(v9 + 8 * v17);
                if (!v16)
                {
                  int64_t v17 = v8 + 3;
                  if (v8 + 3 >= v13) {
                    goto LABEL_100;
                  }
                  unint64_t v16 = *(void *)(v9 + 8 * v17);
                  if (!v16)
                  {
                    while (1)
                    {
                      int64_t v8 = v17 + 1;
                      if (__OFADD__(v17, 1)) {
                        goto LABEL_109;
                      }
                      if (v8 >= v13) {
                        break;
                      }
                      unint64_t v16 = *(void *)(v9 + 8 * v8);
                      ++v17;
                      if (v16) {
                        goto LABEL_20;
                      }
                    }
LABEL_100:
                    swift_release();
                    return 0;
                  }
                }
              }
              int64_t v8 = v17;
            }
LABEL_20:
            uint64_t v85 = (v16 - 1) & v16;
            unint64_t v14 = __clz(__rbit64(v16)) + (v8 << 6);
          }
          sub_1D165C164(*(void *)(v7 + 48) + 40 * v14, (uint64_t)v102);
          sub_1D1668120(*(void *)(v7 + 56) + 32 * v14, (uint64_t)v104);
          v99[0] = v102[0];
          v99[1] = v102[1];
          uint64_t v100 = v103;
          sub_1D16607C4(v104, v101);
          sub_1D165C164((uint64_t)v99, (uint64_t)v96);
          sub_1D1668120((uint64_t)v101, (uint64_t)v98);
          if (swift_dynamicCast()) {
            break;
          }
          sub_1D166817C((uint64_t)v99, &qword_1EA652DA8);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v98);
          unint64_t v12 = v85;
        }
        long long v18 = v92;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v98);
        sub_1D165C164((uint64_t)v99, (uint64_t)v96);
        sub_1D1668120((uint64_t)v101, (uint64_t)v98);
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652DB0);
        if (swift_dynamicCast()) {
          break;
        }
        swift_bridgeObjectRelease();
        sub_1D166817C((uint64_t)v99, &qword_1EA652DA8);
        sub_1D165C1C0((uint64_t)v96);
        unint64_t v12 = v85;
      }
      uint64_t v20 = v9;
      int64_t v21 = v13;
      uint64_t v81 = v19;
      id v22 = a1;
      unint64_t v23 = v92;
      sub_1D165C1C0((uint64_t)v96);
      uint64_t v24 = HIBYTE(*((void *)&v18 + 1)) & 0xFLL;
      if ((*((void *)&v18 + 1) & 0x2000000000000000) == 0) {
        uint64_t v24 = v18 & 0xFFFFFFFFFFFFLL;
      }
      if (!v24)
      {
        sub_1D166817C((uint64_t)v99, &qword_1EA652DA8);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v12 = v85;
        a1 = v22;
        goto LABEL_37;
      }
      unint64_t v84 = v23;
      int64_t v83 = v8;
      swift_bridgeObjectRetain();
      uint64_t v25 = sub_1D17BE060();
      uint64_t v27 = v26;
      swift_bridgeObjectRelease();
      if (v25 != 35 || v27 != 0xE100000000000000) {
        break;
      }
      swift_bridgeObjectRelease();
      a1 = v22;
LABEL_36:
      sub_1D166817C((uint64_t)v99, &qword_1EA652DA8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v8 = v83;
      unint64_t v12 = v85;
LABEL_37:
      int64_t v13 = v21;
      uint64_t v9 = v20;
      uint64_t v7 = v82;
    }
    char v28 = sub_1D17BEBC0();
    swift_bridgeObjectRelease();
    a1 = v22;
    if (v28) {
      goto LABEL_36;
    }
    int64_t v13 = v21;
    if (v84 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v29 = *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v9 = v20;
    uint64_t v7 = v82;
    int64_t v8 = v83;
    if (v29) {
      break;
    }
LABEL_98:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1D166817C((uint64_t)v99, &qword_1EA652DA8);
    unint64_t v12 = v85;
  }
  unint64_t v30 = 0;
  int64_t v76 = v13;
  id v77 = a1;
  uint64_t v74 = v9;
  uint64_t v75 = v29;
  while (2)
  {
    if ((v84 & 0xC000000000000001) != 0)
    {
      id v31 = (id)MEMORY[0x1D25F9260](v30, v84);
    }
    else
    {
      if (v30 >= *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_108;
      }
      id v31 = *(id *)(v84 + 32 + 8 * v30);
    }
    uint64_t v32 = v31;
    BOOL v15 = __OFADD__(v30++, 1);
    if (v15) {
      goto LABEL_106;
    }
    if (!objc_msgSend(a1, sel_matchesNode_includingProperties_, v31, 1))
    {

      goto LABEL_43;
    }
    unint64_t v79 = v30;
    uint64_t v80 = v32;
    uint64_t v33 = sub_1D170B0C8();
    uint64_t v34 = v33;
    int64_t v35 = 0;
    uint64_t v36 = v33 + 64;
    uint64_t v37 = 1 << *(unsigned char *)(v33 + 32);
    if (v37 < 64) {
      uint64_t v38 = ~(-1 << v37);
    }
    else {
      uint64_t v38 = -1;
    }
    unint64_t v39 = v38 & *(void *)(v33 + 64);
    int64_t v86 = (unint64_t)(v37 + 63) >> 6;
    uint64_t v40 = (void *)MEMORY[0x1E4FBC868];
LABEL_56:
    if (v39)
    {
      unint64_t v42 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      unint64_t v43 = v42 | (v35 << 6);
    }
    else
    {
      BOOL v15 = __OFADD__(v35++, 1);
      if (v15) {
        goto LABEL_104;
      }
      if (v35 >= v86)
      {
LABEL_84:
        a1 = v77;
        swift_release();
        long long v92 = v18;
        swift_bridgeObjectRetain();
        sub_1D17BE800();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD27458);
        uint64_t v57 = swift_allocObject();
        *(_OWORD *)(v57 + 16) = xmmword_1D17C9600;
        *(void *)(v57 + 32) = v77;
        *(void *)&long long v92 = v57;
        sub_1D17BE150();
        *((void *)&v93 + 1) = v81;
        sub_1D16607C4(&v92, v90);
        id v58 = v77;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v88[0] = v40;
        sub_1D165EB3C(v90, (uint64_t)v96, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        sub_1D165C1C0((uint64_t)v96);
        id v60 = objc_msgSend(v78, sel_concreteGraph);
        if (!v60) {
          goto LABEL_111;
        }
        uint64_t v61 = v60;
        uint64_t v62 = (void *)sub_1D17BDE30();
        swift_bridgeObjectRelease();
        uint64_t v7 = v82;
        uint64_t v9 = v74;
        int64_t v13 = v76;
        if (sub_1D170B4BC())
        {
          id v63 = (void *)sub_1D17BE110();
          swift_bridgeObjectRelease();
        }
        else
        {
          id v63 = 0;
        }
        unint64_t v30 = v79;
        *(void *)&v96[0] = 0;
        id v64 = objc_msgSend(v61, sel_matchWithDefinitions_constraints_error_, v62, v63, v96);

        if (!v64)
        {
          id v70 = *(id *)&v96[0];
          unint64_t v71 = (void *)sub_1D17BDCF0();

          swift_willThrow();
LABEL_94:
          int64_t v8 = v83;
          uint64_t v29 = v75;
          goto LABEL_43;
        }
        id v65 = *(id *)&v96[0];
        unint64_t v66 = (void *)sub_1D17BDFE0();
        id v67 = objc_msgSend(v64, sel_nodesForName_, v66);

        if (!v67)
        {

          goto LABEL_94;
        }
        sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
        sub_1D1674A20();
        uint64_t v68 = sub_1D17BE350();

        if ((v68 & 0xC000000000000001) != 0) {
          uint64_t v69 = sub_1D17BE760();
        }
        else {
          uint64_t v69 = *(void *)(v68 + 16);
        }
        swift_bridgeObjectRelease();

        BOOL v72 = v69 < 1;
        int64_t v8 = v83;
        uint64_t v29 = v75;
        if (!v72)
        {
LABEL_102:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1D166817C((uint64_t)v99, &qword_1EA652DA8);
          swift_release();
          return 1;
        }
LABEL_43:
        if (v30 == v29) {
          goto LABEL_98;
        }
        continue;
      }
      unint64_t v44 = *(void *)(v36 + 8 * v35);
      if (!v44)
      {
        int64_t v45 = v35 + 1;
        if (v35 + 1 >= v86) {
          goto LABEL_84;
        }
        unint64_t v44 = *(void *)(v36 + 8 * v45);
        if (!v44)
        {
          int64_t v45 = v35 + 2;
          if (v35 + 2 >= v86) {
            goto LABEL_84;
          }
          unint64_t v44 = *(void *)(v36 + 8 * v45);
          if (!v44)
          {
            int64_t v45 = v35 + 3;
            if (v35 + 3 >= v86) {
              goto LABEL_84;
            }
            unint64_t v44 = *(void *)(v36 + 8 * v45);
            if (!v44)
            {
              while (1)
              {
                int64_t v35 = v45 + 1;
                if (__OFADD__(v45, 1)) {
                  goto LABEL_105;
                }
                if (v35 >= v86) {
                  goto LABEL_84;
                }
                unint64_t v44 = *(void *)(v36 + 8 * v35);
                ++v45;
                if (v44) {
                  goto LABEL_68;
                }
              }
            }
          }
        }
        int64_t v35 = v45;
      }
LABEL_68:
      unint64_t v39 = (v44 - 1) & v44;
      unint64_t v43 = __clz(__rbit64(v44)) + (v35 << 6);
    }
    break;
  }
  sub_1D165C164(*(void *)(v34 + 48) + 40 * v43, (uint64_t)v96);
  sub_1D1668120(*(void *)(v34 + 56) + 32 * v43, (uint64_t)v98);
  long long v92 = v96[0];
  long long v93 = v96[1];
  uint64_t v94 = v97;
  sub_1D16607C4(v98, v95);
  sub_1D165C164((uint64_t)&v92, (uint64_t)v90);
  sub_1D1668120((uint64_t)v95, (uint64_t)v91);
  sub_1D165C164((uint64_t)&v92, (uint64_t)v88);
  sub_1D1668120((uint64_t)v95, (uint64_t)v89);
  sub_1D16607C4(v89, v87);
  char v46 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v48 = sub_1D165A824((uint64_t)v90);
  uint64_t v49 = v40[2];
  BOOL v50 = (v47 & 1) == 0;
  uint64_t v51 = v49 + v50;
  if (__OFADD__(v49, v50))
  {
    __break(1u);
    goto LABEL_102;
  }
  char v52 = v47;
  if (v40[3] >= v51)
  {
    if (v46)
    {
      if ((v47 & 1) == 0) {
        goto LABEL_76;
      }
    }
    else
    {
      sub_1D16A6BF8();
      if ((v52 & 1) == 0) {
        goto LABEL_76;
      }
    }
    goto LABEL_54;
  }
  sub_1D16A2BC8(v51, v46);
  unint64_t v53 = sub_1D165A824((uint64_t)v90);
  if ((v52 & 1) == (v54 & 1))
  {
    unint64_t v48 = v53;
    if ((v52 & 1) == 0)
    {
LABEL_76:
      v40[(v48 >> 6) + 8] |= 1 << v48;
      sub_1D165C164((uint64_t)v90, v40[6] + 40 * v48);
      sub_1D16607C4(v87, (_OWORD *)(v40[7] + 32 * v48));
      uint64_t v55 = v40[2];
      BOOL v15 = __OFADD__(v55, 1);
      uint64_t v56 = v55 + 1;
      if (v15)
      {
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
      }
      v40[2] = v56;
      goto LABEL_55;
    }
LABEL_54:
    uint64_t v41 = (_OWORD *)(v40[7] + 32 * v48);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
    sub_1D16607C4(v87, v41);
LABEL_55:
    swift_bridgeObjectRelease();
    sub_1D165C1C0((uint64_t)v90);
    sub_1D166817C((uint64_t)&v92, &qword_1EA652DA8);
    sub_1D165C1C0((uint64_t)v88);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v91);
    goto LABEL_56;
  }
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

void *sub_1D170C19C()
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_concreteGraph);
  if (!v1) {
    goto LABEL_49;
  }
  uint64_t v2 = v1;
  uint64_t v3 = sub_1D17BDFE0();
  if (!*(void *)(v0 + 96)) {
LABEL_50:
  }
    __break(1u);
  uint64_t v4 = (void *)v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652DC0);
  unsigned int v5 = (void *)sub_1D17BDE30();
  *(void *)&v59[0] = 0;
  id v6 = objc_msgSend(v2, sel_matchWithVisualFormat_elements_error_, v4, v5, v59);

  if (v6)
  {
    id v7 = *(id *)&v59[0];
    uint64_t v8 = sub_1D170B0C8();
    uint64_t v9 = v8;
    int64_t v10 = 0;
    uint64_t v11 = v8 + 64;
    uint64_t v12 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v13 = -1;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    unint64_t v14 = v13 & *(void *)(v8 + 64);
    int64_t v50 = (unint64_t)(v12 + 63) >> 6;
    unint64_t v48 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v49 = v8 + 64;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            if (v14)
            {
              unint64_t v15 = __clz(__rbit64(v14));
              v14 &= v14 - 1;
              unint64_t v16 = v15 | (v10 << 6);
            }
            else
            {
              int64_t v17 = v10 + 1;
              if (__OFADD__(v10, 1))
              {
                __break(1u);
                goto LABEL_48;
              }
              if (v17 >= v50) {
                goto LABEL_45;
              }
              unint64_t v18 = *(void *)(v11 + 8 * v17);
              ++v10;
              if (!v18)
              {
                int64_t v10 = v17 + 1;
                if (v17 + 1 >= v50) {
                  goto LABEL_45;
                }
                unint64_t v18 = *(void *)(v11 + 8 * v10);
                if (!v18)
                {
                  int64_t v10 = v17 + 2;
                  if (v17 + 2 >= v50) {
                    goto LABEL_45;
                  }
                  unint64_t v18 = *(void *)(v11 + 8 * v10);
                  if (!v18)
                  {
                    int64_t v19 = v17 + 3;
                    if (v19 >= v50)
                    {
LABEL_45:

                      swift_release();
                      return v48;
                    }
                    unint64_t v18 = *(void *)(v11 + 8 * v19);
                    if (!v18)
                    {
                      while (1)
                      {
                        int64_t v10 = v19 + 1;
                        if (__OFADD__(v19, 1)) {
                          break;
                        }
                        if (v10 >= v50) {
                          goto LABEL_45;
                        }
                        unint64_t v18 = *(void *)(v11 + 8 * v10);
                        ++v19;
                        if (v18) {
                          goto LABEL_23;
                        }
                      }
LABEL_48:
                      __break(1u);
LABEL_49:
                      __break(1u);
                      goto LABEL_50;
                    }
                    int64_t v10 = v19;
                  }
                }
              }
LABEL_23:
              unint64_t v14 = (v18 - 1) & v18;
              unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
            }
            sub_1D165C164(*(void *)(v9 + 48) + 40 * v16, (uint64_t)v59);
            sub_1D1668120(*(void *)(v9 + 56) + 32 * v16, (uint64_t)v61);
            v56[0] = v59[0];
            v56[1] = v59[1];
            uint64_t v57 = v60;
            sub_1D16607C4(v61, v58);
            sub_1D165C164((uint64_t)v56, (uint64_t)v53);
            sub_1D1668120((uint64_t)v58, (uint64_t)v55);
            if (swift_dynamicCast()) {
              break;
            }
            sub_1D166817C((uint64_t)v56, &qword_1EA652DA8);
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v55);
          }
          long long v20 = v51;
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v55);
          sub_1D165C164((uint64_t)v56, (uint64_t)v53);
          sub_1D1668120((uint64_t)v58, (uint64_t)v55);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652DB0);
          if (swift_dynamicCast()) {
            break;
          }
          swift_bridgeObjectRelease();
          sub_1D166817C((uint64_t)v56, &qword_1EA652DA8);
          sub_1D165C1C0((uint64_t)v53);
        }
        swift_bridgeObjectRelease();
        sub_1D165C1C0((uint64_t)v53);
        uint64_t v21 = HIBYTE(*((void *)&v20 + 1)) & 0xFLL;
        if ((*((void *)&v20 + 1) & 0x2000000000000000) == 0) {
          uint64_t v21 = v20 & 0xFFFFFFFFFFFFLL;
        }
        if (v21) {
          break;
        }
        sub_1D166817C((uint64_t)v56, &qword_1EA652DA8);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_1D17BE060();
      uint64_t v24 = v23;
      swift_bridgeObjectRelease();
      if (v22 == 35 && v24 == 0xE100000000000000) {
        break;
      }
      char v25 = sub_1D17BEBC0();
      swift_bridgeObjectRelease();
      if (v25) {
        goto LABEL_35;
      }
      uint64_t v26 = (void *)sub_1D17BDFE0();
      id v27 = objc_msgSend(v6, sel_nodesForName_, v26);

      if (v27)
      {
        sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
        sub_1D1674A20();
        uint64_t v47 = sub_1D17BE350();

        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D70);
        uint64_t v28 = swift_allocObject();
        *(void *)&long long v51 = v28;
        id v45 = self;
        unint64_t v42 = (void *)sub_1D17BDFE0();
        unint64_t v43 = (void *)sub_1D17BDE30();
        id v29 = objc_msgSend(v45, sel_visualStringWithFormat_elements_, v42, v43);

        uint64_t v30 = sub_1D17BDFF0();
        uint64_t v44 = v31;
        id v46 = (id)v30;

        *(void *)(v28 + 16) = v46;
        *(void *)(v28 + 24) = v44;
        *(_OWORD *)(v28 + 32) = v20;
        uint64_t v32 = sub_1D1666CF8(v47);
        swift_bridgeObjectRelease();
        sub_1D16607C4(&v51, v53);
        uint64_t v54 = v32;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v33 = v48;
        }
        else {
          uint64_t v33 = sub_1D169CDF8(0, v48[2] + 1, 1, v48);
        }
        unint64_t v35 = v33[2];
        unint64_t v34 = v33[3];
        uint64_t v11 = v49;
        if (v35 >= v34 >> 1) {
          uint64_t v33 = sub_1D169CDF8((void *)(v34 > 1), v35 + 1, 1, v33);
        }
        v33[2] = v35 + 1;
        unint64_t v48 = v33;
        uint64_t v36 = &v33[5 * v35];
        long long v37 = v53[0];
        long long v38 = v53[1];
        v36[8] = v54;
        *((_OWORD *)v36 + 2) = v37;
        *((_OWORD *)v36 + 3) = v38;
        sub_1D166817C((uint64_t)v56, &qword_1EA652DA8);
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1D166817C((uint64_t)v56, &qword_1EA652DA8);
LABEL_36:
        uint64_t v11 = v49;
      }
    }
    swift_bridgeObjectRelease();
LABEL_35:
    sub_1D166817C((uint64_t)v56, &qword_1EA652DA8);
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  id v40 = *(id *)&v59[0];
  uint64_t v41 = (void *)sub_1D17BDCF0();

  swift_willThrow();
  return (void *)MEMORY[0x1E4FBC860];
}

uint64_t sub_1D170C84C()
{
  uint64_t result = sub_1D170B0C8();
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 64;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  unint64_t v34 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v36 = result + 64;
  int64_t v35 = v7;
  while (v6)
  {
    unint64_t v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v9 = v8 | (v2 << 6);
LABEL_21:
    sub_1D165C164(*(void *)(v1 + 48) + 40 * v9, (uint64_t)v45);
    sub_1D1668120(*(void *)(v1 + 56) + 32 * v9, (uint64_t)v47);
    v42[0] = v45[0];
    v42[1] = v45[1];
    uint64_t v43 = v46;
    sub_1D16607C4(v47, v44);
    sub_1D165C164((uint64_t)v42, (uint64_t)v39);
    sub_1D1668120((uint64_t)v44, (uint64_t)v41);
    if (swift_dynamicCast())
    {
      long long v13 = v37;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
      sub_1D165C164((uint64_t)v42, (uint64_t)v39);
      sub_1D1668120((uint64_t)v44, (uint64_t)v41);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652DB0);
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        sub_1D165C1C0((uint64_t)v39);
        uint64_t v14 = HIBYTE(*((void *)&v13 + 1)) & 0xFLL;
        if ((*((void *)&v13 + 1) & 0x2000000000000000) == 0) {
          uint64_t v14 = v13 & 0xFFFFFFFFFFFFLL;
        }
        if (v14)
        {
          swift_bridgeObjectRetain();
          uint64_t v15 = sub_1D17BE060();
          uint64_t v17 = v16;
          swift_bridgeObjectRelease();
          if (v15 == 35 && v17 == 0xE100000000000000)
          {
            swift_bridgeObjectRelease();
            goto LABEL_32;
          }
          char v18 = sub_1D17BEBC0();
          swift_bridgeObjectRelease();
          if (v18)
          {
LABEL_32:
            sub_1D166817C((uint64_t)v42, &qword_1EA652DA8);
            uint64_t result = swift_bridgeObjectRelease();
            int64_t v7 = v35;
            uint64_t v3 = v36;
          }
          else
          {
            uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D70);
            uint64_t v32 = swift_allocObject();
            *(void *)&long long v37 = v32;
            uint64_t v19 = sub_1D17BDFE0();
            long long v20 = *(void **)(v33 + 96);
            if (v20)
            {
              __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652DC0);
              long long v20 = (void *)sub_1D17BDE30();
            }
            id v21 = objc_msgSend(self, sel_visualStringWithFormat_elements_, v19, v20);
            uint64_t v22 = (void *)v19;
            id v23 = v21;

            uint64_t v24 = sub_1D17BDFF0();
            uint64_t v31 = v25;

            *(void *)(v32 + 16) = v24;
            *(void *)(v32 + 24) = v31;
            *(_OWORD *)(v32 + 32) = v13;
            *(void *)&v39[0] = v33;
            sub_1D16607C4(&v37, (_OWORD *)((char *)v39 + 8));
            swift_retain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v34 = sub_1D169CBC4(0, v34[2] + 1, 1, v34);
            }
            int64_t v7 = v35;
            unint64_t v27 = v34[2];
            unint64_t v26 = v34[3];
            if (v27 >= v26 >> 1) {
              unint64_t v34 = sub_1D169CBC4((void *)(v26 > 1), v27 + 1, 1, v34);
            }
            v34[2] = v27 + 1;
            uint64_t v28 = &v34[5 * v27];
            long long v29 = v39[0];
            long long v30 = v39[1];
            v28[8] = v40;
            *((_OWORD *)v28 + 2) = v29;
            *((_OWORD *)v28 + 3) = v30;
            uint64_t result = sub_1D166817C((uint64_t)v42, &qword_1EA652DA8);
            uint64_t v3 = v36;
          }
        }
        else
        {
          sub_1D166817C((uint64_t)v42, &qword_1EA652DA8);
          uint64_t result = swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1D166817C((uint64_t)v42, &qword_1EA652DA8);
        uint64_t result = sub_1D165C1C0((uint64_t)v39);
      }
    }
    else
    {
      sub_1D166817C((uint64_t)v42, &qword_1EA652DA8);
      uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
    }
  }
  int64_t v10 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v10 >= v7) {
    goto LABEL_40;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v10);
  ++v2;
  if (v11) {
    goto LABEL_20;
  }
  int64_t v2 = v10 + 1;
  if (v10 + 1 >= v7) {
    goto LABEL_40;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v2);
  if (v11) {
    goto LABEL_20;
  }
  int64_t v2 = v10 + 2;
  if (v10 + 2 >= v7) {
    goto LABEL_40;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v2);
  if (v11)
  {
LABEL_20:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
    goto LABEL_21;
  }
  int64_t v12 = v10 + 3;
  if (v12 >= v7)
  {
LABEL_40:
    swift_release();
    return (uint64_t)v34;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    int64_t v2 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v2 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_40;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v2);
    ++v12;
    if (v11) {
      goto LABEL_20;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

void sub_1D170CD34()
{
}

void sub_1D170CD50()
{
}

uint64_t sub_1D170CD7C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 112);
  return sub_1D1711430(v1);
}

uint64_t MAQuerySlice.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D165B3A4(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D1711430(*(void *)(v0 + 112));
  return v0;
}

uint64_t MAQuerySlice.__deallocating_deinit()
{
  MAQuerySlice.deinit();
  return MEMORY[0x1F4186488](v0, 120, 7);
}

unint64_t MASlice.similarityMatrix(distance:directed:options:identity:)(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  int64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(a1 + 96);
  swift_bridgeObjectRetain();
  unint64_t v8 = v7(a2, a3);
  unint64_t result = (unint64_t)objc_msgSend(v4[2], sel_concreteGraph);
  if (!result) {
    goto LABEL_98;
  }
  int64_t v10 = (void *)result;
  (*(void (**)(void))(*(void *)v8 + 104))();

  unint64_t v67 = MEMORY[0x1E4FBC860];
  uint64_t v11 = (*((uint64_t (**)(void))*v4 + 27))();
  sub_1D16634F8(v11);
  uint64_t v12 = v67;
  unint64_t v13 = v67 >> 62;
  if (v67 >> 62) {
    goto LABEL_95;
  }
  uint64_t v14 = *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v15 = v14;
LABEL_4:
  unint64_t result = v15 * v14;
  if ((unsigned __int128)(v15 * (__int128)v14) >> 64 != (v15 * v14) >> 63)
  {
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
    return result;
  }
  uint64_t v48 = v15;
  unint64_t v64 = v8;
  uint64_t v16 = (void *)sub_1D1665914(result, 0.0);
  uint64_t v65 = v12;
  uint64_t v63 = v14;
  if ((a2 & 1) == 0)
  {
    uint64_t v19 = v12 & 0xFFFFFFFFFFFFFF8;
    if (!v13)
    {
      unint64_t v8 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v8) {
        goto LABEL_73;
      }
      uint64_t v52 = v8;
      uint64_t v20 = v8;
      goto LABEL_35;
    }
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v52 = sub_1D17BEAD0();
    if (!v52) {
      goto LABEL_73;
    }
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_1D17BEAD0();
    unint64_t result = swift_bridgeObjectRelease();
    if ((v20 & 0x8000000000000000) == 0)
    {
LABEL_35:
      int64_t v27 = 0;
      unint64_t v55 = v12 & 0xC000000000000001;
      uint64_t v56 = v12 + 32;
      if (v12 < 0) {
        LOBYTE(a2) = v12;
      }
      else {
        LOBYTE(a2) = v19;
      }
      uint64_t v53 = (2 * v20) | 1;
      uint64_t v54 = v19 + 32;
      uint64_t v57 = v20 + 1;
      char v59 = a2;
      uint64_t v50 = v19;
      unint64_t v51 = v13;
      uint64_t v49 = v20;
      while (1)
      {
        uint64_t v28 = *(void *)(v19 + 16);
        if (v27 >= (unint64_t)v28) {
          goto LABEL_88;
        }
        if (v27 == v57) {
          goto LABEL_89;
        }
        long long v29 = *(void **)(v56 + 8 * v27);
        if (v13)
        {
          swift_bridgeObjectRetain();
          id v31 = v29;
          uint64_t v32 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
          if (v32 < v27) {
            goto LABEL_92;
          }
          swift_bridgeObjectRetain();
          uint64_t v28 = sub_1D17BEAD0();
          swift_bridgeObjectRelease();
        }
        else
        {
          id v30 = v29;
        }
        if (v28 < v20) {
          goto LABEL_90;
        }
        if (v55 && v27 != v20)
        {
          if (v27 >= v20) {
            goto LABEL_93;
          }
          sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
          int64_t v33 = v27;
          do
          {
            int64_t v34 = v33 + 1;
            sub_1D17BE890();
            int64_t v33 = v34;
          }
          while (v20 != v34);
        }
        swift_bridgeObjectRetain();
        a2 = v53;
        uint64_t v35 = v54;
        uint64_t v12 = v27;
        if (v13)
        {
          sub_1D17BEAE0();
          uint64_t v35 = v36;
          uint64_t v12 = v37;
          a2 = v38;
          swift_bridgeObjectRelease();
        }
        unint64_t v8 = a2 >> 1;
        if (a2 >> 1 != v12)
        {
          char v39 = sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
          unint64_t v40 = v8 - v12;
          if ((uint64_t)v8 <= v12) {
            goto LABEL_94;
          }
          LOBYTE(a2) = v39;
          unint64_t v13 = 0;
          int64_t v62 = v27 * v63;
          uint64_t v14 = v35 + 8 * v12;
          while (!__OFADD__(v13, 1))
          {
            uint64_t v12 = (uint64_t)*(id *)(v14 + 8 * v13);
            if (sub_1D17BE5C0() & 1) == 0 || (a4)
            {
              (*(void (**)(void *, uint64_t))(*(void *)v64 + 112))(v29, v12);
              unint64_t v42 = v13 + v27;
              if (__OFADD__(v13, v27)) {
                goto LABEL_80;
              }
              if ((unsigned __int128)(v27 * (__int128)v63) >> 64 != (v27 * v63) >> 63) {
                goto LABEL_81;
              }
              unint64_t v8 = v62 + v42;
              if (__OFADD__(v62, v42)) {
                goto LABEL_82;
              }
              uint64_t v43 = v41;
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                if ((v8 & 0x8000000000000000) != 0) {
                  goto LABEL_72;
                }
              }
              else
              {
                uint64_t v16 = sub_1D1667604(v16);
                if ((v8 & 0x8000000000000000) != 0)
                {
LABEL_72:
                  __break(1u);
                  goto LABEL_73;
                }
              }
              unint64_t v44 = v16[2];
              if (v8 >= v44) {
                goto LABEL_83;
              }
              v16[v8 + 4] = v43;
              uint64_t v45 = v42 * v63;
              if ((unsigned __int128)((uint64_t)v42 * (__int128)v63) >> 64 != (uint64_t)(v42 * v63) >> 63) {
                goto LABEL_84;
              }
              BOOL v46 = __OFADD__(v45, v27);
              unint64_t v47 = v45 + v27;
              if (v46) {
                goto LABEL_85;
              }
              if (v47 >= v44) {
                goto LABEL_86;
              }
              v16[v47 + 4] = v43;
            }

            if (v40 == ++v13) {
              goto LABEL_39;
            }
          }
          __break(1u);
          goto LABEL_77;
        }
LABEL_39:
        ++v27;

        swift_unknownObjectRelease();
        unint64_t v13 = v51;
        uint64_t v12 = v65;
        uint64_t v20 = v49;
        uint64_t v19 = v50;
        LOBYTE(a2) = v59;
        if (v27 == v52)
        {
          swift_bridgeObjectRelease();
          uint64_t v14 = v63;
          goto LABEL_74;
        }
      }
    }
    goto LABEL_97;
  }
  if (v13)
  {
    uint64_t v61 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_1D17BEAD0();
    if (v21)
    {
      uint64_t v17 = v21;
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_1D17BEAD0();
      swift_bridgeObjectRelease();
LABEL_14:
      unint64_t v22 = 0;
      uint64_t v58 = v17;
      uint64_t v60 = v12 + 32;
      do
      {
        if (v22 >= *(void *)(v61 + 16)) {
          goto LABEL_87;
        }
        if (v18)
        {
          unint64_t v8 = *(void *)(v60 + 8 * v22);
          uint64_t v23 = sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
          if (v18 < 1) {
            goto LABEL_91;
          }
          unint64_t v13 = v23;
          uint64_t v19 = v22 * v14;
          uint64_t v14 = (unsigned __int128)((uint64_t)v22 * (__int128)v14) >> 64 != (uint64_t)(v22 * v14) >> 63;
          swift_bridgeObjectRetain();
          id v24 = (id)v8;
          a2 = 0;
          while (1)
          {
            uint64_t v12 = (uint64_t)*(id *)(v12 + 8 * a2 + 32);
            if (sub_1D17BE5C0() & 1) == 0 || (a4)
            {
              (*(void (**)(id, uint64_t))(*(void *)v64 + 112))(v24, v12);
              if (v14)
              {
LABEL_77:
                __break(1u);
LABEL_78:
                __break(1u);
LABEL_79:
                __break(1u);
LABEL_80:
                __break(1u);
LABEL_81:
                __break(1u);
LABEL_82:
                __break(1u);
LABEL_83:
                __break(1u);
LABEL_84:
                __break(1u);
LABEL_85:
                __break(1u);
LABEL_86:
                __break(1u);
LABEL_87:
                __break(1u);
LABEL_88:
                __break(1u);
LABEL_89:
                __break(1u);
LABEL_90:
                __break(1u);
LABEL_91:
                __break(1u);
LABEL_92:
                __break(1u);
LABEL_93:
                __break(1u);
LABEL_94:
                __break(1u);
LABEL_95:
                swift_bridgeObjectRetain();
                uint64_t v15 = sub_1D17BEAD0();
                uint64_t v14 = sub_1D17BEAD0();
                swift_bridgeObjectRelease();
                goto LABEL_4;
              }
              unint64_t v8 = v19 + a2;
              if (__OFADD__(v19, a2)) {
                goto LABEL_78;
              }
              uint64_t v26 = v25;
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                if ((v8 & 0x8000000000000000) != 0) {
                  goto LABEL_32;
                }
              }
              else
              {
                uint64_t v16 = sub_1D1667604(v16);
                if ((v8 & 0x8000000000000000) != 0)
                {
LABEL_32:
                  __break(1u);
                  goto LABEL_33;
                }
              }
              if (v8 >= v16[2]) {
                goto LABEL_79;
              }
              v16[v8 + 4] = v26;
            }
            ++a2;

            uint64_t v12 = v65;
            if (v18 == a2)
            {

              swift_bridgeObjectRelease();
              uint64_t v14 = v63;
              uint64_t v17 = v58;
              break;
            }
          }
        }
        ++v22;
      }
      while (v22 != v17);
    }
  }
  else
  {
    uint64_t v61 = v12 & 0xFFFFFFFFFFFFFF8;
    uint64_t v17 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17)
    {
      uint64_t v18 = v17;
      goto LABEL_14;
    }
  }
LABEL_73:
  swift_bridgeObjectRelease();
LABEL_74:
  swift_release();
  type metadata accessor for MASquareMatrixRepresentation();
  unint64_t result = swift_allocObject();
  *(void *)(result + 16) = v48;
  *(void *)(result + 24) = v14;
  *(void *)(result + 32) = v16;
  *(void *)(result + 40) = v12;
  return result;
}

unint64_t sub_1D170D54C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  return MASlice.similarityMatrix(distance:directed:options:identity:)(a1, a2, a3, a4);
}

void __swiftcall MASlice.graphRepresentation()(MAGraph *__return_ptr retstr)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)MAGraph), sel_init);
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 216))();
  v61[0] = MEMORY[0x1E4FBC868];
  uint64_t v59 = v3;
  unint64_t v53 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1D17BE710();
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v4 = v61[1];
    uint64_t v57 = v61[2];
    uint64_t v5 = v61[3];
    uint64_t v6 = v61[4];
    unint64_t v7 = v61[5];
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(v3 + 32);
    uint64_t v57 = v3 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(v3 + 56);
    uint64_t v6 = 0;
    uint64_t v4 = swift_bridgeObjectRetain();
  }
  uint64_t v52 = v5;
  int64_t v56 = (unint64_t)(v5 + 64) >> 6;
  if (v4 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v7)
    {
      uint64_t v11 = (v7 - 1) & v7;
      unint64_t v12 = __clz(__rbit64(v7)) | (v6 << 6);
      uint64_t v13 = v6;
      goto LABEL_27;
    }
    int64_t v16 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_62:
      __break(1u);
      return;
    }
    if (v16 >= v56) {
      goto LABEL_30;
    }
    unint64_t v17 = *(void *)(v57 + 8 * v16);
    uint64_t v13 = v6 + 1;
    if (!v17)
    {
      uint64_t v13 = v6 + 2;
      if (v6 + 2 >= v56) {
        goto LABEL_30;
      }
      unint64_t v17 = *(void *)(v57 + 8 * v13);
      if (!v17)
      {
        uint64_t v13 = v6 + 3;
        if (v6 + 3 >= v56) {
          goto LABEL_30;
        }
        unint64_t v17 = *(void *)(v57 + 8 * v13);
        if (!v17)
        {
          uint64_t v13 = v6 + 4;
          if (v6 + 4 >= v56) {
            goto LABEL_30;
          }
          unint64_t v17 = *(void *)(v57 + 8 * v13);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v11 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_27:
    id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
    if (!v15) {
      goto LABEL_30;
    }
    while (1)
    {
      id v19 = objc_msgSend(v15, sel_label, v52);
      id v20 = objc_msgSend(v15, sel_domain);
      objc_msgSend(v15, sel_weight);
      int v22 = v21;
      id v23 = objc_msgSend(v15, sel_propertyDictionary);
      uint64_t v24 = sub_1D17BDE50();

      sub_1D16771C0(v24);
      swift_bridgeObjectRelease();
      uint64_t v25 = (void *)sub_1D17BDE30();
      swift_bridgeObjectRelease();
      LODWORD(v26) = v22;
      id v27 = objc_msgSend(v2, sel_addUniqueNodeWithLabel_domain_weight_properties_didCreate_, v19, v20, v25, 0, v26);

      id v28 = objc_msgSend(v15, sel_identifier);
      id v29 = v27;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v61[0];
      sub_1D165F62C((uint64_t)v29, (unint64_t)v28, isUniquelyReferenced_nonNull_native);

      swift_bridgeObjectRelease();
      uint64_t v6 = v13;
      unint64_t v7 = v11;
      if ((v4 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      uint64_t v14 = sub_1D17BE7A0();
      if (v14)
      {
        uint64_t v62 = v14;
        sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v15 = (id)aBlock[0];
        swift_unknownObjectRelease();
        uint64_t v13 = v6;
        uint64_t v11 = v7;
        if (aBlock[0]) {
          continue;
        }
      }
      goto LABEL_30;
    }
  }
  uint64_t v18 = v6 + 5;
  while (v56 != v18)
  {
    unint64_t v17 = *(void *)(v57 + 8 * v18++);
    if (v17)
    {
      uint64_t v13 = v18 - 1;
      goto LABEL_26;
    }
  }
LABEL_30:
  sub_1D1668088();
  if (v53)
  {
    id v31 = v2;
    swift_bridgeObjectRetain();
    sub_1D17BE710();
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    sub_1D1674A20();
    sub_1D17BE390();
    uint64_t v32 = v62;
    uint64_t v55 = v63;
    uint64_t v33 = v64;
    uint64_t v34 = v65;
    unint64_t v35 = v66;
  }
  else
  {
    id v31 = v2;
    uint64_t v36 = -1 << *(unsigned char *)(v59 + 32);
    uint64_t v55 = v59 + 56;
    uint64_t v33 = ~v36;
    uint64_t v37 = -v36;
    if (v37 < 64) {
      uint64_t v38 = ~(-1 << v37);
    }
    else {
      uint64_t v38 = -1;
    }
    unint64_t v35 = v38 & *(void *)(v59 + 56);
    uint64_t v32 = swift_bridgeObjectRetain();
    uint64_t v34 = 0;
  }
  char v39 = 0;
  int64_t v54 = (unint64_t)(v33 + 64) >> 6;
  uint64_t v58 = v32;
  while (2)
  {
    if (v32 < 0)
    {
      if (!sub_1D17BE7A0()) {
        goto LABEL_60;
      }
      sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v43 = (id)aBlock[0];
      swift_unknownObjectRelease();
      uint64_t v42 = v34;
      uint64_t v40 = v35;
      if (!v43) {
        goto LABEL_60;
      }
      goto LABEL_58;
    }
    if (v35)
    {
      uint64_t v40 = (v35 - 1) & v35;
      unint64_t v41 = __clz(__rbit64(v35)) | (v34 << 6);
      uint64_t v42 = v34;
LABEL_57:
      id v43 = *(id *)(*(void *)(v32 + 48) + 8 * v41);
      if (!v43) {
        goto LABEL_60;
      }
LABEL_58:
      unint64_t v47 = (void *)swift_allocObject();
      _OWORD v47[2] = v43;
      v47[3] = v59;
      v47[4] = v61;
      v47[5] = v31;
      swift_bridgeObjectRetain();
      id v48 = v43;
      id v49 = v31;
      sub_1D165B3A4((uint64_t)v39);
      uint64_t v50 = swift_allocObject();
      char v39 = sub_1D1711488;
      *(void *)(v50 + 16) = sub_1D1711488;
      *(void *)(v50 + 24) = v47;
      aBlock[4] = sub_1D17114A4;
      aBlock[5] = v50;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1D170DFDC;
      aBlock[3] = &block_descriptor_1;
      unint64_t v51 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v48, sel_enumerateOutEdgesUsingBlock_, v51);

      _Block_release(v51);
      LOBYTE(v51) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      uint64_t v34 = v42;
      unint64_t v35 = v40;
      uint64_t v32 = v58;
      if (v51)
      {
        __break(1u);
        goto LABEL_60;
      }
      continue;
    }
    break;
  }
  int64_t v44 = v34 + 1;
  if (__OFADD__(v34, 1)) {
    goto LABEL_62;
  }
  if (v44 >= v54) {
    goto LABEL_60;
  }
  unint64_t v45 = *(void *)(v55 + 8 * v44);
  uint64_t v42 = v34 + 1;
  if (v45) {
    goto LABEL_56;
  }
  uint64_t v42 = v34 + 2;
  if (v34 + 2 >= v54) {
    goto LABEL_60;
  }
  unint64_t v45 = *(void *)(v55 + 8 * v42);
  if (v45) {
    goto LABEL_56;
  }
  uint64_t v42 = v34 + 3;
  if (v34 + 3 >= v54) {
    goto LABEL_60;
  }
  unint64_t v45 = *(void *)(v55 + 8 * v42);
  if (v45) {
    goto LABEL_56;
  }
  uint64_t v42 = v34 + 4;
  if (v34 + 4 >= v54) {
    goto LABEL_60;
  }
  unint64_t v45 = *(void *)(v55 + 8 * v42);
  if (v45)
  {
LABEL_56:
    uint64_t v40 = (v45 - 1) & v45;
    unint64_t v41 = __clz(__rbit64(v45)) + (v42 << 6);
    goto LABEL_57;
  }
  uint64_t v46 = v34 + 5;
  while (v54 != v46)
  {
    unint64_t v45 = *(void *)(v55 + 8 * v46++);
    if (v45)
    {
      uint64_t v42 = v46 - 1;
      uint64_t v32 = v58;
      goto LABEL_56;
    }
  }
LABEL_60:
  sub_1D1668088();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D165B3A4((uint64_t)v39);
}

void sub_1D170DD94(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, void *a6)
{
  id v11 = objc_msgSend(a1, sel_oppositeNode_);
  if (v11)
  {
    id v32 = v11;
    if (sub_1D1671E50(v11, a4))
    {
      id v12 = objc_msgSend(a3, sel_identifier);
      uint64_t v13 = *a5;
      if (*(void *)(*a5 + 16))
      {
        unint64_t v14 = sub_1D165AB88((unint64_t)v12);
        if (v15)
        {
          id v16 = *(id *)(*(void *)(v13 + 56) + 8 * v14);
          id v17 = objc_msgSend(v32, sel_identifier);
          uint64_t v18 = *a5;
          if (*(void *)(*a5 + 16) && (unint64_t v19 = sub_1D165AB88((unint64_t)v17), (v20 & 1) != 0))
          {
            id v21 = *(id *)(*(void *)(v18 + 56) + 8 * v19);
            id v22 = objc_msgSend(a1, sel_label);
            if (!v22)
            {
              __break(1u);
              return;
            }
            id v23 = v22;
            id v24 = objc_msgSend(a1, sel_domain);
            objc_msgSend(a1, sel_weight);
            int v26 = v25;
            id v27 = objc_msgSend(a1, sel_propertyDictionary);
            uint64_t v28 = sub_1D17BDE50();

            sub_1D16771C0(v28);
            swift_bridgeObjectRelease();
            id v29 = (void *)sub_1D17BDE30();
            swift_bridgeObjectRelease();
            LODWORD(v30) = v26;
            id v31 = objc_msgSend(a6, sel_addEdgeWithLabel_sourceNode_targetNode_domain_weight_properties_, v23, v16, v21, v24, v29, v30);
          }
          else
          {
            id v29 = v32;
            id v32 = v16;
          }
        }
      }
    }
  }
}

void sub_1D170DFDC(uint64_t a1, void *a2)
{
  id v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t MASlice.slice(graph:domain:weight:)(void *a1, __int16 a2, double a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652D98);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1D17C91F0;
  *(_WORD *)(v6 + 32) = a2;
  type metadata accessor for MADomainsSlice();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 80) = v6;
  id v8 = a1;
  id v9 = objc_msgSend(v8, sel_graphReference);

  *(void *)(v7 + 40) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(void *)(v7 + 16) = v9;
  *(void *)(v7 + 24) = 0;
  *(double *)(v7 + 32) = a3;
  return v7;
}

void sub_1D170E0F8()
{
  void (*v10)(uint64_t *__return_ptr, void *);
  id v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  void v19[2];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 8 * v6;
    id v8 = *(void **)(*(void *)(v1 + 48) + 8 * v6);
    uint64_t v9 = *(void *)(*(void *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v10 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v19[0] = v8;
    v19[1] = v9;
    id v11 = v8;
    v10(&v18, v19);

    return;
  }
  id v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      unint64_t v14 = v0[1];
      char v15 = *(void *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        uint64_t v5 = (v15 - 1) & v15;
        unint64_t v6 = __clz(__rbit64(v15)) + (v12 << 6);
        int64_t v4 = v12;
        goto LABEL_3;
      }
      id v16 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        char v15 = *(void *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          id v12 = v16;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          char v15 = *(void *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            id v12 = v3 + 3;
            goto LABEL_7;
          }
          id v16 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            char v15 = *(void *)(v14 + 8 * v16);
            if (v15) {
              goto LABEL_10;
            }
            id v12 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              char v15 = *(void *)(v14 + 8 * v12);
              if (v15) {
                goto LABEL_7;
              }
              int64_t v4 = v13 - 1;
              id v17 = v3 + 6;
              while (v13 != v17)
              {
                char v15 = *(void *)(v14 + 8 * v17++);
                if (v15)
                {
                  id v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

uint64_t sub_1D170E274@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    id v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_1D1668120(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  unint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_1D1711B30((uint64_t)&v23, (uint64_t)v22, &qword_1EA652DE8);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    _OWORD v21[2] = v22[2];
    v19(v21);
    return sub_1D166817C((uint64_t)v21, &qword_1EA652DF0);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_1D170E460()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    int64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    id v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v11(&v19, v20);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
  uint64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    int64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      int64_t v15 = v0[1];
      unint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      int64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        unint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          uint64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          unint64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            uint64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          int64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            unint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            uint64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              unint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              int64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                unint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  uint64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_1D170E5F8(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      if (!*(void *)(a2 + 16)) {
        goto LABEL_25;
      }
      goto LABEL_7;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v8) {
      goto LABEL_27;
    }
    unint64_t v18 = *(void *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v8) {
        goto LABEL_27;
      }
      unint64_t v18 = *(void *)(v4 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v8) {
          goto LABEL_27;
        }
        unint64_t v18 = *(void *)(v4 + 8 * v10);
        if (!v18)
        {
          int64_t v10 = v17 + 3;
          if (v17 + 3 >= v8) {
            goto LABEL_27;
          }
          unint64_t v18 = *(void *)(v4 + 8 * v10);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v12 = __clz(__rbit64(v18)) + (v10 << 6);
    if (!*(void *)(a2 + 16))
    {
LABEL_25:
      swift_release();
      return 0;
    }
LABEL_7:
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    swift_bridgeObjectRetain();
    sub_1D165A868(v15, v14);
    LOBYTE(v15) = v16;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      goto LABEL_25;
    }
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v8)
  {
LABEL_27:
    swift_release();
    return 1;
  }
  unint64_t v18 = *(void *)(v4 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_27;
    }
    unint64_t v18 = *(void *)(v4 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_24;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1D170E7AC(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe, a2);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = sub_1D170E904((uint64_t)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, v3);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v7;
    }
  }
  else
  {
    int64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v3 = sub_1D170E904((uint64_t)v8, v5, v3);
    MEMORY[0x1D25FAD70](v8, -1, -1);
  }
  return v3;
}

uint64_t sub_1D170E904(uint64_t result, uint64_t a2, uint64_t a3)
{
  char v16 = (unint64_t *)result;
  uint64_t v17 = 0;
  int64_t v4 = 0;
  uint64_t v5 = a3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v24 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_18:
    sub_1D165C164(*(void *)(a3 + 48) + 40 * v10, (uint64_t)v23);
    sub_1D1668120(*(void *)(a3 + 56) + 32 * v10, (uint64_t)v22);
    sub_1D165C164((uint64_t)v23, (uint64_t)v20);
    sub_1D1668120((uint64_t)v22, (uint64_t)v21);
    sub_1D165C164((uint64_t)v20, (uint64_t)v18);
    sub_1D1668120((uint64_t)v21, (uint64_t)v19);
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
      char v14 = sub_1D17BE050();
      swift_bridgeObjectRelease();
      sub_1D166817C((uint64_t)v20, &qword_1EA652DA8);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
      uint64_t result = sub_1D165C1C0((uint64_t)v23);
      if ((v14 & 1) == 0)
      {
        *(unint64_t *)((char *)v16 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        BOOL v11 = __OFADD__(v17++, 1);
        if (v11) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      sub_1D166817C((uint64_t)v20, &qword_1EA652DA8);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
      uint64_t result = sub_1D165C1C0((uint64_t)v23);
    }
  }
  BOOL v11 = __OFADD__(v4++, 1);
  if (v11)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v4 >= v24) {
    return sub_1D16848D0(v16, a2, v17, a3);
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_17:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_18;
  }
  int64_t v13 = v4 + 1;
  if (v4 + 1 >= v24) {
    return sub_1D16848D0(v16, a2, v17, a3);
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v4 + 2;
  if (v4 + 2 >= v24) {
    return sub_1D16848D0(v16, a2, v17, a3);
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v4 + 3;
  if (v4 + 3 >= v24) {
    return sub_1D16848D0(v16, a2, v17, a3);
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
LABEL_16:
    int64_t v4 = v13;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v24) {
      return sub_1D16848D0(v16, a2, v17, a3);
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_17;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1D170EBA4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1D170E0F8();
  if (!v7) {
    goto LABEL_29;
  }
  unint64_t v9 = (void *)v7;
  double v10 = v8;
  BOOL v11 = (void *)*a5;
  unint64_t v13 = sub_1D165A9D0(v7);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  char v17 = v12;
  if (v11[3] >= v16)
  {
    if (a4)
    {
      char v20 = (void *)*a5;
      if (v12) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_1D16A6A54();
      char v20 = (void *)*a5;
      if (v17) {
        goto LABEL_9;
      }
    }
LABEL_14:
    v20[(v13 >> 6) + 8] |= 1 << v13;
    uint64_t v23 = 8 * v13;
    *(void *)(v20[6] + v23) = v9;
    *(double *)(v20[7] + v23) = v10;
    uint64_t v24 = v20[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v20[2] = v26;
LABEL_16:
    sub_1D170E0F8();
    if (v27)
    {
      id v29 = v27;
      double v30 = v28;
      do
      {
        uint64_t v36 = (void *)*a5;
        unint64_t v37 = sub_1D165A9D0((uint64_t)v29);
        uint64_t v39 = v36[2];
        BOOL v40 = (v38 & 1) == 0;
        BOOL v25 = __OFADD__(v39, v40);
        uint64_t v41 = v39 + v40;
        if (v25) {
          goto LABEL_30;
        }
        char v42 = v38;
        if (v36[3] < v41)
        {
          sub_1D16A28F8(v41, 1);
          unint64_t v37 = sub_1D165A9D0((uint64_t)v29);
          if ((v42 & 1) != (v43 & 1)) {
            goto LABEL_32;
          }
        }
        int64_t v44 = (void *)*a5;
        if (v42)
        {
          uint64_t v31 = 8 * v37;
          double v32 = *(double *)(v44[7] + 8 * v37);

          if (v32 > v30) {
            double v33 = v32;
          }
          else {
            double v33 = v30;
          }
          *(double *)(v44[7] + v31) = v33;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          uint64_t v45 = 8 * v37;
          *(void *)(v44[6] + v45) = v29;
          *(double *)(v44[7] + v45) = v30;
          uint64_t v46 = v44[2];
          BOOL v25 = __OFADD__(v46, 1);
          uint64_t v47 = v46 + 1;
          if (v25) {
            goto LABEL_31;
          }
          _OWORD v44[2] = v47;
        }
        sub_1D170E0F8();
        id v29 = v34;
        double v30 = v35;
      }
      while (v34);
    }
LABEL_29:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1D1668088();
    return swift_release();
  }
  sub_1D16A28F8(v16, a4 & 1);
  unint64_t v18 = sub_1D165A9D0((uint64_t)v9);
  if ((v17 & 1) == (v19 & 1))
  {
    unint64_t v13 = v18;
    char v20 = (void *)*a5;
    if ((v17 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_9:
    double v21 = *(double *)(v20[7] + 8 * v13);

    if (v21 > v10) {
      double v22 = v21;
    }
    else {
      double v22 = v10;
    }
    *(double *)(v20[7] + 8 * v13) = v22;
    goto LABEL_16;
  }
LABEL_32:
  sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
  uint64_t result = sub_1D17BEC60();
  __break(1u);
  return result;
}

void sub_1D170EE98(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = sub_1D170E460();
  if (!v8) {
    goto LABEL_21;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  unint64_t v13 = (void *)*a5;
  unint64_t v15 = sub_1D165A868(v7, v8);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      if ((v14 & 1) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_1D16A8804();
      if ((v19 & 1) == 0) {
        goto LABEL_12;
      }
    }
    goto LABEL_9;
  }
  sub_1D16A5B80(v18, a4 & 1);
  unint64_t v20 = sub_1D165A868(v10, v11);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    if ((v19 & 1) == 0)
    {
LABEL_12:
      BOOL v25 = (void *)*a5;
      *(void *)(*a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
      uint64_t v26 = (uint64_t *)(v25[6] + 16 * v15);
      *uint64_t v26 = v10;
      v26[1] = v11;
      *(void *)(v25[7] + 8 * v15) = v12;
      uint64_t v27 = v25[2];
      BOOL v28 = __OFADD__(v27, 1);
      uint64_t v29 = v27 + 1;
      if (v28)
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      v25[2] = v29;
      uint64_t v30 = sub_1D170E460();
      if (v31)
      {
        uint64_t v33 = v30;
        uint64_t v34 = v31;
        uint64_t v35 = v32;
        do
        {
          uint64_t v36 = (void *)*a5;
          unint64_t v37 = sub_1D165A868(v33, v34);
          uint64_t v39 = v36[2];
          BOOL v40 = (v38 & 1) == 0;
          BOOL v28 = __OFADD__(v39, v40);
          uint64_t v41 = v39 + v40;
          if (v28) {
            goto LABEL_22;
          }
          char v42 = v38;
          if (v36[3] < v41)
          {
            sub_1D16A5B80(v41, 1);
            unint64_t v37 = sub_1D165A868(v33, v34);
            if ((v42 & 1) != (v43 & 1)) {
              goto LABEL_24;
            }
          }
          if (v42) {
            goto LABEL_9;
          }
          int64_t v44 = (void *)*a5;
          *(void *)(*a5 + 8 * (v37 >> 6) + 64) |= 1 << v37;
          uint64_t v45 = (uint64_t *)(v44[6] + 16 * v37);
          *uint64_t v45 = v33;
          v45[1] = v34;
          *(void *)(v44[7] + 8 * v37) = v35;
          uint64_t v46 = v44[2];
          BOOL v28 = __OFADD__(v46, 1);
          uint64_t v47 = v46 + 1;
          if (v28) {
            goto LABEL_23;
          }
          _OWORD v44[2] = v47;
          uint64_t v33 = sub_1D170E460();
          uint64_t v34 = v48;
          uint64_t v35 = v49;
        }
        while (v48);
      }
LABEL_21:
      swift_release();
      swift_bridgeObjectRelease();
      sub_1D1668088();
      swift_release();
      return;
    }
LABEL_9:
    sub_1D1672594();
    double v22 = (void *)swift_allocError();
    *uint64_t v23 = 4;
    swift_willThrow();
    id v24 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA651838);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1D1668088();
      swift_release();

      return;
    }
    goto LABEL_25;
  }
LABEL_24:
  sub_1D17BEC60();
  __break(1u);
LABEL_25:
  sub_1D17BE850();
  sub_1D17BE030();
  sub_1D17BE9E0();
  sub_1D17BE030();
  sub_1D17BEA40();
  __break(1u);
}

int64_t sub_1D170F294(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_1D170F378(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      if (a4 < 0) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      MEMORY[0x1D25F9130](a1, a2, v7);
      sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
LABEL_27:
    __break(1u);
    return;
  }
  if (a3) {
    goto LABEL_13;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_13:
  if (sub_1D17BE740() != *(_DWORD *)(a4 + 36))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  sub_1D17BE750();
  sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v4 = v17;
  swift_unknownObjectRelease();
  uint64_t v8 = sub_1D17BE5B0();
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v8 & ~v9;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_26:

    __break(1u);
    goto LABEL_27;
  }
  id v10 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v11 = sub_1D17BE5C0();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v6 = (v6 + 1) & v12;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_26;
      }
      id v13 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v14 = sub_1D17BE5C0();
    }
    while ((v14 & 1) == 0);
  }

LABEL_20:
  unint64_t v15 = *(void **)(*(void *)(a4 + 48) + 8 * v6);
  id v16 = v15;
}

uint64_t sub_1D170F5F0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1D170F678(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 < 0 || 1 << *(unsigned char *)(a6 + 32) <= a3)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a6 + 8 * ((unint64_t)a3 >> 6) + 64) >> a3) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a6 + 36) != a4)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  sub_1D165C164(*(void *)(a6 + 48) + 40 * a3, result);
  uint64_t v9 = *(void *)(a6 + 56) + 32 * a3;
  return sub_1D1668120(v9, a2);
}

uint64_t sub_1D170F71C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t sub_1D170F764(uint64_t a1, uint64_t a2)
{
  unint64_t v25 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v3 = sub_1D17BE760();
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v30 = MEMORY[0x1E4FBC860];
    sub_1D16826AC(0, v3 & ~(v3 >> 63), 0);
    if (v25)
    {
      uint64_t result = sub_1D17BE700();
      char v6 = 1;
    }
    else
    {
      uint64_t result = sub_1D170F5F0(a1);
      char v6 = v7 & 1;
    }
    uint64_t v27 = result;
    uint64_t v28 = v5;
    char v29 = v6;
    if (v3 < 0)
    {
      __break(1u);
LABEL_23:
      __break(1u);
    }
    else
    {
      do
      {
        while (1)
        {
          int64_t v14 = v27;
          uint64_t v13 = v28;
          char v15 = v29;
          sub_1D170F378(v27, v28, v29, a1);
          uint64_t v17 = v16;
          uint64_t v18 = *(void *)(a2 + 32);
          uint64_t v19 = v30;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = sub_1D16826AC(0, *(void *)(v19 + 16) + 1, 1);
            uint64_t v19 = v30;
          }
          unint64_t v21 = *(void *)(v19 + 16);
          unint64_t v20 = *(void *)(v19 + 24);
          if (v21 >= v20 >> 1)
          {
            uint64_t result = sub_1D16826AC(v20 > 1, v21 + 1, 1);
            uint64_t v19 = v30;
          }
          *(void *)(v19 + 16) = v21 + 1;
          uint64_t v22 = v19 + 16 * v21;
          *(void *)(v22 + 32) = v17;
          *(void *)(v22 + 40) = v18;
          if (v25) {
            break;
          }
          int64_t v8 = sub_1D170F294(v14, v13, v15, a1);
          uint64_t v10 = v9;
          char v12 = v11;
          sub_1D167C268(v14, v13, v15);
          uint64_t v27 = v8;
          uint64_t v28 = v10;
          char v29 = v12 & 1;
          if (!--v3) {
            goto LABEL_20;
          }
        }
        if ((v15 & 1) == 0) {
          goto LABEL_23;
        }
        if (sub_1D17BE720()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652DE0);
        uint64_t v23 = (void (*)(unsigned char *, void))sub_1D17BE370();
        sub_1D17BE7D0();
        v23(v26, 0);
        --v3;
      }
      while (v3);
LABEL_20:
      sub_1D167C268(v27, v28, v29);
      return v30;
    }
  }
  return result;
}

uint64_t sub_1D170F9CC(uint64_t result, char a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = result;
    double v7 = *(double *)(result + 40);
    int64_t v8 = (void *)*a3;
    id v9 = *(id *)(result + 32);
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_1D165A9D0((uint64_t)v9);
    uint64_t v12 = v8[2];
    BOOL v13 = (v10 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    char v15 = v10;
    if (v8[3] < v14)
    {
      sub_1D16A28F8(v14, a2 & 1);
      unint64_t v16 = sub_1D165A9D0((uint64_t)v9);
      if ((v15 & 1) != (v17 & 1))
      {
LABEL_33:
        sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
        uint64_t result = sub_1D17BEC60();
        __break(1u);
        return result;
      }
      unint64_t v11 = v16;
      uint64_t v18 = (void *)*a3;
      if ((v15 & 1) == 0) {
        goto LABEL_15;
      }
LABEL_9:
      double v19 = *(double *)(v18[7] + 8 * v11);

      if (v19 > v7) {
        double v20 = v19;
      }
      else {
        double v20 = v7;
      }
      *(double *)(v18[7] + 8 * v11) = v20;
      uint64_t v21 = v3 - 1;
      if (v3 == 1) {
        return swift_bridgeObjectRelease();
      }
LABEL_19:
      for (unint64_t i = (double *)(v6 + 56); ; i += 2)
      {
        double v29 = *i;
        uint64_t v30 = (void *)*a3;
        id v31 = *((id *)i - 1);
        unint64_t v32 = sub_1D165A9D0((uint64_t)v31);
        uint64_t v34 = v30[2];
        BOOL v35 = (v33 & 1) == 0;
        BOOL v24 = __OFADD__(v34, v35);
        uint64_t v36 = v34 + v35;
        if (v24) {
          break;
        }
        char v37 = v33;
        if (v30[3] < v36)
        {
          sub_1D16A28F8(v36, 1);
          unint64_t v32 = sub_1D165A9D0((uint64_t)v31);
          if ((v37 & 1) != (v38 & 1)) {
            goto LABEL_33;
          }
        }
        uint64_t v39 = (void *)*a3;
        uint64_t v40 = 8 * v32;
        if (v37)
        {
          double v27 = *(double *)(v39[7] + 8 * v32);

          if (v27 > v29) {
            double v28 = v27;
          }
          else {
            double v28 = v29;
          }
          *(double *)(v39[7] + v40) = v28;
        }
        else
        {
          v39[(v32 >> 6) + 8] |= 1 << v32;
          *(void *)(v39[6] + 8 * v32) = v31;
          *(double *)(v39[7] + 8 * v32) = v29;
          uint64_t v41 = v39[2];
          BOOL v24 = __OFADD__(v41, 1);
          uint64_t v42 = v41 + 1;
          if (v24) {
            goto LABEL_32;
          }
          _OWORD v39[2] = v42;
        }
        if (!--v21) {
          return swift_bridgeObjectRelease();
        }
      }
      goto LABEL_31;
    }
    if (a2)
    {
      uint64_t v18 = (void *)*a3;
      if (v10) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_1D16A6A54();
      uint64_t v18 = (void *)*a3;
      if (v15) {
        goto LABEL_9;
      }
    }
LABEL_15:
    v18[(v11 >> 6) + 8] |= 1 << v11;
    uint64_t v22 = 8 * v11;
    *(void *)(v18[6] + v22) = v9;
    *(double *)(v18[7] + v22) = v7;
    uint64_t v23 = v18[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    _OWORD v18[2] = v25;
    uint64_t v21 = v3 - 1;
    if (v3 == 1) {
      return swift_bridgeObjectRelease();
    }
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1D170FC54(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D170FC9C()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D170FCD4@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1D167B150(a1, a2, *(uint64_t (**)(void, void, void, void))(v3 + 16), a3);
}

uint64_t sub_1D170FCDC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v215 = *MEMORY[0x1E4F143B8];
  id v182 = *(id *)(v3 + 16);
  id v4 = objc_msgSend(v182, sel_concreteGraph);
  if (!v4) {
    goto LABEL_158;
  }
  uint64_t v5 = v4;
  unsigned int v6 = objc_msgSend(v4, sel_hasPendingRead);

  if (!v6) {
    goto LABEL_155;
  }
  uint64_t v198 = MEMORY[0x1E4FBC870];
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)a2 + 264))();
  uint64_t v162 = *(void *)(v7 + 16);
  if (!v162)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  unint64_t v8 = 0;
  uint64_t v164 = v7 + 32;
  uint64_t v163 = v7;
  while (1)
  {
    if (v8 >= *(void *)(v7 + 16)) {
      goto LABEL_154;
    }
    unint64_t v165 = v8;
    sub_1D1711360(v164 + 40 * v8, (uint64_t)&v203, &qword_1EA6516D0);
    id v9 = v203;
    v201 = v203;
    sub_1D16607C4(&v204, v202);
    id v199 = v9;
    sub_1D1668120((uint64_t)v202, (uint64_t)v200);
    sub_1D165C128(0, (unint64_t *)&qword_1EA652D30);
    swift_retain();
    if (swift_dynamicCast())
    {
      v178 = v194;
      char v10 = (void *)MEMORY[0x1E4FBC860];
      v192 = (void *)MEMORY[0x1E4FBC860];
      if (a3 && (uint64_t v11 = *(void *)(a3 + 16)) != 0)
      {
        v167 = v9;
        v175 = *(void (**)(uint64_t))(*(void *)v171 + 312);
        swift_bridgeObjectRetain_n();
        uint64_t v12 = (void *)(a3 + 40);
        BOOL v13 = v10;
        do
        {
          char v15 = (void *)*(v12 - 1);
          uint64_t v14 = *v12;
          uint64_t v16 = swift_bridgeObjectRetain();
          v175(v16);
          if (!v17) {
            goto LABEL_139;
          }
          v188 = v12;
          uint64_t v18 = (*(uint64_t (**)(void))(*(void *)a2 + 312))();
          if (!v19) {
            goto LABEL_138;
          }
          uint64_t v20 = v18;
          uint64_t v21 = v19;
          uint64_t v184 = v11;
          id v199 = v15;
          v200[0] = v14;
          sub_1D1711B94();
          if ((sub_1D17BE670() & 1) == 0
            || (v199 = v15, v200[0] = v14, v194 = (void *)v20, uint64_t v195 = v21, (sub_1D17BE670() & 1) == 0))
          {
            swift_bridgeObjectRelease();
LABEL_138:
            swift_bridgeObjectRelease();
LABEL_139:
            sub_1D1672594();
            swift_allocError();
            *uint64_t v159 = 1;
            swift_willThrow();
            swift_release();

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            sub_1D166817C((uint64_t)&v201, &qword_1EA6516D0);
            swift_bridgeObjectRelease();
            goto LABEL_143;
          }
          id v22 = objc_allocWithZone(NSString);
          swift_bridgeObjectRetain();
          uint64_t v23 = (void *)sub_1D17BDFE0();
          swift_bridgeObjectRelease();
          id v24 = objc_msgSend(v22, sel_initWithString_, v23);

          uint64_t v25 = (void *)sub_1D17BDFE0();
          uint64_t v26 = (void *)sub_1D17BDFE0();
          id v27 = objc_msgSend(v24, sel_stringByReplacingOccurrencesOfString_withString_, v25, v26);

          sub_1D17BDFF0();
          swift_bridgeObjectRelease();

          id v28 = objc_allocWithZone(NSString);
          swift_bridgeObjectRetain();
          double v29 = (void *)sub_1D17BDFE0();
          swift_bridgeObjectRelease();
          id v30 = objc_msgSend(v28, sel_initWithString_, v29);

          id v31 = (void *)sub_1D17BDFE0();
          unint64_t v32 = (void *)sub_1D17BDFE0();
          id v33 = objc_msgSend(v30, sel_stringByReplacingOccurrencesOfString_withString_, v31, v32);

          uint64_t v34 = sub_1D17BDFF0();
          uint64_t v36 = v35;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            BOOL v13 = sub_1D169CCE8(0, v13[2] + 1, 1, v13);
          }
          unint64_t v38 = v13[2];
          unint64_t v37 = v13[3];
          if (v38 >= v37 >> 1) {
            BOOL v13 = sub_1D169CCE8((void *)(v37 > 1), v38 + 1, 1, v13);
          }
          uint64_t v12 = v188 + 2;
          void v13[2] = v38 + 1;
          uint64_t v39 = &v13[2 * v38];
          v39[4] = v34;
          v39[5] = v36;
          swift_bridgeObjectRelease();
          v192 = v13;
          uint64_t v11 = v184 - 1;
        }
        while (v184 != 1);
        swift_bridgeObjectRelease_n();
        id v9 = v167;
      }
      else
      {
        BOOL v13 = (void *)MEMORY[0x1E4FBC860];
      }
      uint64_t v70 = (*(uint64_t (**)(void *, void *, uint64_t, unint64_t, uint64_t, unint64_t, BOOL))(*(void *)v171 + 352))(a1, v9, 0x656372756F73, 0xE600000000000000, 0x746567726174, 0xE600000000000000, v13[2] == 0);
      swift_release();
      if (v70)
      {
        sub_1D1663DB0(v70);
        BOOL v13 = v192;
      }
      uint64_t v177 = v13[2];
      if (v177)
      {
        swift_bridgeObjectRetain();
        unint64_t v71 = 0;
        v180 = v13;
        while (1)
        {
          if (v71 >= v13[2]) {
            goto LABEL_145;
          }
          unint64_t v186 = v71;
          swift_bridgeObjectRetain();
          id v74 = objc_msgSend(v182, sel_concreteGraph);
          if (!v74) {
            goto LABEL_156;
          }
          uint64_t v75 = v74;
          int64_t v76 = (void *)sub_1D17BDFE0();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D80);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1D17C91E0;
          *(void *)(inited + 32) = 0x656372756F73;
          *(void *)(inited + 40) = 0xE600000000000000;
          *(void *)(inited + 48) = a1;
          *(void *)(inited + 56) = 0x746567726174;
          *(void *)(inited + 64) = 0xE600000000000000;
          *(void *)(inited + 72) = v178;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA6515E0);
          id v78 = (void *)sub_1D17BEB10();
          uint64_t v79 = *(void *)(inited + 32);
          uint64_t v80 = *(void *)(inited + 40);
          uint64_t v81 = *(void *)(inited + 48);
          id v82 = a1;
          id v83 = v178;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          unint64_t v84 = sub_1D165A868(v79, v80);
          if (v85) {
            goto LABEL_146;
          }
          *(void *)((char *)v78 + ((v84 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v84;
          int64_t v86 = (uint64_t *)(v78[6] + 16 * v84);
          *int64_t v86 = v79;
          v86[1] = v80;
          *(void *)(v78[7] + 8 * v84) = v81;
          uint64_t v87 = v78[2];
          BOOL v88 = __OFADD__(v87, 1);
          uint64_t v89 = v87 + 1;
          if (v88) {
            goto LABEL_147;
          }
          v78[2] = v89;
          uint64_t v90 = *(void *)(inited + 56);
          uint64_t v91 = *(void *)(inited + 64);
          uint64_t v92 = *(void *)(inited + 72);
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          unint64_t v93 = sub_1D165A868(v90, v91);
          if (v94) {
            goto LABEL_148;
          }
          *(void *)((char *)v78 + ((v93 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v93;
          uint64_t v95 = (uint64_t *)(v78[6] + 16 * v93);
          *uint64_t v95 = v90;
          v95[1] = v91;
          *(void *)(v78[7] + 8 * v93) = v92;
          uint64_t v96 = v78[2];
          BOOL v88 = __OFADD__(v96, 1);
          uint64_t v97 = v96 + 1;
          if (v88) {
            goto LABEL_149;
          }
          v78[2] = v97;
          swift_release();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652DC0);
          id v98 = (void *)sub_1D17BDE30();
          swift_release();
          id v199 = 0;
          id v99 = objc_msgSend(v75, sel_matchWithVisualFormat_elements_error_, v76, v98, &v199);

          if (v99)
          {
            id v100 = v199;
            int64_t v101 = (void *)sub_1D17BDFE0();
            id v102 = objc_msgSend(v99, sel_nodesForName_, v101);

            if (v102)
            {
              v172 = v99;
              sub_1D1674A20();
              uint64_t v103 = sub_1D17BE350();

              if ((v103 & 0xC000000000000001) != 0)
              {
                sub_1D17BE710();
                sub_1D17BE390();
                uint64_t v103 = v205;
                uint64_t v190 = v206;
                uint64_t v104 = v207;
                int64_t v105 = v208;
                unint64_t v106 = v209;
              }
              else
              {
                int64_t v105 = 0;
                uint64_t v107 = -1 << *(unsigned char *)(v103 + 32);
                uint64_t v190 = v103 + 56;
                uint64_t v104 = ~v107;
                uint64_t v108 = -v107;
                if (v108 < 64) {
                  uint64_t v109 = ~(-1 << v108);
                }
                else {
                  uint64_t v109 = -1;
                }
                unint64_t v106 = v109 & *(void *)(v103 + 56);
              }
              int64_t v110 = (unint64_t)(v104 + 64) >> 6;
              if ((v103 & 0x8000000000000000) == 0) {
                goto LABEL_60;
              }
              while (1)
              {
                uint64_t v111 = sub_1D17BE7A0();
                if (!v111) {
                  break;
                }
                v194 = (void *)v111;
                swift_unknownObjectRetain();
                swift_dynamicCast();
                id v112 = v199;
                swift_unknownObjectRelease();
                int64_t v113 = v105;
                uint64_t v114 = v106;
                if (!v112) {
                  break;
                }
                while (1)
                {
                  sub_1D1671FA0(&v199, v112);

                  int64_t v105 = v113;
                  unint64_t v106 = v114;
                  if (v103 < 0) {
                    break;
                  }
LABEL_60:
                  if (v106)
                  {
                    uint64_t v114 = (v106 - 1) & v106;
                    unint64_t v115 = __clz(__rbit64(v106)) | (v105 << 6);
                    int64_t v113 = v105;
                  }
                  else
                  {
                    int64_t v113 = v105 + 1;
                    if (__OFADD__(v105, 1))
                    {
                      __break(1u);
LABEL_145:
                      __break(1u);
LABEL_146:
                      __break(1u);
LABEL_147:
                      __break(1u);
LABEL_148:
                      __break(1u);
LABEL_149:
                      __break(1u);
LABEL_150:
                      __break(1u);
LABEL_151:
                      __break(1u);
LABEL_152:
                      __break(1u);
LABEL_153:
                      __break(1u);
LABEL_154:
                      __break(1u);
LABEL_155:
                      __break(1u);
LABEL_156:
                      __break(1u);
LABEL_157:
                      __break(1u);
LABEL_158:
                      __break(1u);
                    }
                    if (v113 >= v110) {
                      goto LABEL_80;
                    }
                    unint64_t v116 = *(void *)(v190 + 8 * v113);
                    if (!v116)
                    {
                      int64_t v117 = v105 + 2;
                      if (v105 + 2 >= v110) {
                        goto LABEL_80;
                      }
                      unint64_t v116 = *(void *)(v190 + 8 * v117);
                      if (v116) {
                        goto LABEL_69;
                      }
                      int64_t v117 = v105 + 3;
                      if (v105 + 3 >= v110) {
                        goto LABEL_80;
                      }
                      unint64_t v116 = *(void *)(v190 + 8 * v117);
                      if (v116)
                      {
LABEL_69:
                        int64_t v113 = v117;
                      }
                      else
                      {
                        int64_t v113 = v105 + 4;
                        if (v105 + 4 >= v110) {
                          goto LABEL_80;
                        }
                        unint64_t v116 = *(void *)(v190 + 8 * v113);
                        if (!v116)
                        {
                          int64_t v118 = v105 + 5;
                          do
                          {
                            if (v110 == v118) {
                              goto LABEL_80;
                            }
                            unint64_t v116 = *(void *)(v190 + 8 * v118++);
                          }
                          while (!v116);
                          int64_t v113 = v118 - 1;
                        }
                      }
                    }
                    uint64_t v114 = (v116 - 1) & v116;
                    unint64_t v115 = __clz(__rbit64(v116)) + (v113 << 6);
                  }
                  id v112 = *(id *)(*(void *)(v103 + 48) + 8 * v115);
                  if (!v112) {
                    goto LABEL_80;
                  }
                }
              }
LABEL_80:
              sub_1D1668088();

              goto LABEL_40;
            }
          }
          else
          {
            id v72 = v199;
            uint64_t v73 = (void *)sub_1D17BDCF0();

            swift_willThrow();
          }
LABEL_40:
          unint64_t v71 = v186 + 1;
          BOOL v13 = v180;
          if (v186 + 1 == v177)
          {
            swift_bridgeObjectRelease();
            break;
          }
        }
      }

      goto LABEL_133;
    }
    id v199 = v9;
    sub_1D1668120((uint64_t)v202, (uint64_t)v200);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D70);
    if (swift_dynamicCast()) {
      break;
    }
    swift_release();
    sub_1D166817C((uint64_t)&v201, &qword_1EA6516D0);
LABEL_134:
    unint64_t v8 = v165 + 1;
    uint64_t v7 = v163;
    if (v165 + 1 == v162)
    {
      swift_bridgeObjectRelease();
      return v198;
    }
  }
  v176 = v194;
  uint64_t v179 = v195;
  uint64_t v40 = (void *)MEMORY[0x1E4FBC860];
  v193 = (void *)MEMORY[0x1E4FBC860];
  if (!a3 || (uint64_t v41 = *(void *)(a3 + 16)) == 0)
  {
    char v43 = (void *)MEMORY[0x1E4FBC860];
LABEL_86:
    uint64_t v119 = (*(uint64_t (**)(void *, void *, uint64_t, unint64_t, uint64_t, uint64_t, BOOL))(*(void *)v171 + 352))(a1, v9, 0x656372756F73, 0xE600000000000000, v196, v197, v43[2] == 0);
    swift_release();
    if (v119)
    {
      sub_1D1663DB0(v119);
      char v43 = v193;
    }
    uint64_t v174 = v43[2];
    if (!v174)
    {
      swift_bridgeObjectRetain();
LABEL_132:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_133:
      sub_1D166817C((uint64_t)&v201, &qword_1EA6516D0);
      swift_bridgeObjectRelease();
      goto LABEL_134;
    }
    swift_bridgeObjectRetain();
    unint64_t v120 = 0;
    v181 = v43;
    while (1)
    {
      if (v120 >= v43[2]) {
        goto LABEL_151;
      }
      unint64_t v187 = v120;
      id v199 = v176;
      v200[0] = v179;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D17BE030();
      sub_1D17BE030();
      swift_bridgeObjectRelease();
      id v123 = objc_msgSend(v182, sel_concreteGraph);
      if (!v123) {
        goto LABEL_157;
      }
      uint64_t v124 = v123;
      uint64_t v125 = (void *)sub_1D17BDFE0();
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA652D80);
      uint64_t v126 = swift_initStackObject();
      *(_OWORD *)(v126 + 16) = xmmword_1D17C91F0;
      *(void *)(v126 + 32) = 0x656372756F73;
      *(void *)(v126 + 40) = 0xE600000000000000;
      *(void *)(v126 + 48) = a1;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA6515E0);
      id v127 = (void *)sub_1D17BEB10();
      id v128 = a1;
      swift_retain();
      uint64_t v129 = *(void *)(v126 + 32);
      uint64_t v130 = *(void *)(v126 + 40);
      uint64_t v131 = *(void *)(v126 + 48);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      unint64_t v132 = sub_1D165A868(v129, v130);
      if (v133) {
        goto LABEL_152;
      }
      v127[(v132 >> 6) + 8] |= 1 << v132;
      id v134 = (uint64_t *)(v127[6] + 16 * v132);
      *id v134 = v129;
      v134[1] = v130;
      *(void *)(v127[7] + 8 * v132) = v131;
      uint64_t v135 = v127[2];
      BOOL v88 = __OFADD__(v135, 1);
      uint64_t v136 = v135 + 1;
      if (v88) {
        goto LABEL_153;
      }
      v127[2] = v136;
      swift_release();
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652DC0);
      id v137 = (void *)sub_1D17BDE30();
      swift_release();
      id v199 = 0;
      id v138 = objc_msgSend(v124, sel_matchWithVisualFormat_elements_error_, v125, v137, &v199);

      id v139 = v199;
      if (v138)
      {
        swift_bridgeObjectRetain();
        id v140 = v139;
        uint64_t v141 = (void *)sub_1D17BDFE0();
        swift_bridgeObjectRelease();
        id v142 = objc_msgSend(v138, sel_nodesForName_, v141);

        if (v142)
        {
          sub_1D1674A20();
          uint64_t v143 = sub_1D17BE350();

          v169 = v138;
          if ((v143 & 0xC000000000000001) != 0)
          {
            sub_1D17BE710();
            sub_1D17BE390();
            uint64_t v143 = v210;
            uint64_t v191 = v211;
            uint64_t v144 = v212;
            int64_t v145 = v213;
            unint64_t v146 = v214;
          }
          else
          {
            int64_t v145 = 0;
            uint64_t v147 = -1 << *(unsigned char *)(v143 + 32);
            uint64_t v191 = v143 + 56;
            uint64_t v144 = ~v147;
            uint64_t v148 = -v147;
            if (v148 < 64) {
              uint64_t v149 = ~(-1 << v148);
            }
            else {
              uint64_t v149 = -1;
            }
            unint64_t v146 = v149 & *(void *)(v143 + 56);
          }
          int64_t v150 = (unint64_t)(v144 + 64) >> 6;
          if ((v143 & 0x8000000000000000) == 0) {
            goto LABEL_109;
          }
LABEL_106:
          uint64_t v151 = sub_1D17BE7A0();
          if (!v151
            || (v194 = (void *)v151,
                swift_unknownObjectRetain(),
                swift_dynamicCast(),
                id v152 = v199,
                swift_unknownObjectRelease(),
                int64_t v153 = v145,
                uint64_t v154 = v146,
                !v152))
          {
LABEL_129:
            sub_1D1668088();

            goto LABEL_91;
          }
          while (1)
          {
            sub_1D1671FA0(&v199, v152);

            int64_t v145 = v153;
            unint64_t v146 = v154;
            if (v143 < 0) {
              goto LABEL_106;
            }
LABEL_109:
            if (v146)
            {
              uint64_t v154 = (v146 - 1) & v146;
              unint64_t v155 = __clz(__rbit64(v146)) | (v145 << 6);
              int64_t v153 = v145;
            }
            else
            {
              int64_t v153 = v145 + 1;
              if (__OFADD__(v145, 1)) {
                goto LABEL_150;
              }
              if (v153 >= v150) {
                goto LABEL_129;
              }
              unint64_t v156 = *(void *)(v191 + 8 * v153);
              if (!v156)
              {
                int64_t v157 = v145 + 2;
                if (v145 + 2 >= v150) {
                  goto LABEL_129;
                }
                unint64_t v156 = *(void *)(v191 + 8 * v157);
                if (v156) {
                  goto LABEL_118;
                }
                int64_t v157 = v145 + 3;
                if (v145 + 3 >= v150) {
                  goto LABEL_129;
                }
                unint64_t v156 = *(void *)(v191 + 8 * v157);
                if (v156)
                {
LABEL_118:
                  int64_t v153 = v157;
                }
                else
                {
                  int64_t v153 = v145 + 4;
                  if (v145 + 4 >= v150) {
                    goto LABEL_129;
                  }
                  unint64_t v156 = *(void *)(v191 + 8 * v153);
                  if (!v156)
                  {
                    int64_t v158 = v145 + 5;
                    while (v150 != v158)
                    {
                      unint64_t v156 = *(void *)(v191 + 8 * v158++);
                      if (v156)
                      {
                        int64_t v153 = v158 - 1;
                        goto LABEL_119;
                      }
                    }
                    goto LABEL_129;
                  }
                }
              }
LABEL_119:
              uint64_t v154 = (v156 - 1) & v156;
              unint64_t v155 = __clz(__rbit64(v156)) + (v153 << 6);
            }
            id v152 = *(id *)(*(void *)(v143 + 48) + 8 * v155);
            if (!v152) {
              goto LABEL_129;
            }
          }
        }
      }
      else
      {
        id v121 = v199;
        char v122 = (void *)sub_1D17BDCF0();

        swift_willThrow();
      }
LABEL_91:
      unint64_t v120 = v187 + 1;
      char v43 = v181;
      if (v187 + 1 == v174) {
        goto LABEL_132;
      }
    }
  }
  v168 = v9;
  v173 = *(void (**)(uint64_t))(*(void *)v171 + 312);
  swift_bridgeObjectRetain_n();
  uint64_t v42 = (void *)(a3 + 40);
  char v43 = v40;
  while (1)
  {
    uint64_t v45 = (void *)*(v42 - 1);
    uint64_t v44 = *v42;
    uint64_t v46 = swift_bridgeObjectRetain();
    v173(v46);
    if (!v47) {
      goto LABEL_142;
    }
    v189 = v42;
    uint64_t v48 = (*(uint64_t (**)(void))(*(void *)a2 + 312))();
    if (!v49) {
      goto LABEL_141;
    }
    uint64_t v50 = v48;
    uint64_t v51 = v49;
    uint64_t v185 = v41;
    id v199 = v45;
    v200[0] = v44;
    sub_1D1711B94();
    if ((sub_1D17BE670() & 1) == 0) {
      break;
    }
    id v199 = v45;
    v200[0] = v44;
    v194 = (void *)v50;
    uint64_t v195 = v51;
    if ((sub_1D17BE670() & 1) == 0) {
      break;
    }
    id v52 = objc_allocWithZone(NSString);
    swift_bridgeObjectRetain();
    unint64_t v53 = (void *)sub_1D17BDFE0();
    swift_bridgeObjectRelease();
    id v54 = objc_msgSend(v52, sel_initWithString_, v53);

    uint64_t v55 = (void *)sub_1D17BDFE0();
    int64_t v56 = (void *)sub_1D17BDFE0();
    id v57 = objc_msgSend(v54, sel_stringByReplacingOccurrencesOfString_withString_, v55, v56);

    sub_1D17BDFF0();
    swift_bridgeObjectRelease();

    id v58 = objc_allocWithZone(NSString);
    swift_bridgeObjectRetain();
    uint64_t v59 = (void *)sub_1D17BDFE0();
    swift_bridgeObjectRelease();
    id v60 = objc_msgSend(v58, sel_initWithString_, v59);

    uint64_t v61 = (void *)sub_1D17BDFE0();
    uint64_t v62 = (void *)sub_1D17BDFE0();
    id v63 = objc_msgSend(v60, sel_stringByReplacingOccurrencesOfString_withString_, v61, v62);

    uint64_t v64 = sub_1D17BDFF0();
    uint64_t v66 = v65;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v43 = sub_1D169CCE8(0, v43[2] + 1, 1, v43);
    }
    unint64_t v68 = v43[2];
    unint64_t v67 = v43[3];
    if (v68 >= v67 >> 1) {
      char v43 = sub_1D169CCE8((void *)(v67 > 1), v68 + 1, 1, v43);
    }
    uint64_t v42 = v189 + 2;
    v43[2] = v68 + 1;
    uint64_t v69 = &v43[2 * v68];
    v69[4] = v64;
    v69[5] = v66;
    swift_bridgeObjectRelease();
    v193 = v43;
    uint64_t v41 = v185 - 1;
    if (v185 == 1)
    {
      swift_bridgeObjectRelease_n();
      id v9 = v168;
      goto LABEL_86;
    }
  }
  swift_bridgeObjectRelease();
LABEL_141:
  swift_bridgeObjectRelease();
LABEL_142:
  sub_1D1672594();
  swift_allocError();
  *uint64_t v160 = 1;
  swift_willThrow();
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  sub_1D166817C((uint64_t)&v201, &qword_1EA6516D0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_143:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D17112E4(double a1)
{
  return (*(uint64_t (**)(double))(v1 + 16))(a1 * 0.1);
}

uint64_t type metadata accessor for MASlice()
{
  return self;
}

uint64_t type metadata accessor for MAQuerySlice()
{
  return self;
}

uint64_t sub_1D1711360(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for MADomainsSlice()
{
  return self;
}

uint64_t type metadata accessor for MASlices()
{
  return self;
}

uint64_t type metadata accessor for MAFetchSlice()
{
  return self;
}

uint64_t sub_1D1711430(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D1711440()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void sub_1D1711488(void *a1, uint64_t a2)
{
  sub_1D170DD94(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(uint64_t **)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_1D1711494()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D17114A4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1D17114CC(uint64_t a1, uint64_t a2)
{
  return sub_1D170FC54(&qword_1EA652DC8, a2, (void (*)(uint64_t))type metadata accessor for MASlice);
}

double sub_1D1711514@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(*(void *)a1 + 32);
  *a2 = result;
  return result;
}

double sub_1D1711524(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(*(void *)a2 + 32) = *a1;
  return result;
}

uint64_t sub_1D1711534@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 312))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1D1711588(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 320);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t method lookup function for MASlice(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MASlice);
}

uint64_t dispatch thunk of MASlice.weight.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MASlice.weight.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MASlice.weight.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MASlice.contentNodes()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of MASlice.weightedContentNodes()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of MASlice.hasWeight()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of MASlice.fuzzyContentNodes(precision:progress:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of MASlice.contains(node:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of MASlice.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of MASlice.tag.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of MASlice.tag.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of MASlice.tag.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of MASlice.setProjectionPaths(targetSlice:closure:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of MASlice.removeProjectionPaths(targetSlice:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of MASlice.removeProjectionPaths()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of MASlice.setFuzziness(closure:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of MASlice.removeFuzziness()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of MASlice.project(node:slice:paths:progress:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of MASlice.projectTo(slice:paths:precision:progress:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of MASlice.fragmentBy(slice:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of MASlice.distributeBy(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of MASlice.filter(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of MASlice.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t method lookup function for MASlices(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MASlices);
}

uint64_t method lookup function for MADomainsSlice(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MADomainsSlice);
}

uint64_t method lookup function for MAFetchSlice(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MAFetchSlice);
}

uint64_t method lookup function for MAQuerySlice(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MAQuerySlice);
}

uint64_t dispatch thunk of MAQuerySlice.constrainWith(visualFormat:visualElements:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 496))();
}

uint64_t sub_1D1711AE0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1D1711B20(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1D1711B30(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1D1711B94()
{
  unint64_t result = qword_1EA652DF8;
  if (!qword_1EA652DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA652DF8);
  }
  return result;
}

uint64_t Matrix<A>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t result = sub_1D1712010(MEMORY[0x1E4FBC860], sub_1D1694F94, v25);
    uint64_t v4 = v25[0];
    uint64_t v3 = v25[1];
    unint64_t v6 = v25[2];
LABEL_25:
    *a2 = v4;
    a2[1] = v3;
    a2[2] = v6;
    return result;
  }
  uint64_t v7 = *(void *)(v2 + 16);
  int64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = v6 - 1;
  if (v6 != 1)
  {
    if (v6 >= 5)
    {
      unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v12 = vdupq_n_s64(v8);
      BOOL v13 = (int64x2_t *)(a1 + 56);
      unint64_t v14 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v15 = v12;
      do
      {
        int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v12, v13[-1]), (int8x16_t)v12, (int8x16_t)v13[-1]);
        int64x2_t v15 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v15, *v13), (int8x16_t)v15, *(int8x16_t *)v13);
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      int8x16_t v16 = vbslq_s8((int8x16_t)vcgtq_s64(v12, v15), (int8x16_t)v12, (int8x16_t)v15);
      uint64_t v17 = vextq_s8(v16, v16, 8uLL).u64[0];
      int64_t v8 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v16.i64[0], v17), *(int8x8_t *)v16.i8, (int8x8_t)v17);
      if (v9 == (v9 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v10 = 1;
    }
    unint64_t v18 = v6 - v10;
    uint64_t v19 = (int64_t *)(a1 + 8 * v10 + 32);
    do
    {
      int64_t v21 = *v19++;
      int64_t v20 = v21;
      if (v8 <= v21) {
        int64_t v8 = v20;
      }
      --v18;
    }
    while (v18);
  }
LABEL_13:
  if (v8 >= v7)
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if ((unsigned __int128)(v3 * (__int128)(uint64_t)v6) >> 64 != (uint64_t)(v3 * v6) >> 63)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v22 = sub_1D1665A14(v3 * v6, 0);
  if (*(void *)(v22 + 16) == v3 * v6)
  {
    uint64_t v4 = v22;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  uint64_t result = (uint64_t)sub_1D166762C(v4);
  uint64_t v4 = result;
LABEL_17:
  if (v3 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v7 > 0x7FFFFFFF)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v3 < (uint64_t)0xFFFFFFFF80000000 || v7 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_32;
  }
  if (!(v6 >> 31))
  {
    uint64_t v23 = v4 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v6; ++i)
    {
      cblas_scopy_NEWLAPACK();
      v23 += 4;
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_25;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t Matrix<A>.normalizeMagnitude(along:)(vDSP_Stride a1)
{
  vDSP_Stride v2 = a1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  if (!a1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
      {
        unint64_t v5 = 1;
        uint64_t v6 = *(void *)(v1 + 16);
        uint64_t v7 = v6;
        uint64_t v4 = *(void *)(v1 + 8);
        goto LABEL_9;
      }
      goto LABEL_16;
    }
LABEL_24:
    sub_1D17BEA30();
    __break(1u);
    goto LABEL_25;
  }
  if (a1 != 1)
  {
LABEL_25:
    type metadata accessor for MatrixAxis(0);
    swift_bridgeObjectRetain();
    uint64_t result = sub_1D17BEBF0();
    __break(1u);
    return result;
  }
  if (v4 < 0) {
    goto LABEL_24;
  }
  if (v4)
  {
    uint64_t v7 = 1;
    uint64_t v6 = *(void *)(v1 + 8);
    unint64_t v5 = *(void *)(v1 + 16);
LABEL_9:
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1D17BE1C0();
    *(void *)(v8 + 16) = v4;
    if (v6 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v6 > 0x7FFFFFFF)
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      int64_t v9 = v5 >> 31;
      if (v5 >> 31)
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      uint64_t v10 = v8;
      vDSP_Stride v15 = v2;
      while ((unsigned __int128)(v9 * (__int128)v7) >> 64 == (v9 * v7) >> 63)
      {
        int64_t v11 = v9 + 1;
        uint64_t v12 = v10 + 4 * v9;
        cblas_snrm2_NEWLAPACK();
        *(_DWORD *)(v12 + 32) = v13;
        int64_t v9 = v11;
        if (v4 == v11)
        {
          vDSP_Stride v2 = v15;
          goto LABEL_17;
        }
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  uint64_t v10 = MEMORY[0x1E4FBC860];
LABEL_17:
  *(void *)(v10 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v16 = v10;
  Matrix<A>.divide(by:along:)(&v16, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D1711FF8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D1712010(a1, sub_1D1694F94, a2);
}

uint64_t sub_1D1712010@<X0>(uint64_t result@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 32);
    while (*(void *)(*(void *)(result + 8 * v7 + 32) + 16) == *(void *)(v8 + 16))
    {
      if (v5 == ++v7)
      {
        swift_bridgeObjectRetain();
        uint64_t v9 = a2(v3);
        uint64_t v10 = *(void *)(v3 + 16);
        swift_bridgeObjectRelease();
        uint64_t v11 = *(void *)(v8 + 16);
        uint64_t result = swift_bridgeObjectRelease();
        if ((unsigned __int128)(v10 * (__int128)v11) >> 64 == (v10 * v11) >> 63)
        {
          if (*(void *)(v9 + 16) == v10 * v11) {
            goto LABEL_9;
          }
          __break(1u);
          goto LABEL_8;
        }
LABEL_11:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_8:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = MEMORY[0x1E4FBC860];
LABEL_9:
  *a3 = v9;
  a3[1] = v10;
  a3[2] = v11;
  return result;
}

uint64_t Matrix.init(rows:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_1D17BE260();
  sub_1D17BE260();
  swift_getWitnessTable();
  uint64_t v7 = sub_1D17BE460();
  if (!v15)
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_1D17BE1A0();
    uint64_t v14 = type metadata accessor for Matrix();
    uint64_t result = sub_1D171369C(v14);
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    goto LABEL_5;
  }
  MEMORY[0x1F4188790](v7, v8);
  swift_getWitnessTable();
  uint64_t result = sub_1D17BE080();
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    sub_1D17BE0F0();
    sub_1D17BE980();
    swift_getWitnessTable();
    uint64_t v10 = sub_1D17BE290();
    uint64_t v11 = MEMORY[0x1D25F8BB0](a1, v6);
    swift_bridgeObjectRelease();
    uint64_t v12 = MEMORY[0x1D25F8BB0](v15, a2);
    swift_bridgeObjectRelease();
    uint64_t v13 = type metadata accessor for Matrix();
    uint64_t result = sub_1D171369C(v13);
LABEL_5:
    *a3 = v10;
    a3[1] = v11;
    a3[2] = v12;
    return result;
  }
  __break(1u);
  return result;
}

__n128 Matrix.init(arrayLiteral:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Matrix.init(rows:)(a1, a2, &v5);
  __n128 result = v6;
  *(void *)a3 = v5;
  *(__n128 *)(a3 + 8) = result;
  return result;
}

uint64_t Matrix.init(elements:rows:columns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Matrix();
  uint64_t result = sub_1D171369C(v8);
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

__n128 Matrix.init(repeating:rows:columns:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a4 - 8);
  double v11 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v13 = (char *)&v17[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, a1, v14, v11);
  v17[0] = a2;
  v17[1] = a3;
  Matrix.init(repeating:shape:)((uint64_t)v13, v17, a4, &v18);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
  __n128 result = v19;
  *(void *)a5 = v18;
  *(__n128 *)(a5 + 8) = result;
  return result;
}

double static Matrix<A>.zeros(rows:columns:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1D1712530(a1, a2, a3, a4);
}

double static Matrix<A>.ones(rows:columns:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1D1712530(a1, a2, a3, a4);
}

double sub_1D1712530@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v13 = a2;
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness, v10);
  swift_getAssociatedConformanceWitness();
  sub_1D17BEC00();
  sub_1D17BEBA0();
  *(void *)&double result = Matrix.init(repeating:rows:columns:)((uint64_t)v8, a1, v13, a3, a4).n128_u64[0];
  return result;
}

uint64_t Matrix.subscript.getter(Swift::Int a1, Swift::Int a2)
{
  Matrix.position(row:column:)(a1, a2);
  return sub_1D17BE2C0();
}

uint64_t Matrix.rows.getter(uint64_t result)
{
  uint64_t v2 = v1[1];
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    uint64_t v4 = v1[2];
    uint64_t v5 = *v1;
    __n128 v6 = (void *)swift_allocObject();
    void v6[2] = *(void *)(v3 + 16);
    v6[3] = v5;
    v6[4] = v2;
    v6[5] = v4;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA652E00);
    sub_1D17BE6B0();
    sub_1D17171A4();
    sub_1D17BEB30();
    swift_release();
    return v7;
  }
  return result;
}

void Matrix.count.getter()
{
}

uint64_t Matrix.description.getter(uint64_t a1)
{
  sub_1D17BE030();
  type metadata accessor for Matrix.Shape();
  swift_getWitnessTable();
  sub_1D17BEB90();
  sub_1D17BE030();
  *(void *)&long long v8 = Matrix.rows.getter(a1);
  *((void *)&v8 + 1) = v2;
  *(void *)&long long v10 = v3;
  *((void *)&v10 + 1) = v4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA652088);
  sub_1D17BE6B0();
  sub_1D1717218();
  sub_1D17BE9C0();
  sub_1D17BE990();
  sub_1D17BE9B0();
  sub_1D17BE9A0();
  long long v5 = v8;
  if ((void)v8)
  {
    long long v6 = v10;
    do
    {
      long long v9 = v5;
      long long v11 = v6;
      swift_getWitnessTable();
      sub_1D17BEB90();
      sub_1D17BE030();
      sub_1D17BE030();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      sub_1D17BE9A0();
      long long v5 = v9;
      long long v6 = v11;
    }
    while ((void)v9);
  }
  swift_release();
  sub_1D17BE030();
  return 0;
}

uint64_t Matrix.subscript.setter(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4)
{
  sub_1D1717294(a1, a2, a3, a4);
  long long v6 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a4 + 16) - 8) + 8);
  return v6(a1);
}

uint64_t Matrix<A>.sum(along:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D1712A98(a1, MEMORY[0x1E4F16A38], a2);
}

{
  return sub_1D1716B38(a1, MEMORY[0x1E4F16A48], a2);
}

uint64_t Matrix<A>.mean(along:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D1712A98(a1, MEMORY[0x1E4F169A0], a2);
}

{
  return sub_1D1716B38(a1, MEMORY[0x1E4F169A8], a2);
}

uint64_t sub_1D1712A98@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v8 = v3[2];
  if (!a1)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        uint64_t v17 = a3;
        uint64_t v9 = 1;
        uint64_t v10 = v3[2];
        uint64_t v11 = v10;
        uint64_t v8 = v6;
        goto LABEL_9;
      }
      goto LABEL_14;
    }
LABEL_20:
    sub_1D17BEA30();
    __break(1u);
    goto LABEL_21;
  }
  if (a1 != 1)
  {
LABEL_21:
    type metadata accessor for MatrixAxis(0);
    uint64_t result = sub_1D17BEBF0();
    __break(1u);
    return result;
  }
  if (v8 < 0) {
    goto LABEL_20;
  }
  if (v8)
  {
    uint64_t v17 = a3;
    uint64_t v11 = 1;
    uint64_t v10 = v6;
    uint64_t v9 = v8;
LABEL_9:
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1D17BE1C0();
    uint64_t v13 = 0;
    *(void *)(v12 + 16) = v8;
    uint64_t v14 = v12 + 32;
    while (1)
    {
      uint64_t v15 = v13 * v11;
      if ((unsigned __int128)(v13 * (__int128)v11) >> 64 != (v13 * v11) >> 63) {
        break;
      }
      if (v10 < 0) {
        goto LABEL_19;
      }
      ++v13;
      a2(v7 + 32 + 4 * v15, v9, v14, v10);
      v14 += 4;
      if (v8 == v13)
      {
        a3 = v17;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_19:
    sub_1D17BEA30();
    __break(1u);
    goto LABEL_20;
  }
LABEL_14:
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  uint64_t v12 = MEMORY[0x1E4FBC860];
LABEL_15:
  *(void *)(v12 + 16) = v8;
  *a3 = v12;
  return swift_bridgeObjectRelease();
}

void Matrix.appendingColumn(_:)()
{
}

uint64_t Matrix.appendingColumns(of:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if (v3 != v2[1])
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = v2[2];
  uint64_t v6 = v5 + v4;
  if (__OFADD__(v5, v4))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)result;
  uint64_t v8 = *v2;
  sub_1D17BE260();
  swift_getWitnessTable();
  if (sub_1D17BE4A0())
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = type metadata accessor for Matrix();
    uint64_t result = sub_1D171369C(v9);
    uint64_t v8 = v7;
LABEL_10:
    *a2 = v8;
    a2[1] = v3;
    a2[2] = v6;
    return result;
  }
  if (sub_1D17BE4A0())
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = type metadata accessor for Matrix();
LABEL_9:
    uint64_t result = sub_1D171369C(v11);
    goto LABEL_10;
  }
  uint64_t result = v3 * v6;
  if ((unsigned __int128)(v3 * (__int128)v6) >> 64 == (v3 * v6) >> 63)
  {
    MEMORY[0x1F4188790](result, v10);
    uint64_t v8 = sub_1D16B9E64();
    uint64_t v11 = type metadata accessor for Matrix();
    goto LABEL_9;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t Matrix.appendRow<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v30 = a2;
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1, a2);
  v29[0] = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v14 = (char *)v29 - v13;
  v17.n128_f64[0] = MEMORY[0x1F4188790](v15, v16);
  __n128 v19 = (char *)v29 - v18;
  if (!*(void *)(v4 + 8)) {
    *(void *)(v4 + 16) = sub_1D17BE410();
  }
  int64_t v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
  v20(v19, a1, a3, v17);
  v29[1] = a4;
  uint64_t v21 = sub_1D17BE410();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v19, a3);
  if (v21 != *(void *)(v5 + 16))
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  ((void (*)(char *, uint64_t, uint64_t))v20)(v14, a1, a3);
  uint64_t v23 = v30;
  type metadata accessor for Vector();
  if (swift_dynamicCast())
  {
    uint64_t v24 = sub_1D17BE260();
    uint64_t WitnessTable = swift_getWitnessTable();
    Matrix.appendRow<A>(_:)(&v31, v23, v24, WitnessTable);
    return swift_bridgeObjectRelease();
  }
  ((void (*)(void, uint64_t, uint64_t))v20)(v29[0], a1, a3);
  sub_1D17BE260();
  uint64_t result = sub_1D17BE210();
  uint64_t v26 = *(void *)(v5 + 8);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27) {
    goto LABEL_10;
  }
  *(void *)(v5 + 8) = v28;
  return result;
}

BOOL static Matrix<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = sub_1D17BE280();
  BOOL v8 = v2 == v4 && v3 == v5;
  return (v6 & 1) != 0 && v8;
}

uint64_t Matrix<A>.hashValue.getter()
{
  return sub_1D17BED80();
}

void *Matrix.withUnsafeMutableBufferPointer<A>(_:)(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[3] = a4;
  uint64_t v6 = *(void *)(a3 + 16);
  sub_1D17BE260();
  sub_1D17BE190();
  uint64_t v7 = *v4;
  if (_swift_isClassOrObjCExistentialType()) {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = *(void *)(v8 + 16);
  if (_swift_isClassOrObjCExistentialType()) {
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v10 = v7;
  }
  v13[0] = v10
         + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80));
  uint64_t v11 = v13[0];
  v13[1] = v9;
  a1(v13);
  return sub_1D16AC09C(v13, v11, v9);
}

uint64_t Matrix.Shape.rows.getter()
{
  return *(void *)v0;
}

uint64_t Matrix.Shape.rows.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Matrix.Shape.rows.modify())()
{
  return nullsub_1;
}

uint64_t Matrix.Shape.columns.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t Matrix.Shape.columns.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*Matrix.Shape.columns.modify())()
{
  return nullsub_1;
}

uint64_t Matrix.Shape.init(rows:columns:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Matrix.Shape.count.getter()
{
  uint64_t v1 = v0[1];
  uint64_t result = *v0 * v1;
  if ((unsigned __int128)(*v0 * (__int128)v1) >> 64 != result >> 63) {
    __break(1u);
  }
  return result;
}

uint64_t Matrix.Shape.description.getter()
{
  return 40;
}

uint64_t Matrix.Shape.hash(into:)()
{
  return sub_1D17BED30();
}

BOOL static Matrix.Shape.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t Matrix.Shape.hashValue.getter()
{
  return sub_1D17BED80();
}

uint64_t sub_1D17135C0()
{
  return sub_1D17BED80();
}

uint64_t Matrix.elements.getter()
{
  sub_1D169D83C();
  return swift_bridgeObjectRetain();
}

__n128 Matrix.shape.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  *a1 = result;
  return result;
}

uint64_t Matrix.init(elements:shape:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = type metadata accessor for Matrix();
  uint64_t result = sub_1D171369C(v7);
  *a3 = a1;
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

uint64_t sub_1D171369C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t result = MEMORY[0x1D25F8BB0](v2, *(void *)(a1 + 16));
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result != v3 * v4) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_1D17136EC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t result = *a1 * a2;
  if ((unsigned __int128)(v4 * (__int128)a2) >> 64 != result >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (__OFADD__(result, a2))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result + a2 >= result)
  {
    uint64_t result = sub_1D17BE2A0();
    *a3 = result;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = v8;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

Swift::Int __swiftcall Matrix.position(row:column:)(Swift::Int row, Swift::Int column)
{
  if (*(void *)(v2 + 8) < row)
  {
    __break(1u);
    goto LABEL_7;
  }
  Swift::Int v3 = *(void *)(v2 + 16);
  if (v3 <= column)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  Swift::Int v4 = row * v3;
  if ((unsigned __int128)(row * (__int128)v3) >> 64 != (row * v3) >> 63)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  row = v4 + column;
  if (__OFADD__(v4, column)) {
LABEL_9:
  }
    __break(1u);
  return row;
}

Swift::tuple_row_Int_column_Int __swiftcall Matrix.index(position:)(Swift::Int position)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (position == 0x8000000000000000 && v2 == -1) {
    goto LABEL_6;
  }
  Swift::Int v3 = position % v2;
  position /= v2;
LABEL_7:
  result.column = v3;
  result.row = position;
  return result;
}

uint64_t sub_1D17137C8(uint64_t a1, Swift::Int *a2)
{
  Swift::Int v2 = *a2;
  Swift::Int v3 = a2[1];
  type metadata accessor for Matrix();
  return Matrix.subscript.getter(v2, v3);
}

void (*Matrix.subscript.modify(void *a1, Swift::Int a2, Swift::Int a3, uint64_t a4))(Swift::Int **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  void v9[2] = a4;
  v9[3] = v4;
  void *v9 = a2;
  v9[1] = a3;
  uint64_t v10 = *(void *)(a4 + 16);
  v9[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  v9[7] = malloc(v12);
  Matrix.position(row:column:)(a2, a3);
  sub_1D17BE2C0();
  return sub_1D1713950;
}

void sub_1D1713950(Swift::Int **a1, char a2)
{
  Swift::Int v2 = *a1;
  Swift::Int v3 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  Swift::Int v5 = (*a1)[4];
  Swift::Int v6 = (*a1)[5];
  uint64_t v7 = (*a1)[2];
  Swift::Int v9 = **a1;
  Swift::Int v8 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(Swift::Int, void *, Swift::Int))(v6 + 16))((*a1)[6], v4, v5);
    sub_1D1717294((uint64_t)v3, v9, v8, v7);
    uint64_t v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
    v10(v3, v5);
    v10(v4, v5);
  }
  else
  {
    sub_1D1717294((*a1)[7], v9, v8, v7);
    (*(void (**)(void *, Swift::Int))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Matrix<A>.subscript.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t result = sub_1D1712010(MEMORY[0x1E4FBC860], sub_1D1695304, v25);
    uint64_t v4 = (void *)v25[0];
    uint64_t v3 = v25[1];
    unint64_t v6 = v25[2];
LABEL_25:
    *a2 = v4;
    a2[1] = v3;
    a2[2] = v6;
    return result;
  }
  uint64_t v7 = *(void *)(v2 + 16);
  int64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = v6 - 1;
  if (v6 != 1)
  {
    if (v6 >= 5)
    {
      unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v12 = vdupq_n_s64(v8);
      uint64_t v13 = (int64x2_t *)(a1 + 56);
      unint64_t v14 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v15 = v12;
      do
      {
        int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v12, v13[-1]), (int8x16_t)v12, (int8x16_t)v13[-1]);
        int64x2_t v15 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v15, *v13), (int8x16_t)v15, *(int8x16_t *)v13);
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      int8x16_t v16 = vbslq_s8((int8x16_t)vcgtq_s64(v12, v15), (int8x16_t)v12, (int8x16_t)v15);
      uint64_t v17 = vextq_s8(v16, v16, 8uLL).u64[0];
      int64_t v8 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v16.i64[0], v17), *(int8x8_t *)v16.i8, (int8x8_t)v17);
      if (v9 == (v9 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v10 = 1;
    }
    unint64_t v18 = v6 - v10;
    __n128 v19 = (int64_t *)(a1 + 8 * v10 + 32);
    do
    {
      int64_t v21 = *v19++;
      int64_t v20 = v21;
      if (v8 <= v21) {
        int64_t v8 = v20;
      }
      --v18;
    }
    while (v18);
  }
LABEL_13:
  if (v8 >= v7)
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if ((unsigned __int128)(v3 * (__int128)(uint64_t)v6) >> 64 != (uint64_t)(v3 * v6) >> 63)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v22 = sub_1D1665914(v3 * v6, 0.0);
  if (*(void *)(v22 + 16) == v3 * v6)
  {
    uint64_t v4 = (void *)v22;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  uint64_t result = (uint64_t)sub_1D1667604(v4);
  uint64_t v4 = (void *)result;
LABEL_17:
  if (v3 > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v7 > 0x7FFFFFFF)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v3 < (uint64_t)0xFFFFFFFF80000000 || v7 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_32;
  }
  if (!(v6 >> 31))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v23 = 32;
    unint64_t v24 = v6;
    do
    {
      cblas_dcopy_NEWLAPACK();
      v23 += 8;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_25;
  }
LABEL_33:
  __break(1u);
  return result;
}

BOOL sub_1D1713C74(uint64_t a1, uint64_t a2)
{
  return static Matrix<A>.== infix(_:_:)(a1, a2);
}

uint64_t Matrix<A>.hash(into:)()
{
  return sub_1D17BED30();
}

uint64_t sub_1D1713CD4()
{
  return Matrix<A>.hashValue.getter();
}

uint64_t sub_1D1713CDC()
{
  return Matrix<A>.hash(into:)();
}

uint64_t sub_1D1713CE4()
{
  return sub_1D17BED80();
}

double sub_1D1713D38@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&double result = Matrix.init(arrayLiteral:)(a1, *(void *)(a2 + 16), a3).n128_u64[0];
  return result;
}

uint64_t Matrix.init(repeating:shape:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *a2 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 == v7 >> 63)
  {
    uint64_t v9 = result;
    uint64_t v11 = sub_1D16AC0F4(result, v7, a3);
    uint64_t v10 = type metadata accessor for Matrix();
    sub_1D171369C(v10);
    double result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(v9, a3);
    *a4 = v11;
    a4[1] = v5;
    a4[2] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D1713E00(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v17[9] = a3;
  v17[10] = a4;
  v17[11] = a5;
  uint64_t v17[2] = a11;
  uint64_t v17[3] = a6;
  v17[4] = a1;
  v17[5] = a7;
  v17[6] = a8;
  v17[7] = a9;
  v17[8] = a10;
  uint64_t v14 = type metadata accessor for Matrix();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)((uint64_t)sub_1D1717884, (uint64_t)v17, v14, MEMORY[0x1E4FBC848] + 8, WitnessTable);
  if ((unsigned __int128)(a7 * (__int128)a8) >> 64 == (a7 * a8) >> 63) {
    *a2 = a7 * a8;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D1713EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v12[11] = a3;
  void v12[2] = a9;
  void v12[3] = a4;
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = a5;
  v12[7] = a6;
  v12[8] = a7;
  v12[9] = a8;
  uint64_t v9 = type metadata accessor for Vector();
  uint64_t WitnessTable = swift_getWitnessTable();
  return AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)((uint64_t)sub_1D17178B8, (uint64_t)v12, v9, MEMORY[0x1E4FBC848] + 8, WitnessTable);
}

uint64_t sub_1D1713F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = sub_1D17BDFB0();
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v12 = result;
  uint64_t result = sub_1D17BDFB0();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v13 = result;
  uint64_t result = sub_1D17BDFB0();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (a6 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a6)
  {
    uint64_t v14 = 0;
    do
    {
      sub_1D17BE610();
      uint64_t v15 = a6;
      uint64_t v16 = *(void *)(*(void *)(a10 - 8) + 72);
      v13 += v16 * a9;
      uint64_t result = sub_1D17BE610();
      v12 += v16 * a9 + v16;
      a6 = v15;
      ++v14;
    }
    while (v15 != v14);
  }
  return result;
}

uint64_t sub_1D17140C4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  _OWORD v18[2] = a14;
  v18[3] = a6;
  v18[4] = a7;
  v18[5] = a8;
  v18[6] = a1;
  v18[7] = a9;
  v18[8] = a10;
  long long v19 = a11;
  uint64_t v20 = a12;
  uint64_t v21 = a13;
  uint64_t v15 = type metadata accessor for Matrix();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)((uint64_t)sub_1D1717804, (uint64_t)v18, v15, MEMORY[0x1E4FBC848] + 8, WitnessTable);
  if ((unsigned __int128)(a9 * (__int128)a10) >> 64 == (a9 * a10) >> 63) {
    *a2 = a9 * a10;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D17141A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  _OWORD v15[2] = a12;
  uint64_t v15[3] = a6;
  v15[4] = a1;
  v15[5] = a2;
  v15[6] = a7;
  v15[7] = a8;
  long long v16 = a9;
  uint64_t v17 = a10;
  uint64_t v18 = a11;
  uint64_t v12 = type metadata accessor for Matrix();
  uint64_t WitnessTable = swift_getWitnessTable();
  return AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)((uint64_t)sub_1D1717844, (uint64_t)v15, v12, MEMORY[0x1E4FBC848] + 8, WitnessTable);
}

uint64_t sub_1D171426C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t result = sub_1D17BDFB0();
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v14 = result;
  uint64_t result = sub_1D17BDFB0();
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v15 = result;
  uint64_t result = sub_1D17BDFB0();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (a6 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a6)
  {
    uint64_t v16 = result;
    do
    {
      sub_1D17BE610();
      uint64_t v17 = *(void *)(*(void *)(a12 - 8) + 72);
      v15 += v17 * a9;
      uint64_t result = sub_1D17BE610();
      v14 += v17 * a9 + v17 * a11;
      v16 += v17 * a11;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t sub_1D1714394@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  long long v4 = *a2;
  return Matrix.init(elements:shape:)(a1, (uint64_t *)&v4, a3);
}

void *sub_1D17143C4(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Matrix.withUnsafeMutableBufferPointer<A>(_:)(a1, a2, a4, a3);
}

uint64_t sub_1D17143EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)(a1, a2, a4, a3, WitnessTable);
}

uint64_t Matrix<A>.transposed()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1D17144AC(MEMORY[0x1E4F169F0], a1);
}

{
  return sub_1D17144AC(MEMORY[0x1E4F169E8], a1);
}

uint64_t sub_1D17144AC@<X0>(void (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5 = v2[1];
  uint64_t v4 = v2[2];
  uint64_t v6 = v5 * v4;
  if ((unsigned __int128)(v5 * (__int128)v4) >> 64 != (v5 * v4) >> 63)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *v2;
    swift_bridgeObjectRetain();
    if (v6)
    {
      uint64_t v9 = sub_1D17BE1C0();
      *(void *)(v9 + 16) = v6;
      if (v4 < 0) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v9 = MEMORY[0x1E4FBC860];
      if (v4 < 0) {
        goto LABEL_12;
      }
    }
    if ((v5 & 0x8000000000000000) == 0)
    {
      swift_bridgeObjectRetain();
      a1(v8 + 32, 1, v9 + 32, 1, v4, v5);
      swift_bridgeObjectRelease();
      *(void *)(v9 + 16) = v6;
      uint64_t result = swift_bridgeObjectRelease();
      if (*(void *)(v9 + 16) == v6)
      {
        *a2 = v9;
        a2[1] = v4;
        a2[2] = v5;
        return result;
      }
      goto LABEL_11;
    }
LABEL_12:
    sub_1D17BEA30();
    __break(1u);
  }
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t static Matrix<A>.* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v6)
    {
      uint64_t v8 = sub_1D17BE1C0();
      *(void *)(v8 + 16) = v6;
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4FBC860];
    }
    if (v4 <= 0x7FFFFFFF)
    {
      if (v5 <= 0x7FFFFFFF)
      {
        if (v7 >= (uint64_t)0xFFFFFFFF80000000
          && v4 >= (uint64_t)0xFFFFFFFF80000000
          && v5 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (v7 <= 0x7FFFFFFF)
          {
            cblas_dgemm_NEWLAPACK();
            *(void *)(v8 + 16) = v6;
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (*(void *)(v8 + 16) == v6)
            {
              *a3 = v8;
              a3[1] = v4;
              a3[2] = v5;
              return result;
            }
            goto LABEL_19;
          }
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_20:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v6)
    {
      uint64_t v8 = sub_1D17BE1C0();
      *(void *)(v8 + 16) = v6;
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4FBC860];
    }
    if (v4 <= 0x7FFFFFFF)
    {
      if (v5 <= 0x7FFFFFFF)
      {
        if (v7 >= (uint64_t)0xFFFFFFFF80000000
          && v4 >= (uint64_t)0xFFFFFFFF80000000
          && v5 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (v7 <= 0x7FFFFFFF)
          {
            cblas_sgemm_NEWLAPACK();
            *(void *)(v8 + 16) = v6;
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (*(void *)(v8 + 16) == v6)
            {
              *a3 = v8;
              a3[1] = v4;
              a3[2] = v5;
              return result;
            }
            goto LABEL_19;
          }
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_20:
  uint64_t result = sub_1D17BEA30();
  __break(1u);
  return result;
}

uint64_t Matrix.number(of:)(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = v1 + 8;
    return *(void *)v2;
  }
  if (a1 == 1)
  {
    uint64_t v2 = v1 + 16;
    return *(void *)v2;
  }
  type metadata accessor for MatrixAxis(0);
  uint64_t result = sub_1D17BEBF0();
  __break(1u);
  return result;
}

uint64_t Matrix.aggregate1<A>(along:aggregation:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v14 = *v6;
  uint64_t v13 = v6[1];
  uint64_t v15 = v6[2];
  uint64_t v26 = *v6;
  uint64_t v27 = v13;
  uint64_t v28 = v15;
  uint64_t v16 = Matrix.number(of:)(a1);
  v25[11] = a6;
  if (a1 > 1)
  {
    type metadata accessor for MatrixAxis(0);
    uint64_t result = sub_1D17BEBF0();
    __break(1u);
  }
  else
  {
    uint64_t v26 = v14;
    uint64_t v27 = v13;
    uint64_t v28 = v15;
    MEMORY[0x1F4188790](v16, v17);
    v25[2] = *(void *)(a4 + 16);
    uint64_t v25[3] = a5;
    v25[4] = v18;
    v25[5] = v19;
    v25[6] = v21;
    v25[7] = v20;
    v25[8] = a2;
    v25[9] = a3;
    uint64_t v22 = type metadata accessor for Vector();
    uint64_t WitnessTable = swift_getWitnessTable();
    return AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)((uint64_t)sub_1D1717438, (uint64_t)v25, a4, v22, WitnessTable);
  }
  return result;
}

uint64_t sub_1D1714B64@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1D17BDFB0();
  if (result)
  {
    MEMORY[0x1F4188790](result, v2);
    uint64_t v3 = sub_1D16B9E64();
    return Vector.init(elements:)(v3, a1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1D1714C54(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void *, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v22 = a8;
  uint64_t result = sub_1D17BDFB0();
  if (result)
  {
    if ((a3 & 0x8000000000000000) == 0)
    {
      if (!a3)
      {
LABEL_7:
        *a2 = a3;
        return result;
      }
      uint64_t v17 = result;
      uint64_t v18 = 0;
      while ((unsigned __int128)(v18 * (__int128)a5) >> 64 == (v18 * a5) >> 63)
      {
        uint64_t v19 = v18 + 1;
        v21[0] = a4 + *(void *)(*(void *)(a10 - 8) + 72) * v18 * a5;
        v21[1] = a6;
        _OWORD v21[2] = a7;
        uint64_t result = v22(v21, v17 + *(void *)(*(void *)(a11 - 8) + 72) * v18);
        uint64_t v18 = v19;
        if (a3 == v19) {
          goto LABEL_7;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Matrix.aggregate2<A, B>(along:transform:)(void *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v32 = a1;
  id v33 = a2;
  uint64_t v16 = *v8;
  uint64_t v15 = v8[1];
  uint64_t v17 = v8[2];
  uint64_t v36 = *v8;
  uint64_t v37 = v15;
  uint64_t v38 = v17;
  uint64_t v18 = Matrix.number(of:)(a3);
  if (a3 > 1)
  {
    type metadata accessor for MatrixAxis(0);
    uint64_t result = sub_1D17BEBF0();
    __break(1u);
  }
  else
  {
    v31[1] = v31;
    uint64_t v36 = v16;
    uint64_t v37 = v15;
    uint64_t v38 = v17;
    MEMORY[0x1F4188790](v18, v19);
    v30[2] = *(void *)(a6 + 16);
    v30[3] = a7;
    v30[4] = a8;
    v30[5] = v20;
    v30[6] = v22;
    v30[7] = v21;
    v30[8] = v24;
    v30[9] = v23;
    v30[10] = v25;
    v30[11] = a4;
    v30[12] = a5;
    type metadata accessor for Vector();
    type metadata accessor for Vector();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t result = AccelerateBufferWrapper.withUnsafeBufferPointer<A>(_:)((uint64_t)sub_1D171746C, (uint64_t)v30, a6, TupleTypeMetadata2, WitnessTable);
    uint64_t v29 = v35;
    *unint64_t v32 = v34;
    *id v33 = v29;
  }
  return result;
}

void *sub_1D1714F24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void *, uint64_t, uint64_t)@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v52 = a6;
  uint64_t v49 = a7;
  uint64_t v50 = a8;
  uint64_t v51 = a5;
  uint64_t v47 = a2;
  uint64_t v48 = a4;
  id v54 = a9;
  uint64_t v45 = a10;
  uint64_t v46 = a1;
  uint64_t v41 = a3;
  uint64_t v42 = a13;
  uint64_t v43 = *(void *)(a12 - 8);
  uint64_t v44 = a14;
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v40 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = *(void *)(*(void *)(*(void *)(v15 + 16) + 8) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness, v17);
  uint64_t v38 = *(void *)(a11 - 8);
  MEMORY[0x1F4188790](v18, v19);
  uint64_t v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v22, v23);
  swift_getAssociatedConformanceWitness();
  sub_1D17BEC00();
  sub_1D17BEBA0();
  uint64_t v24 = v41;
  uint64_t v25 = sub_1D16AC0F4((uint64_t)v21, v41, a11);
  uint64_t v26 = v38 + 8;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v21, a11);
  uint64_t v57 = v25;
  swift_getAssociatedConformanceWitness();
  sub_1D17BEC00();
  uint64_t v27 = (uint64_t)v40;
  sub_1D17BEBA0();
  uint64_t v28 = sub_1D16AC0F4(v27, v24, a12);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v27, a12);
  uint64_t v56 = v28;
  sub_1D17BE260();
  sub_1D17BE190();
  uint64_t v29 = v57;
  if (_swift_isClassOrObjCExistentialType()) {
    uint64_t v30 = v29 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v30 = v29;
  }
  uint64_t v31 = *(void *)(v30 + 16);
  if (_swift_isClassOrObjCExistentialType()) {
    uint64_t v32 = v29 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v32 = v29;
  }
  uint64_t v33 = v32 + ((*(unsigned __int8 *)(v26 + 72) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 72));
  v55[0] = v33;
  v55[1] = v31;
  uint64_t v34 = v53;
  sub_1D1715394((uint64_t)v55, &v56, v46, v47, v24, v48, v51, v52, v49, v50, v45, a11, a12);
  if (v34)
  {
    uint64_t result = sub_1D16AC09C(v55, v33, v31);
    __break(1u);
  }
  else
  {
    sub_1D16AC09C(v55, v33, v31);
    uint64_t v35 = v54 + 1;
    Vector.init(elements:)(v57, v54);
    return (void *)Vector.init(elements:)(v56, v35);
  }
  return result;
}

void *sub_1D1715394(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void *, uint64_t, uint64_t), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16 = sub_1D17BDFB0();
  if (v16)
  {
    uint64_t v17 = v16;
    sub_1D17BE260();
    sub_1D17BE190();
    uint64_t v18 = *a2;
    if (_swift_isClassOrObjCExistentialType()) {
      uint64_t v19 = v18 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v19 = v18;
    }
    uint64_t v13 = *(void *)(v19 + 16);
    if (_swift_isClassOrObjCExistentialType()) {
      uint64_t v20 = v18 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v20 = v18;
    }
    uint64_t v14 = v20
        + ((*(unsigned __int8 *)(*(void *)(a13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a13 - 8) + 80));
    v29[0] = v14;
    v29[1] = v13;
    uint64_t v21 = v29[4];
    sub_1D1715538((uint64_t)v29, a3, a4, a5, a6, a7, a8, a9, a10, v17, a11, a12, a13);
    if (!v21) {
      return sub_1D16AC09C(v29, v14, v13);
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = sub_1D16AC09C(v29, v14, v13);
  __break(1u);
  return result;
}

uint64_t sub_1D1715538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void *, uint64_t, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v23 = a8;
  uint64_t result = sub_1D17BDFB0();
  uint64_t v19 = result;
  if (!result) {
    goto LABEL_11;
  }
  uint64_t result = sub_1D17BDFB0();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (a4 < 0)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a4)
  {
    uint64_t v16 = result;
    uint64_t v17 = 0;
    while ((unsigned __int128)(v17 * (__int128)a5) >> 64 == (v17 * a5) >> 63)
    {
      uint64_t v18 = v17 + 1;
      v22[0] = v16 + *(void *)(*(void *)(a11 - 8) + 72) * v17 * a5;
      v22[1] = a6;
      v22[2] = a7;
      uint64_t result = v23(v22, a10 + *(void *)(*(void *)(a12 - 8) + 72) * v17, v19 + *(void *)(*(void *)(a13 - 8) + 72) * v17);
      uint64_t v17 = v18;
      if (a4 == v18) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

void *Matrix.modify(along:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4[1];
  uint64_t v10 = v4[2];
  v16[11] = *v4;
  v16[12] = v9;
  v16[13] = v10;
  uint64_t v11 = Matrix.number(of:)(a1);
  if (!a1)
  {
    uint64_t v9 = v10;
LABEL_5:
    MEMORY[0x1F4188790](v11, v12);
    _OWORD v16[2] = *(void *)(a4 + 16);
    void v16[3] = v13;
    v16[4] = v10;
    v16[5] = v14;
    v16[6] = v9;
    v16[7] = a2;
    v16[8] = a3;
    return Matrix.withUnsafeMutableBufferPointer<A>(_:)((void (*)(void *))sub_1D17174A8, (uint64_t)v16, a4, MEMORY[0x1E4FBC848] + 8);
  }
  if (a1 == 1)
  {
    uint64_t v10 = 1;
    goto LABEL_5;
  }
  type metadata accessor for MatrixAxis(0);
  uint64_t result = (void *)sub_1D17BEBF0();
  __break(1u);
  return result;
}

uint64_t sub_1D171579C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *), uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1D17BDFB0();
  if (!result) {
    goto LABEL_10;
  }
  if (a2 < 0)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (a2)
  {
    uint64_t v15 = result;
    uint64_t v16 = 0;
    uint64_t v17 = a8 - 8;
    while (1)
    {
      uint64_t v18 = v16 * a3;
      if ((unsigned __int128)(v16 * (__int128)a3) >> 64 != (v16 * a3) >> 63) {
        break;
      }
      ++v16;
      v19[0] = v15 + *(void *)(*(void *)v17 + 72) * v18;
      v19[1] = a4;
      v19[2] = a5;
      uint64_t result = a6(v19);
      if (a2 == v16) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t Matrix.modify<A, B>(along:transform:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v15 = v8[1];
  uint64_t v16 = v8[2];
  uint64_t v29 = *v8;
  uint64_t v30 = v15;
  uint64_t v31 = v16;
  uint64_t v17 = Matrix.number(of:)(a3);
  if (!a3)
  {
    uint64_t v15 = v16;
LABEL_5:
    MEMORY[0x1F4188790](v17, v18);
    _OWORD v26[2] = *(void *)(a6 + 16);
    v26[3] = a7;
    v26[4] = a8;
    v26[5] = v19;
    v26[6] = v21;
    v26[7] = v20;
    v26[8] = v16;
    v26[9] = v22;
    v26[10] = v15;
    v26[11] = a4;
    v26[12] = a5;
    type metadata accessor for Vector();
    type metadata accessor for Vector();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t result = (uint64_t)Matrix.withUnsafeMutableBufferPointer<A>(_:)((void (*)(void *))sub_1D17174D0, (uint64_t)v26, a6, TupleTypeMetadata2);
    uint64_t v25 = v30;
    *uint64_t v27 = v29;
    *uint64_t v28 = v25;
    return result;
  }
  if (a3 == 1)
  {
    uint64_t v16 = 1;
    goto LABEL_5;
  }
  type metadata accessor for MatrixAxis(0);
  uint64_t result = sub_1D17BEBF0();
  __break(1u);
  return result;
}

void *sub_1D1715A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void *, uint64_t, uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v48 = a6;
  uint64_t v45 = a7;
  uint64_t v46 = a8;
  uint64_t v47 = a5;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v38 = a2;
  uint64_t v42 = a1;
  uint64_t v50 = a9;
  uint64_t v40 = *(void *)(a11 - 8);
  uint64_t v39 = a12;
  uint64_t v41 = a13;
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v37 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[1] = *(void *)(*(void *)(*(void *)(v14 + 16) + 8) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness, v16);
  v36[0] = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](v17, v18);
  uint64_t v20 = (char *)v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v21, v22);
  swift_getAssociatedConformanceWitness();
  sub_1D17BEC00();
  sub_1D17BEBA0();
  uint64_t v23 = v38;
  uint64_t v24 = sub_1D16AC0F4((uint64_t)v20, v38, a10);
  uint64_t v25 = v36[0] + 8;
  (*(void (**)(char *, uint64_t))(v36[0] + 8))(v20, a10);
  uint64_t v53 = v24;
  swift_getAssociatedConformanceWitness();
  sub_1D17BEC00();
  uint64_t v26 = (uint64_t)v37;
  sub_1D17BEBA0();
  uint64_t v27 = sub_1D16AC0F4(v26, v23, a11);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v26, a11);
  uint64_t v52 = v27;
  sub_1D17BE260();
  sub_1D17BE190();
  uint64_t v28 = v53;
  if (_swift_isClassOrObjCExistentialType()) {
    uint64_t v29 = v28 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v29 = v28;
  }
  uint64_t v30 = *(void *)(v29 + 16);
  if (_swift_isClassOrObjCExistentialType()) {
    uint64_t v31 = v28 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v31 = v28;
  }
  uint64_t v32 = v31 + ((*(unsigned __int8 *)(v25 + 72) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 72));
  v51[0] = v32;
  v51[1] = v30;
  uint64_t v33 = v49;
  sub_1D1715E6C((uint64_t)v51, &v52, v42, v23, v43, v44, v47, v48, v45, v46, a10, a11);
  if (v33)
  {
    uint64_t result = sub_1D16AC09C(v51, v32, v30);
    __break(1u);
  }
  else
  {
    sub_1D16AC09C(v51, v32, v30);
    uint64_t v34 = v50 + 1;
    Vector.init(elements:)(v53, v50);
    return (void *)Vector.init(elements:)(v52, v34);
  }
  return result;
}

void *sub_1D1715E6C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void *, uint64_t, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15 = sub_1D17BDFB0();
  if (v15)
  {
    uint64_t v16 = v15;
    sub_1D17BE260();
    sub_1D17BE190();
    uint64_t v17 = *a2;
    if (_swift_isClassOrObjCExistentialType()) {
      uint64_t v18 = v17 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v18 = v17;
    }
    uint64_t v12 = *(void *)(v18 + 16);
    if (_swift_isClassOrObjCExistentialType()) {
      uint64_t v19 = v17 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v19 = v17;
    }
    uint64_t v13 = v19
        + ((*(unsigned __int8 *)(*(void *)(a12 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a12 - 8) + 80));
    v28[0] = v13;
    v28[1] = v12;
    uint64_t v20 = v28[4];
    sub_1D1715FFC((uint64_t)v28, a3, a4, a5, a6, a7, a8, a9, v16, a10, a11, a12);
    if (!v20) {
      return sub_1D16AC09C(v28, v13, v12);
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = sub_1D16AC09C(v28, v13, v12);
  __break(1u);
  return result;
}

uint64_t sub_1D1715FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void *, uint64_t, uint64_t), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v22 = a7;
  uint64_t result = sub_1D17BDFB0();
  uint64_t v18 = result;
  if (!result) {
    goto LABEL_11;
  }
  uint64_t result = sub_1D17BDFB0();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (a3 < 0)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a3)
  {
    uint64_t v15 = result;
    uint64_t v16 = 0;
    while ((unsigned __int128)(v16 * (__int128)a4) >> 64 == (v16 * a4) >> 63)
    {
      uint64_t v17 = v16 + 1;
      v21[0] = v15 + *(void *)(*(void *)(a10 - 8) + 72) * v16 * a4;
      v21[1] = a5;
      _OWORD v21[2] = a6;
      uint64_t result = v22(v21, a9 + *(void *)(*(void *)(a11 - 8) + 72) * v16, v18 + *(void *)(*(void *)(a12 - 8) + 72) * v16);
      uint64_t v16 = v17;
      if (a3 == v17) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

uint64_t Matrix<A>.magnitude(along:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 8);
  unint64_t v5 = *(void *)(v2 + 16);
  if (!a1)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4)
      {
        unint64_t v6 = 1;
        uint64_t v7 = *(void *)(v2 + 16);
        uint64_t v8 = v7;
        unint64_t v5 = v4;
        goto LABEL_9;
      }
      goto LABEL_16;
    }
LABEL_24:
    sub_1D17BEA30();
    __break(1u);
    goto LABEL_25;
  }
  if (a1 != 1)
  {
LABEL_25:
    type metadata accessor for MatrixAxis(0);
    uint64_t result = sub_1D17BEBF0();
    __break(1u);
    return result;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_24;
  }
  if (v5)
  {
    uint64_t v8 = 1;
    uint64_t v7 = v4;
    unint64_t v6 = v5;
LABEL_9:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1D17BE1C0();
    *(void *)(v9 + 16) = v5;
    if (v7 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v7 > 0x7FFFFFFF)
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      int64_t v10 = v6 >> 31;
      if (v6 >> 31)
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      uint64_t v11 = v9;
      while ((unsigned __int128)(v10 * (__int128)v8) >> 64 == (v10 * v8) >> 63)
      {
        int64_t v12 = v10 + 1;
        uint64_t v13 = v11 + 4 * v10;
        cblas_snrm2_NEWLAPACK();
        *(_DWORD *)(v13 + 32) = v14;
        int64_t v10 = v12;
        if (v5 == v12) {
          goto LABEL_17;
        }
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  unint64_t v5 = 0;
  uint64_t v11 = MEMORY[0x1E4FBC860];
LABEL_17:
  *(void *)(v11 + 16) = v5;
  *a2 = v11;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t vars8;

  uint64_t v4 = *(void *)(v2 + 8);
  unint64_t v5 = *(void *)(v2 + 16);
  if (!a1)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4)
      {
        unint64_t v6 = 1;
        uint64_t v7 = *(void *)(v2 + 16);
        uint64_t v8 = v7;
        unint64_t v5 = v4;
        goto LABEL_9;
      }
      goto LABEL_16;
    }
LABEL_24:
    sub_1D17BEA30();
    __break(1u);
    goto LABEL_25;
  }
  if (a1 != 1)
  {
LABEL_25:
    type metadata accessor for MatrixAxis(0);
    uint64_t result = sub_1D17BEBF0();
    __break(1u);
    return result;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_24;
  }
  if (v5)
  {
    uint64_t v8 = 1;
    uint64_t v7 = v4;
    unint64_t v6 = v5;
LABEL_9:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1D17BE1C0();
    *(void *)(v9 + 16) = v5;
    if (v7 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v7 > 0x7FFFFFFF)
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      int64_t v10 = v6 >> 31;
      if (v6 >> 31)
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      uint64_t v11 = v9;
      while ((unsigned __int128)(v10 * (__int128)v8) >> 64 == (v10 * v8) >> 63)
      {
        int64_t v12 = v10 + 1;
        uint64_t v13 = v11 + 8 * v10;
        cblas_dnrm2_NEWLAPACK();
        *(void *)(v13 + 32) = v14;
        int64_t v10 = v12;
        if (v5 == v12) {
          goto LABEL_17;
        }
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  unint64_t v5 = 0;
  uint64_t v11 = MEMORY[0x1E4FBC860];
LABEL_17:
  *(void *)(v11 + 16) = v5;
  *a2 = v11;
  return swift_bridgeObjectRelease();
}

uint64_t Matrix<A>.meanAndStandardDeviation(along:)(float *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v7 = *(float **)v3;
  unint64_t v6 = *(void *)(v3 + 8);
  unint64_t v8 = *(void *)(v3 + 16);
  if (!a3)
  {
    vDSP_Stride v9 = 1;
    vDSP_Length v10 = *(void *)(v3 + 16);
    uint64_t v11 = v10;
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    uint64_t v11 = 1;
    vDSP_Length v10 = v6;
    vDSP_Stride v9 = v8;
    unint64_t v6 = v8;
LABEL_5:
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1D1665A14(v6, 0);
    uint64_t v13 = sub_1D1665A14(v6, 0);
    uint64_t v19 = (char *)v12;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_15;
    }
    while (1)
    {
      uint64_t v17 = (char **)a1;
      uint64_t v18 = a2;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        if ((v6 & 0x8000000000000000) != 0) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v13 = (uint64_t)sub_1D166762C(v13);
        if ((v6 & 0x8000000000000000) != 0)
        {
LABEL_17:
          __break(1u);
LABEL_18:
          sub_1D17BEA30();
          __break(1u);
          break;
        }
      }
      if (!v6)
      {
LABEL_13:
        uint64_t result = swift_bridgeObjectRelease();
        *uint64_t v17 = v19;
        *uint64_t v18 = v13;
        return result;
      }
      a2 = 0;
      a1 = v7 + 8;
      uint64_t v7 = (float *)(v19 + 32);
      int v14 = (float *)(v13 + 32);
      while (1)
      {
        uint64_t v15 = (void)a2 * v11;
        if ((unsigned __int128)((uint64_t)a2 * (__int128)v11) >> 64 != ((uint64_t)a2 * v11) >> 63) {
          break;
        }
        if ((v10 & 0x8000000000000000) != 0) {
          goto LABEL_18;
        }
        a2 = (uint64_t *)((char *)a2 + 1);
        vDSP_normalize(&a1[v15], v9, 0, 1, v7++, v14++, v10);
        if ((uint64_t *)v6 == a2) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_15:
      uint64_t v19 = sub_1D166762C((uint64_t)v19);
    }
  }
  type metadata accessor for MatrixAxis(0);
  uint64_t result = sub_1D17BEBF0();
  __break(1u);
  return result;
}

void Matrix<A>.normalizeMeanAndStandardDeviation(along:)(vDSP_Length a1)
{
  __Mean[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(char **)v1;
  vDSP_Length v3 = *(void *)(v1 + 8);
  vDSP_Length v4 = *(void *)(v1 + 16);
  if (!a1)
  {
    vDSP_Stride v5 = 1;
    vDSP_Length v6 = *(void *)(v1 + 16);
    uint64_t v7 = v6;
    vDSP_Stride v8 = *(void *)(v1 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_15;
    }
    vDSP_Length v6 = v4;
    uint64_t v7 = v4;
    vDSP_Length v4 = v3;
    if ((v3 & 0x8000000000000000) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    __break(1u);
  }
  vDSP_Length v6 = a1;
  if (a1 != 1) {
    goto LABEL_18;
  }
  uint64_t v7 = 1;
  vDSP_Length v6 = *(void *)(v1 + 8);
  vDSP_Stride v8 = *(void *)(v1 + 16);
  vDSP_Stride v5 = v8;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_15;
  }
  vDSP_Length v6 = v3;
  vDSP_Stride v5 = v4;
  if ((v4 & 0x8000000000000000) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if (!v4)
  {
LABEL_13:
    *(void *)uint64_t v1 = v2;
    return;
  }
  uint64_t v9 = 0;
  vDSP_Stride v8 = (vDSP_Stride)(v2 + 32);
  while (1)
  {
    uint64_t v10 = v9 * v7;
    if ((unsigned __int128)(v9 * (__int128)v7) >> 64 != (v9 * v7) >> 63)
    {
      __break(1u);
LABEL_15:
      uint64_t v2 = sub_1D166762C((uint64_t)v2);
      vDSP_Length v4 = v8;
      if (v8 < 0) {
        goto LABEL_16;
      }
      goto LABEL_8;
    }
    float __StandardDeviation = 0.0;
    LODWORD(__Mean[0]) = 0;
    if ((v6 & 0x8000000000000000) != 0) {
      break;
    }
    ++v9;
    vDSP_normalize((const float *)(v8 + 4 * v10), v5, (float *)(v8 + 4 * v10), v5, (float *)__Mean, &__StandardDeviation, v6);
    if (v4 == v9) {
      goto LABEL_13;
    }
  }
  sub_1D17BEA30();
  __break(1u);
LABEL_18:
  type metadata accessor for MatrixAxis(0);
  __Mean[0] = v6;
  swift_bridgeObjectRetain();
  sub_1D17BEBF0();
  __break(1u);
}

void Matrix<A>.normalizeAndReturnMeanAndStandardDeviation(along:)(float *a1, uint64_t *a2, uint64_t a3)
{
  vDSP_Length v6 = *(char **)v3;
  unint64_t v5 = *((void *)v3 + 1);
  unint64_t v7 = *((void *)v3 + 2);
  if (!a3)
  {
    vDSP_Stride v8 = 1;
    vDSP_Length v9 = *((void *)v3 + 2);
    uint64_t v10 = v9;
    uint64_t v11 = (float *)*((void *)v3 + 1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_18;
    }
    vDSP_Length v9 = v7;
    uint64_t v10 = v7;
    unint64_t v7 = v5;
    goto LABEL_7;
  }
  if (a3 != 1) {
    goto LABEL_22;
  }
  uint64_t v10 = 1;
  vDSP_Length v9 = *((void *)v3 + 1);
  uint64_t v11 = (float *)*((void *)v3 + 2);
  vDSP_Stride v8 = (vDSP_Stride)v11;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_18;
  }
  vDSP_Length v9 = v5;
  vDSP_Stride v8 = v7;
  while (1)
  {
LABEL_7:
    uint64_t v12 = sub_1D1665A14(v7, 0);
    uint64_t v13 = sub_1D1665A14(v7, 0);
    uint64_t v19 = (char *)v12;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v19 = sub_1D166762C(v12);
    }
    uint64_t v16 = a1;
    uint64_t v17 = v3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      break;
    }
    if ((v7 & 0x8000000000000000) != 0) {
      goto LABEL_20;
    }
LABEL_11:
    vDSP_Length v3 = v6;
    if (!v7)
    {
LABEL_16:
      *uint64_t v17 = v3;
      *uint64_t v16 = v19;
      *a2 = v13;
      return;
    }
    uint64_t v14 = 0;
    v6 += 32;
    a1 = (float *)(v19 + 32);
    uint64_t v11 = (float *)(v13 + 32);
    while (1)
    {
      uint64_t v15 = v14 * v10;
      if ((unsigned __int128)(v14 * (__int128)v10) >> 64 != (v14 * v10) >> 63) {
        break;
      }
      if ((v9 & 0x8000000000000000) != 0) {
        goto LABEL_21;
      }
      ++v14;
      vDSP_normalize((const float *)&v6[4 * v15], v8, (float *)&v6[4 * v15], v8, a1++, v11++, v9);
      if (v7 == v14) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    vDSP_Length v6 = sub_1D166762C((uint64_t)v6);
    unint64_t v7 = (unint64_t)v11;
  }
  uint64_t v13 = (uint64_t)sub_1D166762C(v13);
  if ((v7 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  sub_1D17BEA30();
  __break(1u);
LABEL_22:
  type metadata accessor for MatrixAxis(0);
  swift_bridgeObjectRetain();
  sub_1D17BEBF0();
  __break(1u);
}

void Matrix<A>.divide(by:along:)(uint64_t *a1, vDSP_Stride a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  unint64_t v7 = *(char **)v2;
  vDSP_Length v8 = *(void *)(v2 + 8);
  vDSP_Length v9 = *(void *)(v2 + 16);
  type metadata accessor for MatrixAxis(0);
  vDSP_Length v11 = v10;
  vDSP_Length v12 = v8;
  if (a2)
  {
    vDSP_Length v12 = v9;
    if (a2 != 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D17BEBF0();
      __break(1u);
      return;
    }
  }
  if (v12 != *(void *)(v6 + 16)) {
    goto LABEL_22;
  }
  if (!a2)
  {
    a2 = 1;
    vDSP_Length v11 = v9;
    uint64_t v3 = v9;
    unint64_t v4 = v8;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_23;
    }
    vDSP_Length v11 = v9;
    uint64_t v3 = v9;
    vDSP_Length v9 = v8;
    if ((v8 & 0x8000000000000000) == 0) {
      goto LABEL_10;
    }
LABEL_24:
    __break(1u);
  }
  uint64_t v3 = 1;
  vDSP_Length v11 = v8;
  unint64_t v4 = v9;
  a2 = v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_23;
  }
  vDSP_Length v11 = v8;
  a2 = v9;
  if ((v9 & 0x8000000000000000) != 0) {
    goto LABEL_24;
  }
LABEL_10:
  if (!v9) {
    goto LABEL_19;
  }
  unint64_t v13 = 0;
  unint64_t v4 = (unint64_t)(v7 + 32);
  while (1)
  {
    if ((unsigned __int128)((uint64_t)v13 * (__int128)v3) >> 64 != (uint64_t)(v13 * v3) >> 63)
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      unint64_t v7 = sub_1D166762C((uint64_t)v7);
      vDSP_Length v9 = v4;
      if ((v4 & 0x8000000000000000) != 0) {
        goto LABEL_24;
      }
      goto LABEL_10;
    }
    if (v13 >= *(void *)(v6 + 16)) {
      goto LABEL_21;
    }
    __B[0] = *(float *)(v6 + 32 + 4 * v13);
    if (__B[0] != 0.0) {
      break;
    }
LABEL_13:
    if (v9 == ++v13) {
      goto LABEL_19;
    }
  }
  if ((v11 & 0x8000000000000000) == 0)
  {
    vDSP_vsdiv((const float *)(v4 + 4 * v13 * v3), a2, __B, (float *)(v4 + 4 * v13 * v3), a2, v11);
    goto LABEL_13;
  }
  sub_1D17BEA30();
  __break(1u);
LABEL_19:
  *(void *)uint64_t v2 = v7;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  void *v7;
  vDSP_Length v8;
  vDSP_Length v9;
  vDSP_Length v10;
  vDSP_Length v11;
  vDSP_Length v12;
  unint64_t v13;
  double __B[2];

  __B[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  unint64_t v7 = *(void **)v2;
  vDSP_Length v8 = *(void *)(v2 + 8);
  vDSP_Length v9 = *(void *)(v2 + 16);
  type metadata accessor for MatrixAxis(0);
  vDSP_Length v11 = v10;
  vDSP_Length v12 = v8;
  if (a2)
  {
    vDSP_Length v12 = v9;
    if (a2 != 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1D17BEBF0();
      __break(1u);
      return;
    }
  }
  if (v12 != *(void *)(v6 + 16)) {
    goto LABEL_22;
  }
  if (!a2)
  {
    a2 = 1;
    vDSP_Length v11 = v9;
    uint64_t v3 = v9;
    unint64_t v4 = v8;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_23;
    }
    vDSP_Length v11 = v9;
    uint64_t v3 = v9;
    vDSP_Length v9 = v8;
    if ((v8 & 0x8000000000000000) == 0) {
      goto LABEL_10;
    }
LABEL_24:
    __break(1u);
  }
  uint64_t v3 = 1;
  vDSP_Length v11 = v8;
  unint64_t v4 = v9;
  a2 = v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_23;
  }
  vDSP_Length v11 = v8;
  a2 = v9;
  if ((v9 & 0x8000000000000000) != 0) {
    goto LABEL_24;
  }
LABEL_10:
  if (!v9) {
    goto LABEL_19;
  }
  unint64_t v13 = 0;
  unint64_t v4 = (unint64_t)(v7 + 4);
  while (1)
  {
    if ((unsigned __int128)((uint64_t)v13 * (__int128)v3) >> 64 != (uint64_t)(v13 * v3) >> 63)
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      unint64_t v7 = sub_1D1667604(v7);
      vDSP_Length v9 = v4;
      if ((v4 & 0x8000000000000000) != 0) {
        goto LABEL_24;
      }
      goto LABEL_10;
    }
    if (v13 >= *(void *)(v6 + 16)) {
      goto LABEL_21;
    }
    __B[0] = *(double *)(v6 + 32 + 8 * v13);
    if (__B[0] != 0.0) {
      break;
    }
LABEL_13:
    if (v9 == ++v13) {
      goto LABEL_19;
    }
  }
  if ((v11 & 0x8000000000000000) == 0)
  {
    vDSP_vsdivD((const double *)(v4 + 8 * v13 * v3), a2, __B, (double *)(v4 + 8 * v13 * v3), a2, v11);
    goto LABEL_13;
  }
  sub_1D17BEA30();
  __break(1u);
LABEL_19:
  *(void *)uint64_t v2 = v7;
}

uint64_t sub_1D1716B38@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v8 = v3[2];
  if (!a1)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        uint64_t v17 = a3;
        uint64_t v9 = 1;
        uint64_t v10 = v3[2];
        uint64_t v11 = v10;
        uint64_t v8 = v6;
        goto LABEL_9;
      }
      goto LABEL_14;
    }
LABEL_20:
    sub_1D17BEA30();
    __break(1u);
    goto LABEL_21;
  }
  if (a1 != 1)
  {
LABEL_21:
    type metadata accessor for MatrixAxis(0);
    uint64_t result = sub_1D17BEBF0();
    __break(1u);
    return result;
  }
  if (v8 < 0) {
    goto LABEL_20;
  }
  if (v8)
  {
    uint64_t v17 = a3;
    uint64_t v11 = 1;
    uint64_t v10 = v6;
    uint64_t v9 = v8;
LABEL_9:
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1D17BE1C0();
    uint64_t v13 = 0;
    *(void *)(v12 + 16) = v8;
    uint64_t v14 = v12 + 32;
    while (1)
    {
      uint64_t v15 = v13 * v11;
      if ((unsigned __int128)(v13 * (__int128)v11) >> 64 != (v13 * v11) >> 63) {
        break;
      }
      if (v10 < 0) {
        goto LABEL_19;
      }
      ++v13;
      a2(v7 + 32 + 8 * v15, v9, v14, v10);
      v14 += 8;
      if (v8 == v13)
      {
        a3 = v17;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_19:
    sub_1D17BEA30();
    __break(1u);
    goto LABEL_20;
  }
LABEL_14:
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  uint64_t v12 = MEMORY[0x1E4FBC860];
LABEL_15:
  *(void *)(v12 + 16) = v8;
  *a3 = v12;
  return swift_bridgeObjectRelease();
}

BOOL sub_1D171710C(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v4 = MEMORY[0x1D25F8BB0](*a1, v3);
  return v4 == MEMORY[0x1D25F8BB0](v2, v3);
}

uint64_t sub_1D1717160()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1D1717198@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D17136EC(a1, *(void *)(v2 + 40), a2);
}

unint64_t sub_1D17171A4()
{
  unint64_t result = qword_1EA652E08;
  if (!qword_1EA652E08)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA652E00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA652E08);
  }
  return result;
}

uint64_t type metadata accessor for Matrix.Shape()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_1D1717218()
{
  unint64_t result = qword_1EA652E10[0];
  if (!qword_1EA652E10[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA652088);
    sub_1D165B76C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA652E10);
  }
  return result;
}

uint64_t sub_1D1717294(uint64_t a1, Swift::Int row, Swift::Int column, uint64_t a4)
{
  Swift::Int v7 = Matrix.position(row:column:)(row, column);
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = sub_1D17BE260();
  sub_1D17BE190();
  uint64_t v10 = *v4;
  sub_1D169D3A4(v7, v10);
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  uint64_t v12 = v10 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0) {
    uint64_t v12 = v10;
  }
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v12+ ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80))+ *(void *)(*(void *)(v8 - 8) + 72) * v7, a1, v8);
  return nullsub_1(v9);
}

uint64_t sub_1D171739C(uint64_t a1, void *a2)
{
  return sub_1D1713E00(a1, a2, v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[2]);
}

uint64_t sub_1D17173D8(uint64_t a1, void *a2)
{
  return sub_1D17140C4(a1, a2, *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80), *(_OWORD *)(v2 + 88), *(void *)(v2 + 104), *(void *)(v2 + 112), *(void *)(v2 + 16));
}

uint64_t type metadata accessor for Matrix()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D1717438@<X0>(void *a1@<X8>)
{
  return sub_1D1714B64(a1);
}

void *sub_1D171746C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1D1714F24(a1, a2, *(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72), *(void *)(v3 + 80), *(uint64_t (**)(void *, uint64_t, uint64_t))(v3 + 88), *(void *)(v3 + 96), a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48));
}

uint64_t sub_1D17174A8(uint64_t a1)
{
  return sub_1D171579C(a1, *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(uint64_t (**)(void *))(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 16));
}

void *sub_1D17174D0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1D1715A04(a1, *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80), *(uint64_t (**)(void *, uint64_t, uint64_t))(v2 + 88), *(void *)(v2 + 96), *(void *)(v2 + 16), a2, *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_1D1717510()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D171752C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D1717574(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1D17175B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1D17175D0(uint64_t a1, uint64_t a2, Swift::Int *a3)
{
  Swift::Int v4 = *a3;
  Swift::Int v5 = a3[1];
  uint64_t v6 = type metadata accessor for Matrix();
  return sub_1D1717294(a1, v4, v5, v6);
}

uint64_t sub_1D1717624()
{
  return 8;
}

void *sub_1D1717630(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1D171763C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1D1717674(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t sub_1D17176CC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t type metadata accessor for Matrix.Slice()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D171772C(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t sub_1D1717770(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Matrix.MutableSlice()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1D17177C8(uint64_t a1, void *a2)
{
  return sub_1D1714C54(a1, a2, *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(uint64_t (**)(void *, uint64_t))(v2 + 72), *(void *)(v2 + 80), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1D1717804(uint64_t a1, uint64_t a2)
{
  return sub_1D17141A8(a1, a2, *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(_OWORD *)(v2 + 72), *(void *)(v2 + 88), *(void *)(v2 + 96), *(void *)(v2 + 16));
}

uint64_t sub_1D1717844(uint64_t a1, uint64_t a2)
{
  return sub_1D171426C(a1, a2, v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[11], v2[2]);
}

uint64_t sub_1D1717884(uint64_t a1, uint64_t a2)
{
  return sub_1D1713EDC(a1, a2, v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[2]);
}

uint64_t sub_1D17178B8(uint64_t a1, uint64_t a2)
{
  return sub_1D1713F90(a1, a2, v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[2]);
}

uint64_t Filter<A>.outRelation.getter(uint64_t a1, uint64_t a2)
{
  return sub_1D1717A10(a1, a2, (void (*)(void *, void, uint64_t))NeighborRelationOut.init(with:));
}

uint64_t Filter<A>.inRelation.getter(uint64_t a1, uint64_t a2)
{
  return sub_1D1717A10(a1, a2, (void (*)(void *, void, uint64_t))NeighborRelationIn.init(with:));
}

uint64_t sub_1D1717A10(uint64_t a1, uint64_t a2, void (*a3)(void *, void, uint64_t))
{
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  v8[0] = v4;
  v8[1] = v5;
  void v8[2] = v6;
  a3(v8, *(void *)(a1 + 16), a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of EdgeFilter.allOfLabels.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of EdgeFilter.anyOfLabels.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EdgeFilter.properties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of EdgeFilter.kgFilter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

void sub_1D17197A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
}

void sub_1D171B54C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D171B5D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D171B69C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D171B6FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D171B760(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D171B7FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D171D34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D171D8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D171D9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void degas::literalBitmapUnionStep(degas *this, sqlite3_context *a2, sqlite3_value **a3, sqlite3_value **a4)
{
  int v5 = (int)a2;
  uint64_t v6 = (degas::Bitmap **)sqlite3_aggregate_context(this, 8);
  if (!*v6) {
    operator new();
  }
  if (v5 == 1)
  {
    Swift::Int v7 = sqlite3_value_blob(*a3);
    uint64_t v8 = *v6;
    degas::Bitmap::unionWith<degas::LiteralBitmap>(v8, (uint64_t)v7);
  }
}

void degas::Bitmap::unionWith<degas::LiteralBitmap>(degas::Bitmap *this, uint64_t a2)
{
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  unint64_t v2 = *(unsigned int *)(a2 + 4);
  if (v2)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *((void *)this + 2);
      if (v9 >= (*((void *)this + 3) - v6) >> 4) {
        break;
      }
      degas::Bitmap::mergeBitset(this, &v9, *(degas::Bitset **)(v6 + 16 * v9), &v8, (const degas::Bitset *)(a2 + 144 * v5 + 8));
      unint64_t v5 = v8;
    }
    while (v8 < v2);
    unint64_t v7 = *(unsigned int *)(a2 + 4);
    if (v5 < v7)
    {
      do
        degas::Bitmap::appendBitset(this, (const degas::Bitset *)(a2 + 144 * v5++ + 8));
      while (v7 != v5);
    }
  }
}

void degas::literalBitmapUnionFinal(degas *this, sqlite3_context *a2)
{
  int v3 = (degas::LiteralBitmap **)sqlite3_aggregate_context(this, 8);
  unint64_t v5 = v3;
  uint64_t v6 = *v3;
  if (*v3)
  {
    degas::LiteralBitmap::makeLiteralBitmap(*v3, v4);
    unint64_t v8 = v7;
  }
  else
  {
    degas::LiteralBitmap::emptyBitmap((degas::LiteralBitmap *)v3);
    unint64_t v8 = &degas::LiteralBitmap::emptyBitmap(void)::bitmap;
  }
  sqlite3_result_blob(this, v8, (144 * *((_DWORD *)v8 + 1)) | 8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (v6) {
    MEMORY[0x1D25F9A90](v8, 0x1000C4000313F17);
  }
  unint64_t v9 = *v5;
  if (*v5)
  {
    uint64_t v10 = (void **)((char *)v9 + 16);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v10);
    MEMORY[0x1D25F9A90](v9, 0x1020C40C46AEF4ELL);
    *unint64_t v5 = 0;
  }
}

void std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)(v4 - 16));
        *((void *)v4 - 1) = 0;
        v4 -= 16;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t degas::createLiteralBitmapUnionFunction(degas *this, sqlite3 *a2)
{
  return sqlite3_create_function(this, "literalBitmapUnion", 1, 1, 0, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))degas::literalBitmapUnionStep, (void (__cdecl *)(sqlite3_context *))degas::literalBitmapUnionFinal);
}

void degas::literalBitmapIntersectionStep(degas *this, sqlite3_context *a2, sqlite3_value **a3, sqlite3_value **a4)
{
  int v5 = (int)a2;
  uint64_t v6 = (uint64_t *)sqlite3_aggregate_context(this, 8);
  if (!*v6) {
    operator new();
  }
  if (v5 != 1) {
    return;
  }
  unint64_t v7 = (degas::LiteralBitmap *)sqlite3_value_blob(*a3);
  uint64_t v8 = *v6;
  unint64_t v21 = 0;
  unint64_t v22 = 0;
  unint64_t v9 = *((unsigned int *)v7 + 1);
  if (!v9)
  {
    uint64_t v19 = (void *)(v8 + 24);
    uint64_t v20 = *(void *)(v8 + 24);
    uint64_t v10 = *(void *)(v8 + 16);
    *(void *)uint64_t v8 = 0;
    for (*(void *)(v8 + 8) = 0; v20 != v10; v20 -= 16)
    {
      degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)(v20 - 16));
      *(void *)(v20 - 8) = 0;
    }
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)(v8 + 16);
  if (v10 == *(void *)(v8 + 24))
  {
    uint64_t v19 = (void *)(v8 + 24);
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
LABEL_16:
    *uint64_t v19 = v10;
    return;
  }
  uint64_t v11 = v7;
  LODWORD(Offset) = 0;
  while (1)
  {
    unint64_t v13 = v22;
    uint64_t v15 = *(void *)(v8 + 16);
    uint64_t v14 = *(degas::BitsetPtr **)(v8 + 24);
    if (v22 >= ((uint64_t)v14 - v15) >> 4) {
      break;
    }
    uint64_t v16 = (degas::Bitset **)(v15 + 16 * v22);
    int v17 = degas::Bitmap::intersectBitset((degas::BitsetPtr **)v8, &v22, *v16, &v21, (degas::LiteralBitmap *)((char *)v11 + 144 * Offset + 8));
    unint64_t Offset = v21;
    if (v17)
    {
      unint64_t Offset = degas::LiteralBitmap::findOffset(v11, *((void *)*v16 + 1), v21, v9);
      unint64_t v21 = Offset;
    }
    if (Offset >= v9)
    {
      unint64_t v13 = v22;
      uint64_t v15 = *(void *)(v8 + 16);
      uint64_t v14 = *(degas::BitsetPtr **)(v8 + 24);
      unint64_t v18 = ((uint64_t)v14 - v15) >> 4;
      goto LABEL_18;
    }
  }
  unint64_t v18 = ((uint64_t)v14 - v15) >> 4;
LABEL_18:
  if (v13 < v18)
  {
    std::vector<degas::BitsetPtr>::erase(v8 + 16, (degas::BitsetPtr *)(v15 + 16 * v13), v14);
    *(void *)uint64_t v8 = 0xFFFFFFFFLL;
    *(unsigned char *)(v8 + 40) = 1;
  }
}

void std::vector<degas::BitsetPtr>::erase(uint64_t a1, degas::BitsetPtr *this, degas::BitsetPtr *a3)
{
  if (this != a3)
  {
    int v3 = this;
    int v5 = a3;
    uint64_t v6 = *(degas::BitsetPtr **)(a1 + 8);
    if (a3 != v6)
    {
      uint64_t v7 = 16 * ((a3 - this) >> 4);
      do
      {
        degas::BitsetPtr::releaseBitset(v3);
        long long v8 = *(_OWORD *)((char *)v3 + v7);
        *(_OWORD *)int v3 = v8;
        if ((void)v8) {
          ++*(_DWORD *)v8;
        }
        int v3 = (degas::BitsetPtr *)((char *)v3 + 16);
      }
      while ((degas::BitsetPtr *)((char *)v3 + v7) != v6);
      int v5 = *(degas::BitsetPtr **)(a1 + 8);
    }
    for (; v5 != v3; int v5 = (degas::BitsetPtr *)((char *)v5 - 16))
    {
      degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)((char *)v5 - 16));
      *((void *)v5 - 1) = 0;
    }
    *(void *)(a1 + 8) = v3;
  }
}

void degas::literalBitmapIntersectionFinal(degas *this, sqlite3_context *a2)
{
  int v3 = (degas::LiteralBitmap **)sqlite3_aggregate_context(this, 8);
  int v5 = v3;
  uint64_t v6 = *v3;
  if (*v3)
  {
    degas::LiteralBitmap::makeLiteralBitmap(*v3, v4);
    long long v8 = v7;
  }
  else
  {
    degas::LiteralBitmap::emptyBitmap((degas::LiteralBitmap *)v3);
    long long v8 = &degas::LiteralBitmap::emptyBitmap(void)::bitmap;
  }
  sqlite3_result_blob(this, v8, (144 * *((_DWORD *)v8 + 1)) | 8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (v6) {
    MEMORY[0x1D25F9A90](v8, 0x1000C4000313F17);
  }
  unint64_t v9 = *v5;
  if (*v5)
  {
    uint64_t v10 = (void **)((char *)v9 + 16);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v10);
    MEMORY[0x1D25F9A90](v9, 0x1020C40C46AEF4ELL);
    *int v5 = 0;
  }
}

uint64_t degas::createLiteralBitmapIntersectionFunction(degas *this, sqlite3 *a2)
{
  return sqlite3_create_function(this, "literalBitmapIntersection", 1, 1, 0, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))degas::literalBitmapIntersectionStep, (void (__cdecl *)(sqlite3_context *))degas::literalBitmapIntersectionFinal);
}

degas::Bitmap **degas::mergeLiteralBitmapStep(degas *this, sqlite3_context *a2, sqlite3_value **a3, sqlite3_value **a4)
{
  int v5 = (int)a2;
  uint64_t result = (degas::Bitmap **)sqlite3_aggregate_context(this, 8);
  uint64_t v7 = result;
  if (!*result) {
    operator new();
  }
  if (v5 == 1)
  {
    sqlite3_int64 v8 = sqlite3_value_int64(*a3);
    unint64_t v9 = *v7;
    return (degas::Bitmap **)degas::Bitmap::setBit(v9, v8);
  }
  return result;
}

void degas::mergeLiteralBitmapFinal(degas *this, sqlite3_context *a2)
{
  int v3 = (degas::LiteralBitmap **)sqlite3_aggregate_context(this, 8);
  int v5 = v3;
  uint64_t v6 = *v3;
  if (*v3)
  {
    degas::LiteralBitmap::makeLiteralBitmap(*v3, v4);
    sqlite3_int64 v8 = v7;
  }
  else
  {
    degas::LiteralBitmap::emptyBitmap((degas::LiteralBitmap *)v3);
    sqlite3_int64 v8 = &degas::LiteralBitmap::emptyBitmap(void)::bitmap;
  }
  sqlite3_result_blob(this, v8, (144 * *((_DWORD *)v8 + 1)) | 8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (v6) {
    MEMORY[0x1D25F9A90](v8, 0x1000C4000313F17);
  }
  unint64_t v9 = *v5;
  if (*v5)
  {
    uint64_t v10 = (void **)((char *)v9 + 16);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v10);
    MEMORY[0x1D25F9A90](v9, 0x1020C40C46AEF4ELL);
    *int v5 = 0;
  }
}

void degas::bitmapOverlaps(degas *this, sqlite3_context *a2, sqlite3_value **a3, sqlite3_value **a4)
{
  if ((int)a2 < 2) {
    return;
  }
  uint64_t v6 = (const degas::LiteralBitmap *)sqlite3_value_blob(*a3);
  degas::Bitmap::Bitmap((degas::Bitmap *)v20, v6);
  uint64_t v7 = sqlite3_value_blob(a3[1]);
  unint64_t v8 = *((unsigned int *)v7 + 1);
  if (!v8 || (unint64_t v9 = v21, v21 == v22))
  {
    int v19 = 0;
    goto LABEL_19;
  }
  unint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = *v9;
    unint64_t v12 = *(void *)(*v9 + 8);
    unint64_t v13 = v7[18 * v10 + 2];
    if (v12 < v13)
    {
      v9 += 2;
      goto LABEL_15;
    }
    if (v12 <= v13) {
      break;
    }
LABEL_14:
    ++v10;
LABEL_15:
    int v19 = 0;
    if (v9 == v22 || v10 >= v8) {
      goto LABEL_19;
    }
  }
  if ((v7[18 * v10 + 3] & *(_DWORD *)(v11 + 16)) == 0)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v11 + 20;
    while (v14 != 31)
    {
      uint64_t v16 = v14 + 1;
      int v17 = *(_DWORD *)(v15 + 4 * v14);
      int v18 = *((_DWORD *)&v7[18 * v10 + 3] + ++v14);
      if ((v18 & v17) != 0)
      {
        if ((unint64_t)(v16 - 1) < 0x1F) {
          goto LABEL_21;
        }
        break;
      }
    }
    v9 += 2;
    goto LABEL_14;
  }
LABEL_21:
  int v19 = 1;
LABEL_19:
  sqlite3_result_int(this, v19);
  uint64_t v23 = (void **)&v21;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v23);
}

void sub_1D171E368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 - 24) = &a12;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 24));
  _Unwind_Resume(a1);
}

void degas::bitmapContains(degas *this, sqlite3_context *a2, sqlite3_value **a3, sqlite3_value **a4)
{
  if ((int)a2 >= 2)
  {
    uint64_t v6 = sqlite3_value_blob(*a3);
    uint64_t v7 = (const degas::LiteralBitmap *)sqlite3_value_blob(a3[1]);
    degas::Bitmap::Bitmap((degas::Bitmap *)v18, v7);
    uint64_t v8 = v19;
    if (v19 == v20)
    {
      BOOL v17 = 1;
    }
    else
    {
      unint64_t v9 = *((unsigned int *)v6 + 1);
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = (char *)(v6 + 3);
        while (1)
        {
          unint64_t v12 = *(void *)(*(void *)v8 + 8);
          unint64_t v13 = v6[18 * v10 + 2];
          if (v12 < v13) {
            break;
          }
          if (v12 <= v13)
          {
            BOOL v14 = 0;
            for (unint64_t i = 0; i != 32; ++i)
            {
              int v16 = *(_DWORD *)(*(void *)v8 + 16 + 4 * i);
              if (v16 && (v16 & ~*(_DWORD *)&v11[4 * i]) != 0) {
                break;
              }
              BOOL v14 = i > 0x1E;
            }
            if (!v14) {
              break;
            }
            v8 += 16;
          }
          if (v8 != v20)
          {
            ++v10;
            v11 += 144;
            if (v10 < v9) {
              continue;
            }
          }
          BOOL v17 = v8 == v20;
          goto LABEL_18;
        }
      }
      BOOL v17 = 0;
    }
LABEL_18:
    sqlite3_result_int(this, v17);
    unint64_t v21 = (void **)&v19;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v21);
  }
}

void sub_1D171E4B0(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

void degas::bitmapEquals(degas *this, sqlite3_context *a2, sqlite3_value **a3, sqlite3_value **a4)
{
  if ((int)a2 >= 2)
  {
    uint64_t v7 = sqlite3_value_blob(*a3);
    uint64_t v8 = sqlite3_value_blob(a3[1]);
    BOOL v9 = degas::LiteralBitmap::operator==((uint64_t)v7, (uint64_t)v8);
    sqlite3_result_int(this, v9);
  }
}

void degas::bitmapContainsIdentifier(degas *this, sqlite3_context *a2, sqlite3_value **a3, sqlite3_value **a4)
{
  if ((int)a2 >= 2)
  {
    uint64_t v7 = (degas::LiteralBitmap *)sqlite3_value_blob(*a3);
    sqlite3_int64 v8 = sqlite3_value_int64(a3[1]);
    int isSet = degas::LiteralBitmap::isSet(v7, v8);
    sqlite3_result_int(this, isSet);
  }
}

uint64_t degas::createMergeLiteralBitmapFunction(degas *this, sqlite3 *a2)
{
  return sqlite3_create_function(this, "mergeLiteralBitmap", 1, 1, 0, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))degas::mergeLiteralBitmapStep, (void (__cdecl *)(sqlite3_context *))degas::mergeLiteralBitmapFinal);
}

uint64_t degas::createBitmapFunctions(degas *this, sqlite3 *a2)
{
  uint64_t result = sqlite3_create_function(this, "bitmapOverlapsBitmap", 2, 2049, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))degas::bitmapOverlaps, 0, 0);
  if (!result)
  {
    uint64_t result = sqlite3_create_function(this, "bitmapContainsBitmap", 2, 2049, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))degas::bitmapContains, 0, 0);
    if (!result)
    {
      uint64_t result = sqlite3_create_function(this, "bitmapEqualsBitmap", 2, 2049, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))degas::bitmapEquals, 0, 0);
      if (!result)
      {
        return sqlite3_create_function(this, "bitmapContainsIdentifier", 2, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))degas::bitmapContainsIdentifier, 0, 0);
      }
    }
  }
  return result;
}

void sub_1D171ED44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_1D171FEC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D1720C7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void MALabelsAndDomainsFromKGLabels(void *a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v15 = a2;
  if (a2) {
    a2 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  }
  int v16 = a3;
  if (a3) {
    id v6 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  }
  else {
    id v6 = 0;
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        uint64_t v13 = +[MAKGDomainConversion maDomainForKGLabel:](MAKGDomainConversion, "maDomainForKGLabel:", v12, v15);
        if (v13 == 0xFFFF)
        {
          [a2 addObject:v12];
        }
        else
        {
          BOOL v14 = [NSNumber numberWithUnsignedShort:v13];
          [v6 addObject:v14];
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v9);
  }

  if (a2) {
    *uint64_t v15 = a2;
  }
  if (v6) {
    *int v16 = v6;
  }
}

void sub_1D1722778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MALabelAndDomainFromKGLabels(void *a1, void *a2, _WORD *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v5 = a1;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v19 objects:v25 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = 0;
    uint64_t v9 = *(void *)v20;
    int v10 = 1;
    long long v18 = a3;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(v5);
        }
        uint64_t v12 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        int v13 = +[MAKGDomainConversion maDomainForKGLabel:v12];
        if (v13 == 0xFFFF)
        {
          if (v8)
          {
            uint64_t v15 = KGLoggingConnection();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              id v24 = v5;
              _os_log_error_impl(&dword_1D1654000, v15, OS_LOG_TYPE_ERROR, "failed KG->MA label conversion, more than one label:%@", buf, 0xCu);
            }

            __assert_rtn("MALabelAndDomainFromKGLabels", "MAGraph.m", 1438, "maLabel == nil");
          }
          id v8 = v12;
        }
        else
        {
          BOOL v14 = v10 == 1;
          int v10 = v13;
          if (!v14)
          {
            int v16 = KGLoggingConnection();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              id v24 = v5;
              _os_log_error_impl(&dword_1D1654000, v16, OS_LOG_TYPE_ERROR, "failed KG->MA label conversion, more than one domain:%@", buf, 0xCu);
            }

            __assert_rtn("MALabelAndDomainFromKGLabels", "MAGraph.m", 1430, "maDomain == kMAElementDefaultDomain");
          }
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v19 objects:v25 count:16];
      a3 = v18;
    }
    while (v7);
  }
  else
  {
    id v8 = 0;
    LOWORD(v10) = 1;
  }

  if (a2) {
    *a2 = v8;
  }
  if (a3) {
    *a3 = v10;
  }
}

void testEncodeDecodeBitmap(degas::Bitset ***a1)
{
  size_t v2 = degas::Bitmap::lengthOfEncodedData(a1);
  degas::Bitmap::begin(a1, &v24);
  int v3 = 0;
  uint64_t v4 = 0;
  id v5 = 0;
  while (1)
  {
    uint64_t v6 = *((void *)&v24 + 1);
    if ((degas::Bitset ***)v24 == a1 && *((void *)&v24 + 1) == -1) {
      break;
    }
LABEL_9:
    if (v4 >= v3)
    {
      uint64_t v9 = v4 - v5;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        std::vector<unsigned long long>::__throw_length_error[abi:ne180100]();
      }
      if (((char *)v3 - (char *)v5) >> 2 > v10) {
        unint64_t v10 = ((char *)v3 - (char *)v5) >> 2;
      }
      if ((unint64_t)((char *)v3 - (char *)v5) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11)
      {
        if (v11 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v12 = (char *)operator new(8 * v11);
      }
      else
      {
        uint64_t v12 = 0;
      }
      int v13 = (uint64_t *)&v12[8 * v9];
      *int v13 = v6;
      id v8 = v13 + 1;
      while (v4 != v5)
      {
        uint64_t v14 = *--v4;
        *--int v13 = v14;
      }
      int v3 = (uint64_t *)&v12[8 * v11];
      if (v5) {
        operator delete(v5);
      }
      id v5 = v13;
    }
    else
    {
      *uint64_t v4 = v6;
      id v8 = v4 + 1;
    }
    degas::Bitmap::iterator::operator++((unint64_t *)&v24);
    uint64_t v4 = v8;
  }
  if ((degas::Bitset **)v25[0] != a1[3])
  {
    uint64_t v6 = -1;
    goto LABEL_9;
  }
  uint64_t v15 = (unsigned __int8 *)malloc_type_malloc(v2, 0xC2F298F0uLL);
  uint64_t v26 = v15;
  uint64_t v27 = v15;
  degas::Bitmap::appendToEncodedBuffer(a1, &v27);
  long long v24 = 0u;
  memset(v25, 0, 25);
  degas::Bitmap::replaceFromEncodedBuffer((degas::Bitmap *)&v24, (const unsigned __int8 **)&v26);
  if (!degas::Bitmap::operator==((uint64_t)a1, (uint64_t)&v24)) {
    goto LABEL_52;
  }
  uint64_t v16 = v24;
  if ((void)v24 == 0xFFFFFFFFLL)
  {
    long long v18 = (uint64_t *)v25[1];
    long long v17 = (uint64_t *)v25[0];
    if (v25[0] == v25[1])
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v19 = *v17;
        unsigned int v20 = *(_DWORD *)(*v17 + 4);
        if (v20 == -1)
        {
          uint64_t v21 = 0;
          int32x4_t v22 = 0uLL;
          do
          {
            do
            {
              int32x4_t v22 = (int32x4_t)vpadalq_u16((uint32x4_t)v22, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v19 + 4 * v21 + 16))));
              v21 += 4;
            }
            while (v21 != 32);
            uint64_t v21 = 0;
            unsigned int v20 = vaddvq_s32(v22);
            int32x4_t v22 = 0uLL;
          }
          while (v20 == -1);
          *(_DWORD *)(v19 + 4) = v20;
        }
        v16 += v20;
        v17 += 2;
      }
      while (v17 != v18);
    }
    *(void *)&long long v24 = v16;
  }
  if (v16 != v4 - v5) {
LABEL_52:
  }
    abort();
  if (v5 != v4)
  {
    uint64_t v23 = (unint64_t *)v5;
    do
    {
      if ((degas::Bitmap::isSet((degas::Bitmap *)&v24, *v23) & 1) == 0) {
        abort();
      }
      ++v23;
    }
    while (v23 != (unint64_t *)v4);
  }
  free(v15);
  uint64_t v28 = (void **)v25;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v28);
  if (v5) {
    operator delete(v5);
  }
}

void sub_1D172416C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long long>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E68DA348, MEMORY[0x1E4FBA1C8]);
}

void sub_1D1724244(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void testSet(uint64_t a1@<X8>)
{
  int v2 = 0;
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  long long v24 = &v25;
  do
  {
    unint64_t v3 = arc4random() % 0x2710;
    degas::Bitmap::setBit((degas::Bitmap *)a1, v3);
    uint64_t v4 = v25;
    id v5 = &v25;
    uint64_t v6 = &v25;
    if (v25)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v6 = (uint64_t **)v4;
          unint64_t v7 = v4[4];
          if (v7 <= v3) {
            break;
          }
          uint64_t v4 = *v6;
          id v5 = v6;
          if (!*v6) {
            goto LABEL_9;
          }
        }
        if (v7 >= v3) {
          break;
        }
        uint64_t v4 = v6[1];
        if (!v4)
        {
          id v5 = v6 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      id v8 = (uint64_t *)operator new(0x28uLL);
      v8[4] = v3;
      *id v8 = 0;
      v8[1] = 0;
      void v8[2] = (uint64_t)v6;
      *id v5 = v8;
      if (*v24)
      {
        long long v24 = (uint64_t **)*v24;
        id v8 = *v5;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v25, v8);
      ++v26;
    }
    uint64_t v9 = degas::Bitmap::count((degas::Bitmap *)a1);
    if (v9 != v26) {
      abort();
    }
    ++v2;
  }
  while (v2 != 1000);
  unint64_t v10 = (uint64_t *)v24;
  if (v24 != &v25)
  {
    do
    {
      if ((degas::Bitmap::isSet((degas::Bitmap *)a1, v10[4]) & 1) == 0) {
        abort();
      }
      unint64_t v11 = (uint64_t *)v10[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (uint64_t **)v11;
          unint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (uint64_t **)v10[2];
          BOOL v14 = *v12 == v10;
          unint64_t v10 = (uint64_t *)v12;
        }
        while (!v14);
      }
      unint64_t v10 = (uint64_t *)v12;
    }
    while (v12 != &v25);
  }
  degas::Bitmap::begin((void *)a1, &v21);
  while (1)
  {
    unint64_t v13 = v22;
    BOOL v14 = v21 == a1 && v22 == -1;
    if (!v14) {
      goto LABEL_30;
    }
    if (v23 == *(void *)(a1 + 24)) {
      break;
    }
    unint64_t v13 = -1;
LABEL_30:
    uint64_t v15 = v25;
    if (!v25) {
      goto LABEL_41;
    }
    uint64_t v16 = &v25;
    do
    {
      long long v17 = v15;
      long long v18 = v16;
      unint64_t v19 = v15[4];
      unsigned int v20 = (uint64_t **)(v15 + 1);
      if (v19 >= v13)
      {
        unsigned int v20 = (uint64_t **)v17;
        uint64_t v16 = (uint64_t **)v17;
      }
      uint64_t v15 = *v20;
    }
    while (v15);
    if (v16 == &v25) {
      goto LABEL_41;
    }
    if (v19 < v13) {
      long long v17 = (uint64_t *)v18;
    }
    if (v13 < v17[4]) {
LABEL_41:
    }
      abort();
    degas::Bitmap::iterator::operator++(&v21);
  }
  std::__tree<unsigned long long>::destroy(v25);
}

void sub_1D17244B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void *a13)
{
  std::__tree<unsigned long long>::destroy(a13);
  a12 = (void **)(v13 + 16);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      int v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), id v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }
            void v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            uint64_t *v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            int v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *int v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        int v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *int v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *id v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void testUnset(const degas::Bitmap *a1)
{
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = &v41;
  degas::Bitmap::begin(a1, &v36);
  while (1)
  {
    unint64_t v2 = v37;
    BOOL v3 = (const degas::Bitmap *)v36 == a1 && (void)v37 == -1;
    if (v3) {
      break;
    }
LABEL_9:
    uint64_t v4 = v41;
    id v5 = &v41;
    int v6 = &v41;
    if (v41)
    {
      while (1)
      {
        while (1)
        {
          int v6 = (uint64_t **)v4;
          unint64_t v7 = v4[4];
          if (v2 >= v7) {
            break;
          }
          uint64_t v4 = *v6;
          id v5 = v6;
          if (!*v6) {
            goto LABEL_16;
          }
        }
        if (v7 >= v2) {
          break;
        }
        uint64_t v4 = v6[1];
        if (!v4)
        {
          id v5 = v6 + 1;
          goto LABEL_16;
        }
      }
    }
    else
    {
LABEL_16:
      int v8 = (uint64_t *)operator new(0x28uLL);
      v8[4] = v2;
      *int v8 = 0;
      v8[1] = 0;
      void v8[2] = (uint64_t)v6;
      *id v5 = v8;
      if (*v40)
      {
        uint64_t v40 = (uint64_t **)*v40;
        int v8 = *v5;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v41, v8);
      ++v42;
    }
    degas::Bitmap::iterator::operator++(&v36);
  }
  if (*((void *)&v37 + 1) != *((void *)a1 + 3))
  {
    unint64_t v2 = -1;
    goto LABEL_9;
  }
  uint64_t v9 = degas::Bitmap::count(a1);
  if (v9 != v42) {
    abort();
  }
  unint64_t v36 = *(void *)a1;
  long long v37 = 0u;
  long long v38 = 0u;
  std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v37 + 8, *((long long **)a1 + 2), *((long long **)a1 + 3), (uint64_t)(*((void *)a1 + 3) - *((void *)a1 + 2)) >> 4);
  char v39 = *((unsigned char *)a1 + 40);
  degas::Bitmap::begin(a1, &v33);
  while (1)
  {
    BOOL v10 = v33 == (void **)a1 && v34 == -1;
    if (v10 && v35 == *((void *)a1 + 3)) {
      break;
    }
    if (1431655765 - 1431655765 * arc4random() <= 0x55555554)
    {
      degas::Bitmap::clearBit((degas::BitsetPtr **)&v36, v34);
      if (v41)
      {
        uint64_t v12 = (uint64_t *)&v41;
        uint64_t v13 = v41;
        do
        {
          BOOL v14 = v13;
          uint64_t v15 = v12;
          unint64_t v16 = v13[4];
          long long v17 = v13 + 1;
          if (v16 >= v34) {
            uint64_t v12 = v13;
          }
          else {
            ++v13;
          }
          uint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
        if (v12 != (uint64_t *)&v41)
        {
          if (v16 < v34) {
            BOOL v14 = v15;
          }
          if (v34 >= v14[4])
          {
            long long v18 = v15 + 1;
            if (v16 >= v34) {
              unint64_t v19 = v17;
            }
            else {
              unint64_t v19 = v18;
            }
            unsigned int v20 = (uint64_t *)*v19;
            unint64_t v21 = v12;
            if (*v19)
            {
              do
              {
                unint64_t v22 = (uint64_t **)v20;
                unsigned int v20 = (uint64_t *)*v20;
              }
              while (v20);
            }
            else
            {
              do
              {
                unint64_t v22 = (uint64_t **)v21[2];
                BOOL v3 = *v22 == v21;
                unint64_t v21 = (uint64_t *)v22;
              }
              while (!v3);
            }
            if (v40 == (uint64_t **)v12) {
              uint64_t v40 = v22;
            }
            --v42;
            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v41, v12);
            operator delete(v12);
          }
        }
      }
    }
    degas::Bitmap::iterator::operator++((unint64_t *)&v33);
  }
  unint64_t v23 = v36;
  if (v36 == 0xFFFFFFFF)
  {
    long long v24 = (uint64_t *)*((void *)&v37 + 1);
    uint64_t v25 = (uint64_t *)v38;
    if (*((void *)&v37 + 1) == (void)v38)
    {
      unint64_t v23 = 0;
    }
    else
    {
      unint64_t v23 = 0;
      do
      {
        uint64_t v26 = *v24;
        unsigned int v27 = *(_DWORD *)(*v24 + 4);
        if (v27 == -1)
        {
          uint64_t v28 = 0;
          int32x4_t v29 = 0uLL;
          do
          {
            do
            {
              int32x4_t v29 = (int32x4_t)vpadalq_u16((uint32x4_t)v29, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v26 + 4 * v28 + 16))));
              v28 += 4;
            }
            while (v28 != 32);
            uint64_t v28 = 0;
            unsigned int v27 = vaddvq_s32(v29);
            int32x4_t v29 = 0uLL;
          }
          while (v27 == -1);
          *(_DWORD *)(v26 + 4) = v27;
        }
        v23 += v27;
        v24 += 2;
      }
      while (v24 != v25);
    }
    unint64_t v36 = v23;
  }
  if (v23 != v42) {
    abort();
  }
  uint64_t v30 = (uint64_t *)v40;
  if (v40 != &v41)
  {
    do
    {
      if ((degas::Bitmap::isSet((degas::Bitmap *)&v36, v30[4]) & 1) == 0) {
        abort();
      }
      uint64_t v31 = (uint64_t *)v30[1];
      if (v31)
      {
        do
        {
          uint64_t v32 = (uint64_t **)v31;
          uint64_t v31 = (uint64_t *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          uint64_t v32 = (uint64_t **)v30[2];
          BOOL v3 = *v32 == v30;
          uint64_t v30 = (uint64_t *)v32;
        }
        while (!v3);
      }
      uint64_t v30 = (uint64_t *)v32;
    }
    while (v32 != &v41);
  }
  uint64_t v33 = (void **)&v37 + 1;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v33);
  std::__tree<unsigned long long>::destroy(v41);
}

void sub_1D1724A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  BOOL v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      BOOL v3 = a2;
      goto LABEL_7;
    }
    do
    {
      BOOL v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  int v6 = (uint64_t **)v3[2];
  unint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *int v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      unint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *BOOL v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      uint64_t v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        uint64_t result = v7;
      }
      unint64_t v7 = *(uint64_t **)v12;
    }
    unint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    unsigned int v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        unsigned int v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        uint64_t *v20 = (uint64_t)v7;
        uint64_t v7[2] = (uint64_t)v20;
        unint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      long long v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      _OWORD v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    unint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    void v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    *uint64_t v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    unint64_t v7 = *(uint64_t **)(*v7 + 8);
  }
  uint64_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    unint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      long long v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  unint64_t v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *unint64_t v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    _OWORD v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    uint64_t v7[2] = (uint64_t)v15;
    unint64_t v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  long long v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  _OWORD v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  *long long v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void bitmapTestCombo(void)
{
  int v0 = 100;
  do
  {
    testSet((uint64_t)v1);
    testEncodeDecodeBitmap(v1);
    testUnset((const degas::Bitmap *)v1);
    BOOL v3 = (void **)&v2;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v3);
    --v0;
  }
  while (v0);
}

void sub_1D1724E28(_Unwind_Exception *a1)
{
  uint64_t v3 = v1;
  *(void *)(v2 - 24) = v3;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t degas::getLogFile(degas *this)
{
  {
    operator new();
  }
  return degas::getLogFile(void)::sLogFile;
}

void sub_1D17258CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1D25F9A90](v15, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

uint64_t degas::NeighborQuery::NeighborQuery(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = a3;
  BOOL v5 = *a2 && ((*(uint64_t (**)(void))(*(void *)*a2 + 48))(*a2) & 1) == 0;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

void sub_1D1725A64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void degas::NeighborQuery::enableInstrumentedTraversal(degas::NeighborQuery *this)
{
  degas::sInstrumentTraversal = 1;
}

uint64_t degas::NeighborQuery::choosePlan(degas::NeighborQuery *this, unint64_t a2, unint64_t a3, int a4)
{
  unint64_t v4 = a3 / a2;
  if (a2 >= 0x33 && v4 < 0xA || a3 <= 0xE && v4 < 3) {
    return 4;
  }
  if (a3 < 0x249F0) {
    int v6 = a4;
  }
  else {
    int v6 = 0;
  }
  if (a3 < 0x15E) {
    int v6 = 1;
  }
  if (v6) {
    return 7;
  }
  else {
    return 2;
  }
}

uint64_t degas::NeighborQuery::neighborsNodesFirst(uint64_t a1, uint64_t a2, void *a3, void *a4, Bitmap *a5, unsigned int a6, degas::Bitmap *a7)
{
  if (*a4)
  {
    if (a6 <= 1)
    {
      degas::LabelledEdgeCursor::LabelledEdgeCursor(v26);
      long long v31 = 0u;
      memset(v32, 0, 25);
      if (*a3 && (*(unsigned int (**)(void, long long *))(*(void *)*a3 + 40))(*a3, &v31)) {
        degas::LabelledEdgeCursor::setForEdgesFromLabelsSourceNodes((degas::LabelledEdgeCursor *)v26, a5, (const degas::Bitmap *)&v31, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
      }
      else {
        degas::LabelledEdgeCursor::setForEdgesFromSourceNodes((degas::LabelledEdgeCursor *)v26, a5, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
      }
      memset(&v30, 0, 41);
      while (1)
      {
        uint64_t v14 = degas::Statement::next((sqlite3_stmt **)v26[0]);
        uint64_t v15 = v14;
        if (v14 != 1) {
          break;
        }
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v26[0], 0, (degas::Bitmap *)&v30);
      }
      uint64_t v13 = v14;
      int v16 = v14 & 0xFFFFFFFD;
      if ((v14 & 0xFFFFFFFD) == 0)
      {
        if (*a4) {
          (*(void (**)(void, Bitmap *, Bitmap *))(*(void *)*a4 + 24))(*a4, &v30, &v30);
        }
        degas::LabelledEdgeCursor::LabelledEdgeCursor(v29);
        degas::LabelledEdgeCursor::setForTargetNodesFromEdges((degas::LabelledEdgeCursor *)v29, &v30, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
        while (1)
        {
          unsigned int v17 = degas::Statement::next((sqlite3_stmt **)v29[0]);
          if (v17 != 1) {
            break;
          }
          degas::Statement::bitmapColumnValue((sqlite3_stmt **)v29[0], 0, a7);
        }
        if (v17 == 2) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = v17;
        }
        degas::Cursor::~Cursor(v29);
      }
      v29[0] = (degas::Statement *)&v30._bitSets;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
      v30._bitCount = (unint64_t)v32;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
      degas::Cursor::~Cursor(v26);
      if (v16) {
        return v15;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    if ((a6 & 0xFFFFFFFD) == 0)
    {
      degas::LabelledEdgeCursor::LabelledEdgeCursor(v29);
      long long v31 = 0u;
      memset(v32, 0, 25);
      if (*a3 && (*(unsigned int (**)(void, long long *))(*(void *)*a3 + 40))(*a3, &v31)) {
        degas::LabelledEdgeCursor::setForEdgesFromLabelsTargetNodes((degas::LabelledEdgeCursor *)v29, a5, (const degas::Bitmap *)&v31, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
      }
      else {
        degas::LabelledEdgeCursor::setForEdgesFromTargetNodes((degas::LabelledEdgeCursor *)v29, a5, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
      }
      memset(&v30, 0, 41);
      while (1)
      {
        uint64_t v20 = degas::Statement::next((sqlite3_stmt **)v29[0]);
        uint64_t v15 = v20;
        if (v20 != 1) {
          break;
        }
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v29[0], 0, (degas::Bitmap *)&v30);
      }
      if ((v20 & 0xFFFFFFFD) != 0)
      {
        int v21 = 1;
        uint64_t v13 = v20;
      }
      else
      {
        if (*a4) {
          (*(void (**)(void, Bitmap *, Bitmap *))(*(void *)*a4 + 24))(*a4, &v30, &v30);
        }
        degas::LabelledEdgeCursor::LabelledEdgeCursor(v28);
        degas::LabelledEdgeCursor::setForSourceNodesFromEdges((degas::LabelledEdgeCursor *)v28, &v30, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
        *(_OWORD *)uint64_t v26 = 0u;
        memset(v27, 0, 25);
        while (1)
        {
          uint64_t v24 = degas::Statement::next((sqlite3_stmt **)v28[0]);
          uint64_t v15 = v24;
          if (v24 != 1) {
            break;
          }
          degas::Statement::bitmapColumnValue((sqlite3_stmt **)v28[0], 0, (degas::Bitmap *)v26);
        }
        uint64_t v13 = v24 == 2 ? 0 : v24;
        if (v13)
        {
          int v21 = 1;
        }
        else
        {
          if (a6 < 2) {
            degas::Bitmap::unionWith<degas::Bitmap>(a7, (uint64_t)v26);
          }
          else {
            degas::Bitmap::operator=(a7, v26);
          }
          uint64_t v15 = 0;
          int v21 = 0;
        }
        uint64_t v33 = (void **)v27;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v33);
        degas::Cursor::~Cursor(v28);
      }
      v26[0] = (degas::Statement *)&v30._bitSets;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
      v30._bitCount = (unint64_t)v32;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
      degas::Cursor::~Cursor(v29);
      if (v21) {
        return v15;
      }
    }
  }
  else
  {
    if (a6 > 1) {
      goto LABEL_76;
    }
    degas::LabelledEdgeCursor::LabelledEdgeCursor(&v30);
    long long v31 = 0u;
    memset(v32, 0, 25);
    if (*a3 && (*(unsigned int (**)(void, long long *))(*(void *)*a3 + 40))(*a3, &v31)) {
      degas::LabelledEdgeCursor::setForTargetNodesFromLabelsSourceNodes((degas::LabelledEdgeCursor *)&v30, a5, (const degas::Bitmap *)&v31, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
    }
    else {
      degas::LabelledEdgeCursor::setForTargetNodesFromSourceNodes((degas::LabelledEdgeCursor *)&v30, a5, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
    }
    while (1)
    {
      uint64_t v18 = degas::Statement::next((sqlite3_stmt **)v30._bitCount);
      uint64_t v13 = v18;
      if (v18 != 1) {
        break;
      }
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v30._bitCount, 0, a7);
    }
    int v19 = v18 & 0xFFFFFFFD;
    v26[0] = (degas::Statement *)v32;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
    degas::Cursor::~Cursor((degas::Statement **)&v30);
    if (!v19)
    {
LABEL_76:
      if ((a6 & 0xFFFFFFFD) != 0) {
        return 0;
      }
      degas::LabelledEdgeCursor::LabelledEdgeCursor(v26);
      long long v31 = 0u;
      memset(v32, 0, 25);
      if (*a3 && (*(unsigned int (**)(void, long long *))(*(void *)*a3 + 40))(*a3, &v31)) {
        degas::LabelledEdgeCursor::setForSourceNodesFromLabelsTargetNodes((degas::LabelledEdgeCursor *)v26, a5, (const degas::Bitmap *)&v31, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
      }
      else {
        degas::LabelledEdgeCursor::setForSourceNodesFromTargetNodes((degas::LabelledEdgeCursor *)v26, a5, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
      }
      memset(&v30, 0, 41);
      while (1)
      {
        uint64_t v22 = degas::Statement::next((sqlite3_stmt **)v26[0]);
        uint64_t v13 = v22;
        if (v22 != 1) {
          break;
        }
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v26[0], 0, (degas::Bitmap *)&v30);
      }
      int v23 = v22 & 0xFFFFFFFD;
      if ((v22 & 0xFFFFFFFD) == 0)
      {
        if (a6 < 2) {
          degas::Bitmap::unionWith<degas::Bitmap>(a7, (uint64_t)&v30);
        }
        else {
          degas::Bitmap::operator=(a7, &v30);
        }
        uint64_t v13 = 0;
      }
      v29[0] = (degas::Statement *)&v30._bitSets;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
      v30._bitCount = (unint64_t)v32;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
      degas::Cursor::~Cursor(v26);
      if (!v23) {
        return 0;
      }
    }
  }
  return v13;
}

void sub_1D1726118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, degas::Statement *a15, uint64_t a16, degas::Statement *a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  *(void *)(v27 - 104) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 104));
  degas::Cursor::~Cursor(&a15);
  a9 = (void **)&a21;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a19 = (void **)&a27;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a19);
  degas::Cursor::~Cursor(&a17);
  _Unwind_Resume(a1);
}

void degas::Bitmap::unionWith<degas::Bitmap>(degas::Bitmap *this, uint64_t a2)
{
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  unint64_t v2 = *(void *)(a2 + 24) - *(void *)(a2 + 16);
  unint64_t v3 = (v2 >> 4);
  if ((v2 & 0xFFFFFFFF0) != 0 && v3 != 0)
  {
    unint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = *((void *)this + 2);
      uint64_t v9 = *(void *)(a2 + 16);
      if (v13 >= (*((void *)this + 3) - v8) >> 4) {
        break;
      }
      degas::Bitmap::mergeBitset(this, &v13, *(degas::Bitset **)(v8 + 16 * v13), &v12, *(const degas::Bitset **)(v9 + 16 * v7));
      unint64_t v7 = v12;
      if (v12 >= v3)
      {
        uint64_t v9 = *(void *)(a2 + 16);
        break;
      }
    }
    unint64_t v10 = *(void *)(a2 + 24) - v9;
    if (v7 < (v10 >> 4))
    {
      uint64_t v11 = (v10 >> 4);
      do
        degas::Bitmap::appendBitset(this, *(const degas::Bitset **)(*(void *)(a2 + 16) + 16 * v7++));
      while (v11 != v7);
    }
  }
}

uint64_t degas::NeighborQuery::neighborsNodesEdgeFilter(uint64_t a1, degas::Bitmap *a2, uint64_t a3, void *a4, Bitmap *a5, unsigned int a6, degas::Bitmap *a7)
{
  if (*a4)
  {
    if (a6 <= 1)
    {
      degas::LabelledEdgeCursor::LabelledEdgeCursor(v34);
      uint64_t v16 = degas::Bitmap::count(a2);
      uint64_t v17 = *(void *)(a1 + 24);
      if (v16) {
        degas::LabelledEdgeCursor::setForEdgesFromSourceNodesEdgeFilter((degas::LabelledEdgeCursor *)v34, a5, a2, (const degas::LabelledEdgeTable *)(v17 + 1144));
      }
      else {
        degas::LabelledEdgeCursor::setForEdgesFromSourceNodes((degas::LabelledEdgeCursor *)v34, a5, (const degas::LabelledEdgeTable *)(v17 + 1144));
      }
      memset(&v38, 0, 41);
      while (1)
      {
        uint64_t v18 = degas::Statement::next((sqlite3_stmt **)v34[0]);
        uint64_t v19 = v18;
        if (v18 != 1) {
          break;
        }
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v34[0], 0, (degas::Bitmap *)&v38);
      }
      uint64_t v13 = v18;
      int v20 = v18 & 0xFFFFFFFD;
      if ((v18 & 0xFFFFFFFD) == 0)
      {
        if (*a4) {
          (*(void (**)(void, Bitmap *, Bitmap *))(*(void *)*a4 + 24))(*a4, &v38, &v38);
        }
        degas::LabelledEdgeCursor::LabelledEdgeCursor(v37);
        degas::LabelledEdgeCursor::setForTargetNodesFromEdges((degas::LabelledEdgeCursor *)v37, &v38, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
        while (1)
        {
          unsigned int v21 = degas::Statement::next((sqlite3_stmt **)v37[0]);
          if (v21 != 1) {
            break;
          }
          degas::Statement::bitmapColumnValue((sqlite3_stmt **)v37[0], 0, a7);
        }
        if (v21 == 2) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = v21;
        }
        degas::Cursor::~Cursor(v37);
      }
      v37[0] = (degas::Statement *)&v38._bitSets;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
      degas::Cursor::~Cursor(v34);
      if (v20) {
        return v19;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    if ((a6 & 0xFFFFFFFD) == 0)
    {
      degas::LabelledEdgeCursor::LabelledEdgeCursor(v37);
      uint64_t v22 = degas::Bitmap::count(a2);
      uint64_t v23 = *(void *)(a1 + 24);
      if (v22) {
        degas::LabelledEdgeCursor::setForEdgesFromTargetNodesEdgeFilter((degas::LabelledEdgeCursor *)v37, a5, a2, (const degas::LabelledEdgeTable *)(v23 + 1144));
      }
      else {
        degas::LabelledEdgeCursor::setForEdgesFromTargetNodes((degas::LabelledEdgeCursor *)v37, a5, (const degas::LabelledEdgeTable *)(v23 + 1144));
      }
      memset(&v38, 0, 41);
      while (1)
      {
        uint64_t v28 = degas::Statement::next((sqlite3_stmt **)v37[0]);
        uint64_t v19 = v28;
        if (v28 != 1) {
          break;
        }
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v37[0], 0, (degas::Bitmap *)&v38);
      }
      if ((v28 & 0xFFFFFFFD) != 0)
      {
        int v29 = 1;
        uint64_t v13 = v28;
      }
      else
      {
        if (*a4) {
          (*(void (**)(void, Bitmap *, Bitmap *))(*(void *)*a4 + 24))(*a4, &v38, &v38);
        }
        degas::LabelledEdgeCursor::LabelledEdgeCursor(v36);
        degas::LabelledEdgeCursor::setForSourceNodesFromEdges((degas::LabelledEdgeCursor *)v36, &v38, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
        *(_OWORD *)unint64_t v34 = 0u;
        memset(v35, 0, 25);
        while (1)
        {
          uint64_t v30 = degas::Statement::next((sqlite3_stmt **)v36[0]);
          uint64_t v19 = v30;
          if (v30 != 1) {
            break;
          }
          degas::Statement::bitmapColumnValue((sqlite3_stmt **)v36[0], 0, (degas::Bitmap *)v34);
        }
        uint64_t v13 = v30 == 2 ? 0 : v30;
        if (v13)
        {
          int v29 = 1;
        }
        else
        {
          if (a6 < 2) {
            degas::Bitmap::unionWith<degas::Bitmap>(a7, (uint64_t)v34);
          }
          else {
            degas::Bitmap::operator=(a7, v34);
          }
          uint64_t v19 = 0;
          int v29 = 0;
        }
        char v39 = (void **)v35;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v39);
        degas::Cursor::~Cursor(v36);
      }
      v34[0] = (degas::Statement *)&v38._bitSets;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
      degas::Cursor::~Cursor(v37);
      if (v29) {
        return v19;
      }
    }
  }
  else
  {
    if (a6 > 1) {
      goto LABEL_72;
    }
    degas::LabelledEdgeCursor::LabelledEdgeCursor(&v38);
    uint64_t v14 = degas::Bitmap::count(a2);
    uint64_t v15 = *(void *)(a1 + 24);
    if (v14) {
      degas::LabelledEdgeCursor::setForTargetNodesFromEdgesSourceNodesFilterEdge((degas::LabelledEdgeCursor *)&v38, a5, a2, (const degas::LabelledEdgeTable *)(v15 + 1144));
    }
    else {
      degas::LabelledEdgeCursor::setForTargetNodesFromSourceNodes((degas::LabelledEdgeCursor *)&v38, a5, (const degas::LabelledEdgeTable *)(v15 + 1144));
    }
    while (1)
    {
      uint64_t v24 = degas::Statement::next((sqlite3_stmt **)v38._bitCount);
      uint64_t v13 = v24;
      if (v24 != 1) {
        break;
      }
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v38._bitCount, 0, a7);
    }
    int v25 = v24 & 0xFFFFFFFD;
    degas::Cursor::~Cursor((degas::Statement **)&v38);
    if (!v25)
    {
LABEL_72:
      if ((a6 & 0xFFFFFFFD) != 0) {
        return 0;
      }
      degas::LabelledEdgeCursor::LabelledEdgeCursor(v34);
      uint64_t v26 = degas::Bitmap::count(a2);
      uint64_t v27 = *(void *)(a1 + 24);
      if (v26) {
        degas::LabelledEdgeCursor::setForSourceNodesFromEdgesTargetNodesFilterEdge((degas::LabelledEdgeCursor *)v34, a5, a2, (const degas::LabelledEdgeTable *)(v27 + 1144));
      }
      else {
        degas::LabelledEdgeCursor::setForSourceNodesFromTargetNodes((degas::LabelledEdgeCursor *)v34, a5, (const degas::LabelledEdgeTable *)(v27 + 1144));
      }
      memset(&v38, 0, 41);
      while (1)
      {
        uint64_t v31 = degas::Statement::next((sqlite3_stmt **)v34[0]);
        uint64_t v13 = v31;
        if (v31 != 1) {
          break;
        }
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v34[0], 0, (degas::Bitmap *)&v38);
      }
      int v32 = v31 & 0xFFFFFFFD;
      if ((v31 & 0xFFFFFFFD) == 0)
      {
        if (a6 < 2) {
          degas::Bitmap::unionWith<degas::Bitmap>(a7, (uint64_t)&v38);
        }
        else {
          degas::Bitmap::operator=(a7, &v38);
        }
        uint64_t v13 = 0;
      }
      v37[0] = (degas::Statement *)&v38._bitSets;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
      degas::Cursor::~Cursor(v34);
      if (!v32) {
        return 0;
      }
    }
  }
  return v13;
}

void sub_1D172677C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, degas::Statement *a15, uint64_t a16, degas::Statement *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  *(void *)(v21 - 88) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  degas::Cursor::~Cursor(&a15);
  a9 = (void **)&a21;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  degas::Cursor::~Cursor(&a17);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::neighborsEdgesFirstJoinBoth(uint64_t a1, degas::Bitmap *this, uint64_t **a3, Bitmap *a4, unsigned int a5, degas::Bitmap *a6)
{
  memset(&v20, 0, 41);
  if (*a3)
  {
    uint64_t v11 = degas::Bitmap::count(this);
    uint64_t v12 = **a3;
    if (v11) {
      (*(void (**)(void))(v12 + 24))();
    }
    else {
      (*(void (**)(void))(v12 + 16))();
    }
  }
  else
  {
    degas::Bitmap::operator=(&v20, this);
  }
  if (a5 > 1)
  {
    uint64_t v14 = 0;
  }
  else
  {
    long long v18 = 0u;
    memset(v19, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v17);
    degas::LabelledEdgeCursor::setForTargetNodesFromEdgesSourceNodesJoinBoth((degas::LabelledEdgeCursor *)v17, a4, &v20, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
    while (1)
    {
      uint64_t v13 = degas::Statement::next((sqlite3_stmt **)v17[0]);
      uint64_t v14 = v13;
      if (v13 != 1) {
        break;
      }
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v17[0], 0, (degas::Bitmap *)&v18);
    }
    if (v13 == 2)
    {
      degas::Bitmap::operator=(a6, &v18);
      uint64_t v14 = 0;
    }
    degas::Cursor::~Cursor(v17);
    v17[0] = (degas::Statement *)v19;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  }
  if ((a5 & 0xFFFFFFFD) == 0)
  {
    long long v18 = 0u;
    memset(v19, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v17);
    degas::LabelledEdgeCursor::setForSourceNodesFromEdgesTargetNodesJoinEdge((degas::LabelledEdgeCursor *)v17, a4, &v20, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
    while (1)
    {
      uint64_t v15 = degas::Statement::next((sqlite3_stmt **)v17[0]);
      uint64_t v14 = v15;
      if (v15 != 1) {
        break;
      }
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v17[0], 0, (degas::Bitmap *)&v18);
    }
    if (v15 == 2)
    {
      degas::Bitmap::unionWith<degas::Bitmap>(a6, (uint64_t)&v18);
      uint64_t v14 = 0;
    }
    degas::Cursor::~Cursor(v17);
    v17[0] = (degas::Statement *)v19;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  }
  *(void *)&long long v18 = &v20._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  return v14;
}

void sub_1D1726A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19)
{
  a9 = &a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a11 = &a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::neighborsEdgesFirstJoinEdge(uint64_t a1, degas::Bitmap *this, uint64_t **a3, Bitmap *a4, unsigned int a5, degas::Bitmap *a6)
{
  memset(&v20, 0, 41);
  if (*a3)
  {
    uint64_t v11 = degas::Bitmap::count(this);
    uint64_t v12 = **a3;
    if (v11) {
      (*(void (**)(void))(v12 + 24))();
    }
    else {
      (*(void (**)(void))(v12 + 16))();
    }
  }
  else
  {
    degas::Bitmap::operator=(&v20, this);
  }
  if (a5 > 1)
  {
    uint64_t v14 = 0;
  }
  else
  {
    long long v18 = 0u;
    memset(v19, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v17);
    degas::LabelledEdgeCursor::setForTargetNodesFromEdgesSourceNodesJoinEdge((degas::LabelledEdgeCursor *)v17, a4, &v20, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
    while (1)
    {
      uint64_t v13 = degas::Statement::next((sqlite3_stmt **)v17[0]);
      uint64_t v14 = v13;
      if (v13 != 1) {
        break;
      }
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v17[0], 0, (degas::Bitmap *)&v18);
    }
    if (v13 == 2)
    {
      degas::Bitmap::operator=(a6, &v18);
      uint64_t v14 = 0;
    }
    degas::Cursor::~Cursor(v17);
    v17[0] = (degas::Statement *)v19;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  }
  if ((a5 & 0xFFFFFFFD) == 0)
  {
    long long v18 = 0u;
    memset(v19, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v17);
    degas::LabelledEdgeCursor::setForSourceNodesFromEdgesTargetNodesJoinEdge((degas::LabelledEdgeCursor *)v17, a4, &v20, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
    while (1)
    {
      uint64_t v15 = degas::Statement::next((sqlite3_stmt **)v17[0]);
      uint64_t v14 = v15;
      if (v15 != 1) {
        break;
      }
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v17[0], 0, (degas::Bitmap *)&v18);
    }
    if (v15 == 2)
    {
      degas::Bitmap::unionWith<degas::Bitmap>(a6, (uint64_t)&v18);
      uint64_t v14 = 0;
    }
    degas::Cursor::~Cursor(v17);
    v17[0] = (degas::Statement *)v19;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  }
  *(void *)&long long v18 = &v20._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  return v14;
}

void sub_1D1726CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19)
{
  a9 = &a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a11 = &a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::neighborsEdgesFirstFilterEdge(uint64_t a1, degas::Bitmap *this, uint64_t **a3, Bitmap *a4, unsigned int a5, degas::Bitmap *a6)
{
  long long v20 = 0u;
  memset(v21, 0, 25);
  if (*a3)
  {
    uint64_t v11 = degas::Bitmap::count(this);
    uint64_t v12 = **a3;
    if (v11) {
      (*(void (**)(void))(v12 + 24))();
    }
    else {
      (*(void (**)(void))(v12 + 16))();
    }
  }
  else
  {
    degas::Bitmap::operator=(&v20, this);
  }
  if (a5 > 1)
  {
    uint64_t v14 = 0;
  }
  else
  {
    long long v18 = 0u;
    memset(v19, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v17);
    degas::LabelledEdgeCursor::setForTargetNodesFromEdgesSourceNodesFilterEdge((degas::LabelledEdgeCursor *)v17, a4, (const degas::Bitmap *)&v20, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
    while (1)
    {
      uint64_t v13 = degas::Statement::next((sqlite3_stmt **)v17[0]);
      uint64_t v14 = v13;
      if (v13 != 1) {
        break;
      }
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v17[0], 0, (degas::Bitmap *)&v18);
    }
    if (v13 == 2)
    {
      degas::Bitmap::operator=(a6, &v18);
      uint64_t v14 = 0;
    }
    degas::Cursor::~Cursor(v17);
    v17[0] = (degas::Statement *)v19;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  }
  if ((a5 & 0xFFFFFFFD) == 0)
  {
    long long v18 = 0u;
    memset(v19, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v17);
    degas::LabelledEdgeCursor::setForSourceNodesFromEdgesTargetNodesFilterEdge((degas::LabelledEdgeCursor *)v17, a4, (const degas::Bitmap *)&v20, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
    while (1)
    {
      uint64_t v15 = degas::Statement::next((sqlite3_stmt **)v17[0]);
      uint64_t v14 = v15;
      if (v15 != 1) {
        break;
      }
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v17[0], 0, (degas::Bitmap *)&v18);
    }
    if (v15 == 2)
    {
      degas::Bitmap::unionWith<degas::Bitmap>(a6, (uint64_t)&v18);
      uint64_t v14 = 0;
    }
    degas::Cursor::~Cursor(v17);
    v17[0] = (degas::Statement *)v19;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  }
  *(void *)&long long v18 = v21;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  return v14;
}

void sub_1D1726F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19)
{
  a9 = &a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a11 = &a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::neighborsEdgesFirstFilterNode(uint64_t a1, degas::Bitmap *this, uint64_t **a3, const degas::Bitmap *a4, unsigned int a5, degas::Bitmap *a6)
{
  memset(&v20, 0, 41);
  if (*a3)
  {
    uint64_t v11 = degas::Bitmap::count(this);
    uint64_t v12 = **a3;
    if (v11) {
      (*(void (**)(void))(v12 + 24))();
    }
    else {
      (*(void (**)(void))(v12 + 16))();
    }
  }
  else
  {
    degas::Bitmap::operator=(&v20, this);
  }
  if (a5 > 1)
  {
    uint64_t v14 = 0;
  }
  else
  {
    long long v18 = 0u;
    memset(v19, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v17);
    degas::LabelledEdgeCursor::setForTargetNodesFromEdgesSourceNodesFilterNode((degas::LabelledEdgeCursor *)v17, a4, &v20, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
    while (1)
    {
      uint64_t v13 = degas::Statement::next((sqlite3_stmt **)v17[0]);
      uint64_t v14 = v13;
      if (v13 != 1) {
        break;
      }
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v17[0], 0, (degas::Bitmap *)&v18);
    }
    if (v13 == 2)
    {
      degas::Bitmap::operator=(a6, &v18);
      uint64_t v14 = 0;
    }
    degas::Cursor::~Cursor(v17);
    v17[0] = (degas::Statement *)v19;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  }
  if ((a5 & 0xFFFFFFFD) == 0)
  {
    long long v18 = 0u;
    memset(v19, 0, 25);
    degas::LabelledEdgeCursor::LabelledEdgeCursor(v17);
    degas::LabelledEdgeCursor::setForSourceNodesFromEdgesTargetNodesFilterNode((degas::LabelledEdgeCursor *)v17, a4, &v20, (const degas::LabelledEdgeTable *)(*(void *)(a1 + 24) + 1144));
    while (1)
    {
      uint64_t v15 = degas::Statement::next((sqlite3_stmt **)v17[0]);
      uint64_t v14 = v15;
      if (v15 != 1) {
        break;
      }
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v17[0], 0, (degas::Bitmap *)&v18);
    }
    if (v15 == 2)
    {
      degas::Bitmap::unionWith<degas::Bitmap>(a6, (uint64_t)&v18);
      uint64_t v14 = 0;
    }
    degas::Cursor::~Cursor(v17);
    v17[0] = (degas::Statement *)v19;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  }
  *(void *)&long long v18 = &v20._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  return v14;
}

void sub_1D172719C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19)
{
  a9 = &a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a11 = &a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::appendSourceNodesForEdges(degas::NeighborQuery *this, Bitmap *a2, degas::Bitmap *a3)
{
  degas::LabelledEdgeCursor::LabelledEdgeCursor(v11);
  degas::LabelledEdgeCursor::setForSourceNodesFromEdges((degas::LabelledEdgeCursor *)v11, a2, (const degas::LabelledEdgeTable *)(*((void *)this + 3) + 1144));
  long long v9 = 0u;
  memset(v10, 0, 25);
  while (1)
  {
    uint64_t v6 = degas::Statement::next((sqlite3_stmt **)v11[0]);
    uint64_t v7 = v6;
    if (v6 != 1) {
      break;
    }
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v11[0], 0, (degas::Bitmap *)&v9);
  }
  if (v6 == 2)
  {
    degas::Bitmap::unionWith<degas::Bitmap>(a3, (uint64_t)&v9);
    uint64_t v7 = 0;
  }
  uint64_t v12 = (void **)v10;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v12);
  degas::Cursor::~Cursor(v11);
  return v7;
}

void sub_1D17272AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  *(void *)(v3 - 40) = va;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  degas::Cursor::~Cursor((degas::Statement **)va1);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::appendTargetNodesForEdges(degas::NeighborQuery *this, Bitmap *a2, degas::Bitmap *a3)
{
  degas::LabelledEdgeCursor::LabelledEdgeCursor(v11);
  degas::LabelledEdgeCursor::setForTargetNodesFromEdges((degas::LabelledEdgeCursor *)v11, a2, (const degas::LabelledEdgeTable *)(*((void *)this + 3) + 1144));
  long long v9 = 0u;
  memset(v10, 0, 25);
  while (1)
  {
    uint64_t v6 = degas::Statement::next((sqlite3_stmt **)v11[0]);
    uint64_t v7 = v6;
    if (v6 != 1) {
      break;
    }
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v11[0], 0, (degas::Bitmap *)&v9);
  }
  if (v6 == 2)
  {
    degas::Bitmap::unionWith<degas::Bitmap>(a3, (uint64_t)&v9);
    uint64_t v7 = 0;
  }
  uint64_t v12 = (void **)v10;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v12);
  degas::Cursor::~Cursor(v11);
  return v7;
}

void sub_1D17273A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  *(void *)(v3 - 40) = va;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  degas::Cursor::~Cursor((degas::Statement **)va1);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::neighborsNodeTableEdges(degas::NeighborQuery *a1, degas::Bitmap *a2, void *a3, Bitmap *a4, unsigned int a5, void *a6)
{
  uint64_t v12 = (degas::NodeCursor *)degas::NodeCursor::NodeCursor(v22);
  degas::NodeCursor::setForIdentifiers(v12, a4, (const degas::NodeTable *)(*((void *)a1 + 3) + 192));
  long long v20 = 0u;
  memset(v21, 0, 25);
  memset(&v19, 0, 41);
  memset(&v18, 0, 41);
  while (1)
  {
    uint64_t v13 = degas::Statement::next((sqlite3_stmt **)v22[0]);
    uint64_t appended = v13;
    if (v13 != 1) {
      break;
    }
    if (a5 <= 1)
    {
      uint64_t v15 = degas::Statement::literalBitmapColumnValue((sqlite3_stmt **)v22[0], 3);
      if (v15[1]) {
        degas::Bitmap::unionWith<degas::LiteralBitmap>((degas::Bitmap *)&v19, (uint64_t)v15);
      }
    }
    if ((a5 & 0xFFFFFFFD) == 0)
    {
      uint64_t v16 = degas::Statement::literalBitmapColumnValue((sqlite3_stmt **)v22[0], 2);
      if (v16[1]) {
        degas::Bitmap::unionWith<degas::LiteralBitmap>((degas::Bitmap *)&v18, (uint64_t)v16);
      }
    }
  }
  if (v13 == 2)
  {
    if (v19._bitSets.__begin_ == v19._bitSets.__end_) {
      goto LABEL_26;
    }
    if (degas::Bitmap::count(a2)) {
      degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v19, a2);
    }
    if (*a3) {
      (*(void (**)(void, Bitmap *, Bitmap *))(*(void *)*a3 + 24))(*a3, &v19, &v19);
    }
    uint64_t appended = degas::NeighborQuery::appendTargetNodesForEdges(a1, &v19, (degas::Bitmap *)&v20);
    if (!appended)
    {
LABEL_26:
      if (v18._bitSets.__begin_ == v18._bitSets.__end_) {
        goto LABEL_22;
      }
      if (degas::Bitmap::count(a2)) {
        degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v18, a2);
      }
      if (*a3) {
        (*(void (**)(void, Bitmap *, Bitmap *))(*(void *)*a3 + 24))(*a3, &v18, &v18);
      }
      uint64_t appended = degas::NeighborQuery::appendSourceNodesForEdges(a1, &v18, (degas::Bitmap *)&v20);
      if (!appended)
      {
LABEL_22:
        degas::Bitmap::operator=(a6, &v20);
        uint64_t appended = 0;
      }
    }
  }
  p_bitSets = &v18._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_bitSets);
  v18._bitCount = (unint64_t)&v19._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  v19._bitCount = (unint64_t)v21;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  degas::Cursor::~Cursor(v22);
  return appended;
}

void sub_1D1727604(_Unwind_Exception *a1)
{
  degas::Cursor::~Cursor((degas::Statement **)(v1 - 88));
  _Unwind_Resume(a1);
}

void degas::Bitmap::intersectWith<degas::Bitmap>(degas::Bitmap *this, degas::Bitmap *a2)
{
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  unint64_t v3 = *((void *)a2 + 3) - *((void *)a2 + 2);
  if ((v3 & 0xFFFFFFFF0) == 0)
  {
    uint64_t v13 = (degas::BitsetPtr **)((char *)this + 24);
    uint64_t v14 = (degas::BitsetPtr *)*((void *)this + 3);
    uint64_t v6 = (degas::BitsetPtr *)*((void *)this + 2);
    *(void *)this = 0;
    for (*((void *)this + 1) = 0; v14 != v6; uint64_t v14 = (degas::BitsetPtr *)((char *)v14 - 16))
    {
      degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)((char *)v14 - 16));
      *((void *)v14 - 1) = 0;
    }
    goto LABEL_14;
  }
  uint64_t v6 = (degas::BitsetPtr *)*((void *)this + 2);
  unint64_t v4 = (degas::BitsetPtr *)*((void *)this + 3);
  uint64_t v5 = (char *)this + 16;
  if (v6 == v4)
  {
    uint64_t v13 = (degas::BitsetPtr **)((char *)this + 24);
    *(void *)this = 0;
    *((void *)this + 1) = 0;
LABEL_14:
    *uint64_t v13 = v6;
    return;
  }
  unint64_t v7 = (v3 >> 4);
  if ((v3 >> 4))
  {
    LODWORD(Offset) = 0;
    while (1)
    {
      unint64_t v10 = v16;
      uint64_t v6 = (degas::BitsetPtr *)*((void *)this + 2);
      unint64_t v4 = (degas::BitsetPtr *)*((void *)this + 3);
      if (v16 >= (v4 - v6) >> 4) {
        break;
      }
      uint64_t v11 = (degas::Bitset **)((char *)v6 + 16 * v16);
      int v12 = degas::Bitmap::intersectBitset((degas::BitsetPtr **)this, &v16, *v11, &v15, *(const degas::Bitset **)(*((void *)a2 + 2) + 16 * Offset));
      unint64_t Offset = v15;
      if (v12)
      {
        unint64_t Offset = degas::Bitmap::findOffset(a2, *((void *)*v11 + 1), v15, v7);
        unint64_t v15 = Offset;
      }
      if (Offset >= v7)
      {
        unint64_t v10 = v16;
        uint64_t v6 = (degas::BitsetPtr *)*((void *)this + 2);
        unint64_t v4 = (degas::BitsetPtr *)*((void *)this + 3);
        break;
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
  }
  if (v10 < (v4 - v6) >> 4)
  {
    std::vector<degas::BitsetPtr>::erase((uint64_t)v5, (degas::BitsetPtr *)((char *)v6 + 16 * v10), v4);
    *(void *)this = 0xFFFFFFFFLL;
    *((unsigned char *)this + 40) = 1;
  }
}

uint64_t degas::NeighborQuery::neighborsWithPlan(degas::NeighborQuery *a1, uint64_t a2, degas::Bitmap *this, void *a4, uint64_t **a5, Bitmap *a6, unsigned int a7, degas::Bitmap *a8)
{
  switch((int)a2)
  {
    case 1:
      uint64_t result = degas::NeighborQuery::neighborsNodesFirst((uint64_t)a1, a2, a4, a5, a6, a7, a8);
      break;
    case 2:
      uint64_t result = degas::NeighborQuery::neighborsNodeTableEdges(a1, this, a5, a6, a7, a8);
      break;
    case 3:
      uint64_t result = degas::NeighborQuery::neighborsEdgesFirstJoinBoth((uint64_t)a1, this, a5, a6, a7, a8);
      break;
    case 4:
      uint64_t result = degas::NeighborQuery::neighborsEdgesFirstJoinEdge((uint64_t)a1, this, a5, a6, a7, a8);
      break;
    case 5:
      uint64_t result = degas::NeighborQuery::neighborsEdgesFirstFilterEdge((uint64_t)a1, this, a5, a6, a7, a8);
      break;
    case 6:
      uint64_t result = degas::NeighborQuery::neighborsEdgesFirstFilterNode((uint64_t)a1, this, a5, (const degas::Bitmap *)a6, a7, a8);
      break;
    case 7:
      uint64_t result = degas::NeighborQuery::neighborsNodesEdgeFilter((uint64_t)a1, this, (uint64_t)this, a5, a6, a7, a8);
      break;
    default:
      abort();
  }
  return result;
}

unint64_t degas::NeighborQuery::neighbors(degas::Database **a1, degas::Bitmap *this, unsigned int a3, degas::Bitmap *a4)
{
  if (degas::sInstrumentTraversal != 1)
  {
    v35[2] = 0u;
    memset(v36, 0, 25);
    uint64_t v9 = (degas::Predicate *)degas::Bitmap::count(this);
    if (v9)
    {
      if (*((unsigned char *)a1 + 16))
      {
        (*(void (**)(void ***__return_ptr))(*(void *)*a1 + 32))(&v30);
        unint64_t v10 = v30;
        uint64_t v11 = v31;
        v29[0] = v30;
        v29[1] = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v13 = v32;
        int v12 = v33;
        v28[0] = v32;
        v28[1] = (uint64_t *)v33;
        if (v33) {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v34 = 0u;
        memset(v35, 0, 25);
        if (v10)
        {
          unint64_t v14 = (*((uint64_t (**)(void **, long long *))*v10 + 2))(v10, &v34);
          if (v14) {
            goto LABEL_47;
          }
          unint64_t v14 = v34;
          if ((void)v34 == 0xFFFFFFFFLL)
          {
            unint64_t v16 = (uint64_t *)*((void *)&v35[0] + 1);
            unint64_t v15 = *(uint64_t **)&v35[0];
            if (*(void *)&v35[0] == *((void *)&v35[0] + 1))
            {
              unint64_t v14 = 0;
            }
            else
            {
              unint64_t v14 = 0;
              do
              {
                uint64_t v17 = *v15;
                unsigned int v18 = *(_DWORD *)(*v15 + 4);
                if (v18 == -1)
                {
                  uint64_t v19 = 0;
                  int32x4_t v20 = 0uLL;
                  do
                  {
                    do
                    {
                      int32x4_t v20 = (int32x4_t)vpadalq_u16((uint32x4_t)v20, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v17 + 4 * v19 + 16))));
                      v19 += 4;
                    }
                    while (v19 != 32);
                    uint64_t v19 = 0;
                    unsigned int v18 = vaddvq_s32(v20);
                    int32x4_t v20 = 0uLL;
                  }
                  while (v18 == -1);
                  *(_DWORD *)(v17 + 4) = v18;
                }
                v14 += v18;
                v15 += 2;
              }
              while (v15 != v16);
            }
            *(void *)&long long v34 = v14;
          }
          if (!v14) {
            goto LABEL_47;
          }
        }
        else
        {
          unint64_t v14 = degas::Database::edgeCount(a1[3]);
        }
        if (v13 && ((*(uint64_t (**)(uint64_t *))(*v13 + 56))(v13) & 1) != 0)
        {
          unint64_t v14 = 0;
        }
        else
        {
          unint64_t v23 = degas::Bitmap::count(this);
          unint64_t v24 = v14 / v23;
          if ((v23 < 0x33 || v24 >= 0xA) && (v14 > 0xE || v24 >= 3))
          {
            if ((v14 >= 0x249F0 || v13 == 0) && v14 >= 0x15E) {
              uint64_t v25 = 2;
            }
            else {
              uint64_t v25 = 7;
            }
          }
          else
          {
            uint64_t v25 = 4;
          }
          unint64_t v14 = degas::NeighborQuery::neighborsWithPlan((degas::NeighborQuery *)a1, v25, (degas::Bitmap *)&v34, v29, v28, (Bitmap *)this, a3, a4);
        }
LABEL_47:
        long long v37 = (void **)v35;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v37);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        goto LABEL_55;
      }
      long long v34 = 0u;
      memset(v35, 0, 25);
      uint64_t v21 = (degas::Predicate *)degas::Predicate::nullPtr(v9);
      degas::Predicate::nullPtr(v21);
      unint64_t v14 = degas::NeighborQuery::neighborsNodesFirst((uint64_t)a1, v22, degas::Predicate::nullPtr(void)::nullPtr, degas::Predicate::nullPtr(void)::nullPtr, (Bitmap *)this, a3, a4);
      uint64_t v30 = (void **)v35;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v30);
    }
    else
    {
      unint64_t v14 = 0;
    }
LABEL_55:
    *(void *)&long long v34 = v36;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
    return v14;
  }
  return degas::NeighborQuery::neighbors_instrumented(a1, this, a3, a4);
}

void sub_1D1727C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  *(void *)(v27 - 88) = &a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 88));
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::pair<std::shared_ptr<degas::Predicate>,std::shared_ptr<degas::Predicate>>::~pair((uint64_t)&a13);
  a17 = (void **)&a25;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::neighbors_instrumented(degas::Database **a1, degas::Bitmap *this, unsigned int a3, degas::Bitmap *a4)
{
  long long v80 = 0u;
  memset(v81, 0, 25);
  uint64_t v6 = (degas::Predicate *)degas::Bitmap::count(this);
  if (!v6)
  {
    uint64_t v11 = 0;
    goto LABEL_118;
  }
  if (!*((unsigned char *)a1 + 16))
  {
    long long v78 = 0u;
    memset(v79, 0, 25);
    uint64_t v19 = (degas::Predicate *)degas::Predicate::nullPtr(v6);
    degas::Predicate::nullPtr(v19);
    uint64_t v11 = degas::NeighborQuery::neighborsNodesFirst((uint64_t)a1, v20, degas::Predicate::nullPtr(void)::nullPtr, degas::Predicate::nullPtr(void)::nullPtr, (Bitmap *)this, a3, a4);
    *(void *)&long long v70 = v79;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    goto LABEL_118;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 32))(&v74);
  uint64_t v7 = v74;
  uint64_t v8 = v75;
  v73[0] = v74;
  v73[1] = v75;
  if (v75) {
    atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = v76;
  uint64_t v9 = v77;
  v72[0] = v76;
  v72[1] = (uint64_t *)v77;
  if (v77) {
    atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v62 = v9;
  id v63 = v8;
  long long v78 = 0u;
  memset(v79, 0, 25);
  if (!v7)
  {
    unint64_t v12 = degas::Database::edgeCount(a1[3]);
    goto LABEL_25;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v7 + 16))(v7, &v78);
  if (!v11)
  {
    unint64_t v12 = v78;
    if ((void)v78 == 0xFFFFFFFFLL)
    {
      uint64_t v13 = (uint64_t *)v79[0];
      unint64_t v14 = (uint64_t *)v79[1];
      if (v79[0] == v79[1])
      {
        unint64_t v12 = 0;
      }
      else
      {
        unint64_t v12 = 0;
        do
        {
          uint64_t v15 = *v13;
          unsigned int v16 = *(_DWORD *)(*v13 + 4);
          if (v16 == -1)
          {
            uint64_t v17 = 0;
            int32x4_t v18 = 0uLL;
            do
            {
              do
              {
                int32x4_t v18 = (int32x4_t)vpadalq_u16((uint32x4_t)v18, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v15 + 4 * v17 + 16))));
                v17 += 4;
              }
              while (v17 != 32);
              uint64_t v17 = 0;
              unsigned int v16 = vaddvq_s32(v18);
              int32x4_t v18 = 0uLL;
            }
            while (v16 == -1);
            *(_DWORD *)(v15 + 4) = v16;
          }
          v12 += v16;
          v13 += 2;
        }
        while (v13 != v14);
      }
      *(void *)&long long v78 = v12;
    }
    if (!v12) {
      goto LABEL_27;
    }
LABEL_25:
    if (v10 && ((*(uint64_t (**)(uint64_t *))(*v10 + 56))(v10) & 1) != 0)
    {
LABEL_27:
      uint64_t v11 = 0;
      goto LABEL_110;
    }
    unint64_t v21 = degas::Bitmap::count(this);
    unint64_t v22 = v12 / v21;
    if ((v21 < 0x33 || v22 >= 0xA) && (v12 > 0xE || v22 >= 3))
    {
      if ((v12 >= 0x249F0 || v10 == 0) && v12 >= 0x15E) {
        uint64_t v23 = 2;
      }
      else {
        uint64_t v23 = 7;
      }
    }
    else
    {
      uint64_t v23 = 4;
    }
    int v26 = 0;
    long long v70 = 0u;
    memset(v71, 0, 25);
    int v27 = degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset;
    char v28 = 1;
    double v29 = 1.0e10;
    double v30 = 0.0;
    do
    {
      uint64_t v31 = v23;
      *(_OWORD *)unint64_t v68 = 0u;
      memset(v69, 0, 25);
      uint64_t v32 = degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::planList[v27 % 7];
      double Current = CFAbsoluteTimeGetCurrent();
      uint64_t v11 = degas::NeighborQuery::neighborsWithPlan((degas::NeighborQuery *)a1, v32, (degas::Bitmap *)&v78, v73, v72, (Bitmap *)this, a3, (degas::Bitmap *)v68);
      if (v11)
      {
        __p[0] = v69;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        goto LABEL_109;
      }
      double v34 = CFAbsoluteTimeGetCurrent() - Current;
      if (v34 < v29)
      {
        double v29 = v34;
        int v26 = v32;
      }
      if (v28)
      {
        degas::Bitmap::operator=(&v70, v68);
        degas::Bitmap::operator=(a4, v68);
      }
      else if (!degas::Bitmap::operator==((uint64_t)v68, (uint64_t)&v70))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "incorrect result for plan ");
        degas::Bitmap::count(this);
        if ((void)v70 == 0xFFFFFFFFLL)
        {
          uint64_t v35 = (uint64_t *)v71[0];
          unint64_t v36 = (uint64_t *)v71[1];
          if (v71[0] == v71[1])
          {
            uint64_t v37 = 0;
          }
          else
          {
            uint64_t v37 = 0;
            do
            {
              uint64_t v38 = *v35;
              unsigned int v39 = *(_DWORD *)(*v35 + 4);
              if (v39 == -1)
              {
                uint64_t v40 = 0;
                int32x4_t v41 = 0uLL;
                do
                {
                  do
                  {
                    int32x4_t v41 = (int32x4_t)vpadalq_u16((uint32x4_t)v41, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v38 + 4 * v40 + 16))));
                    v40 += 4;
                  }
                  while (v40 != 32);
                  uint64_t v40 = 0;
                  unsigned int v39 = vaddvq_s32(v41);
                  int32x4_t v41 = 0uLL;
                }
                while (v39 == -1);
                *(_DWORD *)(v38 + 4) = v39;
              }
              v37 += v39;
              v35 += 2;
            }
            while (v35 != v36);
          }
          *(void *)&long long v70 = v37;
        }
        if (v68[0] == (void *)0xFFFFFFFFLL)
        {
          uint64_t v43 = (uint64_t *)*((void *)&v69[0] + 1);
          uint64_t v42 = *(uint64_t **)&v69[0];
          if (*(void *)&v69[0] == *((void *)&v69[0] + 1))
          {
            uint64_t v44 = 0;
          }
          else
          {
            uint64_t v44 = 0;
            do
            {
              uint64_t v45 = *v42;
              unsigned int v46 = *(_DWORD *)(*v42 + 4);
              if (v46 == -1)
              {
                uint64_t v47 = 0;
                int32x4_t v48 = 0uLL;
                do
                {
                  do
                  {
                    int32x4_t v48 = (int32x4_t)vpadalq_u16((uint32x4_t)v48, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v45 + 4 * v47 + 16))));
                    v47 += 4;
                  }
                  while (v47 != 32);
                  uint64_t v47 = 0;
                  unsigned int v46 = vaddvq_s32(v48);
                  int32x4_t v48 = 0uLL;
                }
                while (v46 == -1);
                *(_DWORD *)(v45 + 4) = v46;
              }
              v44 += v46;
              v42 += 2;
            }
            while (v42 != v43);
          }
          v68[0] = v44;
        }
        degas::NeighborQuery::reportIncorrectPlanResult((uint64_t)a1, (uint64_t)__p, v32);
        if (v67 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v23 = v31;
      if (v32 == v31) {
        double v30 = v34;
      }
      __p[0] = v69;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      char v28 = 0;
    }
    while (v27++ < degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset
                  + 6);
    degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset = (degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset + 1) % 7u;
    if (v26 == v31)
    {
      unint64_t v50 = 0;
      ++degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::scoreWins;
    }
    else
    {
      ++degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::scoreLosses;
      if (v30 - v29 < 0.0) {
        goto LABEL_108;
      }
      *(double *)&degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::totalTimeLost = v30 - v29 + *(double *)&degas::NeighborQuery::neighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::totalTimeLost;
      uint64_t v51 = *a1;
      if (*a1)
      {
        *(_OWORD *)unint64_t v68 = 0u;
        memset(v69, 0, 25);
        (*(void (**)(degas::Database *, void **))(*(void *)v51 + 16))(v51, v68);
        unint64_t v50 = degas::Bitmap::count((degas::Bitmap *)v68);
        __p[0] = v69;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
      else
      {
        unint64_t v50 = degas::Database::edgeCount(a1[3]);
      }
      std::string::basic_string[abi:ne180100]<0>(v68, "Query");
      degas::Bitmap::count(this);
      degas::Bitmap::count((degas::Bitmap *)&v78);
      degas::Database::nodeCount(a1[3]);
      degas::Database::edgeCount(a1[3]);
      degas::NeighborQuery::reportTimingPlanFailure((uint64_t)a1, (uint64_t)v68, v31, v26);
      if (SBYTE7(v69[0]) < 0) {
        operator delete(v68[0]);
      }
      LODWORD(v23) = v31;
    }
    if (v23 == 7 || v23 == 2)
    {
      if (!v50)
      {
        uint64_t v52 = *a1;
        if (*a1)
        {
          *(_OWORD *)unint64_t v68 = 0u;
          memset(v69, 0, 25);
          (*(void (**)(degas::Database *, void **))(*(void *)v52 + 16))(v52, v68);
          degas::Bitmap::count((degas::Bitmap *)v68);
          __p[0] = v69;
          std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        else
        {
          degas::Database::edgeCount(a1[3]);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v68, "node-first plans ");
      uint64_t v53 = degas::Bitmap::count(this);
      if ((void)v78 == 0xFFFFFFFFLL)
      {
        id v54 = (uint64_t *)v79[0];
        uint64_t v55 = (uint64_t *)v79[1];
        if (v79[0] == v79[1])
        {
          uint64_t v56 = 0;
        }
        else
        {
          uint64_t v56 = 0;
          do
          {
            uint64_t v57 = *v54;
            unsigned int v58 = *(_DWORD *)(*v54 + 4);
            if (v58 == -1)
            {
              uint64_t v59 = 0;
              int32x4_t v60 = 0uLL;
              do
              {
                do
                {
                  int32x4_t v60 = (int32x4_t)vpadalq_u16((uint32x4_t)v60, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v57 + 4 * v59 + 16))));
                  v59 += 4;
                }
                while (v59 != 32);
                uint64_t v59 = 0;
                unsigned int v58 = vaddvq_s32(v60);
                int32x4_t v60 = 0uLL;
              }
              while (v58 == -1);
              *(_DWORD *)(v57 + 4) = v58;
            }
            v56 += v58;
            v54 += 2;
          }
          while (v54 != v55);
        }
        *(void *)&long long v78 = v56;
      }
      degas::NeighborQuery::reportNodeFirstPlanTimes(v53, (uint64_t)v68);
      if (SBYTE7(v69[0]) < 0) {
        operator delete(v68[0]);
      }
    }
LABEL_108:
    uint64_t v11 = 0;
LABEL_109:
    v68[0] = v71;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
  }
LABEL_110:
  *(void *)&long long v70 = v79;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  if (v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
  }
  if (v75) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  }
LABEL_118:
  *(void *)&long long v78 = v81;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  return v11;
}

void sub_1D17285C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  __p = a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a31 = &a47;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::pair<std::shared_ptr<degas::Predicate>,std::shared_ptr<degas::Predicate>>::~pair((uint64_t)&a41);
  a45 = v47 - 176;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::shared_ptr<degas::Predicate>,std::shared_ptr<degas::Predicate>>::~pair(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t degas::NeighborQuery::reportIncorrectPlanResult(uint64_t a1, uint64_t a2, int a3)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(void *)a2;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n\tedge predicate=", 17);
  if (*(void *)a1)
  {
    (*(void (**)(void **__return_ptr))(**(void **)a1 + 64))(&v25);
    unsigned int v9 = HIBYTE(v27);
    unint64_t v10 = (void **)v25;
    uint64_t v11 = v26;
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v10 = 0;
    unsigned int v9 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  if ((v9 & 0x80u) == 0) {
    unint64_t v12 = &v25;
  }
  else {
    unint64_t v12 = v10;
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v13 = v9;
  }
  else {
    uint64_t v13 = v11;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n\tplan=", 7);
  std::string::basic_string[abi:ne180100]<0>(__p, off_1E68DAAD0[a3]);
  if ((v24 & 0x80u) == 0) {
    unint64_t v14 = __p;
  }
  else {
    unint64_t v14 = (void **)__p[0];
  }
  if ((v24 & 0x80u) == 0) {
    uint64_t v15 = v24;
  }
  else {
    uint64_t v15 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n\tstart node count=", 19);
  unsigned int v16 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n\tcorrect node count=", 21);
  uint64_t v17 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n\tthis node count=", 18);
  int32x4_t v18 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
  uint64_t v19 = std::locale::use_facet(&v31, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  uint64_t v20 = (degas *)std::ostream::flush();
  if ((char)v24 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v25);
  }
  LogFile = (degas::LocalLogFile *)degas::getLogFile(v20);
  std::stringbuf::str();
  degas::LocalLogFile::writeText(LogFile, (const void **)&v25);
  if (SHIBYTE(v27) < 0) {
    operator delete(v25);
  }
  v28[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v28[1] = MEMORY[0x1E4FBA470] + 16;
  if (v29 < 0) {
    operator delete((void *)v28[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D25F9A50](&v30);
}

void sub_1D1728A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

uint64_t degas::NeighborQuery::reportTimingPlanFailure(uint64_t a1, uint64_t a2, int a3, int a4)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v41);
  int v8 = *(char *)(a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = *(void *)a2;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" plan time estimate beaten ", 27);
  uint64_t v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"s with plan ", 12);
  std::string::basic_string[abi:ne180100]<0>(v39, off_1E68DAAD0[a4]);
  if ((v40 & 0x80u) == 0) {
    unint64_t v12 = v39;
  }
  else {
    unint64_t v12 = (void **)v39[0];
  }
  if ((v40 & 0x80u) == 0) {
    uint64_t v13 = v40;
  }
  else {
    uint64_t v13 = (uint64_t)v39[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n\tbeat ", 7);
  unint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"s with chosen plan ", 19);
  std::string::basic_string[abi:ne180100]<0>(v37, off_1E68DAAD0[a3]);
  if ((v38 & 0x80u) == 0) {
    uint64_t v15 = v37;
  }
  else {
    uint64_t v15 = (void **)v37[0];
  }
  if ((v38 & 0x80u) == 0) {
    uint64_t v16 = v38;
  }
  else {
    uint64_t v16 = (uint64_t)v37[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n\tstart node count=", 19);
  uint64_t v17 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n\ttotal node rows=", 18);
  int32x4_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n\tlabels edge count estimate=", 29);
  uint64_t v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n\tfiltered edge count=", 22);
  uint64_t v20 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n\ttotal edge rows=", 18);
  unint64_t v21 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n\tedge predicate=", 17);
  if (*(void *)a1)
  {
    (*(void (**)(void **__return_ptr))(**(void **)a1 + 64))(&__p);
    unsigned int v22 = HIBYTE(v36);
    uint64_t v23 = (void **)__p;
    uint64_t v24 = v35;
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v23 = 0;
    unsigned int v22 = 0;
    __p = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
  }
  if ((v22 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = v23;
  }
  if ((v22 & 0x80u) == 0) {
    uint64_t v26 = v22;
  }
  else {
    uint64_t v26 = v24;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)p_p, v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n\twins=", 7);
  uint64_t v27 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", losses=", 9);
  char v28 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", total time lost=", 18);
  char v29 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"s", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
  uint64_t v30 = std::locale::use_facet(&v44, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale(&v44);
  std::ostream::put();
  std::locale v31 = (degas *)std::ostream::flush();
  if (SHIBYTE(v36) < 0) {
    operator delete(__p);
  }
  if ((char)v38 < 0) {
    operator delete(v37[0]);
  }
  if ((char)v40 < 0) {
    operator delete(v39[0]);
  }
  LogFile = (degas::LocalLogFile *)degas::getLogFile(v31);
  std::stringbuf::str();
  degas::LocalLogFile::writeText(LogFile, (const void **)v39);
  if ((char)v40 < 0) {
    operator delete(v39[0]);
  }
  v41[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v41 + *(void *)(v41[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v41[1] = MEMORY[0x1E4FBA470] + 16;
  if (v42 < 0) {
    operator delete((void *)v41[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D25F9A50](&v43);
}

void sub_1D1728F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  std::ostringstream::~ostringstream((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::reportNodeFirstPlanTimes(uint64_t a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *(void *)a2;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n\tstart node count=", 19);
  int v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n\tlabels edge count estimate=", 29);
  uint64_t v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n\tfiltered edge count=", 22);
  int v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n\tNF time=", 10);
  uint64_t v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"s\n\tNT time=", 11);
  uint64_t v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"s\n\tNEF time=", 12);
  uint64_t v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"s", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  uint64_t v13 = (degas *)std::ostream::flush();
  LogFile = (degas::LocalLogFile *)degas::getLogFile(v13);
  std::stringbuf::str();
  degas::LocalLogFile::writeText(LogFile, (const void **)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  v18[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D25F9A50](&v20);
}

void sub_1D17292A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1D172945C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](v1);
  _Unwind_Resume(a1);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1D25F9940](v23, a1);
  if (v23[0])
  {
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_29;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    size_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v16 >= 0x17)
      {
        uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v18 = v16 | 7;
        }
        uint64_t v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        size_t v25 = v16;
        int64_t v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((unsigned char *)p_b + v16) = 0;
      uint64_t v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(void *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0) {
        operator delete(__b.__locale_);
      }
      if (v21 != v16) {
        goto LABEL_29;
      }
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((void *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1D25F9950](v23);
  return a1;
}

void sub_1D1729720(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1D25F9950](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1D17296F4);
}

void sub_1D172978C(_Unwind_Exception *a1)
{
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](a1 + 112);
  return a1;
}

void __clang_call_terminate(void *a1)
{
}

void *degas::NeighborQuery::queryPlanName@<X0>(int a1@<W1>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E68DAAD0[a1]);
}

uint64_t degas::NeighborQuery::transitiveClosureNeighborsWithPlan(degas::NeighborQuery *a1, int a2, void *a3, void *a4, void *a5, uint64_t a6, unsigned int a7, void *a8)
{
  long long v32 = 0u;
  memset(v33, 0, 25);
  if ((a2 - 3) <= 0xFFFFFFFD && *a5) {
    (*(void (**)(void, void *, long long *))(*(void *)*a5 + 24))(*a5, a3, &v32);
  }
  else {
    degas::Bitmap::operator=(&v32, a3);
  }
  uint64_t v21 = a8;
  long long v30 = 0u;
  memset(v31, 0, 25);
  v29._bitCount = *(void *)a6;
  memset(&v29._lastOffsetFoundAt, 0, 32);
  std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v29._bitSets, *(long long **)(a6 + 16), *(long long **)(a6 + 24), (uint64_t)(*(void *)(a6 + 24) - *(void *)(a6 + 16)) >> 4);
  char v13 = 0;
  v29._dirty = *(unsigned char *)(a6 + 40);
  while ((v13 & 1) == 0)
  {
    v27[0] = (void **)v30;
    memset(&v27[1], 0, 32);
    BOOL v14 = std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v27[2], *(long long **)&v31[0], *((long long **)&v31[0] + 1), (uint64_t)(*((void *)&v31[0] + 1) - *(void *)&v31[0]) >> 4);
    char v28 = BYTE8(v31[1]);
    long long v25 = 0u;
    memset(v26, 0, 25);
    switch(a2)
    {
      case 0:
        abort();
      case 1:
        uint64_t FilterNode = degas::NeighborQuery::neighborsNodesFirst((uint64_t)a1, v15, a4, a5, &v29, a7, (degas::Bitmap *)&v25);
        goto LABEL_15;
      case 2:
        uint64_t FilterNode = degas::NeighborQuery::neighborsNodeTableEdges(a1, (degas::Bitmap *)&v32, a5, &v29, a7, &v25);
        goto LABEL_15;
      case 3:
        degas::Predicate::nullPtr((degas::Predicate *)v14);
        uint64_t FilterNode = degas::NeighborQuery::neighborsEdgesFirstJoinBoth((uint64_t)a1, (degas::Bitmap *)&v32, (uint64_t **)&degas::Predicate::nullPtr(void)::nullPtr, &v29, a7, (degas::Bitmap *)&v25);
        goto LABEL_15;
      case 4:
        degas::Predicate::nullPtr((degas::Predicate *)v14);
        uint64_t FilterNode = degas::NeighborQuery::neighborsEdgesFirstJoinEdge((uint64_t)a1, (degas::Bitmap *)&v32, (uint64_t **)&degas::Predicate::nullPtr(void)::nullPtr, &v29, a7, (degas::Bitmap *)&v25);
        goto LABEL_15;
      case 5:
        degas::Predicate::nullPtr((degas::Predicate *)v14);
        uint64_t FilterNode = degas::NeighborQuery::neighborsEdgesFirstFilterEdge((uint64_t)a1, (degas::Bitmap *)&v32, (uint64_t **)&degas::Predicate::nullPtr(void)::nullPtr, &v29, a7, (degas::Bitmap *)&v25);
        goto LABEL_15;
      case 6:
        degas::Predicate::nullPtr((degas::Predicate *)v14);
        uint64_t FilterNode = degas::NeighborQuery::neighborsEdgesFirstFilterNode((uint64_t)a1, (degas::Bitmap *)&v32, (uint64_t **)&degas::Predicate::nullPtr(void)::nullPtr, (const degas::Bitmap *)&v29, a7, (degas::Bitmap *)&v25);
        goto LABEL_15;
      case 7:
        uint64_t FilterNode = degas::NeighborQuery::neighborsNodesEdgeFilter((uint64_t)a1, (degas::Bitmap *)&v32, v16, a5, &v29, a7, (degas::Bitmap *)&v25);
LABEL_15:
        uint64_t v18 = FilterNode;
        if (!FilterNode) {
          goto LABEL_17;
        }
        char v19 = 0;
        char v13 = 0;
        break;
      default:
LABEL_17:
        degas::Bitmap::unionWith<degas::Bitmap>((degas::Bitmap *)v27, (uint64_t)&v25);
        if (degas::Bitmap::operator==((uint64_t)v27, (uint64_t)&v30))
        {
          char v19 = 1;
          uint64_t v18 = v8;
          char v13 = 1;
        }
        else
        {
          degas::Bitmap::operator=(&v30, v27);
          degas::Bitmap::diffWith<degas::Bitmap>((degas::Bitmap *)&v25, (degas::Bitmap *)&v29);
          degas::Bitmap::operator=(&v29, &v25);
          char v13 = 0;
          char v19 = 1;
          uint64_t v18 = v8;
        }
        break;
    }
    double v34 = (void **)v26;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v34);
    *(void *)&long long v25 = &v27[2];
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
    uint64_t v8 = v18;
    if ((v19 & 1) == 0) {
      goto LABEL_23;
    }
  }
  degas::Bitmap::operator=(v21, &v30);
  uint64_t v18 = 0;
LABEL_23:
  v27[0] = (void **)&v29._bitSets.__begin_;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](v27);
  v29._bitCount = (unint64_t)v31;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  *(void *)&long long v30 = v33;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  return v18;
}

void sub_1D1729C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,uint64_t a34,uint64_t a35)
{
  a21 = a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a21);
  a27 = (void **)&a35;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a27);
  a33 = (void **)(v35 - 144);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a33);
  _Unwind_Resume(a1);
}

void degas::Bitmap::diffWith<degas::Bitmap>(degas::Bitmap *this, degas::Bitmap *a2)
{
  unint64_t v2 = *((void *)a2 + 3) - *((void *)a2 + 2);
  if ((v2 >> 4) && *((void *)this + 3) != *((void *)this + 2))
  {
    unsigned int v5 = 0;
    unint64_t Offset = 0;
    unint64_t v7 = (v2 >> 4);
    do
    {
      uint64_t v8 = *((void *)this + 2);
      unint64_t v9 = (*((void *)this + 3) - v8) >> 4;
      if (v9 <= v5) {
        break;
      }
      uint64_t v10 = *(void *)(*((void *)a2 + 2) + 16 * Offset);
      unint64_t v11 = *(void *)(*(void *)(v8 + 16 * v5) + 8);
      unint64_t v12 = *(void *)(v10 + 8);
      if (v11 >= v12)
      {
        if (v11 > v12)
        {
          unint64_t Offset = degas::Bitmap::findOffset(a2, v11, Offset, v7);
        }
        else
        {
          degas::Bitmap::unshadowedBitSetAtIndex(this, v5, (degas::BitsetPtr *)v25);
          uint64_t v13 = 0;
          uint64_t v14 = v25[0];
          uint64_t v15 = v25[0] + 16;
          do
          {
            *(_DWORD *)(v15 + v13) &= ~*(_DWORD *)(v10 + 16 + v13);
            v13 += 4;
          }
          while (v13 != 128);
          uint64_t v16 = 0;
          *(_DWORD *)(v14 + 4) = -1;
          int32x4_t v17 = 0uLL;
          do
          {
            do
            {
              int32x4_t v17 = (int32x4_t)vpadalq_u16((uint32x4_t)v17, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v14 + 4 * v16 + 16))));
              v16 += 4;
            }
            while (v16 != 32);
            uint64_t v16 = 0;
            int v18 = vaddvq_s32(v17);
            int32x4_t v17 = 0uLL;
          }
          while (v18 == -1);
          *(_DWORD *)(v14 + 4) = v18;
          if (v18)
          {
            ++v5;
          }
          else
          {
            char v19 = (_OWORD *)*((void *)this + 3);
            uint64_t v20 = (degas::BitsetPtr *)(*((void *)this + 2) + 16 * v5);
            uint64_t v21 = (degas::BitsetPtr *)((char *)v20 + 16);
            if ((_OWORD *)((char *)v20 + 16) != v19)
            {
              do
              {
                degas::BitsetPtr::releaseBitset(v20);
                long long v22 = *((_OWORD *)v20 + 1);
                *(_OWORD *)uint64_t v20 = v22;
                if ((void)v22) {
                  ++*(_DWORD *)v22;
                }
                uint64_t v23 = (degas::BitsetPtr *)((char *)v20 + 16);
                uint64_t v24 = (_OWORD *)((char *)v20 + 32);
                uint64_t v20 = (degas::BitsetPtr *)((char *)v20 + 16);
              }
              while (v24 != v19);
              uint64_t v21 = (degas::BitsetPtr *)*((void *)this + 3);
              uint64_t v20 = v23;
            }
            for (; v21 != v20; uint64_t v21 = (degas::BitsetPtr *)((char *)v21 - 16))
            {
              degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)((char *)v21 - 16));
              *((void *)v21 - 1) = 0;
            }
            *((void *)this + 3) = v20;
          }
          ++Offset;
          *(void *)this = 0xFFFFFFFFLL;
          *((unsigned char *)this + 40) = 1;
          degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)v25);
        }
      }
      else
      {
        unsigned int v5 = degas::Bitmap::findOffset(this, *(void *)(v10 + 8), v5, v9);
      }
    }
    while (Offset < v7);
  }
}

unint64_t degas::NeighborQuery::transitiveClosureNeighbors(degas::Database **a1, degas::Bitmap *this, unsigned int a3, void *a4)
{
  if (degas::sInstrumentTraversal != 1)
  {
    v34[2] = 0u;
    memset(v35, 0, 25);
    unint64_t v9 = (degas::Predicate *)degas::Bitmap::count(this);
    if (v9)
    {
      if (*((unsigned char *)a1 + 16))
      {
        (*(void (**)(void ***__return_ptr))(*(void *)*a1 + 32))(&v29);
        uint64_t v10 = v29;
        unint64_t v11 = v30;
        v28[0] = v29;
        v28[1] = v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v13 = v31;
        unint64_t v12 = v32;
        v27[0] = v31;
        v27[1] = v32;
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v33 = 0u;
        memset(v34, 0, 25);
        if (v10)
        {
          unint64_t v14 = (*((uint64_t (**)(void **, long long *))*v10 + 2))(v10, &v33);
          if (v14) {
            goto LABEL_47;
          }
          unint64_t v14 = v33;
          if ((void)v33 == 0xFFFFFFFFLL)
          {
            uint64_t v16 = (uint64_t *)*((void *)&v34[0] + 1);
            uint64_t v15 = *(uint64_t **)&v34[0];
            if (*(void *)&v34[0] == *((void *)&v34[0] + 1))
            {
              unint64_t v14 = 0;
            }
            else
            {
              unint64_t v14 = 0;
              do
              {
                uint64_t v17 = *v15;
                unsigned int v18 = *(_DWORD *)(*v15 + 4);
                if (v18 == -1)
                {
                  uint64_t v19 = 0;
                  int32x4_t v20 = 0uLL;
                  do
                  {
                    do
                    {
                      int32x4_t v20 = (int32x4_t)vpadalq_u16((uint32x4_t)v20, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v17 + 4 * v19 + 16))));
                      v19 += 4;
                    }
                    while (v19 != 32);
                    uint64_t v19 = 0;
                    unsigned int v18 = vaddvq_s32(v20);
                    int32x4_t v20 = 0uLL;
                  }
                  while (v18 == -1);
                  *(_DWORD *)(v17 + 4) = v18;
                }
                v14 += v18;
                v15 += 2;
              }
              while (v15 != v16);
            }
            *(void *)&long long v33 = v14;
          }
          if (!v14) {
            goto LABEL_47;
          }
        }
        else
        {
          unint64_t v14 = degas::Database::edgeCount(a1[3]);
        }
        if (v13 && ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(v13) & 1) != 0)
        {
          unint64_t v14 = 0;
        }
        else
        {
          unint64_t v22 = degas::Bitmap::count(this);
          unint64_t v23 = v14 / v22;
          if ((v22 < 0x33 || v23 >= 0xA) && (v14 > 0xE || v23 >= 3))
          {
            if ((v14 >= 0x249F0 || v13 == 0) && v14 >= 0x15E) {
              int v24 = 2;
            }
            else {
              int v24 = 7;
            }
          }
          else
          {
            int v24 = 4;
          }
          unint64_t v14 = degas::NeighborQuery::transitiveClosureNeighborsWithPlan((degas::NeighborQuery *)a1, v24, &v33, v28, v27, (uint64_t)this, a3, a4);
        }
LABEL_47:
        uint64_t v36 = (void **)v34;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v36);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        goto LABEL_55;
      }
      long long v33 = 0u;
      memset(v34, 0, 25);
      uint64_t v21 = (degas::Predicate *)degas::Predicate::nullPtr(v9);
      degas::Predicate::nullPtr(v21);
      unint64_t v14 = degas::NeighborQuery::transitiveClosureNeighborsWithPlan((degas::NeighborQuery *)a1, 1, &v33, degas::Predicate::nullPtr(void)::nullPtr, degas::Predicate::nullPtr(void)::nullPtr, (uint64_t)this, a3, a4);
      Bitmap v29 = (void **)v34;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v29);
    }
    else
    {
      unint64_t v14 = 0;
    }
LABEL_55:
    *(void *)&long long v33 = v35;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
    return v14;
  }
  return degas::NeighborQuery::transitiveClosureNeighbors_instrumented((uint64_t)a1, this, a3, a4);
}

void sub_1D172A268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  *(void *)(v27 - 88) = &a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 88));
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::pair<std::shared_ptr<degas::Predicate>,std::shared_ptr<degas::Predicate>>::~pair((uint64_t)&a13);
  a17 = (void **)&a25;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t degas::NeighborQuery::transitiveClosureNeighbors_instrumented(uint64_t a1, degas::Bitmap *this, unsigned int a3, void *a4)
{
  v52[2] = 0u;
  memset(v53, 0, 25);
  unint64_t v7 = (degas::Predicate *)degas::Bitmap::count(this);
  if (!v7)
  {
    uint64_t v12 = 0;
    goto LABEL_69;
  }
  if (!*(unsigned char *)(a1 + 16))
  {
    long long v51 = 0u;
    memset(v52, 0, 25);
    int32x4_t v20 = (degas::Predicate *)degas::Predicate::nullPtr(v7);
    degas::Predicate::nullPtr(v20);
    uint64_t v12 = degas::NeighborQuery::transitiveClosureNeighborsWithPlan((degas::NeighborQuery *)a1, 1, &v51, degas::Predicate::nullPtr(void)::nullPtr, degas::Predicate::nullPtr(void)::nullPtr, (uint64_t)this, a3, a4);
    *(void *)&long long v43 = v52;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
    goto LABEL_69;
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a1 + 32))(&v47);
  uint64_t v8 = v47;
  unint64_t v9 = v48;
  v46[0] = v47;
  v46[1] = v48;
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = v49;
  uint64_t v10 = v50;
  v45[0] = v49;
  v45[1] = v50;
  if (v50) {
    atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v37 = v10;
  unsigned __int8 v38 = v9;
  long long v51 = 0u;
  memset(v52, 0, 25);
  if (!v8)
  {
    unint64_t v13 = degas::Database::edgeCount(*(degas::Database **)(a1 + 24));
    goto LABEL_25;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v8 + 16))(v8, &v51);
  if (!v12)
  {
    unint64_t v13 = v51;
    if ((void)v51 == 0xFFFFFFFFLL)
    {
      uint64_t v15 = (uint64_t *)*((void *)&v52[0] + 1);
      unint64_t v14 = *(uint64_t **)&v52[0];
      if (*(void *)&v52[0] == *((void *)&v52[0] + 1))
      {
        unint64_t v13 = 0;
      }
      else
      {
        unint64_t v13 = 0;
        do
        {
          uint64_t v16 = *v14;
          unsigned int v17 = *(_DWORD *)(*v14 + 4);
          if (v17 == -1)
          {
            uint64_t v18 = 0;
            int32x4_t v19 = 0uLL;
            do
            {
              do
              {
                int32x4_t v19 = (int32x4_t)vpadalq_u16((uint32x4_t)v19, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v16 + 4 * v18 + 16))));
                v18 += 4;
              }
              while (v18 != 32);
              uint64_t v18 = 0;
              unsigned int v17 = vaddvq_s32(v19);
              int32x4_t v19 = 0uLL;
            }
            while (v17 == -1);
            *(_DWORD *)(v16 + 4) = v17;
          }
          v13 += v17;
          v14 += 2;
        }
        while (v14 != v15);
      }
      *(void *)&long long v51 = v13;
    }
    if (!v13)
    {
LABEL_27:
      uint64_t v12 = 0;
      goto LABEL_61;
    }
LABEL_25:
    if (!v11 || ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 56))(v11) & 1) == 0)
    {
      unint64_t v21 = degas::Bitmap::count(this);
      unint64_t v22 = v13 / v21;
      if ((v21 < 0x33 || v22 >= 0xA) && (v13 > 0xE || v22 >= 3))
      {
        if ((v13 >= 0x249F0 || v11 == 0) && v13 >= 0x15E) {
          int v23 = 2;
        }
        else {
          int v23 = 7;
        }
      }
      else
      {
        int v23 = 4;
      }
      int v39 = v23;
      int v26 = 0;
      long long v43 = 0u;
      memset(v44, 0, 25);
      int v27 = degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset;
      char v28 = 1;
      double v29 = 0.0;
      double v30 = 1.0e10;
      while (1)
      {
        int v31 = degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::planList[v27 % 7];
        double Current = CFAbsoluteTimeGetCurrent();
        uint64_t v12 = degas::NeighborQuery::transitiveClosureNeighborsWithPlan((degas::NeighborQuery *)a1, v31, &v51, v46, v45, (uint64_t)this, a3, a4);
        if (v12) {
          break;
        }
        double v33 = CFAbsoluteTimeGetCurrent();
        if (v28) {
          degas::Bitmap::operator=(&v43, a4);
        }
        char v28 = 0;
        if (v33 - Current < v30)
        {
          double v30 = v33 - Current;
          int v26 = v31;
        }
        if (v31 == v39) {
          double v29 = v33 - Current;
        }
        if (v27++ >= degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset
                    + 6)
        {
          degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset = (degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::offset + 1) % 7u;
          if (v26 == v39)
          {
            uint64_t v12 = 0;
            ++degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::scoreWins;
          }
          else
          {
            ++degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::scoreLosses;
            if (v29 - v30 >= 0.0)
            {
              *(double *)&degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::totalTimeLost = v29 - v30 + *(double *)&degas::NeighborQuery::transitiveClosureNeighbors_instrumented(degas::Bitmap const&,degas::EdgeDirection,degas::Bitmap&)::totalTimeLost;
              uint64_t v35 = *(void *)a1;
              if (*(void *)a1)
              {
                *(_OWORD *)__p = 0u;
                memset(v42, 0, 25);
                (*(void (**)(uint64_t, void **))(*(void *)v35 + 16))(v35, __p);
                degas::Bitmap::count((degas::Bitmap *)__p);
                id v54 = (void **)v42;
                std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v54);
              }
              else
              {
                degas::Database::edgeCount(*(degas::Database **)(a1 + 24));
              }
              std::string::basic_string[abi:ne180100]<0>(__p, "Transitive closure query");
              degas::Bitmap::count(this);
              degas::Bitmap::count((degas::Bitmap *)&v51);
              degas::Database::nodeCount(*(degas::Database **)(a1 + 24));
              degas::Database::edgeCount(*(degas::Database **)(a1 + 24));
              degas::NeighborQuery::reportTimingPlanFailure(a1, (uint64_t)__p, v39, v26);
              if ((v42[7] & 0x80000000) != 0) {
                operator delete(__p[0]);
              }
            }
            uint64_t v12 = 0;
          }
          break;
        }
      }
      __p[0] = v44;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      goto LABEL_61;
    }
    goto LABEL_27;
  }
LABEL_61:
  *(void *)&long long v43 = v52;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
LABEL_69:
  *(void *)&long long v51 = v53;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  return v12;
}

void sub_1D172A874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  __p = &a26;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a40;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::pair<std::shared_ptr<degas::Predicate>,std::shared_ptr<degas::Predicate>>::~pair((uint64_t)&a34);
  a38 = v40 - 176;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  _Unwind_Resume(a1);
}

id KGLoggingConnection()
{
  if (KGLoggingConnection_onceToken[0] != -1) {
    dispatch_once(KGLoggingConnection_onceToken, &__block_literal_global_543);
  }
  int v0 = (void *)KGLoggingConnection_log;
  return v0;
}

uint64_t __KGLoggingConnection_block_invoke()
{
  KGLoggingConnection_log = (uint64_t)os_log_create("com.apple.photos.graph", "KnowledgeGraph");
  return MEMORY[0x1F41817F8]();
}

id KGFullMethodName(void *a1, const char *a2)
{
  id v3 = a1;
  uint64_t v4 = objc_opt_class();

  unsigned int v5 = NSString;
  uint64_t v6 = NSStringFromSelector(a2);
  uint64_t v7 = 45;
  if ((id)v4 == v3) {
    uint64_t v7 = 43;
  }
  uint64_t v8 = [v5 stringWithFormat:@"%c[%@ %@]", v7, v4, v6];

  return v8;
}

id KGAbstractMethodException(void *a1, const char *a2)
{
  id v3 = a1;
  uint64_t v4 = KGFullMethodName(v3, a2);
  unsigned int v5 = (void *)MEMORY[0x1E4F1CA00];
  uint64_t v6 = *MEMORY[0x1E4F1C3C8];
  uint64_t v7 = [NSString stringWithFormat:@"%@: must override selector sent to %p", v4, v3];

  uint64_t v8 = [v5 exceptionWithName:v6 reason:v7 userInfo:0];

  return v8;
}

id KGMethodNotImplentedException(void *a1, const char *a2)
{
  id v3 = a1;
  uint64_t v4 = KGFullMethodName(v3, a2);
  unsigned int v5 = (void *)MEMORY[0x1E4F1CA00];
  uint64_t v6 = *MEMORY[0x1E4F1C3C8];
  uint64_t v7 = [NSString stringWithFormat:@"%@:  method not implemented sent to %p", v4, v3];

  uint64_t v8 = [v5 exceptionWithName:v6 reason:v7 userInfo:0];

  return v8;
}

void CheckInTransaction(int a1, uint64_t a2)
{
  if (a2 <= 0 && a1)
  {
    uint64_t v6 = v2;
    uint64_t v7 = v3;
    uint64_t v4 = KGLoggingConnection();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unsigned int v5 = 0;
      _os_log_fault_impl(&dword_1D1654000, v4, OS_LOG_TYPE_FAULT, "accessing database outside of a transaction", v5, 2u);
    }
  }
}

void sub_1D172ECB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__685(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__686(uint64_t a1)
{
}

void sub_1D172F310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D172F6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

std::string *degas::BitmapTable::BitmapTable(std::string *this, long long *a2, std::string::size_type a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = a3;
  return this;
}

{
  long long v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = a3;
  return this;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  long long v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    long long v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void degas::BitmapTable::~BitmapTable(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t degas::BitmapTable::createTable(degas::BitmapTable *this)
{
  uint64_t v2 = (sqlite3 *)*((void *)this + 3);
  uint64_t v3 = (const char *)this;
  if (*((char *)this + 23) < 0) {
    uint64_t v3 = *(const char **)this;
  }
  int module = sqlite3_create_module(v2, v3, &degas::module, this);
  if (module == 101) {
    int v5 = 2;
  }
  else {
    int v5 = 3;
  }
  if (module == 100) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = v5;
  }
  if (module == 17) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = 3;
  }
  if (!module) {
    unsigned int v7 = 0;
  }
  if (module <= 99) {
    return v7;
  }
  else {
    return v6;
  }
}

uint64_t degas::bitmapTableRowId(degas *this, sqlite3_vtab_cursor *a2, uint64_t *a3)
{
  a2->pVtab = *(sqlite3_vtab **)((char *)this + 40);
  return 0;
}

uint64_t degas::bitmapTableColumnValue(void **this, sqlite3_vtab_cursor *a2, sqlite3_context *a3)
{
  if (a3 == 1)
  {
    sqlite3_result_pointer((sqlite3_context *)a2, this[4], (const char *)degas::kBitmapPointerTypeName, 0);
    return 0;
  }
  if (!a3)
  {
    uint64_t v3 = (void **)this[4];
    sqlite3_int64 v4 = (sqlite3_int64)this[2];
    if (this[1] != v3 || v4 != -1) {
      goto LABEL_10;
    }
    if (this[3] != v3[3])
    {
      sqlite3_int64 v4 = -1;
LABEL_10:
      sqlite3_result_int64((sqlite3_context *)a2, v4);
    }
  }
  return 0;
}

BOOL degas::bitmapTableEof(degas *this, sqlite3_vtab_cursor *a2)
{
  uint64_t v2 = *((void *)this + 4);
  return *((void *)this + 1) == v2 && *((void *)this + 2) == -1 && *((void *)this + 3) == *(void *)(v2 + 24);
}

uint64_t degas::bitmapTableNext(degas *this, sqlite3_vtab_cursor *a2)
{
  return 0;
}

uint64_t degas::bitmapTableFilter(degas *this, sqlite3_vtab_cursor *a2, int a3, const char *a4, sqlite3_value **a5, sqlite3_value **a6)
{
  if ((int)a4 >= 1)
  {
    unsigned int v7 = sqlite3_value_pointer(*a5, (const char *)degas::kBitmapPointerTypeName);
    *((void *)this + 4) = v7;
    degas::Bitmap::begin(v7, &v9);
    *((void *)this + degas::Bitmap::iterator::operator++((unint64_t *)this + 1) = v9;
    *((_OWORD *)this + degas::Bitmap::iterator::operator++((unint64_t *)this + 1) = v10;
  }
  *((void *)this + ++*((void *)this + 5) = 0;
  return 0;
}

uint64_t degas::bitmapTableCloseCursor(degas *this, sqlite3_vtab_cursor *a2)
{
  return 0;
}

uint64_t degas::bitmapTableOpenCursor(degas *this, sqlite3_vtab *a2, sqlite3_vtab_cursor **a3)
{
  sqlite3_int64 v4 = (const sqlite3_module *)sqlite3_malloc(56);
  if (!v4) {
    return 1;
  }
  int v5 = v4;
  uint64_t result = 0;
  v5->xDisconnect = 0;
  v5->xDestroy = 0;
  a2->pModule = v5;
  return result;
}

uint64_t degas::bitmapTableDestroy(degas *this, sqlite3_vtab *a2)
{
  return 0;
}

uint64_t degas::bitmapTableBestIndex(degas *this, sqlite3_vtab *a2, sqlite3_index_info *a3)
{
  uint64_t pModule_low = LODWORD(a2->pModule);
  if ((int)pModule_low >= 1)
  {
    uint64_t v4 = 0;
    int v5 = *(int **)&a2->nRef;
    uint64_t v6 = 8 * pModule_low;
    while (1)
    {
      int v8 = *v5;
      v5 += 3;
      int v7 = v8;
      if (v8 == 1) {
        break;
      }
      if (!v7)
      {
        char v9 = 0;
LABEL_7:
        uint64_t v10 = *(void *)&a2[1].nRef + v4;
        *(_DWORD *)uint64_t v10 = v7;
        *(unsigned char *)(v10 + 4) = v9;
      }
      v4 += 8;
      if (v6 == v4) {
        goto LABEL_9;
      }
    }
    char v9 = 1;
    goto LABEL_7;
  }
LABEL_9:
  a2[2].zErrMsg = (char *)0x3FB999999999999ALL;
  return 0;
}

uint64_t degas::bitmapTableConnect(degas *this, sqlite3 *a2, void *a3, int a4, const char **a5, sqlite3_vtab **a6, char **a7)
{
  char v9 = (const char *)sqlite3_malloc64(0x18uLL);
  uint64_t v10 = v9;
  if (v9)
  {
    *(void *)char v9 = 0;
    *((void *)v9 + degas::Bitmap::iterator::operator++((unint64_t *)this + 1) = 0;
    *((void *)v9 + 2) = 0;
    uint64_t result = sqlite3_declare_vtab(this, "create table x (value integer primary key, bitmapPtr hidden)");
  }
  else
  {
    uint64_t result = 7;
  }
  *a5 = v10;
  return result;
}

void sub_1D1730BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1D1731220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__806(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__807(uint64_t a1)
{
}

void sub_1D1732BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__862(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__863(uint64_t a1)
{
}

id kg_errorWithCode(uint64_t a1)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a1 - 5000) > 0xC) {
    uint64_t v2 = @"not an error";
  }
  else {
    uint64_t v2 = off_1E68DACF0[a1 - 5000];
  }
  uint64_t v6 = *MEMORY[0x1E4F28568];
  v7[0] = v2;
  uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:&v6 count:1];
  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"com.apple.photos.kgerror" code:a1 userInfo:v3];

  return v4;
}

uint64_t elementMatchesDefinition(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  int v5 = [v3 domain];
  if (v5 == [v4 domain])
  {
    uint64_t v6 = [v3 label];
    if ([v6 isEqualToString:@"*"])
    {
      uint64_t v7 = 1;
    }
    else
    {
      int v8 = [v3 label];
      char v9 = [v4 label];
      uint64_t v7 = [v8 isEqualToString:v9];
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

id PropertiesVisualStringForKeys(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  int32x4_t v19 = [MEMORY[0x1E4F28E78] string];
  [v19 appendString:@"{"];
  uint64_t v18 = v3;
  int v5 = [v3 allObjects];
  uint64_t v6 = v5;
  if (!v5)
  {
    uint64_t v6 = [v4 allKeys];
  }
  uint64_t v7 = [v6 sortedArrayUsingSelector:sel_localizedCaseInsensitiveCompare_];
  if (!v5) {

  }
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v8 = v7;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v21 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void *)(*((void *)&v20 + 1) + 8 * i);
        unint64_t v14 = [v4 objectForKeyedSubscript:v13];
        if (v14)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v15 = v14;
          }
          else
          {
            if (objc_opt_respondsToSelector()) {
              [v14 stringValue];
            }
            else {
            id v15 = [v14 description];
            }
          }
          uint64_t v16 = v15;
          if ([v15 length]) {
            [v19 appendFormat:@"%@:'%@'; ", v13, v16];
          }
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v10);
  }

  if ((unint64_t)[v19 length] >= 2) {
    objc_msgSend(v19, "deleteCharactersInRange:", objc_msgSend(v19, "length") - 2, 2);
  }
  [v19 appendString:@"}"];

  return v19;
}

KGMutableElementIdentifierSet *KGElementIdentifierSetWithSet(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_alloc_init(KGMutableElementIdentifierSet);
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        -[KGMutableElementIdentifierSet addIdentifier:](v2, "addIdentifier:", objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * i), "identifier", (void)v9));
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }

  return v2;
}

KGMutableElementIdentifierSet *KGElementIdentifierSetWithArray(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_alloc_init(KGMutableElementIdentifierSet);
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        -[KGMutableElementIdentifierSet addIdentifier:](v2, "addIdentifier:", objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * i), "identifier", (void)v9));
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }

  return v2;
}

uint64_t degas::SortAttributeValueTable::deleteEntry(degas::SortAttributeValueTable *this)
{
  return 2;
}

uint64_t degas::SortAttributeValueTable::createTable(degas::SortAttributeValueTable *this)
{
  return 0;
}

void degas::SortAttributeValueTable::~SortAttributeValueTable(degas::SortAttributeValueTable *this)
{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1D25F9A90);
}

{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void *degas::SortAttributeValueTable::SortAttributeValueTable(void *a1, uint64_t a2, long long *a3, char a4, uint64_t a5)
{
  uint64_t result = degas::Table::Table(a1, a3, a2, a5);
  *uint64_t result = &unk_1F2800F20;
  *((unsigned char *)result + 48) = a4;
  return result;
}

{
  void *result;

  uint64_t result = degas::Table::Table(a1, a3, a2, a5);
  *uint64_t result = &unk_1F2800F20;
  *((unsigned char *)result + 48) = a4;
  return result;
}

uint64_t *degas::SortAttributeValueTable::readByIntAttrStatement(degas::SortAttributeValueTable *this, int a2, int a3)
{
  if (a3) {
    int v3 = 0;
  }
  else {
    int v3 = 16;
  }
  int v4 = v3 | a2 ^ 1 | (*((unsigned __int8 *)this + 48) << 16);
  uint64_t v5 = *((void *)this + 5);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  void v7[2] = ___ZNK5degas23SortAttributeValueTable22readByIntAttrStatementEbb_block_invoke;
  uint64_t v7[3] = &__block_descriptor_tmp;
  v7[4] = this;
  char v8 = a2;
  char v9 = a3;
  return degas::StatementCache::getStatement(v5, v4 | 0x900u, (uint64_t)v7);
}

void ___ZNK5degas23SortAttributeValueTable22readByIntAttrStatementEbb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"select elementId, intValue from ", 32);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" where attributeId = ?1 order by intValue", 41);
  if (!*(unsigned char *)(a1 + 40)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" desc", 5);
  }
  if (*(unsigned char *)(a1 + 41)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" limit ?2", 9);
  }
  operator new();
}

void sub_1D1734CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1D1734D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<degas::Statement>::reset[abi:ne180100]((degas::Statement **)va);
  _Unwind_Resume(a1);
}

degas::Statement *std::unique_ptr<degas::Statement>::reset[abi:ne180100](degas::Statement **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    degas::Statement::~Statement(result);
    JUMPOUT(0x1D25F9A90);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<degas::Statement *,std::shared_ptr<degas::Statement>::__shared_ptr_default_delete<degas::Statement,degas::Statement>,std::allocator<degas::Statement>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CF654)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2)) {
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

degas::Statement *std::__shared_ptr_pointer<degas::Statement *,std::shared_ptr<degas::Statement>::__shared_ptr_default_delete<degas::Statement,degas::Statement>,std::allocator<degas::Statement>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(degas::Statement **)(a1 + 24);
  if (result)
  {
    degas::Statement::~Statement(result);
    JUMPOUT(0x1D25F9A90);
  }
  return result;
}

void std::__shared_ptr_pointer<degas::Statement *,std::shared_ptr<degas::Statement>::__shared_ptr_default_delete<degas::Statement,degas::Statement>,std::allocator<degas::Statement>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

uint64_t *degas::SortAttributeValueTable::readByRealAttrStatement(degas::SortAttributeValueTable *this, int a2, int a3)
{
  if (a3) {
    int v3 = 0;
  }
  else {
    int v3 = 16;
  }
  int v4 = v3 | a2 ^ 1 | (*((unsigned __int8 *)this + 48) << 16);
  uint64_t v5 = *((void *)this + 5);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  void v7[2] = ___ZNK5degas23SortAttributeValueTable23readByRealAttrStatementEbb_block_invoke;
  uint64_t v7[3] = &__block_descriptor_tmp_7;
  v7[4] = this;
  char v8 = a2;
  char v9 = a3;
  return degas::StatementCache::getStatement(v5, v4 | 0xA00u, (uint64_t)v7);
}

void ___ZNK5degas23SortAttributeValueTable23readByRealAttrStatementEbb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"select elementId, realValue from ", 33);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" where attributeId = ?1 order by realValue", 42);
  if (!*(unsigned char *)(a1 + 40)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" desc", 5);
  }
  if (*(unsigned char *)(a1 + 41)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" limit ?2", 9);
  }
  operator new();
}

void sub_1D17351C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::SortAttributeValueTable::readByStringAttrStatement(degas::SortAttributeValueTable *this, int a2, int a3)
{
  if (a3) {
    int v3 = 0;
  }
  else {
    int v3 = 16;
  }
  int v4 = v3 | a2 ^ 1 | (*((unsigned __int8 *)this + 48) << 16);
  uint64_t v5 = *((void *)this + 5);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  void v7[2] = ___ZNK5degas23SortAttributeValueTable25readByStringAttrStatementEbb_block_invoke;
  uint64_t v7[3] = &__block_descriptor_tmp_10;
  v7[4] = this;
  char v8 = a2;
  char v9 = a3;
  return degas::StatementCache::getStatement(v5, v4 | 0xB00u, (uint64_t)v7);
}

void ___ZNK5degas23SortAttributeValueTable25readByStringAttrStatementEbb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"select elementId, stringValue from ", 35);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" where attributeId = ?1 order by stringValue", 44);
  if (!*(unsigned char *)(a1 + 40)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" desc", 5);
  }
  if (*(unsigned char *)(a1 + 41)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" limit ?2", 9);
  }
  operator new();
}

void sub_1D17354D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::SortAttributeValueTable::readByIntAttrIdentifiersStatement(degas::SortAttributeValueTable *this, int a2, int a3)
{
  if (a2) {
    int v3 = 32;
  }
  else {
    int v3 = 33;
  }
  if (a3) {
    int v4 = 0;
  }
  else {
    int v4 = 16;
  }
  int v5 = v4 | v3 | (*((unsigned __int8 *)this + 48) << 16);
  uint64_t v6 = *((void *)this + 5);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  void v8[2] = ___ZNK5degas23SortAttributeValueTable33readByIntAttrIdentifiersStatementEbb_block_invoke;
  void v8[3] = &__block_descriptor_tmp_14;
  v8[4] = this;
  char v9 = a2;
  char v10 = a3;
  return degas::StatementCache::getStatement(v6, v5 | 0x900u, (uint64_t)v8);
}

void ___ZNK5degas23SortAttributeValueTable33readByIntAttrIdentifiersStatementEbb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"select v.elementId, v.intValue from ", 36);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" v, identifierBitmap(?1) b where v.elementId = b.value and v.attributeId=?2 order by v.intValue", 95);
  if (!*(unsigned char *)(a1 + 40)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" desc", 5);
  }
  if (*(unsigned char *)(a1 + 41)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" limit ?3", 9);
  }
  operator new();
}

void sub_1D17357E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::SortAttributeValueTable::readByRealAttrIdentifiersStatement(degas::SortAttributeValueTable *this, int a2, int a3)
{
  if (a2) {
    int v3 = 32;
  }
  else {
    int v3 = 33;
  }
  if (a3) {
    int v4 = 0;
  }
  else {
    int v4 = 16;
  }
  int v5 = v4 | v3 | (*((unsigned __int8 *)this + 48) << 16);
  uint64_t v6 = *((void *)this + 5);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  void v8[2] = ___ZNK5degas23SortAttributeValueTable34readByRealAttrIdentifiersStatementEbb_block_invoke;
  void v8[3] = &__block_descriptor_tmp_17;
  v8[4] = this;
  char v9 = a2;
  char v10 = a3;
  return degas::StatementCache::getStatement(v6, v5 | 0xA00u, (uint64_t)v8);
}

void ___ZNK5degas23SortAttributeValueTable34readByRealAttrIdentifiersStatementEbb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"select v.elementId, v.realValue from ", 37);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" v, identifierBitmap(?1) b where v.elementId = b.value and v.attributeId=?2 order by v.realValue", 96);
  if (!*(unsigned char *)(a1 + 40)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" desc", 5);
  }
  if (*(unsigned char *)(a1 + 41)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" limit ?3", 9);
  }
  operator new();
}

void sub_1D1735AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::SortAttributeValueTable::readByStringAttrIdentifiersStatement(degas::SortAttributeValueTable *this, int a2, int a3)
{
  if (a2) {
    int v3 = 32;
  }
  else {
    int v3 = 33;
  }
  if (a3) {
    int v4 = 0;
  }
  else {
    int v4 = 16;
  }
  int v5 = v4 | v3 | (*((unsigned __int8 *)this + 48) << 16);
  uint64_t v6 = *((void *)this + 5);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  void v8[2] = ___ZNK5degas23SortAttributeValueTable36readByStringAttrIdentifiersStatementEbb_block_invoke;
  void v8[3] = &__block_descriptor_tmp_20;
  v8[4] = this;
  char v9 = a2;
  char v10 = a3;
  return degas::StatementCache::getStatement(v6, v5 | 0xB00u, (uint64_t)v8);
}

void ___ZNK5degas23SortAttributeValueTable36readByStringAttrIdentifiersStatementEbb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"select v.elementId, v.stringValue from ", 39);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" v, identifierBitmap(?1) b where v.elementId = b.value and v.attributeId=?2 order by v.stringValue", 98);
  if (!*(unsigned char *)(a1 + 40)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" desc", 5);
  }
  if (*(unsigned char *)(a1 + 41)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" limit ?3", 9);
  }
  operator new();
}

void sub_1D1735E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::SortAttributeValueTable::prepareStatementToReadByIntAttr(degas::SortAttributeValueTable *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4)
{
  uint64_t v6 = degas::SortAttributeValueTable::readByIntAttrStatement(this, a3, a4 >= 0);
  degas::Statement::bindInteger((sqlite3_stmt **)*v6, 1, a2);
  if ((a4 & 0x8000000000000000) == 0) {
    degas::Statement::bindInteger((sqlite3_stmt **)*v6, 2, a4);
  }
  return v6;
}

uint64_t *degas::SortAttributeValueTable::prepareStatementToReadByRealAttr(degas::SortAttributeValueTable *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4)
{
  uint64_t v6 = degas::SortAttributeValueTable::readByRealAttrStatement(this, a3, a4 >= 0);
  degas::Statement::bindInteger((sqlite3_stmt **)*v6, 1, a2);
  if ((a4 & 0x8000000000000000) == 0) {
    degas::Statement::bindInteger((sqlite3_stmt **)*v6, 2, a4);
  }
  return v6;
}

uint64_t *degas::SortAttributeValueTable::prepareStatementToReadByStringAttr(degas::SortAttributeValueTable *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4)
{
  uint64_t v6 = degas::SortAttributeValueTable::readByStringAttrStatement(this, a3, a4 >= 0);
  degas::Statement::bindInteger((sqlite3_stmt **)*v6, 1, a2);
  if ((a4 & 0x8000000000000000) == 0) {
    degas::Statement::bindInteger((sqlite3_stmt **)*v6, 2, a4);
  }
  return v6;
}

uint64_t *degas::SortAttributeValueTable::prepareStatementToReadByIntAttrIdentifiers(degas::SortAttributeValueTable *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4, Bitmap *a5)
{
  char v8 = degas::SortAttributeValueTable::readByIntAttrIdentifiersStatement(this, a3, a4 >= 0);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v8, 1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 2, a2);
  if ((a4 & 0x8000000000000000) == 0) {
    degas::Statement::bindInteger((sqlite3_stmt **)*v8, 3, a4);
  }
  return v8;
}

uint64_t *degas::SortAttributeValueTable::prepareStatementToReadByRealAttrIdentifiers(degas::SortAttributeValueTable *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4, Bitmap *a5)
{
  char v8 = degas::SortAttributeValueTable::readByRealAttrIdentifiersStatement(this, a3, a4 >= 0);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v8, 1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 2, a2);
  if ((a4 & 0x8000000000000000) == 0) {
    degas::Statement::bindInteger((sqlite3_stmt **)*v8, 3, a4);
  }
  return v8;
}

uint64_t *degas::SortAttributeValueTable::prepareStatementToReadByStringAttrIdentifiers(degas::SortAttributeValueTable *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4, Bitmap *a5)
{
  char v8 = degas::SortAttributeValueTable::readByStringAttrIdentifiersStatement(this, a3, a4 >= 0);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v8, 1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 2, a2);
  if ((a4 & 0x8000000000000000) == 0) {
    degas::Statement::bindInteger((sqlite3_stmt **)*v8, 3, a4);
  }
  return v8;
}

void *degas::SortAttributeValueCursor::SortAttributeValueCursor(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

void degas::SortAttributeValueCursor::setForIntAttr(degas::SortAttributeValueCursor *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4, const degas::SortAttributeValueTable *a5)
{
  uint64_t v6 = degas::SortAttributeValueTable::prepareStatementToReadByIntAttr(a5, a2, a3, a4);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  char v9 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v8;
  *((void *)this + degas::Bitmap::iterator::operator++((unint64_t *)this + 1) = v7;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void degas::SortAttributeValueCursor::setForRealAttr(degas::SortAttributeValueCursor *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4, const degas::SortAttributeValueTable *a5)
{
  uint64_t v6 = degas::SortAttributeValueTable::prepareStatementToReadByRealAttr(a5, a2, a3, a4);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  char v9 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v8;
  *((void *)this + degas::Bitmap::iterator::operator++((unint64_t *)this + 1) = v7;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void degas::SortAttributeValueCursor::setForStringAttr(degas::SortAttributeValueCursor *this, sqlite3_int64 a2, int a3, sqlite3_int64 a4, const degas::SortAttributeValueTable *a5)
{
  uint64_t v6 = degas::SortAttributeValueTable::prepareStatementToReadByStringAttr(a5, a2, a3, a4);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  char v9 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v8;
  *((void *)this + degas::Bitmap::iterator::operator++((unint64_t *)this + 1) = v7;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void degas::SortAttributeValueCursor::setForIntAttrIdentifiers(degas::SortAttributeValueCursor *this, sqlite3_int64 a2, Bitmap *a3, int a4, sqlite3_int64 a5, const degas::SortAttributeValueTable *a6)
{
  uint64_t v7 = degas::SortAttributeValueTable::prepareStatementToReadByIntAttrIdentifiers(a6, a2, a4, a5, a3);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  char v10 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v9;
  *((void *)this + degas::Bitmap::iterator::operator++((unint64_t *)this + 1) = v8;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void degas::SortAttributeValueCursor::setForRealAttrIdentifiers(degas::SortAttributeValueCursor *this, sqlite3_int64 a2, Bitmap *a3, int a4, sqlite3_int64 a5, const degas::SortAttributeValueTable *a6)
{
  uint64_t v7 = degas::SortAttributeValueTable::prepareStatementToReadByRealAttrIdentifiers(a6, a2, a4, a5, a3);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  char v10 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v9;
  *((void *)this + degas::Bitmap::iterator::operator++((unint64_t *)this + 1) = v8;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void degas::SortAttributeValueCursor::setForStringAttrIdentifiers(degas::SortAttributeValueCursor *this, sqlite3_int64 a2, Bitmap *a3, int a4, sqlite3_int64 a5, const degas::SortAttributeValueTable *a6)
{
  uint64_t v7 = degas::SortAttributeValueTable::prepareStatementToReadByStringAttrIdentifiers(a6, a2, a4, a5, a3);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  char v10 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v9;
  *((void *)this + degas::Bitmap::iterator::operator++((unint64_t *)this + 1) = v8;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

sqlite3_int64 degas::SortAttributeValueCursor::elementId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 0);
}

sqlite3_int64 degas::SortAttributeValueCursor::integerValue(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 1);
}

double degas::SortAttributeValueCursor::realValue(sqlite3_stmt ***this)
{
  return sqlite3_column_double(**this, 1);
}

void degas::SortAttributeValueCursor::stringValue(sqlite3_stmt ***a1, uint64_t a2)
{
}

void *degas::BinaryOperatorDescription@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E68DAE18[a1]);
}

uint64_t degas::TernaryOperatorDescription(int a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
  switch(a1)
  {
    case 0:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"?", 1);
      break;
    case 1:
      char v20 = 91;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v20, 1);
      int v4 = *(char *)(a2 + 23);
      if (v4 >= 0) {
        uint64_t v5 = a2;
      }
      else {
        uint64_t v5 = *(void *)a2;
      }
      if (v4 >= 0) {
        uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v6 = *(void *)(a2 + 8);
      }
      goto LABEL_39;
    case 2:
      char v20 = 40;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v20, 1);
      int v7 = *(char *)(a2 + 23);
      if (v7 >= 0) {
        uint64_t v5 = a2;
      }
      else {
        uint64_t v5 = *(void *)a2;
      }
      if (v7 >= 0) {
        uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v6 = *(void *)(a2 + 8);
      }
      goto LABEL_39;
    case 3:
      char v20 = 91;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v20, 1);
      int v8 = *(char *)(a2 + 23);
      if (v8 >= 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = *(void *)a2;
      }
      if (v8 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v10 = *(void *)(a2 + 8);
      }
      goto LABEL_52;
    case 4:
      char v20 = 40;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v20, 1);
      int v11 = *(char *)(a2 + 23);
      if (v11 >= 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = *(void *)a2;
      }
      if (v11 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v10 = *(void *)(a2 + 8);
      }
      goto LABEL_52;
    case 5:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"![", 2);
      int v12 = *(char *)(a2 + 23);
      if (v12 >= 0) {
        uint64_t v5 = a2;
      }
      else {
        uint64_t v5 = *(void *)a2;
      }
      if (v12 >= 0) {
        uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v6 = *(void *)(a2 + 8);
      }
      goto LABEL_39;
    case 6:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"!(", 2);
      int v13 = *(char *)(a2 + 23);
      if (v13 >= 0) {
        uint64_t v5 = a2;
      }
      else {
        uint64_t v5 = *(void *)a2;
      }
      if (v13 >= 0) {
        uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v6 = *(void *)(a2 + 8);
      }
LABEL_39:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v5, v6);
      char v20 = 93;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v20, 1);
      break;
    case 7:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"![", 2);
      int v14 = *(char *)(a2 + 23);
      if (v14 >= 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = *(void *)a2;
      }
      if (v14 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v10 = *(void *)(a2 + 8);
      }
      goto LABEL_52;
    case 8:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"!(", 2);
      int v15 = *(char *)(a2 + 23);
      if (v15 >= 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = *(void *)a2;
      }
      if (v15 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v10 = *(void *)(a2 + 8);
      }
LABEL_52:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v9, v10);
      char v20 = 41;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v20, 1);
      break;
    default:
      break;
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v17[1] = MEMORY[0x1E4FBA470] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D25F9A50](&v19);
}

void sub_1D1736818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1D17368F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D1736960(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D17369D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D1736A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1D1736AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

std::string *degas::ArrayTable::ArrayTable(std::string *this, long long *a2, std::string::size_type a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = a3;
  return this;
}

{
  long long v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = a3;
  return this;
}

void degas::ArrayTable::~ArrayTable(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t degas::ArrayTable::createTable(degas::ArrayTable *this)
{
  uint64_t v2 = (sqlite3 *)*((void *)this + 3);
  int v3 = (const char *)this;
  if (*((char *)this + 23) < 0) {
    int v3 = *(const char **)this;
  }
  int module = sqlite3_create_module(v2, v3, &degas::arrayModule, this);
  if (module == 101) {
    int v5 = 2;
  }
  else {
    int v5 = 3;
  }
  if (module == 100) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = v5;
  }
  if (module == 17) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = 3;
  }
  if (!module) {
    unsigned int v7 = 0;
  }
  if (module <= 99) {
    return v7;
  }
  else {
    return v6;
  }
}

uint64_t degas::arrayRowid(degas *this, sqlite3_vtab_cursor *a2, uint64_t *a3)
{
  a2->pVtab = *(sqlite3_vtab **)((char *)this + 8);
  return 0;
}

uint64_t degas::arrayColumn(degas *this, sqlite3_vtab_cursor *a2, sqlite3_context *a3)
{
  if (a3 != 1)
  {
    if (a3 == 3)
    {
      int v4 = degas::azType[*((unsigned __int8 *)this + 32)];
      int v5 = (sqlite3_context *)a2;
      unsigned int v6 = v4;
      uint64_t v7 = 0;
LABEL_7:
      sqlite3_result_text(v5, v6, -1, (void (__cdecl *)(void *))v7);
    }
    else if (a3 == 2)
    {
      sqlite3_int64 v3 = *((void *)this + 3);
LABEL_5:
      sqlite3_result_int64((sqlite3_context *)a2, v3);
    }
    else
    {
      switch(*((unsigned char *)this + 32))
      {
        case 0:
          sqlite3_result_int((sqlite3_context *)a2, *(_DWORD *)(*((void *)this + 2) + 4 * *((void *)this + 1) - 4));
          break;
        case 1:
          sqlite3_int64 v3 = *(void *)(*((void *)this + 2) + 8 * *((void *)this + 1) - 8);
          goto LABEL_5;
        case 2:
          sqlite3_result_double((sqlite3_context *)a2, *(double *)(*((void *)this + 2) + 8 * *((void *)this + 1) - 8));
          break;
        case 3:
          uint64_t v9 = *(const char **)(*((void *)this + 2) + 8 * *((void *)this + 1) - 8);
          int v5 = (sqlite3_context *)a2;
          unsigned int v6 = v9;
          uint64_t v7 = -1;
          goto LABEL_7;
        default:
          sqlite3_int64 v3 = 0;
          goto LABEL_5;
      }
    }
  }
  return 0;
}

BOOL degas::arrayEof(degas *this, sqlite3_vtab_cursor *a2)
{
  return *((void *)this + 1) > *((void *)this + 3);
}

uint64_t degas::arrayNext(degas *this, sqlite3_vtab_cursor *a2)
{
  return 0;
}

uint64_t degas::arrayFilter(degas *this, sqlite3_vtab_cursor *a2, int a3, const char *a4, sqlite3_value **a5, sqlite3_value **a6)
{
  if (a2)
  {
    int v8 = (int)a2;
    sqlite3_int64 v9 = (sqlite3_int64)sqlite3_value_pointer(*a5, (const char *)degas::kArrayPointerTypeName);
    *((void *)this + 2) = v9;
    if (v9) {
      sqlite3_int64 v9 = sqlite3_value_int64(a5[1]);
    }
    *((void *)this + 3) = v9;
    if (v8 > 2)
    {
      uint64_t v10 = sqlite3_value_text(a5[2]);
      uint64_t v11 = 0;
      while (sqlite3_stricmp((const char *)v10, degas::azType[v11]))
      {
        if (++v11 == 4)
        {
          *(void *)(*(void *)this + 16) = sqlite3_mprintf("unknown datatype: %Q", v10);
          return 1;
        }
      }
      *((unsigned char *)this + 32) = v11;
    }
    else
    {
      *((unsigned char *)this + 32) = 0;
    }
  }
  else
  {
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
  }
  uint64_t result = 0;
  *((void *)this + ++*((void *)this + 1) = 1;
  return result;
}

uint64_t degas::arrayClose(degas *this, sqlite3_vtab_cursor *a2)
{
  return 0;
}

uint64_t degas::arrayOpen(degas *this, sqlite3_vtab *a2, sqlite3_vtab_cursor **a3)
{
  int v4 = sqlite3_malloc(40);
  if (!v4) {
    return 7;
  }
  int v5 = v4;
  uint64_t result = 0;
  v5[4] = 0;
  *(_OWORD *)int v5 = 0u;
  *((_OWORD *)v5 + ++*((void *)this + 1) = 0u;
  a2->pModule = (const sqlite3_module *)v5;
  return result;
}

uint64_t degas::arrayDisconnect(degas *this, sqlite3_vtab *a2)
{
  return 0;
}

uint64_t degas::arrayBestIndex(degas *this, sqlite3_vtab *a2, sqlite3_index_info *a3)
{
  uint64_t pModule_low = LODWORD(a2->pModule);
  if ((int)pModule_low < 1) {
    goto LABEL_19;
  }
  uint64_t v4 = 0;
  int v5 = (unsigned char *)(*(void *)&a2->nRef + 4);
  unsigned int v6 = -1;
  unsigned int v7 = -1;
  unsigned int v8 = -1;
  do
  {
    if (v5[1] && *v5 == 2)
    {
      int v9 = *((_DWORD *)v5 - 1);
      if (v9 == 1) {
        unsigned int v10 = v4;
      }
      else {
        unsigned int v10 = v8;
      }
      if (v9 == 2)
      {
        unsigned int v10 = v8;
        unsigned int v11 = v4;
      }
      else
      {
        unsigned int v11 = v7;
      }
      if (v9 == 3)
      {
        unsigned int v6 = v4;
      }
      else
      {
        unsigned int v8 = v10;
        unsigned int v7 = v11;
      }
    }
    ++v4;
    v5 += 12;
  }
  while (pModule_low != v4);
  if ((v8 & 0x80000000) != 0 || (v7 & 0x80000000) != 0)
  {
LABEL_19:
    a2[2].zErrMsg = (char *)0x41DFFFFFFFC00000;
    a2[3].pModule = (const sqlite3_module *)0x7FFFFFFF;
    LODWORD(a2[1].zErrMsg) = 0;
  }
  else
  {
    uint64_t v12 = *(void *)&a2[1].nRef;
    uint64_t v13 = v12 + 8 * v8;
    *(_DWORD *)uint64_t v13 = 1;
    *(unsigned char *)(v13 + 4) = 1;
    uint64_t v14 = v12 + 8 * v7;
    *(_DWORD *)uint64_t v14 = 2;
    *(unsigned char *)(v14 + 4) = 1;
    a2[2].zErrMsg = (char *)0x3FF0000000000000;
    a2[3].pModule = (const sqlite3_module *)100;
    LODWORD(a2[1].zErrMsg) = 2;
    if ((v6 & 0x80000000) == 0)
    {
      uint64_t v15 = v12 + 8 * v6;
      *(_DWORD *)uint64_t v15 = 3;
      *(unsigned char *)(v15 + 4) = 1;
      LODWORD(a2[1].zErrMsg) = 3;
    }
  }
  return 0;
}

uint64_t degas::arrayConnect(degas *this, sqlite3 *a2, void *a3, int a4, const char **a5, sqlite3_vtab **a6, char **a7)
{
  uint64_t result = sqlite3_declare_vtab(this, "CREATE TABLE x(value,pointer hidden,count hidden,ctype hidden)");
  if (!result)
  {
    int v9 = (const char *)sqlite3_malloc(24);
    *a5 = v9;
    if (v9)
    {
      unsigned int v10 = v9;
      uint64_t result = 0;
      *(void *)unsigned int v10 = 0;
      *((void *)v10 + ++*((void *)this + 1) = 0;
      *((void *)v10 + 2) = 0;
    }
    else
    {
      return 7;
    }
  }
  return result;
}

uint64_t degas::MetadataTable::deleteEntry(degas::MetadataTable *this, sqlite3_int64 a2)
{
  sqlite3_int64 v3 = degas::MetadataTable::deleteStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v3, 1, a2);
  uint64_t v4 = (sqlite3_stmt **)*v3;
  return degas::Statement::update(v4);
}

uint64_t *degas::MetadataTable::deleteStatement(degas::MetadataTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas13MetadataTable15deleteStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_4;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas13MetadataTable15deleteStatementEv_block_invoke()
{
}

void sub_1D1737A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::MetadataTable::createTable(degas::MetadataTable *this)
{
  unsigned int v1 = (sqlite3 *)*((void *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "create table GraphMetadata (metadataKey integer primary key autoincrement, value text)");
  degas::Statement::Statement(ppStmt, v1, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = degas::Statement::update(ppStmt);
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  return v2;
}

void sub_1D1737B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void degas::MetadataTable::~MetadataTable(degas::MetadataTable *this)
{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1D25F9A90);
}

{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

degas::MetadataTable *degas::MetadataTable::MetadataTable(degas::MetadataTable *this, sqlite3 *a2, degas::StatementCache *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "GraphMetadata");
  *(void *)this = &unk_1F2801DE0;
  unsigned int v6 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v7 = SHIBYTE(v10);
    *((void *)this + 4) = a2;
    *((void *)this + ++*((void *)this + 5) = a3;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void *)this + 3) = v10;
    *((void *)this + 4) = a2;
    *((void *)this + ++*((void *)this + 5) = a3;
  }
  *(void *)this = &unk_1F2800F68;
  *((unsigned char *)this + 48) = 5;
  return this;
}

void sub_1D1737D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *degas::MetadataTable::upsertStatement(degas::MetadataTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas13MetadataTable15upsertStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_1139;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas13MetadataTable15upsertStatementEv_block_invoke()
{
}

void sub_1D1737E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::MetadataTable::readByIdentifierStatement(degas::MetadataTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x600;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas13MetadataTable25readByIdentifierStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_6;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas13MetadataTable25readByIdentifierStatementEv_block_invoke()
{
}

void sub_1D1737FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::MetadataTable::insertOrUpdate(degas::MetadataTable *this, sqlite3_int64 a2, sqlite3_int64 a3)
{
  char v5 = degas::MetadataTable::upsertStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 1, a2);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 2, a3);
  unsigned int v6 = (sqlite3_stmt **)*v5;
  return degas::Statement::update(v6);
}

uint64_t degas::MetadataTable::insertOrUpdate(degas::MetadataTable *this, sqlite3_int64 a2, double a3)
{
  char v5 = degas::MetadataTable::upsertStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 1, a2);
  degas::Statement::bindDouble((sqlite3_stmt **)*v5, 2, a3);
  unsigned int v6 = (sqlite3_stmt **)*v5;
  return degas::Statement::update(v6);
}

uint64_t degas::MetadataTable::insertOrUpdate(degas::MetadataTable *a1, sqlite3_int64 a2, uint64_t *a3)
{
  char v5 = degas::MetadataTable::upsertStatement(a1);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 1, a2);
  degas::Statement::bindString(*v5, 2, a3);
  unsigned int v6 = (sqlite3_stmt **)*v5;
  return degas::Statement::update(v6);
}

uint64_t *degas::MetadataTable::prepareStatementToReadByIdentifier(degas::MetadataTable *this, sqlite3_int64 a2)
{
  sqlite3_int64 v3 = degas::MetadataTable::readByIdentifierStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v3, 1, a2);
  return v3;
}

degas::MetadataCursor *degas::MetadataCursor::MetadataCursor(degas::MetadataCursor *this, sqlite3_int64 a2, const degas::MetadataTable *a3)
{
  char v5 = degas::MetadataTable::readByIdentifierStatement(a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 1, a2);
  uint64_t v6 = v5[1];
  *(void *)this = *v5;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

sqlite3_int64 degas::MetadataCursor::metadataKey(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 0);
}

sqlite3_int64 degas::MetadataCursor::integerValue(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 1);
}

double degas::MetadataCursor::realValue(sqlite3_stmt ***this)
{
  return sqlite3_column_double(**this, 1);
}

void degas::MetadataCursor::stringValue(sqlite3_stmt ***a1, uint64_t a2)
{
}

void sub_1D1738450(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D17384DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D17385A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D1738600(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D1738664(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D1738700(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void degas::LabelIndex::removeEdges(degas::LabelIndex *this, const Bitmap *a2, const Bitmap *a3)
{
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)sqlite3_int64 v3 = 0;
    _os_log_fault_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "attempt to mutate immutable label index", v3, 2u);
  }
}

void degas::LabelIndex::removeNodes(degas::LabelIndex *this, const Bitmap *a2, const Bitmap *a3)
{
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)sqlite3_int64 v3 = 0;
    _os_log_fault_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "attempt to mutate immutable label index", v3, 2u);
  }
}

void degas::LabelIndex::removeEdge(degas::LabelIndex *this)
{
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)unsigned int v1 = 0;
    _os_log_fault_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "attempt to mutate immutable label index", v1, 2u);
  }
}

void degas::LabelIndex::addEdge(degas::LabelIndex *this)
{
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)unsigned int v1 = 0;
    _os_log_fault_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "attempt to mutate immutable label index", v1, 2u);
  }
}

void degas::LabelIndex::removeNode(degas::LabelIndex *this)
{
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)unsigned int v1 = 0;
    _os_log_fault_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "attempt to mutate immutable label index", v1, 2u);
  }
}

void degas::LabelIndex::addNode(degas::LabelIndex *this)
{
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)unsigned int v1 = 0;
    _os_log_fault_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "attempt to mutate immutable label index", v1, 2u);
  }
}

uint64_t degas::LabelIndex::commitTransaction(degas::LabelIndex *this)
{
  return 0;
}

void degas::LabelIndex_Immediate::removeEdges(const degas::LabelTable **this, Bitmap *a2, const degas::Bitmap *a3)
{
  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v24, a2, this[1]);
  while (degas::Statement::next((sqlite3_stmt **)v24[0]) == 1)
  {
    long long v22 = 0u;
    memset(v23, 0, 25);
    long long v20 = 0u;
    memset(v21, 0, 25);
    sqlite3_int64 v5 = sqlite3_column_int64(*(sqlite3_stmt **)v24[0], 0);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v24[0], 2, (degas::Bitmap *)&v22);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v24[0], 3, (degas::Bitmap *)&v20);
    unint64_t v6 = v20;
    if ((void)v20 == 0xFFFFFFFFLL)
    {
      int v7 = (uint64_t *)v21[0];
      unsigned int v8 = (uint64_t *)v21[1];
      if (v21[0] == v21[1])
      {
        unint64_t v6 = 0;
      }
      else
      {
        unint64_t v6 = 0;
        do
        {
          uint64_t v9 = *v7;
          unsigned int v10 = *(_DWORD *)(*v7 + 4);
          if (v10 == -1)
          {
            uint64_t v11 = 0;
            int32x4_t v12 = 0uLL;
            do
            {
              do
              {
                int32x4_t v12 = (int32x4_t)vpadalq_u16((uint32x4_t)v12, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v9 + 4 * v11 + 16))));
                v11 += 4;
              }
              while (v11 != 32);
              uint64_t v11 = 0;
              unsigned int v10 = vaddvq_s32(v12);
              int32x4_t v12 = 0uLL;
            }
            while (v10 == -1);
            *(_DWORD *)(v9 + 4) = v10;
          }
          v6 += v10;
          v7 += 2;
        }
        while (v7 != v8);
      }
      *(void *)&long long v20 = v6;
    }
    degas::Bitmap::diffWith<degas::Bitmap>((degas::Bitmap *)&v20, a3);
    unint64_t v13 = v20;
    if ((void)v20 == 0xFFFFFFFFLL)
    {
      uint64_t v14 = (uint64_t *)v21[0];
      uint64_t v15 = (uint64_t *)v21[1];
      if (v21[0] == v21[1])
      {
        unint64_t v13 = 0;
      }
      else
      {
        unint64_t v13 = 0;
        do
        {
          uint64_t v16 = *v14;
          unsigned int v17 = *(_DWORD *)(*v14 + 4);
          if (v17 == -1)
          {
            uint64_t v18 = 0;
            int32x4_t v19 = 0uLL;
            do
            {
              do
              {
                int32x4_t v19 = (int32x4_t)vpadalq_u16((uint32x4_t)v19, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v16 + 4 * v18 + 16))));
                v18 += 4;
              }
              while (v18 != 32);
              uint64_t v18 = 0;
              unsigned int v17 = vaddvq_s32(v19);
              int32x4_t v19 = 0uLL;
            }
            while (v17 == -1);
            *(_DWORD *)(v16 + 4) = v17;
          }
          v13 += v17;
          v14 += 2;
        }
        while (v14 != v15);
      }
      *(void *)&long long v20 = v13;
    }
    if (v13 < v6) {
      degas::LabelTable::update(this[1], v5, (const degas::Bitmap *)&v22, (const degas::Bitmap *)&v20);
    }
    uint64_t v25 = (void **)v21;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v25);
    *(void *)&long long v20 = v23;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  }
  degas::Cursor::~Cursor(v24);
}

void sub_1D1738C7C(_Unwind_Exception *a1)
{
  degas::Cursor::~Cursor((degas::Statement **)(v1 - 88));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::removeNodes(const degas::LabelTable **this, Bitmap *a2, const degas::Bitmap *a3)
{
  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v24, a2, this[1]);
  while (degas::Statement::next((sqlite3_stmt **)v24[0]) == 1)
  {
    long long v22 = 0u;
    memset(v23, 0, 25);
    long long v20 = 0u;
    memset(v21, 0, 25);
    sqlite3_int64 v5 = sqlite3_column_int64(*(sqlite3_stmt **)v24[0], 0);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v24[0], 2, (degas::Bitmap *)&v22);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v24[0], 3, (degas::Bitmap *)&v20);
    unint64_t v6 = v22;
    if ((void)v22 == 0xFFFFFFFFLL)
    {
      int v7 = (uint64_t *)v23[0];
      unsigned int v8 = (uint64_t *)v23[1];
      if (v23[0] == v23[1])
      {
        unint64_t v6 = 0;
      }
      else
      {
        unint64_t v6 = 0;
        do
        {
          uint64_t v9 = *v7;
          unsigned int v10 = *(_DWORD *)(*v7 + 4);
          if (v10 == -1)
          {
            uint64_t v11 = 0;
            int32x4_t v12 = 0uLL;
            do
            {
              do
              {
                int32x4_t v12 = (int32x4_t)vpadalq_u16((uint32x4_t)v12, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v9 + 4 * v11 + 16))));
                v11 += 4;
              }
              while (v11 != 32);
              uint64_t v11 = 0;
              unsigned int v10 = vaddvq_s32(v12);
              int32x4_t v12 = 0uLL;
            }
            while (v10 == -1);
            *(_DWORD *)(v9 + 4) = v10;
          }
          v6 += v10;
          v7 += 2;
        }
        while (v7 != v8);
      }
      *(void *)&long long v22 = v6;
    }
    degas::Bitmap::diffWith<degas::Bitmap>((degas::Bitmap *)&v22, a3);
    unint64_t v13 = v22;
    if ((void)v22 == 0xFFFFFFFFLL)
    {
      uint64_t v14 = (uint64_t *)v23[0];
      uint64_t v15 = (uint64_t *)v23[1];
      if (v23[0] == v23[1])
      {
        unint64_t v13 = 0;
      }
      else
      {
        unint64_t v13 = 0;
        do
        {
          uint64_t v16 = *v14;
          unsigned int v17 = *(_DWORD *)(*v14 + 4);
          if (v17 == -1)
          {
            uint64_t v18 = 0;
            int32x4_t v19 = 0uLL;
            do
            {
              do
              {
                int32x4_t v19 = (int32x4_t)vpadalq_u16((uint32x4_t)v19, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v16 + 4 * v18 + 16))));
                v18 += 4;
              }
              while (v18 != 32);
              uint64_t v18 = 0;
              unsigned int v17 = vaddvq_s32(v19);
              int32x4_t v19 = 0uLL;
            }
            while (v17 == -1);
            *(_DWORD *)(v16 + 4) = v17;
          }
          v13 += v17;
          v14 += 2;
        }
        while (v14 != v15);
      }
      *(void *)&long long v22 = v13;
    }
    if (v13 < v6) {
      degas::LabelTable::update(this[1], v5, (const degas::Bitmap *)&v22, (const degas::Bitmap *)&v20);
    }
    uint64_t v25 = (void **)v21;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v25);
    *(void *)&long long v20 = v23;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  }
  degas::Cursor::~Cursor(v24);
}

void sub_1D1738ED4(_Unwind_Exception *a1)
{
  degas::Cursor::~Cursor((degas::Statement **)(v1 - 88));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::removeEdge(const degas::LabelTable **this, sqlite3_int64 a2, unint64_t a3)
{
  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v10, a2, this[1]);
  long long v8 = 0u;
  memset(v9, 0, 25);
  long long v6 = 0u;
  memset(v7, 0, 25);
  while (degas::Statement::next((sqlite3_stmt **)v10[0]) == 1)
  {
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 2, (degas::Bitmap *)&v8);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 3, (degas::Bitmap *)&v6);
  }
  if (degas::Bitmap::isSet((degas::Bitmap *)&v6, a3))
  {
    degas::Bitmap::clearBit((degas::BitsetPtr **)&v6, a3);
    degas::LabelTable::update(this[1], a2, (const degas::Bitmap *)&v8, (const degas::Bitmap *)&v6);
  }
  uint64_t v11 = (void **)v7;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v11);
  *(void *)&long long v6 = v9;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  degas::Cursor::~Cursor(v10);
}

void sub_1D1738FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  *(void *)(v17 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  a9 = (void **)&a17;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  degas::Cursor::~Cursor((degas::Statement **)(v17 - 56));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::addEdge(const degas::LabelTable **this, sqlite3_int64 a2, unint64_t a3)
{
  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v10, a2, this[1]);
  long long v8 = 0u;
  memset(v9, 0, 25);
  long long v6 = 0u;
  memset(v7, 0, 25);
  while (degas::Statement::next((sqlite3_stmt **)v10[0]) == 1)
  {
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 2, (degas::Bitmap *)&v8);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 3, (degas::Bitmap *)&v6);
  }
  if ((degas::Bitmap::isSet((degas::Bitmap *)&v6, a3) & 1) == 0)
  {
    degas::Bitmap::setBit((degas::Bitmap *)&v6, a3);
    degas::LabelTable::update(this[1], a2, (const degas::Bitmap *)&v8, (const degas::Bitmap *)&v6);
  }
  uint64_t v11 = (void **)v7;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v11);
  *(void *)&long long v6 = v9;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  degas::Cursor::~Cursor(v10);
}

void sub_1D1739124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  *(void *)(v17 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  a9 = (void **)&a17;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  degas::Cursor::~Cursor((degas::Statement **)(v17 - 56));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::removeNode(const degas::LabelTable **this, sqlite3_int64 a2, unint64_t a3)
{
  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v10, a2, this[1]);
  long long v8 = 0u;
  memset(v9, 0, 25);
  long long v6 = 0u;
  memset(v7, 0, 25);
  while (degas::Statement::next((sqlite3_stmt **)v10[0]) == 1)
  {
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 2, (degas::Bitmap *)&v8);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 3, (degas::Bitmap *)&v6);
  }
  if (degas::Bitmap::isSet((degas::Bitmap *)&v8, a3))
  {
    degas::Bitmap::clearBit((degas::BitsetPtr **)&v8, a3);
    degas::LabelTable::update(this[1], a2, (const degas::Bitmap *)&v8, (const degas::Bitmap *)&v6);
  }
  uint64_t v11 = (void **)v7;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v11);
  *(void *)&long long v6 = v9;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  degas::Cursor::~Cursor(v10);
}

void sub_1D1739250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  *(void *)(v17 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  a9 = (void **)&a17;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  degas::Cursor::~Cursor((degas::Statement **)(v17 - 56));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::addNode(const degas::LabelTable **this, sqlite3_int64 a2, unint64_t a3)
{
  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v10, a2, this[1]);
  long long v8 = 0u;
  memset(v9, 0, 25);
  long long v6 = 0u;
  memset(v7, 0, 25);
  while (degas::Statement::next((sqlite3_stmt **)v10[0]) == 1)
  {
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 2, (degas::Bitmap *)&v8);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v10[0], 3, (degas::Bitmap *)&v6);
  }
  if ((degas::Bitmap::isSet((degas::Bitmap *)&v8, a3) & 1) == 0)
  {
    degas::Bitmap::setBit((degas::Bitmap *)&v8, a3);
    degas::LabelTable::update(this[1], a2, (const degas::Bitmap *)&v8, (const degas::Bitmap *)&v6);
  }
  uint64_t v11 = (void **)v7;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v11);
  *(void *)&long long v6 = v9;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  degas::Cursor::~Cursor(v10);
}

void sub_1D173937C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  *(void *)(v17 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  a9 = (void **)&a17;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  degas::Cursor::~Cursor((degas::Statement **)(v17 - 56));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::allEdgeIdentifiers(degas::LabelTable **this, degas::Bitmap *a2)
{
  AllStatement = degas::LabelTable::readAllStatement(this[1]);
  uint64_t v4 = (degas::Statement *)*AllStatement;
  sqlite3_int64 v5 = (atomic_ullong *)AllStatement[1];
  v8[0] = v4;
  v8[1] = (degas::Statement *)v5;
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  while (degas::Statement::next((sqlite3_stmt **)v4) == 1)
  {
    long long v6 = 0u;
    memset(v7, 0, 25);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v8[0], 3, (degas::Bitmap *)&v6);
    degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)&v6);
    uint64_t v9 = (void **)v7;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v9);
    uint64_t v4 = v8[0];
  }
  degas::Cursor::~Cursor(v8);
}

void sub_1D1739464(_Unwind_Exception *a1)
{
  degas::Cursor::~Cursor((degas::Statement **)(v1 - 40));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::allNodeIdentifiers(degas::LabelTable **this, degas::Bitmap *a2)
{
  AllStatement = degas::LabelTable::readAllStatement(this[1]);
  uint64_t v4 = (degas::Statement *)*AllStatement;
  sqlite3_int64 v5 = (atomic_ullong *)AllStatement[1];
  v8[0] = v4;
  v8[1] = (degas::Statement *)v5;
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  while (degas::Statement::next((sqlite3_stmt **)v4) == 1)
  {
    long long v6 = 0u;
    memset(v7, 0, 25);
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v8[0], 2, (degas::Bitmap *)&v6);
    degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)&v6);
    uint64_t v9 = (void **)v7;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v9);
    uint64_t v4 = v8[0];
  }
  degas::Cursor::~Cursor(v8);
}

void sub_1D1739534(_Unwind_Exception *a1)
{
  degas::Cursor::~Cursor((degas::Statement **)(v1 - 40));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Immediate::edgeIdentifiersForLabelIdentifier(const degas::LabelTable **this, sqlite3_int64 a2, degas::Bitmap *a3)
{
  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v4, a2, this[1]);
  while (degas::Statement::next((sqlite3_stmt **)v4[0]) == 1)
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v4[0], 3, a3);
  degas::Cursor::~Cursor(v4);
}

void sub_1D17395BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, degas::Statement *a9)
{
}

void degas::LabelIndex_Immediate::nodeIdentifiersForLabelIdentifier(const degas::LabelTable **this, sqlite3_int64 a2, degas::Bitmap *a3)
{
  degas::LabelCursor::LabelCursor((degas::LabelCursor *)v4, a2, this[1]);
  while (degas::Statement::next((sqlite3_stmt **)v4[0]) == 1)
    degas::Statement::bitmapColumnValue((sqlite3_stmt **)v4[0], 2, a3);
  degas::Cursor::~Cursor(v4);
}

void sub_1D1739630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, degas::Statement *a9)
{
}

void degas::LabelIndex_Immediate::~LabelIndex_Immediate(degas::LabelIndex_Immediate *this)
{
}

void degas::LabelIndex_Persisted::resetIndex(os_unfair_lock_s *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this + 14;
  os_unfair_lock_lock(this + 14);
  sqlite3_int64 v3 = v1 + 4;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*(char **)&v1[4]._os_unfair_lock_opaque);
  uint64_t v4 = *(char **)&v1[10]._os_unfair_lock_opaque;
  v1 += 10;
  *(void *)&v1[-8]._os_unfair_lock_opaque = v3;
  *(void *)&v3->_os_unfair_lock_opaque = 0;
  *(void *)&v1[-4]._os_unfair_lock_opaque = 0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(v4);
  *(void *)&v1[-2]._os_unfair_lock_opaque = v1;
  *(void *)&v1->_os_unfair_lock_opaque = 0;
  *(void *)&v1[2]._os_unfair_lock_opaque = 0;
  LOBYTE(v1[5]._os_unfair_lock_opaque) = 0;
  os_unfair_lock_unlock(v2);
}

void std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (void **)(a1 + 56);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void degas::LabelIndex_Persisted::allEdgeIdentifiers(os_unfair_lock_s *this, degas::Bitmap *a2)
{
  uint64_t v4 = this + 14;
  os_unfair_lock_lock(this + 14);
  sqlite3_int64 v5 = *(degas::LabelIndex_Persisted **)&this[8]._os_unfair_lock_opaque;
  if (v5 != (degas::LabelIndex_Persisted *)&this[10])
  {
    do
    {
      v9[0] = *((_OWORD *)v5 + 2);
      memset(&v9[1], 0, 32);
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v9[1] + 8, *((long long **)v5 + 7), *((long long **)v5 + 8), (uint64_t)(*((void *)v5 + 8) - *((void *)v5 + 7)) >> 4);
      char v10 = *((unsigned char *)v5 + 80);
      degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)v9 + 8);
      uint64_t v11 = (void **)&v9[1] + 1;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v11);
      long long v6 = (degas::LabelIndex_Persisted *)*((void *)v5 + 1);
      if (v6)
      {
        do
        {
          int v7 = v6;
          long long v6 = *(degas::LabelIndex_Persisted **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (degas::LabelIndex_Persisted *)*((void *)v5 + 2);
          BOOL v8 = *(void *)v7 == (void)v5;
          sqlite3_int64 v5 = v7;
        }
        while (!v8);
      }
      sqlite3_int64 v5 = v7;
    }
    while (v7 != (degas::LabelIndex_Persisted *)&this[10]);
  }
  os_unfair_lock_unlock(v4);
}

void sub_1D1739828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Persisted::allNodeIdentifiers(os_unfair_lock_s *this, degas::Bitmap *a2)
{
  uint64_t v4 = this + 14;
  os_unfair_lock_lock(this + 14);
  sqlite3_int64 v5 = *(degas::LabelIndex_Persisted **)&this[2]._os_unfair_lock_opaque;
  if (v5 != (degas::LabelIndex_Persisted *)&this[4])
  {
    do
    {
      v9[0] = *((_OWORD *)v5 + 2);
      memset(&v9[1], 0, 32);
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v9[1] + 8, *((long long **)v5 + 7), *((long long **)v5 + 8), (uint64_t)(*((void *)v5 + 8) - *((void *)v5 + 7)) >> 4);
      char v10 = *((unsigned char *)v5 + 80);
      degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)v9 + 8);
      uint64_t v11 = (void **)&v9[1] + 1;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v11);
      long long v6 = (degas::LabelIndex_Persisted *)*((void *)v5 + 1);
      if (v6)
      {
        do
        {
          int v7 = v6;
          long long v6 = *(degas::LabelIndex_Persisted **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (degas::LabelIndex_Persisted *)*((void *)v5 + 2);
          BOOL v8 = *(void *)v7 == (void)v5;
          sqlite3_int64 v5 = v7;
        }
        while (!v8);
      }
      sqlite3_int64 v5 = v7;
    }
    while (v7 != (degas::LabelIndex_Persisted *)&this[4]);
  }
  os_unfair_lock_unlock(v4);
}

void sub_1D1739934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Persisted::edgeIdentifiersForLabelIdentifier(os_unfair_lock_s *this, unint64_t a2, degas::Bitmap *a3)
{
  long long v6 = this + 14;
  os_unfair_lock_lock(this + 14);
  char v10 = *(void **)&this[10]._os_unfair_lock_opaque;
  uint64_t v9 = (char *)&this[10];
  BOOL v8 = v10;
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = v9;
  do
  {
    unint64_t v12 = v8[4];
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      uint64_t v14 = v8;
    }
    else {
      uint64_t v14 = v8 + 1;
    }
    if (v13) {
      uint64_t v11 = (char *)v8;
    }
    BOOL v8 = (void *)*v14;
  }
  while (*v14);
  if (v11 != v9 && *((void *)v11 + 4) <= a2)
  {
    uint64_t v15 = (long long *)(v11 + 40);
  }
  else
  {
LABEL_12:
    degas::Bitmap::emptyBitmap(v7);
    uint64_t v15 = &degas::Bitmap::emptyBitmap(void)::bitmap;
  }
  degas::Bitmap::operator=(a3, v15);
  os_unfair_lock_unlock(v6);
}

void degas::LabelIndex_Persisted::nodeIdentifiersForLabelIdentifier(os_unfair_lock_s *this, unint64_t a2, degas::Bitmap *a3)
{
  long long v6 = this + 14;
  os_unfair_lock_lock(this + 14);
  char v10 = *(void **)&this[4]._os_unfair_lock_opaque;
  uint64_t v9 = (char *)&this[4];
  BOOL v8 = v10;
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = v9;
  do
  {
    unint64_t v12 = v8[4];
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      uint64_t v14 = v8;
    }
    else {
      uint64_t v14 = v8 + 1;
    }
    if (v13) {
      uint64_t v11 = (char *)v8;
    }
    BOOL v8 = (void *)*v14;
  }
  while (*v14);
  if (v11 != v9 && *((void *)v11 + 4) <= a2)
  {
    uint64_t v15 = (long long *)(v11 + 40);
  }
  else
  {
LABEL_12:
    degas::Bitmap::emptyBitmap(v7);
    uint64_t v15 = &degas::Bitmap::emptyBitmap(void)::bitmap;
  }
  degas::Bitmap::operator=(a3, v15);
  os_unfair_lock_unlock(v6);
}

void degas::LabelIndex_Persisted::~LabelIndex_Persisted(char **this)
{
  *this = (char *)&unk_1F28010D0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[5]);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[2]);
  JUMPOUT(0x1D25F9A90);
}

{
  *this = (char *)&unk_1F28010D0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[5]);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[2]);
}

{
  *this = (char *)&unk_1F28010D0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[5]);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[2]);
}

uint64_t degas::LabelIndex_Snapshot::rollbackTransaction(uint64_t this)
{
  *(unsigned char *)(this + 80) = 0;
  return this;
}

uint64_t degas::LabelIndex_Snapshot::commitTransaction(degas::LabelIndex_Snapshot *this)
{
  *((unsigned char *)this + 80) = 0;
  return 0;
}

void degas::LabelIndex_Snapshot::beginTransaction(degas::LabelIndex_Snapshot *this)
{
  if (!*((unsigned char *)this + 80))
  {
    uint64_t v2 = *((void *)this + 1);
    sqlite3_int64 v3 = (degas::LabelTable *)*((void *)this + 3);
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 56));
    degas::LabelIndex_Persisted::locked_populate((uint64_t **)v2, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 56));
    degas::LabelIndex_Persisted::makeSnapshot(*((void *)this + 1), (uint64_t *)this + 4, (uint64_t *)this + 7);
    *((unsigned char *)this + 80) = 1;
  }
}

void degas::LabelIndex_Persisted::locked_populate(uint64_t **this, degas::LabelTable *a2)
{
  if (!*((unsigned char *)this + 60))
  {
    AllStatement = degas::LabelTable::readAllStatement(a2);
    uint64_t v4 = (degas::Statement *)*AllStatement;
    sqlite3_int64 v5 = (atomic_ullong *)AllStatement[1];
    v14[0] = v4;
    v14[1] = (degas::Statement *)v5;
    if (v5) {
      atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
    }
    while (degas::Statement::next((sqlite3_stmt **)v4) == 1)
    {
      sqlite3_int64 v6 = sqlite3_column_int64(*(sqlite3_stmt **)v14[0], 0);
      sqlite3_int64 v13 = v6;
      long long v11 = 0u;
      memset(v12, 0, 25);
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v14[0], 2, (degas::Bitmap *)&v11);
      long long v9 = 0u;
      memset(v10, 0, 25);
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v14[0], 3, (degas::Bitmap *)&v9);
      int v7 = std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(this + 1, v6, &v13);
      degas::Bitmap::operator=(v7 + 5, &v11);
      BOOL v8 = std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(this + 4, v6, &v13);
      degas::Bitmap::operator=(v8 + 5, &v9);
      uint64_t v15 = (void **)v10;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v15);
      *(void *)&long long v9 = v12;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
      uint64_t v4 = v14[0];
    }
    *((unsigned char *)this + 60) = 1;
    degas::Cursor::~Cursor(v14);
  }
}

void sub_1D1739D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  degas::Cursor::~Cursor((degas::Statement **)(v9 - 72));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Persisted::makeSnapshot(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sqlite3_int64 v6 = (os_unfair_lock_s *)(a1 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  if ((uint64_t *)(a1 + 8) != a2) {
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,degas::Bitmap>,std::__tree_node<std::__value_type<unsigned long long,degas::Bitmap>,void *> *,long>>(a2, *(void **)(a1 + 8), (void *)(a1 + 16));
  }
  if ((uint64_t *)(a1 + 32) != a3) {
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,degas::Bitmap>,std::__tree_node<std::__value_type<unsigned long long,degas::Bitmap>,void *> *,long>>(a3, *(void **)(a1 + 32), (void *)(a1 + 40));
  }
  os_unfair_lock_unlock(v6);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,degas::Bitmap>,std::__tree_node<std::__value_type<unsigned long long,degas::Bitmap>,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  uint64_t v5 = (uint64_t)result;
  if (result[2])
  {
    uint64_t v6 = *result;
    BOOL v8 = (uint64_t **)(result + 1);
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t)(result + 1);
    *(void *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(void *)(v6 + 8)) {
      uint64_t v9 = *(uint64_t **)(v6 + 8);
    }
    else {
      uint64_t v9 = (uint64_t *)v6;
    }
    long long v21 = result;
    long long v22 = v9;
    long long v23 = v9;
    if (v9)
    {
      long long v22 = std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        char v10 = a2;
        do
        {
          v9[4] = v10[4];
          degas::Bitmap::operator=(v9 + 5, v10 + 5);
          long long v11 = *v8;
          unint64_t v12 = (uint64_t **)(v5 + 8);
          sqlite3_int64 v13 = (uint64_t **)(v5 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                unint64_t v12 = (uint64_t **)v11;
                if (v23[4] >= (unint64_t)v11[4]) {
                  break;
                }
                long long v11 = (uint64_t *)*v11;
                sqlite3_int64 v13 = v12;
                if (!*v12) {
                  goto LABEL_14;
                }
              }
              long long v11 = (uint64_t *)v11[1];
            }
            while (v11);
            sqlite3_int64 v13 = v12 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v12, v13, v23);
          uint64_t v9 = v22;
          long long v23 = v22;
          if (v22) {
            long long v22 = std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::_DetachedTreeCache::__detach_next((uint64_t)v22);
          }
          uint64_t v14 = (void *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              uint64_t v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (void *)v10[2];
              BOOL v15 = *a2 == (void)v10;
              char v10 = a2;
            }
            while (!v15);
          }
          if (!v9) {
            break;
          }
          char v10 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t *)std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v21);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__construct_node<std::pair<unsigned long long const,degas::Bitmap> const&>((uint64_t)&v21, v5, (uint64_t)(a2 + 4));
      uint64_t v16 = *(uint64_t **)(v5 + 8);
      uint64_t v17 = (uint64_t **)(v5 + 8);
      uint64_t v18 = (uint64_t **)(v5 + 8);
      if (v16)
      {
        do
        {
          while (1)
          {
            uint64_t v17 = (uint64_t **)v16;
            if (v21[4] >= (unint64_t)v16[4]) {
              break;
            }
            uint64_t v16 = (uint64_t *)*v16;
            uint64_t v18 = v17;
            if (!*v17) {
              goto LABEL_31;
            }
          }
          uint64_t v16 = (uint64_t *)v16[1];
        }
        while (v16);
        uint64_t v18 = v17 + 1;
      }
LABEL_31:
      uint64_t result = std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v17, v18, v21);
      int32x4_t v19 = (void *)a2[1];
      if (v19)
      {
        do
        {
          long long v20 = v19;
          int32x4_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          long long v20 = (void *)a2[2];
          BOOL v15 = *v20 == (void)a2;
          a2 = v20;
        }
        while (!v15);
      }
      a2 = v20;
    }
    while (v20 != a3);
  }
  return result;
}

void sub_1D1739FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    sqlite3_int64 v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; sqlite3_int64 v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          sqlite3_int64 v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy((char *)v2);
  }
  return a1;
}

char *std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__construct_node<std::pair<unsigned long long const,degas::Bitmap> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = operator new(0x58uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  uint64_t result = std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)v6 + 56, *(long long **)(a3 + 24), *(long long **)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 4);
  *((unsigned char *)v6 + 80) = *(unsigned char *)(a3 + 48);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_1D173A10C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,degas::Bitmap>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,degas::Bitmap>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    uint64_t v3 = __p + 7;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, void *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (char *)operator new(0x58uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 6++*((void *)this + 5) = 0u;
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void degas::LabelIndex_Snapshot::allEdgeIdentifiers(degas::LabelIndex_Snapshot *this, degas::Bitmap *a2)
{
  if (*((unsigned char *)this + 80))
  {
    uint64_t v4 = (char *)*((void *)this + 7);
    uint64_t v5 = (char *)this + 64;
    if (v4 != (char *)this + 64)
    {
      do
      {
        v12[0] = *((_OWORD *)v4 + 2);
        memset(&v12[1], 0, 32);
        std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v12[1] + 8, *((long long **)v4 + 7), *((long long **)v4 + 8), (uint64_t)(*((void *)v4 + 8) - *((void *)v4 + 7)) >> 4);
        char v13 = v4[80];
        degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)v12 + 8);
        uint64_t v14 = (void **)&v12[1] + 1;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v14);
        uint64_t v6 = (char *)*((void *)v4 + 1);
        if (v6)
        {
          do
          {
            uint64_t v7 = v6;
            uint64_t v6 = *(char **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v7 = (char *)*((void *)v4 + 2);
            BOOL v8 = *(void *)v7 == (void)v4;
            uint64_t v4 = v7;
          }
          while (!v8);
        }
        uint64_t v4 = v7;
      }
      while (v7 != v5);
    }
  }
  else
  {
    uint64_t v9 = *((void *)this + 1);
    char v10 = (degas::LabelTable *)*((void *)this + 3);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 56));
    degas::LabelIndex_Persisted::locked_populate((uint64_t **)v9, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 56));
    long long v11 = *(void (**)(void))(**((void **)this + 1) + 40);
    v11();
  }
}

void sub_1D173A3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Snapshot::allNodeIdentifiers(degas::LabelIndex_Snapshot *this, degas::Bitmap *a2)
{
  if (*((unsigned char *)this + 80))
  {
    uint64_t v4 = (char *)*((void *)this + 4);
    uint64_t v5 = (char *)this + 40;
    if (v4 != (char *)this + 40)
    {
      do
      {
        v12[0] = *((_OWORD *)v4 + 2);
        memset(&v12[1], 0, 32);
        std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v12[1] + 8, *((long long **)v4 + 7), *((long long **)v4 + 8), (uint64_t)(*((void *)v4 + 8) - *((void *)v4 + 7)) >> 4);
        char v13 = v4[80];
        degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)v12 + 8);
        uint64_t v14 = (void **)&v12[1] + 1;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v14);
        uint64_t v6 = (char *)*((void *)v4 + 1);
        if (v6)
        {
          do
          {
            uint64_t v7 = v6;
            uint64_t v6 = *(char **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v7 = (char *)*((void *)v4 + 2);
            BOOL v8 = *(void *)v7 == (void)v4;
            uint64_t v4 = v7;
          }
          while (!v8);
        }
        uint64_t v4 = v7;
      }
      while (v7 != v5);
    }
  }
  else
  {
    uint64_t v9 = *((void *)this + 1);
    char v10 = (degas::LabelTable *)*((void *)this + 3);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 56));
    degas::LabelIndex_Persisted::locked_populate((uint64_t **)v9, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 56));
    long long v11 = *(void (**)(void))(**((void **)this + 1) + 32);
    v11();
  }
}

void sub_1D173A568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *degas::LabelIndex_Snapshot::edgeIdentifiersForLabelIdentifier(degas::LabelIndex_Snapshot *this, unint64_t a2, degas::Bitmap *a3)
{
  if (*((unsigned char *)this + 80))
  {
    uint64_t v5 = (void *)*((void *)this + 8);
    if (!v5) {
      goto LABEL_13;
    }
    uint64_t v6 = (void *)((char *)this + 64);
    do
    {
      unint64_t v7 = v5[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = v5;
      }
      else {
        uint64_t v9 = v5 + 1;
      }
      if (v8) {
        uint64_t v6 = v5;
      }
      uint64_t v5 = (void *)*v9;
    }
    while (*v9);
    if (v6 != (void *)((char *)this + 64) && v6[4] <= a2)
    {
      char v10 = (long long *)(v6 + 5);
    }
    else
    {
LABEL_13:
      degas::Bitmap::emptyBitmap(this);
      char v10 = &degas::Bitmap::emptyBitmap(void)::bitmap;
    }
    return degas::Bitmap::operator=(a3, v10);
  }
  else
  {
    uint64_t v12 = *((void *)this + 1);
    char v13 = (degas::LabelTable *)*((void *)this + 3);
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 56));
    degas::LabelIndex_Persisted::locked_populate((uint64_t **)v12, v13);
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 56));
    uint64_t v14 = *(uint64_t (**)(void))(**((void **)this + 1) + 24);
    return (void *)v14();
  }
}

void *degas::LabelIndex_Snapshot::nodeIdentifiersForLabelIdentifier(degas::LabelIndex_Snapshot *this, unint64_t a2, degas::Bitmap *a3)
{
  if (*((unsigned char *)this + 80))
  {
    uint64_t v5 = (void *)*((void *)this + 5);
    if (!v5) {
      goto LABEL_13;
    }
    uint64_t v6 = (void *)((char *)this + 40);
    do
    {
      unint64_t v7 = v5[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = v5;
      }
      else {
        uint64_t v9 = v5 + 1;
      }
      if (v8) {
        uint64_t v6 = v5;
      }
      uint64_t v5 = (void *)*v9;
    }
    while (*v9);
    if (v6 != (void *)((char *)this + 40) && v6[4] <= a2)
    {
      char v10 = (long long *)(v6 + 5);
    }
    else
    {
LABEL_13:
      degas::Bitmap::emptyBitmap(this);
      char v10 = &degas::Bitmap::emptyBitmap(void)::bitmap;
    }
    return degas::Bitmap::operator=(a3, v10);
  }
  else
  {
    uint64_t v12 = *((void *)this + 1);
    char v13 = (degas::LabelTable *)*((void *)this + 3);
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 56));
    degas::LabelIndex_Persisted::locked_populate((uint64_t **)v12, v13);
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 56));
    uint64_t v14 = *(uint64_t (**)(void))(**((void **)this + 1) + 16);
    return (void *)v14();
  }
}

void degas::LabelIndex_Snapshot::~LabelIndex_Snapshot(char **this)
{
  degas::LabelIndex_Snapshot::~LabelIndex_Snapshot(this);
  JUMPOUT(0x1D25F9A90);
}

{
  std::__shared_weak_count *v2;

  *this = (char *)&unk_1F2801160;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[8]);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[5]);
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void *degas::LabelIndex_Transaction::removeEdges(degas::LabelIndex_Transaction *this, const degas::Bitmap *a2, long long **a3)
{
  if (!*((unsigned char *)this + 32)) {
    __assert_rtn("removeEdges", "labelIndex.cpp", 638, "_inTransaction");
  }
  uint64_t result = degas::Bitmap::begin(a2, &v19);
  uint64_t v7 = *((void *)a2 + 3);
  BOOL v8 = (char *)this + 120;
  while (1)
  {
    BOOL v9 = (const degas::Bitmap *)v19 == a2 && v20 == -1;
    if (v9 && v21 == v7) {
      return result;
    }
    long long v11 = *(void **)v8;
    if (!*(void *)v8) {
      goto LABEL_21;
    }
    uint64_t v12 = (char *)this + 120;
    do
    {
      unint64_t v13 = v11[4];
      BOOL v14 = v13 >= v20;
      if (v13 >= v20) {
        BOOL v15 = v11;
      }
      else {
        BOOL v15 = v11 + 1;
      }
      if (v14) {
        uint64_t v12 = (char *)v11;
      }
      long long v11 = (void *)*v15;
    }
    while (*v15);
    if (v12 != v8 && v20 >= *((void *)v12 + 4))
    {
      degas::Bitmap::unionWith<degas::Bitmap>((degas::Bitmap *)(v12 + 40), (uint64_t)a3);
    }
    else
    {
LABEL_21:
      uint64_t v16 = *a3;
      v17[0] = v20;
      v17[1] = (unint64_t)v16;
      memset(&v17[2], 0, 32);
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v17[3], a3[2], a3[3], a3[3] - a3[2]);
      char v18 = *((unsigned char *)a3 + 40);
      std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,degas::Bitmap>>((uint64_t *)this + 14, v17[0], (uint64_t)v17);
      long long v22 = (void **)&v17[3];
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v22);
    }
    uint64_t result = degas::Bitmap::iterator::operator++(&v19);
  }
}

void sub_1D173A99C(_Unwind_Exception *a1)
{
  *(void *)(v2 - 72) = v1;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 72));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,degas::Bitmap>>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    BOOL v9 = operator new(0x58uLL);
    *((_OWORD *)v9 + 2) = *(_OWORD *)a3;
    *((_OWORD *)v9 + 3) = 0u;
    *((_OWORD *)v9 + 4) = 0u;
    std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)v9 + 56, *(long long **)(a3 + 24), *(long long **)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 4);
    *((unsigned char *)v9 + 80) = *(unsigned char *)(a3 + 48);
    return std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__insert_node_at(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

void sub_1D173AA98(_Unwind_Exception *a1)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,degas::Bitmap>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void *degas::LabelIndex_Transaction::removeNodes(degas::LabelIndex_Transaction *this, const degas::Bitmap *a2, long long **a3)
{
  if (!*((unsigned char *)this + 32)) {
    __assert_rtn("removeNodes", "labelIndex.cpp", 594, "_inTransaction");
  }
  uint64_t result = degas::Bitmap::begin(a2, &v19);
  uint64_t v7 = *((void *)a2 + 3);
  unint64_t v8 = (char *)this + 72;
  while (1)
  {
    BOOL v9 = (const degas::Bitmap *)v19 == a2 && v20 == -1;
    if (v9 && v21 == v7) {
      return result;
    }
    long long v11 = *(void **)v8;
    if (!*(void *)v8) {
      goto LABEL_21;
    }
    uint64_t v12 = (char *)this + 72;
    do
    {
      unint64_t v13 = v11[4];
      BOOL v14 = v13 >= v20;
      if (v13 >= v20) {
        BOOL v15 = v11;
      }
      else {
        BOOL v15 = v11 + 1;
      }
      if (v14) {
        uint64_t v12 = (char *)v11;
      }
      long long v11 = (void *)*v15;
    }
    while (*v15);
    if (v12 != v8 && v20 >= *((void *)v12 + 4))
    {
      degas::Bitmap::unionWith<degas::Bitmap>((degas::Bitmap *)(v12 + 40), (uint64_t)a3);
    }
    else
    {
LABEL_21:
      uint64_t v16 = *a3;
      v17[0] = v20;
      v17[1] = (unint64_t)v16;
      memset(&v17[2], 0, 32);
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v17[3], a3[2], a3[3], a3[3] - a3[2]);
      char v18 = *((unsigned char *)a3 + 40);
      std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,degas::Bitmap>>((uint64_t *)this + 8, v17[0], (uint64_t)v17);
      long long v22 = (void **)&v17[3];
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v22);
    }
    uint64_t result = degas::Bitmap::iterator::operator++(&v19);
  }
}

void sub_1D173ABFC(_Unwind_Exception *a1)
{
  *(void *)(v2 - 72) = v1;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 72));
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Transaction::removeEdge(degas::LabelIndex_Transaction *this, void **a2, unint64_t a3)
{
  if (!*((unsigned char *)this + 32)) {
    __assert_rtn("removeEdge", "labelIndex.cpp", 623, "_inTransaction");
  }
  uint64_t v5 = (uint64_t *)((char *)this + 120);
  uint64_t v4 = (void *)*((void *)this + 15);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v6 = (uint64_t *)((char *)this + 120);
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= (unint64_t)a2;
    if (v7 >= (unint64_t)a2) {
      BOOL v9 = v4;
    }
    else {
      BOOL v9 = v4 + 1;
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 != v5 && v6[4] <= (unint64_t)a2)
  {
    degas::Bitmap::setBit((degas::Bitmap *)(v6 + 5), a3);
  }
  else
  {
LABEL_13:
    long long v12 = 0u;
    memset(v13, 0, 25);
    degas::Bitmap::setBit((degas::Bitmap *)&v12, a3);
    v10[0] = a2;
    v10[1] = (void **)v12;
    memset(&v10[2], 0, 32);
    std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v10[3], v13[0], v13[1], v13[1] - v13[0]);
    char v11 = (char)v13[3];
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,degas::Bitmap>>(v5 - 1, (unint64_t)a2, (uint64_t)v10);
    BOOL v14 = &v10[3];
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    v10[0] = (void **)v13;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](v10);
  }
}

void sub_1D173AD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(void *)(v20 - 40) = v19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  a10 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Transaction::addEdge(degas::LabelIndex_Transaction *this, void **a2, unint64_t a3)
{
  if (!*((unsigned char *)this + 32)) {
    __assert_rtn("addEdge", "labelIndex.cpp", 608, "_inTransaction");
  }
  uint64_t v5 = (uint64_t *)((char *)this + 96);
  uint64_t v4 = (void *)*((void *)this + 12);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v6 = (uint64_t *)((char *)this + 96);
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= (unint64_t)a2;
    if (v7 >= (unint64_t)a2) {
      BOOL v9 = v4;
    }
    else {
      BOOL v9 = v4 + 1;
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 != v5 && v6[4] <= (unint64_t)a2)
  {
    degas::Bitmap::setBit((degas::Bitmap *)(v6 + 5), a3);
  }
  else
  {
LABEL_13:
    long long v12 = 0u;
    memset(v13, 0, 25);
    degas::Bitmap::setBit((degas::Bitmap *)&v12, a3);
    v10[0] = a2;
    v10[1] = (void **)v12;
    memset(&v10[2], 0, 32);
    std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v10[3], v13[0], v13[1], v13[1] - v13[0]);
    char v11 = (char)v13[3];
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,degas::Bitmap>>(v5 - 1, (unint64_t)a2, (uint64_t)v10);
    BOOL v14 = &v10[3];
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    v10[0] = (void **)v13;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](v10);
  }
}

void sub_1D173AED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(void *)(v20 - 40) = v19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  a10 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Transaction::removeNode(degas::LabelIndex_Transaction *this, void **a2, unint64_t a3)
{
  if (!*((unsigned char *)this + 32)) {
    __assert_rtn("removeNode", "labelIndex.cpp", 579, "_inTransaction");
  }
  uint64_t v5 = (uint64_t *)((char *)this + 72);
  uint64_t v4 = (void *)*((void *)this + 9);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v6 = (uint64_t *)((char *)this + 72);
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= (unint64_t)a2;
    if (v7 >= (unint64_t)a2) {
      BOOL v9 = v4;
    }
    else {
      BOOL v9 = v4 + 1;
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 != v5 && v6[4] <= (unint64_t)a2)
  {
    degas::Bitmap::setBit((degas::Bitmap *)(v6 + 5), a3);
  }
  else
  {
LABEL_13:
    long long v12 = 0u;
    memset(v13, 0, 25);
    degas::Bitmap::setBit((degas::Bitmap *)&v12, a3);
    v10[0] = a2;
    v10[1] = (void **)v12;
    memset(&v10[2], 0, 32);
    std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v10[3], v13[0], v13[1], v13[1] - v13[0]);
    char v11 = (char)v13[3];
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,degas::Bitmap>>(v5 - 1, (unint64_t)a2, (uint64_t)v10);
    BOOL v14 = &v10[3];
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    v10[0] = (void **)v13;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](v10);
  }
}

void sub_1D173B050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(void *)(v20 - 40) = v19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  a10 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Transaction::addNode(degas::LabelIndex_Transaction *this, void **a2, unint64_t a3)
{
  if (!*((unsigned char *)this + 32)) {
    __assert_rtn("addNode", "labelIndex.cpp", 564, "_inTransaction");
  }
  uint64_t v5 = (uint64_t *)((char *)this + 48);
  uint64_t v4 = (void *)*((void *)this + 6);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v6 = (uint64_t *)((char *)this + 48);
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= (unint64_t)a2;
    if (v7 >= (unint64_t)a2) {
      BOOL v9 = v4;
    }
    else {
      BOOL v9 = v4 + 1;
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 != v5 && v6[4] <= (unint64_t)a2)
  {
    degas::Bitmap::setBit((degas::Bitmap *)(v6 + 5), a3);
  }
  else
  {
LABEL_13:
    long long v12 = 0u;
    memset(v13, 0, 25);
    degas::Bitmap::setBit((degas::Bitmap *)&v12, a3);
    v10[0] = a2;
    v10[1] = (void **)v12;
    memset(&v10[2], 0, 32);
    std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v10[3], v13[0], v13[1], v13[1] - v13[0]);
    char v11 = (char)v13[3];
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,degas::Bitmap>>(v5 - 1, (unint64_t)a2, (uint64_t)v10);
    BOOL v14 = &v10[3];
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    v10[0] = (void **)v13;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](v10);
  }
}

void sub_1D173B1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(void *)(v20 - 40) = v19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  a10 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t degas::LabelIndex_Transaction::resetIndex(degas::LabelIndex_Transaction *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 72))();
}

void degas::LabelIndex_Transaction::rollbackTransaction(char **this)
{
  uint64_t v1 = this;
  uint64_t v2 = (char *)(this + 6);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[6]);
  v1[5] = v2;
  v1[7] = 0;
  *(void *)uint64_t v2 = 0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(v1[9]);
  v1[8] = (char *)(v1 + 9);
  v1[10] = 0;
  v1[9] = 0;
  uint64_t v3 = (char *)(v1 + 12);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(v1[12]);
  uint64_t v4 = v1[15];
  v1 += 15;
  *(v1 - 4) = v3;
  *(void *)uint64_t v3 = 0;
  *(v1 - 2) = 0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(v4);
  *(v1 - ++*((void *)this + 1) = (char *)v1;
  *uint64_t v1 = 0;
  v1[1] = 0;
  *((unsigned char *)v1 - 88) = 0;
}

uint64_t degas::LabelIndex_Transaction::commitTransaction(degas::LabelIndex_Transaction *this)
{
  uint64_t v2 = degas::LabelIndex_Persisted::update(*((void *)this + 1), *((degas::LabelTable **)this + 3), (void *)this + 5, (void *)this + 8, (void *)this + 11, (void *)this + 14);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*((char **)this + 6));
  *((void *)this + ++*((void *)this + 5) = (char *)this + 48;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*((char **)this + 9));
  *((void *)this + 8) = (char *)this + 72;
  *((void *)this + 10) = 0;
  *((void *)this + 9) = 0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*((char **)this + 12));
  *((void *)this + 1++*((void *)this + 1) = (char *)this + 96;
  *((void *)this + 12) = 0;
  uint64_t v3 = (char *)*((void *)this + 15);
  *((void *)this + 13) = 0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(v3);
  *((void *)this + 14) = (char *)this + 120;
  *((void *)this + 1++*((void *)this + 5) = 0;
  *((void *)this + 16) = 0;
  *((unsigned char *)this + 32) = 0;
  return v2;
}

uint64_t degas::LabelIndex_Persisted::update(uint64_t a1, degas::LabelTable *a2, void *a3, void *a4, void *a5, void *a6)
{
  locuint64_t k = (os_unfair_lock_s *)(a1 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v77 = a2;
  long long v78 = (void *)a1;
  degas::LabelIndex_Persisted::locked_populate((uint64_t **)a1, a2);
  long long v87 = 0u;
  memset(v88, 0, 25);
  BOOL v14 = (void *)*a3;
  long long v12 = a3 + 1;
  unint64_t v13 = v14;
  if (v14 != v12)
  {
    BOOL v15 = (void *)(a1 + 16);
    do
    {
      *(_OWORD *)unint64_t v84 = *((_OWORD *)v13 + 2);
      memset(v85, 0, sizeof(v85));
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>(&v85[8], (long long *)v13[7], (long long *)v13[8], (uint64_t)(v13[8] - v13[7]) >> 4);
      char v86 = *((unsigned char *)v13 + 80);
      unint64_t v16 = v84[0];
      degas::Bitmap::setBit((degas::Bitmap *)&v87, v84[0]);
      uint64_t v17 = (void *)*v15;
      if (!*v15) {
        goto LABEL_14;
      }
      char v18 = (void *)(a1 + 16);
      do
      {
        unint64_t v19 = v17[4];
        BOOL v20 = v19 >= v16;
        if (v19 >= v16) {
          uint64_t v21 = v17;
        }
        else {
          uint64_t v21 = v17 + 1;
        }
        if (v20) {
          char v18 = v17;
        }
        uint64_t v17 = (void *)*v21;
      }
      while (*v21);
      if (v18 != v15 && v16 >= v18[4]) {
        degas::Bitmap::unionWith<degas::Bitmap>((degas::Bitmap *)(v18 + 5), (uint64_t)&v84[1]);
      }
      else {
LABEL_14:
      }
        std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,degas::Bitmap> const&>((uint64_t *)(a1 + 8), v84[0], (uint64_t)v84);
      *(void *)&long long v79 = &v85[8];
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
      long long v22 = (void *)v13[1];
      if (v22)
      {
        do
        {
          long long v23 = v22;
          long long v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          long long v23 = (void *)v13[2];
          BOOL v63 = *v23 == (void)v13;
          unint64_t v13 = v23;
        }
        while (!v63);
      }
      unint64_t v13 = v23;
    }
    while (v23 != v12);
  }
  int v26 = (void *)*a4;
  uint64_t v25 = a4 + 1;
  int v24 = v26;
  if (v26 != v25)
  {
    int v27 = (void *)(a1 + 16);
    do
    {
      *(_OWORD *)unint64_t v84 = *((_OWORD *)v24 + 2);
      memset(v85, 0, sizeof(v85));
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>(&v85[8], (long long *)v24[7], (long long *)v24[8], (uint64_t)(v24[8] - v24[7]) >> 4);
      char v86 = *((unsigned char *)v24 + 80);
      unint64_t v28 = v84[0];
      degas::Bitmap::setBit((degas::Bitmap *)&v87, v84[0]);
      double v29 = (void *)*v27;
      if (*v27)
      {
        double v30 = v27;
        do
        {
          unint64_t v31 = v29[4];
          BOOL v32 = v31 >= v28;
          if (v31 >= v28) {
            double v33 = v29;
          }
          else {
            double v33 = v29 + 1;
          }
          if (v32) {
            double v30 = v29;
          }
          double v29 = (void *)*v33;
        }
        while (*v33);
        if (v30 != v27 && v28 >= v30[4]) {
          degas::Bitmap::diffWith<degas::Bitmap>((degas::Bitmap *)(v30 + 5), (degas::Bitmap *)&v84[1]);
        }
      }
      *(void *)&long long v79 = &v85[8];
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
      double v34 = (void *)v24[1];
      if (v34)
      {
        do
        {
          uint64_t v35 = v34;
          double v34 = (void *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          uint64_t v35 = (void *)v24[2];
          BOOL v63 = *v35 == (void)v24;
          int v24 = v35;
        }
        while (!v63);
      }
      int v24 = v35;
    }
    while (v35 != v25);
  }
  unsigned __int8 v38 = (void *)*a5;
  uint64_t v37 = a5 + 1;
  uint64_t v36 = v38;
  if (v38 != v37)
  {
    int v39 = v78 + 5;
    do
    {
      *(_OWORD *)unint64_t v84 = *((_OWORD *)v36 + 2);
      memset(v85, 0, sizeof(v85));
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>(&v85[8], (long long *)v36[7], (long long *)v36[8], (uint64_t)(v36[8] - v36[7]) >> 4);
      char v86 = *((unsigned char *)v36 + 80);
      unint64_t v40 = v84[0];
      degas::Bitmap::setBit((degas::Bitmap *)&v87, v84[0]);
      int32x4_t v41 = (void *)*v39;
      if (!*v39) {
        goto LABEL_56;
      }
      char v42 = v78 + 5;
      do
      {
        unint64_t v43 = v41[4];
        BOOL v44 = v43 >= v40;
        if (v43 >= v40) {
          uint64_t v45 = v41;
        }
        else {
          uint64_t v45 = v41 + 1;
        }
        if (v44) {
          char v42 = v41;
        }
        int32x4_t v41 = (void *)*v45;
      }
      while (*v45);
      if (v42 != v39 && v40 >= v42[4]) {
        degas::Bitmap::unionWith<degas::Bitmap>((degas::Bitmap *)(v42 + 5), (uint64_t)&v84[1]);
      }
      else {
LABEL_56:
      }
        std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,degas::Bitmap> const&>(v78 + 4, v84[0], (uint64_t)v84);
      *(void *)&long long v79 = &v85[8];
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
      unsigned int v46 = (void *)v36[1];
      if (v46)
      {
        do
        {
          uint64_t v47 = v46;
          unsigned int v46 = (void *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          uint64_t v47 = (void *)v36[2];
          BOOL v63 = *v47 == (void)v36;
          uint64_t v36 = v47;
        }
        while (!v63);
      }
      uint64_t v36 = v47;
    }
    while (v47 != v37);
  }
  unint64_t v50 = (void *)*a6;
  uint64_t v49 = a6 + 1;
  int32x4_t v48 = v50;
  if (v50 != v49)
  {
    long long v51 = v78 + 5;
    do
    {
      *(_OWORD *)unint64_t v84 = *((_OWORD *)v48 + 2);
      memset(v85, 0, sizeof(v85));
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>(&v85[8], (long long *)v48[7], (long long *)v48[8], (uint64_t)(v48[8] - v48[7]) >> 4);
      char v86 = *((unsigned char *)v48 + 80);
      unint64_t v52 = v84[0];
      degas::Bitmap::setBit((degas::Bitmap *)&v87, v84[0]);
      uint64_t v53 = (void *)*v51;
      if (*v51)
      {
        id v54 = v78 + 5;
        do
        {
          unint64_t v55 = v53[4];
          BOOL v56 = v55 >= v52;
          if (v55 >= v52) {
            uint64_t v57 = v53;
          }
          else {
            uint64_t v57 = v53 + 1;
          }
          if (v56) {
            id v54 = v53;
          }
          uint64_t v53 = (void *)*v57;
        }
        while (*v57);
        if (v54 != v51 && v52 >= v54[4]) {
          degas::Bitmap::diffWith<degas::Bitmap>((degas::Bitmap *)(v54 + 5), (degas::Bitmap *)&v84[1]);
        }
      }
      *(void *)&long long v79 = &v85[8];
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
      unsigned int v58 = (void *)v48[1];
      if (v58)
      {
        do
        {
          uint64_t v59 = v58;
          unsigned int v58 = (void *)*v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          uint64_t v59 = (void *)v48[2];
          BOOL v63 = *v59 == (void)v48;
          int32x4_t v48 = v59;
        }
        while (!v63);
      }
      int32x4_t v48 = v59;
    }
    while (v59 != v49);
  }
  degas::Bitmap::begin(&v87, &v81);
  int32x4_t v60 = v78 + 2;
  uint64_t v61 = v78 + 5;
  while (1)
  {
    unint64_t v62 = v82;
    BOOL v63 = (long long *)v81 == &v87 && v82 == -1;
    if (v63) {
      break;
    }
LABEL_93:
    *(_OWORD *)unint64_t v84 = 0u;
    memset(v85, 0, 25);
    long long v79 = 0u;
    memset(v80, 0, 25);
    uint64_t v64 = (void *)*v60;
    if (*v60)
    {
      uint64_t v65 = v78 + 2;
      do
      {
        unint64_t v66 = v64[4];
        BOOL v67 = v66 >= v62;
        if (v66 >= v62) {
          unint64_t v68 = v64;
        }
        else {
          unint64_t v68 = v64 + 1;
        }
        if (v67) {
          uint64_t v65 = v64;
        }
        uint64_t v64 = (void *)*v68;
      }
      while (*v68);
      if (v65 != v60 && v62 >= v65[4]) {
        degas::Bitmap::operator=(v84, v65 + 5);
      }
    }
    uint64_t v69 = (void *)*v61;
    if (*v61)
    {
      long long v70 = v78 + 5;
      do
      {
        unint64_t v71 = v69[4];
        BOOL v72 = v71 >= v62;
        if (v71 >= v62) {
          uint64_t v73 = v69;
        }
        else {
          uint64_t v73 = v69 + 1;
        }
        if (v72) {
          long long v70 = v69;
        }
        uint64_t v69 = (void *)*v73;
      }
      while (*v73);
      if (v70 != v61 && v62 >= v70[4]) {
        degas::Bitmap::operator=(&v79, v70 + 5);
      }
    }
    uint64_t v74 = degas::LabelTable::update(v77, v62, (const degas::Bitmap *)v84, (const degas::Bitmap *)&v79);
    uint64_t v89 = (void **)v80;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v89);
    *(void *)&long long v79 = v85;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (v74) {
      goto LABEL_120;
    }
    degas::Bitmap::iterator::operator++(&v81);
  }
  if (v83 != v88[1])
  {
    unint64_t v62 = -1;
    goto LABEL_93;
  }
  uint64_t v74 = 0;
LABEL_120:
  os_unfair_lock_unlock(lock);
  v84[0] = (unint64_t)v88;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
  return v74;
}

void sub_1D173B91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a13);
  a23 = (void **)(v23 - 128);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,degas::Bitmap> const&>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t **)result;
  uint64_t v5 = (uint64_t **)(result + 1);
  uint64_t v4 = (uint64_t *)result[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v4;
        unint64_t v7 = v4[4];
        if (v7 <= a2) {
          break;
        }
        uint64_t v4 = *v6;
        uint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= a2) {
        break;
      }
      uint64_t v4 = v6[1];
      if (!v4)
      {
        uint64_t v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v6 = (uint64_t **)(result + 1);
LABEL_9:
    std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__construct_node<std::pair<unsigned long long const,degas::Bitmap> const&>((uint64_t)&v8, (uint64_t)result, a3);
    return std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::__insert_node_at(v3, (uint64_t)v6, v5, v8);
  }
  return result;
}

uint64_t degas::LabelIndex_Transaction::beginTransaction(uint64_t this)
{
  *(unsigned char *)(this + 32) = 1;
  return this;
}

void degas::LabelIndex_Transaction::allEdgeIdentifiers(degas::LabelIndex_Transaction *this, degas::Bitmap *a2)
{
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = (degas::LabelTable *)*((void *)this + 3);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 56));
  degas::LabelIndex_Persisted::locked_populate((uint64_t **)v4, v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 56));
  (*(void (**)(void, degas::Bitmap *))(**((void **)this + 1) + 40))(*((void *)this + 1), a2);
  uint64_t v6 = (degas::LabelIndex_Transaction *)*((void *)this + 11);
  if (v6 != (degas::LabelIndex_Transaction *)((char *)this + 96))
  {
    do
    {
      long long v13 = *((_OWORD *)v6 + 2);
      long long v14 = 0u;
      long long v15 = 0u;
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v14 + 8, *((long long **)v6 + 7), *((long long **)v6 + 8), (uint64_t)(*((void *)v6 + 8) - *((void *)v6 + 7)) >> 4);
      char v16 = *((unsigned char *)v6 + 80);
      degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)&v13 + 8);
      uint64_t v17 = (void **)&v14 + 1;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v17);
      unint64_t v7 = (degas::LabelIndex_Transaction *)*((void *)v6 + 1);
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          unint64_t v7 = *(degas::LabelIndex_Transaction **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (degas::LabelIndex_Transaction *)*((void *)v6 + 2);
          BOOL v9 = *(void *)v8 == (void)v6;
          uint64_t v6 = v8;
        }
        while (!v9);
      }
      uint64_t v6 = v8;
    }
    while (v8 != (degas::LabelIndex_Transaction *)((char *)this + 96));
  }
  char v10 = (degas::LabelIndex_Transaction *)*((void *)this + 14);
  if (v10 != (degas::LabelIndex_Transaction *)((char *)this + 120))
  {
    do
    {
      long long v13 = *((_OWORD *)v10 + 2);
      long long v14 = 0u;
      long long v15 = 0u;
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v14 + 8, *((long long **)v10 + 7), *((long long **)v10 + 8), (uint64_t)(*((void *)v10 + 8) - *((void *)v10 + 7)) >> 4);
      char v16 = *((unsigned char *)v10 + 80);
      degas::Bitmap::diffWith<degas::Bitmap>(a2, (degas::Bitmap *)((char *)&v13 + 8));
      uint64_t v17 = (void **)&v14 + 1;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v17);
      char v11 = (degas::LabelIndex_Transaction *)*((void *)v10 + 1);
      if (v11)
      {
        do
        {
          long long v12 = v11;
          char v11 = *(degas::LabelIndex_Transaction **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          long long v12 = (degas::LabelIndex_Transaction *)*((void *)v10 + 2);
          BOOL v9 = *(void *)v12 == (void)v10;
          char v10 = v12;
        }
        while (!v9);
      }
      char v10 = v12;
    }
    while (v12 != (degas::LabelIndex_Transaction *)((char *)this + 120));
  }
}

void sub_1D173BC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Transaction::allNodeIdentifiers(degas::LabelIndex_Transaction *this, degas::Bitmap *a2)
{
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = (degas::LabelTable *)*((void *)this + 3);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 56));
  degas::LabelIndex_Persisted::locked_populate((uint64_t **)v4, v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 56));
  (*(void (**)(void, degas::Bitmap *))(**((void **)this + 1) + 32))(*((void *)this + 1), a2);
  uint64_t v6 = (degas::LabelIndex_Transaction *)*((void *)this + 5);
  if (v6 != (degas::LabelIndex_Transaction *)((char *)this + 48))
  {
    do
    {
      long long v13 = *((_OWORD *)v6 + 2);
      long long v14 = 0u;
      long long v15 = 0u;
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v14 + 8, *((long long **)v6 + 7), *((long long **)v6 + 8), (uint64_t)(*((void *)v6 + 8) - *((void *)v6 + 7)) >> 4);
      char v16 = *((unsigned char *)v6 + 80);
      degas::Bitmap::unionWith<degas::Bitmap>(a2, (uint64_t)&v13 + 8);
      uint64_t v17 = (void **)&v14 + 1;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v17);
      unint64_t v7 = (degas::LabelIndex_Transaction *)*((void *)v6 + 1);
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          unint64_t v7 = *(degas::LabelIndex_Transaction **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (degas::LabelIndex_Transaction *)*((void *)v6 + 2);
          BOOL v9 = *(void *)v8 == (void)v6;
          uint64_t v6 = v8;
        }
        while (!v9);
      }
      uint64_t v6 = v8;
    }
    while (v8 != (degas::LabelIndex_Transaction *)((char *)this + 48));
  }
  char v10 = (degas::LabelIndex_Transaction *)*((void *)this + 8);
  if (v10 != (degas::LabelIndex_Transaction *)((char *)this + 72))
  {
    do
    {
      long long v13 = *((_OWORD *)v10 + 2);
      long long v14 = 0u;
      long long v15 = 0u;
      std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)&v14 + 8, *((long long **)v10 + 7), *((long long **)v10 + 8), (uint64_t)(*((void *)v10 + 8) - *((void *)v10 + 7)) >> 4);
      char v16 = *((unsigned char *)v10 + 80);
      degas::Bitmap::diffWith<degas::Bitmap>(a2, (degas::Bitmap *)((char *)&v13 + 8));
      uint64_t v17 = (void **)&v14 + 1;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v17);
      char v11 = (degas::LabelIndex_Transaction *)*((void *)v10 + 1);
      if (v11)
      {
        do
        {
          long long v12 = v11;
          char v11 = *(degas::LabelIndex_Transaction **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          long long v12 = (degas::LabelIndex_Transaction *)*((void *)v10 + 2);
          BOOL v9 = *(void *)v12 == (void)v10;
          char v10 = v12;
        }
        while (!v9);
      }
      char v10 = v12;
    }
    while (v12 != (degas::LabelIndex_Transaction *)((char *)this + 72));
  }
}

void sub_1D173BE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Transaction::edgeIdentifiersForLabelIdentifier(degas::LabelIndex_Transaction *this, unint64_t a2, degas::Bitmap *a3)
{
  uint64_t v6 = *((void *)this + 1);
  unint64_t v7 = (degas::LabelTable *)*((void *)this + 3);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 56));
  degas::LabelIndex_Persisted::locked_populate((uint64_t **)v6, v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 56));
  (*(void (**)(void, unint64_t, degas::Bitmap *))(**((void **)this + 1) + 24))(*((void *)this + 1), a2, a3);
  BOOL v8 = (void *)*((void *)this + 12);
  if (v8)
  {
    BOOL v9 = (void *)((char *)this + 96);
    do
    {
      unint64_t v10 = v8[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        long long v12 = v8;
      }
      else {
        long long v12 = v8 + 1;
      }
      if (v11) {
        BOOL v9 = v8;
      }
      BOOL v8 = (void *)*v12;
    }
    while (*v12);
    if (v9 != (void *)((char *)this + 96) && v9[4] <= a2) {
      degas::Bitmap::unionWith<degas::Bitmap>(a3, (uint64_t)(v9 + 5));
    }
  }
  long long v15 = (void *)*((void *)this + 15);
  long long v14 = (char *)this + 120;
  long long v13 = v15;
  if (v15)
  {
    char v16 = v14;
    do
    {
      unint64_t v17 = v13[4];
      BOOL v18 = v17 >= a2;
      if (v17 >= a2) {
        unint64_t v19 = v13;
      }
      else {
        unint64_t v19 = v13 + 1;
      }
      if (v18) {
        char v16 = (char *)v13;
      }
      long long v13 = (void *)*v19;
    }
    while (*v19);
    if (v16 != v14 && *((void *)v16 + 4) <= a2)
    {
      degas::Bitmap::diffWith<degas::Bitmap>(a3, (degas::Bitmap *)(v16 + 40));
    }
  }
}

void degas::LabelIndex_Transaction::nodeIdentifiersForLabelIdentifier(degas::LabelIndex_Transaction *this, unint64_t a2, degas::Bitmap *a3)
{
  uint64_t v6 = *((void *)this + 1);
  unint64_t v7 = (degas::LabelTable *)*((void *)this + 3);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 56));
  degas::LabelIndex_Persisted::locked_populate((uint64_t **)v6, v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 56));
  (*(void (**)(void, unint64_t, degas::Bitmap *))(**((void **)this + 1) + 16))(*((void *)this + 1), a2, a3);
  BOOL v8 = (void *)*((void *)this + 6);
  if (v8)
  {
    BOOL v9 = (void *)((char *)this + 48);
    do
    {
      unint64_t v10 = v8[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        long long v12 = v8;
      }
      else {
        long long v12 = v8 + 1;
      }
      if (v11) {
        BOOL v9 = v8;
      }
      BOOL v8 = (void *)*v12;
    }
    while (*v12);
    if (v9 != (void *)((char *)this + 48) && v9[4] <= a2) {
      degas::Bitmap::unionWith<degas::Bitmap>(a3, (uint64_t)(v9 + 5));
    }
  }
  long long v15 = (void *)*((void *)this + 9);
  long long v14 = (char *)this + 72;
  long long v13 = v15;
  if (v15)
  {
    char v16 = v14;
    do
    {
      unint64_t v17 = v13[4];
      BOOL v18 = v17 >= a2;
      if (v17 >= a2) {
        unint64_t v19 = v13;
      }
      else {
        unint64_t v19 = v13 + 1;
      }
      if (v18) {
        char v16 = (char *)v13;
      }
      long long v13 = (void *)*v19;
    }
    while (*v19);
    if (v16 != v14 && *((void *)v16 + 4) <= a2)
    {
      degas::Bitmap::diffWith<degas::Bitmap>(a3, (degas::Bitmap *)(v16 + 40));
    }
  }
}

void degas::LabelIndex_Transaction::~LabelIndex_Transaction(char **this)
{
  degas::LabelIndex_Transaction::~LabelIndex_Transaction(this);
  JUMPOUT(0x1D25F9A90);
}

{
  std::__shared_weak_count *v2;

  *this = (char *)&unk_1F28011F0;
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[15]);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[12]);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[9]);
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(this[6]);
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t degas::LabelIndexDirectory::LabelIndexDirectory(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + 8) = 0;
  *(void *)this = this + 8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)(this + 16) = 0;
  *(void *)(this + 8) = 0;
  *(void *)this = this + 8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void degas::LabelIndexDirectory::indexForDatabasePath(os_unfair_lock_s *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = a1 + 6;
  os_unfair_lock_lock(a1 + 6);
  unint64_t v7 = (os_unfair_lock_s *)std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::find<std::string>((uint64_t)a1, a2);
  if (&a1[2] == v7) {
    operator new();
  }
  os_unfair_lock_unlock(v6);
  uint64_t v8 = *(void *)&v7[16]._os_unfair_lock_opaque;
  *a3 = *(void *)&v7[14]._os_unfair_lock_opaque;
  a3[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1D173C43C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::find<std::string>(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = std::less<std::string>::operator()[abi:ne180100](v3 + 4, a2);
    unint64_t v7 = v3 + 1;
    if (!v6)
    {
      unint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::less<std::string>::operator()[abi:ne180100](a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

uint64_t std::pair<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<degas::LabelIndex_Persisted>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

BOOL std::less<std::string>::operator()[abi:ne180100](void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

uint64_t std::__shared_ptr_pointer<degas::LabelIndex_Persisted *,std::shared_ptr<degas::LabelIndex_Persisted>::__shared_ptr_default_delete<degas::LabelIndex_Persisted,degas::LabelIndex_Persisted>,std::allocator<degas::LabelIndex_Persisted>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CCDD5)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::LabelIndex_Persisted *,std::shared_ptr<degas::LabelIndex_Persisted>::__shared_ptr_default_delete<degas::LabelIndex_Persisted,degas::LabelIndex_Persisted>,std::allocator<degas::LabelIndex_Persisted>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::LabelIndex_Persisted *,std::shared_ptr<degas::LabelIndex_Persisted>::__shared_ptr_default_delete<degas::LabelIndex_Persisted,degas::LabelIndex_Persisted>,std::allocator<degas::LabelIndex_Persisted>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

uint64_t degas::LabelIndex_Persisted::LabelIndex_Persisted(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1F28010D0;
  *(void *)(this + 8) = this + 16;
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = this + 40;
  *(_DWORD *)(this + 56) = 0;
  *(unsigned char *)(this + 60) = 0;
  return this;
}

{
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1F28010D0;
  *(void *)(this + 8) = this + 16;
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = this + 40;
  *(_DWORD *)(this + 56) = 0;
  *(unsigned char *)(this + 60) = 0;
  return this;
}

void degas::LabelIndexDirectory::resetIndexForDatabasePath(os_unfair_lock_s *a1, void *a2)
{
  size_t v4 = a1 + 6;
  os_unfair_lock_lock(a1 + 6);
  size_t v5 = (os_unfair_lock_s *)std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::find<std::string>((uint64_t)a1, a2);
  if (&a1[2] != v5) {
    (*(void (**)(void))(**(void **)&v5[14]._os_unfair_lock_opaque + 72))(*(void *)&v5[14]._os_unfair_lock_opaque);
  }
  os_unfair_lock_unlock(v4);
}

void *degas::LabelIndex::LabelIndex(void *this)
{
  *this = &unk_1F2800FB0;
  return this;
}

void *degas::LabelIndex_Immediate::LabelIndex_Immediate(void *result, uint64_t a2)
{
  *uint64_t result = &unk_1F2801040;
  result[1] = a2;
  return result;
}

{
  *uint64_t result = &unk_1F2801040;
  result[1] = a2;
  return result;
}

void degas::LabelIndex_Persisted::populate(os_unfair_lock_s *this, degas::LabelTable *a2)
{
  size_t v4 = this + 14;
  os_unfair_lock_lock(this + 14);
  degas::LabelIndex_Persisted::locked_populate((uint64_t **)this, a2);
  os_unfair_lock_unlock(v4);
}

uint64_t degas::LabelIndex_Snapshot::LabelIndex_Snapshot(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F2801160;
  size_t v6 = (void *)(a1 + 8);
  degas::indexDirectory((degas *)a1);
  degas::LabelIndexDirectory::indexForDatabasePath((os_unfair_lock_s *)&degas::indexDirectory(void)::sIndexDirectory, a2, v6);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 80) = 0;
  if (!*(void *)(a1 + 8)) {
    __assert_rtn("LabelIndex_Snapshot", "labelIndex.cpp", 460, "_baseIndex");
  }
  return a1;
}

void sub_1D173C994(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*(char **)(v1 + 64));
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*(char **)(v1 + 40));
  int v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

void degas::indexDirectory(degas *this)
{
  {
    qword_1EBD275E8 = 0;
    qword_1EBD275E0 = 0;
    degas::indexDirectory(void)::sIndexDirectory = (uint64_t)&qword_1EBD275E0;
    dword_1EBD275F0 = 0;
    __cxa_atexit((void (*)(void *))degas::LabelIndexDirectory::~LabelIndexDirectory, &degas::indexDirectory(void)::sIndexDirectory, &dword_1D1654000);
  }
}

void degas::LabelIndexDirectory::~LabelIndexDirectory(degas::LabelIndexDirectory *this)
{
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<degas::LabelIndex_Persisted>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t degas::LabelIndex_Transaction::LabelIndex_Transaction(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F28011F0;
  size_t v6 = (void *)(a1 + 8);
  degas::indexDirectory((degas *)a1);
  degas::LabelIndexDirectory::indexForDatabasePath((os_unfair_lock_s *)&degas::indexDirectory(void)::sIndexDirectory, a2, v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  if (!*(void *)(a1 + 8)) {
    __assert_rtn("LabelIndex_Transaction", "labelIndex.cpp", 554, "_baseIndex");
  }
  return a1;
}

void sub_1D173CBA0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*(char **)(v1 + 120));
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*(char **)(v1 + 96));
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*(char **)(v1 + 72));
  std::__tree<std::__value_type<unsigned long long,degas::Bitmap>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,degas::Bitmap>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,degas::Bitmap>>>::destroy(*(char **)(v1 + 48));
  int v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

void degas::LabelIndex_Transaction::resetForPath(degas *a1)
{
  degas::indexDirectory(a1);
  degas::LabelIndexDirectory::resetIndexForDatabasePath((os_unfair_lock_s *)&degas::indexDirectory(void)::sIndexDirectory, a1);
}

uint64_t degas::TransactionLogTable::deleteEntry(sqlite3 **this, sqlite3_int64 a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  size_t v4 = degas::TransactionLogTable::deleteStatement((degas::TransactionLogTable *)this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v4, 1, a2);
  uint64_t v5 = degas::Statement::update((sqlite3_stmt **)*v4);
  if (v5 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v7 = sqlite3_errmsg(this[4]);
    int v8 = 136315138;
    BOOL v9 = v7;
    _os_log_error_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "transaction log entry delete failed: %s", (uint8_t *)&v8, 0xCu);
  }
  return v5;
}

uint64_t *degas::TransactionLogTable::deleteStatement(degas::TransactionLogTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas19TransactionLogTable15deleteStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_4_1192;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19TransactionLogTable15deleteStatementEv_block_invoke()
{
}

void sub_1D173CE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::TransactionLogTable::createTable(degas::TransactionLogTable *this)
{
  unsigned int v1 = (sqlite3 *)*((void *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "create table TransactionLog (identifier integer primary key autoincrement, nodeIdsInserted blob, edgeIdsInserted blob, nodeIdsUpdated blob, edgeIdsUpdated blob, nodeIdsDeleted blob, edgeIdsDeleted blob)");
  degas::Statement::Statement(ppStmt, v1, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = degas::Statement::update(ppStmt);
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  return v2;
}

void sub_1D173CED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void degas::TransactionLogTable::~TransactionLogTable(degas::TransactionLogTable *this)
{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1D25F9A90);
}

{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

degas::TransactionLogTable *degas::TransactionLogTable::TransactionLogTable(degas::TransactionLogTable *this, sqlite3 *a2, degas::StatementCache *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "TransactionLog");
  *(void *)this = &unk_1F2801DE0;
  size_t v6 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v7 = SHIBYTE(v10);
    *((void *)this + 4) = a2;
    *((void *)this + ++*((void *)this + 5) = a3;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void *)this + 3) = v10;
    *((void *)this + 4) = a2;
    *((void *)this + ++*((void *)this + 5) = a3;
  }
  *(void *)this = &unk_1F2801340;
  *((unsigned char *)this + 48) = 13;
  return this;
}

void sub_1D173D090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *degas::TransactionLogTable::insertStatement(degas::TransactionLogTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas19TransactionLogTable15insertStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_1198;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19TransactionLogTable15insertStatementEv_block_invoke()
{
}

void sub_1D173D21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::TransactionLogTable::readByIdentifierStatement(degas::TransactionLogTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x600;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas19TransactionLogTable25readByIdentifierStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_6_1200;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19TransactionLogTable25readByIdentifierStatementEv_block_invoke()
{
}

void sub_1D173D37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::TransactionLogTable::readAfterIdentifierStatement(degas::TransactionLogTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x800;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas19TransactionLogTable28readAfterIdentifierStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_8;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19TransactionLogTable28readAfterIdentifierStatementEv_block_invoke()
{
}

void sub_1D173D4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::TransactionLogTable::readAllStatement(degas::TransactionLogTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x700;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas19TransactionLogTable16readAllStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_10_1203;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19TransactionLogTable16readAllStatementEv_block_invoke()
{
}

void sub_1D173D63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::TransactionLogTable::insert(sqlite3 **this, sqlite3_int64 *a2, const degas::Bitmap *a3, const degas::Bitmap *a4, const degas::Bitmap *a5, const degas::Bitmap *a6, const degas::Bitmap *a7, const degas::Bitmap *a8)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  inserted = degas::TransactionLogTable::insertStatement((degas::TransactionLogTable *)this);
  degas::Statement::bindBitmap((degas::Statement *)*inserted, (const Bitmap *)1, a3);
  degas::Statement::bindBitmap((degas::Statement *)*inserted, (const Bitmap *)2, a4);
  degas::Statement::bindBitmap((degas::Statement *)*inserted, (const Bitmap *)3, a5);
  degas::Statement::bindBitmap((degas::Statement *)*inserted, (const Bitmap *)4, a6);
  degas::Statement::bindBitmap((degas::Statement *)*inserted, (const Bitmap *)5, a7);
  degas::Statement::bindBitmap((degas::Statement *)*inserted, (const Bitmap *)6, a8);
  uint64_t v17 = degas::Statement::update((sqlite3_stmt **)*inserted);
  if (v17)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      BOOL v18 = sqlite3_errmsg(this[4]);
      int v20 = 136315138;
      uint64_t v21 = v18;
      _os_log_error_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "transaction log entry insert failed: %s", (uint8_t *)&v20, 0xCu);
    }
  }
  else
  {
    *a2 = sqlite3_last_insert_rowid(this[4]);
  }
  return v17;
}

uint64_t *degas::TransactionLogTable::prepareStatementToReadByIdentifier(degas::TransactionLogTable *this, sqlite3_int64 a2)
{
  int v3 = degas::TransactionLogTable::readByIdentifierStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v3, 1, a2);
  return v3;
}

uint64_t *degas::TransactionLogTable::prepareStatementToReadAfterIdentifier(degas::TransactionLogTable *this, sqlite3_int64 a2)
{
  int v3 = degas::TransactionLogTable::readAfterIdentifierStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v3, 1, a2);
  return v3;
}

degas::TransactionLogCursor *degas::TransactionLogCursor::TransactionLogCursor(degas::TransactionLogCursor *this, const degas::TransactionLogTable *a2)
{
  AllStatement = degas::TransactionLogTable::readAllStatement(a2);
  uint64_t v4 = AllStatement[1];
  *(void *)this = *AllStatement;
  *((void *)this + ++*((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

{
  uint64_t *AllStatement;
  uint64_t v4;

  AllStatement = degas::TransactionLogTable::readAllStatement(a2);
  uint64_t v4 = AllStatement[1];
  *(void *)this = *AllStatement;
  *((void *)this + ++*((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

degas::TransactionLogCursor *degas::TransactionLogCursor::TransactionLogCursor(degas::TransactionLogCursor *this, sqlite3_int64 a2, const degas::TransactionLogTable *a3)
{
  char v5 = degas::TransactionLogTable::readByIdentifierStatement(a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 1, a2);
  uint64_t v6 = v5[1];
  *(void *)this = *v5;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

degas::TransactionLogCursor *degas::TransactionLogCursor::TransactionLogCursor(degas::TransactionLogCursor *this, sqlite3_int64 a2, unsigned int a3, const degas::TransactionLogTable *a4)
{
  uint64_t v6 = degas::TransactionLogTable::readAfterIdentifierStatement(a4);
  degas::Statement::bindInteger((sqlite3_stmt **)*v6, 1, a2);
  uint64_t v7 = v6[1];
  *(void *)this = *v6;
  *((void *)this + ++*((void *)this + 1) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

sqlite3_int64 degas::TransactionLogCursor::transactionId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 0);
}

unsigned int *degas::TransactionLogCursor::insertedNodeIds(sqlite3_stmt ***this)
{
  return degas::Statement::literalBitmapColumnValue(*this, 1);
}

unsigned int *degas::TransactionLogCursor::insertedEdgeIds(sqlite3_stmt ***this)
{
  return degas::Statement::literalBitmapColumnValue(*this, 2);
}

unsigned int *degas::TransactionLogCursor::updatedNodeIds(sqlite3_stmt ***this)
{
  return degas::Statement::literalBitmapColumnValue(*this, 3);
}

unsigned int *degas::TransactionLogCursor::updatedEdgeIds(sqlite3_stmt ***this)
{
  return degas::Statement::literalBitmapColumnValue(*this, 4);
}

unsigned int *degas::TransactionLogCursor::deletedNodeIds(sqlite3_stmt ***this)
{
  return degas::Statement::literalBitmapColumnValue(*this, 5);
}

unsigned int *degas::TransactionLogCursor::deletedEdgeIds(sqlite3_stmt ***this)
{
  return degas::Statement::literalBitmapColumnValue(*this, 6);
}

uint64_t degas::ClientLogTable::deleteEntry(sqlite3 **this, sqlite3_int64 a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = degas::ClientLogTable::deleteStatement((degas::ClientLogTable *)this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v4, 1, a2);
  uint64_t v5 = degas::Statement::update((sqlite3_stmt **)*v4);
  if (v5 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = sqlite3_errmsg(this[4]);
    int v8 = 136315138;
    BOOL v9 = v7;
    _os_log_error_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "client log entry delete failed: %s", (uint8_t *)&v8, 0xCu);
  }
  return v5;
}

uint64_t *degas::ClientLogTable::deleteStatement(degas::ClientLogTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas14ClientLogTable15deleteStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_4_1207;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas14ClientLogTable15deleteStatementEv_block_invoke()
{
}

void sub_1D173DC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::ClientLogTable::createTable(degas::ClientLogTable *this)
{
  unsigned int v1 = (sqlite3 *)*((void *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "create table ClientLog (clientId integer primary key, transactionId integer)");
  degas::Statement::Statement(ppStmt, v1, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = degas::Statement::update(ppStmt);
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  return v2;
}

void sub_1D173DCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void degas::ClientLogTable::~ClientLogTable(degas::ClientLogTable *this)
{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1D25F9A90);
}

{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

degas::ClientLogTable *degas::ClientLogTable::ClientLogTable(degas::ClientLogTable *this, sqlite3 *a2, degas::StatementCache *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ClientLog");
  *(void *)this = &unk_1F2801DE0;
  uint64_t v6 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v7 = SHIBYTE(v10);
    *((void *)this + 4) = a2;
    *((void *)this + ++*((void *)this + 5) = a3;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void *)this + 3) = v10;
    *((void *)this + 4) = a2;
    *((void *)this + ++*((void *)this + 5) = a3;
  }
  *(void *)this = &unk_1F2801388;
  *((unsigned char *)this + 48) = 14;
  return this;
}

void sub_1D173DE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *degas::ClientLogTable::upsertStatement(degas::ClientLogTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas14ClientLogTable15upsertStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_1213;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas14ClientLogTable15upsertStatementEv_block_invoke()
{
}

void sub_1D173E020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::ClientLogTable::readByIdentifierStatement(degas::ClientLogTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x600;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas14ClientLogTable25readByIdentifierStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_6_1215;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas14ClientLogTable25readByIdentifierStatementEv_block_invoke()
{
}

void sub_1D173E180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::ClientLogTable::readAllStatement(degas::ClientLogTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x700;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas14ClientLogTable16readAllStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_8_1217;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas14ClientLogTable16readAllStatementEv_block_invoke()
{
}

void sub_1D173E2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::ClientLogTable::upsert(sqlite3 **this, sqlite3_int64 a2, sqlite3_int64 *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = degas::ClientLogTable::upsertStatement((degas::ClientLogTable *)this);
  int v8 = (sqlite3_stmt **)*v6;
  int v7 = (std::__shared_weak_count *)v6[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  degas::Statement::bindInteger(v8, 1, a2);
  degas::Statement::bindInteger(v8, 2, *a3);
  uint64_t v9 = degas::Statement::update(v8);
  if (v9 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    BOOL v11 = sqlite3_errmsg(this[4]);
    int v12 = 136315138;
    long long v13 = v11;
    _os_log_error_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "client log entry upsert failed: %s", (uint8_t *)&v12, 0xCu);
    if (!v7) {
      return v9;
    }
    goto LABEL_6;
  }
  if (v7) {
LABEL_6:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  return v9;
}

void sub_1D173E448(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *degas::ClientLogTable::prepareStatementToReadByIdentifier(degas::ClientLogTable *this, sqlite3_int64 a2)
{
  int v3 = degas::ClientLogTable::readByIdentifierStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v3, 1, a2);
  return v3;
}

degas::ClientLogCursor *degas::ClientLogCursor::ClientLogCursor(degas::ClientLogCursor *this, const degas::ClientLogTable *a2)
{
  AllStatement = degas::ClientLogTable::readAllStatement(a2);
  uint64_t v4 = AllStatement[1];
  *(void *)this = *AllStatement;
  *((void *)this + ++*((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

{
  uint64_t *AllStatement;
  uint64_t v4;

  AllStatement = degas::ClientLogTable::readAllStatement(a2);
  uint64_t v4 = AllStatement[1];
  *(void *)this = *AllStatement;
  *((void *)this + ++*((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

degas::ClientLogCursor *degas::ClientLogCursor::ClientLogCursor(degas::ClientLogCursor *this, sqlite3_int64 a2, const degas::ClientLogTable *a3)
{
  char v5 = degas::ClientLogTable::readByIdentifierStatement(a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 1, a2);
  uint64_t v6 = v5[1];
  *(void *)this = *v5;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

sqlite3_int64 degas::ClientLogCursor::clientId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 0);
}

sqlite3_int64 degas::ClientLogCursor::transactionId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 1);
}

void MABenchmarkGetHostMemory(void *a1, void *a2)
{
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  long long v11 = 0u;
  *(_OWORD *)host_info_out = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  long long v10 = 0u;
  mach_msg_type_number_t host_info_outCnt = 15;
  host_t v4 = MEMORY[0x1D25F9F40]();
  mach_error_t v5 = host_statistics(v4, 2, host_info_out, &host_info_outCnt);
  if (v5) {
    mach_error("can't get host_vm_info???\n", v5);
  }
  mach_msg_type_number_t host_info_outCnt = 12;
  host_t v6 = MEMORY[0x1D25F9F40]();
  mach_error_t v7 = host_info(v6, 1, v9, &host_info_outCnt);
  if (v7) {
    mach_error("can't get host_basic_info???\n", v7);
  }
  *a2 = *MEMORY[0x1E4F14B00] * host_info_out[0];
  *a1 = *((void *)&v11 + 1);
}

uint64_t MABenchmarkGetAppMemory()
{
  long long v4 = 0u;
  long long v5 = 0u;
  *(_OWORD *)task_info_out = 0u;
  mach_msg_type_number_t task_info_outCnt = 12;
  mach_error_t v0 = task_info(*MEMORY[0x1E4F14960], 0x14u, task_info_out, &task_info_outCnt);
  if (v0) {
    mach_error("can't get task_basic_info???\n", v0);
  }
  return *(void *)&task_info_out[2];
}

uint64_t MABenchmarkGetAppMallocMemory()
{
  return 0;
}

uint64_t degas::AttributeValueTable::deleteValue(degas::AttributeValueTable *this, sqlite3_int64 a2, sqlite3_int64 a3)
{
  long long v5 = degas::AttributeValueTable::deleteValueStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 1, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 2, a2);
  host_t v6 = (sqlite3_stmt **)*v5;
  return degas::Statement::update(v6);
}

uint64_t *degas::AttributeValueTable::deleteValueStatement(degas::AttributeValueTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x501;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas19AttributeValueTable20deleteValueStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_28;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19AttributeValueTable20deleteValueStatementEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"delete from ", 12);
  int v2 = *(char *)(v1 + 31);
  if (v2 >= 0) {
    uint64_t v3 = v1 + 8;
  }
  else {
    uint64_t v3 = *(void *)(v1 + 8);
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(v1 + 31);
  }
  else {
    uint64_t v4 = *(void *)(v1 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)" where elementId=?1 and attributeId=?2", 38);
  operator new();
}

void sub_1D173F418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t degas::AttributeValueTable::deleteEntry(degas::AttributeValueTable *this, sqlite3_int64 a2)
{
  uint64_t v3 = degas::AttributeValueTable::deleteStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v3, 1, a2);
  uint64_t v4 = (sqlite3_stmt **)*v3;
  return degas::Statement::update(v4);
}

uint64_t *degas::AttributeValueTable::deleteStatement(degas::AttributeValueTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas19AttributeValueTable15deleteStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_26;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19AttributeValueTable15deleteStatementEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"delete from ", 12);
  int v2 = *(char *)(v1 + 31);
  if (v2 >= 0) {
    uint64_t v3 = v1 + 8;
  }
  else {
    uint64_t v3 = *(void *)(v1 + 8);
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(v1 + 31);
  }
  else {
    uint64_t v4 = *(void *)(v1 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)" where elementId=?1", 19);
  operator new();
}

void sub_1D173F710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t degas::AttributeValueTable::createTable(degas::AttributeValueTable *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v53);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"create table ", 13);
  int v2 = *((char *)this + 31);
  if (v2 >= 0) {
    uint64_t v3 = (char *)this + 8;
  }
  else {
    uint64_t v3 = (char *)*((void *)this + 1);
  }
  if (v2 >= 0) {
    uint64_t v4 = *((unsigned __int8 *)this + 31);
  }
  else {
    uint64_t v4 = *((void *)this + 2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" (elementId integer, attributeId integer, intValue integer, realValue real, stringValue text, dataType integer, primary key (elementId, attributeId))", 149);
  uint64_t v5 = (sqlite3 *)*((void *)this + 4);
  std::stringbuf::str();
  degas::Statement::Statement(ppStmt, v5, (uint64_t)__p);
  if (v48 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = degas::Statement::update(ppStmt);
  uint64_t v7 = MEMORY[0x1E4FBA418];
  if (v6)
  {
    int v8 = (void *)*MEMORY[0x1E4FBA418];
    uint64_t v9 = *(void **)(MEMORY[0x1E4FBA418] + 24);
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"create index ", 13);
    int v10 = *((char *)this + 31);
    if (v10 >= 0) {
      long long v11 = (char *)this + 8;
    }
    else {
      long long v11 = (char *)*((void *)this + 1);
    }
    if (v10 >= 0) {
      uint64_t v12 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v12 = *((void *)this + 2);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"_intValue on ", 13);
    int v13 = *((char *)this + 31);
    if (v13 >= 0) {
      uint64_t v14 = (char *)this + 8;
    }
    else {
      uint64_t v14 = (char *)*((void *)this + 1);
    }
    if (v13 >= 0) {
      uint64_t v15 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v15 = *((void *)this + 2);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)" (attributeId, intValue) where intValue not null", 48);
    char v16 = (sqlite3 *)*((void *)this + 4);
    std::stringbuf::str();
    degas::Statement::Statement(v46, v16, (uint64_t)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    uint64_t v6 = degas::Statement::update(v46);
    if (v6)
    {
      int v8 = *(void **)v7;
      uint64_t v9 = *(void **)(v7 + 24);
    }
    else
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"create index ", 13);
      int v17 = *((char *)this + 31);
      if (v17 >= 0) {
        BOOL v18 = (char *)this + 8;
      }
      else {
        BOOL v18 = (char *)*((void *)this + 1);
      }
      if (v17 >= 0) {
        uint64_t v19 = *((unsigned __int8 *)this + 31);
      }
      else {
        uint64_t v19 = *((void *)this + 2);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v18, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"_realValue on ", 14);
      int v20 = *((char *)this + 31);
      if (v20 >= 0) {
        uint64_t v21 = (char *)this + 8;
      }
      else {
        uint64_t v21 = (char *)*((void *)this + 1);
      }
      if (v20 >= 0) {
        uint64_t v22 = *((unsigned __int8 *)this + 31);
      }
      else {
        uint64_t v22 = *((void *)this + 2);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v21, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" (attributeId, realValue) where realValue not null", 50);
      uint64_t v23 = (sqlite3 *)*((void *)this + 4);
      std::stringbuf::str();
      degas::Statement::Statement(v40, v23, (uint64_t)v35);
      if (v36 < 0) {
        operator delete(v35[0]);
      }
      uint64_t v6 = degas::Statement::update(v40);
      if (v6)
      {
        int v8 = *(void **)v7;
        uint64_t v9 = *(void **)(v7 + 24);
      }
      else
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"create index ", 13);
        int v24 = *((char *)this + 31);
        if (v24 >= 0) {
          uint64_t v25 = (char *)this + 8;
        }
        else {
          uint64_t v25 = (char *)*((void *)this + 1);
        }
        if (v24 >= 0) {
          uint64_t v26 = *((unsigned __int8 *)this + 31);
        }
        else {
          uint64_t v26 = *((void *)this + 2);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v25, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"_stringValue on ", 16);
        int v27 = *((char *)this + 31);
        if (v27 >= 0) {
          unint64_t v28 = (char *)this + 8;
        }
        else {
          unint64_t v28 = (char *)*((void *)this + 1);
        }
        if (v27 >= 0) {
          uint64_t v29 = *((unsigned __int8 *)this + 31);
        }
        else {
          uint64_t v29 = *((void *)this + 2);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v28, v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" (attributeId, stringValue) where stringValue not null", 54);
        double v30 = (sqlite3 *)*((void *)this + 4);
        std::stringbuf::str();
        degas::Statement::Statement(v34, v30, (uint64_t)&v32);
        if (v33 < 0) {
          operator delete(v32);
        }
        uint64_t v6 = degas::Statement::update(v34);
        degas::Statement::~Statement((degas::Statement *)v34);
        int v8 = *(void **)v7;
        v35[0] = *(void **)v7;
        uint64_t v9 = *(void **)(v7 + 24);
        *(void **)((char *)v35 + *((void *)v35[0] - 3)) = v9;
        v35[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
        if (v38 < 0) {
          operator delete(v37);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1D25F9A50](&v39);
      }
      degas::Statement::~Statement((degas::Statement *)v40);
      v41[0] = v8;
      *(void **)((char *)v41 + *((void *)v8 - 3)) = v9;
      v41[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
      if (v44 < 0) {
        operator delete(v43);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1D25F9A50](&v45);
    }
    degas::Statement::~Statement((degas::Statement *)v46);
    __p[0] = v8;
    *(void **)((char *)__p + *((void *)v8 - 3)) = v9;
    __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
    if (v50 < 0) {
      operator delete(v49);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1D25F9A50](&v51);
  }
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  v53[0] = v8;
  *(void *)((char *)v53 + *((void *)v8 - 3)) = v9;
  v53[1] = MEMORY[0x1E4FBA470] + 16;
  if (v54 < 0) {
    operator delete((void *)v53[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v55);
  return v6;
}

void sub_1D173FE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52)
{
}

void degas::AttributeValueTable::~AttributeValueTable(degas::AttributeValueTable *this)
{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1D25F9A90);
}

{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void *degas::AttributeValueTable::AttributeValueTable(void *a1, uint64_t a2, long long *a3, char a4, uint64_t a5)
{
  uint64_t result = degas::Table::Table(a1, a3, a2, a5);
  *uint64_t result = &unk_1F28013D0;
  *((unsigned char *)result + 48) = a4;
  return result;
}

{
  void *result;

  uint64_t result = degas::Table::Table(a1, a3, a2, a5);
  *uint64_t result = &unk_1F28013D0;
  *((unsigned char *)result + 48) = a4;
  return result;
}

const char *degas::AttributeValueTable::operatorText(unsigned int a1)
{
  if (a1 > 8) {
    return " == ";
  }
  else {
    return (const char *)*((void *)&off_1E68DB280 + a1);
  }
}

const char *degas::AttributeValueTable::listOperatorText(int a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  switch(a1)
  {
    case 1:
      return " in ";
    case 8:
      return " collate nocasenodiacritics in ";
    case 2:
      return " not in ";
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_error_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "unsupported operator for list comparison: %d", (uint8_t *)v3, 8u);
  }
  return "";
}

uint64_t degas::AttributeValueTable::rangeOperatorText(const char *a1, int a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  switch(a2)
  {
    case 1:
      size_t v4 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v4);
      uint64_t v5 = " between ?2 and ?3";
      uint64_t v6 = 18;
      goto LABEL_14;
    case 2:
      size_t v7 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" > ?2 and ", 10);
      size_t v8 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v8);
      uint64_t v5 = " <= ?3";
      goto LABEL_13;
    case 3:
      size_t v9 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v9);
      int v10 = " >= ?2 and ";
      uint64_t v11 = 11;
      goto LABEL_6;
    case 4:
      size_t v12 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v12);
      int v10 = " > ?2 and ";
      uint64_t v11 = 10;
LABEL_6:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v10, v11);
      size_t v13 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v13);
      uint64_t v5 = " < ?3";
      goto LABEL_9;
    case 5:
      size_t v14 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v14);
      uint64_t v5 = " not between ?2 and ?3";
      uint64_t v6 = 22;
      goto LABEL_14;
    case 6:
      size_t v15 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" <= ?2 or ", 10);
      size_t v16 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v16);
      uint64_t v5 = " > ?3";
LABEL_9:
      uint64_t v6 = 5;
      goto LABEL_14;
    case 7:
      size_t v17 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v17);
      BOOL v18 = " < ?2 or ";
      uint64_t v19 = 9;
      goto LABEL_12;
    case 8:
      size_t v20 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v20);
      BOOL v18 = " <= ?2 or ";
      uint64_t v19 = 10;
LABEL_12:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v18, v19);
      size_t v21 = strlen(a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a1, v21);
      uint64_t v5 = " >= ?3";
LABEL_13:
      uint64_t v6 = 6;
LABEL_14:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v5, v6);
      break;
    default:
      break;
  }
  std::stringbuf::str();
  v23[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v23 + *(void *)(v23[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v23[1] = MEMORY[0x1E4FBA470] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D25F9A50](&v25);
}

void sub_1D1740564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::upsertStatement(degas::AttributeValueTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas19AttributeValueTable15upsertStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_1316;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19AttributeValueTable15upsertStatementEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"insert or replace into ", 23);
  int v2 = *(char *)(v1 + 31);
  if (v2 >= 0) {
    uint64_t v3 = v1 + 8;
  }
  else {
    uint64_t v3 = *(void *)(v1 + 8);
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(v1 + 31);
  }
  else {
    uint64_t v4 = *(void *)(v1 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)" (elementId, attributeId, intValue, realValue, stringValue, dataType) values (?1, ?2, ?3, ?4, ?5, ?6)", 101);
  operator new();
}

void sub_1D17407EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByIdentifierStatement(degas::AttributeValueTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x600;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas19AttributeValueTable25readByIdentifierStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_30;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19AttributeValueTable25readByIdentifierStatementEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  int v2 = *(char *)(v1 + 31);
  if (v2 >= 0) {
    uint64_t v3 = v1 + 8;
  }
  else {
    uint64_t v3 = *(void *)(v1 + 8);
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(v1 + 31);
  }
  else {
    uint64_t v4 = *(void *)(v1 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)" where elementId=?1", 19);
  operator new();
}

void sub_1D1740A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByAttrIdIdentifierStatement(degas::AttributeValueTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x800;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas19AttributeValueTable31readByAttrIdIdentifierStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_31;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19AttributeValueTable31readByAttrIdIdentifierStatementEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  int v2 = *(char *)(v1 + 31);
  if (v2 >= 0) {
    uint64_t v3 = v1 + 8;
  }
  else {
    uint64_t v3 = *(void *)(v1 + 8);
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(v1 + 31);
  }
  else {
    uint64_t v4 = *(void *)(v1 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)" where elementId=?1 and attributeId=?2", 38);
  operator new();
}

void sub_1D1740D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByBitmapStatement(degas::AttributeValueTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x801;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas19AttributeValueTable21readByBitmapStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_34;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19AttributeValueTable21readByBitmapStatementEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"select v.elementId, v.attributeId, v.intValue, v.realValue, v.stringValue, v.dataType from ", 91);
  int v2 = *(char *)(v1 + 31);
  if (v2 >= 0) {
    uint64_t v3 = v1 + 8;
  }
  else {
    uint64_t v3 = *(void *)(v1 + 8);
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(v1 + 31);
  }
  else {
    uint64_t v4 = *(void *)(v1 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)" v, identifierBitmap(?1) b where v.elementId = b.value order by v.elementId", 75);
  operator new();
}

void sub_1D1740FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByIntValueStatement(uint64_t a1, int a2)
{
  int v2 = a2 | (*(unsigned __int8 *)(a1 + 48) << 16);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK5degas19AttributeValueTable23readByIntValueStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_37;
  v5[4] = a1;
  int v6 = a2;
  return degas::StatementCache::getStatement(v3, v2 | 0x900u, (uint64_t)v5);
}

void ___ZNK5degas19AttributeValueTable23readByIntValueStatementENS_14BinaryOperatorE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" where attributeId=?1 and intValue", 34);
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  if (v6 > 8) {
    size_t v7 = " == ";
  }
  else {
    size_t v7 = (const char *)*((void *)&off_1E68DB280 + v6);
  }
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"?2 order by elementId", 21);
  operator new();
}

void sub_1D1741300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByBitmapAndAttrIdentifierStatement(degas::AttributeValueTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x802;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas19AttributeValueTable38readByBitmapAndAttrIdentifierStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_39;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19AttributeValueTable38readByBitmapAndAttrIdentifierStatementEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"select v.elementId, v.attributeId, v.intValue, v.realValue, v.stringValue, v.dataType from ", 91);
  int v2 = *(char *)(v1 + 31);
  if (v2 >= 0) {
    uint64_t v3 = v1 + 8;
  }
  else {
    uint64_t v3 = *(void *)(v1 + 8);
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(v1 + 31);
  }
  else {
    uint64_t v4 = *(void *)(v1 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)" v, identifierBitmap(?1) b where v.elementId = b.value and v.attributeId=?2 order by v.elementId", 96);
  operator new();
}

void sub_1D17415AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByRealValueStatement(uint64_t a1, int a2)
{
  int v2 = a2 | (*(unsigned __int8 *)(a1 + 48) << 16);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK5degas19AttributeValueTable24readByRealValueStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_41;
  v5[4] = a1;
  int v6 = a2;
  return degas::StatementCache::getStatement(v3, v2 | 0xA00u, (uint64_t)v5);
}

void ___ZNK5degas19AttributeValueTable24readByRealValueStatementENS_14BinaryOperatorE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" where attributeId=?1 and realValue", 35);
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  if (v6 > 8) {
    size_t v7 = " == ";
  }
  else {
    size_t v7 = (const char *)*((void *)&off_1E68DB280 + v6);
  }
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"?2 order by elementId", 21);
  operator new();
}

void sub_1D17418BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByStringValueStatement(uint64_t a1, int a2)
{
  int v2 = a2 | (*(unsigned __int8 *)(a1 + 48) << 16);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK5degas19AttributeValueTable26readByStringValueStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_43;
  v5[4] = a1;
  int v6 = a2;
  return degas::StatementCache::getStatement(v3, v2 | 0xB00u, (uint64_t)v5);
}

void ___ZNK5degas19AttributeValueTable26readByStringValueStatementENS_14BinaryOperatorE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" where attributeId=?1 and stringValue", 37);
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  if (v6 > 8) {
    size_t v7 = " == ";
  }
  else {
    size_t v7 = (const char *)*((void *)&off_1E68DB280 + v6);
  }
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"?2 order by elementId", 21);
  operator new();
}

void sub_1D1741BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByIntValuesStatement(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK5degas19AttributeValueTable24readByIntValuesStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_45;
  v5[4] = a1;
  int v6 = a2;
  return degas::StatementCache::getStatement(v3, a2 | (v2 << 16) | 0xC00u, (uint64_t)v5);
}

void ___ZNK5degas19AttributeValueTable24readByIntValuesStatementENS_14BinaryOperatorE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)" where attributeId=?1 and intValue", 34);
  int v6 = degas::AttributeValueTable::listOperatorText(*(_DWORD *)(a1 + 40));
  size_t v7 = strlen(v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"valueArray(?2, ?3, 'int64') order by elementId", 46);
  operator new();
}

void sub_1D1741EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByRealValuesStatement(uint64_t a1, int a2)
{
  int v2 = a2 | (*(unsigned __int8 *)(a1 + 48) << 16);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK5degas19AttributeValueTable25readByRealValuesStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_47;
  v5[4] = a1;
  int v6 = a2;
  return degas::StatementCache::getStatement(v3, v2 | 0xD00u, (uint64_t)v5);
}

void ___ZNK5degas19AttributeValueTable25readByRealValuesStatementENS_14BinaryOperatorE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)" where attributeId=?1 and realValue", 35);
  int v6 = degas::AttributeValueTable::listOperatorText(*(_DWORD *)(a1 + 40));
  size_t v7 = strlen(v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"valueArray(?2, ?3, 'double') order by elementId", 47);
  operator new();
}

void sub_1D17421B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByStringValuesStatement(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK5degas19AttributeValueTable27readByStringValuesStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_49;
  v5[4] = a1;
  int v6 = a2;
  return degas::StatementCache::getStatement(v3, a2 | (v2 << 16) | 0xE00u, (uint64_t)v5);
}

void ___ZNK5degas19AttributeValueTable27readByStringValuesStatementENS_14BinaryOperatorE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)" where attributeId=?1 and stringValue", 37);
  int v6 = degas::AttributeValueTable::listOperatorText(*(_DWORD *)(a1 + 40));
  size_t v7 = strlen(v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"valueArray(?2, ?3, 'char*') order by elementId", 46);
  operator new();
}

void sub_1D17424A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByIntValueIdentifiersStatement(uint64_t a1, int a2)
{
  int v2 = (a2 + 16) | (*(unsigned __int8 *)(a1 + 48) << 16);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK5degas19AttributeValueTable34readByIntValueIdentifiersStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_52;
  v5[4] = a1;
  int v6 = a2;
  return degas::StatementCache::getStatement(v3, v2 | 0x900u, (uint64_t)v5);
}

void ___ZNK5degas19AttributeValueTable34readByIntValueIdentifiersStatementENS_14BinaryOperatorE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" where elementId in identifierBitmap(?1) and attributeId = ?2 and +intValue", 75);
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  if (v6 > 8) {
    size_t v7 = " == ";
  }
  else {
    size_t v7 = (const char *)*((void *)&off_1E68DB280 + v6);
  }
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"?3", 2);
  operator new();
}

void sub_1D17427B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByRealValueIdentifiersStatement(uint64_t a1, int a2)
{
  int v2 = (a2 + 16) | (*(unsigned __int8 *)(a1 + 48) << 16);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK5degas19AttributeValueTable35readByRealValueIdentifiersStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_54;
  v5[4] = a1;
  int v6 = a2;
  return degas::StatementCache::getStatement(v3, v2 | 0xA00u, (uint64_t)v5);
}

void ___ZNK5degas19AttributeValueTable35readByRealValueIdentifiersStatementENS_14BinaryOperatorE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" where elementId in identifierBitmap(?1) and attributeId = ?2 and +realValue", 76);
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  if (v6 > 8) {
    size_t v7 = " == ";
  }
  else {
    size_t v7 = (const char *)*((void *)&off_1E68DB280 + v6);
  }
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"?3", 2);
  operator new();
}

void sub_1D1742AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByStringValueIdentifiersStatement(uint64_t a1, int a2)
{
  int v2 = (a2 + 16) | (*(unsigned __int8 *)(a1 + 48) << 16);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK5degas19AttributeValueTable37readByStringValueIdentifiersStatementENS_14BinaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_56;
  v5[4] = a1;
  int v6 = a2;
  return degas::StatementCache::getStatement(v3, v2 | 0xB00u, (uint64_t)v5);
}

void ___ZNK5degas19AttributeValueTable37readByStringValueIdentifiersStatementENS_14BinaryOperatorE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" where elementId in identifierBitmap(?1) and attributeId = ?2 and +stringValue", 78);
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  if (v6 > 8) {
    size_t v7 = " == ";
  }
  else {
    size_t v7 = (const char *)*((void *)&off_1E68DB280 + v6);
  }
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"?3", 2);
  operator new();
}

void sub_1D1742DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByIntRangeStatement(uint64_t a1, int a2)
{
  int v2 = (a2 + 32) | (*(unsigned __int8 *)(a1 + 48) << 16);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK5degas19AttributeValueTable23readByIntRangeStatementENS_15TernaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_60;
  v5[4] = a1;
  int v6 = a2;
  return degas::StatementCache::getStatement(v3, v2 | 0x900u, (uint64_t)v5);
}

void ___ZNK5degas19AttributeValueTable23readByIntRangeStatementENS_15TernaryOperatorE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)" where attributeId=?1 and ", 26);
  degas::AttributeValueTable::rangeOperatorText("intValue", *(_DWORD *)(a1 + 40));
  if ((v9 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v7 = v9;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)" order by elementId", 19);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  operator new();
}

void sub_1D17430FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByRealRangeStatement(uint64_t a1, int a2)
{
  int v2 = (a2 + 32) | (*(unsigned __int8 *)(a1 + 48) << 16);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK5degas19AttributeValueTable24readByRealRangeStatementENS_15TernaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_62;
  v5[4] = a1;
  int v6 = a2;
  return degas::StatementCache::getStatement(v3, v2 | 0xA00u, (uint64_t)v5);
}

void ___ZNK5degas19AttributeValueTable24readByRealRangeStatementENS_15TernaryOperatorE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)" where attributeId=?1 and ", 26);
  degas::AttributeValueTable::rangeOperatorText("realValue", *(_DWORD *)(a1 + 40));
  if ((v9 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v7 = v9;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)" order by elementId", 19);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  operator new();
}

void sub_1D1743438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readByStringRangeStatement(uint64_t a1, int a2)
{
  int v2 = (a2 + 32) | (*(unsigned __int8 *)(a1 + 48) << 16);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK5degas19AttributeValueTable26readByStringRangeStatementENS_15TernaryOperatorE_block_invoke;
  v5[3] = &__block_descriptor_tmp_64;
  v5[4] = a1;
  int v6 = a2;
  return degas::StatementCache::getStatement(v3, v2 | 0xB00u, (uint64_t)v5);
}

void ___ZNK5degas19AttributeValueTable26readByStringRangeStatementENS_15TernaryOperatorE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  int v3 = *(char *)(v2 + 31);
  if (v3 >= 0) {
    uint64_t v4 = v2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 31);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)" where attributeId=?1 and ", 26);
  degas::AttributeValueTable::rangeOperatorText("stringValue", *(_DWORD *)(a1 + 40));
  if ((v9 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v7 = v9;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)" order by elementId", 19);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  operator new();
}

void sub_1D1743774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::AttributeValueTable::readAllStatement(degas::AttributeValueTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x700;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas19AttributeValueTable16readAllStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_65;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas19AttributeValueTable16readAllStatementEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"select elementId, attributeId, intValue, realValue, stringValue, dataType from ", 79);
  int v2 = *(char *)(v1 + 31);
  if (v2 >= 0) {
    uint64_t v3 = v1 + 8;
  }
  else {
    uint64_t v3 = *(void *)(v1 + 8);
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(v1 + 31);
  }
  else {
    uint64_t v4 = *(void *)(v1 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)" order by elementId", 19);
  operator new();
}

void sub_1D1743A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t degas::AttributeValueTable::insertOrUpdate(degas::AttributeValueTable *this, sqlite3_int64 a2, sqlite3_int64 a3, sqlite3_int64 a4)
{
  uint64_t v7 = degas::AttributeValueTable::upsertStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v7, 1, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v7, 2, a2);
  degas::Statement::bindInteger((sqlite3_stmt **)*v7, 3, a4);
  degas::Statement::bindNull((sqlite3_stmt **)*v7, 4);
  degas::Statement::bindNull((sqlite3_stmt **)*v7, 5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v7, 6, 1);
  size_t v8 = (sqlite3_stmt **)*v7;
  return degas::Statement::update(v8);
}

uint64_t degas::AttributeValueTable::insertOrUpdateUnsigned(degas::AttributeValueTable *this, sqlite3_int64 a2, sqlite3_int64 a3, sqlite3_int64 a4)
{
  uint64_t v7 = degas::AttributeValueTable::upsertStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v7, 1, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v7, 2, a2);
  degas::Statement::bindInteger((sqlite3_stmt **)*v7, 3, a4);
  degas::Statement::bindNull((sqlite3_stmt **)*v7, 4);
  degas::Statement::bindNull((sqlite3_stmt **)*v7, 5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v7, 6, 4);
  size_t v8 = (sqlite3_stmt **)*v7;
  return degas::Statement::update(v8);
}

uint64_t degas::AttributeValueTable::insertOrUpdate(degas::AttributeValueTable *this, sqlite3_int64 a2, sqlite3_int64 a3, double a4)
{
  uint64_t v7 = degas::AttributeValueTable::upsertStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v7, 1, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v7, 2, a2);
  degas::Statement::bindNull((sqlite3_stmt **)*v7, 3);
  degas::Statement::bindDouble((sqlite3_stmt **)*v7, 4, a4);
  degas::Statement::bindNull((sqlite3_stmt **)*v7, 5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v7, 6, 2);
  size_t v8 = (sqlite3_stmt **)*v7;
  return degas::Statement::update(v8);
}

uint64_t degas::AttributeValueTable::insertOrUpdate(degas::AttributeValueTable *a1, sqlite3_int64 a2, sqlite3_int64 a3, uint64_t *a4)
{
  uint64_t v7 = degas::AttributeValueTable::upsertStatement(a1);
  degas::Statement::bindInteger((sqlite3_stmt **)*v7, 1, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v7, 2, a2);
  degas::Statement::bindNull((sqlite3_stmt **)*v7, 3);
  degas::Statement::bindNull((sqlite3_stmt **)*v7, 4);
  degas::Statement::bindString(*v7, 5, a4);
  degas::Statement::bindInteger((sqlite3_stmt **)*v7, 6, 3);
  size_t v8 = (sqlite3_stmt **)*v7;
  return degas::Statement::update(v8);
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByIdentifier(degas::AttributeValueTable *this, sqlite3_int64 a2)
{
  uint64_t v3 = degas::AttributeValueTable::readByIdentifierStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v3, 1, a2);
  return v3;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByAttrIdIdentifier(degas::AttributeValueTable *this, sqlite3_int64 a2, sqlite3_int64 a3)
{
  uint64_t v5 = degas::AttributeValueTable::readByAttrIdIdentifierStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 1, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 2, a2);
  return v5;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByBitmap(degas::AttributeValueTable *this, Bitmap *a2)
{
  uint64_t v3 = degas::AttributeValueTable::readByBitmapStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v3, 1, a2);
  return v3;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByBitmapAndAttrIdIdentifier(degas::AttributeValueTable *this, Bitmap *a2, sqlite3_int64 a3)
{
  uint64_t v5 = degas::AttributeValueTable::readByBitmapAndAttrIdentifierStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v5, 1, a2);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 2, a3);
  return v5;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByValue(uint64_t a1, sqlite3_int64 a2, sqlite3_int64 a3, int a4)
{
  int v6 = degas::AttributeValueTable::readByIntValueStatement(a1, a4);
  degas::Statement::bindInteger((sqlite3_stmt **)*v6, 1, a2);
  degas::Statement::bindInteger((sqlite3_stmt **)*v6, 2, a3);
  return v6;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByValue(uint64_t a1, sqlite3_int64 a2, int a3, double a4)
{
  int v6 = degas::AttributeValueTable::readByRealValueStatement(a1, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v6, 1, a2);
  degas::Statement::bindDouble((sqlite3_stmt **)*v6, 2, a4);
  return v6;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByValue(uint64_t a1, sqlite3_int64 a2, uint64_t *a3, int a4)
{
  int v6 = degas::AttributeValueTable::readByStringValueStatement(a1, a4);
  degas::Statement::bindInteger((sqlite3_stmt **)*v6, 1, a2);
  degas::Statement::bindString(*v6, 2, a3);
  return v6;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByValues(uint64_t a1, sqlite3_int64 a2, void *a3, int a4, int a5)
{
  size_t v8 = degas::AttributeValueTable::readByIntValuesStatement(a1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 1, a2);
  degas::Statement::bindArrayPointer((sqlite3_stmt **)*v8, 2, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 3, a4);
  return v8;
}

{
  uint64_t *v8;

  size_t v8 = degas::AttributeValueTable::readByRealValuesStatement(a1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 1, a2);
  degas::Statement::bindArrayPointer((sqlite3_stmt **)*v8, 2, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 3, a4);
  return v8;
}

{
  uint64_t *v8;

  size_t v8 = degas::AttributeValueTable::readByStringValuesStatement(a1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 1, a2);
  degas::Statement::bindArrayPointer((sqlite3_stmt **)*v8, 2, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 3, a4);
  return v8;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByValueIdentifiers(uint64_t a1, sqlite3_int64 a2, sqlite3_int64 a3, int a4, Bitmap *a5)
{
  size_t v8 = degas::AttributeValueTable::readByIntValueIdentifiersStatement(a1, a4);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v8, 1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 2, a2);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 3, a3);
  return v8;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByValueIdentifiers(uint64_t a1, sqlite3_int64 a2, int a3, Bitmap *a4, double a5)
{
  size_t v8 = degas::AttributeValueTable::readByRealValueIdentifiersStatement(a1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v8, 1, a4);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 2, a2);
  degas::Statement::bindDouble((sqlite3_stmt **)*v8, 3, a5);
  return v8;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByValueIdentifiers(uint64_t a1, sqlite3_int64 a2, uint64_t *a3, int a4, Bitmap *a5)
{
  size_t v8 = degas::AttributeValueTable::readByStringValueIdentifiersStatement(a1, a4);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v8, 1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 2, a2);
  degas::Statement::bindString(*v8, 3, a3);
  return v8;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByRange(uint64_t a1, sqlite3_int64 a2, sqlite3_int64 a3, sqlite3_int64 a4, int a5)
{
  size_t v8 = degas::AttributeValueTable::readByIntRangeStatement(a1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 1, a2);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 2, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 3, a4);
  return v8;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByRange(uint64_t a1, sqlite3_int64 a2, int a3, double a4, double a5)
{
  size_t v8 = degas::AttributeValueTable::readByRealRangeStatement(a1, a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 1, a2);
  degas::Statement::bindDouble((sqlite3_stmt **)*v8, 2, a4);
  degas::Statement::bindDouble((sqlite3_stmt **)*v8, 3, a5);
  return v8;
}

uint64_t *degas::AttributeValueTable::prepareStatementToReadByRange(uint64_t a1, sqlite3_int64 a2, uint64_t *a3, uint64_t *a4, int a5)
{
  size_t v8 = degas::AttributeValueTable::readByStringRangeStatement(a1, a5);
  degas::Statement::bindInteger((sqlite3_stmt **)*v8, 1, a2);
  degas::Statement::bindString(*v8, 2, a3);
  degas::Statement::bindString(*v8, 3, a4);
  return v8;
}

void *degas::AttributeValueCursor::AttributeValueCursor(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

degas::AttributeValueCursor *degas::AttributeValueCursor::AttributeValueCursor(degas::AttributeValueCursor *this, const degas::AttributeValueTable *a2)
{
  AllStatement = degas::AttributeValueTable::readAllStatement(a2);
  uint64_t v4 = AllStatement[1];
  *(void *)this = *AllStatement;
  *((void *)this + ++*((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

{
  uint64_t *AllStatement;
  uint64_t v4;

  AllStatement = degas::AttributeValueTable::readAllStatement(a2);
  uint64_t v4 = AllStatement[1];
  *(void *)this = *AllStatement;
  *((void *)this + ++*((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

degas::AttributeValueCursor *degas::AttributeValueCursor::AttributeValueCursor(degas::AttributeValueCursor *this, sqlite3_int64 a2, const degas::AttributeValueTable *a3)
{
  uint64_t v5 = degas::AttributeValueTable::readByIdentifierStatement(a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 1, a2);
  uint64_t v6 = v5[1];
  *(void *)this = *v5;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

degas::AttributeValueCursor *degas::AttributeValueCursor::AttributeValueCursor(degas::AttributeValueCursor *this, sqlite3_int64 a2, sqlite3_int64 a3, const degas::AttributeValueTable *a4)
{
  uint64_t v5 = degas::AttributeValueTable::prepareStatementToReadByAttrIdIdentifier(a4, a2, a3);
  uint64_t v6 = v5[1];
  *(void *)this = *v5;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

{
  uint64_t *v5;
  uint64_t v6;

  uint64_t v5 = degas::AttributeValueTable::prepareStatementToReadByAttrIdIdentifier(a4, a2, a3);
  uint64_t v6 = v5[1];
  *(void *)this = *v5;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

degas::AttributeValueCursor *degas::AttributeValueCursor::AttributeValueCursor(degas::AttributeValueCursor *this, Bitmap *a2, const degas::AttributeValueTable *a3)
{
  uint64_t v5 = degas::AttributeValueTable::readByBitmapStatement(a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v5, 1, a2);
  uint64_t v6 = v5[1];
  *(void *)this = *v5;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

degas::AttributeValueCursor *degas::AttributeValueCursor::AttributeValueCursor(degas::AttributeValueCursor *this, Bitmap *a2, sqlite3_int64 a3, const degas::AttributeValueTable *a4)
{
  uint64_t v5 = degas::AttributeValueTable::prepareStatementToReadByBitmapAndAttrIdIdentifier(a4, a2, a3);
  uint64_t v6 = v5[1];
  *(void *)this = *v5;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

{
  uint64_t *v5;
  uint64_t v6;

  uint64_t v5 = degas::AttributeValueTable::prepareStatementToReadByBitmapAndAttrIdIdentifier(a4, a2, a3);
  uint64_t v6 = v5[1];
  *(void *)this = *v5;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void degas::AttributeValueCursor::setForValue(uint64_t *a1, sqlite3_int64 a2, sqlite3_int64 a3, int a4, uint64_t a5)
{
  uint64_t v6 = degas::AttributeValueTable::prepareStatementToReadByValue(a5, a2, a3, a4);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v9 = (std::__shared_weak_count *)a1[1];
  *a1 = v8;
  a1[1] = v7;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void degas::AttributeValueCursor::setForValue(uint64_t *a1, sqlite3_int64 a2, int a3, uint64_t a4, double a5)
{
  uint64_t v6 = degas::AttributeValueTable::prepareStatementToReadByValue(a4, a2, a3, a5);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v9 = (std::__shared_weak_count *)a1[1];
  *a1 = v8;
  a1[1] = v7;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void degas::AttributeValueCursor::setForValue(uint64_t *a1, sqlite3_int64 a2, uint64_t *a3, int a4, uint64_t a5)
{
  uint64_t v6 = degas::AttributeValueTable::prepareStatementToReadByValue(a5, a2, a3, a4);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v9 = (std::__shared_weak_count *)a1[1];
  *a1 = v8;
  a1[1] = v7;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void degas::AttributeValueCursor::setForValues(uint64_t *a1, sqlite3_int64 a2, void *a3, int a4, int a5, uint64_t a6)
{
  uint64_t v7 = degas::AttributeValueTable::prepareStatementToReadByValues(a6, a2, a3, a4, a5);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  *a1 = v9;
  a1[1] = v8;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t vars8;

  uint64_t v7 = degas::AttributeValueTable::prepareStatementToReadByValues(a6, a2, a3, a4, a5);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  *a1 = v9;
  a1[1] = v8;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t vars8;

  uint64_t v7 = degas::AttributeValueTable::prepareStatementToReadByValues(a6, a2, a3, a4, a5);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  *a1 = v9;
  a1[1] = v8;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void degas::AttributeValueCursor::setToFilterForValue(uint64_t *a1, sqlite3_int64 a2, sqlite3_int64 a3, int a4, Bitmap *a5, uint64_t a6)
{
  uint64_t v7 = degas::AttributeValueTable::prepareStatementToReadByValueIdentifiers(a6, a2, a3, a4, a5);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  *a1 = v9;
  a1[1] = v8;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void degas::AttributeValueCursor::setToFilterForValue(uint64_t *a1, sqlite3_int64 a2, int a3, Bitmap *a4, uint64_t a5, double a6)
{
  uint64_t v7 = degas::AttributeValueTable::prepareStatementToReadByValueIdentifiers(a5, a2, a3, a4, a6);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  *a1 = v9;
  a1[1] = v8;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void degas::AttributeValueCursor::setToFilterForValue(uint64_t *a1, sqlite3_int64 a2, uint64_t *a3, int a4, Bitmap *a5, uint64_t a6)
{
  uint64_t v7 = degas::AttributeValueTable::prepareStatementToReadByValueIdentifiers(a6, a2, a3, a4, a5);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  *a1 = v9;
  a1[1] = v8;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void degas::AttributeValueCursor::setForRange(uint64_t *a1, sqlite3_int64 a2, sqlite3_int64 a3, sqlite3_int64 a4, int a5, uint64_t a6)
{
  uint64_t v7 = degas::AttributeValueTable::prepareStatementToReadByRange(a6, a2, a3, a4, a5);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  *a1 = v9;
  a1[1] = v8;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void degas::AttributeValueCursor::setForRange(uint64_t *a1, sqlite3_int64 a2, int a3, uint64_t a4, double a5, double a6)
{
  uint64_t v7 = degas::AttributeValueTable::prepareStatementToReadByRange(a4, a2, a3, a5, a6);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  *a1 = v9;
  a1[1] = v8;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void degas::AttributeValueCursor::setForRange(uint64_t *a1, sqlite3_int64 a2, uint64_t *a3, uint64_t *a4, int a5, uint64_t a6)
{
  uint64_t v7 = degas::AttributeValueTable::prepareStatementToReadByRange(a6, a2, a3, a4, a5);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  *a1 = v9;
  a1[1] = v8;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

sqlite3_int64 degas::AttributeValueCursor::elementId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 0);
}

sqlite3_int64 degas::AttributeValueCursor::attributeId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 1);
}

sqlite3_int64 degas::AttributeValueCursor::integerValue(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 2);
}

double degas::AttributeValueCursor::realValue(sqlite3_stmt ***this)
{
  return sqlite3_column_double(**this, 3);
}

void degas::AttributeValueCursor::stringValue(sqlite3_stmt ***a1, uint64_t a2)
{
}

sqlite3_int64 degas::AttributeValueCursor::valueType(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 5);
}

void *degas::TombstoneCopier::TombstoneCopier(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

uint64_t degas::TombstoneCopier::copyNode(degas::TombstoneCopier *this, sqlite3_int64 a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 1);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  _OWORD v15[2] = ___ZN5degas15TombstoneCopier8copyNodeEy_block_invoke;
  uint64_t v15[3] = &__block_descriptor_tmp_1422;
  v15[4] = this;
  Statement = degas::StatementCache::getStatement(v4, 0x150300u, (uint64_t)v15);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  uint64_t v6 = degas::Statement::update((sqlite3_stmt **)*Statement);
  if (v6)
  {
    uint64_t v7 = v6;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      size_t v17 = v8;
      uint64_t v9 = MEMORY[0x1E4F14500];
LABEL_8:
      _os_log_error_impl(&dword_1D1654000, v9, OS_LOG_TYPE_ERROR, "tombstone node copy failed: %s", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v10 = *((void *)this + 1);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 0x40000000;
    void v14[2] = ___ZN5degas15TombstoneCopier8copyNodeEy_block_invoke_2;
    uint64_t v14[3] = &__block_descriptor_tmp_4_1424;
    v14[4] = this;
    uint64_t v11 = degas::StatementCache::getStatement(v10, 0x150301u, (uint64_t)v14);
    degas::Statement::bindInteger((sqlite3_stmt **)*v11, 1, a2);
    uint64_t v7 = degas::Statement::update((sqlite3_stmt **)*v11);
    if (v7 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      size_t v13 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      size_t v17 = v13;
      uint64_t v9 = MEMORY[0x1E4F14500];
      goto LABEL_8;
    }
  }
  return v7;
}

void ___ZN5degas15TombstoneCopier8copyNodeEy_block_invoke()
{
}

void sub_1D17457AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void ___ZN5degas15TombstoneCopier8copyNodeEy_block_invoke_2()
{
}

void sub_1D174588C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::TombstoneCopier::copyEdge(degas::TombstoneCopier *this, sqlite3_int64 a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 1);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  _OWORD v15[2] = ___ZN5degas15TombstoneCopier8copyEdgeEy_block_invoke;
  uint64_t v15[3] = &__block_descriptor_tmp_6_1429;
  v15[4] = this;
  Statement = degas::StatementCache::getStatement(v4, 0x150302u, (uint64_t)v15);
  degas::Statement::bindInteger((sqlite3_stmt **)*Statement, 1, a2);
  uint64_t v6 = degas::Statement::update((sqlite3_stmt **)*Statement);
  if (v6)
  {
    uint64_t v7 = v6;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      size_t v17 = v8;
      uint64_t v9 = MEMORY[0x1E4F14500];
LABEL_8:
      _os_log_error_impl(&dword_1D1654000, v9, OS_LOG_TYPE_ERROR, "tombstone edge copy failed: %s", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v10 = *((void *)this + 1);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 0x40000000;
    void v14[2] = ___ZN5degas15TombstoneCopier8copyEdgeEy_block_invoke_7;
    uint64_t v14[3] = &__block_descriptor_tmp_9;
    v14[4] = this;
    uint64_t v11 = degas::StatementCache::getStatement(v10, 0x150303u, (uint64_t)v14);
    degas::Statement::bindInteger((sqlite3_stmt **)*v11, 1, a2);
    uint64_t v7 = degas::Statement::update((sqlite3_stmt **)*v11);
    if (v7 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      size_t v13 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      size_t v17 = v13;
      uint64_t v9 = MEMORY[0x1E4F14500];
      goto LABEL_8;
    }
  }
  return v7;
}

void ___ZN5degas15TombstoneCopier8copyEdgeEy_block_invoke()
{
}

void sub_1D1745B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void ___ZN5degas15TombstoneCopier8copyEdgeEy_block_invoke_7()
{
}

void sub_1D1745C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::TombstoneCopier::copyNodes(degas::TombstoneCopier *this, Bitmap *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2->_bitSets.__begin_ == a2->_bitSets.__end_) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 1);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  _OWORD v15[2] = ___ZN5degas15TombstoneCopier9copyNodesERKNS_6BitmapE_block_invoke;
  uint64_t v15[3] = &__block_descriptor_tmp_11;
  v15[4] = this;
  Statement = degas::StatementCache::getStatement(v4, 0x150304u, (uint64_t)v15);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  uint64_t v6 = degas::Statement::update((sqlite3_stmt **)*Statement);
  if (v6)
  {
    uint64_t v7 = v6;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      size_t v17 = v8;
      uint64_t v9 = MEMORY[0x1E4F14500];
LABEL_10:
      _os_log_error_impl(&dword_1D1654000, v9, OS_LOG_TYPE_ERROR, "tombstone node copy failed: %s", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v10 = *((void *)this + 1);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 0x40000000;
    void v14[2] = ___ZN5degas15TombstoneCopier9copyNodesERKNS_6BitmapE_block_invoke_12;
    uint64_t v14[3] = &__block_descriptor_tmp_14_1435;
    v14[4] = this;
    uint64_t v11 = degas::StatementCache::getStatement(v10, 0x150305u, (uint64_t)v14);
    degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v11, 1, a2);
    uint64_t v7 = degas::Statement::update((sqlite3_stmt **)*v11);
    if (v7 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      size_t v13 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      size_t v17 = v13;
      uint64_t v9 = MEMORY[0x1E4F14500];
      goto LABEL_10;
    }
  }
  return v7;
}

void ___ZN5degas15TombstoneCopier9copyNodesERKNS_6BitmapE_block_invoke()
{
}

void sub_1D1745F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void ___ZN5degas15TombstoneCopier9copyNodesERKNS_6BitmapE_block_invoke_12()
{
}

void sub_1D1746030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::TombstoneCopier::copyEdges(degas::TombstoneCopier *this, Bitmap *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2->_bitSets.__begin_ == a2->_bitSets.__end_) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 1);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  _OWORD v15[2] = ___ZN5degas15TombstoneCopier9copyEdgesERKNS_6BitmapE_block_invoke;
  uint64_t v15[3] = &__block_descriptor_tmp_16;
  v15[4] = this;
  Statement = degas::StatementCache::getStatement(v4, 0x150306u, (uint64_t)v15);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*Statement, 1, a2);
  uint64_t v6 = degas::Statement::update((sqlite3_stmt **)*Statement);
  if (v6)
  {
    uint64_t v7 = v6;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      size_t v17 = v8;
      uint64_t v9 = MEMORY[0x1E4F14500];
LABEL_10:
      _os_log_error_impl(&dword_1D1654000, v9, OS_LOG_TYPE_ERROR, "tombstone edge copy failed: %s", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v10 = *((void *)this + 1);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 0x40000000;
    void v14[2] = ___ZN5degas15TombstoneCopier9copyEdgesERKNS_6BitmapE_block_invoke_17;
    uint64_t v14[3] = &__block_descriptor_tmp_19;
    v14[4] = this;
    uint64_t v11 = degas::StatementCache::getStatement(v10, 0x150307u, (uint64_t)v14);
    degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v11, 1, a2);
    uint64_t v7 = degas::Statement::update((sqlite3_stmt **)*v11);
    if (v7 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      size_t v13 = sqlite3_errmsg(*(sqlite3 **)this);
      *(_DWORD *)buf = 136315138;
      size_t v17 = v13;
      uint64_t v9 = MEMORY[0x1E4F14500];
      goto LABEL_10;
    }
  }
  return v7;
}

void ___ZN5degas15TombstoneCopier9copyEdgesERKNS_6BitmapE_block_invoke()
{
}

void sub_1D174632C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void ___ZN5degas15TombstoneCopier9copyEdgesERKNS_6BitmapE_block_invoke_17()
{
}

void sub_1D174640C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_1D17467E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1491(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1492(uint64_t a1)
{
}

void sub_1D1749408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1994(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1995(uint64_t a1)
{
}

uint64_t degas::LabelledEdgeTable::deleteEntry(degas::LabelledEdgeTable *this)
{
  return 2;
}

uint64_t degas::LabelledEdgeTable::createTable(degas::LabelledEdgeTable *this)
{
  return 0;
}

void degas::LabelledEdgeTable::~LabelledEdgeTable(degas::LabelledEdgeTable *this)
{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1D25F9A90);
}

{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

degas::LabelledEdgeTable *degas::LabelledEdgeTable::LabelledEdgeTable(degas::LabelledEdgeTable *this, sqlite3 *a2, degas::StatementCache *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "Edge");
  *(void *)this = &unk_1F2801DE0;
  uint64_t v6 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v7 = SHIBYTE(v10);
    *((void *)this + 4) = a2;
    *((void *)this + ++*((void *)this + 5) = a3;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void *)this + 3) = v10;
    *((void *)this + 4) = a2;
    *((void *)this + ++*((void *)this + 5) = a3;
  }
  *(void *)this = &unk_1F2801420;
  *((unsigned char *)this + 48) = 22;
  return this;
}

void sub_1D1749EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesByLabelIdentifiersSourceNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC00;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable63readTargetNodesByLabelIdentifiersSourceNodeIdentifiersStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_2015;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable63readTargetNodesByLabelIdentifiersSourceNodeIdentifiersStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?1) b where bitmapContainsBitmap(e.labels, ?2) and e.sourceNodeId = b.value", 147);
  operator new();
}

void sub_1D174A174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByLabelIdentifiersTargetNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC01;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable63readSourceNodesByLabelIdentifiersTargetNodeIdentifiersStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_4_2018;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable63readSourceNodesByLabelIdentifiersTargetNodeIdentifiersStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?1) b where bitmapContainsBitmap(e.labels, ?2) and e.targetNodeId = b.value", 147);
  operator new();
}

void sub_1D174A3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesBySourceNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC02;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable47readTargetNodesBySourceNodeIdentifiersStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_6_2020;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable47readTargetNodesBySourceNodeIdentifiersStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?1) b where e.sourceNodeId = b.value", 108);
  operator new();
}

void sub_1D174A654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByTargetNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC03;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable47readSourceNodesByTargetNodeIdentifiersStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_8_2022;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable47readSourceNodesByTargetNodeIdentifiersStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?1) b where e.targetNodeId = b.value", 108);
  operator new();
}

void sub_1D174A8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBothStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC04;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable70readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBothStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_10_2024;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable70readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBothStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?1) nb, identifierBitmap(?2) eb where e.sourceNodeId = nb.value and e.identifier = eb.value", 163);
  operator new();
}

void sub_1D174AB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNodeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC06;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable70readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNodeStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_12;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable70readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNodeStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?1) nb where e.sourceNodeId = nb.value and e.identifier in (select eb.value from identifierBitmap(?2) eb)", 177);
  operator new();
}

void sub_1D174ADA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdgeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC08;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable70readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdgeStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_14_2027;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable70readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdgeStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?2) eb where e.identifier = eb.value and e.sourceNodeId in (select nb.value from identifierBitmap(?1) nb)", 177);
  operator new();
}

void sub_1D174B014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdgeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0A;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable72readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdgeStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_16_2029;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable72readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdgeStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?1) nb where  BitmapContainsIdentifier(?2, e.identifier) and e.sourceNodeId = nb.value", 158);
  operator new();
}

void sub_1D174B284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNodeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0C;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable72readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNodeStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_18;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable72readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNodeStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?2) eb where  BitmapContainsIdentifier(?1, e.sourceNodeId) and e.identifier = eb.value", 158);
  operator new();
}

void sub_1D174B4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBothStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC05;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable70readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBothStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_20_2032;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable70readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBothStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?1) nb, identifierBitmap(?2) eb where e.targetNodeId = nb.value and e.identifier=eb.value", 161);
  operator new();
}

void sub_1D174B764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNodeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC07;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable70readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNodeStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_22;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable70readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNodeStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?1) nb where e.targetNodeId = nb.value and e.identifier in (select eb.value from identifierBitmap(?2) eb)", 177);
  operator new();
}

void sub_1D174B9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdgeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC09;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable70readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdgeStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_24;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable70readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdgeStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?2) eb where e.identifier = eb.value and e.targetNodeId in (select nb.value from identifierBitmap(?1) nb)", 177);
  operator new();
}

void sub_1D174BC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdgeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0B;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable72readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdgeStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_26_2036;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable72readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdgeStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?1) en where e.targetNodeId = en.value and BitmapContainsIdentifier(?2, e.identifier)", 157);
  operator new();
}

void sub_1D174BEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNodeStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0D;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable72readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNodeStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_28_2038;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable72readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNodeStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?2) eb where e.identifier = eb.value and BitmapContainsIdentifier(?1, e.targetNodeId)", 157);
  operator new();
}

void sub_1D174C124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesByLabelIdentifiersSourceNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0E;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable57readEdgesByLabelIdentifiersSourceNodeIdentifiersStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_30_2040;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable57readEdgesByLabelIdentifiersSourceNodeIdentifiersStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e, identifierBitmap(?1) b where bitmapContainsBitmap(e.labels, ?2) and e.sourceNodeId = b.value", 145);
  operator new();
}

void sub_1D174C394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesByLabelIdentifiersTargetNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC0F;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable57readEdgesByLabelIdentifiersTargetNodeIdentifiersStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_32;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable57readEdgesByLabelIdentifiersTargetNodeIdentifiersStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e, identifierBitmap(?1) b where bitmapContainsBitmap(e.labels, ?2) and e.targetNodeId = b.value", 145);
  operator new();
}

void sub_1D174C604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesBySourceNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC10;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable41readEdgesBySourceNodeIdentifiersStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_34_2043;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable41readEdgesBySourceNodeIdentifiersStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e, identifierBitmap(?1) b where e.sourceNodeId = b.value", 106);
  operator new();
}

void sub_1D174C874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesByTargetNodeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC11;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable41readEdgesByTargetNodeIdentifiersStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_36;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable41readEdgesByTargetNodeIdentifiersStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e, identifierBitmap(?1) b where e.targetNodeId = b.value", 106);
  operator new();
}

void sub_1D174CAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesBySourceNodeIdentifiersEdgeFilterStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC12;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable51readEdgesBySourceNodeIdentifiersEdgeFilterStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_38;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable51readEdgesBySourceNodeIdentifiersEdgeFilterStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e, identifierBitmap(?1) b where e.sourceNodeId = b.value and BitmapContainsIdentifier(?2, e.identifier)", 153);
  operator new();
}

void sub_1D174CD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesByTargetNodeIdentifiersEdgeFilterStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC13;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable51readEdgesByTargetNodeIdentifiersEdgeFilterStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_40;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable51readEdgesByTargetNodeIdentifiersEdgeFilterStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e, identifierBitmap(?1) b where e.targetNodeId = b.value and BitmapContainsIdentifier(?2, e.identifier)", 153);
  operator new();
}

void sub_1D174CFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesBySourceNodeIdentifierStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC14;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable40readEdgesBySourceNodeIdentifierStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_42;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable40readEdgesBySourceNodeIdentifierStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e where e.sourceNodeId = ?1", 77);
  operator new();
}

void sub_1D174D234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readEdgesByTargetNodeIdentifierStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC15;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable40readEdgesByTargetNodeIdentifierStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_44;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable40readEdgesByTargetNodeIdentifierStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.identifier) from Edge e where e.targetNodeId = ?1", 77);
  operator new();
}

void sub_1D174D4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC16;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable41readTargetNodesByEdgeIdentifiersStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_46;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable41readTargetNodesByEdgeIdentifiersStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.targetNodeId) from Edge e, identifierBitmap(?1) eb where e.identifier = eb.value", 108);
  operator new();
}

void sub_1D174D714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersStatement(degas::LabelledEdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xC17;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK5degas17LabelledEdgeTable41readSourceNodesByEdgeIdentifiersStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_48;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas17LabelledEdgeTable41readSourceNodesByEdgeIdentifiersStatementEv_block_invoke()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v0, (uint64_t)"select mergeLiteralBitmap(e.sourceNodeId) from Edge e, identifierBitmap(?1) eb where e.identifier = eb.value", 108);
  operator new();
}

void sub_1D174D984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByLabelIdentifiersSourceNodeIdentifiers(degas::LabelledEdgeTable *this, const degas::Bitmap *a2, Bitmap *a3)
{
  TargetNodesByLabelIdentifiersSourceNodeIdentifiersStatement = degas::LabelledEdgeTable::readTargetNodesByLabelIdentifiersSourceNodeIdentifiersStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*TargetNodesByLabelIdentifiersSourceNodeIdentifiersStatement, 1, a3);
  degas::Statement::bindBitmap((degas::Statement *)*TargetNodesByLabelIdentifiersSourceNodeIdentifiersStatement, (const Bitmap *)2, a2);
  return TargetNodesByLabelIdentifiersSourceNodeIdentifiersStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByLabelIdentifiersTargetNodeIdentifiers(degas::LabelledEdgeTable *this, const degas::Bitmap *a2, Bitmap *a3)
{
  SourceNodesByLabelIdentifiersTargetNodeIdentifiersStatement = degas::LabelledEdgeTable::readSourceNodesByLabelIdentifiersTargetNodeIdentifiersStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*SourceNodesByLabelIdentifiersTargetNodeIdentifiersStatement, 1, a3);
  degas::Statement::bindBitmap((degas::Statement *)*SourceNodesByLabelIdentifiersTargetNodeIdentifiersStatement, (const Bitmap *)2, a2);
  return SourceNodesByLabelIdentifiersTargetNodeIdentifiersStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesBySourceNodeIdentifiers(degas::LabelledEdgeTable *this, Bitmap *a2)
{
  TargetNodesBySourceNodeIdentifiersStatement = degas::LabelledEdgeTable::readTargetNodesBySourceNodeIdentifiersStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*TargetNodesBySourceNodeIdentifiersStatement, 1, a2);
  return TargetNodesBySourceNodeIdentifiersStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByTargetNodeIdentifiers(degas::LabelledEdgeTable *this, Bitmap *a2)
{
  SourceNodesByTargetNodeIdentifiersStatement = degas::LabelledEdgeTable::readSourceNodesByTargetNodeIdentifiersStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*SourceNodesByTargetNodeIdentifiersStatement, 1, a2);
  return SourceNodesByTargetNodeIdentifiersStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBoth(degas::LabelledEdgeTable *this, Bitmap *a2, Bitmap *a3)
{
  TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBothStatement = degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBothStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBothStatement, 1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBothStatement, 2, a2);
  return TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBothStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNode(degas::LabelledEdgeTable *this, Bitmap *a2, Bitmap *a3)
{
  TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNodeStatement = degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNodeStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNodeStatement, 1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNodeStatement, 2, a2);
  return TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNodeStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdge(degas::LabelledEdgeTable *this, Bitmap *a2, Bitmap *a3)
{
  TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdgeStatement = degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdgeStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdgeStatement, 1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdgeStatement, 2, a2);
  return TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdgeStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge(degas::LabelledEdgeTable *this, const degas::Bitmap *a2, Bitmap *a3)
{
  TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdgeStatement = degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdgeStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdgeStatement, 1, a3);
  degas::Statement::bindBitmap((degas::Statement *)*TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdgeStatement, (const Bitmap *)2, a2);
  return TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdgeStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNode(degas::LabelledEdgeTable *this, Bitmap *a2, const degas::Bitmap *a3)
{
  TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNodeStatement = degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNodeStatement(this);
  degas::Statement::bindBitmap((degas::Statement *)*TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNodeStatement, (const Bitmap *)1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNodeStatement, 2, a2);
  return TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNodeStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBoth(degas::LabelledEdgeTable *this, Bitmap *a2, Bitmap *a3)
{
  SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBothStatement = degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBothStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBothStatement, 1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBothStatement, 2, a2);
  return SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBothStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNode(degas::LabelledEdgeTable *this, Bitmap *a2, Bitmap *a3)
{
  SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNodeStatement = degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNodeStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNodeStatement, 1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNodeStatement, 2, a2);
  return SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNodeStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdge(degas::LabelledEdgeTable *this, Bitmap *a2, Bitmap *a3)
{
  SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdgeStatement = degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdgeStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdgeStatement, 1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdgeStatement, 2, a2);
  return SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdgeStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge(degas::LabelledEdgeTable *this, const degas::Bitmap *a2, Bitmap *a3)
{
  SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdgeStatement = degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdgeStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdgeStatement, 1, a3);
  degas::Statement::bindBitmap((degas::Statement *)*SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdgeStatement, (const Bitmap *)2, a2);
  return SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdgeStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNode(degas::LabelledEdgeTable *this, Bitmap *a2, const degas::Bitmap *a3)
{
  SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNodeStatement = degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNodeStatement(this);
  degas::Statement::bindBitmap((degas::Statement *)*SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNodeStatement, (const Bitmap *)1, a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNodeStatement, 2, a2);
  return SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNodeStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesByLabelIdentifiersSourceNodeIdentifiers(degas::LabelledEdgeTable *this, const degas::Bitmap *a2, Bitmap *a3)
{
  EdgesByLabelIdentifiersSourceNodeIdentifiersStatement = degas::LabelledEdgeTable::readEdgesByLabelIdentifiersSourceNodeIdentifiersStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*EdgesByLabelIdentifiersSourceNodeIdentifiersStatement, 1, a3);
  degas::Statement::bindBitmap((degas::Statement *)*EdgesByLabelIdentifiersSourceNodeIdentifiersStatement, (const Bitmap *)2, a2);
  return EdgesByLabelIdentifiersSourceNodeIdentifiersStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesByLabelIdentifiersTargetNodeIdentifiers(degas::LabelledEdgeTable *this, const degas::Bitmap *a2, Bitmap *a3)
{
  EdgesByLabelIdentifiersTargetNodeIdentifiersStatement = degas::LabelledEdgeTable::readEdgesByLabelIdentifiersTargetNodeIdentifiersStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*EdgesByLabelIdentifiersTargetNodeIdentifiersStatement, 1, a3);
  degas::Statement::bindBitmap((degas::Statement *)*EdgesByLabelIdentifiersTargetNodeIdentifiersStatement, (const Bitmap *)2, a2);
  return EdgesByLabelIdentifiersTargetNodeIdentifiersStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesBySourceNodeIdentifiers(degas::LabelledEdgeTable *this, Bitmap *a2)
{
  EdgesBySourceNodeIdentifiersStatement = degas::LabelledEdgeTable::readEdgesBySourceNodeIdentifiersStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*EdgesBySourceNodeIdentifiersStatement, 1, a2);
  return EdgesBySourceNodeIdentifiersStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesByTargetNodeIdentifiers(degas::LabelledEdgeTable *this, Bitmap *a2)
{
  EdgesByTargetNodeIdentifiersStatement = degas::LabelledEdgeTable::readEdgesByTargetNodeIdentifiersStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*EdgesByTargetNodeIdentifiersStatement, 1, a2);
  return EdgesByTargetNodeIdentifiersStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesBySourceNodeIdentifiersEdgeFilter(degas::LabelledEdgeTable *this, Bitmap *a2, const degas::Bitmap *a3)
{
  EdgesBySourceNodeIdentifiersEdgeFilterStatement = degas::LabelledEdgeTable::readEdgesBySourceNodeIdentifiersEdgeFilterStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*EdgesBySourceNodeIdentifiersEdgeFilterStatement, 1, a2);
  degas::Statement::bindBitmap((degas::Statement *)*EdgesBySourceNodeIdentifiersEdgeFilterStatement, (const Bitmap *)2, a3);
  return EdgesBySourceNodeIdentifiersEdgeFilterStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesByTargetNodeIdentifiersEdgeFilter(degas::LabelledEdgeTable *this, Bitmap *a2, const degas::Bitmap *a3)
{
  EdgesByTargetNodeIdentifiersEdgeFilterStatement = degas::LabelledEdgeTable::readEdgesByTargetNodeIdentifiersEdgeFilterStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*EdgesByTargetNodeIdentifiersEdgeFilterStatement, 1, a2);
  degas::Statement::bindBitmap((degas::Statement *)*EdgesByTargetNodeIdentifiersEdgeFilterStatement, (const Bitmap *)2, a3);
  return EdgesByTargetNodeIdentifiersEdgeFilterStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesBySourceNodeIdentifier(degas::LabelledEdgeTable *this, sqlite3_int64 a2)
{
  EdgesBySourceNodeIdentifierStatement = degas::LabelledEdgeTable::readEdgesBySourceNodeIdentifierStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*EdgesBySourceNodeIdentifierStatement, 1, a2);
  return EdgesBySourceNodeIdentifierStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadEdgesByTargetNodeIdentifier(degas::LabelledEdgeTable *this, sqlite3_int64 a2)
{
  EdgesByTargetNodeIdentifierStatement = degas::LabelledEdgeTable::readEdgesByTargetNodeIdentifierStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*EdgesByTargetNodeIdentifierStatement, 1, a2);
  return EdgesByTargetNodeIdentifierStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiers(degas::LabelledEdgeTable *this, Bitmap *a2)
{
  TargetNodesByEdgeIdentifiersStatement = degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*TargetNodesByEdgeIdentifiersStatement, 1, a2);
  return TargetNodesByEdgeIdentifiersStatement;
}

uint64_t *degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiers(degas::LabelledEdgeTable *this, Bitmap *a2)
{
  SourceNodesByEdgeIdentifiersStatement = degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*SourceNodesByEdgeIdentifiersStatement, 1, a2);
  return SourceNodesByEdgeIdentifiersStatement;
}

void *degas::LabelledEdgeCursor::LabelledEdgeCursor(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

void degas::LabelledEdgeCursor::setForTargetNodesFromLabelsSourceNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  TargetNodesByLabelIdentifiersSourceNodeIdentifiers = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByLabelIdentifiersSourceNodeIdentifiers(a4, a3, a2);
  uint64_t v7 = *TargetNodesByLabelIdentifiersSourceNodeIdentifiers;
  uint64_t v6 = TargetNodesByLabelIdentifiersSourceNodeIdentifiers[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForSourceNodesFromLabelsTargetNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  SourceNodesByLabelIdentifiersTargetNodeIdentifiers = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByLabelIdentifiersTargetNodeIdentifiers(a4, a3, a2);
  uint64_t v7 = *SourceNodesByLabelIdentifiersTargetNodeIdentifiers;
  uint64_t v6 = SourceNodesByLabelIdentifiersTargetNodeIdentifiers[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForTargetNodesFromSourceNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::LabelledEdgeTable *a3)
{
  TargetNodesBySourceNodeIdentifiersStatement = degas::LabelledEdgeTable::readTargetNodesBySourceNodeIdentifiersStatement(a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*TargetNodesBySourceNodeIdentifiersStatement, 1, a2);
  uint64_t v7 = (sqlite3_stmt **)*TargetNodesBySourceNodeIdentifiersStatement;
  uint64_t v6 = TargetNodesBySourceNodeIdentifiersStatement[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForSourceNodesFromTargetNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::LabelledEdgeTable *a3)
{
  SourceNodesByTargetNodeIdentifiersStatement = degas::LabelledEdgeTable::readSourceNodesByTargetNodeIdentifiersStatement(a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*SourceNodesByTargetNodeIdentifiersStatement, 1, a2);
  uint64_t v7 = (sqlite3_stmt **)*SourceNodesByTargetNodeIdentifiersStatement;
  uint64_t v6 = SourceNodesByTargetNodeIdentifiersStatement[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForTargetNodesFromEdgesSourceNodesJoinBoth(degas::LabelledEdgeCursor *this, Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBoth = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBoth(a4, a3, a2);
  uint64_t v7 = *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBoth;
  uint64_t v6 = TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinBoth[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForTargetNodesFromEdgesSourceNodesJoinNode(degas::LabelledEdgeCursor *this, Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNode = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNode(a4, a3, a2);
  uint64_t v7 = *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNode;
  uint64_t v6 = TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinNode[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForTargetNodesFromEdgesSourceNodesJoinEdge(degas::LabelledEdgeCursor *this, Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdge = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdge(a4, a3, a2);
  uint64_t v7 = *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdge;
  uint64_t v6 = TargetNodesByEdgeIdentifiersSourceNodeIdentifiersJoinEdge[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForTargetNodesFromEdgesSourceNodesFilterEdge(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge(a4, a3, a2);
  uint64_t v7 = *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge;
  uint64_t v6 = TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterEdge[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForTargetNodesFromEdgesSourceNodesFilterNode(degas::LabelledEdgeCursor *this, const degas::Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  TargetNodesByEdgeIdentifiersSourceNodeIdentifiersuint64_t FilterNode = degas::LabelledEdgeTable::prepareStatementToReadTargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNode(a4, a3, a2);
  uint64_t v7 = *TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNode;
  uint64_t v6 = TargetNodesByEdgeIdentifiersSourceNodeIdentifiersFilterNode[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForSourceNodesFromEdgesTargetNodesJoinBoth(degas::LabelledEdgeCursor *this, Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBoth = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBoth(a4, a3, a2);
  uint64_t v7 = *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBoth;
  uint64_t v6 = SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinBoth[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForSourceNodesFromEdgesTargetNodesJoinNode(degas::LabelledEdgeCursor *this, Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNode = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNode(a4, a3, a2);
  uint64_t v7 = *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNode;
  uint64_t v6 = SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinNode[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForSourceNodesFromEdgesTargetNodesJoinEdge(degas::LabelledEdgeCursor *this, Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdge = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdge(a4, a3, a2);
  uint64_t v7 = *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdge;
  uint64_t v6 = SourceNodesByEdgeIdentifiersTargetNodeIdentifiersJoinEdge[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForSourceNodesFromEdgesTargetNodesFilterEdge(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge(a4, a3, a2);
  uint64_t v7 = *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge;
  uint64_t v6 = SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterEdge[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForSourceNodesFromEdgesTargetNodesFilterNode(degas::LabelledEdgeCursor *this, const degas::Bitmap *a2, Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  SourceNodesByEdgeIdentifiersTargetNodeIdentifiersuint64_t FilterNode = degas::LabelledEdgeTable::prepareStatementToReadSourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNode(a4, a3, a2);
  uint64_t v7 = *SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNode;
  uint64_t v6 = SourceNodesByEdgeIdentifiersTargetNodeIdentifiersFilterNode[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForEdgesFromLabelsSourceNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  EdgesByLabelIdentifiersSourceNodeIdentifiers = degas::LabelledEdgeTable::prepareStatementToReadEdgesByLabelIdentifiersSourceNodeIdentifiers(a4, a3, a2);
  uint64_t v7 = *EdgesByLabelIdentifiersSourceNodeIdentifiers;
  uint64_t v6 = EdgesByLabelIdentifiersSourceNodeIdentifiers[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForEdgesFromLabelsTargetNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  EdgesByLabelIdentifiersTargetNodeIdentifiers = degas::LabelledEdgeTable::prepareStatementToReadEdgesByLabelIdentifiersTargetNodeIdentifiers(a4, a3, a2);
  uint64_t v7 = *EdgesByLabelIdentifiersTargetNodeIdentifiers;
  uint64_t v6 = EdgesByLabelIdentifiersTargetNodeIdentifiers[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForEdgesFromSourceNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::LabelledEdgeTable *a3)
{
  EdgesBySourceNodeIdentifiersStatement = degas::LabelledEdgeTable::readEdgesBySourceNodeIdentifiersStatement(a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*EdgesBySourceNodeIdentifiersStatement, 1, a2);
  uint64_t v7 = (sqlite3_stmt **)*EdgesBySourceNodeIdentifiersStatement;
  uint64_t v6 = EdgesBySourceNodeIdentifiersStatement[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForEdgesFromTargetNodes(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::LabelledEdgeTable *a3)
{
  EdgesByTargetNodeIdentifiersStatement = degas::LabelledEdgeTable::readEdgesByTargetNodeIdentifiersStatement(a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*EdgesByTargetNodeIdentifiersStatement, 1, a2);
  uint64_t v7 = (sqlite3_stmt **)*EdgesByTargetNodeIdentifiersStatement;
  uint64_t v6 = EdgesByTargetNodeIdentifiersStatement[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForEdgesFromSourceNodesEdgeFilter(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  EdgesBySourceNodeIdentifiersEdgeFilter = degas::LabelledEdgeTable::prepareStatementToReadEdgesBySourceNodeIdentifiersEdgeFilter(a4, a2, a3);
  uint64_t v7 = *EdgesBySourceNodeIdentifiersEdgeFilter;
  uint64_t v6 = EdgesBySourceNodeIdentifiersEdgeFilter[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForEdgesFromTargetNodesEdgeFilter(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::Bitmap *a3, const degas::LabelledEdgeTable *a4)
{
  EdgesByTargetNodeIdentifiersEdgeFilter = degas::LabelledEdgeTable::prepareStatementToReadEdgesByTargetNodeIdentifiersEdgeFilter(a4, a2, a3);
  uint64_t v7 = *EdgesByTargetNodeIdentifiersEdgeFilter;
  uint64_t v6 = EdgesByTargetNodeIdentifiersEdgeFilter[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForEdgesFromSourceNode(degas::LabelledEdgeCursor *this, sqlite3_int64 a2, const degas::LabelledEdgeTable *a3)
{
  EdgesBySourceNodeIdentifierStatement = degas::LabelledEdgeTable::readEdgesBySourceNodeIdentifierStatement(a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*EdgesBySourceNodeIdentifierStatement, 1, a2);
  uint64_t v7 = (sqlite3_stmt **)*EdgesBySourceNodeIdentifierStatement;
  uint64_t v6 = EdgesBySourceNodeIdentifierStatement[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForEdgesFromTargetNode(degas::LabelledEdgeCursor *this, sqlite3_int64 a2, const degas::LabelledEdgeTable *a3)
{
  EdgesByTargetNodeIdentifierStatement = degas::LabelledEdgeTable::readEdgesByTargetNodeIdentifierStatement(a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*EdgesByTargetNodeIdentifierStatement, 1, a2);
  uint64_t v7 = (sqlite3_stmt **)*EdgesByTargetNodeIdentifierStatement;
  uint64_t v6 = EdgesByTargetNodeIdentifierStatement[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForTargetNodesFromEdges(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::LabelledEdgeTable *a3)
{
  TargetNodesByEdgeIdentifiersStatement = degas::LabelledEdgeTable::readTargetNodesByEdgeIdentifiersStatement(a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*TargetNodesByEdgeIdentifiersStatement, 1, a2);
  uint64_t v7 = (sqlite3_stmt **)*TargetNodesByEdgeIdentifiersStatement;
  uint64_t v6 = TargetNodesByEdgeIdentifiersStatement[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::LabelledEdgeCursor::setForSourceNodesFromEdges(degas::LabelledEdgeCursor *this, Bitmap *a2, const degas::LabelledEdgeTable *a3)
{
  SourceNodesByEdgeIdentifiersStatement = degas::LabelledEdgeTable::readSourceNodesByEdgeIdentifiersStatement(a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*SourceNodesByEdgeIdentifiersStatement, 1, a2);
  uint64_t v7 = (sqlite3_stmt **)*SourceNodesByEdgeIdentifiersStatement;
  uint64_t v6 = SourceNodesByEdgeIdentifiersStatement[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

unsigned int *degas::LabelledEdgeCursor::identifiers(sqlite3_stmt ***this)
{
  return degas::Statement::literalBitmapColumnValue(*this, 0);
}

void degas::LabelledEdgeCursor::identifiers(sqlite3_stmt ***this, degas::Bitmap *a2)
{
}

uint64_t degas::MemoryAccountant::MemoryAccountant(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t degas::MemoryAccountant::recordDiffs(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(this + 8) + a3;
  *(void *)this += a2;
  *(void *)(this + 8) = v3;
  ++*(_DWORD *)(this + 16);
  return this;
}

void degas::MemoryAccountant::logTotals(degas::MemoryAccountant *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  degas::humanReadableMemorySizeWithSize((degas *)v7, *(void *)this);
  degas::humanReadableMemorySizeWithSize((degas *)__p, *((void *)this + 1));
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v2 = v7;
    if (v8 < 0) {
      uint64_t v2 = (void **)v7[0];
    }
    uint64_t v3 = __p;
    if (v6 < 0) {
      uint64_t v3 = (void **)__p[0];
    }
    int v4 = *((_DWORD *)this + 4);
    *(_DWORD *)buf = 136315650;
    uint64_t v10 = v2;
    __int16 v11 = 2080;
    size_t v12 = v3;
    __int16 v13 = 1024;
    int v14 = v4;
    _os_log_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Total: resident=%s, footprint=%s, count=%u", buf, 0x1Cu);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_1D174F1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t degas::humanReadableMemorySizeWithSize(degas *this, unint64_t a2)
{
  if (a2 >= 0x100000)
  {
    unsigned int v3 = 0;
    unint64_t v4 = a2;
    do
    {
      uint64_t v2 = v3 + 1;
      if (v3 > 4) {
        break;
      }
      unint64_t v5 = v4 >> 30;
      v4 >>= 10;
      ++v3;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  char v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" ", 1);
  uint64_t v7 = off_1E68DB9E8[v2];
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D25F9A50](&v12);
}

void sub_1D174F380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

degas::MemoryEntry *degas::MemoryEntry::MemoryEntry(degas::MemoryEntry *this, degas::MemoryAccountant *a2, unint64_t *a3)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + ++*((void *)this + 1) = 0u;
  *((void *)this + 4) = a2;
  degas::report_memory((degas::MemoryEntry *)((char *)this + 8), (unint64_t *)this, a3);
  return this;
}

{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + ++*((void *)this + 1) = 0u;
  *((void *)this + 4) = a2;
  degas::report_memory((degas::MemoryEntry *)((char *)this + 8), (unint64_t *)this, a3);
  return this;
}

uint64_t degas::report_memory(degas *this, unint64_t *a2, unint64_t *a3)
{
  mach_msg_type_number_t task_info_outCnt = 93;
  uint64_t result = task_info(*MEMORY[0x1E4F14960], 0x16u, task_info_out, &task_info_outCnt);
  if (!result)
  {
    uint64_t v6 = v9;
    *a2 = v10;
    *(void *)this = v6;
  }
  return result;
}

void degas::MemoryEntry::~MemoryEntry(uint64x2_t *this, uint64_t a2, unint64_t *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  degas::report_memory((degas *)&this[1].u64[1], (unint64_t *)&this[1], a3);
  int8x16_t v5 = (int8x16_t)vqsubq_u64(this[1], *this);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    uint64_t v7 = v5.i64[1];
    __int16 v8 = 2048;
    uint64_t v9 = v5.i64[0];
    _os_log_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "entry: resident diff=%llu, footprint diff=%llu", buf, 0x16u);
  }
  unint64_t v4 = (int64x2_t *)this[2].i64[0];
  *unint64_t v4 = vaddq_s64(*v4, (int64x2_t)vextq_s8(v5, v5, 8uLL));
  ++v4[1].i32[0];
}

void sub_1D174F570(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1D174F884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, degas::Statement *a18)
{
  degas::Cursor::~Cursor(&a18);

  _Unwind_Resume(a1);
}

void sub_1D174FBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D174FE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D174FF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D174FFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D17500F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D17501E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D17502E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D17503D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D17505A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1750980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  size_t v20 = *(std::__shared_weak_count **)(v18 - 64);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }

  _Unwind_Resume(a1);
}

void sub_1D1750B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  size_t v20 = *(std::__shared_weak_count **)(v18 - 64);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }

  _Unwind_Resume(a1);
}

void sub_1D17512CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  MEMORY[0x1D25F9A90](v34, 0xA1C4030951706);
  *(void *)(v35 - 104) = &a12;
  std::vector<std::shared_ptr<degas::Predicate>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 104));
  _Block_object_dispose(&a22, 8);
  a12 = a11;
  std::vector<std::shared_ptr<degas::Predicate>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a22 = (void **)&a33;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a22);
  a22 = (void **)(v35 - 192);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a22);
  uint64_t v37 = *(std::__shared_weak_count **)(v35 - 144);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  char v38 = *(std::__shared_weak_count **)(v35 - 128);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  uint64_t v39 = *(std::__shared_weak_count **)(v35 - 112);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }

  _Unwind_Resume(a1);
}

void std::shared_ptr<degas::Predicate>::shared_ptr[abi:ne180100]<degas::NoPredicate,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1D1751440(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__128(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__129(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<degas::Predicate>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_1D175177C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::shared_ptr<degas::Predicate>::reset[abi:ne180100]<degas::IntersectPredicate,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<degas::Predicate>::shared_ptr[abi:ne180100]<degas::IntersectPredicate,void>(&v2, a2);
}

void std::vector<std::shared_ptr<degas::Predicate>>::push_back[abi:ne180100](char **a1, long long *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v8 = (v4 - *a1) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<unsigned long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)*a1;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<degas::Predicate>>>(v11);
    int v14 = &v12[16 * v8];
    long long v15 = *a2;
    *(_OWORD *)int v14 = *a2;
    if (*((void *)&v15 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    size_t v16 = &v12[16 * v13];
    uint64_t v7 = v14 + 16;
    size_t v17 = *a1;
    uint64_t v18 = a1[1];
    if (v18 == *a1)
    {
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v16;
    }
    else
    {
      do
      {
        long long v19 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v14 - ++*((void *)this + 1) = v19;
        v14 -= 16;
        *(void *)uint64_t v18 = 0;
        *((void *)v18 + ++*((void *)this + 1) = 0;
      }
      while (v18 != v17);
      uint64_t v18 = *a1;
      size_t v20 = a1[1];
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v16;
      while (v20 != v18)
      {
        size_t v21 = (std::__shared_weak_count *)*((void *)v20 - 1);
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        v20 -= 16;
      }
    }
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *(void *)unint64_t v4 = *(void *)a2;
    *((void *)v4 + ++*((void *)this + 1) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = v4 + 16;
  }
  a1[1] = v7;
}

void std::shared_ptr<degas::Predicate>::shared_ptr[abi:ne180100]<degas::IntersectPredicate,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1D17519B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<degas::Predicate>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__shared_ptr_pointer<degas::IntersectPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::IntersectPredicate>,std::allocator<degas::IntersectPredicate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CE759)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::IntersectPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::IntersectPredicate>,std::allocator<degas::IntersectPredicate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::IntersectPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::IntersectPredicate>,std::allocator<degas::IntersectPredicate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<degas::Predicate>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

uint64_t std::__shared_ptr_pointer<degas::NoPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::NoPredicate>,std::allocator<degas::NoPredicate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CE145)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::NoPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::NoPredicate>,std::allocator<degas::NoPredicate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::NoPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::NoPredicate>,std::allocator<degas::NoPredicate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

void sub_1D1751EB0(_Unwind_Exception *a1)
{
  MEMORY[0x1D25F9A90](v1, 0x10E1C406FDA200FLL);
  _Unwind_Resume(a1);
}

void std::shared_ptr<degas::Predicate>::shared_ptr[abi:ne180100]<degas::AnyLabelsNodePredicate,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1D1751F5C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<degas::Predicate>::shared_ptr[abi:ne180100]<degas::AnyLabelsEdgePredicate,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1D1751FFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<degas::AnyLabelsEdgePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AnyLabelsEdgePredicate>,std::allocator<degas::AnyLabelsEdgePredicate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CE04DLL)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::AnyLabelsEdgePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AnyLabelsEdgePredicate>,std::allocator<degas::AnyLabelsEdgePredicate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::AnyLabelsEdgePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AnyLabelsEdgePredicate>,std::allocator<degas::AnyLabelsEdgePredicate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

uint64_t std::__shared_ptr_pointer<degas::AnyLabelsNodePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AnyLabelsNodePredicate>,std::allocator<degas::AnyLabelsNodePredicate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CDF4ALL)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::AnyLabelsNodePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AnyLabelsNodePredicate>,std::allocator<degas::AnyLabelsNodePredicate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::AnyLabelsNodePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AnyLabelsNodePredicate>,std::allocator<degas::AnyLabelsNodePredicate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

void sub_1D1752434(_Unwind_Exception *a1)
{
  MEMORY[0x1D25F9A90](v1, 0x10E1C406FDA200FLL);
  _Unwind_Resume(a1);
}

void std::shared_ptr<degas::Predicate>::shared_ptr[abi:ne180100]<degas::AllLabelsNodePredicate,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1D17524E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<degas::Predicate>::shared_ptr[abi:ne180100]<degas::AllLabelsEdgePredicate,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1D1752580(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<degas::AllLabelsEdgePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AllLabelsEdgePredicate>,std::allocator<degas::AllLabelsEdgePredicate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CDE47)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::AllLabelsEdgePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AllLabelsEdgePredicate>,std::allocator<degas::AllLabelsEdgePredicate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::AllLabelsEdgePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AllLabelsEdgePredicate>,std::allocator<degas::AllLabelsEdgePredicate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

uint64_t std::__shared_ptr_pointer<degas::AllLabelsNodePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AllLabelsNodePredicate>,std::allocator<degas::AllLabelsNodePredicate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CDD44)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::AllLabelsNodePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AllLabelsNodePredicate>,std::allocator<degas::AllLabelsNodePredicate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::AllLabelsNodePredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::AllLabelsNodePredicate>,std::allocator<degas::AllLabelsNodePredicate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

void sub_1D1752C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (*(char *)(v46 + 55) < 0) {
    operator delete(*v44);
  }
  operator delete(__p);
  if (v45 < 0) {
    operator delete(a18);
  }
  MEMORY[0x1D25F9A90](v46, 0x10F3C40C42C01C0);
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a41 < 0) {
    operator delete(a36);
  }

  a36 = &a32;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);

  _Unwind_Resume(a1);
}

unint64_t rowCountForElementType(int a1, degas::Database *this)
{
  if ((a1 - 3) < 2) {
    return 0;
  }
  if (a1 == 2)
  {
    return degas::Database::edgeCount(this);
  }
  else
  {
    if (a1 != 1) {
      abort();
    }
    return degas::Database::nodeCount(this);
  }
}

void stringNSToStd(NSString *a1, void *a2)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  unint64_t v4 = [v3 lengthOfBytesUsingEncoding:4];
  size_t v6 = v4;
  unint64_t v7 = v4 + 1;
  if (v4 > 0x3FF)
  {
    unint64_t v9 = malloc_type_malloc(v4 + 1, 0xCC538BE0uLL);
    id v10 = v3;
    if (([v10 getCString:v9 maxLength:v7 encoding:4] & 1) == 0) {
      __assert_rtn("stringNSToChars", "KGDatabase.mm", 97, "success");
    }

    std::string::basic_string[abi:ne180100](a1, v9, v6);
    free(v9);
  }
  else
  {
    MEMORY[0x1F4188790](v4, v5);
    id v8 = v3;
    if (([v8 getCString:(char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0) maxLength:v7 encoding:4] & 1) == 0) {
      __assert_rtn("stringNSToChars", "KGDatabase.mm", 97, "success");
    }

    std::string::basic_string[abi:ne180100](a1, (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  }
}

void sub_1D1753050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<degas::RangePredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<std::string>>,std::allocator<degas::RangePredicate<std::string>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CDC0DLL)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::RangePredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<std::string>>,std::allocator<degas::RangePredicate<std::string>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::RangePredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<std::string>>,std::allocator<degas::RangePredicate<std::string>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

void degas::RangePredicate<std::string>::debugDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  degas::Database::getAttributeProperties(a2, *(void *)(a1 + 24), (uint64_t)&v26);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  int v3 = *(char *)(a1 + 55);
  if (v3 >= 0) {
    uint64_t v4 = a1 + 32;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 40);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v4, v5);
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)__p, 1);
  int v6 = *(char *)(a1 + 79);
  if (v6 >= 0) {
    uint64_t v7 = a1 + 56;
  }
  else {
    uint64_t v7 = *(void *)(a1 + 56);
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 79);
  }
  else {
    uint64_t v8 = *(void *)(a1 + 64);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v7, v8);
  if (v28 >= 0) {
    unint64_t v9 = (void **)&v26;
  }
  else {
    unint64_t v9 = v26;
  }
  if (v28 >= 0) {
    uint64_t v10 = HIBYTE(v28);
  }
  else {
    uint64_t v10 = v27;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"in ", 3);
  int v11 = *(_DWORD *)(a1 + 16);
  std::stringbuf::str();
  degas::TernaryOperatorDescription(v11, (uint64_t)&v16);
  if ((v19 & 0x80u) == 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v13 = v19;
  }
  else {
    uint64_t v13 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v12, v13);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  std::stringbuf::str();
  v20[0] = *MEMORY[0x1E4FBA418];
  uint64_t v14 = v20[0];
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = v15;
  v20[1] = MEMORY[0x1E4FBA470] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v22);
  v23[0] = v14;
  *(void *)((char *)v23 + *(void *)(v14 - 24)) = v15;
  v23[1] = MEMORY[0x1E4FBA470] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v25);
  if (SHIBYTE(v28) < 0) {
    operator delete(v26);
  }
}

void sub_1D1753448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  std::ostringstream::~ostringstream((uint64_t)&a55);
  if (*(char *)(v55 - 65) < 0) {
    operator delete(*(void **)(v55 - 88));
  }
  _Unwind_Resume(a1);
}

uint64_t degas::RangePredicate<std::string>::isTrivialNo()
{
  return 0;
}

uint64_t degas::RangePredicate<std::string>::isTrivialYes()
{
  return 0;
}

uint64_t degas::RangePredicate<std::string>::allLabelIds()
{
  return 0;
}

void degas::RangePredicate<std::string>::decomposeLabelsPredicate(void *a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t degas::RangePredicate<std::string>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  uint64_t v3 = *(void *)(a1 + 80);
  v5[0] = *(void *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::filterElementsForAttributeValueRange(v5, *(void *)(a1 + 24), a1 + 32, a1 + 56, *(_DWORD *)(a1 + 16), a2, a3);
}

uint64_t degas::RangePredicate<std::string>::elements(uint64_t a1, degas::Bitmap *a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  v4[0] = *(void *)(a1 + 8);
  v4[1] = v2;
  return degas::AttributeQuery::elementsForAttributeValueRange(v4, *(void *)(a1 + 24), a1 + 32, a1 + 56, *(_DWORD *)(a1 + 16), a2);
}

void degas::RangePredicate<std::string>::~RangePredicate(uint64_t a1)
{
  *(void *)a1 = &unk_1F2801B48;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  JUMPOUT(0x1D25F9A90);
}

uint64_t degas::RangePredicate<std::string>::~RangePredicate(uint64_t a1)
{
  *(void *)a1 = &unk_1F2801B48;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    double *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    int v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

uint64_t std::__shared_ptr_pointer<degas::RangePredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<double>>,std::allocator<degas::RangePredicate<double>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CDA89)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::RangePredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<double>>,std::allocator<degas::RangePredicate<double>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::RangePredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<double>>,std::allocator<degas::RangePredicate<double>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

void degas::RangePredicate<double>::debugDescription(uint64_t a1, uint64_t a2)
{
  char v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  degas::Database::getAttributeProperties(a2, *(void *)(a1 + 24), (uint64_t)&v21);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v3 = (void *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)__p, 1);
  std::ostream::operator<<();
  if (v23 >= 0) {
    uint64_t v4 = (void **)&v21;
  }
  else {
    uint64_t v4 = v21;
  }
  if (v23 >= 0) {
    uint64_t v5 = HIBYTE(v23);
  }
  else {
    uint64_t v5 = v22;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"in ", 3);
  int v6 = *(_DWORD *)(a1 + 16);
  std::stringbuf::str();
  degas::TernaryOperatorDescription(v6, (uint64_t)&v11);
  if ((v14 & 0x80u) == 0) {
    size_t v7 = __p;
  }
  else {
    size_t v7 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v8 = v14;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v7, v8);
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E4FBA418];
  uint64_t v9 = v15[0];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = v10;
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v17);
  v18[0] = v9;
  *(void *)((char *)v18 + *(void *)(v9 - 24)) = v10;
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v20);
  if (SHIBYTE(v23) < 0) {
    operator delete(v21);
  }
}

void sub_1D1753A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  std::ostringstream::~ostringstream((uint64_t)&a55);
  if (*(char *)(v55 - 65) < 0) {
    operator delete(*(void **)(v55 - 88));
  }
  _Unwind_Resume(a1);
}

uint64_t degas::RangePredicate<double>::isTrivialNo()
{
  return 0;
}

uint64_t degas::RangePredicate<double>::isTrivialYes()
{
  return 0;
}

uint64_t degas::RangePredicate<double>::allLabelIds()
{
  return 0;
}

void degas::RangePredicate<double>::decomposeLabelsPredicate(void *a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t degas::RangePredicate<double>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  v5[0] = *(void *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::filterElementsForAttributeValueRange(v5, *(void *)(a1 + 24), *(_DWORD *)(a1 + 16), a2, a3, *(double *)(a1 + 32), *(double *)(a1 + 40));
}

uint64_t degas::RangePredicate<double>::elements(uint64_t a1, degas::Bitmap *a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v4[0] = *(void *)(a1 + 8);
  v4[1] = v2;
  return degas::AttributeQuery::elementsForAttributeValueRange(v4, *(void *)(a1 + 24), *(_DWORD *)(a1 + 16), a2, *(double *)(a1 + 32), *(double *)(a1 + 40));
}

void degas::RangePredicate<double>::~RangePredicate()
{
}

uint64_t std::__shared_ptr_pointer<degas::RangePredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<long long>>,std::allocator<degas::RangePredicate<long long>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CD974)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::RangePredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<long long>>,std::allocator<degas::RangePredicate<long long>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::RangePredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::RangePredicate<long long>>,std::allocator<degas::RangePredicate<long long>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

void degas::RangePredicate<long long>::debugDescription(uint64_t a1, uint64_t a2)
{
  char v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  degas::Database::getAttributeProperties(a2, *(void *)(a1 + 24), (uint64_t)&v21);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v3 = (void *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)__p, 1);
  std::ostream::operator<<();
  if (v23 >= 0) {
    uint64_t v4 = (void **)&v21;
  }
  else {
    uint64_t v4 = v21;
  }
  if (v23 >= 0) {
    uint64_t v5 = HIBYTE(v23);
  }
  else {
    uint64_t v5 = v22;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"in ", 3);
  int v6 = *(_DWORD *)(a1 + 16);
  std::stringbuf::str();
  degas::TernaryOperatorDescription(v6, (uint64_t)&v11);
  if ((v14 & 0x80u) == 0) {
    size_t v7 = __p;
  }
  else {
    size_t v7 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v8 = v14;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v7, v8);
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E4FBA418];
  uint64_t v9 = v15[0];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = v10;
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v17);
  v18[0] = v9;
  *(void *)((char *)v18 + *(void *)(v9 - 24)) = v10;
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v20);
  if (SHIBYTE(v23) < 0) {
    operator delete(v21);
  }
}

void sub_1D1753F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  std::ostringstream::~ostringstream((uint64_t)&a55);
  if (*(char *)(v55 - 65) < 0) {
    operator delete(*(void **)(v55 - 88));
  }
  _Unwind_Resume(a1);
}

uint64_t degas::RangePredicate<long long>::isTrivialNo()
{
  return 0;
}

uint64_t degas::RangePredicate<long long>::isTrivialYes()
{
  return 0;
}

uint64_t degas::RangePredicate<long long>::allLabelIds()
{
  return 0;
}

void degas::RangePredicate<long long>::decomposeLabelsPredicate(void *a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t degas::RangePredicate<long long>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  sqlite3_int64 v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v6[0] = *(void *)(a1 + 8);
  v6[1] = v4;
  return degas::AttributeQuery::filterElementsForAttributeValueRange(v6, *(void *)(a1 + 24), *(void *)(a1 + 32), v3, *(_DWORD *)(a1 + 16), a2, a3);
}

uint64_t degas::RangePredicate<long long>::elements(uint64_t a1, degas::Bitmap *a2)
{
  sqlite3_int64 v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  v5[0] = *(void *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::elementsForAttributeValueRange(v5, *(void *)(a1 + 24), *(void *)(a1 + 32), v2, *(_DWORD *)(a1 + 16), a2);
}

void degas::RangePredicate<long long>::~RangePredicate()
{
}

void sub_1D1754460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  operator delete(v20);
  MEMORY[0x1D25F9A90](v21, 0x10F3C403BDC16CCLL);
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<degas::BinaryPredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<std::string>>,std::allocator<degas::BinaryPredicate<std::string>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CD825)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::BinaryPredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<std::string>>,std::allocator<degas::BinaryPredicate<std::string>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::BinaryPredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<std::string>>,std::allocator<degas::BinaryPredicate<std::string>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

void degas::BinaryPredicate<std::string>::debugDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  degas::Database::getAttributeProperties(a2, *(void *)(a1 + 24), (uint64_t)&v18);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  if (v20 >= 0) {
    uint64_t v3 = (void **)&v18;
  }
  else {
    uint64_t v3 = v18;
  }
  if (v20 >= 0) {
    uint64_t v4 = HIBYTE(v20);
  }
  else {
    uint64_t v4 = v19;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v3, v4);
  std::string::basic_string[abi:ne180100]<0>(__p, off_1E68DAE18[*(int *)(a1 + 16)]);
  if ((v14 & 0x80u) == 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v6 = v14;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v5, v6);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = a1 + 32;
  uint64_t v7 = v9;
  int v10 = *(char *)(v8 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = v7;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v8 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v11, v12);
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v17);
  if (SHIBYTE(v20) < 0) {
    operator delete(v18);
  }
}

void sub_1D1754814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  if (*(char *)(v16 - 33) < 0) {
    operator delete(*(void **)(v16 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t degas::BinaryPredicate<std::string>::isTrivialNo()
{
  return 0;
}

uint64_t degas::BinaryPredicate<std::string>::isTrivialYes()
{
  return 0;
}

uint64_t degas::BinaryPredicate<std::string>::allLabelIds()
{
  return 0;
}

void degas::BinaryPredicate<std::string>::decomposeLabelsPredicate(void *a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t degas::BinaryPredicate<std::string>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  v5[0] = *(void *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::filterElementsForAttributeValue(v5, *(void *)(a1 + 24), a1 + 32, *(_DWORD *)(a1 + 16), a2, a3);
}

uint64_t degas::BinaryPredicate<std::string>::elements(uint64_t a1, degas::Bitmap *a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  v4[0] = *(void *)(a1 + 8);
  v4[1] = v2;
  return degas::AttributeQuery::elementsForAttributeValue(v4, *(void *)(a1 + 24), a1 + 32, *(_DWORD *)(a1 + 16), a2);
}

void degas::BinaryPredicate<std::string>::~BinaryPredicate(uint64_t a1)
{
  *(void *)a1 = &unk_1F2801908;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  JUMPOUT(0x1D25F9A90);
}

uint64_t degas::BinaryPredicate<std::string>::~BinaryPredicate(uint64_t a1)
{
  *(void *)a1 = &unk_1F2801908;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<degas::BinaryPredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<double>>,std::allocator<degas::BinaryPredicate<double>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CD69ELL)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::BinaryPredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<double>>,std::allocator<degas::BinaryPredicate<double>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::BinaryPredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<double>>,std::allocator<degas::BinaryPredicate<double>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

void degas::BinaryPredicate<double>::debugDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  degas::Database::getAttributeProperties(a2, *(void *)(a1 + 24), (uint64_t)&v12);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  if (v14 >= 0) {
    uint64_t v3 = (void **)&v12;
  }
  else {
    uint64_t v3 = v12;
  }
  if (v14 >= 0) {
    uint64_t v4 = HIBYTE(v14);
  }
  else {
    uint64_t v4 = v13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v3, v4);
  std::string::basic_string[abi:ne180100]<0>(__p, off_1E68DAE18[*(int *)(a1 + 16)]);
  if ((v8 & 0x80u) == 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v6 = v8;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v5, v6);
  std::ostream::operator<<();
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v9[1] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v11);
  if (SHIBYTE(v14) < 0) {
    operator delete(v12);
  }
}

void sub_1D1754C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  if (*(char *)(v16 - 33) < 0) {
    operator delete(*(void **)(v16 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t degas::BinaryPredicate<double>::isTrivialNo()
{
  return 0;
}

uint64_t degas::BinaryPredicate<double>::isTrivialYes()
{
  return 0;
}

uint64_t degas::BinaryPredicate<double>::allLabelIds()
{
  return 0;
}

void degas::BinaryPredicate<double>::decomposeLabelsPredicate(void *a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t degas::BinaryPredicate<double>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = *(void *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::filterElementsForAttributeValue(v5, *(void *)(a1 + 24), *(_DWORD *)(a1 + 16), a2, a3, *(double *)(a1 + 32));
}

uint64_t degas::BinaryPredicate<double>::elements(uint64_t a1, degas::Bitmap *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  v4[0] = *(void *)(a1 + 8);
  v4[1] = v2;
  return degas::AttributeQuery::elementsForAttributeValue(v4, *(void *)(a1 + 24), *(_DWORD *)(a1 + 16), a2, *(double *)(a1 + 32));
}

void degas::BinaryPredicate<double>::~BinaryPredicate()
{
}

uint64_t std::__shared_ptr_pointer<degas::BinaryPredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<long long>>,std::allocator<degas::BinaryPredicate<long long>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CD586)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::BinaryPredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<long long>>,std::allocator<degas::BinaryPredicate<long long>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::BinaryPredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::BinaryPredicate<long long>>,std::allocator<degas::BinaryPredicate<long long>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

void degas::BinaryPredicate<long long>::debugDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  degas::Database::getAttributeProperties(a2, *(void *)(a1 + 24), (uint64_t)&v12);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  if (v14 >= 0) {
    uint64_t v3 = (void **)&v12;
  }
  else {
    uint64_t v3 = v12;
  }
  if (v14 >= 0) {
    uint64_t v4 = HIBYTE(v14);
  }
  else {
    uint64_t v4 = v13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v3, v4);
  std::string::basic_string[abi:ne180100]<0>(__p, off_1E68DAE18[*(int *)(a1 + 16)]);
  if ((v8 & 0x80u) == 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v6 = v8;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v5, v6);
  std::ostream::operator<<();
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v9[1] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v11);
  if (SHIBYTE(v14) < 0) {
    operator delete(v12);
  }
}

void sub_1D1755004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  if (*(char *)(v16 - 33) < 0) {
    operator delete(*(void **)(v16 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t degas::BinaryPredicate<long long>::isTrivialNo()
{
  return 0;
}

uint64_t degas::BinaryPredicate<long long>::isTrivialYes()
{
  return 0;
}

uint64_t degas::BinaryPredicate<long long>::allLabelIds()
{
  return 0;
}

void degas::BinaryPredicate<long long>::decomposeLabelsPredicate(void *a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t degas::BinaryPredicate<long long>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  sqlite3_int64 v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v7[0] = *(void *)(a1 + 8);
  v7[1] = v5;
  return degas::AttributeQuery::filterElementsForAttributeValue(v7, *(void *)(a1 + 24), v4, *(_DWORD *)(a1 + 16), a2, a3);
}

uint64_t degas::BinaryPredicate<long long>::elements(uint64_t a1, degas::Bitmap *a2)
{
  sqlite3_int64 v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = *(void *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::elementsForAttributeValue(v5, *(void *)(a1 + 24), v2, *(_DWORD *)(a1 + 16), a2);
}

void degas::BinaryPredicate<long long>::~BinaryPredicate()
{
}

void sub_1D1755B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  sqlite3_int64 v2 = (void **)**a1;
  if (v2)
  {
    sqlite3_int64 v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

uint64_t std::__shared_ptr_pointer<degas::UnionPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::UnionPredicate>,std::allocator<degas::UnionPredicate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CD472)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::UnionPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::UnionPredicate>,std::allocator<degas::UnionPredicate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::UnionPredicate *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::UnionPredicate>,std::allocator<degas::UnionPredicate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

uint64_t std::__shared_ptr_pointer<degas::ValueListPredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<double>>,std::allocator<degas::ValueListPredicate<double>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CD378)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::ValueListPredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<double>>,std::allocator<degas::ValueListPredicate<double>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::ValueListPredicate<double> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<double>>,std::allocator<degas::ValueListPredicate<double>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

char *std::vector<double>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<unsigned long long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void degas::ValueListPredicate<double>::debugDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  degas::Database::getAttributeProperties(a2, *(void *)(a1 + 24), (uint64_t)&v14);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  if (v16 >= 0) {
    uint64_t v3 = (void **)&v14;
  }
  else {
    uint64_t v3 = v14;
  }
  if (v16 >= 0) {
    uint64_t v4 = HIBYTE(v16);
  }
  else {
    uint64_t v4 = v15;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v3, v4);
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5 == 1) {
    uint64_t v6 = " in ";
  }
  else {
    uint64_t v6 = " not in ";
  }
  if (v5 == 1) {
    uint64_t v7 = 4;
  }
  else {
    uint64_t v7 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v6, v7);
  char v17 = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v17, 1);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  if (v9 != v8)
  {
    char v10 = 1;
    do
    {
      if ((v10 & 1) == 0)
      {
        char v17 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v17, 1);
      }
      std::ostream::operator<<();
      char v10 = 0;
      v9 += 8;
    }
    while (v9 != v8);
  }
  char v17 = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v17, 1);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v11[1] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v13);
  if (SHIBYTE(v16) < 0) {
    operator delete(v14);
  }
}

void sub_1D175631C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 - 73) < 0) {
    operator delete(*(void **)(v10 - 96));
  }
  _Unwind_Resume(exception_object);
}

uint64_t degas::ValueListPredicate<double>::isTrivialNo()
{
  return 0;
}

uint64_t degas::ValueListPredicate<double>::isTrivialYes()
{
  return 0;
}

uint64_t degas::ValueListPredicate<double>::allLabelIds()
{
  return 0;
}

void degas::ValueListPredicate<double>::decomposeLabelsPredicate(void *a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t degas::ValueListPredicate<double>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  v5[0] = *(void *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::filterElementsForAttributeValues(v5, *(void *)(a1 + 24), *(void **)(a1 + 32), (*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3, *(_DWORD *)(a1 + 16), a2, a3);
}

uint64_t degas::ValueListPredicate<double>::elements(uint64_t a1, degas::Bitmap *a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  v4[0] = *(void *)(a1 + 8);
  v4[1] = v2;
  return degas::AttributeQuery::elementsForAttributeValues(v4, *(void *)(a1 + 24), *(void **)(a1 + 32), (*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3, *(_DWORD *)(a1 + 16), a2);
}

void degas::ValueListPredicate<double>::~ValueListPredicate(void *a1)
{
  *a1 = &unk_1F2801678;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D25F9A90);
}

void *degas::ValueListPredicate<double>::~ValueListPredicate(void *a1)
{
  *a1 = &unk_1F2801678;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<degas::ValueListPredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<long long>>,std::allocator<degas::ValueListPredicate<long long>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CD257)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::ValueListPredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<long long>>,std::allocator<degas::ValueListPredicate<long long>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::ValueListPredicate<long long> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<long long>>,std::allocator<degas::ValueListPredicate<long long>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

void degas::ValueListPredicate<long long>::debugDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  degas::Database::getAttributeProperties(a2, *(void *)(a1 + 24), (uint64_t)&v14);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  if (v16 >= 0) {
    uint64_t v3 = (void **)&v14;
  }
  else {
    uint64_t v3 = v14;
  }
  if (v16 >= 0) {
    uint64_t v4 = HIBYTE(v16);
  }
  else {
    uint64_t v4 = v15;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v3, v4);
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5 == 1) {
    uint64_t v6 = " in ";
  }
  else {
    uint64_t v6 = " not in ";
  }
  if (v5 == 1) {
    uint64_t v7 = 4;
  }
  else {
    uint64_t v7 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v6, v7);
  char v17 = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v17, 1);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v8 != v9)
  {
    char v10 = 1;
    do
    {
      if ((v10 & 1) == 0)
      {
        char v17 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v17, 1);
      }
      std::ostream::operator<<();
      char v10 = 0;
      v8 += 8;
    }
    while (v8 != v9);
  }
  char v17 = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v17, 1);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v11[1] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v13);
  if (SHIBYTE(v16) < 0) {
    operator delete(v14);
  }
}

void sub_1D17567C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 - 57) < 0) {
    operator delete(*(void **)(v10 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t degas::ValueListPredicate<long long>::isTrivialNo()
{
  return 0;
}

uint64_t degas::ValueListPredicate<long long>::isTrivialYes()
{
  return 0;
}

uint64_t degas::ValueListPredicate<long long>::allLabelIds()
{
  return 0;
}

void degas::ValueListPredicate<long long>::decomposeLabelsPredicate(void *a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t degas::ValueListPredicate<long long>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  v5[0] = *(void *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::filterElementsForAttributeValues(v5, *(void *)(a1 + 24), *(void **)(a1 + 32), (*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3, *(_DWORD *)(a1 + 16), a2, a3);
}

uint64_t degas::ValueListPredicate<long long>::elements(uint64_t a1, degas::Bitmap *a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  v4[0] = *(void *)(a1 + 8);
  v4[1] = v2;
  return degas::AttributeQuery::elementsForAttributeValues(v4, *(void *)(a1 + 24), *(void **)(a1 + 32), (*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3, *(_DWORD *)(a1 + 16), a2);
}

void degas::ValueListPredicate<long long>::~ValueListPredicate(void *a1)
{
  *a1 = &unk_1F28015B8;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D25F9A90);
}

void *degas::ValueListPredicate<long long>::~ValueListPredicate(void *a1)
{
  *a1 = &unk_1F28015B8;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<degas::ValueListPredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<std::string>>,std::allocator<degas::ValueListPredicate<std::string>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CD0FDLL)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::ValueListPredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<std::string>>,std::allocator<degas::ValueListPredicate<std::string>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<degas::ValueListPredicate<std::string> *,std::shared_ptr<degas::Predicate>::__shared_ptr_default_delete<degas::Predicate,degas::ValueListPredicate<std::string>>,std::allocator<degas::ValueListPredicate<std::string>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

void degas::ValueListPredicate<std::string>::debugDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  degas::Database::getAttributeProperties(a2, *(void *)(a1 + 24), (uint64_t)&v18);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  if (v20 >= 0) {
    uint64_t v3 = (void **)&v18;
  }
  else {
    uint64_t v3 = v18;
  }
  if (v20 >= 0) {
    uint64_t v4 = HIBYTE(v20);
  }
  else {
    uint64_t v4 = v19;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v3, v4);
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5 == 1) {
    uint64_t v6 = " in ";
  }
  else {
    uint64_t v6 = " not in ";
  }
  if (v5 == 1) {
    uint64_t v7 = 4;
  }
  else {
    uint64_t v7 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v6, v7);
  __p.__r_.__value_.__s.__data_[0] = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&__p, 1);
  uint64_t v9 = *(long long **)(a1 + 32);
  uint64_t v8 = *(long long **)(a1 + 40);
  if (v9 != v8)
  {
    char v10 = 1;
    do
    {
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v11 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }
      if ((v10 & 1) == 0)
      {
        char v21 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v21, 1);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      char v10 = 0;
      uint64_t v9 = (long long *)((char *)v9 + 24);
    }
    while (v9 != v8);
  }
  __p.__r_.__value_.__s.__data_[0] = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&__p, 1);
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v17);
  if (SHIBYTE(v20) < 0) {
    operator delete(v18);
  }
}

void sub_1D1756D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (*(char *)(v15 - 73) < 0) {
    operator delete(*(void **)(v15 - 96));
  }
  _Unwind_Resume(exception_object);
}

uint64_t degas::ValueListPredicate<std::string>::isTrivialNo()
{
  return 0;
}

uint64_t degas::ValueListPredicate<std::string>::isTrivialYes()
{
  return 0;
}

uint64_t degas::ValueListPredicate<std::string>::allLabelIds()
{
  return 0;
}

void degas::ValueListPredicate<std::string>::decomposeLabelsPredicate(void *a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v2 = a1[1];
  a2[2] = *a1;
  a2[3] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t degas::ValueListPredicate<std::string>::filterElements(uint64_t a1, Bitmap *a2, degas::AggregateValueCursor *a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  v5[0] = *(void *)(a1 + 8);
  v5[1] = v3;
  return degas::AttributeQuery::filterElementsForAttributeValues((uint64_t)v5, *(void *)(a1 + 24), *(uint64_t **)(a1 + 32), -1431655765 * ((*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3), *(_DWORD *)(a1 + 16), a2, a3);
}

uint64_t degas::ValueListPredicate<std::string>::elements(uint64_t a1, degas::Bitmap *a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  v4[0] = *(void *)(a1 + 8);
  v4[1] = v2;
  return degas::AttributeQuery::elementsForAttributeValues(v4, *(void *)(a1 + 24), *(uint64_t **)(a1 + 32), -1431655765 * ((*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3), *(_DWORD *)(a1 + 16), a2);
}

void degas::ValueListPredicate<std::string>::~ValueListPredicate(uint64_t a1)
{
  *(void *)a1 = &unk_1F28014F8;
  uint64_t v1 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1D25F9A90);
}

uint64_t degas::ValueListPredicate<std::string>::~ValueListPredicate(uint64_t a1)
{
  *(void *)a1 = &unk_1F28014F8;
  uint64_t v3 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void sub_1D175704C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D17571E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1757364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1757468(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1 + 16;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1D1757524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v12 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 40));

  _Unwind_Resume(a1);
}

void sub_1D1757640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D17577C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void sub_1D1757910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void sub_1D1757A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void sub_1D1757B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v12 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 40));

  _Unwind_Resume(a1);
}

void sub_1D1757C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v12 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 40));

  _Unwind_Resume(a1);
}

void sub_1D1757D4C(_Unwind_Exception *a1, void *a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(unsigned long long,degas::Database::TransactionChanges const&)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(unsigned long long,degas::Database::TransactionChanges const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1D1757F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1757FA0()
{
}

void sub_1D1758320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  a9 = (void **)&a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a11 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a11);

  _Unwind_Resume(a1);
}

void sub_1D17586A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  a9 = (void **)&a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a11 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a11);

  _Unwind_Resume(a1);
}

void sub_1D17587DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 + 16);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1D1758ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1D1758B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1758C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1758C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1758DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1758EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1758FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D17590D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D17591EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D17592DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D17595DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  a9 = (void **)&a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a11 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a11);

  _Unwind_Resume(a1);
}

void sub_1D175995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  a9 = (void **)&a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a11 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a11);

  _Unwind_Resume(a1);
}

void sub_1D1759AB8(_Unwind_Exception *a1)
{
  degas::Cursor::~Cursor((degas::Statement **)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1D1759BF8(_Unwind_Exception *a1)
{
  degas::Cursor::~Cursor((degas::Statement **)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1D1759D38(_Unwind_Exception *a1)
{
  degas::Cursor::~Cursor((degas::Statement **)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1D1759E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 + 16);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1D175A138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1D175A20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D175A280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D175A2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D175A420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D175A898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }

  std::string __p = &a20;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1D175AA60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D175B0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (v50) {
    operator delete(v50);
  }

  a45 = (void **)&a49;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a45);

  _Unwind_Resume(a1);
}

void sub_1D175B2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D175B6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20)
{
  std::string __p = &a20;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1D175B838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D175BE14(_Unwind_Exception *a1)
{
  *(void *)(v1 + 272) = v1 + 304;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 + 272));

  _Unwind_Resume(a1);
}

void sub_1D175C0DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D175C250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D175C5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }

  a24 = &a20;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);

  _Unwind_Resume(a1);
}

void sub_1D175C784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D175CA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  std::string __p = &a13;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1D175CB90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D175CC34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D175CF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  *(void *)(v10 - 112) = v9;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 112));
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_1D175D5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  a33 = (void **)&a57;
  std::vector<degas::EdgeCreationRequest>::__destroy_vector::operator()[abi:ne180100](&a33);

  _Unwind_Resume(a1);
}

void std::vector<degas::EdgeCreationRequest>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 72;
        uint64_t v7 = (void **)(v4 - 48);
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<degas::EdgeCreationRequest>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    int v5 = (void **)(i - 48);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<degas::EdgeCreationRequest>,std::reverse_iterator<degas::EdgeCreationRequest*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      int v5 = (void **)(v3 + 24);
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v5);
      v3 += 72;
    }
  }
  return a1;
}

void sub_1D175D9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);
  a17 = (void **)&a29;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a17);

  _Unwind_Resume(a1);
}

char *__Block_byref_object_copy__2278(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t result = std::vector<degas::BitsetPtr>::__init_with_size[abi:ne180100]<degas::BitsetPtr*,degas::BitsetPtr*>((char *)(a1 + 64), *(long long **)(a2 + 64), *(long long **)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return result;
}

void __Block_byref_object_dispose__2279(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 64);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_1D175DC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1D175DEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  *(void *)(v10 - 80) = v9;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 80));
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_1D175E4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  a33 = (void **)&a55;
  std::vector<degas::NodeCreationRequest>::__destroy_vector::operator()[abi:ne180100](&a33);

  _Unwind_Resume(a1);
}

void std::vector<degas::NodeCreationRequest>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 56;
        uint64_t v7 = (void **)(v4 - 32);
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<degas::NodeCreationRequest>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    int v5 = (void **)(i - 32);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<degas::NodeCreationRequest>,std::reverse_iterator<degas::NodeCreationRequest*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      int v5 = (void **)(v3 + 24);
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v5);
      v3 += 56;
    }
  }
  return a1;
}

void sub_1D175E904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);
  a17 = (void **)&a29;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a17);

  _Unwind_Resume(a1);
}

void sub_1D175EB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1D175EDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_1D175EFB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D175F1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D175F398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v30 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1D175F554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1D175F674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D175F83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v30 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1D175F9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1D175FB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D175FE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  a29 = a14;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a29);

  _Unwind_Resume(a1);
}

void sub_1D175FF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, degas::Statement *a9)
{
  degas::Cursor::~Cursor(&a9);

  _Unwind_Resume(a1);
}

void sub_1D175FFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D17600A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1760170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1760238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  degas::Cursor::~Cursor(v10);

  _Unwind_Resume(a1);
}

void sub_1D1760308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  degas::Cursor::~Cursor(v10);

  _Unwind_Resume(a1);
}

void sub_1D17605F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  a29 = a14;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a29);

  _Unwind_Resume(a1);
}

void sub_1D17606E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, degas::Statement *a9)
{
  degas::Cursor::~Cursor(&a9);

  _Unwind_Resume(a1);
}

void sub_1D17607A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1760878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1760948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1760A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  degas::Cursor::~Cursor(v10);

  _Unwind_Resume(a1);
}

void sub_1D1760AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  degas::Cursor::~Cursor(v10);

  _Unwind_Resume(a1);
}

void sub_1D1760BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1760C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, degas::Statement *a11)
{
  degas::Cursor::~Cursor((degas::Statement **)&a9);
  degas::Cursor::~Cursor(&a11);

  _Unwind_Resume(a1);
}

void sub_1D1760D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, degas::Statement *a11)
{
  degas::Cursor::~Cursor((degas::Statement **)&a9);
  degas::Cursor::~Cursor(&a11);

  _Unwind_Resume(a1);
}

void sub_1D1760E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, degas::Statement *a11)
{
  degas::Cursor::~Cursor((degas::Statement **)&a9);
  degas::Cursor::~Cursor(&a11);

  _Unwind_Resume(a1);
}

void sub_1D1760ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, degas::Statement *a11)
{
  degas::Cursor::~Cursor((degas::Statement **)&a9);
  degas::Cursor::~Cursor(&a11);

  _Unwind_Resume(a1);
}

void sub_1D1761038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D17611C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1D17613AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }

  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_1D176166C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, degas::Statement *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  degas::Cursor::~Cursor(&a15);
  a9 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);

  _Unwind_Resume(a1);
}

void sub_1D1761834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, degas::Statement *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  degas::Cursor::~Cursor(&a15);
  a9 = (void **)&a19;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);

  _Unwind_Resume(a1);
}

void sub_1D17619D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1D1761B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1D1761C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1761DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1761F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)(v18 + 16);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a17);

  _Unwind_Resume(a1);
}

void sub_1D1762008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D176208C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D17621A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1D1762614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1D1762740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1762854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1D1762904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)KGDatabase;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1D17629CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1762BB8(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1D1762D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1D1762EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  degas::Database::~Database(&a16);

  _Unwind_Resume(a1);
}

void sub_1D1762FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1D17630F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1D17632B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL report_memory(void *a1, unint64_t a2, unint64_t a3)
{
  kern_return_t v6;
  BOOL result;
  uint64_t v8;
  kern_return_t v9;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  int v34;

  if (a2 | a3)
  {
    uint64_t v34 = 0;
    BOOL v32 = 0u;
    char v33 = 0u;
    uint64_t v30 = 0u;
    unint64_t v31 = 0u;
    uint64_t v28 = 0u;
    uint64_t v29 = 0u;
    uint64_t v26 = 0u;
    uint64_t v27 = 0u;
    char v24 = 0u;
    uint64_t v25 = 0u;
    uint64_t v22 = 0u;
    uint64_t v23 = 0u;
    uint64_t v20 = 0u;
    char v21 = 0u;
    uint64_t v19 = 0u;
    uint64_t v17 = 0u;
    uint64_t v18 = 0u;
    uint64_t v15 = 0u;
    char v16 = 0u;
    uint64_t v13 = 0u;
    uint64_t v14 = 0u;
    *(_OWORD *)task_info_out = 0u;
    uint64_t v12 = 0u;
    mach_msg_type_number_t task_info_outCnt = 93;
    uint64_t v6 = task_info(*MEMORY[0x1E4F14960], 0x16u, task_info_out, &task_info_outCnt);
    uint64_t result = v6 == 0;
    if (!v6)
    {
      if (a2) {
        *(void *)a2 = v20;
      }
      if (a3) {
        *(void *)a3 = *((void *)&v21 + 1);
      }
      if (a1)
      {
        uint64_t v8 = v12;
LABEL_12:
        *a1 = v8;
      }
    }
  }
  else
  {
    if (a1)
    {
      uint64_t v12 = 0u;
      uint64_t v13 = 0u;
      *(_OWORD *)task_info_out = 0u;
      mach_msg_type_number_t task_info_outCnt = 12;
      uint64_t v9 = task_info(*MEMORY[0x1E4F14960], 0x14u, task_info_out, &task_info_outCnt);
      uint64_t result = v9 == 0;
      if (v9) {
        return result;
      }
      uint64_t v8 = *(void *)&task_info_out[2];
      goto LABEL_12;
    }
    return 1;
  }
  return result;
}

uint64_t degas::AttributeInstanceTable::deleteEntry(degas::AttributeInstanceTable *this, sqlite3_int64 a2)
{
  uint64_t v3 = degas::AttributeInstanceTable::deleteStatement(this);
  degas::Statement::bindInteger(*(sqlite3_stmt ***)v3, 1, a2);
  uint64_t v4 = *(sqlite3_stmt ***)v3;
  return degas::Statement::update(v4);
}

char *degas::AttributeInstanceTable::deleteStatement(degas::AttributeInstanceTable *this)
{
  uint64_t v3 = (char *)this + 72;
  uint64_t v2 = (degas::Statement *)*((void *)this + 9);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"delete from ", 12);
    int v4 = *((char *)this + 31);
    if (v4 >= 0) {
      int v5 = (char *)this + 8;
    }
    else {
      int v5 = (char *)*((void *)this + 1);
    }
    if (v4 >= 0) {
      uint64_t v6 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v6 = *((void *)this + 2);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)" where elementId=?1", 19);
    operator new();
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1D1763B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::shared_ptr<degas::Statement>::reset[abi:ne180100]<degas::Statement,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<degas::Statement>::shared_ptr[abi:ne180100]<degas::Statement,void>(&v2, a2);
}

uint64_t degas::AttributeInstanceTable::createTable(degas::AttributeInstanceTable *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"create table ", 13);
  int v2 = *((char *)this + 31);
  if (v2 >= 0) {
    uint64_t v3 = (char *)this + 8;
  }
  else {
    uint64_t v3 = (char *)*((void *)this + 1);
  }
  if (v2 >= 0) {
    uint64_t v4 = *((unsigned __int8 *)this + 31);
  }
  else {
    uint64_t v4 = *((void *)this + 2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (elementId integer primary key, intValue integer, realValue real, stringValue text, dataType integer)", 102);
  int v5 = (sqlite3 *)*((void *)this + 4);
  std::stringbuf::str();
  degas::Statement::Statement(ppStmt, v5, (uint64_t)&__p);
  if (v9 < 0) {
    operator delete(__p);
  }
  uint64_t v6 = degas::Statement::update(ppStmt);
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  v11[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v11[1] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v13);
  return v6;
}

void sub_1D1763D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
}

void degas::AttributeInstanceTable::~AttributeInstanceTable(degas::AttributeInstanceTable *this)
{
  degas::AttributeInstanceTable::~AttributeInstanceTable(this);
  JUMPOUT(0x1D25F9A90);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;

  *(void *)this = &unk_1F2801D98;
  int v2 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  char v9 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t degas::AttributeInstanceTable::tableSafeName(uint64_t *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  uint64_t v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    uint64_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (uint64_t *)*a1;
    uint64_t v3 = v2;
  }
  for (; v3; --v3)
  {
    if (*(unsigned char *)a1 == 45) {
      char v8 = 95;
    }
    else {
      char v8 = *(unsigned char *)a1;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v8, 1);
    a1 = (uint64_t *)((char *)a1 + 1);
  }
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v5[1] = MEMORY[0x1E4FBA470] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D25F9A50](&v7);
}

void sub_1D1764058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t degas::AttributeInstanceTable::AttributeInstanceTable(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t a6)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  int v12 = *(char *)(a3 + 23);
  if (v12 >= 0) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = *(void *)a3;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v14 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"-", 1);
  if (a5)
  {
    uint64_t v15 = "node";
  }
  else
  {
    if ((a5 & 2) == 0) {
      goto LABEL_12;
    }
    uint64_t v15 = "edge";
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v15, 4);
LABEL_12:
  std::stringbuf::str();
  degas::AttributeInstanceTable::tableSafeName((uint64_t *)&__p);
  if (v21 < 0) {
    operator delete(__p);
  }
  v22[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v22 + *(void *)(v22[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v22[1] = MEMORY[0x1E4FBA470] + 16;
  if (v23 < 0) {
    operator delete((void *)v22[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v24);
  *(void *)a1 = &unk_1F2801DE0;
  char v16 = (std::string *)(a1 + 8);
  if (SHIBYTE(v19) < 0)
  {
    std::string::__init_copy_ctor_external(v16, (const std::string::value_type *)v18[0], (std::string::size_type)v18[1]);
    *(void *)(a1 + 32) = a2;
    *(void *)(a1 + 40) = a6;
    operator delete(v18[0]);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)v18;
    *(void *)(a1 + 24) = v19;
    *(void *)(a1 + 32) = a2;
    *(void *)(a1 + 40) = a6;
  }
  *(void *)a1 = &unk_1F2801D98;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = a4;
  return a1;
}

void sub_1D17642D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double degas::AttributeInstanceTable::AttributeInstanceTable(degas::AttributeInstanceTable *this, const degas::AttributeInstanceTable *a2)
{
  uint64_t v3 = degas::Table::Table(this, a2);
  *(void *)uint64_t v3 = &unk_1F2801D98;
  double result = 0.0;
  *(_OWORD *)((char *)v3 + 56) = 0u;
  *(_OWORD *)((char *)v3 + 72) = 0u;
  *(_OWORD *)((char *)v3 + 88) = 0u;
  *(_OWORD *)((char *)v3 + 104) = 0u;
  *(_OWORD *)((char *)v3 + 120) = 0u;
  *(_OWORD *)((char *)v3 + 136) = 0u;
  *(_OWORD *)((char *)v3 + 152) = 0u;
  *(_OWORD *)((char *)v3 + 168) = 0u;
  *((_DWORD *)v3 + 46) = *((_DWORD *)a2 + 46);
  return result;
}

{
  degas::Table *v3;
  double result;

  uint64_t v3 = degas::Table::Table(this, a2);
  *(void *)uint64_t v3 = &unk_1F2801D98;
  double result = 0.0;
  *(_OWORD *)((char *)v3 + 56) = 0u;
  *(_OWORD *)((char *)v3 + 72) = 0u;
  *(_OWORD *)((char *)v3 + 88) = 0u;
  *(_OWORD *)((char *)v3 + 104) = 0u;
  *(_OWORD *)((char *)v3 + 120) = 0u;
  *(_OWORD *)((char *)v3 + 136) = 0u;
  *(_OWORD *)((char *)v3 + 152) = 0u;
  *(_OWORD *)((char *)v3 + 168) = 0u;
  *((_DWORD *)v3 + 46) = *((_DWORD *)a2 + 46);
  return result;
}

uint64_t degas::AttributeInstanceTable::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

uint64_t degas::AttributeInstanceTable::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = degas::Table::operator==(a1, a2);
  if (result) {
    return *(_DWORD *)(a2 + 184) == *(_DWORD *)(a1 + 184);
  }
  return result;
}

char *degas::AttributeInstanceTable::upsertStatement(degas::AttributeInstanceTable *this)
{
  uint64_t v3 = (char *)this + 56;
  uint64_t v2 = (degas::Statement *)*((void *)this + 7);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"insert or replace into ", 23);
    int v4 = *((char *)this + 31);
    if (v4 >= 0) {
      int v5 = (char *)this + 8;
    }
    else {
      int v5 = (char *)*((void *)this + 1);
    }
    if (v4 >= 0) {
      uint64_t v6 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v6 = *((void *)this + 2);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)" (elementId, intValue, realValue, stringValue, dataType) values (?1, ?2, ?3, ?4, ?5)", 84);
    operator new();
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1D1764660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

char *degas::AttributeInstanceTable::readByIdentifierStatement(degas::AttributeInstanceTable *this)
{
  uint64_t v3 = (char *)this + 88;
  uint64_t v2 = (degas::Statement *)*((void *)this + 11);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"select elementId, intValue, realValue, stringValue, dataType from ", 66);
    int v4 = *((char *)this + 31);
    if (v4 >= 0) {
      int v5 = (char *)this + 8;
    }
    else {
      int v5 = (char *)*((void *)this + 1);
    }
    if (v4 >= 0) {
      uint64_t v6 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v6 = *((void *)this + 2);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)" where elementId=?1", 19);
    operator new();
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1D17648A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

char *degas::AttributeInstanceTable::readByBitmapStatement(degas::AttributeInstanceTable *this)
{
  uint64_t v3 = (char *)this + 104;
  uint64_t v2 = (degas::Statement *)*((void *)this + 13);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"select v.elementId, v.intValue, v.realValue, v.stringValue, v.dataType from ", 76);
    int v4 = *((char *)this + 31);
    if (v4 >= 0) {
      int v5 = (char *)this + 8;
    }
    else {
      int v5 = (char *)*((void *)this + 1);
    }
    if (v4 >= 0) {
      uint64_t v6 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v6 = *((void *)this + 2);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)" v, identifierBitmap(?) b where v.elementId = b.value order by v.elementId", 74);
    operator new();
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1D1764AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

char *degas::AttributeInstanceTable::readByIntValueStatement(degas::AttributeInstanceTable *this)
{
  uint64_t v3 = (char *)this + 136;
  uint64_t v2 = (degas::Statement *)*((void *)this + 17);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"select elementId, intValue, realValue, stringValue, dataType from ", 66);
    int v4 = *((char *)this + 31);
    if (v4 >= 0) {
      int v5 = (char *)this + 8;
    }
    else {
      int v5 = (char *)*((void *)this + 1);
    }
    if (v4 >= 0) {
      uint64_t v6 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v6 = *((void *)this + 2);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)" where intValue=?1 order by elementId", 37);
    operator new();
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1D1764D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

char *degas::AttributeInstanceTable::readByRealValueStatement(degas::AttributeInstanceTable *this)
{
  uint64_t v3 = (char *)this + 152;
  uint64_t v2 = (degas::Statement *)*((void *)this + 19);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"select elementId, intValue, realValue, stringValue, dataType from ", 66);
    int v4 = *((char *)this + 31);
    if (v4 >= 0) {
      int v5 = (char *)this + 8;
    }
    else {
      int v5 = (char *)*((void *)this + 1);
    }
    if (v4 >= 0) {
      uint64_t v6 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v6 = *((void *)this + 2);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)" where realValue=?1 order by elementId", 38);
    operator new();
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1D1764F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

char *degas::AttributeInstanceTable::readByStringValueStatement(degas::AttributeInstanceTable *this)
{
  uint64_t v3 = (char *)this + 168;
  uint64_t v2 = (degas::Statement *)*((void *)this + 21);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"select elementId, intValue, realValue, stringValue, dataType from ", 66);
    int v4 = *((char *)this + 31);
    if (v4 >= 0) {
      int v5 = (char *)this + 8;
    }
    else {
      int v5 = (char *)*((void *)this + 1);
    }
    if (v4 >= 0) {
      uint64_t v6 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v6 = *((void *)this + 2);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)" where stringValue=?1 order by elementId", 40);
    operator new();
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1D17651A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

char *degas::AttributeInstanceTable::readAllStatement(degas::AttributeInstanceTable *this)
{
  uint64_t v3 = (char *)this + 120;
  uint64_t v2 = (degas::Statement *)*((void *)this + 15);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"select elementId, intValue, realValue, stringValue, dataType from ", 66);
    int v4 = *((char *)this + 31);
    if (v4 >= 0) {
      int v5 = (char *)this + 8;
    }
    else {
      int v5 = (char *)*((void *)this + 1);
    }
    if (v4 >= 0) {
      uint64_t v6 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v6 = *((void *)this + 2);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)" order by elementId", 19);
    operator new();
  }
  degas::Statement::prepareForUse(v2);
  return v3;
}

void sub_1D17653E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t degas::AttributeInstanceTable::insertOrUpdate(degas::AttributeInstanceTable *this, sqlite3_int64 a2, sqlite3_int64 a3)
{
  int v5 = degas::AttributeInstanceTable::upsertStatement(this);
  degas::Statement::bindInteger(*(sqlite3_stmt ***)v5, 1, a2);
  degas::Statement::bindInteger(*(sqlite3_stmt ***)v5, 2, a3);
  degas::Statement::bindNull(*(sqlite3_stmt ***)v5, 3);
  degas::Statement::bindNull(*(sqlite3_stmt ***)v5, 4);
  degas::Statement::bindInteger(*(sqlite3_stmt ***)v5, 5, 1);
  uint64_t v6 = *(sqlite3_stmt ***)v5;
  return degas::Statement::update(v6);
}

uint64_t degas::AttributeInstanceTable::insertOrUpdateUnsigned(degas::AttributeInstanceTable *this, sqlite3_int64 a2, sqlite3_int64 a3)
{
  int v5 = degas::AttributeInstanceTable::upsertStatement(this);
  degas::Statement::bindInteger(*(sqlite3_stmt ***)v5, 1, a2);
  degas::Statement::bindInteger(*(sqlite3_stmt ***)v5, 2, a3);
  degas::Statement::bindNull(*(sqlite3_stmt ***)v5, 3);
  degas::Statement::bindNull(*(sqlite3_stmt ***)v5, 4);
  degas::Statement::bindInteger(*(sqlite3_stmt ***)v5, 5, 4);
  uint64_t v6 = *(sqlite3_stmt ***)v5;
  return degas::Statement::update(v6);
}

uint64_t degas::AttributeInstanceTable::insertOrUpdate(degas::AttributeInstanceTable *this, sqlite3_int64 a2, double a3)
{
  int v5 = degas::AttributeInstanceTable::upsertStatement(this);
  degas::Statement::bindInteger(*(sqlite3_stmt ***)v5, 1, a2);
  degas::Statement::bindNull(*(sqlite3_stmt ***)v5, 2);
  degas::Statement::bindDouble(*(sqlite3_stmt ***)v5, 3, a3);
  degas::Statement::bindNull(*(sqlite3_stmt ***)v5, 4);
  degas::Statement::bindInteger(*(sqlite3_stmt ***)v5, 5, 2);
  uint64_t v6 = *(sqlite3_stmt ***)v5;
  return degas::Statement::update(v6);
}

uint64_t degas::AttributeInstanceTable::insertOrUpdate(degas::AttributeInstanceTable *a1, sqlite3_int64 a2, uint64_t *a3)
{
  int v5 = degas::AttributeInstanceTable::upsertStatement(a1);
  degas::Statement::bindInteger(*(sqlite3_stmt ***)v5, 1, a2);
  degas::Statement::bindNull(*(sqlite3_stmt ***)v5, 2);
  degas::Statement::bindNull(*(sqlite3_stmt ***)v5, 3);
  degas::Statement::bindString(*(void *)v5, 4, a3);
  degas::Statement::bindInteger(*(sqlite3_stmt ***)v5, 5, 3);
  uint64_t v6 = *(sqlite3_stmt ***)v5;
  return degas::Statement::update(v6);
}

char *degas::AttributeInstanceTable::prepareStatementToReadByIdentifier(degas::AttributeInstanceTable *this, sqlite3_int64 a2)
{
  uint64_t v3 = degas::AttributeInstanceTable::readByIdentifierStatement(this);
  degas::Statement::bindInteger(*(sqlite3_stmt ***)v3, 1, a2);
  return v3;
}

char *degas::AttributeInstanceTable::prepareStatementToReadByBitmap(degas::AttributeInstanceTable *this, Bitmap *a2)
{
  uint64_t v3 = degas::AttributeInstanceTable::readByBitmapStatement(this);
  degas::Statement::bindBitmapPointer(*(sqlite3_stmt ***)v3, 1, a2);
  return v3;
}

char *degas::AttributeInstanceTable::prepareStatementToReadByValue(degas::AttributeInstanceTable *this, sqlite3_int64 a2)
{
  uint64_t v3 = degas::AttributeInstanceTable::readByIntValueStatement(this);
  degas::Statement::bindInteger(*(sqlite3_stmt ***)v3, 1, a2);
  return v3;
}

char *degas::AttributeInstanceTable::prepareStatementToReadByValue(degas::AttributeInstanceTable *this, double a2)
{
  uint64_t v3 = degas::AttributeInstanceTable::readByRealValueStatement(this);
  degas::Statement::bindDouble(*(sqlite3_stmt ***)v3, 1, a2);
  return v3;
}

uint64_t *degas::AttributeInstanceTable::prepareStatementToReadByValue(degas::AttributeInstanceTable *a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)degas::AttributeInstanceTable::readByStringValueStatement(a1);
  degas::Statement::bindString(*v3, 1, a2);
  return v3;
}

void *degas::AttributeInstanceCursor::AttributeInstanceCursor(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

degas::AttributeInstanceCursor *degas::AttributeInstanceCursor::AttributeInstanceCursor(degas::AttributeInstanceCursor *this, degas::AttributeInstanceTable *a2)
{
  AllStatement = degas::AttributeInstanceTable::readAllStatement(a2);
  uint64_t v4 = *((void *)AllStatement + 1);
  *(void *)this = *(void *)AllStatement;
  *((void *)this + ++*((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

{
  char *AllStatement;
  uint64_t v4;

  AllStatement = degas::AttributeInstanceTable::readAllStatement(a2);
  uint64_t v4 = *((void *)AllStatement + 1);
  *(void *)this = *(void *)AllStatement;
  *((void *)this + ++*((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

degas::AttributeInstanceCursor *degas::AttributeInstanceCursor::AttributeInstanceCursor(degas::AttributeInstanceCursor *this, sqlite3_int64 a2, degas::AttributeInstanceTable *a3)
{
  int v5 = degas::AttributeInstanceTable::readByIdentifierStatement(a3);
  degas::Statement::bindInteger(*(sqlite3_stmt ***)v5, 1, a2);
  uint64_t v6 = *((void *)v5 + 1);
  *(void *)this = *(void *)v5;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

degas::AttributeInstanceCursor *degas::AttributeInstanceCursor::AttributeInstanceCursor(degas::AttributeInstanceCursor *this, Bitmap *a2, degas::AttributeInstanceTable *a3)
{
  int v5 = degas::AttributeInstanceTable::readByBitmapStatement(a3);
  degas::Statement::bindBitmapPointer(*(sqlite3_stmt ***)v5, 1, a2);
  uint64_t v6 = *((void *)v5 + 1);
  *(void *)this = *(void *)v5;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void degas::AttributeInstanceCursor::setForValue(degas::AttributeInstanceCursor *this, sqlite3_int64 a2, degas::AttributeInstanceTable *a3)
{
  int v5 = degas::AttributeInstanceTable::readByIntValueStatement(a3);
  degas::Statement::bindInteger(*(sqlite3_stmt ***)v5, 1, a2);
  uint64_t v7 = *(sqlite3_stmt ***)v5;
  uint64_t v6 = *((void *)v5 + 1);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::AttributeInstanceCursor::setForValue(degas::AttributeInstanceCursor *this, double a2, degas::AttributeInstanceTable *a3)
{
  int v5 = degas::AttributeInstanceTable::readByRealValueStatement(a3);
  degas::Statement::bindDouble(*(sqlite3_stmt ***)v5, 1, a2);
  uint64_t v7 = *(sqlite3_stmt ***)v5;
  uint64_t v6 = *((void *)v5 + 1);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v7;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void degas::AttributeInstanceCursor::setForValue(uint64_t *a1, uint64_t *a2, degas::AttributeInstanceTable *this)
{
  int v5 = (uint64_t *)degas::AttributeInstanceTable::readByStringValueStatement(this);
  degas::Statement::bindString(*v5, 1, a2);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  *a1 = v7;
  a1[1] = v6;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

sqlite3_int64 degas::AttributeInstanceCursor::elementId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 0);
}

sqlite3_int64 degas::AttributeInstanceCursor::integerValue(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 1);
}

double degas::AttributeInstanceCursor::realValue(sqlite3_stmt ***this)
{
  return sqlite3_column_double(**this, 2);
}

void degas::AttributeInstanceCursor::stringValue(sqlite3_stmt ***a1, uint64_t a2)
{
}

sqlite3_int64 degas::AttributeInstanceCursor::valueType(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 4);
}

void sub_1D1766928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *degas::Table::Table(void *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_1F2801DE0;
  uint64_t v7 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    v7->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  a1[4] = a3;
  a1[5] = a4;
  return a1;
}

degas::Table *degas::Table::Table(degas::Table *this, const degas::Table *a2)
{
  *(void *)this = &unk_1F2801DE0;
  uint64_t v4 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 3);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  return this;
}

void degas::Table::~Table(degas::Table *this)
{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t degas::Table::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t degas::Table::operator==(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) != *(void *)(a2 + 32)) {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 31);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = (const void **)(a1 + 8);
  char v9 = *(unsigned __int8 **)(a2 + 8);
  uint64_t v7 = (unsigned __int8 *)(a2 + 8);
  long long v8 = v9;
  if (v5 < 0) {
    uint64_t v7 = v8;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, v7, *(void *)(a1 + 16)) == 0;
  }
  if (!*(unsigned char *)(a1 + 31)) {
    return 1;
  }
  uint64_t v10 = v2 - 1;
  do
  {
    int v12 = *(unsigned __int8 *)v6;
    uint64_t v6 = (const void **)((char *)v6 + 1);
    int v11 = v12;
    int v14 = *v7++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

BOOL degas::Table::checkTableExists(degas::Table *this)
{
  uint64_t v2 = (sqlite3 *)*((void *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "select * from sqlite_master where type = 'table' and name = ?");
  degas::Statement::Statement(ppStmt, v2, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  degas::Statement::bindString((uint64_t)ppStmt, 1, (uint64_t *)this + 1);
  int v3 = degas::Statement::next(ppStmt);
  if (v3 == 1) {
    degas::Statement::finishStatementCursor((degas::Statement *)ppStmt);
  }
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  return v3 == 1;
}

void sub_1D1767470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t degas::Table::rowCount(degas::Table *this, sqlite3_int64 *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"select count(*) from ", 21);
  int v4 = *((char *)this + 31);
  if (v4 >= 0) {
    int v5 = (char *)this + 8;
  }
  else {
    int v5 = (char *)*((void *)this + 1);
  }
  if (v4 >= 0) {
    uint64_t v6 = *((unsigned __int8 *)this + 31);
  }
  else {
    uint64_t v6 = *((void *)this + 2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v5, v6);
  uint64_t v7 = (sqlite3 *)*((void *)this + 4);
  std::stringbuf::str();
  if (v12 >= 0) {
    long long v8 = (char *)&v11;
  }
  else {
    long long v8 = (char *)v11;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v8);
  degas::Statement::Statement(ppStmt, v7, (uint64_t)__p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  uint64_t v9 = degas::Statement::next(ppStmt);
  if (v9 == 1)
  {
    *a2 = sqlite3_column_int64(ppStmt[0], 0);
    degas::Statement::finishStatementCursor((degas::Statement *)ppStmt);
    uint64_t v9 = 0;
  }
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  v16[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v16[1] = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v18);
  return v9;
}

void sub_1D1767698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  std::ostringstream::~ostringstream((uint64_t)&a24);
  _Unwind_Resume(a1);
}

const char *degas::Table::errorMessage(sqlite3 **this)
{
  return sqlite3_errmsg(this[4]);
}

uint64_t degas::Table::statementIdentifier(degas::Table *this, int a2, unsigned int a3)
{
  return (this << 16) | (a2 << 8) | a3;
}

{
  return (a2 << 8) | (*((unsigned __int8 *)this + 48) << 16) | a3;
}

void sub_1D176835C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2781(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2782(uint64_t a1)
{
}

void sub_1D1768770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D17697BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1769AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1769F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D176A24C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D176A368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D176ADB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D176AECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MAInverseEdgeType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return 0;
  }
  else {
    return qword_1D17CE7C0[a1 - 1];
  }
}

void sub_1D176B35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D176B5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2869(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2870(uint64_t a1)
{
}

uint64_t degas::LabelTable::deleteEntry(degas::LabelTable *this, sqlite3_int64 a2)
{
  int v3 = degas::LabelTable::deleteStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v3, 1, a2);
  int v4 = (sqlite3_stmt **)*v3;
  return degas::Statement::update(v4);
}

uint64_t *degas::LabelTable::deleteStatement(degas::LabelTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = ___ZNK5degas10LabelTable15deleteStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_6_2874;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable15deleteStatementEv_block_invoke()
{
}

void sub_1D176B9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::LabelTable::createTable(degas::LabelTable *this)
{
  unsigned int v1 = (sqlite3 *)*((void *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "create table Label (identifier integer primary key autoincrement, name text, nodeIds blob, edgeIds blob)");
  degas::Statement::Statement(ppStmt, v1, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = degas::Statement::update(ppStmt);
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  return v2;
}

void sub_1D176BA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void degas::LabelTable::~LabelTable(degas::LabelTable *this)
{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1D25F9A90);
}

{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  *(void *)this = &unk_1F2801DE0;
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

degas::LabelTable *degas::LabelTable::LabelTable(degas::LabelTable *this, sqlite3 *a2, degas::StatementCache *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "Label");
  *(void *)this = &unk_1F2801DE0;
  uint64_t v6 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v7 = SHIBYTE(v10);
    *((void *)this + 4) = a2;
    *((void *)this + ++*((void *)this + 5) = a3;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void *)this + 3) = v10;
    *((void *)this + 4) = a2;
    *((void *)this + ++*((void *)this + 5) = a3;
  }
  *(void *)this = &unk_1F2801E10;
  *((unsigned char *)this + 48) = 4;
  return this;
}

void sub_1D176BC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *degas::LabelTable::insertStatement(degas::LabelTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x300;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = ___ZNK5degas10LabelTable15insertStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_2880;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable15insertStatementEv_block_invoke()
{
}

void sub_1D176BDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelTable::updateStatement(degas::LabelTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x400;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = ___ZNK5degas10LabelTable15updateStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_4_2882;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable15updateStatementEv_block_invoke()
{
}

void sub_1D176BF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelTable::readByIdentifierStatement(degas::LabelTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x600;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = ___ZNK5degas10LabelTable25readByIdentifierStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_8_2884;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable25readByIdentifierStatementEv_block_invoke()
{
}

void sub_1D176C0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelTable::readAfterIdentifierStatement(degas::LabelTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x801;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = ___ZNK5degas10LabelTable28readAfterIdentifierStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_10_2886;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable28readAfterIdentifierStatementEv_block_invoke()
{
}

void sub_1D176C204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelTable::readByBitmapStatement(degas::LabelTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x800;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = ___ZNK5degas10LabelTable21readByBitmapStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_12_2888;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable21readByBitmapStatementEv_block_invoke()
{
}

void sub_1D176C364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelTable::readByNameStatement(degas::LabelTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0xB00;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = ___ZNK5degas10LabelTable19readByNameStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_14_2890;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable19readByNameStatementEv_block_invoke()
{
}

void sub_1D176C4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t *degas::LabelTable::readAllStatement(degas::LabelTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x700;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = ___ZNK5degas10LabelTable16readAllStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_16_2892;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas10LabelTable16readAllStatementEv_block_invoke()
{
}

void sub_1D176C624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t degas::LabelTable::insert(sqlite3 **a1, sqlite3_int64 *a2, uint64_t *a3)
{
  inserted = degas::LabelTable::insertStatement((degas::LabelTable *)a1);
  int v7 = (sqlite3_stmt **)*inserted;
  if (*a2) {
    degas::Statement::bindInteger(v7, 1, *a2);
  }
  else {
    degas::Statement::bindNull(v7, 1);
  }
  degas::Statement::bindString(*inserted, 2, a3);
  long long v10 = 0u;
  memset(v11, 0, 25);
  degas::Statement::bindBitmap((degas::Statement *)*inserted, (const Bitmap *)3, (const degas::Bitmap *)&v10);
  degas::Statement::bindBitmap((degas::Statement *)*inserted, (const Bitmap *)4, (const degas::Bitmap *)&v10);
  uint64_t v8 = degas::Statement::update((sqlite3_stmt **)*inserted);
  if (!v8 && !*a2) {
    *a2 = sqlite3_last_insert_rowid(a1[4]);
  }
  char v12 = (void **)v11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v12);
  return v8;
}

void sub_1D176C740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 40) = &a11;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

uint64_t degas::LabelTable::update(degas::LabelTable *this, sqlite3_int64 a2, const degas::Bitmap *a3, const degas::Bitmap *a4)
{
  updated = degas::LabelTable::updateStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*updated, 1, a2);
  degas::Statement::bindBitmap((degas::Statement *)*updated, (const Bitmap *)2, a3);
  degas::Statement::bindBitmap((degas::Statement *)*updated, (const Bitmap *)3, a4);
  uint64_t v8 = (sqlite3_stmt **)*updated;
  return degas::Statement::update(v8);
}

uint64_t *degas::LabelTable::prepareStatementToReadByIdentifier(degas::LabelTable *this, sqlite3_int64 a2)
{
  int v3 = degas::LabelTable::readByIdentifierStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v3, 1, a2);
  return v3;
}

uint64_t *degas::LabelTable::prepareStatementToReadAfterIdentifier(degas::LabelTable *this, sqlite3_int64 a2)
{
  int v3 = degas::LabelTable::readAfterIdentifierStatement(this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v3, 1, a2);
  return v3;
}

uint64_t *degas::LabelTable::prepareStatementToReadByBitmap(degas::LabelTable *this, Bitmap *a2)
{
  int v3 = degas::LabelTable::readByBitmapStatement(this);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v3, 1, a2);
  return v3;
}

uint64_t *degas::LabelTable::prepareStatementToReadByName(degas::LabelTable *a1, uint64_t *a2)
{
  int v3 = degas::LabelTable::readByNameStatement(a1);
  degas::Statement::bindString(*v3, 1, a2);
  return v3;
}

degas::LabelCursor *degas::LabelCursor::LabelCursor(degas::LabelCursor *this, sqlite3_int64 a2, const degas::LabelTable *a3)
{
  char v5 = degas::LabelTable::readByIdentifierStatement(a3);
  degas::Statement::bindInteger((sqlite3_stmt **)*v5, 1, a2);
  uint64_t v6 = v5[1];
  *(void *)this = *v5;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t *degas::LabelCursor::LabelCursor(uint64_t *a1, sqlite3_int64 a2, degas::LabelTable *this, int a4)
{
  if (a4 == 5) {
    uint64_t v6 = degas::LabelTable::readAfterIdentifierStatement(this);
  }
  else {
    uint64_t v6 = degas::LabelTable::readByIdentifierStatement(this);
  }
  int v7 = v6;
  degas::Statement::bindInteger((sqlite3_stmt **)*v6, 1, a2);
  uint64_t v8 = v7[1];
  *a1 = *v7;
  a1[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

degas::LabelCursor *degas::LabelCursor::LabelCursor(degas::LabelCursor *this, Bitmap *a2, const degas::LabelTable *a3)
{
  char v5 = degas::LabelTable::readByBitmapStatement(a3);
  degas::Statement::bindBitmapPointer((sqlite3_stmt **)*v5, 1, a2);
  uint64_t v6 = v5[1];
  *(void *)this = *v5;
  *((void *)this + ++*((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t *degas::LabelCursor::LabelCursor(uint64_t *a1, uint64_t *a2, degas::LabelTable *this)
{
  char v5 = degas::LabelTable::readByNameStatement(this);
  degas::Statement::bindString(*v5, 1, a2);
  uint64_t v6 = v5[1];
  *a1 = *v5;
  a1[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

degas::LabelCursor *degas::LabelCursor::LabelCursor(degas::LabelCursor *this, const degas::LabelTable *a2)
{
  AllStatement = degas::LabelTable::readAllStatement(a2);
  uint64_t v4 = AllStatement[1];
  *(void *)this = *AllStatement;
  *((void *)this + ++*((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

{
  uint64_t *AllStatement;
  uint64_t v4;

  AllStatement = degas::LabelTable::readAllStatement(a2);
  uint64_t v4 = AllStatement[1];
  *(void *)this = *AllStatement;
  *((void *)this + ++*((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

sqlite3_int64 degas::LabelCursor::labelId(sqlite3_stmt ***this)
{
  return sqlite3_column_int64(**this, 0);
}

void degas::LabelCursor::name(sqlite3_stmt ***a1, uint64_t a2)
{
}

void degas::LabelCursor::nodeIds(sqlite3_stmt ***this, degas::Bitmap *a2)
{
}

unsigned int *degas::LabelCursor::literalNodeIds(sqlite3_stmt ***this)
{
  return degas::Statement::literalBitmapColumnValue(*this, 2);
}

void degas::LabelCursor::edgeIds(sqlite3_stmt ***this, degas::Bitmap *a2)
{
}

unsigned int *degas::LabelCursor::literalEdgeIds(sqlite3_stmt ***this)
{
  return degas::Statement::literalBitmapColumnValue(*this, 3);
}

int32x2_t degas::IOAccountingEntry::operator-=(int32x2_t *a1, int32x2_t *a2)
{
  int32x2_t result = vsub_s32(*a1, *a2);
  *a1 = result;
  a1[1].i32[0] -= a2[1].i32[0];
  return result;
}

int32x2_t degas::IOAccountingEntry::operator+=(int32x2_t *a1, int32x2_t *a2)
{
  int32x2_t result = vadd_s32(*a1, *a2);
  *a1 = result;
  a1[1].i32[0] += a2[1].i32[0];
  return result;
}

uint64_t degas::IOAccountingEntry::totalCacheActivity(degas::IOAccountingEntry *this)
{
  return (*((_DWORD *)this + 1) + *(_DWORD *)this + *((_DWORD *)this + 2));
}

uint64_t degas::StepSpecification::StepSpecification(uint64_t result, int a2, void *a3)
{
  *(_DWORD *)int32x2_t result = a2;
  uint64_t v3 = a3[1];
  *(void *)(result + 8) = *a3;
  *(void *)(result + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

{
  uint64_t v3;

  *(_DWORD *)int32x2_t result = a2;
  uint64_t v3 = a3[1];
  *(void *)(result + 8) = *a3;
  *(void *)(result + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

uint64_t degas::StepSpecification::StepSpecification(uint64_t result, uint64_t a2)
{
  *(_DWORD *)int32x2_t result = *(_DWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)int32x2_t result = *(_DWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t degas::StepSpecification::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return a1;
}

BOOL degas::StepSpecification::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a2 == *(_DWORD *)a1
      && *(void *)(a2 + 8) == *(void *)(a1 + 8)
      && *(void *)(a2 + 24) == *(void *)(a1 + 24);
}

void degas::StepSpecification::setTargetNodeFilter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

BOOL degas::StepSpecification::hasSomeFilter(degas::StepSpecification *this)
{
  return *(_DWORD *)this || *((void *)this + 3) != 0;
}

uint64_t degas::StepSpecification::appendSourceNodesForEdges(degas::StepSpecification *this, degas::Database *a2, Bitmap *a3, degas::Bitmap *a4)
{
  degas::EdgeCursor::EdgeCursor(v12);
  degas::EdgeCursor::setForIdentifiers((degas::EdgeCursor *)v12, a3, (degas::Database *)((char *)a2 + 248));
  while (degas::Statement::next((sqlite3_stmt **)v12[0]) == 1)
  {
    sqlite3_int64 v7 = sqlite3_column_int64(*(sqlite3_stmt **)v12[0], 2);
    degas::Bitmap::setBit(a4, v7);
  }
  int v8 = *((_DWORD *)v12[0] + 4);
  if ((v8 - 100) < 2 || v8 == 0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 7;
  }
  degas::Cursor::~Cursor(v12);
  return v10;
}

void sub_1D176CE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, degas::Statement *a9)
{
}

uint64_t degas::StepSpecification::appendTargetNodesForEdges(degas::StepSpecification *this, degas::Database *a2, Bitmap *a3, degas::Bitmap *a4)
{
  degas::EdgeCursor::EdgeCursor(v12);
  degas::EdgeCursor::setForIdentifiers((degas::EdgeCursor *)v12, a3, (degas::Database *)((char *)a2 + 248));
  while (degas::Statement::next((sqlite3_stmt **)v12[0]) == 1)
  {
    sqlite3_int64 v7 = sqlite3_column_int64(*(sqlite3_stmt **)v12[0], 3);
    degas::Bitmap::setBit(a4, v7);
  }
  int v8 = *((_DWORD *)v12[0] + 4);
  if ((v8 - 100) < 2 || v8 == 0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 7;
  }
  degas::Cursor::~Cursor(v12);
  return v10;
}

void sub_1D176CEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, degas::Statement *a9)
{
}

uint64_t degas::StepSpecification::performStepWithoutPathRecording(degas::StepSpecification *this, degas::Database *a2, Bitmap *a3, degas::Bitmap *a4)
{
  uint64_t v8 = *((void *)this + 1);
  memset(&v23, 0, 41);
  memset(&v22, 0, 41);
  long long v20 = 0u;
  memset(v21, 0, 25);
  if (!v8
    || (uint64_t appended = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v8 + 16))(v8, &v20), !appended))
  {
    degas::NodeCursor::NodeCursor(v19);
    degas::NodeCursor::setForIdentifiers((degas::NodeCursor *)v19, a3, (degas::Database *)((char *)a2 + 192));
    long long v17 = 0u;
    memset(v18, 0, 25);
    while (degas::Statement::next((sqlite3_stmt **)v19[0]) == 1)
    {
      int v10 = *(_DWORD *)this;
      if (*(_DWORD *)this <= 1u)
      {
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v19[0], 3, (degas::Bitmap *)&v23);
        if (v8) {
          degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v23, (degas::Bitmap *)&v20);
        }
        if (v23._bitSets.__begin_ != v23._bitSets.__end_)
        {
          uint64_t appended = degas::StepSpecification::appendTargetNodesForEdges(v11, a2, &v23, (degas::Bitmap *)&v17);
          if (appended) {
            goto LABEL_22;
          }
        }
        int v10 = *(_DWORD *)this;
      }
      if ((v10 | 2) == 2)
      {
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v19[0], 2, (degas::Bitmap *)&v22);
        if (v8) {
          degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v22, (degas::Bitmap *)&v20);
        }
        if (v22._bitSets.__begin_ != v22._bitSets.__end_)
        {
          uint64_t appended = degas::StepSpecification::appendSourceNodesForEdges(v12, a2, &v22, (degas::Bitmap *)&v17);
          if (appended) {
            goto LABEL_22;
          }
        }
      }
    }
    uint64_t v13 = *((void *)this + 3);
    if (v13)
    {
      long long v15 = 0u;
      memset(v16, 0, 25);
      uint64_t appended = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v13 + 16))(v13, &v15);
      if (appended)
      {
        uint64_t v24 = (void **)v16;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v24);
LABEL_22:
        *(void *)&long long v15 = v18;
        std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
        degas::Cursor::~Cursor(v19);
        goto LABEL_23;
      }
      degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v17, (degas::Bitmap *)&v15);
      uint64_t v24 = (void **)v16;
      std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v24);
    }
    degas::Bitmap::operator=(a4, &v17);
    uint64_t appended = 0;
    goto LABEL_22;
  }
LABEL_23:
  *(void *)&long long v17 = v21;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  *(void *)&long long v20 = &v22._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v22._bitCount = (unint64_t)&v23._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  return appended;
}

void sub_1D176D180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,degas::Statement *a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31)
{
  a9 = (void **)&a17;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  degas::Cursor::~Cursor(&a21);
  a15 = (void **)&a25;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a15);
  a23 = (void **)&a31;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a23);
  a29 = (void **)(v31 - 112);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a29);
  _Unwind_Resume(a1);
}

uint64_t degas::StepSpecification::performStepWithUncountedPathRecording(degas::StepSpecification *this, degas::Database *a2, const degas::UncountedPathCollection *a3, degas::UncountedPathCollection *a4)
{
  uint64_t v7 = *((void *)this + 1);
  uint64_t v8 = *((void *)this + 3);
  long long v9 = 0uLL;
  memset(&v40, 0, 41);
  memset(&v39, 0, 41);
  long long v37 = 0u;
  memset(v38, 0, 25);
  if (!v7
    || (uint64_t appended = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v7 + 16))(v7, &v37),
        long long v9 = 0uLL,
        !appended))
  {
    *(_OWORD *)((char *)v36 + 9) = v9;
    long long v35 = v9;
    v36[0] = v9;
    if (v8)
    {
      uint64_t appended = (*(uint64_t (**)(void, long long *))(**((void **)this + 3) + 16))(*((void *)this + 3), &v35);
      if (appended) {
        goto LABEL_52;
      }
    }
    degas::NodeCursor::NodeCursor(v34);
    degas::NodeCursor::setForIdentifiers((degas::NodeCursor *)v34, (Bitmap *)((char *)a3 + 24), (degas::Database *)((char *)a2 + 192));
    long long v32 = 0u;
    memset(v33, 0, 25);
LABEL_6:
    while (2)
    {
      if (degas::Statement::next((sqlite3_stmt **)v34[0]) == 1)
      {
        sqlite3_int64 v11 = sqlite3_column_int64(*(sqlite3_stmt **)v34[0], 0);
        long long v32 = 0uLL;
        uint64_t v13 = v33[0];
        for (uint64_t i = v33[1]; i != v13; i -= 16)
        {
          degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)(i - 16));
          *(void *)(i - 8) = 0;
        }
        v33[1] = v13;
        int v14 = *(_DWORD *)this;
        if (*(_DWORD *)this > 1u)
        {
LABEL_15:
          if ((v14 | 2) != 2) {
            goto LABEL_20;
          }
          degas::Statement::bitmapColumnValue((sqlite3_stmt **)v34[0], 2, (degas::Bitmap *)&v39);
          if (v7) {
            degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v39, (degas::Bitmap *)&v37);
          }
          if (v39._bitSets.__begin_ == v39._bitSets.__end_
            || (uint64_t appended = degas::StepSpecification::appendSourceNodesForEdges(v16, a2, &v39, (degas::Bitmap *)&v32),
                !appended))
          {
LABEL_20:
            if (v8) {
              degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v32, (degas::Bitmap *)&v35);
            }
            if (!*((void *)a3 + 2))
            {
              degas::Bitmap::begin(&v32, &v29);
              while (1)
              {
                unint64_t v22 = v30;
                if ((long long *)v29 == &v32 && v30 == -1)
                {
                  if (v31 == v33[1]) {
                    goto LABEL_6;
                  }
                  unint64_t v22 = -1;
                }
                degas::UncountedPathCollection::addPath(a4, v11, v22);
                degas::Bitmap::iterator::operator++(&v29);
              }
            }
            degas::Bitmap::begin(&v32, &v29);
LABEL_24:
            unint64_t v17 = v30;
            if ((long long *)v29 == &v32 && v30 == -1)
            {
              if (v31 == v33[1]) {
                continue;
              }
              unint64_t v17 = -1;
            }
            uint64_t v19 = degas::UncountedPathCollection::sourceNodesForTargetNodeId(a3, v11);
            degas::Bitmap::begin(*(void **)v19, &v26);
            while (1)
            {
              unint64_t v20 = v27;
              if (v26 == *(void *)v19 && v27 == -1)
              {
                if (v28 == *(void *)(*(void *)v19 + 24))
                {
                  degas::Bitmap::iterator::operator++(&v29);
                  goto LABEL_24;
                }
                unint64_t v20 = -1;
              }
              degas::UncountedPathCollection::addPath(a4, v20, v17);
              degas::Bitmap::iterator::operator++(&v26);
            }
          }
          break;
        }
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v34[0], 3, (degas::Bitmap *)&v40);
        if (v7) {
          degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v40, (degas::Bitmap *)&v37);
        }
        if (v40._bitSets.__begin_ == v40._bitSets.__end_
          || (uint64_t appended = degas::StepSpecification::appendTargetNodesForEdges(v15, a2, &v40, (degas::Bitmap *)&v32),
              !appended))
        {
          int v14 = *(_DWORD *)this;
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t appended = 0;
      }
      break;
    }
    unint64_t v29 = (unint64_t)v33;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    degas::Cursor::~Cursor(v34);
LABEL_52:
    *(void *)&long long v32 = v36;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  }
  *(void *)&long long v35 = v38;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  *(void *)&long long v37 = &v39._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v39._bitCount = (unint64_t)&v40._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  return appended;
}

void sub_1D176D59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,degas::Statement *a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33)
{
  degas::Cursor::~Cursor(&a23);
  a17 = (void **)&a27;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a17);
  a25 = (void **)&a33;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a25);
  a31 = (void **)(v33 - 176);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a31);
  *(void *)(v33 - 192) = v33 - 128;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 192));
  _Unwind_Resume(a1);
}

uint64_t degas::StepSpecification::performStepWithCountedPathRecording(degas::StepSpecification *this, degas::Database *a2, const degas::CountedPathCollection *a3, degas::CountedPathCollection *a4)
{
  uint64_t v7 = *((void *)this + 1);
  uint64_t v8 = *((void *)this + 3);
  long long v9 = 0uLL;
  memset(&v39, 0, 41);
  memset(&v38, 0, 41);
  long long v36 = 0u;
  memset(v37, 0, 25);
  if (!v7
    || (uint64_t appended = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v7 + 16))(v7, &v36),
        long long v9 = 0uLL,
        !appended))
  {
    *(_OWORD *)&v35[9] = v9;
    long long v34 = v9;
    *(_OWORD *)long long v35 = v9;
    if (v8)
    {
      uint64_t appended = (*(uint64_t (**)(void, long long *))(**((void **)this + 3) + 16))(*((void *)this + 3), &v34);
      if (appended) {
        goto LABEL_50;
      }
    }
    degas::NodeCursor::NodeCursor(v33);
    degas::NodeCursor::setForIdentifiers((degas::NodeCursor *)v33, (Bitmap *)((char *)a3 + 24), (degas::Database *)((char *)a2 + 192));
    long long v31 = 0u;
    memset(v32, 0, 25);
LABEL_6:
    if (degas::Statement::next((sqlite3_stmt **)v33[0]) == 1)
    {
      sqlite3_int64 v11 = sqlite3_column_int64(*(sqlite3_stmt **)v33[0], 0);
      long long v31 = 0uLL;
      uint64_t v12 = v32[0];
      for (uint64_t i = v32[1]; i != v12; i -= 16)
      {
        degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)(i - 16));
        *(void *)(i - 8) = 0;
      }
      v32[1] = v12;
      int v14 = *(_DWORD *)this;
      if (*(_DWORD *)this > 1u)
      {
LABEL_15:
        if ((v14 | 2) != 2) {
          goto LABEL_20;
        }
        degas::Statement::bitmapColumnValue((sqlite3_stmt **)v33[0], 2, (degas::Bitmap *)&v38);
        if (v7) {
          degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v38, (degas::Bitmap *)&v36);
        }
        if (v38._bitSets.__begin_ == v38._bitSets.__end_
          || (uint64_t appended = degas::StepSpecification::appendSourceNodesForEdges(v16, a2, &v38, (degas::Bitmap *)&v31),
              !appended))
        {
LABEL_20:
          if (v8) {
            degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v31, (degas::Bitmap *)&v34);
          }
          if (*((void *)a3 + 2))
          {
            degas::Bitmap::begin(&v31, &v28);
            while (1)
            {
              unint64_t v17 = v29;
              BOOL v18 = (long long *)v28 == &v31 && v29 == -1;
              if (v18)
              {
                if (v30 == v32[1]) {
                  goto LABEL_6;
                }
                unint64_t v17 = -1;
              }
              uint64_t v19 = degas::CountedPathCollection::sourcePathsForTargetNodeId(a3, v11);
              char v21 = v19 + 1;
              unint64_t v20 = (void *)*v19;
              if ((uint64_t *)*v19 != v19 + 1)
              {
                do
                {
                  degas::CountedPathCollection::addPath(a4, v20[4], v17, *((_DWORD *)v20 + 10));
                  unint64_t v22 = (uint64_t *)v20[1];
                  if (v22)
                  {
                    do
                    {
                      Bitmap v23 = v22;
                      unint64_t v22 = (uint64_t *)*v22;
                    }
                    while (v22);
                  }
                  else
                  {
                    do
                    {
                      Bitmap v23 = (uint64_t *)v20[2];
                      BOOL v18 = *v23 == (void)v20;
                      unint64_t v20 = v23;
                    }
                    while (!v18);
                  }
                  unint64_t v20 = v23;
                }
                while (v23 != v21);
              }
              degas::Bitmap::iterator::operator++(&v28);
            }
          }
          degas::Bitmap::begin(&v31, &v28);
          while (1)
          {
            unint64_t v24 = v29;
            if ((long long *)v28 == &v31 && v29 == -1)
            {
              if (v30 == v32[1]) {
                goto LABEL_6;
              }
              unint64_t v24 = -1;
            }
            degas::CountedPathCollection::addPath(a4, v11, v24, 1);
            degas::Bitmap::iterator::operator++(&v28);
          }
        }
        goto LABEL_49;
      }
      degas::Statement::bitmapColumnValue((sqlite3_stmt **)v33[0], 3, (degas::Bitmap *)&v39);
      if (v7) {
        degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)&v39, (degas::Bitmap *)&v36);
      }
      if (v39._bitSets.__begin_ == v39._bitSets.__end_
        || (uint64_t appended = degas::StepSpecification::appendTargetNodesForEdges(v15, a2, &v39, (degas::Bitmap *)&v31),
            !appended))
      {
        int v14 = *(_DWORD *)this;
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t appended = 0;
    }
LABEL_49:
    unint64_t v28 = (unint64_t)v32;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    degas::Cursor::~Cursor(v33);
LABEL_50:
    *(void *)&long long v31 = v35;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  }
  *(void *)&long long v34 = v37;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  *(void *)&long long v36 = &v38._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  v38._bitCount = (unint64_t)&v39._bitSets;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  return appended;
}

void sub_1D176D9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,degas::Statement *a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31)
{
  degas::Cursor::~Cursor(&a21);
  a15 = (void **)&a25;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a15);
  a23 = (void **)&a31;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a23);
  a29 = (void **)(v31 - 176);
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a29);
  *(void *)(v31 - 192) = v31 - 128;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 192));
  _Unwind_Resume(a1);
}

double degas::Traversal::Traversal(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4++*((void *)this + 1) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  return result;
}

{
  double result;

  *(void *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4++*((void *)this + 1) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  return result;
}

uint64_t degas::Traversal::setRecordingType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t degas::Traversal::startFromNodes(uint64_t a1, void *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, a1 + 64);
  if (!v3) {
    degas::Bitmap::operator=((void *)(a1 + 16), (void *)(a1 + 64));
  }
  return v3;
}

void *degas::Traversal::startFromNodes(degas::Traversal *this, const degas::Bitmap *a2)
{
  degas::Bitmap::operator=((void *)this + 8, a2);
  return degas::Bitmap::operator=((void *)this + 2, a2);
}

void degas::Traversal::addStep(degas::Traversal *this, const degas::StepSpecification *a2)
{
  unint64_t v4 = *((void *)this + 17);
  unint64_t v5 = *((void *)this + 18);
  if (v4 < v5)
  {
    *(_DWORD *)unint64_t v4 = *(_DWORD *)a2;
    uint64_t v6 = *((void *)a2 + 2);
    *(void *)(v4 + 8) = *((void *)a2 + 1);
    *(void *)(v4 + 16) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = *((void *)a2 + 4);
    *(void *)(v4 + 24) = *((void *)a2 + 3);
    *(void *)(v4 + 32) = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = (char *)(v4 + 40);
    goto LABEL_33;
  }
  uint64_t v9 = *((void *)this + 16);
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - v9) >> 3);
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0x666666666666666) {
    std::vector<unsigned long long>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v9) >> 3);
  if (2 * v12 > v11) {
    unint64_t v11 = 2 * v12;
  }
  if (v12 >= 0x333333333333333) {
    unint64_t v13 = 0x666666666666666;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v14 = (char *)operator new(40 * v13);
  }
  else
  {
    int v14 = 0;
  }
  long long v15 = &v14[40 * v10];
  *(_DWORD *)long long v15 = *(_DWORD *)a2;
  uint64_t v16 = *((void *)a2 + 2);
  *((void *)v15 + ++*((void *)this + 1) = *((void *)a2 + 1);
  *((void *)v15 + 2) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *((void *)a2 + 4);
  BOOL v18 = &v14[40 * v10];
  *((void *)v18 + 3) = *((void *)a2 + 3);
  *((void *)v18 + 4) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = &v14[40 * v13];
  uint64_t v8 = v15 + 40;
  unint64_t v20 = (char *)*((void *)this + 16);
  char v21 = (char *)*((void *)this + 17);
  if (v21 == v20)
  {
    *((void *)this + 16) = v15;
    *((void *)this + 17) = v8;
    *((void *)this + 18) = v19;
    if (!v21) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  unint64_t v22 = (char *)*((void *)this + 17);
  Bitmap v23 = v15;
  do
  {
    int v24 = *((_DWORD *)v22 - 10);
    v22 -= 40;
    *((_DWORD *)v23 - 10) = v24;
    v23 -= 40;
    uint64_t v25 = *((void *)v22 + 2);
    *((void *)v23 + ++*((void *)this + 1) = *((void *)v22 + 1);
    *((void *)v23 + 2) = v25;
    if (v25) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = *((void *)v21 - 1);
    *((void *)v15 - 2) = *((void *)v21 - 2);
    *((void *)v15 - ++*((void *)this + 1) = v26;
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    long long v15 = v23;
    char v21 = v22;
  }
  while (v22 != v20);
  unint64_t v27 = (char *)*((void *)this + 16);
  char v21 = (char *)*((void *)this + 17);
  *((void *)this + 16) = v23;
  *((void *)this + 17) = v8;
  *((void *)this + 18) = v19;
  if (v21 != v27)
  {
    do
    {
      v21 -= 40;
      std::allocator<degas::StepSpecification>::destroy[abi:ne180100]((uint64_t)v21);
    }
    while (v21 != v27);
    char v21 = v27;
  }
  if (v21) {
LABEL_32:
  }
    operator delete(v21);
LABEL_33:
  *((void *)this + 17) = v8;
}

void std::allocator<degas::StepSpecification>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void degas::Traversal::setTerminatingCondition(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 120);
  *(void *)(a1 + 112) = v3;
  *(void *)(a1 + 120) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t degas::Traversal::performFixedStepTraversal(degas::Traversal *this)
{
  int v3 = *((_DWORD *)this + 2);
  if (v3)
  {
    if (v3 == 2) {
      operator new();
    }
    if (v3 == 1) {
      operator new();
    }
    return 0;
  }
  degas::Bitmap::operator=((void *)this + 2, (void *)this + 8);
  uint64_t v4 = *((void *)this + 16);
  uint64_t v5 = *((void *)this + 17);
  if (v4 == v5) {
    return 0;
  }
  while (1)
  {
    LODWORD(v17[0]) = *(_DWORD *)v4;
    v17[1] = *(degas::UncountedPathCollection **)(v4 + 8);
    uint64_t v6 = *(atomic_ullong **)(v4 + 16);
    uint64_t v17[2] = (degas::UncountedPathCollection *)v6;
    if (v6) {
      atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v17[3] = *(degas::UncountedPathCollection **)(v4 + 24);
    uint64_t v7 = *(atomic_ullong **)(v4 + 32);
    v17[4] = (degas::UncountedPathCollection *)v7;
    if (v7) {
      atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
    }
    long long v15 = 0u;
    memset(v16, 0, 25);
    uint64_t v8 = degas::StepSpecification::performStepWithoutPathRecording((degas::StepSpecification *)v17, *(degas::Database **)this, (Bitmap *)((char *)this + 16), (degas::Bitmap *)&v15);
    uint64_t v9 = v8;
    if (v8)
    {
      BOOL v10 = 0;
      int v11 = 1;
      uint64_t v1 = v8;
    }
    else
    {
      degas::Bitmap::operator=((void *)this + 2, &v15);
      uint64_t v12 = *((void *)this + 4);
      uint64_t v13 = *((void *)this + 5);
      BOOL v10 = v12 != v13;
      if (v12 == v13) {
        int v11 = 7;
      }
      else {
        int v11 = 0;
      }
    }
    BOOL v18 = (void **)v16;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v18);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
    }
    if (!v10) {
      break;
    }
    v4 += 40;
    if (v4 == v5) {
      return v9;
    }
  }
  if (v11 == 7) {
    return v9;
  }
  return v1;
}

void sub_1D176E2B4(_Unwind_Exception *a1)
{
  MEMORY[0x1D25F9A90](v1, 0x1020C40A1339ED3);
  _Unwind_Resume(a1);
}

void std::shared_ptr<degas::UncountedPathCollection>::shared_ptr[abi:ne180100]<degas::UncountedPathCollection,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1D176E39C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::default_delete<degas::UncountedPathCollection>::operator()[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void degas::StepSpecification::~StepSpecification(degas::StepSpecification *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::shared_ptr<degas::CountedPathCollection>::shared_ptr[abi:ne180100]<degas::CountedPathCollection,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1D176E458(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::default_delete<degas::CountedPathCollection>::operator()[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<degas::CountedPathCollection>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (void **)(result + 40);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v2);
    std::__tree<std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::map<unsigned long long,int>>>>::destroy(*(void **)(v1 + 8));
    JUMPOUT(0x1D25F9A90);
  }
  return result;
}

void std::__tree<std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::map<unsigned long long,int>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::map<unsigned long long,int>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::map<unsigned long long,int>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::map<unsigned long long,int>>>>::destroy(a1[1]);
    std::__tree<unsigned long long>::destroy((void *)a1[6]);
    operator delete(a1);
  }
}

uint64_t std::__shared_ptr_pointer<degas::CountedPathCollection *,std::shared_ptr<degas::CountedPathCollection>::__shared_ptr_default_delete<degas::CountedPathCollection,degas::CountedPathCollection>,std::allocator<degas::CountedPathCollection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CE362)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::CountedPathCollection *,std::shared_ptr<degas::CountedPathCollection>::__shared_ptr_default_delete<degas::CountedPathCollection,degas::CountedPathCollection>,std::allocator<degas::CountedPathCollection>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<degas::CountedPathCollection>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<degas::CountedPathCollection *,std::shared_ptr<degas::CountedPathCollection>::__shared_ptr_default_delete<degas::CountedPathCollection,degas::CountedPathCollection>,std::allocator<degas::CountedPathCollection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

uint64_t std::default_delete<degas::UncountedPathCollection>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (void **)(result + 40);
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v2);
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>>>::destroy(*(void **)(v1 + 8));
    JUMPOUT(0x1D25F9A90);
  }
  return result;
}

void std::__tree<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<degas::Bitmap>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

uint64_t std::__shared_ptr_pointer<degas::UncountedPathCollection *,std::shared_ptr<degas::UncountedPathCollection>::__shared_ptr_default_delete<degas::UncountedPathCollection,degas::UncountedPathCollection>,std::allocator<degas::UncountedPathCollection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001D17CE277)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<degas::UncountedPathCollection *,std::shared_ptr<degas::UncountedPathCollection>::__shared_ptr_default_delete<degas::UncountedPathCollection,degas::UncountedPathCollection>,std::allocator<degas::UncountedPathCollection>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<degas::UncountedPathCollection>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<degas::UncountedPathCollection *,std::shared_ptr<degas::UncountedPathCollection>::__shared_ptr_default_delete<degas::UncountedPathCollection,degas::UncountedPathCollection>,std::allocator<degas::UncountedPathCollection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F9A90);
}

uint64_t degas::Traversal::performVariableStepTraversal(degas::Traversal *this)
{
  long long v11 = 0u;
  memset(v12, 0, 25);
  uint64_t v2 = *((void *)this + 14);
  if (v2
    && ((*(void (**)(uint64_t, long long *))(*(void *)v2 + 16))(v2, &v11),
        int v3 = (degas::StepSpecification *)*((void *)this + 16),
        v3 != *((degas::StepSpecification **)this + 17))
    && (*(_DWORD *)v3 || *((void *)v3 + 3)))
  {
    int v4 = *((_DWORD *)this + 2);
    switch(v4)
    {
      case 0:
        degas::Bitmap::operator=((void *)this + 2, (void *)this + 8);
        *(_OWORD *)uint64_t v9 = 0u;
        memset(v10, 0, 25);
        while (1)
        {
          *(_OWORD *)uint64_t v7 = 0u;
          memset(v8, 0, 25);
          if (!degas::StepSpecification::performStepWithoutPathRecording(v3, *(degas::Database **)this, (Bitmap *)((char *)this + 16), (degas::Bitmap *)v7))
          {
            if (v8[0] == v8[1] || degas::Bitmap::operator==((uint64_t)v7, (uint64_t)this + 16))
            {
              uint64_t v13 = (void **)v8;
              std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v13);
              degas::Bitmap::operator=((void *)this + 2, v9);
              v7[0] = (degas::UncountedPathCollection *)v10;
              std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v7);
              goto LABEL_19;
            }
            degas::Bitmap::operator=((void *)this + 2, v7);
            degas::Bitmap::intersectWith<degas::Bitmap>((degas::Bitmap *)v7, (degas::Bitmap *)&v11);
            if (v8[0] != v8[1]) {
              degas::Bitmap::unionWith<degas::Bitmap>((degas::Bitmap *)v9, (uint64_t)v7);
            }
          }
          uint64_t v13 = (void **)v8;
          std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v13);
        }
      case 2:
        operator new();
      case 1:
        operator new();
    }
LABEL_19:
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 6;
  }
  v9[0] = (degas::UncountedPathCollection *)v12;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)v9);
  return v5;
}

void sub_1D176EB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a9 = (void **)&a17;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)&a23;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t degas::Traversal::targetNodes(degas::Traversal *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (v1 == 2)
  {
    uint64_t v2 = *((void *)this + 19);
    return v2 + 24;
  }
  if (v1 == 1)
  {
    uint64_t v2 = *((void *)this + 21);
    return v2 + 24;
  }
  return (uint64_t)this + 16;
}

void degas::Traversal::populateDistribution(uint64_t a1, void *a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 2)
  {
    uint64_t v7 = *(void *)(a1 + 152);
    uint64_t v6 = *(void *)(a1 + 160);
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    *a2 = v7;
    a2[1] = v6;
    if (v5) {
      goto LABEL_6;
    }
  }
  else if (v2 == 1)
  {
    uint64_t v4 = *(void *)(a1 + 168);
    uint64_t v3 = *(void *)(a1 + 176);
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (std::__shared_weak_count *)a2[3];
    a2[2] = v4;
    a2[3] = v3;
    if (v5) {
LABEL_6:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t degas::Bitset::encodedLength(degas::Bitset *this)
{
  unint64_t v1 = *((void *)this + 1);
  if (v1 < 0x80)
  {
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v2 = -1;
    do
    {
      unint64_t v3 = v1 >> 14;
      v1 >>= 7;
      ++v2;
    }
    while (v3);
    uint64_t v4 = v2 + 2;
  }
  unsigned int v5 = *((_DWORD *)this + 1);
  if (v5 <= 0x7F)
  {
    uint64_t v9 = v4 + 1;
  }
  else
  {
    uint64_t v6 = -1;
    unint64_t v7 = *((unsigned int *)this + 1);
    do
    {
      unint64_t v8 = v7 >> 14;
      v7 >>= 7;
      ++v6;
    }
    while (v8);
    uint64_t v9 = v6 + v4 + 2;
    if (v5 == 1024) {
      return v9;
    }
  }
  for (uint64_t i = 0; i != 32; ++i)
  {
    unint64_t v11 = (*((_DWORD *)this + i + 4) + 1);
    if (v11 < 0x80)
    {
      uint64_t v14 = 1;
    }
    else
    {
      uint64_t v12 = -1;
      do
      {
        unint64_t v13 = v11 >> 14;
        v11 >>= 7;
        ++v12;
      }
      while (v13);
      uint64_t v14 = v12 + 2;
    }
    v9 += v14;
  }
  return v9;
}

uint64_t degas::Bitset::appendEncodedToBuffer(uint64_t this, unsigned __int8 **a2)
{
  unint64_t v2 = *(void *)(this + 8);
  if (v2 < 0x80)
  {
    unint64_t v4 = *(void *)(this + 8);
  }
  else
  {
    do
    {
      unint64_t v3 = (*a2)++;
      *unint64_t v3 = v2 | 0x80;
      unint64_t v4 = v2 >> 7;
      unint64_t v5 = v2 >> 14;
      v2 >>= 7;
    }
    while (v5);
  }
  uint64_t v6 = (*a2)++;
  *uint64_t v6 = v4;
  unint64_t v7 = *(unsigned int *)(this + 4);
  if (v7 < 0x80)
  {
    LODWORD(v9) = *(_DWORD *)(this + 4);
  }
  else
  {
    do
    {
      unint64_t v8 = (*a2)++;
      *unint64_t v8 = v7 | 0x80;
      unint64_t v9 = v7 >> 7;
      unint64_t v10 = v7 >> 14;
      v7 >>= 7;
    }
    while (v10);
  }
  unint64_t v11 = (*a2)++;
  *unint64_t v11 = v9;
  if (*(_DWORD *)(this + 4) != 1024)
  {
    for (uint64_t i = 0; i != 32; ++i)
    {
      unint64_t v13 = (*(_DWORD *)(this + 4 * i + 16) + 1);
      if (v13 < 0x80)
      {
        LODWORD(v1++*((void *)this + 5) = *(_DWORD *)(this + 4 * i + 16) + 1;
      }
      else
      {
        do
        {
          uint64_t v14 = (*a2)++;
          unsigned __int8 *v14 = v13 | 0x80;
          unint64_t v15 = v13 >> 7;
          unint64_t v16 = v13 >> 14;
          v13 >>= 7;
        }
        while (v16);
      }
      uint64_t v17 = (*a2)++;
      *uint64_t v17 = v15;
    }
  }
  return this;
}

degas::Bitset *degas::Bitset::Bitset(degas::Bitset *this, const unsigned __int8 **a2)
{
  *(_DWORD *)this = 0;
  *((void *)this + ++*((void *)this + 1) = degas::_getUnsignedInt((degas *)a2, a2);
  int UnsignedInt = degas::_getUnsignedInt((degas *)a2, v4);
  *((_DWORD *)this + ++*((void *)this + 1) = UnsignedInt;
  if (UnsignedInt == 1024)
  {
    *(void *)&long long v7 = -1;
    *((void *)&v7 + ++*((void *)this + 1) = -1;
    *((_OWORD *)this + 7) = v7;
    *((_OWORD *)this + 8) = v7;
    *((_OWORD *)this + ++*((void *)this + 5) = v7;
    *((_OWORD *)this + 6) = v7;
    *((_OWORD *)this + 3) = v7;
    *((_OWORD *)this + 4) = v7;
    *((_OWORD *)this + ++*((void *)this + 1) = v7;
    *((_OWORD *)this + 2) = v7;
    *((_DWORD *)this + ++*((void *)this + 1) = 1024;
  }
  else
  {
    for (uint64_t i = 0; i != 128; i += 4)
      *(_DWORD *)((char *)this + i + 16) = degas::_getUnsignedInt((degas *)a2, v6) - 1;
  }
  return this;
}

uint64_t degas::_getUnsignedInt(degas *this, const unsigned __int8 **a2)
{
  unint64_t v2 = (unsigned __int8 *)(*(void *)this)++;
  int v3 = (char)*v2;
  uint64_t v4 = *v2;
  if (v3 < 0) {
    return (v4 - 128) + (degas::_getUnsignedInt(this, a2) << 7);
  }
  return v4;
}

BOOL degas::Bitset::setBit(degas::Bitset *this, uint64_t a2)
{
  unint64_t v2 = a2 - *((void *)this + 1);
  int v3 = 1 << v2;
  uint64_t v4 = (char *)this + 4 * (v2 >> 5);
  int v7 = *((_DWORD *)v4 + 4);
  unint64_t v5 = (int *)(v4 + 16);
  int v6 = v7;
  int v8 = v3 & v7;
  if ((v3 & v7) == 0)
  {
    *unint64_t v5 = v3 | v6;
    int v9 = *((_DWORD *)this + 1);
    if (v9 != -1) {
      *((_DWORD *)this + ++*((void *)this + 1) = v9 + 1;
    }
  }
  return v8 == 0;
}

BOOL degas::Bitset::clearBit(degas::Bitset *this, uint64_t a2)
{
  unint64_t v2 = a2 - *((void *)this + 1);
  int v3 = 1 << v2;
  uint64_t v4 = (char *)this + 4 * (v2 >> 5);
  int v7 = *((_DWORD *)v4 + 4);
  unint64_t v5 = (int *)(v4 + 16);
  int v6 = v7;
  int v8 = v3 & v7;
  if ((v3 & v7) != 0)
  {
    *unint64_t v5 = v6 & ~v3;
    int v9 = *((_DWORD *)this + 1);
    if (v9 != -1) {
      *((_DWORD *)this + ++*((void *)this + 1) = v9 - 1;
    }
  }
  return v8 != 0;
}

void *degas::Bitset::setRange(void *this, unint64_t a2, unint64_t a3)
{
  if (a2 <= a3)
  {
    uint64_t v3 = (uint64_t)this;
    unint64_t v4 = this[1];
    unint64_t v5 = v4 + 1024;
    unint64_t v6 = a2 - v4;
    BOOL v7 = a2 >= v4 && v5 > a2;
    if (v7 && v5 > a3)
    {
      unint64_t v9 = v6 >> 5;
      unint64_t v10 = a3 - v4;
      int v11 = -2 << v6;
      BOOL v12 = (v6 & 0x1F) == 31;
      int v13 = 1 << v6;
      if (v12) {
        int v14 = -1;
      }
      else {
        int v14 = ~v11;
      }
      int v15 = v14 & ~v13;
      int v16 = (-1 << v10) & ~(1 << v10);
      if (v9 == v10 >> 5)
      {
        v16 |= v15;
        unint64_t v17 = v9;
      }
      else
      {
        unint64_t v17 = v10 >> 5;
        BOOL v18 = (char *)this + 4 * v9;
        *((_DWORD *)v18 + 4) |= ~v15;
        if (v9 + 1 < v17) {
          this = memset(v18 + 20, 255, 4 * (v17 + ~v9));
        }
      }
      *(_DWORD *)(v3 + 4 * v17 + 16) |= ~v16;
      *(_DWORD *)(v3 + 4) = -1;
    }
  }
  return this;
}

void degas::Bitset::clearRange(degas::Bitset *this, unint64_t a2, unint64_t a3)
{
  if (a2 <= a3)
  {
    unint64_t v4 = *((void *)this + 1);
    unint64_t v5 = v4 + 1024;
    unint64_t v6 = a2 - v4;
    BOOL v7 = a2 >= v4 && v5 > a2;
    if (v7 && v5 > a3)
    {
      unint64_t v9 = v6 >> 5;
      unint64_t v10 = a3 - v4;
      int v11 = -2 << v6;
      BOOL v12 = (v6 & 0x1F) == 31;
      int v13 = 1 << v6;
      if (v12) {
        int v14 = -1;
      }
      else {
        int v14 = ~v11;
      }
      int v15 = v14 & ~v13;
      int v16 = (-1 << v10) & ~(1 << v10);
      if (v9 == v10 >> 5)
      {
        v16 |= v15;
        unint64_t v17 = v9;
      }
      else
      {
        unint64_t v17 = v10 >> 5;
        BOOL v18 = (char *)this + 4 * v9;
        *((_DWORD *)v18 + 4) &= v15;
        if (v9 + 1 < v17) {
          bzero(v18 + 20, 4 * (v17 + ~v9));
        }
      }
      *((_DWORD *)this + v17 + 4) &= v16;
      *((_DWORD *)this + ++*((void *)this + 1) = -1;
    }
  }
}

uint64_t degas::Bitset::countBitsInRange(degas::Bitset *this, unint64_t a2, unint64_t a3, int8x8_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = v4 + 1023;
  if (v4 < a2 || v5 > a3)
  {
    uint64_t v7 = 0;
    if (v5 >= a3) {
      unint64_t v5 = a3;
    }
    unint64_t v8 = a2 - v4;
    if (a2 < v4) {
      unint64_t v8 = 0;
    }
    unint64_t v9 = v5 - v4;
    unint64_t v10 = v9 >> 5;
    int v11 = v9 & 0x1F;
    int v12 = -2 << v9;
    if (v11 == 31) {
      int v13 = -1;
    }
    else {
      int v13 = ~v12;
    }
    if (v10 >= v8 >> 5)
    {
      uint64_t v14 = 0;
      uint64_t v7 = 0;
      unint64_t v15 = v8 >> 5;
      int v16 = -1 << v8;
      unint64_t v17 = v10 - v15;
      do
      {
        if (v14) {
          int v18 = -1;
        }
        else {
          int v18 = v16;
        }
        if (v17 == v14) {
          int v19 = v13;
        }
        else {
          int v19 = -1;
        }
        a4.i32[0] = v19 & v18 & *((_DWORD *)this + v15 + v14 + 4);
        a4 = vcnt_s8(a4);
        a4.i16[0] = vaddlv_u8((uint8x8_t)a4);
        v7 += a4.u32[0];
        ++v14;
      }
      while (v17 + 1 != v14);
    }
  }
  else
  {
    unsigned int v20 = *((_DWORD *)this + 1);
    if (v20 == -1)
    {
      uint64_t v21 = 0;
      int32x4_t v22 = 0uLL;
      do
      {
        do
        {
          int32x4_t v22 = (int32x4_t)vpadalq_u16((uint32x4_t)v22, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)((char *)this + 4 * v21 + 16))));
          v21 += 4;
        }
        while (v21 != 32);
        uint64_t v21 = 0;
        unsigned int v20 = vaddvq_s32(v22);
        int32x4_t v22 = 0uLL;
      }
      while (v20 == -1);
      *((_DWORD *)this + ++*((void *)this + 1) = v20;
    }
    return v20;
  }
  return v7;
}

BOOL degas::Bitset::overlapsWith(degas::Bitset *this, const degas::Bitset *a2)
{
  if ((*((_DWORD *)a2 + 4) & *((_DWORD *)this + 4)) != 0) {
    return 1;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 31;
  while (v3 != 31)
  {
    int v5 = *((_DWORD *)this + v3 + 5);
    int v6 = *((_DWORD *)a2 + v3++ + 5);
    if ((v6 & v5) != 0)
    {
      unint64_t v4 = v3 - 1;
      return v4 < 0x1F;
    }
  }
  return v4 < 0x1F;
}

BOOL degas::Bitset::isSubsetOf(degas::Bitset *this, const degas::Bitset *a2)
{
  BOOL v2 = 0;
  for (unint64_t i = 0; i != 32; ++i)
  {
    int v4 = *((_DWORD *)this + i + 4);
    if (v4 && (v4 & ~*((_DWORD *)a2 + i + 4)) != 0) {
      break;
    }
    BOOL v2 = i > 0x1E;
  }
  return v2;
}

unint64_t degas::Bitset::rangeOfBatch(degas::Bitset *this, unint64_t a2, unint64_t *a3, unint64_t *a4, uint32x4_t a5)
{
  unint64_t v8 = *((void *)this + 1);
  unint64_t v9 = *a3 - v8;
  if (*a3 <= v8)
  {
    unsigned int v18 = *((_DWORD *)this + 1);
    if (v18 == -1)
    {
      uint64_t v19 = 0;
      a5 = 0uLL;
      do
      {
        do
        {
          a5 = vpadalq_u16(a5, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)((char *)this + 4 * v19 + 16))));
          v19 += 4;
        }
        while (v19 != 32);
        uint64_t v19 = 0;
        unsigned int v18 = vaddvq_s32((int32x4_t)a5);
        a5 = 0uLL;
      }
      while (v18 == -1);
      *((_DWORD *)this + ++*((void *)this + 1) = v18;
    }
    unint64_t v17 = v18;
    if (v18 <= a2)
    {
      *a4 = v8 + 1023;
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      while (1)
      {
        unsigned __int32 v22 = *((_DWORD *)this + v21 + 4);
        a5.i32[0] = v22;
        *(int8x8_t *)a5.i8 = vcnt_s8(*(int8x8_t *)a5.i8);
        a5.i16[0] = vaddlv_u8(*(uint8x8_t *)a5.i8);
        unint64_t v17 = v20 + a5.u32[0];
        if (v17 >= a2) {
          break;
        }
        ++v21;
        v20 += a5.u32[0];
        if (v21 == 32) {
          return v17;
        }
      }
      if (v17 == a2)
      {
        uint64_t v23 = v8 + 32 * v21;
LABEL_33:
        *a4 = v23 + 31;
        return a2;
      }
      if (v17 > a2)
      {
        unint64_t v24 = v8 + 32 * v21;
        unint64_t v29 = v24;
        BOOL v25 = v8 + 1024 <= v24 || v8 > v24;
        uint64_t v26 = v22 & 1;
        if (v25) {
          uint64_t v26 = 0;
        }
        unint64_t v17 = v20 + v26;
        if (v20 + v26 < a2)
        {
          do
            v17 += degas::Bitset::nextBit(this, &v29, v29);
          while (v17 < a2);
          unint64_t v24 = v29;
        }
        *a4 = v24;
      }
    }
  }
  else if (*a3 > v8 + 1023 || v9 > 0x3FF)
  {
    return 0;
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = v9 >> 5;
    if (v9 >> 5 <= 0x1F) {
      uint64_t v13 = 31;
    }
    else {
      uint64_t v13 = v9 >> 5;
    }
    uint64_t v14 = v13 + 1;
    uint64_t v15 = (32 * v12) | 0x1F;
    while (1)
    {
      if (v10)
      {
        a5.i64[0] = *((unsigned int *)this + v12 + 4);
      }
      else
      {
        int v16 = ((*(_DWORD *)a3 - *((_DWORD *)this + 2)) & 0x1F) == 0x1F
            ? -1
            : ~(-2 << (*(_DWORD *)a3 - *((_DWORD *)this + 2)));
        a5.i32[0] = v16 & *((_DWORD *)this + v12 + 4);
      }
      *(int8x8_t *)a5.i8 = vcnt_s8(*(int8x8_t *)a5.i8);
      a5.i16[0] = vaddlv_u8(*(uint8x8_t *)a5.i8);
      unint64_t v17 = v11 + a5.u32[0];
      if (v17 >= a2) {
        break;
      }
      ++v12;
      *a4 = v15 + *((void *)this + 1);
      v15 += 32;
      --v10;
      v11 += a5.u32[0];
      if (v14 == v12) {
        return v17;
      }
    }
    if (v17 == a2)
    {
      uint64_t v23 = *((void *)this + 1) + 32 * v12;
      goto LABEL_33;
    }
    if (v17 > a2)
    {
      uint64_t v27 = *((void *)this + 1) + 32 * v12 - 1;
      unint64_t v29 = v27;
      if (v11 < a2)
      {
        do
          v11 += degas::Bitset::nextBit(this, &v29, v29);
        while (v11 < a2);
        uint64_t v27 = v29;
      }
      *a4 = v27;
      return v11;
    }
  }
  return v17;
}

uint64_t degas::Bitset::nextBit(degas::Bitset *this, unint64_t *a2, unint64_t a3)
{
  unint64_t v3 = *((void *)this + 1);
  while (1)
  {
    if (a3 != -1)
    {
      unint64_t v4 = a3 - v3;
      if (a3 >= v3) {
        break;
      }
    }
    a3 = *((void *)this + 1);
    if (v3 <= 0xFFFFFFFFFFFFFBFFLL)
    {
      a3 = *((void *)this + 1);
      if (*((unsigned char *)this + 16)) {
        goto LABEL_18;
      }
    }
  }
  unint64_t v5 = v4 >> 5;
  if ((v4 & 0x1F) == 0x1F || (unsigned int v6 = *((_DWORD *)this + v5 + 4) & (-2 << (v4 & 0x1F))) == 0)
  {
    if (v4 > 0x3DF) {
      return 0;
    }
    uint64_t v7 = 30;
    if (v5 > 0x1E) {
      uint64_t v7 = v5;
    }
    uint64_t v8 = v7 + 1;
    while (1)
    {
      unint64_t v9 = v5 + 1;
      unsigned int v10 = *((_DWORD *)this + v5 + 5);
      if (v10) {
        break;
      }
      unint64_t v5 = v9;
      if (v8 == v9) {
        return 0;
      }
    }
    v3 += __clz(__rbit32(v10)) | (32 * v9);
  }
  else
  {
    v3 += (v4 & 0xFFFFFFFFFFFFFFE0) + __clz(__rbit32(v6));
  }
LABEL_18:
  *a2 = v3;
  return 1;
}

uint64_t degas::Bitset::firstBit(degas::Bitset *this, unint64_t *a2)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2 > 0xFFFFFFFFFFFFFBFFLL || (*((unsigned char *)this + 16) & 1) == 0) {
    return degas::Bitset::nextBit(this, a2, v2);
  }
  *a2 = v2;
  return 1;
}

uint64_t degas::Bitset::lastBit(degas::Bitset *this, unint64_t *a2)
{
  for (uint64_t i = 35; i != 4; --i)
  {
    unsigned int v3 = *((_DWORD *)this + i);
    if (v3)
    {
      uint64_t v4 = i - 4;
      goto LABEL_7;
    }
  }
  unsigned int v3 = *((_DWORD *)this + 4);
  if (v3)
  {
    uint64_t v4 = 0;
LABEL_7:
    *a2 = (__clz(v3) ^ 0x1F | (unint64_t)(32 * v4)) + *((void *)this + 1);
    return 1;
  }
  return 0;
}

uint64_t __Block_byref_object_copy__3356(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3357(uint64_t a1)
{
}

double degas::StatementPerformanceEntry::reset(degas::StatementPerformanceEntry *this)
{
  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + ++*((void *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  return result;
}

double degas::StatementPerformanceEntry::addStep(degas::StatementPerformanceEntry *this, double a2, unsigned int a3)
{
  *((void *)this + 2) += a3;
  double result = *((double *)this + 6) + a2;
  *((double *)this + 6) = result;
  return result;
}

int32x2_t degas::StatementPerformanceEntry::addIO(int32x2_t *this, int32x2_t *a2)
{
  int32x2_t result = vadd_s32(this[7], *a2);
  this[7] = result;
  this[8].i32[0] += a2[1].i32[0];
  return result;
}

uint64_t degas::StatementPerformanceLog::StatementPerformanceLog(uint64_t a1, long long *a2)
{
  *(_DWORD *)a1 = -1;
  unsigned int v3 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  return a1;
}

{
  std::string *v3;
  long long v4;

  *(_DWORD *)a1 = -1;
  unsigned int v3 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  return a1;
}

uint64_t degas::StatementPerformanceLog::appendEntry(degas::StatementPerformanceLog *this, const degas::StatementPerformanceEntry *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  unsigned int v3 = (void *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)__p, 1);
  long long v4 = (void *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__p, 1);
  unint64_t v5 = (void *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 1);
  unsigned int v6 = (void *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)__p, 1);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)__p, 1);
  uint64_t v8 = (void *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)__p, 1);
  unint64_t v9 = (void *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)__p, 1);
  unsigned int v10 = (void *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  unint64_t v11 = (void *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)__p, 1);
  unint64_t v12 = (void *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 44;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)__p, 1);
  uint64_t v13 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
  uint64_t v14 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  degas::LocalLogFile::writeText(this, (const void **)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  v18[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D25F9A50](&v20);
}

void sub_1D1774DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

unint64_t degas::StatementPerformanceLog::rowCountForTable(degas::StatementPerformanceLog *this, const degas::Table *a2)
{
  unint64_t v5 = (unsigned __int8 **)((char *)this + 40);
  long long v4 = (char **)*((void *)this + 5);
  if (!v4) {
    goto LABEL_12;
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + 48);
  uint64_t v7 = (unsigned __int8 **)((char *)this + 40);
  do
  {
    unsigned int v8 = *((unsigned __int8 *)v4 + 32);
    BOOL v9 = v8 >= v6;
    if (v8 >= v6) {
      unsigned int v10 = v4;
    }
    else {
      unsigned int v10 = v4 + 1;
    }
    if (v9) {
      uint64_t v7 = (unsigned __int8 **)v4;
    }
    long long v4 = (char **)*v10;
  }
  while (*v10);
  if (v7 != v5 && v6 >= *((unsigned __int8 *)v7 + 32)) {
    return (unint64_t)v7[5];
  }
LABEL_12:
  unint64_t v21 = 0;
  int v11 = degas::Table::rowCount(a2, (sqlite3_int64 *)&v21);
  unint64_t v12 = v21;
  if (!v11)
  {
    unsigned int v13 = *((unsigned __int8 *)a2 + 48);
    uint64_t v14 = *v5;
    uint64_t v15 = v5;
    if (*v5)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v15 = (unsigned __int8 **)v14;
          unsigned int v16 = v14[32];
          if (v13 >= v16) {
            break;
          }
          uint64_t v14 = *v15;
          unint64_t v5 = v15;
          if (!*v15) {
            goto LABEL_20;
          }
        }
        if (v16 >= v13) {
          break;
        }
        uint64_t v14 = v15[1];
        if (!v14)
        {
          unint64_t v5 = v15 + 1;
          goto LABEL_20;
        }
      }
    }
    else
    {
LABEL_20:
      char v17 = (unsigned __int8 *)v15;
      uint64_t v15 = (unsigned __int8 **)operator new(0x30uLL);
      *((unsigned char *)v15 + 32) = v13;
      void v15[5] = 0;
      *uint64_t v15 = 0;
      v15[1] = 0;
      _OWORD v15[2] = v17;
      *unint64_t v5 = (unsigned __int8 *)v15;
      uint64_t v18 = **((void **)this + 4);
      char v19 = (uint64_t *)v15;
      if (v18)
      {
        *((void *)this + 4) = v18;
        char v19 = (uint64_t *)*v5;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 5), v19);
      ++*((void *)this + 6);
    }
    void v15[5] = (unsigned __int8 *)v12;
  }
  return v12;
}

void sub_1D17755FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3521(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3522(uint64_t a1)
{
}

void sub_1D17768F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1776B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D17784C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D17786B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t degas::DatabaseMap::DatabaseMap(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)this = this + 8;
  *(void *)(this + 40) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = this + 32;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)(this + 8) = 0;
  *(void *)this = this + 8;
  *(void *)(this + 40) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = this + 32;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void degas::DatabaseMap::registerDatabase(void **a1, std::string::size_type a2, std::string::size_type a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = (os_unfair_lock_s *)(a1 + 6);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 12);
  uint64_t v7 = a1 + 3;
  unsigned int v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::find<std::string>((uint64_t)(a1 + 3), (void *)a2);
  uint64_t v9 = (char **)(a1 + 4);
  if (a1 + 4 != (void **)v8)
  {
    unsigned int v10 = v8;
    memset(&__p, 0, sizeof(__p));
    degas::callstack((uint64_t)&__p);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      std::string::size_type v24 = *(void *)a2;
      if (*(char *)(a2 + 23) >= 0) {
        std::string::size_type v24 = a2;
      }
      BOOL v25 = v10 + 7;
      if (*((char *)v10 + 79) < 0) {
        BOOL v25 = (void *)*v25;
      }
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(v28.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 4) = v24;
      WORD2(v28.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
      HIWORD(v28.__r_.__value_.__r.__words[2]) = 2080;
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      _os_log_fault_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "second open attempt on database at path %s\nprevious call stack:\n%s\ncurrent call stack:\n%s", (uint8_t *)&v28, 0x20u);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1 + 3, v10);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v10 + 4));
    operator delete(v10);
    int v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::find<std::string>((uint64_t)a1, (void *)a2);
    if (a1 + 1 != v11) {
      std::__tree<std::__value_type<std::string,degas::Database *>,std::__map_value_compare<std::string,std::__value_type<std::string,degas::Database *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,degas::Database *>>>::erase(a1, (uint64_t)v11);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v28 = *(std::string *)a2;
  }
  v29.__r_.__value_.__r.__words[0] = a3;
  unsigned int v13 = a1 + 1;
  unint64_t v12 = a1[1];
  if (v12)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v13 = v12;
        uint64_t v14 = v12 + 4;
        if (!std::less<std::string>::operator()[abi:ne180100](&v28, v12 + 4)) {
          break;
        }
        unint64_t v12 = (void *)*v13;
        uint64_t v15 = v13;
        if (!*v13) {
          goto LABEL_18;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v14, &v28)) {
        break;
      }
      uint64_t v15 = v13 + 1;
      unint64_t v12 = (void *)v13[1];
      if (!v12) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    uint64_t v15 = a1 + 1;
LABEL_18:
    unsigned int v16 = operator new(0x40uLL);
    _OWORD v16[2] = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
    std::string::size_type v17 = v28.__r_.__value_.__r.__words[2];
    memset(&v28, 0, sizeof(v28));
    *((void *)v16 + 6) = v17;
    *((void *)v16 + 7) = a3;
    *(void *)unsigned int v16 = 0;
    *((void *)v16 + ++*((void *)this + 1) = 0;
    *((void *)v16 + 2) = v13;
    *uint64_t v15 = v16;
    uint64_t v18 = (void *)**a1;
    if (v18)
    {
      *a1 = v18;
      unsigned int v16 = (_OWORD *)*v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v16);
    a1[2] = (void *)((char *)a1[2] + 1);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  degas::callstack((uint64_t)&__p);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v28 = *(std::string *)a2;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v29 = __p;
  }
  while (1)
  {
    char v19 = *v9;
    uint64_t v20 = v9;
    if (!*v9) {
      break;
    }
    while (1)
    {
      uint64_t v9 = (char **)v19;
      unint64_t v21 = v19 + 32;
      if (std::less<std::string>::operator()[abi:ne180100](&v28, (void *)v19 + 4)) {
        break;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v21, &v28)) {
        goto LABEL_36;
      }
      uint64_t v20 = v9 + 1;
      char v19 = v9[1];
      if (!v19) {
        goto LABEL_33;
      }
    }
  }
LABEL_33:
  unsigned __int32 v22 = (char *)operator new(0x50uLL);
  *(std::string *)(v22 + 32) = v28;
  memset(&v28, 0, sizeof(v28));
  *(std::string *)(v22 + 56) = v29;
  memset(&v29, 0, sizeof(v29));
  *(void *)unsigned __int32 v22 = 0;
  *((void *)v22 + ++*((void *)this + 1) = 0;
  *((void *)v22 + 2) = v9;
  char *v20 = v22;
  uint64_t v23 = (void *)**v7;
  if (v23)
  {
    *uint64_t v7 = v23;
    unsigned __int32 v22 = *v20;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[4], (uint64_t *)v22);
  a1[5] = (void *)((char *)a1[5] + 1);
LABEL_36:
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  os_unfair_lock_unlock(v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1D1779AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  unint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unsigned int v3 = v2;
      unint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    long long v4 = a2;
    do
    {
      unsigned int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      long long v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  unsigned int v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,degas::Database *>,std::__map_value_compare<std::string,std::__value_type<std::string,degas::Database *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,degas::Database *>>>::erase(void *a1, uint64_t a2)
{
  unsigned int v3 = *(void **)(a2 + 8);
  if (v3)
  {
    do
    {
      long long v4 = v3;
      unsigned int v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    BOOL v5 = (void *)a2;
    do
    {
      long long v4 = (void *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      BOOL v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  uint64_t v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  operator delete((void *)a2);
}

void degas::DatabaseMap::deregisterDatabase(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  BOOL v6 = (os_unfair_lock_s *)(a1 + 48);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::find<std::string>(a1, a2);
  if ((void *)(a1 + 8) == v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v12 = a2;
      }
      else {
        unint64_t v12 = (uint64_t *)*a2;
      }
      int v13 = 136315138;
      uint64_t v14 = v12;
      _os_log_fault_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "double deregister of a database at path %s", (uint8_t *)&v13, 0xCu);
    }
  }
  else
  {
    uint64_t v8 = (uint64_t)v7;
    uint64_t v9 = (uint64_t *)v7[7];
    if (v9 != a3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      int v13 = 134218240;
      uint64_t v14 = a3;
      __int16 v15 = 2048;
      unsigned int v16 = v9;
      _os_log_fault_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "deregister of different database instance %p != %p", (uint8_t *)&v13, 0x16u);
    }
    std::__tree<std::__value_type<std::string,degas::Database *>,std::__map_value_compare<std::string,std::__value_type<std::string,degas::Database *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,degas::Database *>>>::erase((void *)a1, v8);
  }
  unsigned int v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<degas::LabelIndex_Persisted>>>>::find<std::string>(a1 + 24, a2);
  if ((uint64_t *)(a1 + 32) != v10)
  {
    int v11 = v10;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v10);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v11 + 4));
    operator delete(v11);
  }
  os_unfair_lock_unlock(v6);
}

void *degas::nullStatementPtr(degas *this)
{
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<degas::Statement>::~shared_ptr[abi:ne180100], &degas::nullStatementPtr(void)::nullPtr, &dword_1D1654000);
  }
  return &degas::nullStatementPtr(void)::nullPtr;
}

uint64_t std::shared_ptr<degas::Statement>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t degas::Statement::enableQueryExplain(uint64_t this)
{
  degas::sExplainQuery = this;
  if (this) {
    degas::sExplainQueryPlan = 0;
  }
  return this;
}

uint64_t degas::Statement::enableQueryPlanExplain(uint64_t this)
{
  degas::sExplainQueryPlan = this;
  if (this) {
    degas::sExplainQuery = 0;
  }
  return this;
}

sqlite3_stmt **degas::Statement::Statement(sqlite3_stmt **ppStmt, sqlite3 *db, uint64_t a3)
{
  v52[19] = *MEMORY[0x1E4F143B8];
  *((_DWORD *)ppStmt + ++*((void *)this + 5) = 0;
  *ppStmt = 0;
  ppStmt[1] = db;
  int v6 = *(char *)(a3 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const char *)a3;
  }
  else {
    uint64_t v7 = *(const char **)a3;
  }
  if (v6 >= 0) {
    int v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    int v8 = *(_DWORD *)(a3 + 8);
  }
  int v9 = sqlite3_prepare_v2(db, v7, v8, ppStmt, 0);
  if (v9)
  {
    if (degas::DegasLoggingConnection(void)::onceToken[0] != -1) {
      dispatch_once(degas::DegasLoggingConnection(void)::onceToken, &__block_literal_global_5277);
    }
    unsigned int v10 = degas::DegasLoggingConnection(void)::log;
    if (os_log_type_enabled((os_log_t)degas::DegasLoggingConnection(void)::log, OS_LOG_TYPE_FAULT))
    {
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v33 = (const char *)a3;
      }
      else {
        uint64_t v33 = *(const char **)a3;
      }
      *(_DWORD *)uint64_t v47 = 136315650;
      *(void *)&v47[4] = v33;
      *(_WORD *)&v47[12] = 1024;
      *(_DWORD *)&v47[14] = v9;
      __int16 v48 = 2080;
      uint64_t v49 = sqlite3_errmsg(db);
      _os_log_fault_impl(&dword_1D1654000, v10, OS_LOG_TYPE_FAULT, "Failed to prepare statement for query: <%s> rc=%d err=<%s>", v47, 0x1Cu);
    }
  }
  *((_DWORD *)ppStmt + 4) = v9;
  if (degas::sExplainQueryPlan | degas::sExplainQuery)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v47);
    if (degas::sExplainQueryPlan) {
      int v11 = "explain query plan ";
    }
    else {
      int v11 = "explain ";
    }
    if (degas::sExplainQueryPlan) {
      uint64_t v12 = 19;
    }
    else {
      uint64_t v12 = 8;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v11, v12);
    int v13 = *(char *)(a3 + 23);
    if (v13 >= 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = *(void *)a3;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v15 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v14, v15);
    std::stringbuf::str();
    ppStmta = 0;
    if ((v42 & 0x80u) == 0) {
      unsigned int v16 = (const char *)&v40;
    }
    else {
      unsigned int v16 = (const char *)v40;
    }
    if ((v42 & 0x80u) == 0) {
      int v17 = v42;
    }
    else {
      int v17 = v41;
    }
    sqlite3_prepare_v2(db, v16, v17, &ppStmta, 0);
    int v18 = sqlite3_step(ppStmta);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
    for (int i = v18; i == 100; int i = sqlite3_step(ppStmta))
    {
      int v20 = sqlite3_column_count(ppStmta);
      if (v20 >= 1)
      {
        for (int j = 0; j != v20; ++j)
        {
          unsigned __int32 v22 = sqlite3_column_text(ppStmta, j);
          uint64_t v23 = (uint64_t)v22;
          if (v22)
          {
            size_t v24 = strlen((const char *)v22);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v23, v24);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" ", 1);
          }
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
    }
    if (v18 == 100)
    {
      if (degas::DegasLoggingConnection(void)::onceToken[0] != -1) {
        dispatch_once(degas::DegasLoggingConnection(void)::onceToken, &__block_literal_global_5277);
      }
      BOOL v25 = degas::DegasLoggingConnection(void)::log;
      if (os_log_type_enabled((os_log_t)degas::DegasLoggingConnection(void)::log, OS_LOG_TYPE_INFO))
      {
        int v26 = *(char *)(a3 + 23);
        uint64_t v27 = *(const char **)a3;
        std::stringbuf::str();
        uint64_t v28 = v26 >= 0 ? a3 : (uint64_t)v27;
        std::string v29 = v35 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 136315394;
        uint64_t v44 = v28;
        __int16 v45 = 2080;
        uint64_t v46 = v29;
        _os_log_impl(&dword_1D1654000, v25, OS_LOG_TYPE_INFO, "query plan for: %s\n%s", buf, 0x16u);
        if (v35 < 0) {
          operator delete(__p);
        }
      }
    }
    sqlite3_finalize(ppStmta);
    v36[0] = *MEMORY[0x1E4FBA418];
    uint64_t v30 = v36[0];
    uint64_t v31 = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *(void *)((char *)v36 + *(void *)(v36[0] - 24)) = v31;
    v36[1] = MEMORY[0x1E4FBA470] + 16;
    if (v37 < 0) {
      operator delete((void *)v36[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1D25F9A50](&v38);
    if ((char)v42 < 0) {
      operator delete(v40);
    }
    *(void *)uint64_t v47 = v30;
    *(void *)&v47[*(void *)(v30 - 24)] = v31;
    *(void *)&v47[8] = MEMORY[0x1E4FBA470] + 16;
    if (v51 < 0) {
      operator delete(v50);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1D25F9A50](v52);
  }
  return ppStmt;
}

void sub_1D177A448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a56);
  _Unwind_Resume(a1);
}

void degas::Statement::~Statement(degas::Statement *this)
{
  if (*((_DWORD *)this + 4) == 100)
  {
    if (degas::DegasLoggingConnection(void)::onceToken[0] != -1) {
      dispatch_once(degas::DegasLoggingConnection(void)::onceToken, &__block_literal_global_5277);
    }
    unint64_t v2 = degas::DegasLoggingConnection(void)::log;
    if (os_log_type_enabled((os_log_t)degas::DegasLoggingConnection(void)::log, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)unsigned int v3 = 0;
      _os_log_debug_impl(&dword_1D1654000, v2, OS_LOG_TYPE_DEBUG, "deleting statement with possible open cursor", v3, 2u);
    }
  }
  if (*(void *)this)
  {
    sqlite3_finalize(*(sqlite3_stmt **)this);
    *(void *)this = 0;
  }
}

uint64_t degas::Statement::statementIdentifier(degas::Statement *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t degas::Statement::setStatementIdentifier(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

uint64_t degas::Statement::prepareForUse(degas::Statement *this)
{
  if (*((_DWORD *)this + 4) == 100)
  {
    if (degas::DegasLoggingConnection(void)::onceToken[0] != -1) {
      dispatch_once(degas::DegasLoggingConnection(void)::onceToken, &__block_literal_global_5277);
    }
    unint64_t v2 = degas::DegasLoggingConnection(void)::log;
    if (os_log_type_enabled((os_log_t)degas::DegasLoggingConnection(void)::log, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int v8 = 0;
      _os_log_debug_impl(&dword_1D1654000, v2, OS_LOG_TYPE_DEBUG, "resetting statement with possible open cursor", v8, 2u);
    }
  }
  int v3 = sqlite3_reset(*(sqlite3_stmt **)this);
  if (v3 == 101) {
    int v4 = 2;
  }
  else {
    int v4 = 3;
  }
  if (v3 == 100) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = v4;
  }
  if (v3 == 17) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = 3;
  }
  if (!v3) {
    unsigned int v6 = 0;
  }
  if (v3 <= 99) {
    return v6;
  }
  else {
    return v5;
  }
}

uint64_t degas::Statement::bindInteger(sqlite3_stmt **this, int a2, sqlite3_int64 a3)
{
  int v4 = sqlite3_bind_int64(*this, a2, a3);
  *((_DWORD *)this + 4) = v4;
  if (v4 == 101) {
    int v5 = 2;
  }
  else {
    int v5 = 3;
  }
  if (v4 == 100) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = v5;
  }
  if (v4 == 17) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = 3;
  }
  if (!v4) {
    unsigned int v7 = 0;
  }
  if (v4 <= 99) {
    return v7;
  }
  else {
    return v6;
  }
}

uint64_t degas::Statement::bindDouble(sqlite3_stmt **this, int a2, double a3)
{
  int v4 = sqlite3_bind_double(*this, a2, a3);
  *((_DWORD *)this + 4) = v4;
  if (v4 == 101) {
    int v5 = 2;
  }
  else {
    int v5 = 3;
  }
  if (v4 == 100) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = v5;
  }
  if (v4 == 17) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = 3;
  }
  if (!v4) {
    unsigned int v7 = 0;
  }
  if (v4 <= 99) {
    return v7;
  }
  else {
    return v6;
  }
}

uint64_t degas::Statement::bindString(uint64_t a1, int a2, uint64_t *a3)
{
  int v4 = *(sqlite3_stmt **)a1;
  int v5 = *((char *)a3 + 23);
  int v6 = *((_DWORD *)a3 + 2);
  if (v5 >= 0)
  {
    int v7 = v5;
  }
  else
  {
    a3 = (uint64_t *)*a3;
    int v7 = v6;
  }
  int v8 = sqlite3_bind_text(v4, a2, (const char *)a3, v7, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = 3;
  if (v8 > 99)
  {
    if (v8 == 100)
    {
      return 1;
    }
    else if (v8 == 101)
    {
      return 2;
    }
  }
  else if (v8)
  {
    if (v8 == 17) {
      return 4;
    }
    else {
      return 3;
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t degas::Statement::bindBitmap(degas::Statement *this, const Bitmap *a2, const degas::Bitmap *a3)
{
  int v3 = (int)a2;
  degas::LiteralBitmap::makeLiteralBitmap(a3, a2);
  int v6 = v5;
  uint64_t v7 = degas::Statement::bindLiteralBitmap((uint64_t)this, v3, v5);
  MEMORY[0x1D25F9A90](v6, 0x1000C4000313F17);
  return v7;
}

uint64_t degas::Statement::bindLiteralBitmap(uint64_t a1, int a2, _DWORD *a3)
{
  int v4 = sqlite3_bind_blob(*(sqlite3_stmt **)a1, a2, a3, (144 * a3[1]) | 8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  *(_DWORD *)(a1 + 16) = v4;
  uint64_t result = 3;
  if (v4 > 99)
  {
    if (v4 == 100)
    {
      return 1;
    }
    else if (v4 == 101)
    {
      return 2;
    }
  }
  else if (v4)
  {
    if (v4 == 17) {
      return 4;
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t degas::Statement::bindBitmapPointer(sqlite3_stmt **this, int a2, Bitmap *a3)
{
  uint64_t result = sqlite3_bind_pointer(*this, a2, a3, (const char *)degas::kBitmapPointerTypeName, 0);
  *((_DWORD *)this + 4) = result;
  if ((int)result > 99)
  {
    if (result == 100) {
      return 1;
    }
    BOOL v5 = result == 101;
    unsigned int v6 = 2;
  }
  else
  {
    if (!result) {
      return result;
    }
    BOOL v5 = result == 17;
    unsigned int v6 = 4;
  }
  if (v5) {
    return v6;
  }
  else {
    return 3;
  }
}

uint64_t degas::Statement::bindArrayPointer(sqlite3_stmt **this, int a2, void *a3)
{
  uint64_t result = sqlite3_bind_pointer(*this, a2, a3, (const char *)degas::kArrayPointerTypeName, 0);
  *((_DWORD *)this + 4) = result;
  if ((int)result > 99)
  {
    if (result == 100) {
      return 1;
    }
    BOOL v5 = result == 101;
    unsigned int v6 = 2;
  }
  else
  {
    if (!result) {
      return result;
    }
    BOOL v5 = result == 17;
    unsigned int v6 = 4;
  }
  if (v5) {
    return v6;
  }
  else {
    return 3;
  }
}

uint64_t degas::Statement::bindNull(sqlite3_stmt **this, int a2)
{
  int v3 = sqlite3_bind_null(*this, a2);
  *((_DWORD *)this + 4) = v3;
  if (v3 == 101) {
    int v4 = 2;
  }
  else {
    int v4 = 3;
  }
  if (v3 == 100) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = v4;
  }
  if (v3 == 17) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = 3;
  }
  if (!v3) {
    unsigned int v6 = 0;
  }
  if (v3 <= 99) {
    return v6;
  }
  else {
    return v5;
  }
}

uint64_t degas::Statement::next(sqlite3_stmt **this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v2 = sqlite3_step(*this);
  *((_DWORD *)this + 4) = v2;
  if ((v2 - 102) <= 0xFFFFFFFD)
  {
    if (degas::DegasLoggingConnection(void)::onceToken[0] != -1) {
      dispatch_once(degas::DegasLoggingConnection(void)::onceToken, &__block_literal_global_5277);
    }
    int v3 = degas::DegasLoggingConnection(void)::log;
    if (os_log_type_enabled((os_log_t)degas::DegasLoggingConnection(void)::log, OS_LOG_TYPE_ERROR))
    {
      v8[0] = 67109120;
      v8[1] = v2;
      _os_log_error_impl(&dword_1D1654000, v3, OS_LOG_TYPE_ERROR, "statement step error: %d", (uint8_t *)v8, 8u);
    }
  }
  if (v2 == 101) {
    int v4 = 2;
  }
  else {
    int v4 = 3;
  }
  if (v2 == 100) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = v4;
  }
  if (v2 == 17) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = 3;
  }
  if (!v2) {
    unsigned int v6 = 0;
  }
  if (v2 <= 99) {
    return v6;
  }
  else {
    return v5;
  }
}

uint64_t degas::Statement::finishStatementCursor(degas::Statement *this)
{
  int v1 = *((_DWORD *)this + 4);
  if (v1 > 99)
  {
    if (v1 == 100)
    {
      int v5 = sqlite3_reset(*(sqlite3_stmt **)this);
      *((_DWORD *)this + 4) = 101;
      if (v5 == 101) {
        int v6 = 2;
      }
      else {
        int v6 = 3;
      }
      if (v5 == 100) {
        unsigned int v7 = 1;
      }
      else {
        unsigned int v7 = v6;
      }
      if (v5 == 17) {
        unsigned int v8 = 4;
      }
      else {
        unsigned int v8 = 3;
      }
      if (!v5) {
        unsigned int v8 = 0;
      }
      if (v5 <= 99) {
        return v8;
      }
      else {
        return v7;
      }
    }
    else if (v1 == 101)
    {
      return 2;
    }
    else
    {
      return 3;
    }
  }
  else
  {
    if (v1 == 17) {
      unsigned int v2 = 4;
    }
    else {
      unsigned int v2 = 3;
    }
    if (v1) {
      return v2;
    }
    else {
      return 0;
    }
  }
}

uint64_t degas::Statement::update(sqlite3_stmt **this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v2 = sqlite3_step(*this);
  *((_DWORD *)this + 4) = v2;
  if ((v2 - 102) <= 0xFFFFFFFD)
  {
    if (degas::DegasLoggingConnection(void)::onceToken[0] != -1) {
      dispatch_once(degas::DegasLoggingConnection(void)::onceToken, &__block_literal_global_5277);
    }
    int v3 = degas::DegasLoggingConnection(void)::log;
    if (os_log_type_enabled((os_log_t)degas::DegasLoggingConnection(void)::log, OS_LOG_TYPE_ERROR))
    {
      v8[0] = 67109120;
      v8[1] = v2;
      _os_log_error_impl(&dword_1D1654000, v3, OS_LOG_TYPE_ERROR, "statement update error: %d", (uint8_t *)v8, 8u);
    }
  }
  if (v2 == 101) {
    int v4 = 0;
  }
  else {
    int v4 = v2;
  }
  if (v4 == 100) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = 3;
  }
  if (v4 == 17) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = 3;
  }
  if (!v4) {
    unsigned int v6 = 0;
  }
  if (v4 <= 99) {
    return v6;
  }
  else {
    return v5;
  }
}

BOOL degas::Statement::isError(degas::Statement *this)
{
  int v1 = *((_DWORD *)this + 4);
  return (v1 - 100) >= 2 && v1 != 0;
}

sqlite3_int64 degas::Statement::integerColumnValue(sqlite3_stmt **this, int a2)
{
  return sqlite3_column_int64(*this, a2);
}

double degas::Statement::realColumnValue(sqlite3_stmt **this, int a2)
{
  return sqlite3_column_double(*this, a2);
}

void degas::Statement::stringColumnValue(sqlite3_stmt **a1, int a2, uint64_t a3)
{
  int v4 = (char *)sqlite3_column_text(*a1, a2);
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v5, v4);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = v5;
    *(void *)(a3 + 16) = v6;
  }
  else
  {
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
}

void degas::Statement::bitmapColumnValue(sqlite3_stmt **this, int a2, degas::Bitmap *a3)
{
  int v4 = degas::Statement::literalBitmapColumnValue(this, a2);
  if (v4)
  {
    degas::Bitmap::Bitmap((degas::Bitmap *)v7, (const degas::LiteralBitmap *)v4);
    degas::Bitmap::operator=(a3, v7);
    uint64_t v9 = (void **)&v8;
    std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
  else
  {
    *(void *)a3 = 0;
    *((void *)a3 + ++*((void *)this + 1) = 0;
    uint64_t v5 = *((void *)a3 + 2);
    for (uint64_t i = *((void *)a3 + 3); i != v5; i -= 16)
    {
      degas::BitsetPtr::releaseBitset((degas::BitsetPtr *)(i - 16));
      *(void *)(i - 8) = 0;
    }
    *((void *)a3 + 3) = v5;
  }
}

void sub_1D177AE10(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1 + 16;
  std::vector<degas::BitsetPtr>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

unsigned int *degas::Statement::literalBitmapColumnValue(sqlite3_stmt **this, int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v4 = (unsigned int *)sqlite3_column_blob(*this, a2);
  int v5 = sqlite3_column_bytes(*this, a2);
  if (((144 * v4[1]) | 8) != v5)
  {
    int v6 = v5;
    if (degas::DegasLoggingConnection(void)::onceToken[0] != -1) {
      dispatch_once(degas::DegasLoggingConnection(void)::onceToken, &__block_literal_global_5277);
    }
    unsigned int v7 = degas::DegasLoggingConnection(void)::log;
    if (os_log_type_enabled((os_log_t)degas::DegasLoggingConnection(void)::log, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (144 * v4[1]) | 8;
      int v10 = 134218240;
      uint64_t v11 = v6;
      __int16 v12 = 2048;
      uint64_t v13 = v9;
      _os_log_error_impl(&dword_1D1654000, v7, OS_LOG_TYPE_ERROR, "bad literal bitmap read, column has %lu bytes, bitmap thinks it needs %lu", (uint8_t *)&v10, 0x16u);
    }
    return 0;
  }
  return v4;
}

const void *degas::Statement::blobColumnValue(sqlite3_stmt **this, int a2)
{
  return sqlite3_column_blob(*this, a2);
}

uint64_t degas::Statement::sqliteDataType(sqlite3_stmt **this, int a2)
{
  return sqlite3_column_type(*this, a2);
}

uint64_t degas::Statement::measureIO(sqlite3 **this, degas::IOAccountingEntry *a2)
{
  int pHiwtr = 0;
  int v4 = sqlite3_db_status(this[1], 8, (int *)a2 + 1, &pHiwtr, 0);
  if (!v4)
  {
    int v4 = sqlite3_db_status(this[1], 7, (int *)a2, &pHiwtr, 0);
    if (!v4) {
      int v4 = sqlite3_db_status(this[1], 12, (int *)a2 + 2, &pHiwtr, 0);
    }
  }
  if (v4 == 101) {
    int v5 = 2;
  }
  else {
    int v5 = 3;
  }
  if (v4 == 100) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = v5;
  }
  if (v4 == 17) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = 3;
  }
  if (!v4) {
    unsigned int v7 = 0;
  }
  if (v4 <= 99) {
    return v7;
  }
  else {
    return v6;
  }
}

void *degas::Cursor::Cursor(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *uint64_t result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = a2[1];
  *uint64_t result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = a2[1];
  *uint64_t result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = a2[1];
  *uint64_t result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

__n128 degas::Cursor::Cursor(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void degas::Cursor::~Cursor(degas::Statement **this)
{
  degas::Statement::finishStatementCursor(*this);
  uint64_t v2 = (std::__shared_weak_count *)this[1];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t degas::Cursor::columnDataType(sqlite3_stmt ***this, int a2)
{
  LODWORD(result) = sqlite3_column_type(**this, a2);
  if ((result - 1) >= 3) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t degas::EdgeTable::deleteEntry(sqlite3 **this, sqlite3_int64 a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v4 = degas::EdgeTable::deleteStatement((degas::EdgeTable *)this);
  degas::Statement::bindInteger((sqlite3_stmt **)*v4, 1, a2);
  uint64_t v5 = degas::Statement::update((sqlite3_stmt **)*v4);
  if (v5 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    unsigned int v7 = sqlite3_errmsg(this[4]);
    int v8 = 136315138;
    uint64_t v9 = v7;
    _os_log_error_impl(&dword_1D1654000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "edge delete failed: %s", (uint8_t *)&v8, 0xCu);
  }
  return v5;
}

uint64_t *degas::EdgeTable::deleteStatement(degas::EdgeTable *this)
{
  unsigned int v1 = (*((unsigned __int8 *)this + 48) << 16) | 0x500;
  uint64_t v2 = *((void *)this + 5);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = ___ZNK5degas9EdgeTable15deleteStatementEv_block_invoke;
  void v4[3] = &__block_descriptor_tmp_5;
  v4[4] = this;
  return degas::StatementCache::getStatement(v2, v1, (uint64_t)v4);
}

void ___ZNK5degas9EdgeTable15deleteStatementEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"delete from ", 12);
  int v2 = *(char *)(v1 + 31);
  if (v2 >= 0) {
    uint64_t v3 = v1 + 8;
  }
  else {
    uint64_t v3 = *(void *)(v1 + 8);
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(v1 + 31);
  }
  else {
    uint64_t v4 = *(void *)(v1 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)" where identifier=?1", 20);
  operator new();
}

void sub_1D177B45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x1D25F9A90](v15, 0x1020C4062D53EE8);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t degas::EdgeTable::createTable(degas::EdgeTable *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"create table ", 13);
  int v2 = *((char *)this + 31);
  if (v2 >= 0) {
    uint64_t v3 = (char *)this + 8;
  }
  else {
    uint64_t v3 = (char *)*((void *)this + 1);
  }
  if (v2 >= 0) {
    uint64_t v4 = *((unsigned __int8 *)this + 31);
  }
  else {
    uint64_t v4 = *((void *)this + 2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" (identifier integer primary key autoincrement, labels blob, sourceNodeId integer, targetNodeId integer)", 104);
  uint64_t v5 = (sqlite3 *)*((void *)this + 4);
  std::stringbuf::str();
  degas::Statement::Statement(ppStmt, v5, (uint64_t)__p);
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = degas::Statement::update(ppStmt);
  uint64_t v7 = MEMORY[0x1E4FBA418];
  if (!v6)
  {
    if (*((unsigned char *)this + 49))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"create index ", 13);
      int v8 = *((char *)this + 31);
      if (v8 >= 0) {
        uint64_t v9 = (char *)this + 8;
      }
      else {
        uint64_t v9 = (char *)*((void *)this + 1);
      }
      if (v8 >= 0) {
        uint64_t v10 = *((unsigned __int8 *)this + 31);
      }
      else {
        uint64_t v10 = *((void *)this + 2);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"_source_idx on ", 15);
      int v11 = *((char *)this + 31);
      if (v11 >= 0) {
        __int16 v12 = (char *)this + 8;
      }
      else {
        __int16 v12 = (char *)*((void *)this + 1);
      }
      if (v11 >= 0) {
        uint64_t v13 = *((unsigned __int8 *)this + 31);
      }
      else {
        uint64_t v13 = *((void *)this + 2);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v12, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)" (sourceNodeId)", 15);
      uint64_t v14 = (sqlite3 *)*((void *)this + 4);
      std::stringbuf::str();
      degas::Statement::Statement(v33, v14, (uint64_t)v28);
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      uint64_t v6 = degas::Statement::update(v33);
      if (v6)
      {
        uint64_t v15 = *(void **)v7;
        unsigned int v16 = *(void **)(v7 + 24);
      }
      else
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"create index ", 13);
        int v17 = *((char *)this + 31);
        if (v17 >= 0) {
          int v18 = (char *)this + 8;
        }
        else {
          int v18 = (char *)*((void *)this + 1);
        }
        if (v17 >= 0) {
          uint64_t v19 = *((unsigned __int8 *)this + 31);
        }
        else {
          uint64_t v19 = *((void *)this + 2);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v18, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"_target_idx on ", 15);
        int v20 = *((char *)this + 31);
        if (v20 >= 0) {
          unint64_t v21 = (char *)this + 8;
        }
        else {
          unint64_t v21 = (char *)*((void *)this + 1);
        }
        if (v20 >= 0) {
          uint64_t v22 = *((unsigned __int8 *)this + 31);
        }
        else {
          uint64_t v22 = *((void *)this + 2);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v21, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" (targetNodeId)", 15);
        uint64_t v23 = (sqlite3 *)*((void *)this + 4);
        std::stringbuf::str();
        degas::Statement::Statement(v27, v23, (uint64_t)&v25);
        if (v26 < 0) {
          operator delete(v25);
        }
        uint64_t v6 = degas::Statement::update(v27);
        degas::Statement::~Statement((degas::Statement *)v27);
        uint64_t v15 = *(void **)v7;
        v28[0] = *(void **)v7;
        unsigned int v16 = *(void **)(v7 + 24);
        *(void **)((char *)v28 + *((void *)v28[0] - 3)) = v16;
        v28[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
        if (v31 < 0) {
          operator delete(v30);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1D25F9A50](&v32);
      }
      degas::Statement::~Statement((degas::Statement *)v33);
      __p[0] = v15;
      *(void **)((char *)__p + *((void *)v15 - 3)) = v16;
      __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
      if (v37 < 0) {
        operator delete(v36);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1D25F9A50](&v38);
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  degas::Statement::~Statement((degas::Statement *)ppStmt);
  v40[0] = *(void *)v7;
  *(void *)((char *)v40 + *(void *)(v40[0] - 24)) = *(void *)(v7 + 24);
  v40[1] = MEMORY[0x1E4FBA470] + 16;
  if (v41 < 0) {
    operator delete((void *)v40[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D25F9A50](&v42);
  return v6;
}